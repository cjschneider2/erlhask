module 'edoc_lib' ['copy_file'/2,
		   'count'/2,
		   'datestr'/1,
		   'escape_uri'/1,
		   'filename'/1,
		   'find_doc_dirs'/0,
		   'find_file'/3,
		   'find_sources'/2,
		   'find_sources'/3,
		   'get_doc_env'/1,
		   'get_doc_env'/4,
		   'get_first_sentence'/1,
		   'is_name'/1,
		   'is_relative_uri'/1,
		   'is_space'/1,
		   'join_uri'/2,
		   'lines'/1,
		   'module_info'/0,
		   'module_info'/1,
		   'parse_contact'/2,
		   'parse_expr'/2,
		   'read_encoding'/2,
		   'read_info_file'/1,
		   'run_doclet'/2,
		   'run_layout'/2,
		   'segment'/2,
		   'simplify_path'/1,
		   'split_at'/2,
		   'split_at_space'/1,
		   'split_at_stop'/1,
		   'strip_space'/1,
		   'timestr'/1,
		   'to_label'/1,
		   'transpose'/1,
		   'try_subdir'/2,
		   'unique'/1,
		   'uri_get'/1,
		   'write_file'/3,
		   'write_file'/4,
		   'write_file'/5,
		   'write_info_file'/4]
    attributes [%% Line 32
		'type' =
		    %% Line 32
		    [{{'record','context'},[{'record_field',32,{'atom',32,'dir'},{'string',32,[]}}|[{'record_field',33,{'atom',33,'env'}}|[{'record_field',34,{'atom',34,'opts'},{'nil',34}}]]],[]}],
		%% Line 51
		'type' =
		    %% Line 51
		    [{{'record','doclet_gen'},[{'record_field',51,{'atom',51,'sources'},{'nil',51}}|[{'record_field',52,{'atom',52,'app'},{'nil',52}}|[{'record_field',53,{'atom',53,'packages'},{'nil',53}}|[{'record_field',54,{'atom',54,'modules'},{'nil',54}}|[{'record_field',55,{'atom',55,'filemap'}}]]]]],[]}],
		%% Line 61
		'type' =
		    %% Line 61
		    [{{'record','doclet_toc'},[{'record_field',61,{'atom',61,'paths'}}|[{'record_field',62,{'atom',62,'indir'}}]],[]}],
		%% Line 56
		'type' =
		    %% Line 56
		    [{{'record','module'},[{'record_field',56,{'atom',56,'name'},{'nil',56}}|[{'record_field',57,{'atom',57,'parameters'},{'atom',57,'none'}}|[{'record_field',58,{'atom',58,'functions'},{'nil',58}}|[{'record_field',59,{'atom',59,'exports'},{'nil',59}}|[{'record_field',60,{'atom',60,'attributes'},{'nil',60}}|[{'record_field',61,{'atom',61,'records'},{'nil',61}}|[{'record_field',62,{'atom',62,'encoding'},{'atom',62,'latin1'}}]]]]]]],[]}],
		%% Line 67
		'type' =
		    %% Line 67
		    [{{'record','env'},[{'record_field',67,{'atom',67,'module'},{'nil',67}}|[{'record_field',68,{'atom',68,'package'},{'nil',68}}|[{'record_field',69,{'atom',69,'root'},{'string',69,[]}}|[{'record_field',70,{'atom',70,'file_suffix'}}|[{'record_field',71,{'atom',71,'package_summary'}}|[{'record_field',72,{'atom',72,'apps'}}|[{'record_field',73,{'atom',73,'modules'}}|[{'record_field',74,{'atom',74,'packages'}}|[{'record_field',75,{'atom',75,'app_default'}}|[{'record_field',76,{'atom',76,'macros'},{'nil',76}}|[{'record_field',77,{'atom',77,'includes'},{'nil',77}}]]]]]]]]]]],[]}],
		%% Line 85
		'type' =
		    %% Line 85
		    [{{'record','comment'},[{'record_field',85,{'atom',85,'line'},{'integer',85,0}}|[{'record_field',85,{'atom',85,'text'}}]],[]}],
		%% Line 96
		'type' =
		    %% Line 96
		    [{{'record','entry'},[{'record_field',96,{'atom',96,'name'}}|[{'record_field',96,{'atom',96,'args'},{'nil',96}}|[{'record_field',96,{'atom',96,'line'},{'integer',96,0}}|[{'record_field',96,{'atom',96,'export'}}|[{'record_field',96,{'atom',96,'data'}}]]]]],[]}],
		%% Line 105
		'type' =
		    %% Line 105
		    [{{'record','tag'},[{'record_field',105,{'atom',105,'name'}}|[{'record_field',105,{'atom',105,'line'},{'integer',105,0}}|[{'record_field',105,{'atom',105,'origin'},{'atom',105,'comment'}}|[{'record_field',105,{'atom',105,'data'}}]]]],[]}],
		%% Line 37
		'type' =
		    %% Line 37
		    [{{'record','xmlDecl'},[{'record_field',38,{'atom',38,'vsn'}}|[{'record_field',39,{'atom',39,'encoding'}}|[{'record_field',40,{'atom',40,'standalone'}}|[{'record_field',41,{'atom',41,'attributes'}}]]]],[]}],
		%% Line 45
		'type' =
		    %% Line 45
		    [{{'record','xmlAttribute'},[{'record_field',46,{'atom',46,'name'}}|[{'record_field',47,{'atom',47,'expanded_name'},{'nil',47}}|[{'record_field',48,{'atom',48,'nsinfo'},{'nil',48}}|[{'record_field',49,{'atom',49,'namespace'},{'nil',49}}|[{'record_field',50,{'atom',50,'parents'},{'nil',50}}|[{'record_field',51,{'atom',51,'pos'}}|[{'record_field',52,{'atom',52,'language'},{'nil',52}}|[{'record_field',53,{'atom',53,'value'}}|[{'record_field',54,{'atom',54,'normalized'}}]]]]]]]]],[]}],
		%% Line 58
		'type' =
		    %% Line 58
		    [{{'record','xmlNamespace'},[{'record_field',59,{'atom',59,'default'},{'nil',59}}|[{'record_field',60,{'atom',60,'nodes'},{'nil',60}}]],[]}],
		%% Line 64
		'type' =
		    %% Line 64
		    [{{'record','xmlNsNode'},[{'record_field',65,{'atom',65,'parents'},{'nil',65}}|[{'record_field',66,{'atom',66,'pos'}}|[{'record_field',67,{'atom',67,'prefix'}}|[{'record_field',68,{'atom',68,'uri'},{'nil',68}}]]]],[]}],
		%% Line 73
		'type' =
		    %% Line 73
		    [{{'record','xmlElement'},[{'record_field',74,{'atom',74,'name'}}|[{'record_field',75,{'atom',75,'expanded_name'},{'nil',75}}|[{'record_field',76,{'atom',76,'nsinfo'},{'nil',76}}|[{'record_field',77,{'atom',77,'namespace'},{'record',77,'xmlNamespace',[]}}|[{'record_field',78,{'atom',78,'parents'},{'nil',78}}|[{'record_field',79,{'atom',79,'pos'}}|[{'record_field',80,{'atom',80,'attributes'},{'nil',80}}|[{'record_field',81,{'atom',81,'content'},{'nil',81}}|[{'record_field',82,{'atom',82,'language'},{'string',82,[]}}|[{'record_field',83,{'atom',83,'xmlbase'},{'string',83,[]}}|[{'record_field',84,{'atom',84,'elementdef'},{'atom',84,'undeclared'}}]]]]]]]]]]],[]}],
		%% Line 89
		'type' =
		    %% Line 89
		    [{{'record','xmlText'},[{'record_field',90,{'atom',90,'parents'},{'nil',90}}|[{'record_field',91,{'atom',91,'pos'}}|[{'record_field',92,{'atom',92,'language'},{'nil',92}}|[{'record_field',93,{'atom',93,'value'}}|[{'record_field',94,{'atom',94,'type'},{'atom',94,'text'}}]]]]],[]}],
		%% Line 98
		'type' =
		    %% Line 98
		    [{{'record','xmlComment'},[{'record_field',99,{'atom',99,'parents'},{'nil',99}}|[{'record_field',100,{'atom',100,'pos'}}|[{'record_field',101,{'atom',101,'language'},{'nil',101}}|[{'record_field',102,{'atom',102,'value'}}]]]],[]}],
		%% Line 106
		'type' =
		    %% Line 106
		    [{{'record','xmlPI'},[{'record_field',107,{'atom',107,'name'}}|[{'record_field',108,{'atom',108,'parents'},{'nil',108}}|[{'record_field',109,{'atom',109,'pos'}}|[{'record_field',110,{'atom',110,'value'}}]]]],[]}],
		%% Line 113
		'type' =
		    %% Line 113
		    [{{'record','xmlDocument'},[{'record_field',114,{'atom',114,'content'}}],[]}],
		%% Line 120
		'type' =
		    %% Line 120
		    [{{'record','xmlContext'},[{'record_field',121,{'atom',121,'axis_type'},{'atom',121,'forward'}}|[{'record_field',122,{'atom',122,'context_node'}}|[{'record_field',123,{'atom',123,'context_position'},{'integer',123,1}}|[{'record_field',124,{'atom',124,'nodeset'},{'nil',124}}|[{'record_field',125,{'atom',125,'bindings'},{'nil',125}}|[{'record_field',126,{'atom',126,'functions'},{'nil',126}}|[{'record_field',127,{'atom',127,'namespace'},{'nil',127}}|[{'record_field',128,{'atom',128,'whole_document'}}]]]]]]]],[]}],
		%% Line 131
		'type' =
		    %% Line 131
		    [{{'record','xmlNode'},[{'record_field',132,{'atom',132,'type'},{'atom',132,'element'}}|[{'record_field',133,{'atom',133,'node'}}|[{'record_field',134,{'atom',134,'parents'},{'nil',134}}|[{'record_field',135,{'atom',135,'pos'},{'integer',135,1}}]]]],[]}],
		%% Line 138
		'type' =
		    %% Line 138
		    [{{'record','xmlObj'},[{'record_field',139,{'atom',139,'type'}}|[{'record_field',140,{'atom',140,'value'}}]],[]}],
		%% Line 143
		'type' =
		    %% Line 143
		    [{{'record','xmerl_fun_states'},[{'record_field',143,{'atom',143,'event'}}|[{'record_field',144,{'atom',144,'hook'}}|[{'record_field',145,{'atom',145,'rules'}}|[{'record_field',146,{'atom',146,'fetch'}}|[{'record_field',147,{'atom',147,'cont'}}]]]]],[]}],
		%% Line 151
		'type' =
		    %% Line 151
		    [{{'record','xmerl_scanner'},[{'record_field',152,{'atom',152,'encoding'},{'atom',152,'undefined'}}|[{'record_field',153,{'atom',153,'standalone'},{'atom',153,'no'}}|[{'record_field',155,{'atom',155,'environment'},{'atom',155,'prolog'}}|[{'record_field',156,{'atom',156,'declarations'},{'nil',156}}|[{'record_field',157,{'atom',157,'doctype_name'}}|[{'record_field',158,{'atom',158,'doctype_DTD'},{'atom',158,'internal'}}|[{'record_field',159,{'atom',159,'comments'},{'atom',159,'true'}}|[{'record_field',160,{'atom',160,'document'},{'atom',160,'false'}}|[{'record_field',161,{'atom',161,'default_attrs'},{'atom',161,'false'}}|[{'record_field',162,{'atom',162,'rules'}}|[{'record_field',163,{'atom',163,'keep_rules'},{'atom',163,'false'}}|[{'record_field',164,{'atom',164,'namespace_conformant'},{'atom',164,'false'}}|[{'record_field',165,{'atom',165,'xmlbase'}}|[{'record_field',166,{'atom',166,'xmlbase_cache'}}|[{'record_field',167,{'atom',167,'fetch_path'},{'nil',167}}|[{'record_field',169,{'atom',169,'filename'},{'atom',169,'file_name_unknown'}}|[{'record_field',170,{'atom',170,'validation'},{'atom',170,'off'}}|[{'record_field',171,{'atom',171,'schemaLocation'},{'nil',171}}|[{'record_field',172,{'atom',172,'space'},{'atom',172,'preserve'}}|[{'record_field',173,{'atom',173,'event_fun'}}|[{'record_field',174,{'atom',174,'hook_fun'}}|[{'record_field',175,{'atom',175,'acc_fun'}}|[{'record_field',176,{'atom',176,'fetch_fun'}}|[{'record_field',177,{'atom',177,'close_fun'}}|[{'record_field',178,{'atom',178,'continuation_fun'}}|[{'record_field',179,{'atom',179,'rules_read_fun'}}|[{'record_field',180,{'atom',180,'rules_write_fun'}}|[{'record_field',181,{'atom',181,'rules_delete_fun'}}|[{'record_field',182,{'atom',182,'user_state'}}|[{'record_field',183,{'atom',183,'fun_states'},{'record',183,'xmerl_fun_states',[]}}|[{'record_field',184,{'atom',184,'entity_references'},{'nil',184}}|[{'record_field',185,{'atom',185,'text_decl'},{'atom',185,'false'}}|[{'record_field',186,{'atom',186,'quiet'},{'atom',186,'false'}}|[{'record_field',187,{'atom',187,'col'},{'integer',187,1}}|[{'record_field',188,{'atom',188,'line'},{'integer',188,1}}|[{'record_field',189,{'atom',189,'common_data'},{'nil',189}}]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[]}],
		%% Line 198
		'type' =
		    %% Line 198
		    [{{'record','xmerl_event'},[{'record_field',199,{'atom',199,'event'}}|[{'record_field',200,{'atom',200,'line'}}|[{'record_field',201,{'atom',201,'col'}}|[{'record_field',202,{'atom',202,'pos'}}|[{'record_field',203,{'atom',203,'data'}}]]]]],[]}],
		%% Line 319
		'type' =
		    %% Line 319
		    [{{'record','info'},[{'typed_record_field',{'record_field',319,{'atom',319,'name'},{'string',319,[]}},{'type',319,'string',[]}}|[{'typed_record_field',{'record_field',320,{'atom',320,'email'},{'string',320,[]}},{'type',320,'string',[]}}|[{'typed_record_field',{'record_field',321,{'atom',321,'uri'},{'string',321,[]}},{'type',321,'string',[]}}]]],[]}],
		%% Line 1052
		'type' =
		    %% Line 1052
		    [{'line',{'remote_type',1052,[{'atom',1052,'erl_scan'}|[{'atom',1052,'line'}|[[]]]]},[]}],
		%% Line 1053
		'type' =
		    %% Line 1053
		    [{'err',{'type',1053,'union',[{'atom',1053,'eof'}|[{'type',1054,'tuple',[{'atom',1054,'missing'}|[{'type',1054,'char',[]}]]}|[{'type',1055,'tuple',[{'type',1055,'line',[]}|[{'type',1055,'atom',[]}|[{'type',1055,'string',[]}]]]}|[{'type',1056,'string',[]}]]]]},[]}],
		%% Line 1058
		'spec' =
		    %% Line 1058
		    [{{'throw_error',2},[{'type',1058,'fun',[{'type',1058,'product',[{'type',1058,'err',[]}|[{'type',1058,'line',[]}]]}|[{'type',1058,'no_return',[]}]]}]}]]
'timestr'/1 =
    %% Line 50
    fun (_cor0) ->
	case _cor0 of
	  <{H,M,Sec}> when 'true' ->
	      let <_cor1> =
		  %% Line 51
		  call 'io_lib':'fwrite'
		      ([126|[50|[46|[50|[46|[48|[119|[58|[126|[50|[46|[50|[46|[48|[119|[58|[126|[50|[46|[50|[46|[48|[119]]]]]]]]]]]]]]]]]]]]]]], [H|[M|[Sec|[]]]])
	      in  %% Line 51
		  call 'lists':'flatten'
		      (_cor1)
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'timestr',1}}] )
	    -| ['compiler_generated'] )
	end
'datestr'/1 =
    %% Line 54
    fun (_cor0) ->
	case _cor0 of
	  <{Y,M,D}> when 'true' ->
	      let <_cor2> =
		  %% Line 57
		  call 'lists':'nth'
		      (M, [[74|[97|[110]]]|[[70|[101|[98]]]|[[77|[97|[114]]]|[[65|[112|[114]]]|[[77|[97|[121]]]|[[74|[117|[110]]]|[[74|[117|[108]]]|[[65|[117|[103]]]|[[83|[101|[112]]]|[[79|[99|[116]]]|[[78|[111|[118]]]|[[68|[101|[99]]]]]]]]]]]]]]])
	      in  let <_cor3> =
		      %% Line 57
		      call 'io_lib':'fwrite'
			  ([126|[115|[32|[126|[119|[32|[126|[119]]]]]]]], [_cor2|[D|[Y|[]]]])
		  in  %% Line 57
		      call 'lists':'flatten'
			  (_cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'datestr',1}}] )
	    -| ['compiler_generated'] )
	end
'read_encoding'/2 =
    %% Line 60
    fun (_cor1,_cor0) ->
	%% Line 61
	case call 'epp':'read_encoding'
		 (_cor1, _cor0) of
	  %% Line 62
	  <'none'> when 'true' ->
	      call 'epp':'default_encoding'
		  ()
	  %% Line 63
	  <Encoding> when 'true' ->
	      Encoding
	end
'count'/2 =
    %% Line 67
    fun (_cor1,_cor0) ->
	%% Line 68
	apply 'count'/3
	    (_cor1, _cor0, 0)
'count'/3 =
    %% Line 70
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <X,[_cor7|Xs],N>
	      when call 'erlang':'=:='
		    (_cor7,
		     X) ->
	      let <_cor3> =
		  %% Line 71
		  call 'erlang':'+'
		      (N, 1)
	      in  %% Line 71
		  apply 'count'/3
		      (X, Xs, _cor3)
	  %% Line 72
	  <X,[_cor8|Xs],N> when 'true' ->
	      %% Line 73
	      apply 'count'/3
		  (X, Xs, N)
	  %% Line 74
	  <_X_X,[],N> when 'true' ->
	      %% Line 75
	      N
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'count',3}}] )
	    -| ['compiler_generated'] )
	end
'lines'/1 =
    %% Line 78
    fun (_cor0) ->
	%% Line 79
	apply 'lines'/3
	    (_cor0, [], [])
'lines'/3 =
    %% Line 81
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[10|Cs],As,Ls> when 'true' ->
	      let <_cor3> =
		  %% Line 82
		  call 'lists':'reverse'
		      (As)
	      in  %% Line 82
		  apply 'lines'/3
		      (Cs, [], [_cor3|Ls])
	  %% Line 83
	  <[C|Cs],As,Ls> when 'true' ->
	      %% Line 84
	      apply 'lines'/3
		  (Cs, [C|As], Ls)
	  %% Line 85
	  <[],As,Ls> when 'true' ->
	      let <_cor4> =
		  %% Line 86
		  call 'lists':'reverse'
		      (As)
	      in  %% Line 86
		  call 'lists':'reverse'
		      ([_cor4|Ls])
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'lines',3}}] )
	    -| ['compiler_generated'] )
	end
'split_at'/2 =
    %% Line 89
    fun (_cor1,_cor0) ->
	%% Line 90
	apply 'split_at'/3
	    (_cor1, _cor0, [])
'split_at'/3 =
    %% Line 92
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[K|Cs],_cor8,As>
	      when call 'erlang':'=:='
		    (_cor8,
		     K) ->
	      let <_cor3> =
		  %% Line 93
		  call 'lists':'reverse'
		      (As)
	      in  %% Line 93
		  {_cor3,Cs}
	  %% Line 94
	  <[C|Cs],K,As> when 'true' ->
	      %% Line 95
	      apply 'split_at'/3
		  (Cs, K, [C|As])
	  %% Line 96
	  <[],_X_K,As> when 'true' ->
	      let <_cor4> =
		  %% Line 97
		  call 'lists':'reverse'
		      (As)
	      in  %% Line 97
		  {_cor4,[]}
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'split_at',3}}] )
	    -| ['compiler_generated'] )
	end
'split_at_stop'/1 =
    %% Line 100
    fun (_cor0) ->
	%% Line 101
	apply 'split_at_stop'/2
	    (_cor0, [])
'split_at_stop'/2 =
    %% Line 103
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[46|[32|Cs]],As> when 'true' ->
	      let <_cor2> =
		  %% Line 104
		  call 'lists':'reverse'
		      (As)
	      in  %% Line 104
		  {_cor2,Cs}
	  %% Line 105
	  <[46|[9|Cs]],As> when 'true' ->
	      let <_cor3> =
		  %% Line 106
		  call 'lists':'reverse'
		      (As)
	      in  %% Line 106
		  {_cor3,Cs}
	  %% Line 107
	  <[46|[10|Cs]],As> when 'true' ->
	      let <_cor4> =
		  %% Line 108
		  call 'lists':'reverse'
		      (As)
	      in  %% Line 108
		  {_cor4,Cs}
	  %% Line 109
	  <[46],As> when 'true' ->
	      let <_cor5> =
		  %% Line 110
		  call 'lists':'reverse'
		      (As)
	      in  %% Line 110
		  {_cor5,[]}
	  %% Line 111
	  <[C|Cs],As> when 'true' ->
	      %% Line 112
	      apply 'split_at_stop'/2
		  (Cs, [C|As])
	  %% Line 113
	  <[],As> when 'true' ->
	      let <_cor6> =
		  %% Line 114
		  call 'lists':'reverse'
		      (As)
	      in  %% Line 114
		  {_cor6,[]}
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'split_at_stop',2}}] )
	    -| ['compiler_generated'] )
	end
'split_at_space'/1 =
    %% Line 117
    fun (_cor0) ->
	%% Line 118
	apply 'split_at_space'/2
	    (_cor0, [])
'split_at_space'/2 =
    %% Line 120
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[32|Cs],As> when 'true' ->
	      let <_cor2> =
		  %% Line 121
		  call 'lists':'reverse'
		      (As)
	      in  %% Line 121
		  {_cor2,Cs}
	  %% Line 122
	  <[9|Cs],As> when 'true' ->
	      let <_cor3> =
		  %% Line 123
		  call 'lists':'reverse'
		      (As)
	      in  %% Line 123
		  {_cor3,Cs}
	  %% Line 124
	  <[10|Cs],As> when 'true' ->
	      let <_cor4> =
		  %% Line 125
		  call 'lists':'reverse'
		      (As)
	      in  %% Line 125
		  {_cor4,Cs}
	  %% Line 126
	  <[C|Cs],As> when 'true' ->
	      %% Line 127
	      apply 'split_at_space'/2
		  (Cs, [C|As])
	  %% Line 128
	  <[],As> when 'true' ->
	      let <_cor5> =
		  %% Line 129
		  call 'lists':'reverse'
		      (As)
	      in  %% Line 129
		  {_cor5,[]}
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6})
		  -| [{'function_name',{'split_at_space',2}}] )
	    -| ['compiler_generated'] )
	end
'is_space'/1 =
    %% Line 132
    fun (_cor0) ->
	case _cor0 of
	  <[32|Cs]> when 'true' ->
	      apply 'is_space'/1
		  (Cs)
	  %% Line 133
	  <[9|Cs]> when 'true' ->
	      apply 'is_space'/1
		  (Cs)
	  %% Line 134
	  <[10|Cs]> when 'true' ->
	      apply 'is_space'/1
		  (Cs)
	  %% Line 135
	  <[_X_C|_X_Cs]> when 'true' ->
	      'false'
	  %% Line 136
	  <[]> when 'true' ->
	      'true'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'is_space',1}}] )
	    -| ['compiler_generated'] )
	end
'strip_space'/1 =
    %% Line 139
    fun (_cor0) ->
	case _cor0 of
	  <[32|Cs]> when 'true' ->
	      apply 'strip_space'/1
		  (Cs)
	  %% Line 140
	  <[9|Cs]> when 'true' ->
	      apply 'strip_space'/1
		  (Cs)
	  %% Line 141
	  <[10|Cs]> when 'true' ->
	      apply 'strip_space'/1
		  (Cs)
	  %% Line 142
	  <Cs> when 'true' ->
	      Cs
	end
'segment'/2 =
    %% Line 145
    fun (_cor1,_cor0) ->
	%% Line 146
	apply 'segment'/5
	    (_cor1, [], [], 0, _cor0)
'segment'/5 =
    %% Line 148
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[E|Es],As,Cs,N,M>
	      when call 'erlang':'<'
		    (N,
		     M) ->
	      let <_cor5> =
		  %% Line 149
		  call 'erlang':'+'
		      (N, 1)
	      in  %% Line 149
		  apply 'segment'/5
		      (Es, [E|As], Cs, _cor5, M)
	  %% Line 150
	  <Es = [_cor13|_cor14],As,Cs,_X_N,M> when 'true' ->
	      let <_cor6> =
		  %% Line 151
		  call 'lists':'reverse'
		      (As)
	      in  %% Line 151
		  apply 'segment'/5
		      (Es, [], [_cor6|Cs], 0, M)
	  %% Line 152
	  <[],[],Cs,_X_N,_X_M> when 'true' ->
	      %% Line 153
	      call 'lists':'reverse'
		  (Cs)
	  %% Line 154
	  <[],As,Cs,_X_N,_X_M> when 'true' ->
	      let <_cor7> =
		  %% Line 155
		  call 'lists':'reverse'
		      (As)
	      in  %% Line 155
		  call 'lists':'reverse'
		      ([_cor7|Cs])
	  ( <_cor12,_cor11,_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10,_cor9,_cor8})
		  -| [{'function_name',{'segment',5}}] )
	    -| ['compiler_generated'] )
	end
'transpose'/1 =
    %% Line 158
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      []
	  %% Line 159
	  <[[]|Xss]> when 'true' ->
	      apply 'transpose'/1
		  (Xss)
	  %% Line 160
	  <[[X|Xs]|Xss]> when 'true' ->
	      let <_cor5> =
		  %% Line 161
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor3) ->
				case _cor3 of
				  <[[H|_X_T]|_cor2]> when 'true' ->
				      let <_cor4> =
					  apply 'lc$^0'/1
					      (_cor2)
				      in  ( [H|_cor4]
					    -| ['compiler_generated'] )
				  ( <[_cor1|_cor2]> when 'true' ->
					apply 'lc$^0'/1
					    (_cor2)
				    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor3> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor3})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (Xss)
		    -| ['list_comprehension'] )
	      in  let <_cor10> =
		      %% Line 162
		      ( letrec
			    'lc$^1'/1 =
				fun (_cor8) ->
				    case _cor8 of
				      <[[_X_H|T]|_cor7]> when 'true' ->
					  let <_cor9> =
					      apply 'lc$^1'/1
						  (_cor7)
					  in  ( [T|_cor9]
						-| ['compiler_generated'] )
				      ( <[_cor6|_cor7]> when 'true' ->
					    apply 'lc$^1'/1
						(_cor7)
					-| ['compiler_generated'] )
				      <[]> when 'true' ->
					  []
				      ( <_cor8> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_cor8})
					      -| [{'function_name',{'lc$^1',1}}] )
					-| ['compiler_generated'] )
				    end
			in  apply 'lc$^1'/1
				(Xss)
			-| ['list_comprehension'] )
		  in  let <_cor11> =
			  %% Line 162
			  apply 'transpose'/1
			      ([Xs|_cor10])
		      in  %% Line 161
			  [[X|_cor5]|_cor11]
	  ( <_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12})
		  -| [{'function_name',{'transpose',1}}] )
	    -| ['compiler_generated'] )
	end
'get_first_sentence'/1 =
    %% Line 170
    fun (_cor0) ->
	case _cor0 of
	  <[{'xmlElement','p',_cor2,_cor3,_cor4,_cor5,_cor6,_cor7,Es,_cor8,_cor9,_cor10}|_cor11]> when 'true' ->
	      %% Line 172
	      apply 'get_first_sentence_1'/1
		  (Es)
	  %% Line 173
	  <Es> when 'true' ->
	      %% Line 174
	      apply 'get_first_sentence_1'/1
		  (Es)
	end
'get_first_sentence_1'/1 =
    %% Line 176
    fun (_cor0) ->
	case _cor0 of
	  <[E = {'xmlText',_cor11,_cor12,_cor13,Txt,_cor14}|Es]> when 'true' ->
	      let <_cor2> =
		  %% Line 177
		  case Es of
		    %% Line 178
		    <[{'xmlElement','p',_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24}|_cor25]> when 'true' ->
			'true'
		    %% Line 179
		    <[{'xmlElement','br',_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35}|_cor36]> when 'true' ->
			'true'
		    %% Line 180
		    <[]> when 'true' ->
			'true'
		    %% Line 181
		    <_cor37> when 'true' ->
			'false'
		  end
	      in  %% Line 183
		  case apply 'end_of_sentence'/2
			   (Txt, _cor2) of
		    %% Line 184
		    <{'value',Txt1}> when 'true' ->
			let <_cor6> =
			    %% Line 185
			    call 'erlang':'setelement'
				(5, E, Txt1)
			in  %% Line 185
			    [_cor6|[]]
		    %% Line 186
		    <'none'> when 'true' ->
			let <_cor7> =
			    %% Line 187
			    apply 'get_first_sentence_1'/1
				(Es)
			in  %% Line 187
			    [E|_cor7]
		    ( <_cor8> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor8})
		      -| ['compiler_generated'] )
		  end
	  %% Line 189
	  <[E|Es]> when 'true' ->
	      let <_cor9> =
		  %% Line 191
		  apply 'get_first_sentence_1'/1
		      (Es)
	      in  %% Line 191
		  [E|_cor9]
	  %% Line 192
	  <[]> when 'true' ->
	      %% Line 193
	      []
	  ( <_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10})
		  -| [{'function_name',{'get_first_sentence_1',1}}] )
	    -| ['compiler_generated'] )
	end
'end_of_sentence'/2 =
    %% Line 195
    fun (_cor1,_cor0) ->
	%% Line 196
	apply 'end_of_sentence'/3
	    (_cor1, _cor0, [])
'end_of_sentence'/3 =
    %% Line 200
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[C = 46|[32|_cor7]],_cor8,As> when 'true' ->
	      %% Line 201
	      apply 'end_of_sentence_1'/3
		  (C, 'true', As)
	  %% Line 202
	  <[C = 46|[9|_cor9]],_cor10,As> when 'true' ->
	      %% Line 203
	      apply 'end_of_sentence_1'/3
		  (C, 'true', As)
	  %% Line 204
	  <[C = 46|[10|_cor11]],_cor12,As> when 'true' ->
	      %% Line 205
	      apply 'end_of_sentence_1'/3
		  (C, 'true', As)
	  %% Line 206
	  <[C = 46|[]],Last,As> when 'true' ->
	      %% Line 207
	      apply 'end_of_sentence_1'/3
		  (C, Last, As)
	  %% Line 208
	  <[C = 33|[32|_cor13]],_cor14,As> when 'true' ->
	      %% Line 209
	      apply 'end_of_sentence_1'/3
		  (C, 'true', As)
	  %% Line 210
	  <[C = 33|[9|_cor15]],_cor16,As> when 'true' ->
	      %% Line 211
	      apply 'end_of_sentence_1'/3
		  (C, 'true', As)
	  %% Line 212
	  <[C = 33|[10|_cor17]],_cor18,As> when 'true' ->
	      %% Line 213
	      apply 'end_of_sentence_1'/3
		  (C, 'true', As)
	  %% Line 214
	  <[C = 33|[]],Last,As> when 'true' ->
	      %% Line 215
	      apply 'end_of_sentence_1'/3
		  (C, Last, As)
	  %% Line 216
	  <[C|Cs],Last,As> when 'true' ->
	      %% Line 217
	      apply 'end_of_sentence'/3
		  (Cs, Last, [C|As])
	  %% Line 218
	  <[],Last,As> when 'true' ->
	      let <_cor3> =
		  %% Line 219
		  apply 'strip_space'/1
		      (As)
	      in  %% Line 219
		  apply 'end_of_sentence_1'/3
		      (46, Last, _cor3)
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'end_of_sentence',3}}] )
	    -| ['compiler_generated'] )
	end
'end_of_sentence_1'/3 =
    %% Line 221
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <C,'true',As> when 'true' ->
	      let <_cor3> =
		  %% Line 222
		  call 'lists':'reverse'
		      ([C|As])
	      in  %% Line 222
		  {'value',_cor3}
	  %% Line 223
	  <_cor7,'false',_cor8> when 'true' ->
	      %% Line 224
	      'none'
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'end_of_sentence_1',3}}] )
	    -| ['compiler_generated'] )
	end
'is_name'/1 =
    %% Line 250
    fun (_cor0) ->
	case _cor0 of
	  <[C|Cs]>
	      when let <_cor1> =
		    call 'erlang':'>='
			(C, 97)
		in  let <_cor2> =
			call 'erlang':'=<'
			    (C, 122)
		    in  call 'erlang':'and'
			    (_cor1, _cor2) ->
	      %% Line 251
	      apply 'is_name_1'/1
		  (Cs)
	  %% Line 252
	  <[C|Cs]>
	      when try
		    let <_cor3> =
			call 'erlang':'>='
			    (C, 223)
		    in  let <_cor4> =
			    call 'erlang':'=<'
				(C, 255)
			in  let <_cor5> =
				call 'erlang':'=/='
				    (C, 247)
			    in  let <_cor6> =
				    call 'erlang':'and'
					(_cor4, _cor5)
				in  call 'erlang':'and'
					(_cor3, _cor6)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 253
	      apply 'is_name_1'/1
		  (Cs)
	  %% Line 254
	  <_cor8> when 'true' ->
	      'false'
	end
'is_name_1'/1 =
    %% Line 256
    fun (_cor0) ->
	case _cor0 of
	  <[C|Cs]>
	      when let <_cor1> =
		    call 'erlang':'>='
			(C, 97)
		in  let <_cor2> =
			call 'erlang':'=<'
			    (C, 122)
		    in  call 'erlang':'and'
			    (_cor1, _cor2) ->
	      %% Line 257
	      apply 'is_name_1'/1
		  (Cs)
	  %% Line 258
	  <[C|Cs]>
	      when let <_cor3> =
		    call 'erlang':'>='
			(C, 65)
		in  let <_cor4> =
			call 'erlang':'=<'
			    (C, 90)
		    in  call 'erlang':'and'
			    (_cor3, _cor4) ->
	      %% Line 259
	      apply 'is_name_1'/1
		  (Cs)
	  %% Line 260
	  <[C|Cs]>
	      when let <_cor5> =
		    call 'erlang':'>='
			(C, 48)
		in  let <_cor6> =
			call 'erlang':'=<'
			    (C, 57)
		    in  call 'erlang':'and'
			    (_cor5, _cor6) ->
	      %% Line 261
	      apply 'is_name_1'/1
		  (Cs)
	  %% Line 262
	  <[C|Cs]>
	      when try
		    let <_cor7> =
			call 'erlang':'>='
			    (C, 192)
		    in  let <_cor8> =
			    call 'erlang':'=<'
				(C, 255)
			in  let <_cor9> =
				call 'erlang':'=/='
				    (C, 215)
			    in  let <_cor10> =
				    call 'erlang':'=/='
					(C, 247)
				in  let <_cor11> =
					call 'erlang':'and'
					    (_cor9, _cor10)
				    in  let <_cor12> =
					    call 'erlang':'and'
						(_cor8, _cor11)
					in  call 'erlang':'and'
						(_cor7, _cor12)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 263
	      apply 'is_name_1'/1
		  (Cs)
	  %% Line 264
	  <[95|Cs]> when 'true' ->
	      %% Line 265
	      apply 'is_name_1'/1
		  (Cs)
	  %% Line 266
	  <[]> when 'true' ->
	      'true'
	  %% Line 267
	  <_cor14> when 'true' ->
	      'false'
	end
'to_atom'/1 =
    %% Line 269
    fun (_cor0) ->
	case _cor0 of
	  <A>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      A
	  %% Line 270
	  <S>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      call 'erlang':'list_to_atom'
		  (S)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'to_atom',1}}] )
	    -| ['compiler_generated'] )
	end
'to_list'/1 =
    %% Line 272
    fun (_cor0) ->
	case _cor0 of
	  <A>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      call 'erlang':'atom_to_list'
		  (A)
	  %% Line 273
	  <S>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      S
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'to_list',1}}] )
	    -| ['compiler_generated'] )
	end
'unique'/1 =
    %% Line 277
    fun (_cor0) ->
	case _cor0 of
	  <[X|Xs]> when 'true' ->
	      let <_cor1> =
		  apply 'unique'/2
		      (Xs, X)
	      in  [X|_cor1]
	  %% Line 278
	  <[]> when 'true' ->
	      []
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'unique',1}}] )
	    -| ['compiler_generated'] )
	end
'unique'/2 =
    %% Line 280
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[X|Xs],_cor5>
	      when call 'erlang':'=:='
		    (_cor5,
		     X) ->
	      apply 'unique'/2
		  (Xs, X)
	  %% Line 281
	  <[X|Xs],_cor6> when 'true' ->
	      let <_cor2> =
		  apply 'unique'/2
		      (Xs, X)
	      in  [X|_cor2]
	  %% Line 282
	  <[],_cor7> when 'true' ->
	      []
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'unique',2}}] )
	    -| ['compiler_generated'] )
	end
'parse_expr'/2 =
    %% Line 294
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 295
	    call 'erlang':'++'
		(_cor1, [46])
	in  %% Line 295
	    case call 'erl_scan':'string'
		     (_cor2, _cor0) of
	      %% Line 296
	      <{'ok',Ts,_cor7}> when 'true' ->
		  %% Line 297
		  case call 'erl_parse':'parse_exprs'
			   (Ts) of
		    %% Line 298
		    <{'ok',[Expr|[]]}> when 'true' ->
			%% Line 299
			Expr
		    %% Line 300
		    <{'error',{999999,'erl_parse',_cor8}}> when 'true' ->
			%% Line 301
			apply 'throw_error'/2
			    ('eof', _cor0)
		    %% Line 302
		    <{'error',E}> when 'true' ->
			%% Line 303
			apply 'throw_error'/2
			    (E, _cor0)
		    ( <_cor3> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor3})
		      -| ['compiler_generated'] )
		  end
	      %% Line 305
	      <{'error',E,_cor9}> when 'true' ->
		  %% Line 306
		  apply 'throw_error'/2
		      (E, _cor0)
	      ( <_cor4> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor4})
		-| ['compiler_generated'] )
	    end
'parse_contact'/2 =
    %% Line 323
    fun (_cor1,_cor0) ->
	%% Line 325
	( case apply 'scan_name'/4
		   (_cor1, _cor0, {'info',[],[],[]}, []) of
	    ( <( {'info',_rec1,_cor11,_cor12}
		 -| ['compiler_generated'] )> when 'true' ->
		  {_rec1,_cor11,_cor12}
	      -| ['compiler_generated'] )
	    ( <_cor13> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','info'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'scan_name'/4 =
    %% Line 331
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[60|Cs],L,I,As> when 'true' ->
	      %% Line 332
	      ( case I of
		  ( <( {'info',_cor19,_rec4,_cor20}
		       -| ['compiler_generated'] )> when 'true' ->
			case _rec4 of
			  %% Line 333
			  <[]> when 'true' ->
			      let <_cor6> =
				  %% Line 334
				  apply 'set_name'/2
				      (I, As)
			      in  %% Line 334
				  case apply 'scan_email'/4
					   (Cs, L, _cor6, []) of
				    <{Cs1,I1}> when 'true' ->
					%% Line 335
					apply 'scan_name'/4
					    (Cs1, L, I1, [])
				    ( <_cor7> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor7})
				      -| ['compiler_generated'] )
				  end
			  %% Line 336
			  <_cor22> when 'true' ->
			      %% Line 337
			      apply 'throw_error'/2
				  ([109|[117|[108|[116|[105|[112|[108|[101|[32|[39|[60|[46|[46|[46|[62|[39|[32|[115|[101|[99|[116|[105|[111|[110|[115|[46]]]]]]]]]]]]]]]]]]]]]]]]]], L)
			end
		    -| ['compiler_generated'] )
		  ( <_cor21> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','info'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 339
	  <[91|Cs],L,I,As> when 'true' ->
	      %% Line 340
	      ( case I of
		  ( <( {'info',_cor23,_cor24,_rec5}
		       -| ['compiler_generated'] )> when 'true' ->
			case _rec5 of
			  %% Line 341
			  <[]> when 'true' ->
			      let <_cor11> =
				  %% Line 342
				  apply 'set_name'/2
				      (I, As)
			      in  %% Line 342
				  case apply 'scan_uri'/4
					   (Cs, L, _cor11, []) of
				    <{Cs1,I1}> when 'true' ->
					%% Line 343
					apply 'scan_name'/4
					    (Cs1, L, I1, [])
				    ( <_cor12> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor12})
				      -| ['compiler_generated'] )
				  end
			  %% Line 344
			  <_cor26> when 'true' ->
			      %% Line 345
			      apply 'throw_error'/2
				  ([109|[117|[108|[116|[105|[112|[108|[101|[32|[39|[91|[46|[46|[46|[93|[39|[32|[115|[101|[99|[116|[105|[111|[110|[115|[46]]]]]]]]]]]]]]]]]]]]]]]]]], L)
			end
		    -| ['compiler_generated'] )
		  ( <_cor25> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','info'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 347
	  <[10|Cs],L,I,As> when 'true' ->
	      let <_cor14> =
		  %% Line 348
		  call 'erlang':'+'
		      (L, 1)
	      in  %% Line 348
		  apply 'scan_name'/4
		      (Cs, _cor14, I, [10|As])
	  %% Line 349
	  <[C|Cs],L,I,As> when 'true' ->
	      %% Line 350
	      apply 'scan_name'/4
		  (Cs, L, I, [C|As])
	  %% Line 351
	  <[],_X_L,I,As> when 'true' ->
	      %% Line 352
	      apply 'set_name'/2
		  (I, As)
	  ( <_cor18,_cor17,_cor16,_cor15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor18,_cor17,_cor16,_cor15})
		  -| [{'function_name',{'scan_name',4}}] )
	    -| ['compiler_generated'] )
	end
'scan_uri'/4 =
    %% Line 354
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[93|Cs],_X_L,I,As> when 'true' ->
	      let <_rec6> =
		  %% Line 355
		  apply 'strip_and_reverse'/1
		      (As)
	      in  %% Line 355
		  case I of
		    <{'info',_cor13,_cor14,_cor15}> when 'true' ->
			let <_cor7> =
			    call 'erlang':'setelement'
				(4, I, _rec6)
			in  {Cs,_cor7}
		    ( <_cor16> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','info'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 356
	  <[10|Cs],L,I,As> when 'true' ->
	      let <_cor8> =
		  %% Line 357
		  call 'erlang':'+'
		      (L, 1)
	      in  %% Line 357
		  apply 'scan_uri'/4
		      (Cs, _cor8, I, [10|As])
	  %% Line 358
	  <[C|Cs],L,I,As> when 'true' ->
	      %% Line 359
	      apply 'scan_uri'/4
		  (Cs, L, I, [C|As])
	  %% Line 360
	  <[],L,_X_I,_X_As> when 'true' ->
	      %% Line 361
	      apply 'throw_error'/2
		  ({'missing',93}, L)
	  ( <_cor12,_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10,_cor9})
		  -| [{'function_name',{'scan_uri',4}}] )
	    -| ['compiler_generated'] )
	end
'scan_email'/4 =
    %% Line 363
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[62|Cs],_X_L,I,As> when 'true' ->
	      let <_rec8> =
		  %% Line 364
		  apply 'strip_and_reverse'/1
		      (As)
	      in  %% Line 364
		  case I of
		    <{'info',_cor13,_cor14,_cor15}> when 'true' ->
			let <_cor7> =
			    call 'erlang':'setelement'
				(3, I, _rec8)
			in  {Cs,_cor7}
		    ( <_cor16> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','info'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 365
	  <[10|Cs],L,I,As> when 'true' ->
	      let <_cor8> =
		  %% Line 366
		  call 'erlang':'+'
		      (L, 1)
	      in  %% Line 366
		  apply 'scan_email'/4
		      (Cs, _cor8, I, [10|As])
	  %% Line 367
	  <[C|Cs],L,I,As> when 'true' ->
	      %% Line 368
	      apply 'scan_email'/4
		  (Cs, L, I, [C|As])
	  %% Line 369
	  <[],L,_X_I,_X_As> when 'true' ->
	      %% Line 370
	      apply 'throw_error'/2
		  ({'missing',62}, L)
	  ( <_cor12,_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10,_cor9})
		  -| [{'function_name',{'scan_email',4}}] )
	    -| ['compiler_generated'] )
	end
'set_name'/2 =
    %% Line 372
    fun (_cor1,_cor0) ->
	%% Line 373
	( case _cor1 of
	    ( <( {'info',_rec10,_cor10,_cor11}
		 -| ['compiler_generated'] )> when 'true' ->
		  case _rec10 of
		    %% Line 374
		    <[]> when 'true' ->
			let <_rec11> =
			    apply 'strip_and_reverse'/1
				(_cor0)
			in  call 'erlang':'setelement'
				(2, _cor1, _rec11)
		    %% Line 375
		    <_cor17> when 'true' ->
			_cor1
		  end
	      -| ['compiler_generated'] )
	    ( <_cor12> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','info'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'strip_and_reverse'/1 =
    %% Line 378
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 379
	    call 'edoc_lib':'strip_space'
		(_cor0)
	in  let <_cor2> =
		%% Line 379
		call 'lists':'reverse'
		    (_cor1)
	    in  %% Line 379
		call 'edoc_lib':'strip_space'
		    (_cor2)
'escape_uri'/1 =
    %% Line 395
    fun (_cor0) ->
	case _cor0 of
	  <[C|Cs]>
	      when let <_cor1> =
		    call 'erlang':'>='
			(C, 97)
		in  let <_cor2> =
			call 'erlang':'=<'
			    (C, 122)
		    in  call 'erlang':'and'
			    (_cor1, _cor2) ->
	      let <_cor3> =
		  %% Line 396
		  apply 'escape_uri'/1
		      (Cs)
	      in  %% Line 396
		  [C|_cor3]
	  %% Line 397
	  <[C|Cs]>
	      when let <_cor4> =
		    call 'erlang':'>='
			(C, 65)
		in  let <_cor5> =
			call 'erlang':'=<'
			    (C, 90)
		    in  call 'erlang':'and'
			    (_cor4, _cor5) ->
	      let <_cor6> =
		  %% Line 398
		  apply 'escape_uri'/1
		      (Cs)
	      in  %% Line 398
		  [C|_cor6]
	  %% Line 399
	  <[C|Cs]>
	      when let <_cor7> =
		    call 'erlang':'>='
			(C, 48)
		in  let <_cor8> =
			call 'erlang':'=<'
			    (C, 57)
		    in  call 'erlang':'and'
			    (_cor7, _cor8) ->
	      let <_cor9> =
		  %% Line 400
		  apply 'escape_uri'/1
		      (Cs)
	      in  %% Line 400
		  [C|_cor9]
	  %% Line 401
	  <[C = 46|Cs]> when 'true' ->
	      let <_cor10> =
		  %% Line 402
		  apply 'escape_uri'/1
		      (Cs)
	      in  %% Line 402
		  [C|_cor10]
	  %% Line 403
	  <[C = 45|Cs]> when 'true' ->
	      let <_cor11> =
		  %% Line 404
		  apply 'escape_uri'/1
		      (Cs)
	      in  %% Line 404
		  [C|_cor11]
	  %% Line 405
	  <[C = 95|Cs]> when 'true' ->
	      let <_cor12> =
		  %% Line 406
		  apply 'escape_uri'/1
		      (Cs)
	      in  %% Line 406
		  [C|_cor12]
	  %% Line 407
	  <[C|Cs]>
	      when call 'erlang':'>'
		    (C,
		     127) ->
	      let <_cor18> =
		  %% Line 409
		  call 'erlang':'band'
		      (C, 192)
	      in  let <_cor19> =
		      %% Line 409
		      call 'erlang':'bsr'
			  (_cor18, 6)
		  in  let <_cor20> =
			  %% Line 409
			  call 'erlang':'+'
			      (_cor19, 192)
		      in  let <_cor21> =
			      %% Line 409
			      apply 'escape_byte'/1
				  (_cor20)
			  in  let <_cor14> =
				  %% Line 410
				  call 'erlang':'band'
				      (C, 63)
			      in  let <_cor15> =
				      %% Line 410
				      call 'erlang':'+'
					  (_cor14, 128)
				  in  let <_cor16> =
					  %% Line 410
					  apply 'escape_byte'/1
					      (_cor15)
				      in  let <_cor13> =
					      %% Line 411
					      apply 'escape_uri'/1
						  (Cs)
					  in  let <_cor17> =
						  %% Line 411
						  call 'erlang':'++'
						      (_cor16, _cor13)
					      in  %% Line 410
						  call 'erlang':'++'
						      (_cor21, _cor17)
	  %% Line 412
	  <[C|Cs]> when 'true' ->
	      let <_cor23> =
		  %% Line 413
		  apply 'escape_byte'/1
		      (C)
	      in  let <_cor22> =
		      %% Line 413
		      apply 'escape_uri'/1
			  (Cs)
		  in  %% Line 413
		      call 'erlang':'++'
			  (_cor23, _cor22)
	  %% Line 414
	  <[]> when 'true' ->
	      %% Line 415
	      []
	  ( <_cor24> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor24})
		  -| [{'function_name',{'escape_uri',1}}] )
	    -| ['compiler_generated'] )
	end
'escape_byte'/1 =
    %% Line 417
    fun (_cor0) ->
	case _cor0 of
	  <C>
	      when let <_cor1> =
		    call 'erlang':'>='
			(_cor0, 0)
		in  let <_cor2> =
			call 'erlang':'=<'
			    (_cor0, 255)
		    in  call 'erlang':'and'
			    (_cor1, _cor2) ->
	      let <_cor3> =
		  %% Line 418
		  call 'erlang':'bsr'
		      (C, 4)
	      in  let <_cor4> =
		      %% Line 418
		      apply 'hex_digit'/1
			  (_cor3)
		  in  let <_cor5> =
			  %% Line 418
			  call 'erlang':'band'
			      (C, 15)
		      in  let <_cor6> =
			      %% Line 418
			      apply 'hex_digit'/1
				  (_cor5)
			  in  %% Line 418
			      [37|[_cor4|[_cor6|[]]]]
	  ( <_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7})
		  -| [{'function_name',{'escape_byte',1}}] )
	    -| ['compiler_generated'] )
	end
'hex_digit'/1 =
    %% Line 420
    fun (_cor0) ->
	case _cor0 of
	  <N>
	      when let <_cor1> =
		    call 'erlang':'>='
			(_cor0, 0)
		in  let <_cor2> =
			call 'erlang':'=<'
			    (_cor0, 9)
		    in  call 'erlang':'and'
			    (_cor1, _cor2) ->
	      %% Line 421
	      call 'erlang':'+'
		  (N, 48)
	  %% Line 422
	  <N>
	      when let <_cor3> =
		    call 'erlang':'>'
			(_cor0, 9)
		in  let <_cor4> =
			call 'erlang':'=<'
			    (_cor0, 15)
		    in  call 'erlang':'and'
			    (_cor3, _cor4) ->
	      let <_cor5> =
		  %% Line 423
		  call 'erlang':'+'
		      (N, 97)
	      in  %% Line 423
		  call 'erlang':'-'
		      (_cor5, 10)
	  ( <_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6})
		  -| [{'function_name',{'hex_digit',1}}] )
	    -| ['compiler_generated'] )
	end
'join_uri'/2 =
    %% Line 436
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Base,[]> when 'true' ->
	      %% Line 437
	      Base
	  %% Line 438
	  <[],Path> when 'true' ->
	      %% Line 439
	      Path
	  %% Line 440
	  <Base,Path> when 'true' ->
	      let <_cor2> =
		  %% Line 441
		  [47|Path]
	      in  %% Line 441
		  call 'erlang':'++'
		      (Base, _cor2)
	end
'is_relative_uri'/1 =
    %% Line 446
    fun (_cor0) ->
	case _cor0 of
	  <[58|_cor2]> when 'true' ->
	      %% Line 447
	      'false'
	  %% Line 448
	  <[47|[47|_cor3]]> when 'true' ->
	      %% Line 449
	      'false'
	  %% Line 450
	  <[47|_cor4]> when 'true' ->
	      %% Line 451
	      'true'
	  %% Line 452
	  <[63|_cor5]> when 'true' ->
	      %% Line 453
	      'true'
	  %% Line 454
	  <[35|_cor6]> when 'true' ->
	      %% Line 455
	      'true'
	  %% Line 456
	  <[_cor7|Cs]> when 'true' ->
	      %% Line 457
	      apply 'is_relative_uri'/1
		  (Cs)
	  %% Line 458
	  <[]> when 'true' ->
	      %% Line 459
	      'true'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'is_relative_uri',1}}] )
	    -| ['compiler_generated'] )
	end
'uri_get'/1 =
    %% Line 462
    fun (_cor0) ->
	case _cor0 of
	  <[102|[105|[108|[101|[58|[47|[47|[47|Path]]]]]]]]> when 'true' ->
	      %% Line 463
	      apply 'uri_get_file'/1
		  (Path)
	  %% Line 464
	  <[102|[105|[108|[101|[58|[47|[47|[108|[111|[99|[97|[108|[104|[111|[115|[116|[47|Path]]]]]]]]]]]]]]]]]> when 'true' ->
	      %% Line 465
	      apply 'uri_get_file'/1
		  (Path)
	  %% Line 466
	  <[102|[105|[108|[101|[58|[47|[47|Path]]]]]]]> when 'true' ->
	      let <Msg> =
		  %% Line 467
		  call 'io_lib':'format'
		      ([99|[97|[110|[110|[111|[116|[32|[104|[97|[110|[100|[108|[101|[32|[39|[102|[105|[108|[101|[58|[39|[32|[115|[99|[104|[101|[109|[101|[32|[119|[105|[116|[104|[32|[110|[111|[110|[108|[111|[99|[97|[108|[32|[110|[101|[116|[119|[111|[114|[107|[45|[112|[97|[116|[104|[58|[32|[39|[102|[105|[108|[101|[58|[47|[47|[126|[116|[115|[39|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 469
																																																				   [Path|[]])
	      in  %% Line 470
		  {'error',Msg}
	  %% Line 471
	  <[102|[105|[108|[101|[58|[47|Path]]]]]]> when 'true' ->
	      %% Line 472
	      apply 'uri_get_file'/1
		  (Path)
	  %% Line 473
	  <[102|[105|[108|[101|[58|Path]]]]]> when 'true' ->
	      let <Msg> =
		  %% Line 474
		  call 'io_lib':'format'
		      ([105|[103|[110|[111|[114|[105|[110|[103|[32|[109|[97|[108|[102|[111|[114|[109|[101|[100|[32|[85|[82|[73|[58|[32|[39|[102|[105|[108|[101|[58|[126|[116|[115|[39|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Path|[]])
	      in  %% Line 475
		  {'error',Msg}
	  %% Line 476
	  <[104|[116|[116|[112|[58|Path]]]]]> when 'true' ->
	      let <_cor3> =
		  %% Line 477
		  call 'erlang':'++'
		      ([104|[116|[116|[112|[58]]]]], Path)
	      in  %% Line 477
		  apply 'uri_get_http'/1
		      (_cor3)
	  %% Line 478
	  <[102|[116|[112|[58|Path]]]]> when 'true' ->
	      let <_cor4> =
		  %% Line 479
		  [102|[116|[112|[58|Path]]]]
	      in  %% Line 479
		  apply 'uri_get_ftp'/1
		      (_cor4)
	  %% Line 480
	  <[47|[47|Path]]> when 'true' ->
	      let <Msg> =
		  %% Line 481
		  call 'io_lib':'format'
		      ([99|[97|[110|[110|[111|[116|[32|[97|[99|[99|[101|[115|[115|[32|[110|[101|[116|[119|[111|[114|[107|[45|[112|[97|[116|[104|[58|[32|[39|[47|[47|[126|[116|[115|[39|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Path|[]])
	      in  %% Line 482
		  {'error',Msg}
	  %% Line 483
	  <Path = [C|[58|[47|_cor21]]]>
	      when let <_cor8> =
		    let <_cor6> =
			call 'erlang':'>='
			    (C, 65)
		    in  let <_cor7> =
			    call 'erlang':'=<'
				(C, 90)
			in  call 'erlang':'and'
				(_cor6, _cor7)
		in  let <_cor11> =
			let <_cor9> =
			    call 'erlang':'>='
				(C, 97)
			in  let <_cor10> =
				call 'erlang':'=<'
				    (C, 122)
			    in  call 'erlang':'and'
				    (_cor9, _cor10)
		    in  call 'erlang':'or'
			    (_cor8, _cor11) ->
	      %% Line 484
	      apply 'uri_get_file'/1
		  (Path)
	  %% Line 485
	  <Path = [C|[58|[32|_cor22]]]>
	      when let <_cor14> =
		    let <_cor12> =
			call 'erlang':'>='
			    (C, 65)
		    in  let <_cor13> =
			    call 'erlang':'=<'
				(C, 90)
			in  call 'erlang':'and'
				(_cor12, _cor13)
		in  let <_cor17> =
			let <_cor15> =
			    call 'erlang':'>='
				(C, 97)
			in  let <_cor16> =
				call 'erlang':'=<'
				    (C, 122)
			    in  call 'erlang':'and'
				    (_cor15, _cor16)
		    in  call 'erlang':'or'
			    (_cor14, _cor17) ->
	      %% Line 486
	      apply 'uri_get_file'/1
		  (Path)
	  %% Line 487
	  <URI> when 'true' ->
	      %% Line 488
	      case apply 'is_relative_uri'/1
		       (URI) of
		%% Line 489
		<'true'> when 'true' ->
		    %% Line 490
		    apply 'uri_get_file'/1
			(URI)
		%% Line 491
		<'false'> when 'true' ->
		    let <Msg> =
			%% Line 492
			call 'io_lib':'format'
			    ([99|[97|[110|[110|[111|[116|[32|[104|[97|[110|[100|[108|[101|[32|[85|[82|[73|[58|[32|[39|[126|[116|[115|[39|[46]]]]]]]]]]]]]]]]]]]]]]]]], [URI|[]])
		    in  %% Line 493
			{'error',Msg}
		( <_cor19> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor19})
		  -| ['compiler_generated'] )
	      end
	end
'uri_get_file'/1 =
    %% Line 496
    fun (_cor0) ->
	let <File> =
	    %% Line 497
	    call 'filename':'join'
		([47], _cor0)
	in  %% Line 498
	    case apply 'read_file'/1
		     (File) of
	      %% Line 499
	      <{'ok',Text}> when 'true' ->
		  %% Line 500
		  {'ok',Text}
	      %% Line 501
	      <{'error',R}> when 'true' ->
		  let <_cor2> =
		      %% Line 502
		      call 'file':'format_error'
			  (R)
		  in  %% Line 502
		      {'error',_cor2}
	      ( <_cor3> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor3})
		-| ['compiler_generated'] )
	    end
'uri_get_http'/1 =
    %% Line 505
    fun (_cor0) ->
	let <_cor2> =
	    catch
		let <_cor1> =
		    %% Line 507
		    call 'httpc':'request'
			('get', {_cor0,[]}, [], %% Line 508
						[{'full_result','false'}])
		in  %% Line 507
		    {'ok',_cor1}
	in  %% Line 507
	    case _cor2 of
	      %% Line 509
	      <{'EXIT',_cor5}> when 'true' ->
		  %% Line 510
		  apply 'uri_get_http_r10'/1
		      (_cor0)
	      %% Line 511
	      <Result> when 'true' ->
		  %% Line 512
		  apply 'uri_get_http_1'/2
		      (Result, _cor0)
	    end
'uri_get_http_r10'/1 =
    %% Line 515
    fun (_cor0) ->
	let <_cor2> =
	    catch
		let <_cor1> =
		    %% Line 517
		    call 'httpc':'request'
			('get', {_cor0,[]}, [], [])
		in  %% Line 517
		    {'ok',_cor1}
	in  %% Line 518
	    apply 'uri_get_http_1'/2
		(_cor2, _cor0)
'uri_get_http_1'/2 =
    %% Line 520
    fun (_cor1,_cor0) ->
	%% Line 521
	case _cor1 of
	  %% Line 522
	  <{'ok',{'ok',{200,Text}}}>
	      when call 'erlang':'is_list'
		    (Text) ->
	      %% Line 524
	      {'ok',Text}
	  %% Line 525
	  <{'ok',{'ok',{Status,Text}}}>
	      when let <_cor2> =
		    call 'erlang':'is_integer'
			(Status)
		in  let <_cor3> =
			call 'erlang':'is_list'
			    (Text)
		    in  call 'erlang':'and'
			    (_cor2, _cor3) ->
	      let <Phrase> =
		  %% Line 527
		  call 'httpd_util':'reason_phrase'
		      (Status)
	      in  let <_cor5> =
		      %% Line 528
		      apply 'http_errmsg'/2
			  (Phrase, _cor0)
		  in  %% Line 528
		      {'error',_cor5}
	  %% Line 529
	  <{'ok',{'ok',{{_X_Vsn,200,_X_Phrase},_X_Hdrs,Text}}}>
	      when call 'erlang':'is_list'
		    (Text) ->
	      %% Line 531
	      {'ok',Text}
	  %% Line 532
	  <{'ok',{'ok',{{_X_Vsn,_X_Status,Phrase},_X_Hdrs,Text}}}>
	      when call 'erlang':'is_list'
		    (Text) ->
	      let <_cor6> =
		  %% Line 534
		  apply 'http_errmsg'/2
		      (Phrase, _cor0)
	      in  %% Line 534
		  {'error',_cor6}
	  %% Line 535
	  <{'ok',{200,_X_Hdrs,Text}}>
	      when call 'erlang':'is_list'
		    (Text) ->
	      %% Line 537
	      {'ok',Text}
	  %% Line 538
	  <{'ok',{Status,_X_Hdrs,Text}}>
	      when call 'erlang':'is_list'
		    (Text) ->
	      let <Phrase> =
		  %% Line 540
		  call 'httpd_util':'reason_phrase'
		      (Status)
	      in  let <_cor8> =
		      %% Line 541
		      apply 'http_errmsg'/2
			  (Phrase, _cor0)
		  in  %% Line 541
		      {'error',_cor8}
	  %% Line 542
	  <{'ok',{'error',R}}> when 'true' ->
	      let <Reason> =
		  %% Line 543
		  call 'inet':'format_error'
		      (R)
	      in  let <_cor10> =
		      %% Line 544
		      apply 'http_errmsg'/2
			  (Reason, _cor0)
		  in  %% Line 544
		      {'error',_cor10}
	  %% Line 545
	  <{'ok',R}> when 'true' ->
	      let <Reason> =
		  %% Line 546
		  call 'io_lib':'format'
		      ([98|[97|[100|[32|[114|[101|[116|[117|[114|[110|[32|[118|[97|[108|[117|[101|[32|[126|[80]]]]]]]]]]]]]]]]]]], [R|[5]])
	      in  let <_cor12> =
		      %% Line 547
		      apply 'http_errmsg'/2
			  (Reason, _cor0)
		  in  %% Line 547
		      {'error',_cor12}
	  %% Line 548
	  <{'EXIT',R}> when 'true' ->
	      let <Reason> =
		  %% Line 549
		  call 'io_lib':'format'
		      ([99|[114|[97|[115|[104|[101|[100|[32|[119|[105|[116|[104|[32|[114|[101|[97|[115|[111|[110|[32|[126|[119]]]]]]]]]]]]]]]]]]]]]], [R|[]])
	      in  let <_cor14> =
		      %% Line 550
		      apply 'http_errmsg'/2
			  (Reason, _cor0)
		  in  %% Line 550
		      {'error',_cor14}
	  %% Line 551
	  <R> when 'true' ->
	      let <Reason> =
		  %% Line 552
		  call 'io_lib':'format'
		      ([117|[110|[99|[97|[117|[103|[104|[116|[32|[116|[104|[114|[111|[119|[58|[32|[126|[119]]]]]]]]]]]]]]]]]], [R|[]])
	      in  let <_cor16> =
		      %% Line 553
		      apply 'http_errmsg'/2
			  (Reason, _cor0)
		  in  %% Line 553
		      {'error',_cor16}
	end
'http_errmsg'/2 =
    %% Line 556
    fun (_cor1,_cor0) ->
	%% Line 557
	call 'io_lib':'format'
	    ([104|[116|[116|[112|[32|[101|[114|[114|[111|[114|[58|[32|[126|[116|[115|[58|[32|[39|[126|[116|[115|[39]]]]]]]]]]]]]]]]]]]]]], [_cor1|[_cor0|[]]])
'uri_get_ftp'/1 =
    %% Line 561
    fun (_cor0) ->
	let <Msg> =
	    %% Line 562
	    call 'io_lib':'format'
		([99|[97|[110|[110|[111|[116|[32|[97|[99|[99|[101|[115|[115|[32|[102|[116|[112|[32|[115|[99|[104|[101|[109|[101|[32|[121|[101|[116|[58|[32|[39|[126|[116|[115|[39|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [_cor0|[]])
	in  %% Line 563
	    {'error',Msg}
'to_label'/1 =
    %% Line 566
    fun (_cor0) ->
	case _cor0 of
	  <[32|Cs]> when 'true' ->
	      %% Line 567
	      apply 'to_label'/1
		  (Cs)
	  %% Line 568
	  <[9|Cs]> when 'true' ->
	      %% Line 569
	      apply 'to_label'/1
		  (Cs)
	  %% Line 570
	  <[10|Cs]> when 'true' ->
	      %% Line 571
	      apply 'to_label'/1
		  (Cs)
	  %% Line 572
	  <[]> when 'true' ->
	      %% Line 573
	      []
	  %% Line 574
	  <Cs> when 'true' ->
	      %% Line 575
	      apply 'to_label_1'/1
		  (Cs)
	end
'to_label_1'/1 =
    %% Line 577
    fun (_cor0) ->
	case _cor0 of
	  <[32|Cs]> when 'true' ->
	      %% Line 578
	      apply 'to_label_2'/1
		  ([32|Cs])
	  %% Line 579
	  <[9|Cs]> when 'true' ->
	      %% Line 580
	      apply 'to_label_2'/1
		  ([32|Cs])
	  %% Line 581
	  <[10|Cs]> when 'true' ->
	      %% Line 582
	      apply 'to_label_2'/1
		  ([32|Cs])
	  %% Line 583
	  <[C|Cs]> when 'true' ->
	      let <_cor1> =
		  %% Line 584
		  apply 'to_label_1'/1
		      (Cs)
	      in  %% Line 584
		  [C|_cor1]
	  %% Line 585
	  <[]> when 'true' ->
	      %% Line 586
	      []
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'to_label_1',1}}] )
	    -| ['compiler_generated'] )
	end
'to_label_2'/1 =
    %% Line 588
    fun (_cor0) ->
	%% Line 589
	case apply 'to_label'/1
		 (_cor0) of
	  %% Line 590
	  <[]> when 'true' ->
	      []
	  %% Line 591
	  <Cs1> when 'true' ->
	      [95|Cs1]
	end
'filename'/1 =
    %% Line 599
    fun (_cor0) ->
	case _cor0 of
	  <[C|T]>
	      when let <_cor1> =
		    call 'erlang':'is_integer'
			(C)
		in  let <_cor2> =
			call 'erlang':'>'
			    (C, 0)
		    in  call 'erlang':'and'
			    (_cor1, _cor2) ->
	      let <_cor3> =
		  %% Line 600
		  apply 'filename'/1
		      (T)
	      in  %% Line 600
		  [C|_cor3]
	  %% Line 601
	  <[H|T]> when 'true' ->
	      let <_cor5> =
		  %% Line 602
		  apply 'filename'/1
		      (H)
	      in  let <_cor4> =
		      %% Line 602
		      apply 'filename'/1
			  (T)
		  in  %% Line 602
		      call 'erlang':'++'
			  (_cor5, _cor4)
	  %% Line 603
	  <[]> when 'true' ->
	      %% Line 604
	      []
	  %% Line 605
	  <N>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      %% Line 606
	      call 'erlang':'atom_to_list'
		  (N)
	  %% Line 607
	  <N> when 'true' ->
	      do  %% Line 608
		  call 'edoc_report':'report'
		      ([98|[97|[100|[32|[102|[105|[108|[101|[110|[97|[109|[101|[58|[32|[96|[126|[80|[39|[46]]]]]]]]]]]]]]]]]]], [N|[25]])
		  %% Line 609
		  call 'erlang':'exit'
		      ('error')
	end
'copy_file'/2 =
    %% Line 612
    fun (_cor1,_cor0) ->
	%% Line 613
	case call 'file':'copy'
		 (_cor1, _cor0) of
	  %% Line 614
	  <{'ok',_cor6}> when 'true' ->
	      'ok'
	  %% Line 615
	  <{'error',R}> when 'true' ->
	      let <R1> =
		  %% Line 616
		  call 'file':'format_error'
		      (R)
	      in  do  %% Line 617
		      call 'edoc_report':'report'
			  ([101|[114|[114|[111|[114|[32|[99|[111|[112|[121|[105|[110|[103|[32|[39|[126|[116|[115|[39|[32|[116|[111|[32|[39|[126|[116|[115|[39|[58|[32|[126|[116|[115|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [_cor1|[_cor0|[R1|[]]]])
		      %% Line 618
		      call 'erlang':'exit'
			  ('error')
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor3})
	    -| ['compiler_generated'] )
	end
'list_dir'/2 =
    %% Line 621
    fun (_cor1,_cor0) ->
	%% Line 622
	case call 'file':'list_dir'
		 (_cor1) of
	  %% Line 623
	  <{'ok',Fs}> when 'true' ->
	      %% Line 624
	      Fs
	  %% Line 625
	  <{'error',R}> when 'true' ->
	      %% Line 626
	      case _cor0 of
		%% Line 629
		<'false'> when 'true' ->
		    let <_cor7> =
			%% Line 630
			( fun (_cor3,_cor2) ->
			      do  call 'edoc_report':'warning'
				      (_cor3, _cor2)
				  []
			  -| [{'id',{0,0,'-list_dir/2-fun-0-'}}] )
		    in  let <R1> =
			    %% Line 632
			    call 'file':'format_error'
				(R)
			in  let <_cor10> =
				%% Line 633
				apply 'filename'/1
				    (_cor1)
			    in  %% Line 633
				apply _cor7
				    ([99|[111|[117|[108|[100|[32|[110|[111|[116|[32|[114|[101|[97|[100|[32|[100|[105|[114|[101|[99|[116|[111|[114|[121|[32|[39|[126|[116|[115|[39|[58|[32|[126|[116|[115|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [_cor10|[R1|[]]])
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor6})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor11> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor11})
	    -| ['compiler_generated'] )
	end
'simplify_path'/1 =
    %% Line 637
    fun (_cor0) ->
	%% Line 638
	case call 'filename':'basename'
		 (_cor0) of
	  %% Line 639
	  <[46]> when 'true' ->
	      let <_cor1> =
		  %% Line 640
		  call 'filename':'dirname'
		      (_cor0)
	      in  %% Line 640
		  apply 'simplify_path'/1
		      (_cor1)
	  %% Line 641
	  <[46|[46]]> when 'true' ->
	      let <_cor2> =
		  %% Line 642
		  call 'filename':'dirname'
		      (_cor0)
	      in  let <_cor3> =
		      %% Line 642
		      call 'filename':'dirname'
			  (_cor2)
		  in  %% Line 642
		      apply 'simplify_path'/1
			  (_cor3)
	  %% Line 643
	  <_cor6> when 'true' ->
	      _cor0
	end
'try_subdir'/2 =
    %% Line 674
    fun (_cor1,_cor0) ->
	let <D> =
	    %% Line 675
	    call 'filename':'join'
		(_cor1, _cor0)
	in  %% Line 676
	    case call 'filelib':'is_dir'
		     (D) of
	      %% Line 677
	      <'true'> when 'true' ->
		  D
	      %% Line 678
	      <'false'> when 'true' ->
		  _cor1
	      ( <_cor3> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor3})
		-| ['compiler_generated'] )
	    end
'write_file'/3 =
    %% Line 688
    fun (_cor2,_cor1,_cor0) ->
	%% Line 689
	apply 'write_file'/4
	    (_cor2, _cor1, _cor0, '')
'write_file'/4 =
    %% Line 697
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 698
	apply 'write_file'/5
	    (_cor3, _cor2, _cor1, _cor0, [{'encoding','latin1'}])
'write_file'/5 =
    %% Line 700
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 701
	    apply 'to_list'/1
		(_cor1)
	in  let <File> =
		%% Line 701
		call 'filename':'join'
		    ([_cor3|[_cor5|[_cor2|[]]]])
	    in  %% Line 702
		case call 'filelib':'ensure_dir'
			 (File) of
		  <'ok'> when 'true' ->
		      let <_cor8> =
			  %% Line 703
			  ['write'|_cor0]
		      in  %% Line 703
			  case call 'file':'open'
				   (File, _cor8) of
			    %% Line 704
			    <{'ok',FD}> when 'true' ->
				do  %% Line 705
				    call 'io':'put_chars'
					(FD, _cor4)
				    let <_cor17> =
					%% Line 706
					call 'file':'close'
					    (FD)
				    in  %% Line 706
					case _cor17 of
					  <'ok'> when 'true' ->
					      ( _cor17
						-| ['compiler_generated'] )
					  ( <_cor9> when 'true' ->
						primop 'match_fail'
						    ({'badmatch',_cor9})
					    -| ['compiler_generated'] )
					end
			    %% Line 707
			    <{'error',R}> when 'true' ->
				let <R1> =
				    %% Line 708
				    call 'file':'format_error'
					(R)
				in  do  %% Line 709
					call 'edoc_report':'report'
					    ([99|[111|[117|[108|[100|[32|[110|[111|[116|[32|[119|[114|[105|[116|[101|[32|[102|[105|[108|[101|[32|[39|[126|[116|[115|[39|[58|[32|[126|[116|[115|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [File|[R1|[]]])
					%% Line 710
					call 'erlang':'exit'
					    ('error')
			    ( <_cor11> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor11})
			      -| ['compiler_generated'] )
			  end
		  ( <_cor7> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_cor7})
		    -| ['compiler_generated'] )
		end
'write_info_file'/4 =
    %% Line 714
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <Ts> =
	    %% Line 715
	    [{'packages',_cor2}|%% Line 716
				[{'modules',_cor1}|[]]]
	in  let <_cor5> =
		%% Line 717
		case <> of
		  <>
		      when call 'erlang':'=:='
			    (_cor3,
			     []) ->
		      Ts
		  %% Line 718
		  <> when 'true' ->
		      [{'application',_cor3}|Ts]
		end
	    in  let <_cor12> =
		    %% Line 720
		    ( letrec
			  'lc$^0'/1 =
			      fun (_cor9) ->
				  case _cor9 of
				    <[T|_cor8]> when 'true' ->
					let <_cor10> =
					    call 'io_lib':'fwrite'
						([126|[112|[46|[10]]]], [T|[]])
					in  let <_cor11> =
						apply 'lc$^0'/1
						    (_cor8)
					    in  ( [_cor10|_cor11]
						  -| ['compiler_generated'] )
				    <[]> when 'true' ->
					[]
				    ( <_cor9> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor9})
					    -| [{'function_name',{'lc$^0',1}}] )
				      -| ['compiler_generated'] )
				  end
		      in  apply 'lc$^0'/1
			      (_cor5)
		      -| ['list_comprehension'] )
		in  let <S> =
			%% Line 721
			[[37|[37|[32|[101|[110|[99|[111|[100|[105|[110|[103|[58|[32|[85|[84|[70|[45|[56|[10]]]]]]]]]]]]]]]]]]]|_cor12]
		    in  %% Line 722
			apply 'write_file'/5
			    (S, _cor0, [101|[100|[111|[99|[45|[105|[110|[102|[111]]]]]]]]], '', [{'encoding','unicode'}])
'read_file'/1 =
    %% Line 728
    fun (_cor0) ->
	%% Line 729
	case call 'file':'read_file'
		 (_cor0) of
	  %% Line 730
	  <{'ok',Bin}> when 'true' ->
	      let <Enc> =
		  %% Line 731
		  call 'edoc_lib':'read_encoding'
		      (_cor0, [])
	      in  let <_cor2> =
		      catch
			  %% Line 732
			  call 'unicode':'characters_to_list'
			      (Bin, Enc)
		  in  %% Line 732
		      case _cor2 of
			%% Line 733
			<String>
			    when call 'erlang':'is_list'
				  (_cor2) ->
			    %% Line 734
			    {'ok',String}
			%% Line 735
			<_cor6> when 'true' ->
			    %% Line 736
			    {'error','invalid_unicode'}
		      end
	  %% Line 738
	  <{'error',Reason}> when 'true' ->
	      {'error',Reason}
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor4})
	    -| ['compiler_generated'] )
	end
'info_file_data'/1 =
    %% Line 745
    fun (_cor0) ->
	let <App> =
	    %% Line 746
	    call 'proplists':'get_value'
		('application', _cor0, [])
	in  let <Ps> =
		%% Line 747
		call 'proplists':'append_values'
		    ('packages', _cor0)
	    in  let <Ms> =
		    %% Line 748
		    call 'proplists':'append_values'
			('modules', _cor0)
		in  %% Line 749
		    {App,Ps,Ms}
'read_info_file'/1 =
    %% Line 754
    fun (_cor0) ->
	let <File> =
	    %% Line 755
	    call 'filename':'join'
		(_cor0, [101|[100|[111|[99|[45|[105|[110|[102|[111]]]]]]]]])
	in  %% Line 756
	    case call 'filelib':'is_file'
		     (File) of
	      %% Line 757
	      <'true'> when 'true' ->
		  %% Line 758
		  case apply 'read_file'/1
			   (File) of
		    %% Line 759
		    <{'ok',Text}> when 'true' ->
			%% Line 760
			apply 'parse_info_file'/2
			    (Text, File)
		    %% Line 761
		    <{'error',R}> when 'true' ->
			let <R1> =
			    %% Line 762
			    call 'file':'format_error'
				(R)
			in  do  %% Line 763
				call 'edoc_report':'warning'
				    ([99|[111|[117|[108|[100|[32|[110|[111|[116|[32|[114|[101|[97|[100|[32|[39|[126|[116|[115|[39|[58|[32|[126|[116|[115|[46]]]]]]]]]]]]]]]]]]]]]]]]]], [File|[R1|[]]])
				%% Line 764
				{[],[],[]}
		    ( <_cor3> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor3})
		      -| ['compiler_generated'] )
		  end
	      %% Line 766
	      <'false'> when 'true' ->
		  %% Line 767
		  {[],[],[]}
	      ( <_cor4> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor4})
		-| ['compiler_generated'] )
	    end
'uri_get_info_file'/1 =
    %% Line 772
    fun (_cor0) ->
	let <URI> =
	    %% Line 773
	    apply 'join_uri'/2
		(_cor0, [101|[100|[111|[99|[45|[105|[110|[102|[111]]]]]]]]])
	in  %% Line 774
	    case apply 'uri_get'/1
		     (URI) of
	      %% Line 775
	      <{'ok',Text}> when 'true' ->
		  %% Line 776
		  apply 'parse_info_file'/2
		      (Text, URI)
	      %% Line 777
	      <{'error',Msg}> when 'true' ->
		  do  %% Line 778
		      call 'edoc_report':'warning'
			  ([99|[111|[117|[108|[100|[32|[110|[111|[116|[32|[114|[101|[97|[100|[32|[39|[126|[116|[115|[39|[58|[32|[126|[116|[115|[46]]]]]]]]]]]]]]]]]]]]]]]]]], [URI|[Msg|[]]])
		      %% Line 779
		      {[],[],[]}
	      ( <_cor2> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor2})
		-| ['compiler_generated'] )
	    end
'parse_info_file'/2 =
    %% Line 782
    fun (_cor1,_cor0) ->
	%% Line 783
	case apply 'parse_terms'/1
		 (_cor1) of
	  %% Line 784
	  <{'ok',Vs}> when 'true' ->
	      %% Line 785
	      apply 'info_file_data'/1
		  (Vs)
	  %% Line 786
	  <{'error','eof'}> when 'true' ->
	      do  %% Line 787
		  call 'edoc_report':'warning'
		      ([117|[110|[101|[120|[112|[101|[99|[116|[101|[100|[32|[101|[110|[100|[32|[111|[102|[32|[102|[105|[108|[101|[32|[105|[110|[32|[39|[126|[116|[115|[39|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [_cor0|[]])
		  %% Line 788
		  {[],[],[]}
	  %% Line 789
	  <{'error',{_X_Line,Module,R}}> when 'true' ->
	      let <_cor2> =
		  %% Line 790
		  call Module:'format_error'
		      (R)
	      in  do  %% Line 790
		      call 'edoc_report':'warning'
			  ([126|[116|[115|[58|[32|[126|[116|[115|[46]]]]]]]]], [_cor2|[_cor0|[]]])
		      %% Line 791
		      {[],[],[]}
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor3})
	    -| ['compiler_generated'] )
	end
'parse_terms'/1 =
    %% Line 794
    fun (_cor0) ->
	%% Line 795
	case call 'erl_scan':'string'
		 (_cor0) of
	  %% Line 796
	  <{'ok',Ts,_X_Line}> when 'true' ->
	      %% Line 797
	      apply 'parse_terms_1'/3
		  (Ts, [], [])
	  %% Line 798
	  <{'error',R,_X_Line}> when 'true' ->
	      %% Line 799
	      {'error',R}
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor1})
	    -| ['compiler_generated'] )
	end
'parse_terms_1'/3 =
    %% Line 802
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[T = {'dot',_X_L}|Ts],As,Vs> when 'true' ->
	      let <_cor3> =
		  %% Line 803
		  call 'lists':'reverse'
		      ([T|As])
	      in  %% Line 803
		  case call 'erl_parse':'parse_term'
			   (_cor3) of
		    %% Line 804
		    <{'ok',V}> when 'true' ->
			%% Line 805
			apply 'parse_terms_1'/3
			    (Ts, [], [V|Vs])
		    %% Line 806
		    <{'error',R}> when 'true' ->
			%% Line 807
			{'error',R}
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor4})
		      -| ['compiler_generated'] )
		  end
	  %% Line 809
	  <[T|Ts],As,Vs> when 'true' ->
	      %% Line 810
	      apply 'parse_terms_1'/3
		  (Ts, [T|As], Vs)
	  %% Line 811
	  <[],[],Vs> when 'true' ->
	      let <_cor5> =
		  %% Line 812
		  call 'lists':'reverse'
		      (Vs)
	      in  %% Line 812
		  {'ok',_cor5}
	  %% Line 813
	  <[],_X_As,_X_Vs> when 'true' ->
	      %% Line 814
	      {'error','eof'}
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'parse_terms_1',3}}] )
	    -| ['compiler_generated'] )
	end
'find_sources'/2 =
    %% Line 821
    fun (_cor1,_cor0) ->
	%% Line 822
	apply 'find_sources'/3
	    (_cor1, [], _cor0)
'find_sources'/3 =
    %% Line 831
    fun (_cor2,_cor1,_cor0) ->
	let <Rec> =
	    %% Line 832
	    call 'proplists':'get_bool'
		('subpackages', _cor0)
	in  let <Ext> =
		%% Line 833
		call 'proplists':'get_value'
		    ('source_suffix', _cor0, [46|[101|[114|[108]]]])
	    in  %% Line 834
		apply 'find_sources'/5
		    (_cor2, _cor1, Rec, Ext, _cor0)
'find_sources'/5 =
    %% Line 836
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <Skip> =
	    %% Line 837
	    call 'proplists':'get_value'
		('exclude_packages', _cor0, [])
	in  let <_cor6> =
		%% Line 838
		apply 'to_atom'/1
		    (_cor3)
	    in  let <_cor7> =
		    %% Line 838
		    apply 'find_sources_1'/5
			(_cor4, _cor6, _cor2, _cor1, Skip)
		in  %% Line 838
		    call 'lists':'flatten'
			(_cor7)
'find_sources_1'/5 =
    %% Line 840
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[P|Ps],Pkg,Rec,Ext,Skip> when 'true' ->
	      let <_cor5> =
		  %% Line 841
		  call 'erlang':'atom_to_list'
		      (Pkg)
	      in  let <Dir> =
		      %% Line 841
		      call 'filename':'join'
			  (P, _cor5)
		  in  let <Fs1> =
			  %% Line 842
			  apply 'find_sources_1'/5
			      (Ps, Pkg, Rec, Ext, Skip)
		      in  %% Line 843
			  case call 'filelib':'is_dir'
				   (Dir) of
			    %% Line 844
			    <'true'> when 'true' ->
				let <_cor8> =
				    %% Line 845
				    apply 'find_sources_2'/5
					(Dir, Pkg, Rec, Ext, Skip)
				in  %% Line 845
				    [_cor8|Fs1]
			    %% Line 846
			    <'false'> when 'true' ->
				%% Line 847
				Fs1
			    ( <_cor9> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor9})
			      -| ['compiler_generated'] )
			  end
	  %% Line 849
	  <[],_X_Pkg,_X_Rec,_X_Ext,_X_Skip> when 'true' ->
	      %% Line 850
	      []
	  ( <_cor14,_cor13,_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12,_cor11,_cor10})
		  -| [{'function_name',{'find_sources_1',5}}] )
	    -| ['compiler_generated'] )
	end
'find_sources_2'/5 =
    %% Line 852
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 853
	case call 'lists':'member'
		 (_cor3, _cor0) of
	  %% Line 854
	  <'false'> when 'true' ->
	      let <Es> =
		  %% Line 855
		  apply 'list_dir'/2
		      (_cor4, 'false')
	      in  let <_cor11> =
		      %% Line 856
		      ( letrec
			    'lc$^0'/1 =
				fun (_cor8) ->
				    case _cor8 of
				      <[E|_cor7]> when 'true' ->
					  ( case apply 'is_source_file'/2
						     (E, _cor1) of
					      <'true'> when 'true' ->
						  let <_cor9> =
						      apply 'lc$^0'/1
							  (_cor7)
						  in  ( [{_cor3,E,_cor4}|_cor9]
							-| ['compiler_generated'] )
					      ( <'false'> when 'true' ->
						    apply 'lc$^0'/1
							(_cor7)
						-| ['compiler_generated'] )
					      ( <_cor10> when 'true' ->
						    primop 'match_fail'
							({'case_clause',_cor10})
						-| ['compiler_generated'] )
					    end
					    -| ['list_comprehension'] )
				      <[]> when 'true' ->
					  []
				      ( <_cor8> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_cor8})
					      -| [{'function_name',{'lc$^0',1}}] )
					-| ['compiler_generated'] )
				    end
			in  apply 'lc$^0'/1
				(Es)
			-| ['list_comprehension'] )
		  in  %% Line 857
		      case _cor2 of
			%% Line 858
			<'true'> when 'true' ->
			    let <_cor13> =
				%% Line 859
				apply 'find_sources_3'/6
				    (Es, _cor4, _cor3, _cor2, _cor1, _cor0)
			    in  %% Line 859
				[_cor13|_cor11]
			%% Line 860
			<'false'> when 'true' ->
			    _cor11
			( <_cor14> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor14})
			  -| ['compiler_generated'] )
		      end
	  %% Line 863
	  <'true'> when 'true' ->
	      %% Line 864
	      []
	  ( <_cor15> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor15})
	    -| ['compiler_generated'] )
	end
'find_sources_3'/6 =
    %% Line 867
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 868
	( letrec
	      'lc$^0'/1 =
		  fun (_cor8) ->
		      case _cor8 of
			<[%% Line 870
			  E|_cor7]> when 'true' ->
			    %% Line 870
			    ( case apply 'is_package_dir'/2
				       (E, _cor4) of
				<'true'> when 'true' ->
				    let <_cor11> =
					call 'filename':'join'
					    (_cor4, E)
				    in  let <_cor9> =
					    apply 'join'/2
						(_cor3, E)
					in  let <_cor10> =
						apply 'to_atom'/1
						    (_cor9)
					    in  let <_cor12> =
						    apply 'find_sources_2'/5
							(_cor11, _cor10, _cor2, _cor1, _cor0)
						in  let <_cor13> =
							apply 'lc$^0'/1
							    (_cor7)
						    in  ( [_cor12|_cor13]
							  -| ['compiler_generated'] )
				( <'false'> when 'true' ->
				      apply 'lc$^0'/1
					  (_cor7)
				  -| ['compiler_generated'] )
				( <_cor14> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor14})
				  -| ['compiler_generated'] )
			      end
			      -| ['list_comprehension'] )
			<[]> when 'true' ->
			    []
			( <_cor8> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor8})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  apply 'lc$^0'/1
		  (_cor5)
	  -| ['list_comprehension'] )
'join'/2 =
    %% Line 872
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'',E> when 'true' ->
	      E
	  %% Line 873
	  <Pkg,E> when 'true' ->
	      call 'filename':'join'
		  (Pkg, E)
	end
'is_source_file'/2 =
    %% Line 875
    fun (_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 876
	    call 'filename':'extension'
		(_cor1)
	in  %% Line 877
	    ( case <> of
		( <>
		      when call 'erlang':'=='
			    (_cor3,
			     _cor0) ->
		      let <_cor4> =
			  call 'filename':'rootname'
			      (_cor1, _cor0)
		      in  apply 'is_name'/1
			      (_cor4)
		  -| ['compiler_generated'] )
		( <> when 'true' ->
		      'false'
		  -| ['compiler_generated'] )
	      end
	      -| ['compiler_generated'] )
'is_package_dir'/2 =
    %% Line 879
    fun (_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 880
	    call 'filename':'basename'
		(_cor1)
	in  let <_cor4> =
		%% Line 880
		call 'filename':'rootname'
		    (_cor3)
	    in  %% Line 881
		( case apply 'is_name'/1
			   (_cor4) of
		    ( <( 'true'
			 -| ['compiler_generated'] )> when 'true' ->
			  let <_cor5> =
			      call 'filename':'join'
				  (_cor0, _cor1)
			  in  call 'filelib':'is_dir'
				  (_cor5)
		      -| ['compiler_generated'] )
		    ( <( 'false'
			 -| ['compiler_generated'] )> when 'true' ->
			  'false'
		      -| ['compiler_generated'] )
		    ( <_cor2> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {( 'badarg'
				      -| ['compiler_generated'] ),_cor2}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
		  -| ['compiler_generated'] )
'find_file'/3 =
    %% Line 884
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[P|Ps],Pkg = [],Name> when 'true' ->
	      %% Line 885
	      case <> of
		<>
		    when call 'erlang':'=:='
			  ([],
			   Pkg) ->
		    let <File> =
			%% Line 886
			call 'filename':'join'
			    (P, Name)
		    in  %% Line 887
			case call 'filelib':'is_file'
				 (File) of
			  %% Line 888
			  <'true'> when 'true' ->
			      %% Line 889
			      File
			  %% Line 890
			  <'false'> when 'true' ->
			      %% Line 891
			      apply 'find_file'/3
				  (Ps, Pkg, Name)
			  ( <_cor5> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor5})
			    -| ['compiler_generated'] )
			end
		( <> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',[]})
		  -| ['compiler_generated'] )
	      end
	  %% Line 893
	  <[],[],_X_Name> when 'true' ->
	      %% Line 894
	      []
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'find_file',3}}] )
	    -| ['compiler_generated'] )
	end
'find_doc_dirs'/0 =
    %% Line 897
    fun () ->
	let <_cor0> =
	    %% Line 898
	    call 'code':'get_path'
		()
	in  %% Line 898
	    apply 'find_doc_dirs'/1
		(_cor0)
'find_doc_dirs'/1 =
    %% Line 900
    fun (_cor0) ->
	case _cor0 of
	  <[P0|Ps]> when 'true' ->
	      let <P> =
		  %% Line 901
		  call 'filename':'absname'
		      (P0)
	      in  let <_cor3> =
		      %% Line 902
		      case call 'filename':'basename'
			       (P) of
			%% Line 903
			<[101|[98|[105|[110]]]]> when 'true' ->
			    %% Line 904
			    call 'filename':'dirname'
				(P)
			%% Line 905
			<_cor10> when 'true' ->
			    %% Line 906
			    P
		      end
		  in  let <Dir> =
			  %% Line 908
			  apply 'try_subdir'/2
			      (_cor3, [100|[111|[99]]])
		      in  let <File> =
			      %% Line 909
			      call 'filename':'join'
				  (Dir, [101|[100|[111|[99|[45|[105|[110|[102|[111]]]]]]]]])
			  in  %% Line 910
			      case call 'filelib':'is_file'
				       (File) of
				%% Line 911
				<'true'> when 'true' ->
				    let <_cor7> =
					%% Line 912
					apply 'find_doc_dirs'/1
					    (Ps)
				    in  %% Line 912
					[Dir|_cor7]
				%% Line 913
				<'false'> when 'true' ->
				    %% Line 914
				    apply 'find_doc_dirs'/1
					(Ps)
				( <_cor8> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor8})
				  -| ['compiler_generated'] )
			      end
	  %% Line 916
	  <[]> when 'true' ->
	      %% Line 917
	      []
	  ( <_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9})
		  -| [{'function_name',{'find_doc_dirs',1}}] )
	    -| ['compiler_generated'] )
	end
'get_doc_links'/4 =
    %% Line 926
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 927
	    call 'proplists':'append_values'
		('doc_path', _cor0)
	in  let <_cor4> =
		%% Line 927
		apply 'find_doc_dirs'/0
		    ()
	    in  let <Path> =
		    %% Line 927
		    call 'erlang':'++'
			(_cor5, _cor4)
		in  let <_cor12> =
			%% Line 928
			( letrec
			      'lc$^0'/1 =
				  fun (_cor9) ->
				      case _cor9 of
					<[P|_cor8]> when 'true' ->
					    let <_cor10> =
						apply 'uri_get_info_file'/1
						    (P)
					    in  let <_cor11> =
						    apply 'lc$^0'/1
							(_cor8)
						in  ( [{P,_cor10}|_cor11]
						      -| ['compiler_generated'] )
					<[]> when 'true' ->
					    []
					( <_cor9> when 'true' ->
					      ( primop 'match_fail'
						    ({'function_clause',_cor9})
						-| [{'function_name',{'lc$^0',1}}] )
					  -| ['compiler_generated'] )
				      end
			  in  apply 'lc$^0'/1
				  (Path)
			  -| ['list_comprehension'] )
		    in  let <Ds1> =
			    %% Line 929
			    [{[],{_cor3,_cor2,_cor1}}|_cor12]
			in  let <D> =
				%% Line 930
				call 'dict':'new'
				    ()
			    in  %% Line 931
				apply 'make_links'/4
				    (Ds1, D, D, D)
'make_links'/4 =
    %% Line 933
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[{Dir,{App,Ps,Ms}}|Ds],A,P,M> when 'true' ->
	      let <_cor4> =
		  %% Line 934
		  case <> of
		    <>
			when call 'erlang':'=:='
			      (App,
			       []) ->
			A
		    %% Line 935
		    <> when 'true' ->
			apply 'add_new'/3
			    (App, Dir, A)
		  end
	      in  let <F> =
		      %% Line 937
		      ( fun (_cor7,_cor6) ->
			    apply 'add_new'/3
				(_cor7, Dir, _cor6)
			-| [{'id',{0,0,'-make_links/4-fun-0-'}}] )
		  in  let <P1> =
			  %% Line 938
			  call 'lists':'foldl'
			      (F, P, Ps)
		      in  let <M1> =
			      %% Line 939
			      call 'lists':'foldl'
				  (F, M, Ms)
			  in  %% Line 940
			      apply 'make_links'/4
				  (Ds, _cor4, P1, M1)
	  %% Line 941
	  <[],A,P,M> when 'true' ->
	      let <F> =
		  %% Line 942
		  ( fun (_cor16) ->
			%% Line 943
			( fun (_cor14) ->
			      %% Line 944
			      case call 'dict':'find'
				       (_cor14, _cor16) of
				%% Line 945
				<{'ok',V}> when 'true' ->
				    V
				%% Line 946
				<'error'> when 'true' ->
				    []
				( <_cor13> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor13})
				  -| ['compiler_generated'] )
			      end
			  -| [{'id',{0,0,'-make_links/4-fun-1-'}}] )
		    -| [{'id',{0,0,'-make_links/4-fun-2-'}}] )
	      in  let <_cor21> =
		      %% Line 950
		      apply F
			  (A)
		  in  let <_cor20> =
			  %% Line 950
			  apply F
			      (P)
		      in  let <_cor19> =
			      %% Line 950
			      apply F
				  (M)
			  in  %% Line 950
			      {_cor21,_cor20,_cor19}
	  ( <_cor25,_cor24,_cor23,_cor22> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor25,_cor24,_cor23,_cor22})
		  -| [{'function_name',{'make_links',4}}] )
	    -| ['compiler_generated'] )
	end
'add_new'/3 =
    %% Line 952
    fun (_cor2,_cor1,_cor0) ->
	%% Line 953
	case call 'dict':'is_key'
		 (_cor2, _cor0) of
	  %% Line 954
	  <'true'> when 'true' ->
	      _cor0
	  %% Line 956
	  <'false'> when 'true' ->
	      %% Line 957
	      call 'dict':'store'
		  (_cor2, _cor1, _cor0)
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor3})
	    -| ['compiler_generated'] )
	end
'get_doc_env'/1 =
    %% Line 964
    fun (_cor0) ->
	%% Line 965
	apply 'get_doc_env'/4
	    ([], [], [], _cor0)
'get_doc_env'/4 =
    %% Line 988
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <Suffix> =
	    %% Line 989
	    call 'proplists':'get_value'
		('file_suffix', _cor0, %% Line 990
				       [46|[104|[116|[109|[108]]]]])
	in  let <AppDefault> =
		%% Line 991
		call 'proplists':'get_value'
		    ('app_default', _cor0, [104|[116|[116|[112|[58|[47|[47|[119|[119|[119|[46|[101|[114|[108|[97|[110|[103|[46|[111|[114|[103|[47|[101|[100|[111|[99|[47|[100|[111|[99]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
	    in  let <Includes> =
		    %% Line 992
		    call 'proplists':'append_values'
			('includes', _cor0)
		in  %% Line 994
		    case apply 'get_doc_links'/4
			     (_cor3, _cor2, _cor1, _cor0) of
		      <{A,P,M}> when 'true' ->
			  let <_cor8> =
			      %% Line 996
			      call 'erlang':'++'
				  ([112|[97|[99|[107|[97|[103|[101|[45|[115|[117|[109|[109|[97|[114|[121]]]]]]]]]]]]]]], Suffix)
			  in  %% Line 995
			      {'env',[],[],[],Suffix,_cor8,%% Line 997
							   A,%% Line 999
							     M,%% Line 998
							       P,%% Line 1000
								 AppDefault,[],%% Line 1001
									       Includes}
		      ( <_cor7> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor7})
			-| ['compiler_generated'] )
		    end
'run_doclet'/2 =
    %% Line 1013
    fun (_cor1,_cor0) ->
	%% Line 1014
	apply 'run_plugin'/4
	    ('doclet', 'edoc_doclet', _cor1, _cor0)
'run_layout'/2 =
    %% Line 1023
    fun (_cor1,_cor0) ->
	%% Line 1024
	apply 'run_plugin'/4
	    ('layout', 'edoc_layout', _cor1, _cor0)
'run_plugin'/4 =
    %% Line 1026
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1027
	apply 'run_plugin'/5
	    (_cor3, _cor3, _cor2, _cor1, _cor0)
'run_plugin'/5 =
    %% Line 1029
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Name,Key,Default,Fun,Opts>
	      when call 'erlang':'is_atom'
		    (Name) ->
	      let <Module> =
		  %% Line 1030
		  apply 'get_plugin'/3
		      (Key, Default, Opts)
	      in  let <_cor7> =
		      catch
			  let <_cor6> =
			      %% Line 1031
			      apply Fun
				  (Module)
			  in  %% Line 1031
			      {'ok',_cor6}
		  in  %% Line 1031
		      case _cor7 of
			%% Line 1032
			<{'ok',Value}> when 'true' ->
			    %% Line 1033
			    Value
			%% Line 1034
			<R> when 'true' ->
			    do  %% Line 1035
				call 'edoc_report':'report'
				    ([101|[114|[114|[111|[114|[32|[105|[110|[32|[126|[116|[115|[32|[39|[126|[119|[39|[58|[32|[126|[80|[46]]]]]]]]]]]]]]]]]]]]]], [Name|[Module|[R|[20]]]])
				%% Line 1036
				call 'erlang':'exit'
				    ('error')
		      end
	  ( <_cor13,_cor12,_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11,_cor10,_cor9})
		  -| [{'function_name',{'run_plugin',5}}] )
	    -| ['compiler_generated'] )
	end
'get_plugin'/3 =
    %% Line 1039
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1040
	case call 'proplists':'get_value'
		 (_cor2, _cor0, _cor1) of
	  %% Line 1041
	  <M>
	      when call 'erlang':'is_atom'
		    (M) ->
	      %% Line 1042
	      M
	  %% Line 1043
	  <Other> when 'true' ->
	      do  %% Line 1044
		  call 'edoc_report':'report'
		      ([98|[97|[100|[32|[118|[97|[108|[117|[101|[32|[102|[111|[114|[32|[111|[112|[116|[105|[111|[110|[32|[39|[126|[119|[39|[58|[32|[126|[80|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [_cor2|[Other|[10]]])
		  %% Line 1045
		  call 'erlang':'exit'
		      ('error')
	end
'throw_error'/2 =
    %% Line 1060
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'missing',C},L> when 'true' ->
	      %% Line 1061
	      apply 'throw_error'/2
		  ({[109|[105|[115|[115|[105|[110|[103|[32|[39|[126|[99|[39|[46]]]]]]]]]]]]],[C|[]]}, L)
	  %% Line 1062
	  <'eof',L> when 'true' ->
	      %% Line 1063
	      call 'erlang':'throw'
		  ({'error',L,[117|[110|[101|[120|[112|[101|[99|[116|[101|[100|[32|[101|[110|[100|[32|[111|[102|[32|[101|[120|[112|[114|[101|[115|[115|[105|[111|[110|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]})
	  %% Line 1064
	  <{L,M,D},_X_L> when 'true' ->
	      %% Line 1065
	      call 'erlang':'throw'
		  ({'error',L,{'format_error',M,D}})
	  %% Line 1066
	  <D,L> when 'true' ->
	      %% Line 1067
	      call 'erlang':'throw'
		  ({'error',L,D})
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('edoc_lib')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('edoc_lib', _cor0)
end