module 'xmerl_validate' ['module_info'/0,
			 'module_info'/1,
			 'validate'/2]
    attributes []
'validate'/2 =
    %% Line 31
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'xmerl_scanner',_cor7,_cor8,_cor9,_cor10,DTName,OpProv,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40},%% Line 32
																																		      {'xmlElement',Name,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50}>
	      when let <_cor2> =
		    %% Line 33
		    call 'erlang':'=/='
			(DTName, Name)
		in  let <_cor3> =
			%% Line 33
			call 'erlang':'=/='
			    (OpProv, 'option_provided')
		    in  %% Line 33
			call 'erlang':'and'
			    (_cor2, _cor3) ->
	      %% Line 34
	      {'error',{'mismatched_root_element',Name,DTName}}
	  %% Line 35
	  <S = {'xmerl_scanner',_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,Rules,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,_cor69,_cor70,_cor71,_cor72,_cor73,_cor74,_cor75,_cor76,_cor77,_cor78,_cor79,_cor80,_cor81,_cor82,_cor83,_cor84,_cor85},XML = %% Line 36
																																				  {'xmlElement',Name,_cor86,_cor87,_cor88,_cor89,_cor90,_cor91,_cor92,_cor93,_cor94,_cor95}> when 'true' ->
	      catch
		  let <_cor4> =
		      %% Line 37
		      apply 'read_rules'/2
			  (Rules, Name)
		  in  %% Line 37
		      apply 'do_validation'/4
			  (_cor4, XML, Rules, S)
	  %% Line 38
	  <_cor96,XML> when 'true' ->
	      %% Line 39
	      {'error',{'no_xml_element',XML}}
	end
'do_validation'/4 =
    %% Line 45
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <'undefined',{'xmlElement',Name,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36},_X_Rules,_X_S> when 'true' ->
	      %% Line 46
	      {'error',{'unknown_element',Name}}
	  %% Line 47
	  <El_Rule,XML,Rules,S> when 'true' ->
	      let <_cor8> =
		  catch
		      %% Line 48
		      ( case El_Rule of
			  ( <( {'xmlElement',_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_rec0,_cor43,_cor44,_cor45,_cor46}
			       -| ['compiler_generated'] )> when 'true' ->
				%% Line 49
				( case XML of
				    ( <( {'xmlElement',_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_rec1,_cor54,_cor55,_cor56,_cor57}
					 -| ['compiler_generated'] )> when 'true' ->
					  apply 'valid_attributes'/3
					      (_rec0, _rec1, S)
				      -| ['compiler_generated'] )
				    ( <_cor58> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {'badrecord','xmlElement'}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			  ( <_cor47> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','xmlElement'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
	      in  %% Line 48
		  case _cor8 of
		    %% Line 50
		    <{'EXIT',Reason}> when 'true' ->
			%% Line 51
			{'error',Reason}
		    %% Line 52
		    <{'error',Reason}> when 'true' ->
			%% Line 53
			{'error',Reason}
		    %% Line 54
		    <Attr_2> when 'true' ->
			%% Line 56
			( case El_Rule of
			    ( <( {'xmlElement',_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_rec2,_cor66,_cor67,_cor68}
				 -| ['compiler_generated'] )> when 'true' ->
				  let <WSActionMode> =
				      %% Line 57
				      apply 'ws_action_mode'/3
					  (_cor68, _rec2, %% Line 58
							  S)
				  in  %% Line 59
				      ( case XML of
					  ( <( {'xmlElement',_cor81,_cor82,_cor83,_cor84,_cor85,_cor86,_cor87,_rec4,_cor88,_cor89,_cor90}
					       -| ['compiler_generated'] )> when 'true' ->
						do  %% Line 60
						    apply 'check_direct_ws_SDD'/2
							(_rec4, WSActionMode)
						    %% Line 61
						    case apply 'valid_contents'/5
							     (_rec2, _rec4, %% Line 62
									    Rules, %% Line 62
										   S, %% Line 62
										      WSActionMode) of
						      %% Line 63
						      <{'error',Reason}> when 'true' ->
							  %% Line 64
							  {'error',Reason}
						      %% Line 65
						      <{'error',Reason,N}> when 'true' ->
							  %% Line 66
							  {'error',Reason,N}
						      %% Line 67
						      <XMLS> when 'true' ->
							  let <_cor19> =
							      %% Line 68
							      call 'erlang':'setelement'
								  (9, XML, XMLS)
							  in  %% Line 68
							      call 'erlang':'setelement'
								  (8, _cor19, Attr_2)
						    end
					    -| ['compiler_generated'] )
					  ( <_cor91> when 'true' ->
						( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'error'
										       -| ['compiler_generated'] )
						      (( {'badrecord','xmlElement'}
							 -| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					end
					-| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			    ( <_cor69> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','xmlElement'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		  end
	end
'check_direct_ws_SDD'/2 =
    %% Line 72
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <XML,'always_preserve'> when 'true' ->
	      do  %% Line 73
		  case XML of
		    %% Line 74
		    <[{'xmlText',_cor6,_cor7,_cor8,_cor9,_cor10}|_X_Rest]> when 'true' ->
			%% Line 75
			call 'erlang':'exit'
			    ({'error',{'illegal_whitespace_standalone_doc',XML}})
		    %% Line 76
		    <_cor11> when 'true' ->
			'ok'
		  end
		  %% Line 78
		  case call 'lists':'reverse'
			   (XML) of
		    %% Line 79
		    <[{'xmlText',_cor12,_cor13,_cor14,_cor15,_cor16}|_X_Rest2]> when 'true' ->
			%% Line 80
			call 'erlang':'exit'
			    ({'error',{'illegal_whitespace_standalone_doc',XML}})
		    %% Line 81
		    <_cor17> when 'true' ->
			'ok'
		  end
	  %% Line 83
	  <_cor18,_cor19> when 'true' ->
	      'ok'
	end
'ws_action_mode'/3 =
    %% Line 85
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'external',_cor7},Content,{'xmerl_scanner',_cor8,'yes',_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42}> when 'true' ->
	      %% Line 86
	      case apply 'element_content'/1
		       (Content) of
		%% Line 87
		<'children'> when 'true' ->
		    %% Line 88
		    'always_preserve'
		%% Line 89
		<_cor43> when 'true' ->
		    %% Line 90
		    'preserve'
	      end
	  %% Line 92
	  <_cor44,_cor45,_cor46> when 'true' ->
	      %% Line 93
	      'preserve'
	end
'element_content'/1 =
    %% Line 95
    fun (_cor0) ->
	case _cor0 of
	  <A>
	      when try
		    let <_cor1> =
			call 'erlang':'is_atom'
			    (_cor0)
		    in  let <_cor2> =
			    call 'erlang':'=/='
				(_cor0, 'any')
			in  let <_cor3> =
				call 'erlang':'=/='
				    (_cor0, 'empty')
			    in  let <_cor4> =
				    call 'erlang':'and'
					(_cor2, _cor3)
				in  call 'erlang':'and'
					(_cor1, _cor4)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 96
	      'children'
	  %% Line 97
	  <{'choice',L}>
	      when call 'erlang':'is_list'
		    (L) ->
	      %% Line 98
	      apply 'element_content'/1
		  (L)
	  %% Line 99
	  <{'seq',L}>
	      when call 'erlang':'is_list'
		    (L) ->
	      %% Line 100
	      apply 'element_content'/1
		  (L)
	  %% Line 101
	  <['#PCDATA'|_X_T]> when 'true' ->
	      %% Line 102
	      'mixed'
	  %% Line 103
	  <'#PCDATA'> when 'true' ->
	      %% Line 104
	      'mixed'
	  %% Line 105
	  <{'*',Rest}> when 'true' ->
	      %% Line 106
	      apply 'element_content'/1
		  (Rest)
	  %% Line 107
	  <_cor6> when 'true' ->
	      'children'
	end
'read_rules'/2 =
    %% Line 111
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <_cor5,'pcdata'> when 'true' ->
	      %% Line 112
	      'pcdata'
	  %% Line 113
	  <T,Name> when 'true' ->
	      %% Line 114
	      case call 'ets':'lookup'
		       (T, {'elem_def',Name}) of
		%% Line 115
		<[]> when 'true' ->
		    %% Line 116
		    'undefined'
		%% Line 117
		<[{_X_K,V}|[]]> when 'true' ->
		    %% Line 118
		    V
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor2})
		  -| ['compiler_generated'] )
	      end
	end
'valid_attributes'/3 =
    %% Line 129
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <All_Attr,Attr = [{'xmlAttribute',_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32}|_X_T],S> when 'true' ->
	      do  %% Line 130
		  apply 'single_ID_definition'/1
		      (All_Attr)
		  do  %% Line 131
		      apply 'vc_Name_Token_IDREFS'/2
			  (All_Attr, Attr)
		      let <_cor6> =
			  %% Line 132
			  ( fun (_cor4) ->
				case _cor4 of
				  <{'xmlAttribute',Name,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40}> when 'true' ->
				      %% Line 133
				      case apply 'is_attribute_exist'/2
					       (Name, All_Attr) of
					%% Line 134
					<'true'> when 'true' ->
					    %% Line 135
					    'ok'
					%% Line 136
					<'false'> when 'true' ->
					    %% Line 137
					    call 'erlang':'exit'
						({'error',{'attribute_unknown',Name}})
					( <_cor3> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_cor3})
					  -| ['compiler_generated'] )
				      end
				  ( <_cor5> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor5})
					  -| [{'function_name',{'-valid_attributes/3-fun-0-',1}}] )
				    -| ['compiler_generated'] )
				end
			    -| [{'id',{0,0,'-valid_attributes/3-fun-0-'}}] )
		      in  do  %% Line 132
			      call 'lists':'foreach'
				  (_cor6, %% Line 140
					  Attr)
			      let <_cor12> =
				  %% Line 141
				  ( fun (_cor9,_cor8) ->
					case <_cor9,_cor8> of
					  <{Name,DataType,IF,DefDecl,Env},Attr_2> when 'true' ->
					      let <_cor7> =
						  %% Line 143
						  apply 'valid_attribute'/7
						      (Name, DataType, IF, %% Line 144
									   DefDecl, %% Line 144
										    Attr, %% Line 144
											  Env, %% Line 144
											       S)
					      in  %% Line 142
						  call 'erlang':'++'
						      (Attr_2, %% Line 143
							       [_cor7|%% Line 144
								      []])
					  ( <_cor11,_cor10> when 'true' ->
						( primop 'match_fail'
						      ({'function_clause',_cor11,_cor10})
						  -| [{'function_name',{'-valid_attributes/3-fun-1-',2}}] )
					    -| ['compiler_generated'] )
					end
				    -| [{'id',{0,0,'-valid_attributes/3-fun-1-'}}] )
			      in  let <_cor13> =
				      %% Line 141
				      call 'lists':'foldl'
					  (_cor12, %% Line 145
						   [], %% Line 145
						       All_Attr)
				  in  %% Line 141
				      call 'lists':'flatten'
					  (_cor13)
	  %% Line 146
	  <[],[],_cor41> when 'true' ->
	      %% Line 147
	      []
	  %% Line 148
	  <All_Attr,[],S> when 'true' ->
	      do  %% Line 149
		  apply 'single_ID_definition'/1
		      (All_Attr)
		  let <_cor19> =
		      %% Line 150
		      ( fun (_cor16,_cor15) ->
			    case <_cor16,_cor15> of
			      <{Name,DataType,IF,DefDecl,Env},Attr_2> when 'true' ->
				  let <_cor14> =
				      %% Line 151
				      apply 'valid_attribute'/7
					  (Name, %% Line 152
						 DataType, %% Line 152
							   IF, %% Line 153
							       DefDecl, %% Line 154
									[], %% Line 155
									    Env, %% Line 155
										 S)
				  in  %% Line 151
				      call 'erlang':'++'
					  (Attr_2, [_cor14|%% Line 155
							   []])
			      ( <_cor18,_cor17> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_cor18,_cor17})
				      -| [{'function_name',{'-valid_attributes/3-fun-2-',2}}] )
				-| ['compiler_generated'] )
			    end
			-| [{'id',{0,0,'-valid_attributes/3-fun-2-'}}] )
		  in  let <_cor20> =
			  %% Line 150
			  call 'lists':'foldl'
			      (_cor19, %% Line 156
				       [], %% Line 156
					   All_Attr)
		      in  %% Line 150
			  call 'lists':'flatten'
			      (_cor20)
	  ( <_cor23,_cor22,_cor21> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor23,_cor22,_cor21})
		  -| [{'function_name',{'valid_attributes',3}}] )
	    -| ['compiler_generated'] )
	end
'valid_attribute'/7 =
    %% Line 166
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 167
	( case _cor0 of
	    ( <( {'xmerl_scanner',_cor19,_rec6,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <Attr> =
		      %% Line 168
		      apply 'search_attr'/2
			  (_cor6, _cor2)
		  in  do  %% Line 169
			  apply 'check_SDD_validity'/4
			      (_rec6, _cor1, Attr, _cor4)
			  %% Line 170
			  case <_cor3,_cor4,Attr> of
			    %% Line 171
			    <'#REQUIRED',_cor55,'no_attribute'> when 'true' ->
				%% Line 172
				call 'erlang':'exit'
				    ({'error',{_cor6,'is_required'}})
			    %% Line 173
			    <'#IMPLIED',_cor56,'no_attribute'> when 'true' ->
				%% Line 174
				[]
			    %% Line 175
			    <'#FIXED',DefVal,_cor57 = {'xmlAttribute',_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66}>
				when let <_cor67> =
				      call 'erlang':'=:='
					  (_cor57, Attr)
				  in  let <_cor68> =
					  call 'erlang':'=:='
					      (_cor65, DefVal)
				      in  call 'erlang':'and'
					      (_cor67, _cor68) ->
				%% Line 176
				Attr
			    %% Line 177
			    <'#FIXED',A,'no_attribute'> when 'true' ->
				%% Line 178
				{'xmlAttribute',_cor6,[],[],[],[],'undefined',[],A,'undefined'}
			    %% Line 179
			    <'#FIXED',A,B> when 'true' ->
				%% Line 180
				call 'erlang':'exit'
				    ({'error',{'fixed_default_value_missmatch',A,B}})
			    %% Line 181
			    <_cor69,Value,'no_attribute'>
				when call 'erlang':'is_list'
				      (Value) ->
				%% Line 182
				{'xmlAttribute',_cor6,[],[],[],[],'undefined',[],Value,'undefined'}
			    %% Line 183
			    <_cor70,_cor71,_cor72 = {'xmlAttribute',_cor73,_cor74,_cor75,_cor76,_cor77,_cor78,_cor79,_cor80,_cor81}>
				when call 'erlang':'=:='
				      (_cor72,
				       Attr) ->
				%% Line 185
				apply 'test_attribute_value'/4
				    (_cor5, Attr, _cor4, _cor0)
			    %% Line 186
			    <DefDecl,Else,XML> when 'true' ->
				%% Line 187
				call 'erlang':'exit'
				    ({'error',{'unknow_attribute_type',DefDecl,Else,XML}})
			  end
	      -| ['compiler_generated'] )
	    ( <_cor54> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','xmerl_scanner'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'vc_Name_Token_IDREFS'/2 =
    %% Line 190
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{Name,Type,_cor12,_cor13,_cor14}|Rest],Attrs>
	      when let <_cor2> =
		    %% Line 191
		    call 'erlang':'=:='
			(Type, 'NMTOKEN')
		in  let <_cor3> =
			%% Line 191
			call 'erlang':'=:='
			    (Type, 'NMTOKENS')
		    in  %% Line 191
			call 'erlang':'or'
			    (_cor2, _cor3) ->
	      do  %% Line 192
		  case call 'lists':'keysearch'
			   (Name, 2, Attrs) of
		    %% Line 193
		    <{'value',A}> when 'true' ->
			%% Line 194
			( case A of
			    ( <( {'xmlAttribute',_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_rec7,_cor22}
				 -| ['compiler_generated'] )> when 'true' ->
				  apply 'valid_nmtoken_value'/2
				      (_rec7, Type)
			      -| ['compiler_generated'] )
			    ( <_cor23> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','xmlAttribute'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    %% Line 195
		    <_cor24> when 'true' ->
			'ok'
		  end
		  %% Line 197
		  apply 'vc_Name_Token_IDREFS'/2
		      (Rest, Attrs)
	  %% Line 198
	  <[{Name,Type,_cor25,_cor26,_cor27}|Rest],Attrs>
	      when %% Line 199
		call 'erlang':'=:='
		    (Type,
		     'IDREFS') ->
	      do  %% Line 200
		  case call 'lists':'keysearch'
			   (Name, 2, Attrs) of
		    %% Line 201
		    <{'value',A}> when 'true' ->
			%% Line 202
			( case A of
			    ( <( {'xmlAttribute',_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_rec8,_cor35}
				 -| ['compiler_generated'] )> when 'true' ->
				  apply 'valid_IDREFS'/2
				      (_rec8, Type)
			      -| ['compiler_generated'] )
			    ( <_cor36> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','xmlAttribute'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    %% Line 203
		    <_cor37> when 'true' ->
			'ok'
		  end
		  %% Line 205
		  apply 'vc_Name_Token_IDREFS'/2
		      (Rest, Attrs)
	  %% Line 206
	  <[_X_H|Rest],Attrs> when 'true' ->
	      %% Line 207
	      apply 'vc_Name_Token_IDREFS'/2
		  (Rest, Attrs)
	  %% Line 208
	  <[],_cor38> when 'true' ->
	      'ok'
	  ( <_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10})
		  -| [{'function_name',{'vc_Name_Token_IDREFS',2}}] )
	    -| ['compiler_generated'] )
	end
'valid_nmtoken_value'/2 =
    %% Line 210
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],'NMTOKENS'> when 'true' ->
	      %% Line 211
	      call 'erlang':'exit'
		  ({'error',{'at_least_one_Nmtoken_required'}})
	  %% Line 228
	  <Nmtok,_cor16> when 'true' ->
	      let <ValidChar> =
		  %% Line 230
		  ( fun (_cor11) ->
			case _cor11 of
			  <X>
			      when let <_cor2> =
				    call 'erlang':'=='
					(_cor11, 32)
				in  let <_cor3> =
					call 'erlang':'=='
					    (_cor11, 13)
				    in  let <_cor4> =
					    call 'erlang':'=='
						(_cor11, 10)
					in  let <_cor7> =
						let <_cor5> =
						    call 'erlang':'=='
							(_cor11, 9)
						in  let <_cor6> =
							call 'erlang':'=:='
							    (Nmtok, 'NMTOKENS')
						    in  call 'erlang':'and'
							    (_cor5, _cor6)
					    in  let <_cor8> =
						    call 'erlang':'or'
							(_cor4, _cor7)
						in  let <_cor9> =
							call 'erlang':'or'
							    (_cor3, _cor8)
						    in  call 'erlang':'or'
							    (_cor2, _cor9) ->
			      %% Line 231
			      'ok'
			  %% Line 232
			  <X> when 'true' ->
			      %% Line 233
			      case call 'xmerl_lib':'is_namechar'
				       (X) of
				%% Line 234
				<'false'> when 'true' ->
				    %% Line 235
				    call 'erlang':'exit'
					({'error',{'invalid_character_in_Nmtoken',X}})
				%% Line 236
				<_cor17> when 'true' ->
				    'ok'
			      end
			end
		    -| [{'id',{0,0,'-valid_nmtoken_value/2-fun-0-'}}] )
	      in  %% Line 239
		  call 'lists':'foreach'
		      (ValidChar, Nmtok)
	end
'valid_IDREFS'/2 =
    %% Line 241
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],'IDREFS'> when 'true' ->
	      %% Line 242
	      call 'erlang':'exit'
		  ({'error',{'at_least_one_IDREF_Name_required'}})
	  %% Line 243
	  <_X_Str,'IDREFS'> when 'true' ->
	      %% Line 244
	      'ok'
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'valid_IDREFS',2}}] )
	    -| ['compiler_generated'] )
	end
'single_ID_definition'/1 =
    %% Line 246
    fun (_cor0) ->
	case _cor0 of
	  <[Att1 = {_cor3,'ID',_cor4,_cor5,_cor6}|Rest]> when 'true' ->
	      %% Line 247
	      case call 'lists':'keysearch'
		       ('ID', 2, Rest) of
		%% Line 248
		<{'value',Att2}> when 'true' ->
		    %% Line 249
		    call 'erlang':'exit'
			({'error',{'just_one_ID_definition_allowed',Att1,Att2}})
		%% Line 250
		<_cor7> when 'true' ->
		    'ok'
	      end
	  %% Line 252
	  <[_X_H|T]> when 'true' ->
	      %% Line 253
	      apply 'single_ID_definition'/1
		  (T)
	  %% Line 254
	  <[]> when 'true' ->
	      %% Line 255
	      'ok'
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'single_ID_definition',1}}] )
	    -| ['compiler_generated'] )
	end
'check_SDD_validity'/4 =
    %% Line 257
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <'yes',{'external',_cor8},{'xmlAttribute',Name,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,'true'},_cor16> when 'true' ->
	      %% Line 258
	      call 'erlang':'exit'
		  ({'error',{'externally_defed_attribute_normalized_in_standalone_doc',Name}})
	  %% Line 259
	  <'yes',{'external',_cor17},'no_attribute',V>
	      when call 'erlang':'=/='
		    (V,
		     'no_value') ->
	      %% Line 260
	      call 'erlang':'exit'
		  ({'error',{'externally_defed_attribute_with_default_value_missing_in_standalone_doc'}})
	  %% Line 261
	  <_cor18,_cor19,_cor20,_cor21> when 'true' ->
	      %% Line 262
	      'ok'
	end
'search_attr'/2 =
    %% Line 264
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Name,[H = {'xmlAttribute',_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12}|_X_T]>
	      when call 'erlang':'=:='
		    (_cor4,
		     Name) ->
	      %% Line 265
	      H
	  %% Line 266
	  <Name,[{'xmlAttribute',_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21}|T]> when 'true' ->
	      %% Line 267
	      apply 'search_attr'/2
		  (Name, T)
	  %% Line 268
	  <_X_Name,_X_T> when 'true' ->
	      %% Line 269
	      'no_attribute'
	end
'is_attribute_exist'/2 =
    %% Line 271
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Name,[{_cor4,_cor5,_cor6,_cor7,_cor8}|_X_T]>
	      when call 'erlang':'=:='
		    (_cor4,
		     Name) ->
	      %% Line 272
	      'true'
	  %% Line 273
	  <Name,[{_X_Attr,_cor9,_cor10,_cor11,_cor12}|T]> when 'true' ->
	      %% Line 274
	      apply 'is_attribute_exist'/2
		  (Name, T)
	  %% Line 275
	  <_X_Name,[]> when 'true' ->
	      %% Line 276
	      'false'
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'is_attribute_exist',2}}] )
	    -| ['compiler_generated'] )
	end
'test_attribute_value'/4 =
    %% Line 293
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <'CDATA',Attr = {'xmlAttribute',_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62},_cor63,_cor64> when 'true' ->
	      %% Line 294
	      Attr
	  %% Line 295
	  <'NMTOKEN',Attr = {'xmlAttribute',Name,_cor65,_cor66,_cor67,_cor68,_cor69,_cor70,V,_cor71},%% Line 296
												     Default,%% Line 296
													     _X_S> when 'true' ->
	      let <Fun> =
		  %% Line 298
		  ( fun (_cor5) ->
			%% Line 299
			case call 'xmerl_lib':'is_namechar'
				 (_cor5) of
			  %% Line 300
			  <'true'> when 'true' ->
			      %% Line 301
			      'ok'
			  %% Line 302
			  <'false'> when 'true' ->
			      %% Line 304
			      call 'erlang':'exit'
				  ({'error',{'invalid_value_nmtoken',Name,V}})
			  ( <_cor4> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor4})
			    -| ['compiler_generated'] )
			end
		    -| [{'id',{0,0,'-test_attribute_value/4-fun-0-'}}] )
	      in  do  %% Line 307
		      call 'lists':'foreach'
			  (Fun, V)
		      do  %% Line 308
			  case <> of
			    %% Line 309
			    <>
				when call 'erlang':'is_list'
				      (Default) ->
				%% Line 310
				call 'lists':'foreach'
				    (Fun, Default)
			    %% Line 311
			    <> when 'true' ->
				'ok'
			  end
			  %% Line 313
			  Attr
	  %% Line 314
	  <'NMTOKENS',Attr = {'xmlAttribute',Name,_cor72,_cor73,_cor74,_cor75,_cor76,_cor77,V,_cor78},%% Line 315
												      Default,%% Line 315
													      _X_S> when 'true' ->
	      let <Fun> =
		  %% Line 317
		  ( fun (_cor15) ->
			%% Line 318
			case call 'xmerl_lib':'is_namechar'
				 (_cor15) of
			  %% Line 319
			  <'true'> when 'true' ->
			      %% Line 320
			      'ok'
			  %% Line 321
			  <'false'>
			      when let <_cor8> =
				    call 'erlang':'=='
					(_cor15, 32)
				in  let <_cor9> =
					call 'erlang':'=='
					    (_cor15, 13)
				    in  let <_cor10> =
					    call 'erlang':'=='
						(_cor15, 10)
					in  let <_cor11> =
						call 'erlang':'=='
						    (_cor15, 9)
					    in  let <_cor12> =
						    call 'erlang':'or'
							(_cor10, _cor11)
						in  let <_cor13> =
							call 'erlang':'or'
							    (_cor9, _cor12)
						    in  call 'erlang':'or'
							    (_cor8, _cor13) ->
			      %% Line 322
			      'ok'
			  %% Line 323
			  <'false'> when 'true' ->
			      %% Line 324
			      call 'erlang':'exit'
				  ({'error',{'invalid_value_nmtokens',Name,V}})
			  ( <_cor14> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor14})
			    -| ['compiler_generated'] )
			end
		    -| [{'id',{0,0,'-test_attribute_value/4-fun-1-'}}] )
	      in  do  %% Line 327
		      call 'lists':'foreach'
			  (Fun, V)
		      do  %% Line 328
			  case <> of
			    %% Line 329
			    <>
				when call 'erlang':'is_list'
				      (Default) ->
				%% Line 330
				call 'lists':'foreach'
				    (Fun, Default)
			    %% Line 331
			    <> when 'true' ->
				'ok'
			  end
			  %% Line 333
			  Attr
	  %% Line 334
	  <Ent,Attr = {'xmlAttribute',_X_Name,_cor79,_cor80,_cor81,_cor82,_cor83,_cor84,V,_cor85},_X_Default,S = %% Line 335
														 {'xmerl_scanner',_cor86,_cor87,_cor88,_cor89,_cor90,_cor91,_cor92,_cor93,_cor94,_cor95,_cor96,_cor97,_cor98,_cor99,_cor100,_cor101,_cor102,_cor103,_cor104,_cor105,_cor106,_cor107,_cor108,_cor109,_cor110,Read,_cor111,_cor112,_cor113,_cor114,_cor115,_cor116,_cor117,_cor118,_cor119,_cor120}>
	      when let <_cor18> =
		    %% Line 336
		    call 'erlang':'=:='
			(Ent, 'ENTITY')
		in  let <_cor19> =
			%% Line 336
			call 'erlang':'=:='
			    (Ent, 'ENTITIES')
		    in  %% Line 336
			call 'erlang':'or'
			    (_cor18, _cor19) ->
	      let <NameListFun> =
		  %% Line 339
		  ( fun (_cor23,_cor22,_cor21) ->
			case <_cor23,_cor22,_cor21> of
			  <[],Acc,_cor121> when 'true' ->
			      %% Line 340
			      call 'lists':'reverse'
				  (Acc)
			  %% Line 341
			  <Str,Acc,Fun> when 'true' ->
			      %% Line 342
			      case apply 'scan_name'/2
				       (Str, []) of
				<{N,Str2}> when 'true' ->
				    %% Line 343
				    apply Fun
					(Str2, [N|Acc], Fun)
				( <_cor20> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor20})
				  -| ['compiler_generated'] )
			      end
			end
		    -| [{'id',{0,0,'-test_attribute_value/4-fun-2-'}}] )
	      in  let <NameList> =
		      %% Line 345
		      apply NameListFun
			  (V, [], NameListFun)
		  in  let <VC_Entity_Name> =
			  %% Line 347
			  ( fun (_cor30) ->
				%% Line 348
				case apply Read
					 ('entity', _cor30, S) of
				  %% Line 349
				  <{_cor122,'external',{_cor123,{'ndata',_cor124}}}> when 'true' ->
				      %% Line 350
				      'ok'
				  %% Line 351
				  <_cor125> when 'true' ->
				      call 'erlang':'exit'
					  ({'error',{'vc_Entity_Name',_cor30,V}})
				end
			    -| [{'id',{0,0,'-test_attribute_value/4-fun-3-'}}] )
		      in  do  %% Line 354
			      call 'lists':'foreach'
				  (VC_Entity_Name, NameList)
			      %% Line 355
			      Attr
	  %% Line 356
	  <{Type,L},Attr = {'xmlAttribute',_cor126,_cor127,_cor128,_cor129,_cor130,_cor131,_cor132,Value,_cor133},Default,_X_S>
	      when let <_cor33> =
		    %% Line 357
		    call 'erlang':'=:='
			(Type, 'enumeration')
		in  let <_cor34> =
			%% Line 357
			call 'erlang':'=:='
			    (Type, 'notation')
		    in  %% Line 357
			call 'erlang':'or'
			    (_cor33, _cor34) ->
	      let <_cor36> =
		  %% Line 359
		  case <> of
		    %% Line 360
		    <>
			when call 'erlang':'is_atom'
			      (Default) ->
			'true'
		    %% Line 361
		    <> when 'true' ->
			let <_cor35> =
			    call 'erlang':'list_to_atom'
				(Default)
			in  call 'lists':'member'
				(_cor35, L)
		  end
	      in  let <NoDuplicatesFun> =
		      %% Line 364
		      ( fun (_cor41,_cor40,_cor39) ->
			    case <_cor41,_cor40,_cor39> of
			      <_cor134,_cor135,'notation'> when 'true' ->
				  'true'
			      %% Line 365
			      <[],_cor136,_cor137> when 'true' ->
				  'true'
			      %% Line 366
			      <[H|T],F,Enum> when 'true' ->
				  %% Line 367
				  case call 'lists':'member'
					   (H, T) of
				    %% Line 368
				    <'true'> when 'true' ->
					'false'
				    %% Line 369
				    <_cor138> when 'true' ->
					apply F
					    (T, F, Enum)
				  end
			      ( <_cor44,_cor43,_cor42> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_cor44,_cor43,_cor42})
				      -| [{'function_name',{'-test_attribute_value/4-fun-4-',3}}] )
				-| ['compiler_generated'] )
			    end
			-| [{'id',{0,0,'-test_attribute_value/4-fun-4-'}}] )
		  in  let <NoDuplicates> =
			  %% Line 372
			  apply NoDuplicatesFun
			      (L, NoDuplicatesFun, Type)
		      in  let <_cor47> =
			      %% Line 373
			      call 'erlang':'list_to_atom'
				  (Value)
			  in  let <_cor48> =
				  %% Line 373
				  call 'lists':'member'
				      (_cor47, L)
			      in  %% Line 373
				  case <_cor48,_cor36,NoDuplicates> of
				    %% Line 374
				    <'true','true','true'> when 'true' ->
					%% Line 375
					Attr
				    %% Line 376
				    <'false',_cor139,_cor140> when 'true' ->
					%% Line 377
					call 'erlang':'exit'
					    ({'error',{'attribute_value_unknow',Value,{'list',L}}})
				    %% Line 378
				    <_cor141,'false',_cor142> when 'true' ->
					%% Line 379
					call 'erlang':'exit'
					    ({'error',{'attribute_default_value_unknow',Default,{'list',L}}})
				    %% Line 380
				    <_cor143,_cor144,'false'> when 'true' ->
					%% Line 381
					call 'erlang':'exit'
					    ({'error',{'duplicate_tokens_not_allowed',{'list',L}}})
				    ( <_fol59,_fol60,_fol61> when 'true' ->
					  let <_cor49> = {_fol59,_fol60,_fol61}
					  in  primop 'match_fail'
						  ({'case_clause',_cor49})
				      -| ['compiler_generated'] )
				  end
	  %% Line 383
	  <_X_Rule,Attr,_cor145,_cor146> when 'true' ->
	      %% Line 385
	      Attr
	end
'valid_contents'/5 =
    %% Line 402
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 403
	case apply 'parse'/5
		 (_cor4, _cor3, _cor2, _cor0, _cor1) of
	  %% Line 404
	  <{'error',Reason}> when 'true' ->
	      %% Line 405
	      {'error',Reason}
	  %% Line 406
	  <{'error',Reason,N}> when 'true' ->
	      %% Line 407
	      {'error',Reason,N}
	  %% Line 408
	  <{XML_N,Rest}> when 'true' ->
	      let <_cor7> =
		  %% Line 409
		  ( fun (_cor5) ->
			case _cor5 of
			  <X = {'xmlComment',_cor15,_cor16,_cor17,_cor18}> when ( 'true'
										  -| ['compiler_generated'] ) ->
			      'true'
			  <_cor19> when 'true' ->
			      'false'
			end
		    -| [{'id',{0,0,'-valid_contents/5-fun-0-'}}] )
	      in  %% Line 409
		  case call 'lists':'dropwhile'
			   (_cor7, Rest) of
		    %% Line 410
		    <[]> when 'true' ->
			%% Line 411
			call 'lists':'flatten'
			    (XML_N)
		    %% Line 412
		    <[{'xmlElement',Name,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29}|_X_T]> when 'true' ->
			%% Line 413
			call 'erlang':'exit'
			    ({'error',{'element',Name,'isnt_comprise_in_the_rule',_cor4}})
		    %% Line 414
		    <[Txt = {'xmlText',_cor30,_cor31,_cor32,_cor33,_cor34}|_X_T]> when 'true' ->
			%% Line 415
			call 'erlang':'exit'
			    ({'error',{'element','text',Txt,'isnt_comprise_in_the_rule',_cor4}})
		    ( <_cor8> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor8})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor9> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor9})
	    -| ['compiler_generated'] )
	end
'parse'/5 =
    %% Line 419
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <{'*',SubRule},XMLS,Rules,WSaction,S> when 'true' ->
	      %% Line 420
	      apply 'star'/6
		  (SubRule, XMLS, Rules, WSaction, [], S)
	  %% Line 421
	  <{'+',SubRule},XMLS,Rules,WSaction,S> when 'true' ->
	      %% Line 422
	      apply 'plus'/5
		  (SubRule, XMLS, Rules, WSaction, S)
	  %% Line 423
	  <{'choice',CHOICE},XMLS,Rules,WSaction,S> when 'true' ->
	      %% Line 432
	      apply 'choice'/5
		  (CHOICE, XMLS, Rules, WSaction, S)
	  %% Line 433
	  <'empty',[],_X_Rules,_X_WSaction,_X_S> when 'true' ->
	      %% Line 434
	      {[],[]}
	  %% Line 435
	  <{'?',SubRule},XMLS,Rules,_X_WSaction,S> when 'true' ->
	      %% Line 436
	      apply 'question'/4
		  (SubRule, XMLS, Rules, S)
	  %% Line 437
	  <{'seq',List},XMLS,Rules,WSaction,S> when 'true' ->
	      %% Line 438
	      apply 'seq'/5
		  (List, XMLS, Rules, WSaction, S)
	  %% Line 439
	  <El_Name,[XML = {'xmlElement',_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24}|T],Rules,_X_WSaction,S>
	      when let <_cor25> =
		    call 'erlang':'=:='
			(_cor14, El_Name)
		in  let <_cor26> =
			%% Line 440
			call 'erlang':'is_atom'
			    (El_Name)
		    in  call 'erlang':'and'
			    (_cor25, _cor26) ->
	      let <_cor5> =
		  %% Line 441
		  apply 'read_rules'/2
		      (Rules, El_Name)
	      in  %% Line 441
		  case apply 'do_validation'/4
			   (_cor5, XML, Rules, S) of
		    %% Line 442
		    <{'error',R}> when 'true' ->
			%% Line 444
			call 'erlang':'exit'
			    (R)
		    %% Line 445
		    <{'error',R,_X_N}> when 'true' ->
			%% Line 447
			call 'erlang':'exit'
			    (R)
		    %% Line 448
		    <XML_> when 'true' ->
			%% Line 449
			{[XML_|[]],T}
		  end
	  %% Line 451
	  <'any',Cont,Rules,_X_WSaction,S> when 'true' ->
	      let <_cor7> =
		  catch
		      %% Line 452
		      apply 'parse_any'/3
			  (Cont, Rules, S)
	      in  %% Line 452
		  case _cor7 of
		    %% Line 453
		    <Err = {'error',_cor27}> when 'true' ->
			Err
		    %% Line 454
		    <ValidContents> when 'true' ->
			{ValidContents,[]}
		  end
	  %% Line 456
	  <El_Name,XMLS = [{'xmlElement',Name,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37}|_X_T],_X_Rules,_X_WSa,_X_S>
	      when call 'erlang':'is_atom'
		    (El_Name) ->
	      %% Line 457
	      {'error',%% Line 458
		       {'element_seq_not_conform',{'wait',El_Name},{'is',Name}},%% Line 459
										{{'next',XMLS},{'act',[]}}}
	  %% Line 460
	  <El_Name,[{'xmlComment',_cor38,_cor39,_cor40,_cor41}|T],Rules,WSa,S> when 'true' ->
	      %% Line 461
	      apply 'parse'/5
		  (El_Name, T, Rules, WSa, S)
	  %% Line 462
	  <_X_El_Name,[H = {'xmlPI',_cor42,_cor43,_cor44,_cor45}|T],_X_Rules,_X_WSa,_X_S> when 'true' ->
	      %% Line 463
	      {[H|[]],T}
	  %% Line 464
	  <'#PCDATA',XMLS,_X_Rules,_X_WSa,_X_S> when 'true' ->
	      %% Line 466
	      apply 'parse_pcdata'/1
		  (XMLS)
	  %% Line 467
	  <El_Name,XMLS = [{'xmlText',_cor46,_cor47,_cor48,_cor49,_cor50}|_X_T],_X_Rules,_X_WSa,_X_S> when 'true' ->
	      %% Line 468
	      {'error',%% Line 469
		       {'text_in_place_of',El_Name},%% Line 470
						    {{'next',XMLS},{'act',[]}}}
	  %% Line 471
	  <[],_cor51,_cor52,_cor53,_cor54> when 'true' ->
	      %% Line 472
	      {'error','no_rule'}
	  %% Line 473
	  <Rule,[],_cor55,_cor56,_cor57> when 'true' ->
	      %% Line 474
	      {'error',{'no_xml_element',Rule}}
	  ( <_cor13,_cor12,_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11,_cor10,_cor9})
		  -| [{'function_name',{'parse',5}}] )
	    -| ['compiler_generated'] )
	end
'parse_any'/3 =
    %% Line 476
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],_X_Rules,_X_S> when 'true' ->
	      %% Line 477
	      []
	  %% Line 478
	  <[H|T],Rules,S> when 'true' ->
	      %% Line 479
	      case apply 'parse_any'/3
		       (H, Rules, S) of
		%% Line 480
		<[Cont|[]]> when 'true' ->
		    let <_cor3> =
			%% Line 481
			apply 'parse_any'/3
			    (T, Rules, S)
		    in  %% Line 481
			[Cont|_cor3]
		%% Line 482
		<Err> when 'true' ->
		    call 'erlang':'throw'
			(Err)
	      end
	  %% Line 484
	  <XML = {'xmlElement',_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21},Rules,S> when 'true' ->
	      let <_cor5> =
		  %% Line 485
		  apply 'el_name'/1
		      (XML)
	      in  let <_cor6> =
		      %% Line 485
		      apply 'read_rules'/2
			  (Rules, _cor5)
		  in  %% Line 485
		      case apply 'do_validation'/4
			       (_cor6, XML, Rules, S) of
			%% Line 486
			<{'error',R}> when 'true' ->
			    %% Line 487
			    {'error',R}
			%% Line 488
			<{'error',R,N}> when 'true' ->
			    %% Line 489
			    {'error',R,N}
			%% Line 490
			<XML_> when 'true' ->
			    %% Line 491
			    [XML_|[]]
		      end
	  %% Line 493
	  <El,_X_Rules,_X_S> when 'true' ->
	      %% Line 494
	      [El|[]]
	end
'choice'/5 =
    %% Line 501
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[CH|CHS],XMLS = [_X_XML|_X_T],Rules,WSaction,S> when 'true' ->
	      let <_cor5> =
		  %% Line 502
		  apply 'ws_action'/2
		      (WSaction, 'remove')
	      in  %% Line 502
		  case apply 'whitespace_action'/2
			   (XMLS, _cor5) of
		    <{WS,XMLS1}> when 'true' ->
			let <_cor7> =
			    %% Line 503
			    apply 'ws_action'/2
				(WSaction, 'remove')
			in  %% Line 503
			    case apply 'parse'/5
				     (CH, XMLS1, Rules, _cor7, S) of
			      %% Line 504
			      <{'error',_X_R}> when 'true' ->
				  %% Line 505
				  apply 'choice'/5
				      (CHS, XMLS, Rules, WSaction, S)
			      %% Line 506
			      <{'error',_X_R,_X_N}> when 'true' ->
				  %% Line 507
				  apply 'choice'/5
				      (CHS, XMLS, Rules, WSaction, S)
			      %% Line 508
			      <{[],_cor21}>
				  when call 'erlang':'=:='
					(_cor21,
					 XMLS1) ->
				  %% Line 510
				  case CHS of
				    %% Line 511
				    <[]> when 'true' ->
					%% Line 512
					{[],XMLS1}
				    %% Line 513
				    <_cor22> when 'true' ->
					%% Line 514
					apply 'choice'/5
					    (CHS, XMLS1, Rules, WSaction, S)
				  end
			      %% Line 517
			      <{Tree,XMLS2}> when 'true' ->
				  let <_cor9> =
				      %% Line 518
				      apply 'ws_action'/2
					  (WSaction, 'remove')
				  in  %% Line 518
				      case apply 'whitespace_action'/2
					       (XMLS2, _cor9) of
					<{WS2,XMLS3}> when 'true' ->
					    let <_cor11> =
						%% Line 519
						[Tree|WS]
					    in  let <_cor12> =
						    %% Line 519
						    call 'erlang':'++'
							(WS2, _cor11)
						in  %% Line 519
						    {_cor12,XMLS3}
					( <_cor10> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_cor10})
					  -| ['compiler_generated'] )
				      end
			      ( <_cor13> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor13})
				-| ['compiler_generated'] )
			    end
		    ( <_cor6> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor6})
		      -| ['compiler_generated'] )
		  end
	  %% Line 521
	  <[],XMLS,_cor23,WSaction,_X_S> when 'true' ->
	      let <_cor14> =
		  %% Line 522
		  apply 'ws_action'/2
		      (WSaction, 'remove')
	      in  %% Line 522
		  case apply 'whitespace_action'/2
			   (XMLS, _cor14) of
		    %% Line 523
		    <Res = {_cor24,[]}> when 'true' ->
			Res
		    %% Line 524
		    <_cor25> when 'true' ->
			%% Line 525
			{'error','element_unauthorize_in_choice',{{'next',XMLS},{'act',[]}}}
		  end
	  %% Line 527
	  <_cor26,[],_cor27,_cor28,_X_S> when 'true' ->
	      %% Line 528
	      {[],[]}
	  ( <_cor20,_cor19,_cor18,_cor17,_cor16> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor20,_cor19,_cor18,_cor17,_cor16})
		  -| [{'function_name',{'choice',5}}] )
	    -| ['compiler_generated'] )
	end
'plus'/5 =
    %% Line 530
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 532
	case apply 'whitespace_action'/2
		 (_cor3, _cor1) of
	  <{WS,XMLS1}> when 'true' ->
	      %% Line 533
	      case apply 'parse'/5
		       (_cor4, XMLS1, _cor2, _cor1, _cor0) of
		%% Line 534
		<{'error',Reason,_X_XML}> when 'true' ->
		    %% Line 535
		    {'error',Reason}
		%% Line 536
		<{'error',X}> when 'true' ->
		    %% Line 537
		    {'error',X}
		%% Line 538
		<{Tree,XMLS2}> when 'true' ->
		    %% Line 539
		    case apply 'star'/6
			     (_cor4, XMLS2, _cor2, _cor1, [], _cor0) of
		      %% Line 540
		      <{[],_cor16}> when 'true' ->
			  let <_cor6> =
			      %% Line 541
			      call 'erlang':'++'
				  (WS, [Tree|[]])
			  in  %% Line 541
			      {_cor6,XMLS2}
		      %% Line 542
		      <{Tree_1,XMLS3}> when 'true' ->
			  let <_cor7> =
			      %% Line 543
			      [Tree|Tree_1]
			  in  let <_cor8> =
				  %% Line 543
				  call 'erlang':'++'
				      (WS, _cor7)
			      in  %% Line 543
				  {_cor8,XMLS3}
		      ( <_cor9> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor9})
			-| ['compiler_generated'] )
		    end
		( <_cor10> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor10})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor5> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor5})
	    -| ['compiler_generated'] )
	end
'star'/6 =
    %% Line 547
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <_X_Rule,XML,_X_Rules,_X_WSa,Tree,_X_S>
	      when try
		    let <_cor6> =
			call 'erlang':'length'
			    (XML)
		    in  call 'erlang':'=='
			    (_cor6, 0)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 548
	      {[Tree|[]],[]}
	  %% Line 549
	  <Rule,XMLS,Rules,WSaction,Tree,S> when 'true' ->
	      %% Line 550
	      case apply 'whitespace_action'/2
		       (XMLS, WSaction) of
		<{WS,XMLS1}> when 'true' ->
		    %% Line 551
		    case apply 'parse'/5
			     (Rule, XMLS1, Rules, WSaction, S) of
		      %% Line 552
		      <{'error',_X_E,{{'next',N},{'act',A}}}> when 'true' ->
			  let <_cor8> =
			      %% Line 554
			      call 'erlang':'++'
				  (Tree, A)
			  in  let <_cor9> =
				  %% Line 554
				  call 'erlang':'++'
				      (WS, _cor8)
			      in  %% Line 554
				  {_cor9,N}
		      %% Line 555
		      <{'error',_X_E}> when 'true' ->
			  let <_cor10> =
			      %% Line 558
			      apply 'ws_action'/2
				  (WSaction, 'remove')
			  in  %% Line 558
			      case apply 'whitespace_action'/2
				       (XMLS, _cor10) of
				%% Line 559
				<{[],_cor23}> when 'true' ->
				    let <_cor11> =
					%% Line 560
					call 'erlang':'++'
					    (WS, [Tree|[]])
				    in  %% Line 560
					{_cor11,XMLS}
				%% Line 561
				<{WS2,XMLS2}> when 'true' ->
				    let <_cor12> =
					%% Line 562
					call 'erlang':'++'
					    (WS2, [Tree|[]])
				    in  %% Line 562
					{_cor12,XMLS2}
				( <_cor13> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor13})
				  -| ['compiler_generated'] )
			      end
		      %% Line 564
		      <{Tree1,XMLS2}> when 'true' ->
			  let <_cor14> =
			      %% Line 565
			      call 'erlang':'++'
				  (WS, [Tree1|[]])
			  in  let <_cor15> =
				  %% Line 565
				  call 'erlang':'++'
				      (Tree, _cor14)
			      in  %% Line 565
				  apply 'star'/6
				      (Rule, XMLS2, Rules, WSaction, _cor15, S)
		      ( <_cor16> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor16})
			-| ['compiler_generated'] )
		    end
		( <_cor7> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor7})
		  -| ['compiler_generated'] )
	      end
	end
'question'/4 =
    %% Line 568
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <_X_Rule,[],_X_Rules,_X_S> when 'true' ->
	      %% Line 569
	      {[],[]}
	  %% Line 570
	  <Rule,Toks,Rules,S> when 'true' ->
	      %% Line 572
	      case apply 'parse'/5
		       (Rule, Toks, Rules, 'preserve', S) of
		%% Line 573
		<{'error',_X_E,_X_Next}> when 'true' ->
		    %% Line 574
		    {[],Toks}
		%% Line 575
		<{'error',_X_E}> when 'true' ->
		    %% Line 576
		    {[],Toks}
		%% Line 577
		<{T,Toks1}> when 'true' ->
		    %% Line 578
		    {T,Toks1}
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor4})
		  -| ['compiler_generated'] )
	      end
	end
'seq'/5 =
    %% Line 581
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 582
	case apply 'seq2'/6
		 (_cor4, _cor3, _cor2, [], _cor1, _cor0) of
	  %% Line 583
	  <{'error',E}> when 'true' ->
	      %% Line 584
	      {'error',E}
	  %% Line 585
	  <{'error',R,N}> when 'true' ->
	      %% Line 586
	      {'error',R,N}
	  %% Line 587
	  <{Tree,Toks2}> when 'true' ->
	      %% Line 588
	      {Tree,Toks2}
	  ( <_cor5> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor5})
	    -| ['compiler_generated'] )
	end
'seq2'/6 =
    %% Line 591
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[],[],_cor23,Tree,_X_WSa,_X_S> when 'true' ->
	      %% Line 592
	      {Tree,[]}
	  %% Line 596
	  <[],XML = [{'xmlText',_cor24,_cor25,_cor26,_cor27,_cor28}|[]],_cor29,Tree,_X_WSa,_X_S> when 'true' ->
	      %% Line 597
	      case apply 'whitespace_action'/2
		       (XML, 'remove') of
		%% Line 598
		<{[],_cor30}> when 'true' ->
		    %% Line 599
		    {'error','sequence_finish',{{'next',XML},{'act',Tree}}}
		%% Line 600
		<{WS,Rest}> when 'true' ->
		    let <_cor6> =
			%% Line 601
			call 'erlang':'++'
			    (WS, Tree)
		    in  %% Line 601
			{_cor6,Rest}
		( <_cor7> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor7})
		  -| ['compiler_generated'] )
	      end
	  %% Line 603
	  <[],Rest,_cor31,Tree,_X_WSa,_X_S> when 'true' ->
	      %% Line 604
	      case apply 'whitespace_action'/2
		       (Rest, 'remove') of
		<{WS,Rest2}> when 'true' ->
		    let <_cor9> =
			%% Line 605
			call 'erlang':'++'
			    (WS, Tree)
		    in  %% Line 605
			{_cor9,Rest2}
		( <_cor8> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor8})
		  -| ['compiler_generated'] )
	      end
	  %% Line 606
	  <[H|T],Toks,Rules,Tree,WSaction,S> when 'true' ->
	      let <_cor10> =
		  %% Line 607
		  apply 'ws_action'/2
		      (WSaction, 'remove')
	      in  %% Line 607
		  case apply 'whitespace_action'/2
			   (Toks, _cor10) of
		    <{WS,Toks1}> when 'true' ->
			%% Line 608
			case apply 'parse'/5
				 (H, Toks1, Rules, 'remove', S) of
			  %% Line 609
			  <{'error',Reason,_X_XML}> when 'true' ->
			      %% Line 610
			      {'error',Reason}
			  %% Line 611
			  <{'error',E}> when 'true' ->
			      %% Line 612
			      {'error',E}
			  %% Line 613
			  <{[],Toks2}> when 'true' ->
			      %% Line 614
			      apply 'seq2'/6
				  (T, Toks2, Rules, Tree, WSaction, S)
			  %% Line 615
			  <{Tree1,Toks2}>
			      when call 'erlang':'is_list'
				    (Tree1) ->
			      let <_cor12> =
				  %% Line 616
				  call 'erlang':'++'
				      (WS, Tree1)
			      in  let <_cor13> =
				      %% Line 616
				      call 'erlang':'++'
					  (Tree, _cor12)
				  in  %% Line 616
				      apply 'seq2'/6
					  (T, Toks2, Rules, _cor13, WSaction, S)
			  %% Line 617
			  <{Tree1,Toks2}> when 'true' ->
			      let <_cor14> =
				  %% Line 618
				  call 'erlang':'++'
				      (WS, [Tree1|[]])
			      in  let <_cor15> =
				      %% Line 618
				      call 'erlang':'++'
					  (Tree, _cor14)
				  in  %% Line 618
				      apply 'seq2'/6
					  (T, Toks2, Rules, _cor15, WSaction, S)
			  ( <_cor16> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor16})
			    -| ['compiler_generated'] )
			end
		    ( <_cor11> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor11})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor22,_cor21,_cor20,_cor19,_cor18,_cor17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor22,_cor21,_cor20,_cor19,_cor18,_cor17})
		  -| [{'function_name',{'seq2',6}}] )
	    -| ['compiler_generated'] )
	end
'el_name'/1 =
    %% Line 621
    fun (_cor0) ->
	case _cor0 of
	  <{'xmlElement',Name,_cor2,_cor3,_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11}> when 'true' ->
	      %% Line 622
	      Name
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'el_name',1}}] )
	    -| ['compiler_generated'] )
	end
'parse_pcdata'/1 =
    %% Line 624
    fun (_cor0) ->
	case _cor0 of
	  <[H = {'xmlText',_cor2,_cor3,_cor4,_cor5,_cor6}|T]> when 'true' ->
	      %% Line 625
	      apply 'parse_pcdata'/2
		  (T, [H|[]])
	  %% Line 626
	  <[{'xmlComment',_cor7,_cor8,_cor9,_cor10}|T]> when 'true' ->
	      %% Line 627
	      apply 'parse_pcdata'/2
		  (T, [])
	  %% Line 628
	  <H> when 'true' ->
	      %% Line 629
	      {[],H}
	end
'parse_pcdata'/2 =
    %% Line 631
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[H = {'xmlText',_cor5,_cor6,_cor7,_cor8,_cor9}|T],Acc> when 'true' ->
	      let <_cor2> =
		  %% Line 632
		  call 'erlang':'++'
		      (Acc, [H|[]])
	      in  %% Line 632
		  apply 'parse_pcdata'/2
		      (T, _cor2)
	  %% Line 633
	  <[{'xmlComment',_cor10,_cor11,_cor12,_cor13}|T],Acc> when 'true' ->
	      %% Line 634
	      apply 'parse_pcdata'/2
		  (T, Acc)
	  %% Line 635
	  <H,Acc> when 'true' ->
	      %% Line 636
	      {Acc,H}
	end
'whitespace'/1 =
    %% Line 638
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      %% Line 639
	      'true'
	  %% Line 640
	  <[H|T]>
	      when let <_cor1> =
		    call 'erlang':'=='
			(H, 32)
		in  let <_cor2> =
			call 'erlang':'=='
			    (H, 13)
		    in  let <_cor3> =
			    call 'erlang':'=='
				(H, 10)
			in  let <_cor4> =
				call 'erlang':'=='
				    (H, 9)
			    in  let <_cor5> =
				    call 'erlang':'or'
					(_cor3, _cor4)
				in  let <_cor6> =
					call 'erlang':'or'
					    (_cor2, _cor5)
				    in  call 'erlang':'or'
					    (_cor1, _cor6) ->
	      %% Line 641
	      apply 'whitespace'/1
		  (T)
	  %% Line 642
	  <_cor8> when 'true' ->
	      %% Line 643
	      'false'
	end
'whitespace_action'/2 =
    %% Line 645
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <XML,'remove'> when 'true' ->
	      %% Line 646
	      apply 'whitespace_remove'/2
		  (XML, [])
	  %% Line 647
	  <XML,_cor4> when 'true' ->
	      %% Line 648
	      {[],XML}
	end
'whitespace_remove'/2 =
    %% Line 650
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <L = [T = {'xmlText',_cor7,_cor8,_cor9,V,'text'}|R],Acc> when 'true' ->
	      %% Line 651
	      case apply 'whitespace'/1
		       (V) of
		%% Line 652
		<'true'> when 'true' ->
		    %% Line 653
		    apply 'whitespace_remove'/2
			(R, [T|Acc])
		%% Line 654
		<_cor10> when 'true' ->
		    let <_cor2> =
			%% Line 655
			call 'lists':'reverse'
			    (Acc)
		    in  %% Line 655
			{_cor2,L}
	      end
	  %% Line 657
	  <L,Acc> when 'true' ->
	      let <_cor4> =
		  %% Line 658
		  call 'lists':'reverse'
		      (Acc)
	      in  %% Line 658
		  {_cor4,L}
	end
'ws_action'/2 =
    %% Line 660
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <A = 'always_preserve',_cor4> when 'true' ->
	      %% Line 661
	      A
	  %% Line 662
	  <_cor5,B> when 'true' ->
	      %% Line 663
	      B
	end
'scan_name'/2 =
    %% Line 665
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <N,_cor8>
	      when call 'erlang':'is_atom'
		    (N) ->
	      %% Line 666
	      N
	  %% Line 667
	  <[32|T],Acc> when 'true' ->
	      let <_cor2> =
		  %% Line 668
		  call 'lists':'reverse'
		      (Acc)
	      in  let <_cor3> =
		      %% Line 668
		      call 'erlang':'list_to_atom'
			  (_cor2)
		  in  %% Line 668
		      {_cor3,T}
	  %% Line 669
	  <[H|T],Acc> when 'true' ->
	      %% Line 670
	      apply 'scan_name'/2
		  (T, [H|Acc])
	  %% Line 671
	  <[],Acc> when 'true' ->
	      let <_cor4> =
		  %% Line 672
		  call 'lists':'reverse'
		      (Acc)
	      in  let <_cor5> =
		      %% Line 672
		      call 'erlang':'list_to_atom'
			  (_cor4)
		  in  %% Line 672
		      {_cor5,[]}
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6})
		  -| [{'function_name',{'scan_name',2}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('xmerl_validate')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('xmerl_validate', _cor0)
end