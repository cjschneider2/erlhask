module 'xmerl_simple' ['file'/2,
		       'module_info'/0,
		       'module_info'/1,
		       'string'/2]
    attributes []
'file'/2 =
    %% Line 36
    fun (_cor1,_cor0) ->
	let <Opts1> =
	    %% Line 37
	    apply 'scanner_options'/1
		(_cor0)
	in  %% Line 38
	    call 'xmerl_scan':'file'
		(_cor1, Opts1)
'string'/2 =
    %% Line 40
    fun (_cor1,_cor0) ->
	let <Opts1> =
	    %% Line 41
	    apply 'scanner_options'/1
		(_cor0)
	in  %% Line 42
	    call 'xmerl_scan':'string'
		(_cor1, Opts1)
'scanner_options'/1 =
    %% Line 44
    fun (_cor0) ->
	let <_cor8> =
	    %% Line 48
	    ( fun (_cor4,_cor3,_cor2) ->
		  {_cor3,_cor2}
	      -| [{'id',{0,0,'-scanner_options/1-fun-1-'}}] )
	in  %% Line 46
	    apply 'scanner_options'/2
		(_cor0, %% Line 47
			[{'event_fun',( 'event'/2
					-| [{'id',{0,0,'-scanner_options/1-fun-0-'}}] ),{'state',[],[],[],[]}}|%% Line 48
													       [{'acc_fun',_cor8}|%% Line 49
																  [{'close_fun',( 'close'/1
																		  -| [{'id',{0,0,'-scanner_options/1-fun-2-'}}] )}|[]]]])
'scanner_options'/2 =
    %% Line 51
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[H|T],Opts> when 'true' ->
	      let <_cor2> =
		  catch
		      %% Line 52
		      apply 'keyreplace'/3
			  (H, 1, Opts)
	      in  %% Line 52
		  case _cor2 of
		    %% Line 53
		    <'false'> when 'true' ->
			%% Line 54
			apply 'scanner_options'/2
			    (T, [H|Opts])
		    %% Line 55
		    <NewOpts> when 'true' ->
			%% Line 56
			apply 'scanner_options'/2
			    (T, NewOpts)
		  end
	  %% Line 58
	  <[],Opts> when 'true' ->
	      %% Line 59
	      Opts
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'scanner_options',2}}] )
	    -| ['compiler_generated'] )
	end
'keyreplace'/3 =
    %% Line 61
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <X,Pos,[H|T]>
	      when try
		    let <_cor4> =
			call 'erlang':'element'
			    (Pos, X)
		    in  let <_cor3> =
			    call 'erlang':'element'
				(Pos, H)
			in  call 'erlang':'=='
				(_cor4, _cor3)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 62
	      [X|T]
	  %% Line 63
	  <X,Pos,[H|T]> when 'true' ->
	      let <_cor5> =
		  %% Line 64
		  apply 'keyreplace'/3
		      (X, Pos, T)
	      in  %% Line 64
		  [H|_cor5]
	  %% Line 65
	  <_X_X,_X_Pos,[]> when 'true' ->
	      %% Line 66
	      call 'erlang':'throw'
		  ('false')
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'keyreplace',3}}] )
	    -| ['compiler_generated'] )
	end
'close'/1 =
    %% Line 69
    fun (_cor0) ->
	%% Line 74
	case call 'xmerl_scan':'event_state'
		 (_cor0) of
	  <{'state',Content,_cor4,[],[]}> when 'true' ->
	      %% Line 75
	      call 'lists':'reverse'
		  (Content)
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'event'/2 =
    %% Line 77
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'xmerl_event','started',_cor29,_cor30,_cor31,{'xmlElement',_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42}},S> when 'true' ->
	      %% Line 81
	      case call 'xmerl_scan':'event_state'
		       (S) of
		<ES = {'state',CAcc,AAcc,CSt,ASt}> when 'true' ->
		    let <_rec0> =
			%% Line 84
			[CAcc|CSt]
		    in  let <_rec1> =
			    %% Line 85
			    [AAcc|ASt]
			in  let <_cor7> =
				%% Line 85
				{'state',[],[],_rec0,_rec1}
			    in  %% Line 82
				call 'xmerl_scan':'event_state'
				    (_cor7, %% Line 85
					    S)
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 87
	  <{'xmerl_event','ended',_cor44,_cor45,_cor46,{'xmlElement',Name,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56}},S> when 'true' ->
	      %% Line 91
	      case call 'xmerl_scan':'event_state'
		       (S) of
		<ES = {'state',CAcc,AAcc,[PrevCAcc|CSt],[PrevAAcc|ASt]}> when 'true' ->
		    let <_cor10> =
			%% Line 92
			call 'lists':'reverse'
			    (AAcc)
		    in  let <_cor9> =
			    %% Line 92
			    call 'lists':'reverse'
				(CAcc)
			in  let <Simple> = {%% Line 92
				 Name,_cor10,_cor9}
			    in  let <_rec7> =
				    %% Line 93
				    [Simple|PrevCAcc]
				in  let <_cor15> =
					%% Line 96
					{'state',_rec7,PrevAAcc,CSt,ASt}
				    in  %% Line 93
					call 'xmerl_scan':'event_state'
					    (_cor15, %% Line 96
						     S)
		( <_cor8> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor8})
		  -| ['compiler_generated'] )
	      end
	  %% Line 98
	  <{'xmerl_event','ended',_cor58,_cor59,_cor60,{'xmlAttribute',Name,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,%% Line 99
														      Value,_cor67}},%% Line 99
																     S> when 'true' ->
	      %% Line 100
	      case call 'xmerl_scan':'event_state'
		       (S) of
		<ES = {'state',_cor68,AAcc,_cor69,_cor70}> when 'true' ->
		    let <Simple> = {%% Line 101
			 Name,%% Line 101
			      Value}
		    in  let <_rec13> =
			    %% Line 102
			    [Simple|AAcc]
			in  let <_cor21> =
				%% Line 102
				call 'erlang':'setelement'
				    (3, ES, _rec13)
			    in  %% Line 102
				call 'xmerl_scan':'event_state'
				    (_cor21, S)
		( <_cor16> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor16})
		  -| ['compiler_generated'] )
	      end
	  %% Line 104
	  <{'xmerl_event','ended',_cor76,_cor77,_cor78,{'xmlText',_cor79,_cor80,_cor81,Text,_cor82}},S> when 'true' ->
	      %% Line 105
	      case call 'xmerl_scan':'event_state'
		       (S) of
		<ES = {'state',CAcc,_cor83,_cor84,_cor85}> when 'true' ->
		    let <_rec15> =
			%% Line 106
			[Text|CAcc]
		    in  let <_cor26> =
			    %% Line 106
			    call 'erlang':'setelement'
				(2, ES, _rec15)
			in  %% Line 106
			    call 'xmerl_scan':'event_state'
				(_cor26, S)
		( <_cor22> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor22})
		  -| ['compiler_generated'] )
	      end
	  %% Line 108
	  <_X_E,S> when 'true' ->
	      %% Line 109
	      S
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('xmerl_simple')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('xmerl_simple', _cor0)
end