module 'xmerl_b64Bin' ['format_error'/1,
		       'module_info'/0,
		       'module_info'/1,
		       'parse'/1,
		       'parse_and_scan'/1]
    attributes [%% Line 23
		'type' =
		    %% Line 23
		    [{'yecc_ret',{'type',23,'union',[{'type',23,'tuple',[{'atom',23,'error'}|[{'var',23,'_'}]]}|[{'type',23,'tuple',[{'atom',23,'ok'}|[{'var',23,'_'}]]}]]},[]}],
		%% Line 25
		'spec' =
		    %% Line 25
		    [{{'parse',1},[{'type',25,'fun',[{'type',25,'product',[{'ann_type',25,[{'var',25,'Tokens'}|[{'type',25,'list',[]}]]}]}|[{'type',25,'yecc_ret',[]}]]}]}],
		%% Line 29
		'spec' =
		    %% Line 29
		    [{{'parse_and_scan',1},[{'type',29,'fun',[{'type',29,'product',[{'type',29,'union',[{'type',29,'tuple',[{'type',29,'union',[{'type',29,'function',[]}|[{'type',29,'tuple',[{'type',29,'atom',[]}|[{'type',29,'atom',[]}]]}]]}|[{'type',29,'list',[{'var',29,'_'}]}]]}|[{'type',30,'tuple',[{'type',30,'atom',[]}|[{'type',30,'atom',[]}|[{'type',30,'list',[{'var',30,'_'}]}]]]}]]}]}|[{'type',30,'yecc_ret',[]}]]}]}],
		%% Line 37
		'spec' =
		    %% Line 37
		    [{{'format_error',1},[{'type',37,'fun',[{'type',37,'product',[{'type',37,'any',[]}]}|[{'type',37,'list',[{'type',37,'union',[{'type',37,'char',[]}|[{'type',37,'list',[]}]]}]}]]}]}],
		%% Line 49
		'spec' =
		    %% Line 49
		    [{{'return_error',2},[{'type',49,'fun',[{'type',49,'product',[{'type',49,'integer',[]}|[{'type',49,'any',[]}]]}|[{'type',49,'no_return',[]}]]}]}]]
'parse'/1 =
    %% Line 26
    fun (_cor0) ->
	%% Line 27
	apply 'yeccpars0'/5
	    (_cor0, {'no_func','no_line'}, 0, [], [])
'parse_and_scan'/1 =
    %% Line 31
    fun (_cor0) ->
	case _cor0 of
	  <{F,A}> when 'true' ->
	      %% Line 32
	      apply 'yeccpars0'/5
		  ([], {{F,A},'no_line'}, 0, [], [])
	  %% Line 33
	  <{M,F,A}> when 'true' ->
	      let <Arity> =
		  %% Line 34
		  call 'erlang':'length'
		      (A)
	      in  let <_cor2> =
		      %% Line 35
		      call 'erlang':'make_fun'
			  (M, F, Arity)
		  in  %% Line 35
		      apply 'yeccpars0'/5
			  ([], {{_cor2,A},'no_line'}, 0, [], [])
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'parse_and_scan',1}}] )
	    -| ['compiler_generated'] )
	end
'format_error'/1 =
    %% Line 38
    fun (_cor0) ->
	%% Line 39
	case call 'io_lib':'deep_char_list'
		 (_cor0) of
	  %% Line 40
	  <'true'> when 'true' ->
	      _cor0
	  %% Line 42
	  <_cor3> when 'true' ->
	      %% Line 43
	      call 'io_lib':'write'
		  (_cor0)
	end
'return_error'/2 =
    %% Line 50
    fun (_cor1,_cor0) ->
	%% Line 51
	call 'erlang':'throw'
	    ({'error',{_cor1,'xmerl_b64Bin',_cor0}})
'yeccpars0'/5 =
    %% Line 55
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 56
	try
	    apply 'yeccpars1'/5
		(_cor4, _cor3, _cor2, _cor1, _cor0)
	of <_cor5> ->
	    _cor5
	catch <_cor8,_cor7,_cor6> ->
	    case <_cor8,_cor7,_cor6> of
	      %% Line 58
	      <'error',Error,_cor20> when 'true' ->
		  let <Stacktrace> =
		      %% Line 59
		      call 'erlang':'get_stacktrace'
			  ()
		  in  %% Line 60
		      try
			  apply 'yecc_error_type'/2
			      (Error, Stacktrace)
		      of <_cor10> ->
			  %% Line 62
			  call 'erlang':'raise'
			      ('error', {'yecc_bug',[49|[46|[52]]],_cor10}, %% Line 63
									    Stacktrace)
		      catch <_cor14,_cor13,_cor12> ->
			  %% Line 64
			  call 'erlang':'raise'
			      ('error', Error, Stacktrace)
	      %% Line 67
	      <'throw',Error = {'error',{_X_Line,'xmerl_b64Bin',_X_M}},_cor24> when 'true' ->
		  %% Line 68
		  Error
	      ( <_cor8,_cor7,_cor6> when 'true' ->
		    primop 'raise'
			(_cor6, _cor7)
		-| ['compiler_generated'] )
	    end
'yecc_error_type'/2 =
    %% Line 71
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'function_clause',[{'xmerl_b64Bin',F,ArityOrArgs,_cor9}|_cor10]> when 'true' ->
	      %% Line 72
	      case call 'erlang':'atom_to_list'
		       (F) of
		%% Line 73
		<[121|[101|[99|[99|[103|[111|[116|[111|[95|SymbolL]]]]]]]]]> when 'true' ->
		    %% Line 74
		    case call 'erl_scan':'string'
			     (SymbolL) of
		      <{'ok',[{'atom',_cor11,Symbol}|[]],_cor12}> when 'true' ->
			  let <_cor4> =
			      %% Line 75
			      case ArityOrArgs of
				%% Line 76
				<[S|[_cor13|[_cor14|[_cor15|[_cor16|[_cor17|[_cor18|[]]]]]]]]> when 'true' ->
				    S
				%% Line 77
				<_cor19> when 'true' ->
				    'state_is_unknown'
			      end
			  in  %% Line 79
			      {Symbol,_cor4,'missing_in_goto_table'}
		      ( <_cor2> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor2})
			-| ['compiler_generated'] )
		    end
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor6})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'yecc_error_type',2}}] )
	    -| ['compiler_generated'] )
	end
'yeccpars1'/5 =
    %% Line 82
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[Token|Tokens],Tzr,State,States,Vstack> when 'true' ->
	      let <_cor5> =
		  %% Line 83
		  call 'erlang':'element'
		      (1, Token)
	      in  %% Line 83
		  apply 'yeccpars2'/7
		      (State, _cor5, States, Vstack, Token, Tokens, Tzr)
	  %% Line 84
	  <[],{{F,A},_X_Line},State,States,Vstack> when 'true' ->
	      %% Line 85
	      case call 'erlang':'apply'
		       (F, A) of
		%% Line 86
		<{'ok',Tokens,Endline}> when 'true' ->
		    %% Line 87
		    apply 'yeccpars1'/5
			(Tokens, {{F,A},Endline}, State, States, Vstack)
		%% Line 88
		<{'eof',Endline}> when 'true' ->
		    %% Line 89
		    apply 'yeccpars1'/5
			([], {'no_func',Endline}, State, States, Vstack)
		%% Line 90
		<{'error',Descriptor,_X_Endline}> when 'true' ->
		    %% Line 91
		    {'error',Descriptor}
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor6})
		  -| ['compiler_generated'] )
	      end
	  %% Line 93
	  <[],{'no_func','no_line'},State,States,Vstack> when 'true' ->
	      let <_cor8> =
		  %% Line 95
		  apply 'yecc_end'/1
		      (999999)
	      in  %% Line 95
		  apply 'yeccpars2'/7
		      (State, '$end', States, Vstack, _cor8, [], %% Line 96
								 {'no_func',999999})
	  %% Line 97
	  <[],{'no_func',Endline},State,States,Vstack> when 'true' ->
	      let <_cor9> =
		  %% Line 98
		  apply 'yecc_end'/1
		      (Endline)
	      in  %% Line 98
		  apply 'yeccpars2'/7
		      (State, '$end', States, Vstack, _cor9, [], %% Line 99
								 {'no_func',Endline})
	  ( <_cor14,_cor13,_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12,_cor11,_cor10})
		  -| [{'function_name',{'yeccpars1',5}}] )
	    -| ['compiler_generated'] )
	end
'yeccpars1'/7 =
    %% Line 107
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <State1,State,States,Vstack,Token0,[Token|Tokens],Tzr> when 'true' ->
	      let <_cor7> =
		  %% Line 108
		  call 'erlang':'element'
		      (1, Token)
	      in  %% Line 108
		  apply 'yeccpars2'/7
		      (State, _cor7, [State1|States], %% Line 109
						      [Token0|Vstack], %% Line 109
								       Token, %% Line 109
									      Tokens, %% Line 109
										      Tzr)
	  %% Line 110
	  <State1,State,States,Vstack,Token0,[],Tzr = {{_X_F,_X_A},_X_Line}> when 'true' ->
	      %% Line 111
	      apply 'yeccpars1'/5
		  ([], Tzr, State, [State1|States], [Token0|Vstack])
	  %% Line 112
	  <State1,State,States,Vstack,Token0,[],{'no_func','no_line'}> when 'true' ->
	      let <Line> =
		  %% Line 113
		  apply 'yecctoken_end_location'/1
		      (Token0)
	      in  let <_cor9> =
		      %% Line 115
		      apply 'yecc_end'/1
			  (Line)
		  in  %% Line 114
		      apply 'yeccpars2'/7
			  (State, '$end', [State1|States], [Token0|Vstack], _cor9, %% Line 115
										   [], %% Line 115
										       {'no_func',Line})
	  %% Line 116
	  <State1,State,States,Vstack,Token0,[],{'no_func',Line}> when 'true' ->
	      let <_cor10> =
		  %% Line 118
		  apply 'yecc_end'/1
		      (Line)
	      in  %% Line 117
		  apply 'yeccpars2'/7
		      (State, '$end', [State1|States], [Token0|Vstack], _cor10, %% Line 118
										[], %% Line 118
										    {'no_func',Line})
	  ( <_cor17,_cor16,_cor15,_cor14,_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor17,_cor16,_cor15,_cor14,_cor13,_cor12,_cor11})
		  -| [{'function_name',{'yeccpars1',7}}] )
	    -| ['compiler_generated'] )
	end
'yecc_end'/1 =
    %% Line 121
    fun (_cor0) ->
	case _cor0 of
	  <{Line,_X_Column}> when 'true' ->
	      %% Line 122
	      {'$end',Line}
	  %% Line 123
	  <Line> when 'true' ->
	      %% Line 124
	      {'$end',Line}
	end
'yecctoken_end_location'/1 =
    %% Line 126
    fun (_cor0) ->
	%% Line 127
	try
	    %% Line 128
	    case call 'erl_scan':'token_info'
		     (_cor0, 'text') of
	      <{'text',Str}> when 'true' ->
		  %% Line 129
		  case call 'erl_scan':'token_info'
			   (_cor0, 'line') of
		    <{'line',Line}> when 'true' ->
			let <Parts> =
			    %% Line 130
			    call 're':'split'
				(Str, [10])
			in  let <_cor4> =
				%% Line 131
				call 'erlang':'length'
				    (Parts)
			    in  let <Dline> =
				    %% Line 131
				    call 'erlang':'-'
					(_cor4, 1)
				in  let <Yline> =
					%% Line 132
					call 'erlang':'+'
					    (Line, Dline)
				    in  %% Line 133
					case call 'erl_scan':'token_info'
						 (_cor0, 'column') of
					  %% Line 134
					  <{'column',Column}> when 'true' ->
					      let <_cor7> =
						  %% Line 135
						  call 'lists':'last'
						      (Parts)
					      in  let <Col> =
						      %% Line 135
						      call 'erlang':'byte_size'
							  (_cor7)
						  in  let <_cor9> =
							  %% Line 136
							  case <> of
							    <>
								when call 'erlang':'=:='
								      (Dline,
								       0) ->
								Column
							    <> when 'true' ->
								1
							  end
						      in  let <_cor10> =
							      %% Line 136
							      call 'erlang':'+'
								  (Col, _cor9)
							  in  %% Line 136
							      {Yline,_cor10}
					  %% Line 137
					  <'undefined'> when 'true' ->
					      %% Line 138
					      Yline
					  ( <_cor11> when 'true' ->
						primop 'match_fail'
						    ({'case_clause',_cor11})
					    -| ['compiler_generated'] )
					end
		    ( <_cor2> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor2})
		      -| ['compiler_generated'] )
		  end
	      ( <_cor1> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor1})
		-| ['compiler_generated'] )
	    end
	of <_cor12> ->
	    _cor12
	catch <_cor15,_cor14,_cor13> ->
	    %% Line 141
	    apply 'yecctoken_location'/1
		(_cor0)
'yeccerror'/1 =
    %% Line 145
    fun (_cor0) ->
	let <Text> =
	    %% Line 146
	    apply 'yecctoken_to_string'/1
		(_cor0)
	in  let <Location> =
		%% Line 147
		apply 'yecctoken_location'/1
		    (_cor0)
	    in  %% Line 148
		{'error',{Location,'xmerl_b64Bin',[[115|[121|[110|[116|[97|[120|[32|[101|[114|[114|[111|[114|[32|[98|[101|[102|[111|[114|[101|[58|[32]]]]]]]]]]]]]]]]]]]]]|[Text|[]]]}}
'yecctoken_to_string'/1 =
    %% Line 151
    fun (_cor0) ->
	let <_cor1> =
	    catch
		%% Line 152
		call 'erl_scan':'token_info'
		    (_cor0, 'text')
	in  %% Line 152
	    case _cor1 of
	      %% Line 153
	      <{'text',Txt}> when 'true' ->
		  Txt
	      %% Line 154
	      <_cor4> when 'true' ->
		  apply 'yecctoken2string'/1
		      (_cor0)
	    end
'yecctoken_location'/1 =
    %% Line 157
    fun (_cor0) ->
	let <_cor1> =
	    catch
		%% Line 158
		call 'erl_scan':'token_info'
		    (_cor0, 'location')
	in  %% Line 158
	    case _cor1 of
	      %% Line 159
	      <{'location',Loc}> when 'true' ->
		  Loc
	      %% Line 160
	      <_cor4> when 'true' ->
		  call 'erlang':'element'
		      (2, _cor0)
	    end
'yecctoken2string'/1 =
    %% Line 164
    fun (_cor0) ->
	case _cor0 of
	  <{'atom',_cor2,A}> when 'true' ->
	      call 'io_lib':'write'
		  (A)
	  %% Line 165
	  <{'integer',_cor3,N}> when 'true' ->
	      call 'io_lib':'write'
		  (N)
	  %% Line 166
	  <{'float',_cor4,F}> when 'true' ->
	      call 'io_lib':'write'
		  (F)
	  %% Line 167
	  <{'char',_cor5,C}> when 'true' ->
	      call 'io_lib':'write_char'
		  (C)
	  %% Line 168
	  <{'var',_cor6,V}> when 'true' ->
	      call 'io_lib':'format'
		  ([126|[115]], [V|[]])
	  %% Line 169
	  <{'string',_cor7,S}> when 'true' ->
	      call 'io_lib':'write_string'
		  (S)
	  %% Line 170
	  <{'reserved_symbol',_cor8,A}> when 'true' ->
	      call 'io_lib':'write'
		  (A)
	  %% Line 171
	  <{_X_Cat,_cor9,Val}> when 'true' ->
	      call 'io_lib':'format'
		  ([126|[112]], [Val|[]])
	  %% Line 172
	  <{'dot',_cor10}> when 'true' ->
	      [39|[46|[39]]]
	  %% Line 173
	  <{'$end',_cor11}> when 'true' ->
	      %% Line 174
	      []
	  %% Line 175
	  <{Other,_cor12}>
	      when call 'erlang':'is_atom'
		    (Other) ->
	      %% Line 176
	      call 'io_lib':'write'
		  (Other)
	  %% Line 177
	  <Other> when 'true' ->
	      %% Line 178
	      call 'io_lib':'write'
		  (Other)
	end
'yeccpars2'/7 =
    %% Line 190
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <S = 0,Cat,Ss,Stack,T,Ts,Tzr> when 'true' ->
	      %% Line 191
	      apply 'yeccpars2_0'/7
		  (S, Cat, Ss, Stack, T, Ts, Tzr)
	  %% Line 198
	  <S = 4,Cat,Ss,Stack,T,Ts,Tzr> when 'true' ->
	      %% Line 199
	      apply 'yeccpars2_4'/7
		  (S, Cat, Ss, Stack, T, Ts, Tzr)
	  %% Line 200
	  <S = 5,Cat,Ss,Stack,T,Ts,Tzr> when 'true' ->
	      %% Line 201
	      apply 'yeccpars2_5'/7
		  (S, Cat, Ss, Stack, T, Ts, Tzr)
	  %% Line 202
	  <S = 6,Cat,Ss,Stack,T,Ts,Tzr> when 'true' ->
	      %% Line 203
	      apply 'yeccpars2_6'/7
		  (S, Cat, Ss, Stack, T, Ts, Tzr)
	  %% Line 206
	  <S = 8,Cat,Ss,Stack,T,Ts,Tzr> when 'true' ->
	      %% Line 207
	      apply 'yeccpars2_8'/7
		  (S, Cat, Ss, Stack, T, Ts, Tzr)
	  %% Line 208
	  <S = 9,Cat,Ss,Stack,T,Ts,Tzr> when 'true' ->
	      %% Line 209
	      apply 'yeccpars2_9'/7
		  (S, Cat, Ss, Stack, T, Ts, Tzr)
	  %% Line 210
	  <S = 10,Cat,Ss,Stack,T,Ts,Tzr> when 'true' ->
	      %% Line 211
	      apply 'yeccpars2_10'/7
		  (S, Cat, Ss, Stack, T, Ts, Tzr)
	  %% Line 216
	  <S = 13,Cat,Ss,Stack,T,Ts,Tzr> when 'true' ->
	      %% Line 217
	      apply 'yeccpars2_13'/7
		  (S, Cat, Ss, Stack, T, Ts, Tzr)
	  %% Line 218
	  <S = 14,Cat,Ss,Stack,T,Ts,Tzr> when 'true' ->
	      %% Line 219
	      apply 'yeccpars2_14'/7
		  (S, Cat, Ss, Stack, T, Ts, Tzr)
	  %% Line 220
	  <S = 15,Cat,Ss,Stack,T,Ts,Tzr> when 'true' ->
	      %% Line 221
	      apply 'yeccpars2_15'/7
		  (S, Cat, Ss, Stack, T, Ts, Tzr)
	  %% Line 226
	  <Other,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19> when 'true' ->
	      %% Line 227
	      call 'erlang':'error'
		  ({'yecc_bug',[49|[46|[52]]],{'missing_state_in_action_table',Other}})
	end
'yeccpars2_0'/7 =
    %% Line 229
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <S,'b04',Ss,Stack,T,Ts,Tzr> when 'true' ->
	      %% Line 230
	      apply 'yeccpars1'/7
		  (S, 4, Ss, Stack, T, Ts, Tzr)
	  %% Line 231
	  <S,'b16x',Ss,Stack,T,Ts,Tzr> when 'true' ->
	      %% Line 232
	      apply 'yeccpars1'/7
		  (S, 5, Ss, Stack, T, Ts, Tzr)
	  %% Line 233
	  <S,'b64x',Ss,Stack,T,Ts,Tzr> when 'true' ->
	      %% Line 234
	      apply 'yeccpars1'/7
		  (S, 6, Ss, Stack, T, Ts, Tzr)
	  %% Line 235
	  <_X_S,Cat,Ss,Stack,T,Ts,Tzr> when 'true' ->
	      let <NewStack> =
		  ( [( '$undefined'
		       -| ['compiler_generated'] )|%% Line 236
						   Stack]
		    -| ['compiler_generated'] )
	      in  %% Line 237
		  apply 'yeccpars2_2'/7
		      (2, Cat, [0|Ss], NewStack, T, Ts, Tzr)
	end
'yeccpars2_1'/7 =
    %% Line 239
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	( case _cor3 of
	    ( <( [( _X__1
		    -| ['compiler_generated'] )|( _X__Stack
						  -| ['compiler_generated'] )]
		 -| ['compiler_generated'] )> when ( 'true'
						     -| ['compiler_generated'] ) ->
		  let <NewStack> =
		      ( [( '$undefined'
			   -| ['compiler_generated'] )|( _X__Stack
							 -| ['compiler_generated'] )]
			-| ['compiler_generated'] )
		  in  let <_cor8> =
			  %% Line 241
			  call 'erlang':'hd'
			      (_cor4)
		      in  %% Line 241
			  apply 'yeccgoto_base64Binary'/7
			      (_cor8, _cor5, _cor4, NewStack, _cor2, _cor1, _cor0)
	      -| ['compiler_generated'] )
	    ( <_fol23> when ( 'true'
			      -| ['compiler_generated'] ) ->
		  ( primop ( 'match_fail'
			     -| ['compiler_generated'] )
			(( {( 'badmatch'
			      -| ['compiler_generated'] ),_fol23}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'yeccpars2_2'/7 =
    %% Line 243
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <_X_S,'$end',_X_Ss,Stack,_X_T,_X_Ts,_X_Tzr> when 'true' ->
	      let <_cor7> =
		  %% Line 244
		  call 'erlang':'hd'
		      (Stack)
	      in  %% Line 244
		  {'ok',_cor7}
	  %% Line 245
	  <_cor15,_cor16,_cor17,_cor18,T,_cor19,_cor20> when 'true' ->
	      %% Line 246
	      apply 'yeccerror'/1
		  (T)
	end
'yeccpars2_3'/7 =
    %% Line 248
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <S,'b04',Ss,Stack,T,Ts,Tzr> when 'true' ->
	      %% Line 249
	      apply 'yeccpars1'/7
		  (S, 8, Ss, Stack, T, Ts, Tzr)
	  %% Line 250
	  <S,'b16x',Ss,Stack,T,Ts,Tzr> when 'true' ->
	      %% Line 251
	      apply 'yeccpars1'/7
		  (S, 5, Ss, Stack, T, Ts, Tzr)
	  %% Line 252
	  <S,'b64x',Ss,Stack,T,Ts,Tzr> when 'true' ->
	      %% Line 253
	      apply 'yeccpars1'/7
		  (S, 6, Ss, Stack, T, Ts, Tzr)
	  %% Line 254
	  <_cor14,_cor15,_cor16,_cor17,T,_cor18,_cor19> when 'true' ->
	      %% Line 255
	      apply 'yeccerror'/1
		  (T)
	end
'yeccpars2_4'/7 =
    %% Line 257
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	( case _cor3 of
	    ( <( [( _X__1
		    -| ['compiler_generated'] )|( _X__Stack
						  -| ['compiler_generated'] )]
		 -| ['compiler_generated'] )> when ( 'true'
						     -| ['compiler_generated'] ) ->
		  let <NewStack> =
		      ( [( '$undefined'
			   -| ['compiler_generated'] )|( _X__Stack
							 -| ['compiler_generated'] )]
			-| ['compiler_generated'] )
		  in  let <_cor8> =
			  %% Line 259
			  call 'erlang':'hd'
			      (_cor4)
		      in  %% Line 259
			  apply 'yeccgoto_b64'/7
			      (_cor8, _cor5, _cor4, NewStack, _cor2, _cor1, _cor0)
	      -| ['compiler_generated'] )
	    ( <_fol33> when ( 'true'
			      -| ['compiler_generated'] ) ->
		  ( primop ( 'match_fail'
			     -| ['compiler_generated'] )
			(( {( 'badmatch'
			      -| ['compiler_generated'] ),_fol33}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'yeccpars2_5'/7 =
    %% Line 261
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	( case _cor3 of
	    ( <( [( _X__1
		    -| ['compiler_generated'] )|( _X__Stack
						  -| ['compiler_generated'] )]
		 -| ['compiler_generated'] )> when ( 'true'
						     -| ['compiler_generated'] ) ->
		  let <NewStack> =
		      ( [( '$undefined'
			   -| ['compiler_generated'] )|( _X__Stack
							 -| ['compiler_generated'] )]
			-| ['compiler_generated'] )
		  in  let <_cor8> =
			  %% Line 263
			  call 'erlang':'hd'
			      (_cor4)
		      in  %% Line 263
			  apply 'yeccgoto_b64'/7
			      (_cor8, _cor5, _cor4, NewStack, _cor2, _cor1, _cor0)
	      -| ['compiler_generated'] )
	    ( <_fol43> when ( 'true'
			      -| ['compiler_generated'] ) ->
		  ( primop ( 'match_fail'
			     -| ['compiler_generated'] )
			(( {( 'badmatch'
			      -| ['compiler_generated'] ),_fol43}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'yeccpars2_6'/7 =
    %% Line 265
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	( case _cor3 of
	    ( <( [( _X__1
		    -| ['compiler_generated'] )|( _X__Stack
						  -| ['compiler_generated'] )]
		 -| ['compiler_generated'] )> when ( 'true'
						     -| ['compiler_generated'] ) ->
		  let <NewStack> =
		      ( [( '$undefined'
			   -| ['compiler_generated'] )|( _X__Stack
							 -| ['compiler_generated'] )]
			-| ['compiler_generated'] )
		  in  let <_cor8> =
			  %% Line 267
			  call 'erlang':'hd'
			      (_cor4)
		      in  %% Line 267
			  apply 'yeccgoto_b64'/7
			      (_cor8, _cor5, _cor4, NewStack, _cor2, _cor1, _cor0)
	      -| ['compiler_generated'] )
	    ( <_fol53> when ( 'true'
			      -| ['compiler_generated'] ) ->
		  ( primop ( 'match_fail'
			     -| ['compiler_generated'] )
			(( {( 'badmatch'
			      -| ['compiler_generated'] ),_fol53}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'yeccpars2_7'/7 =
    %% Line 269
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <S,'b04',Ss,Stack,T,Ts,Tzr> when 'true' ->
	      %% Line 270
	      apply 'yeccpars1'/7
		  (S, 13, Ss, Stack, T, Ts, Tzr)
	  %% Line 271
	  <S,'b16x',Ss,Stack,T,Ts,Tzr> when 'true' ->
	      %% Line 272
	      apply 'yeccpars1'/7
		  (S, 14, Ss, Stack, T, Ts, Tzr)
	  %% Line 273
	  <S,'b64x',Ss,Stack,T,Ts,Tzr> when 'true' ->
	      %% Line 274
	      apply 'yeccpars1'/7
		  (S, 6, Ss, Stack, T, Ts, Tzr)
	  %% Line 275
	  <_cor14,_cor15,_cor16,_cor17,T,_cor18,_cor19> when 'true' ->
	      %% Line 276
	      apply 'yeccerror'/1
		  (T)
	end
'yeccpars2_8'/7 =
    %% Line 278
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <S,'=',Ss,Stack,T,Ts,Tzr> when 'true' ->
	      %% Line 279
	      apply 'yeccpars1'/7
		  (S, 9, Ss, Stack, T, Ts, Tzr)
	  %% Line 280
	  <_X_S,Cat,Ss,Stack,T,Ts,Tzr> when 'true' ->
	      ( case %% Line 281
		     Stack of
		  ( <( [( _X__1
			  -| ['compiler_generated'] )|( _X__Stack
							-| ['compiler_generated'] )]
		       -| ['compiler_generated'] )> when ( 'true'
							   -| ['compiler_generated'] ) ->
			let <NewStack> =
			    ( [( '$undefined'
				 -| ['compiler_generated'] )|( _X__Stack
							       -| ['compiler_generated'] )]
			      -| ['compiler_generated'] )
			in  let <_cor8> =
				%% Line 282
				call 'erlang':'hd'
				    (Ss)
			    in  %% Line 282
				apply 'yeccgoto_b64'/7
				    (_cor8, Cat, Ss, NewStack, T, Ts, Tzr)
		    -| ['compiler_generated'] )
		  ( <_fol63> when ( 'true'
				    -| ['compiler_generated'] ) ->
			( primop ( 'match_fail'
				   -| ['compiler_generated'] )
			      (( {( 'badmatch'
				    -| ['compiler_generated'] ),_fol63}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'yeccpars2_9'/7 =
    %% Line 284
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <S,'=',Ss,Stack,T,Ts,Tzr> when 'true' ->
	      %% Line 285
	      apply 'yeccpars1'/7
		  (S, 10, Ss, Stack, T, Ts, Tzr)
	  %% Line 286
	  <_cor14,_cor15,_cor16,_cor17,T,_cor18,_cor19> when 'true' ->
	      %% Line 287
	      apply 'yeccerror'/1
		  (T)
	end
'yeccpars2_10'/7 =
    %% Line 289
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 290
	case _cor4 of
	  <[_cor17|[_cor18|[_cor19|Nss]]]> when 'true' ->
	      ( case _cor3 of
		  ( <( [( _X__4
			  -| ['compiler_generated'] )|( [( _X__3
							   -| ['compiler_generated'] )|( [( _X__2
											    -| ['compiler_generated'] )|( [( _X__1
															     -| ['compiler_generated'] )|( _X__Stack
																			   -| ['compiler_generated'] )]
															  -| ['compiler_generated'] )]
											 -| ['compiler_generated'] )]
							-| ['compiler_generated'] )]
		       -| ['compiler_generated'] )> when ( 'true'
							   -| ['compiler_generated'] ) ->
			let <NewStack> =
			    ( [( '$undefined'
				 -| ['compiler_generated'] )|( _X__Stack
							       -| ['compiler_generated'] )]
			      -| ['compiler_generated'] )
			in  let <_cor9> =
				%% Line 292
				call 'erlang':'hd'
				    (Nss)
			    in  %% Line 292
				apply 'yeccgoto_base64Binary2'/7
				    (_cor9, _cor5, Nss, NewStack, _cor2, _cor1, _cor0)
		    -| ['compiler_generated'] )
		  ( <_fol66> when ( 'true'
				    -| ['compiler_generated'] ) ->
			( primop ( 'match_fail'
				   -| ['compiler_generated'] )
			      (( {( 'badmatch'
				    -| ['compiler_generated'] ),_fol66}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_cor7> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor7})
	    -| ['compiler_generated'] )
	end
'yeccpars2_11'/7 =
    %% Line 294
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <S,'b04',Ss,Stack,T,Ts,Tzr> when 'true' ->
	      %% Line 295
	      apply 'yeccpars1'/7
		  (S, 4, Ss, Stack, T, Ts, Tzr)
	  %% Line 296
	  <S,'b16x',Ss,Stack,T,Ts,Tzr> when 'true' ->
	      %% Line 297
	      apply 'yeccpars1'/7
		  (S, 5, Ss, Stack, T, Ts, Tzr)
	  %% Line 298
	  <S,'b64x',Ss,Stack,T,Ts,Tzr> when 'true' ->
	      %% Line 299
	      apply 'yeccpars1'/7
		  (S, 6, Ss, Stack, T, Ts, Tzr)
	  %% Line 300
	  <_cor14,_cor15,_cor16,_cor17,T,_cor18,_cor19> when 'true' ->
	      %% Line 301
	      apply 'yeccerror'/1
		  (T)
	end
'yeccpars2_12'/7 =
    %% Line 303
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <S,'=',Ss,Stack,T,Ts,Tzr> when 'true' ->
	      %% Line 304
	      apply 'yeccpars1'/7
		  (S, 15, Ss, Stack, T, Ts, Tzr)
	  %% Line 305
	  <_cor14,_cor15,_cor16,_cor17,T,_cor18,_cor19> when 'true' ->
	      %% Line 306
	      apply 'yeccerror'/1
		  (T)
	end
'yeccpars2_13'/7 =
    %% Line 308
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <_X_S,'=',Ss,Stack,T,Ts,Tzr> when 'true' ->
	      ( case %% Line 309
		     Stack of
		  ( <( [( _X__1
			  -| ['compiler_generated'] )|( _X__Stack
							-| ['compiler_generated'] )]
		       -| ['compiler_generated'] )> when ( 'true'
							   -| ['compiler_generated'] ) ->
			let <NewStack> =
			    ( [( '$undefined'
				 -| ['compiler_generated'] )|( _X__Stack
							       -| ['compiler_generated'] )]
			      -| ['compiler_generated'] )
			in  let <_cor8> =
				%% Line 310
				call 'erlang':'hd'
				    (Ss)
			    in  %% Line 310
				apply 'yeccgoto_b16'/7
				    (_cor8, '=', Ss, NewStack, T, Ts, Tzr)
		    -| ['compiler_generated'] )
		  ( <_fol76> when ( 'true'
				    -| ['compiler_generated'] ) ->
			( primop ( 'match_fail'
				   -| ['compiler_generated'] )
			      (( {( 'badmatch'
				    -| ['compiler_generated'] ),_fol76}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 311
	  <_X_S,Cat,Ss,Stack,T,Ts,Tzr> when 'true' ->
	      ( case %% Line 312
		     Stack of
		  ( <( [( _X__1
			  -| ['compiler_generated'] )|( _X__Stack
							-| ['compiler_generated'] )]
		       -| ['compiler_generated'] )> when ( 'true'
							   -| ['compiler_generated'] ) ->
			let <NewStack> =
			    ( [( '$undefined'
				 -| ['compiler_generated'] )|( _X__Stack
							       -| ['compiler_generated'] )]
			      -| ['compiler_generated'] )
			in  let <_cor10> =
				%% Line 313
				call 'erlang':'hd'
				    (Ss)
			    in  %% Line 313
				apply 'yeccgoto_b64'/7
				    (_cor10, Cat, Ss, NewStack, T, Ts, Tzr)
		    -| ['compiler_generated'] )
		  ( <_fol79> when ( 'true'
				    -| ['compiler_generated'] ) ->
			( primop ( 'match_fail'
				   -| ['compiler_generated'] )
			      (( {( 'badmatch'
				    -| ['compiler_generated'] ),_fol79}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'yeccpars2_14'/7 =
    %% Line 315
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <_X_S,'=',Ss,Stack,T,Ts,Tzr> when 'true' ->
	      ( case %% Line 316
		     Stack of
		  ( <( [( _X__1
			  -| ['compiler_generated'] )|( _X__Stack
							-| ['compiler_generated'] )]
		       -| ['compiler_generated'] )> when ( 'true'
							   -| ['compiler_generated'] ) ->
			let <NewStack> =
			    ( [( '$undefined'
				 -| ['compiler_generated'] )|( _X__Stack
							       -| ['compiler_generated'] )]
			      -| ['compiler_generated'] )
			in  let <_cor8> =
				%% Line 317
				call 'erlang':'hd'
				    (Ss)
			    in  %% Line 317
				apply 'yeccgoto_b16'/7
				    (_cor8, '=', Ss, NewStack, T, Ts, Tzr)
		    -| ['compiler_generated'] )
		  ( <_fol82> when ( 'true'
				    -| ['compiler_generated'] ) ->
			( primop ( 'match_fail'
				   -| ['compiler_generated'] )
			      (( {( 'badmatch'
				    -| ['compiler_generated'] ),_fol82}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 318
	  <_X_S,Cat,Ss,Stack,T,Ts,Tzr> when 'true' ->
	      ( case %% Line 319
		     Stack of
		  ( <( [( _X__1
			  -| ['compiler_generated'] )|( _X__Stack
							-| ['compiler_generated'] )]
		       -| ['compiler_generated'] )> when ( 'true'
							   -| ['compiler_generated'] ) ->
			let <NewStack> =
			    ( [( '$undefined'
				 -| ['compiler_generated'] )|( _X__Stack
							       -| ['compiler_generated'] )]
			      -| ['compiler_generated'] )
			in  let <_cor10> =
				%% Line 320
				call 'erlang':'hd'
				    (Ss)
			    in  %% Line 320
				apply 'yeccgoto_b64'/7
				    (_cor10, Cat, Ss, NewStack, T, Ts, Tzr)
		    -| ['compiler_generated'] )
		  ( <_fol85> when ( 'true'
				    -| ['compiler_generated'] ) ->
			( primop ( 'match_fail'
				   -| ['compiler_generated'] )
			      (( {( 'badmatch'
				    -| ['compiler_generated'] ),_fol85}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'yeccpars2_15'/7 =
    %% Line 322
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 323
	case _cor4 of
	  <[_cor17|[_cor18|[_cor19|Nss]]]> when 'true' ->
	      ( case _cor3 of
		  ( <( [( _X__4
			  -| ['compiler_generated'] )|( [( _X__3
							   -| ['compiler_generated'] )|( [( _X__2
											    -| ['compiler_generated'] )|( [( _X__1
															     -| ['compiler_generated'] )|( _X__Stack
																			   -| ['compiler_generated'] )]
															  -| ['compiler_generated'] )]
											 -| ['compiler_generated'] )]
							-| ['compiler_generated'] )]
		       -| ['compiler_generated'] )> when ( 'true'
							   -| ['compiler_generated'] ) ->
			let <NewStack> =
			    ( [( '$undefined'
				 -| ['compiler_generated'] )|( _X__Stack
							       -| ['compiler_generated'] )]
			      -| ['compiler_generated'] )
			in  let <_cor9> =
				%% Line 325
				call 'erlang':'hd'
				    (Nss)
			    in  %% Line 325
				apply 'yeccgoto_base64Binary2'/7
				    (_cor9, _cor5, Nss, NewStack, _cor2, _cor1, _cor0)
		    -| ['compiler_generated'] )
		  ( <_fol88> when ( 'true'
				    -| ['compiler_generated'] ) ->
			( primop ( 'match_fail'
				   -| ['compiler_generated'] )
			      (( {( 'badmatch'
				    -| ['compiler_generated'] ),_fol88}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_cor7> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor7})
	    -| ['compiler_generated'] )
	end
'yeccpars2_16'/7 =
    %% Line 327
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <S,'b04',Ss,Stack,T,Ts,Tzr> when 'true' ->
	      %% Line 328
	      apply 'yeccpars1'/7
		  (S, 4, Ss, Stack, T, Ts, Tzr)
	  %% Line 329
	  <S,'b16x',Ss,Stack,T,Ts,Tzr> when 'true' ->
	      %% Line 330
	      apply 'yeccpars1'/7
		  (S, 5, Ss, Stack, T, Ts, Tzr)
	  %% Line 331
	  <S,'b64x',Ss,Stack,T,Ts,Tzr> when 'true' ->
	      %% Line 332
	      apply 'yeccpars1'/7
		  (S, 6, Ss, Stack, T, Ts, Tzr)
	  %% Line 333
	  <_X_S,Cat,Ss,Stack,T,Ts,Tzr> when 'true' ->
	      %% Line 334
	      case Ss of
		<[_cor17|[_cor18|[_cor19|Nss]]]> when 'true' ->
		    ( case %% Line 335
			   Stack of
			( <( [( _X__4
				-| ['compiler_generated'] )|( [( _X__3
								 -| ['compiler_generated'] )|( [( _X__2
												  -| ['compiler_generated'] )|( [( _X__1
																   -| ['compiler_generated'] )|( _X__Stack
																				 -| ['compiler_generated'] )]
																-| ['compiler_generated'] )]
											       -| ['compiler_generated'] )]
							      -| ['compiler_generated'] )]
			     -| ['compiler_generated'] )> when ( 'true'
								 -| ['compiler_generated'] ) ->
			      let <NewStack> =
				  ( [( '$undefined'
				       -| ['compiler_generated'] )|( _X__Stack
								     -| ['compiler_generated'] )]
				    -| ['compiler_generated'] )
			      in  let <_cor9> =
				      %% Line 336
				      call 'erlang':'hd'
					  (Nss)
				  in  %% Line 336
				      apply 'yeccgoto_base64Binary2'/7
					  (_cor9, Cat, Nss, NewStack, T, Ts, Tzr)
			  -| ['compiler_generated'] )
			( <_fol98> when ( 'true'
					  -| ['compiler_generated'] ) ->
			      ( primop ( 'match_fail'
					 -| ['compiler_generated'] )
				    (( {( 'badmatch'
					  -| ['compiler_generated'] ),_fol98}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		( <_cor7> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor7})
		  -| ['compiler_generated'] )
	      end
	end
'yeccpars2_17'/7 =
    %% Line 338
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 339
	case _cor4 of
	  <[_cor17|[_cor18|[_cor19|[_cor20|Nss]]]]> when 'true' ->
	      ( case _cor3 of
		  ( <( [( _X__5
			  -| ['compiler_generated'] )|( [( _X__4
							   -| ['compiler_generated'] )|( [( _X__3
											    -| ['compiler_generated'] )|( [( _X__2
															     -| ['compiler_generated'] )|( [( _X__1
																			      -| ['compiler_generated'] )|( _X__Stack
																							    -| ['compiler_generated'] )]
																			   -| ['compiler_generated'] )]
															  -| ['compiler_generated'] )]
											 -| ['compiler_generated'] )]
							-| ['compiler_generated'] )]
		       -| ['compiler_generated'] )> when ( 'true'
							   -| ['compiler_generated'] ) ->
			let <NewStack> =
			    ( [( '$undefined'
				 -| ['compiler_generated'] )|( _X__Stack
							       -| ['compiler_generated'] )]
			      -| ['compiler_generated'] )
			in  let <_cor9> =
				%% Line 341
				call 'erlang':'hd'
				    (Nss)
			    in  %% Line 341
				apply 'yeccgoto_base64Binary2'/7
				    (_cor9, _cor5, Nss, NewStack, _cor2, _cor1, _cor0)
		    -| ['compiler_generated'] )
		  ( <_fol101> when ( 'true'
				     -| ['compiler_generated'] ) ->
			( primop ( 'match_fail'
				   -| ['compiler_generated'] )
			      (( {( 'badmatch'
				    -| ['compiler_generated'] ),_fol101}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_cor7> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor7})
	    -| ['compiler_generated'] )
	end
'yeccgoto_b16'/7 =
    %% Line 343
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <7,Cat,Ss,Stack,T,Ts,Tzr> when 'true' ->
	      %% Line 344
	      apply 'yeccpars2_12'/7
		  (12, Cat, Ss, Stack, T, Ts, Tzr)
	  ( <_cor13,_cor12,_cor11,_cor10,_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11,_cor10,_cor9,_cor8,_cor7})
		  -| [{'function_name',{'yeccgoto_b16',7}}] )
	    -| ['compiler_generated'] )
	end
'yeccgoto_b64'/7 =
    %% Line 346
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <0,Cat,Ss,Stack,T,Ts,Tzr> when 'true' ->
	      %% Line 347
	      apply 'yeccpars2_3'/7
		  (3, Cat, Ss, Stack, T, Ts, Tzr)
	  %% Line 348
	  <3,Cat,Ss,Stack,T,Ts,Tzr> when 'true' ->
	      %% Line 349
	      apply 'yeccpars2_7'/7
		  (7, Cat, Ss, Stack, T, Ts, Tzr)
	  %% Line 350
	  <7,Cat,Ss,Stack,T,Ts,Tzr> when 'true' ->
	      %% Line 351
	      apply 'yeccpars2_11'/7
		  (11, Cat, Ss, Stack, T, Ts, Tzr)
	  %% Line 352
	  <11,Cat,Ss,Stack,T,Ts,Tzr> when 'true' ->
	      %% Line 353
	      apply 'yeccpars2_16'/7
		  (16, Cat, Ss, Stack, T, Ts, Tzr)
	  %% Line 354
	  <16,Cat,Ss,Stack,T,Ts,Tzr> when 'true' ->
	      %% Line 355
	      apply 'yeccpars2_3'/7
		  (3, Cat, Ss, Stack, T, Ts, Tzr)
	  ( <_cor13,_cor12,_cor11,_cor10,_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11,_cor10,_cor9,_cor8,_cor7})
		  -| [{'function_name',{'yeccgoto_b64',7}}] )
	    -| ['compiler_generated'] )
	end
'yeccgoto_base64Binary'/7 =
    %% Line 357
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <0,Cat,Ss,Stack,T,Ts,Tzr> when 'true' ->
	      %% Line 358
	      apply 'yeccpars2_2'/7
		  (2, Cat, Ss, Stack, T, Ts, Tzr)
	  ( <_cor13,_cor12,_cor11,_cor10,_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11,_cor10,_cor9,_cor8,_cor7})
		  -| [{'function_name',{'yeccgoto_base64Binary',7}}] )
	    -| ['compiler_generated'] )
	end
'yeccgoto_base64Binary2'/7 =
    %% Line 360
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <_X_S = 0,Cat,Ss,Stack,T,Ts,Tzr> when 'true' ->
	      %% Line 361
	      apply 'yeccpars2_1'/7
		  (_X_S, Cat, Ss, Stack, T, Ts, Tzr)
	  %% Line 362
	  <_X_S = 16,Cat,Ss,Stack,T,Ts,Tzr> when 'true' ->
	      %% Line 363
	      apply 'yeccpars2_17'/7
		  (_X_S, Cat, Ss, Stack, T, Ts, Tzr)
	  ( <_cor13,_cor12,_cor11,_cor10,_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11,_cor10,_cor9,_cor8,_cor7})
		  -| [{'function_name',{'yeccgoto_base64Binary2',7}}] )
	    -| ['compiler_generated'] )
	end
'yeccpars2_0_'/1 =
    %% Line 1
    fun (_cor0) ->
	%% Line 2
	[%% Line 3
	 '$undefined'|_cor0]
'yeccpars2_1_'/1 =
    %% Line 1
    fun (_cor0) ->
	%% Line 2
	case _cor0 of
	  <[_X__1|_X__Stack]> when 'true' ->
	      %% Line 3
	      [%% Line 4
	       '$undefined'|%% Line 5
			    _X__Stack]
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'yeccpars2_4_'/1 =
    %% Line 1
    fun (_cor0) ->
	%% Line 2
	case _cor0 of
	  <[_X__1|_X__Stack]> when 'true' ->
	      %% Line 3
	      [%% Line 4
	       '$undefined'|%% Line 5
			    _X__Stack]
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'yeccpars2_5_'/1 =
    %% Line 1
    fun (_cor0) ->
	%% Line 2
	case _cor0 of
	  <[_X__1|_X__Stack]> when 'true' ->
	      %% Line 3
	      [%% Line 4
	       '$undefined'|%% Line 5
			    _X__Stack]
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'yeccpars2_6_'/1 =
    %% Line 1
    fun (_cor0) ->
	%% Line 2
	case _cor0 of
	  <[_X__1|_X__Stack]> when 'true' ->
	      %% Line 3
	      [%% Line 4
	       '$undefined'|%% Line 5
			    _X__Stack]
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'yeccpars2_8_'/1 =
    %% Line 1
    fun (_cor0) ->
	%% Line 2
	case _cor0 of
	  <[_X__1|_X__Stack]> when 'true' ->
	      %% Line 3
	      [%% Line 4
	       '$undefined'|%% Line 5
			    _X__Stack]
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'yeccpars2_10_'/1 =
    %% Line 1
    fun (_cor0) ->
	%% Line 2
	case _cor0 of
	  <[_X__4|[_X__3|[_X__2|[_X__1|_X__Stack]]]]> when 'true' ->
	      %% Line 3
	      [%% Line 4
	       '$undefined'|%% Line 5
			    _X__Stack]
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'yeccpars2_13_='/1 =
    %% Line 1
    fun (_cor0) ->
	%% Line 2
	case _cor0 of
	  <[_X__1|_X__Stack]> when 'true' ->
	      %% Line 3
	      [%% Line 4
	       '$undefined'|%% Line 5
			    _X__Stack]
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'yeccpars2_13_'/1 =
    %% Line 1
    fun (_cor0) ->
	%% Line 2
	case _cor0 of
	  <[_X__1|_X__Stack]> when 'true' ->
	      %% Line 3
	      [%% Line 4
	       '$undefined'|%% Line 5
			    _X__Stack]
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'yeccpars2_14_='/1 =
    %% Line 1
    fun (_cor0) ->
	%% Line 2
	case _cor0 of
	  <[_X__1|_X__Stack]> when 'true' ->
	      %% Line 3
	      [%% Line 4
	       '$undefined'|%% Line 5
			    _X__Stack]
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'yeccpars2_14_'/1 =
    %% Line 1
    fun (_cor0) ->
	%% Line 2
	case _cor0 of
	  <[_X__1|_X__Stack]> when 'true' ->
	      %% Line 3
	      [%% Line 4
	       '$undefined'|%% Line 5
			    _X__Stack]
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'yeccpars2_15_'/1 =
    %% Line 1
    fun (_cor0) ->
	%% Line 2
	case _cor0 of
	  <[_X__4|[_X__3|[_X__2|[_X__1|_X__Stack]]]]> when 'true' ->
	      %% Line 3
	      [%% Line 4
	       '$undefined'|%% Line 5
			    _X__Stack]
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'yeccpars2_16_'/1 =
    %% Line 1
    fun (_cor0) ->
	%% Line 2
	case _cor0 of
	  <[_X__4|[_X__3|[_X__2|[_X__1|_X__Stack]]]]> when 'true' ->
	      %% Line 3
	      [%% Line 4
	       '$undefined'|%% Line 5
			    _X__Stack]
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'yeccpars2_17_'/1 =
    %% Line 1
    fun (_cor0) ->
	%% Line 2
	case _cor0 of
	  <[_X__5|[_X__4|[_X__3|[_X__2|[_X__1|_X__Stack]]]]]> when 'true' ->
	      %% Line 3
	      [%% Line 4
	       '$undefined'|%% Line 5
			    _X__Stack]
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('xmerl_b64Bin')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('xmerl_b64Bin', _cor0)
end