module 'xmerl_uri' ['module_info'/0,
		    'module_info'/1,
		    'parse'/1,
		    'resolve'/2]
    attributes []
'resolve'/2 =
    %% Line 31
    fun (_cor1,_cor0) ->
	%% Line 32
	'ok'
'parse'/1 =
    %% Line 37
    fun (_cor0) ->
	%% Line 38
	case apply 'parse_scheme'/1
		 (_cor0) of
	  %% Line 39
	  <{'http',Cont}> when 'true' ->
	      apply 'parse_http'/2
		  (Cont, 'http')
	  %% Line 40
	  <{'https',Cont}> when 'true' ->
	      apply 'parse_http'/2
		  (Cont, 'https')
	  %% Line 41
	  <{'ftp',Cont}> when 'true' ->
	      apply 'parse_ftp'/2
		  (Cont, 'ftp')
	  %% Line 42
	  <{'sip',Cont}> when 'true' ->
	      apply 'parse_sip'/2
		  (Cont, 'sip')
	  %% Line 43
	  <{'sips',Cont}> when 'true' ->
	      apply 'parse_sip'/2
		  (Cont, 'sips')
	  %% Line 44
	  <{'sms',Cont}> when 'true' ->
	      apply 'parse_sms'/2
		  (Cont, 'sms')
	  %% Line 45
	  <{'error',Error}> when 'true' ->
	      {'error',Error}
	  %% Line 46
	  <{Scheme,Cont}> when 'true' ->
	      {Scheme,Cont}
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor1})
	    -| ['compiler_generated'] )
	end
'parse_scheme'/1 =
    %% Line 51
    fun (_cor0) ->
	%% Line 52
	apply 'parse_scheme'/2
	    (_cor0, [])
'parse_scheme'/2 =
    %% Line 54
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[H|URI],Acc>
	      when let <_cor4> =
		    let <_cor2> =
			call 'erlang':'=<'
			    (97, H)
		    in  let <_cor3> =
			    call 'erlang':'=<'
				(H, 122)
			in  call 'erlang':'and'
				(_cor2, _cor3)
		in  let <_cor7> =
			let <_cor5> =
			    call 'erlang':'=<'
				(65, H)
			in  let <_cor6> =
				call 'erlang':'=<'
				    (H, 90)
			    in  call 'erlang':'and'
				    (_cor5, _cor6)
		    in  call 'erlang':'or'
			    (_cor4, _cor7) ->
	      %% Line 55
	      apply 'parse_scheme2'/2
		  (URI, [H|Acc])
	  %% Line 56
	  <_cor10,_cor11> when 'true' ->
	      %% Line 57
	      {'error','no_scheme'}
	end
'parse_scheme2'/2 =
    %% Line 59
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[H|URI],Acc>
	      when let <_cor4> =
		    let <_cor2> =
			%% Line 60
			call 'erlang':'=<'
			    (97, H)
		    in  let <_cor3> =
			    %% Line 60
			    call 'erlang':'=<'
				(H, 122)
			in  %% Line 60
			    call 'erlang':'and'
				(_cor2, _cor3)
		in  let <_cor7> =
			let <_cor5> =
			    %% Line 60
			    call 'erlang':'=<'
				(65, H)
			in  let <_cor6> =
				%% Line 60
				call 'erlang':'=<'
				    (H, 90)
			    in  %% Line 60
				call 'erlang':'and'
				    (_cor5, _cor6)
		    in  let <_cor10> =
			    let <_cor8> =
				%% Line 60
				call 'erlang':'=<'
				    (48, H)
			    in  let <_cor9> =
				    %% Line 60
				    call 'erlang':'=<'
					(H, 57)
				in  %% Line 60
				    call 'erlang':'and'
					(_cor8, _cor9)
			in  let <_cor11> =
				%% Line 60
				call 'erlang':'=='
				    (H, 45)
			    in  let <_cor12> =
				    %% Line 60
				    call 'erlang':'=='
					(H, 43)
				in  let <_cor13> =
					%% Line 60
					call 'erlang':'=='
					    (H, 46)
				    in  let <_cor14> =
					    %% Line 60
					    call 'erlang':'or'
						(_cor12, _cor13)
					in  let <_cor15> =
						%% Line 60
						call 'erlang':'or'
						    (_cor11, _cor14)
					    in  let <_cor16> =
						    %% Line 60
						    call 'erlang':'or'
							(_cor10, _cor15)
						in  let <_cor17> =
							%% Line 60
							call 'erlang':'or'
							    (_cor7, _cor16)
						    in  %% Line 60
							call 'erlang':'or'
							    (_cor4, _cor17) ->
	      %% Line 61
	      apply 'parse_scheme2'/2
		  (URI, [H|Acc])
	  %% Line 62
	  <[58|URI],Acc> when 'true' ->
	      let <_cor18> =
		  %% Line 63
		  call 'lists':'reverse'
		      (Acc)
	      in  let <_cor19> =
		      %% Line 63
		      call 'erlang':'list_to_atom'
			  (_cor18)
		  in  %% Line 63
		      {_cor19,URI}
	  %% Line 64
	  <_cor22,_cor23> when 'true' ->
	      %% Line 65
	      {'error','no_scheme'}
	end
'parse_http'/2 =
    %% Line 81
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[47|[47|C0]],Scheme> when 'true' ->
	      %% Line 82
	      case apply 'scan_hostport'/2
		       (C0, Scheme) of
		%% Line 83
		<{C1,Host,Port}> when 'true' ->
		    %% Line 84
		    case apply 'scan_pathquery'/1
			     (C1) of
		      %% Line 85
		      <{'error',Error}> when 'true' ->
			  %% Line 86
			  {'error',Error}
		      %% Line 87
		      <{Path,Query}> when 'true' ->
			  %% Line 88
			  {Scheme,Host,Port,Path,Query}
		      ( <_cor2> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor2})
			-| ['compiler_generated'] )
		    end
		%% Line 90
		<{'error',Error}> when 'true' ->
		    %% Line 91
		    {'error',Error}
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 93
	  <_cor6,_cor7> when 'true' ->
	      %% Line 94
	      {'error','invalid_url'}
	end
'scan_pathquery'/1 =
    %% Line 96
    fun (_cor0) ->
	%% Line 97
	case apply 'scan_abspath'/1
		 (_cor0) of
	  %% Line 98
	  <{'error',Error}> when 'true' ->
	      %% Line 99
	      {'error',Error}
	  %% Line 100
	  <{[],[]}> when 'true' ->
	      %% Line 101
	      {[47],[]}
	  %% Line 102
	  <{[63|C1],Path}> when 'true' ->
	      %% Line 103
	      case apply 'scan_query'/2
		       (C1, []) of
		%% Line 104
		<{'error',Error}> when 'true' ->
		    %% Line 105
		    {'error',Error}
		%% Line 106
		<Query> when 'true' ->
		    let <_cor1> =
			%% Line 107
			[63|Query]
		    in  %% Line 107
			{Path,_cor1}
	      end
	  %% Line 109
	  <{[35|C1],Path}> when 'true' ->
	      %% Line 110
	      case apply 'scan_query'/2
		       (C1, []) of
		%% Line 111
		<{'error',Error}> when 'true' ->
		    %% Line 112
		    {'error',Error}
		%% Line 113
		<Fragment> when 'true' ->
		    let <_cor3> =
			%% Line 114
			[35|Fragment]
		    in  %% Line 114
			{Path,_cor3}
	      end
	  %% Line 116
	  <{[],Path}> when 'true' ->
	      %% Line 117
	      {Path,[]}
	  ( <_cor5> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor5})
	    -| ['compiler_generated'] )
	end
'parse_ftp'/2 =
    %% Line 139
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[47|[47|C0]],Scheme> when 'true' ->
	      %% Line 140
	      case apply 'ftp_userinfo'/1
		       (C0) of
		%% Line 141
		<{'error',Error}> when 'true' ->
		    %% Line 142
		    {'error',Error}
		%% Line 143
		<{C1,Creds}> when 'true' ->
		    %% Line 144
		    case apply 'scan_hostport'/2
			     (C1, Scheme) of
		      %% Line 145
		      <{C2,Host,Port}> when 'true' ->
			  %% Line 146
			  case apply 'scan_abspath'/1
				   (C2) of
			    %% Line 147
			    <{'error',Error}> when 'true' ->
				%% Line 148
				{'error',Error}
			    %% Line 149
			    <{[],[]}> when 'true' ->
				%% Line 150
				{Scheme,Creds,Host,Port,[47]}
			    %% Line 151
			    <{[],Path}> when 'true' ->
				%% Line 152
				{Scheme,Creds,Host,Port,Path}
			    ( <_cor2> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor2})
			      -| ['compiler_generated'] )
			  end
		      %% Line 154
		      <{'error',Error}> when 'true' ->
			  %% Line 155
			  {'error',Error}
		      ( <_cor3> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor3})
			-| ['compiler_generated'] )
		    end
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'parse_ftp',2}}] )
	    -| ['compiler_generated'] )
	end
'ftp_userinfo'/1 =
    %% Line 159
    fun (_cor0) ->
	%% Line 160
	apply 'ftp_userinfo'/2
	    (_cor0, [])
'ftp_userinfo'/2 =
    %% Line 162
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],Acc> when 'true' ->
	      let <_cor2> =
		  %% Line 163
		  call 'lists':'reverse'
		      (Acc)
	      in  %% Line 163
		  {_cor2,{[],[]}}
	  %% Line 164
	  <C0 = [47|_cor9],Acc> when 'true' ->
	      let <_cor3> =
		  %% Line 165
		  call 'lists':'reverse'
		      (Acc)
	      in  let <_cor4> =
		      %% Line 165
		      call 'erlang':'++'
			  (_cor3, C0)
		  in  %% Line 165
		      {_cor4,{[],[]}}
	  %% Line 166
	  <[64|C0],Acc> when 'true' ->
	      let <_cor5> =
		  %% Line 167
		  call 'lists':'reverse'
		      (Acc)
	      in  let <_cor6> =
		      %% Line 167
		      apply 'ftp_userinfo_1'/4
			  (_cor5, 0, [], [])
		  in  %% Line 167
		      {C0,_cor6}
	  %% Line 168
	  <[C|C0],Acc> when 'true' ->
	      %% Line 169
	      apply 'ftp_userinfo'/2
		  (C0, [C|Acc])
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'ftp_userinfo',2}}] )
	    -| ['compiler_generated'] )
	end
'ftp_userinfo_1'/4 =
    %% Line 172
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[],0,Acc,[]> when 'true' ->
	      let <_cor4> =
		  %% Line 173
		  call 'lists':'reverse'
		      (Acc)
	      in  %% Line 173
		  {_cor4,[]}
	  %% Line 174
	  <[],1,Acc,User> when 'true' ->
	      let <_cor5> =
		  %% Line 175
		  call 'lists':'reverse'
		      (Acc)
	      in  %% Line 175
		  {User,_cor5}
	  %% Line 176
	  <[58|_cor11],0,[],[]> when 'true' ->
	      %% Line 177
	      {'error','no_user'}
	  %% Line 178
	  <[58|C0],0,Acc,[]> when 'true' ->
	      let <_cor6> =
		  %% Line 179
		  call 'lists':'reverse'
		      (Acc)
	      in  %% Line 179
		  apply 'ftp_userinfo_1'/4
		      (C0, 1, [], _cor6)
	  %% Line 181
	  <[C|C0],Stage,Acc,User> when 'true' ->
	      %% Line 182
	      apply 'ftp_userinfo_1'/4
		  (C0, Stage, [C|Acc], User)
	  ( <_cor10,_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8,_cor7})
		  -| [{'function_name',{'ftp_userinfo_1',4}}] )
	    -| ['compiler_generated'] )
	end
'parse_sip'/2 =
    %% Line 223
    fun (_cor1,_cor0) ->
	%% Line 224
	case call 'string':'tokens'
		 (_cor1, [64]) of
	  %% Line 225
	  <[Userinfo|[Hostport|[]]]> when 'true' ->
	      %% Line 226
	      case apply 'sip_userinfo'/1
		       (Userinfo) of
		<{User,Pass}> when 'true' ->
		    %% Line 227
		    case apply 'scan_hostport'/2
			     (Hostport, _cor0) of
		      <{C1,Host,Port}> when 'true' ->
			  %% Line 228
			  case apply 'scan_parameters'/1
				   (C1) of
			    <{C2,Parameters}> when 'true' ->
				let <Headers> =
				    %% Line 229
				    apply 'scan_headers'/1
					(C2)
				in  %% Line 230
				    {_cor0,User,Pass,Host,Port,Parameters,Headers}
			    ( <_cor4> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor4})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor3> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor3})
			-| ['compiler_generated'] )
		    end
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 231
	  <[Hostport|[]]> when 'true' ->
	      %% Line 232
	      case apply 'scan_hostport'/2
		       (Hostport, _cor0) of
		<{C1,Host,Port}> when 'true' ->
		    %% Line 233
		    case apply 'scan_parameters'/1
			     (C1) of
		      <{C2,Parameters}> when 'true' ->
			  let <Headers> =
			      %% Line 234
			      apply 'scan_headers'/1
				  (C2)
			  in  %% Line 235
			      {_cor0,'none','none',Host,Port,Parameters,Headers}
		      ( <_cor7> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor7})
			-| ['compiler_generated'] )
		    end
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor6})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor9> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor9})
	    -| ['compiler_generated'] )
	end
'sip_userinfo'/1 =
    %% Line 239
    fun (_cor0) ->
	%% Line 240
	case call 'string':'tokens'
		 (_cor0, [58]) of
	  %% Line 241
	  <[User|[Pass|[]]]> when 'true' ->
	      {User,Pass}
	  %% Line 242
	  <[User|[]]> when 'true' ->
	      {User,'none'}
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor1})
	    -| ['compiler_generated'] )
	end
'scan_parameters'/1 =
    %% Line 245
    fun (_cor0) ->
	let <ParList> =
	    %% Line 246
	    call 'string':'tokens'
		(_cor0, [59])
	in  %% Line 247
	    apply 'scan_parameters2'/3
		(ParList, [], [])
'scan_parameters2'/3 =
    %% Line 251
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],Out,Foo> when 'true' ->
	      let <_cor4> =
		  %% Line 252
		  call 'lists':'reverse'
		      (Foo)
	      in  let <_cor3> =
		      %% Line 252
		      call 'lists':'reverse'
			  (Out)
		  in  %% Line 252
		      {_cor4,_cor3}
	  %% Line 253
	  <[[116|[114|[97|[110|[115|[112|[111|[114|[116|Val]]]]]]]]]|Rest],Out,Foo> when 'true' ->
	      %% Line 254
	      apply 'scan_parameters2'/3
		  (Rest, [{'transport',Val}|Out], Foo)
	  %% Line 255
	  <[[117|[115|[101|[114|Val]]]]|Rest],Out,Foo> when 'true' ->
	      %% Line 256
	      apply 'scan_parameters2'/3
		  (Rest, [{'user',Val}|Out], Foo)
	  %% Line 257
	  <[[109|[101|[116|[104|[111|[100|Val]]]]]]|Rest],Out,Foo> when 'true' ->
	      %% Line 258
	      apply 'scan_parameters2'/3
		  (Rest, [{'method',Val}|Out], Foo)
	  %% Line 259
	  <[[116|[116|[108|Val]]]|Rest],Out,Foo> when 'true' ->
	      %% Line 260
	      apply 'scan_parameters2'/3
		  (Rest, [{'ttl',Val}|Out], Foo)
	  %% Line 261
	  <[[109|[97|[100|[100|[114|Val]]]]]|Rest],Out,Foo> when 'true' ->
	      %% Line 262
	      apply 'scan_parameters2'/3
		  (Rest, [{'maddr',Val}|Out], Foo)
	  %% Line 263
	  <[[108|[114]]|Rest],Out,Foo> when 'true' ->
	      %% Line 264
	      apply 'scan_parameters2'/3
		  (Rest, [{'lr',[]}|Out], Foo)
	  %% Line 265
	  <[Other|Rest],Out,Foo> when 'true' ->
	      %% Line 266
	      apply 'scan_parameters2'/3
		  (Rest, [Out|[]], [Other|Foo])
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'scan_parameters2',3}}] )
	    -| ['compiler_generated'] )
	end
'scan_headers'/1 =
    %% Line 269
    fun (_cor0) ->
	_cor0
'parse_sms'/2 =
    %% Line 298
    fun (_cor1,_cor0) ->
	%% Line 299
	{_cor0,_cor1}
'scan_hostport'/2 =
    %% Line 306
    fun (_cor1,_cor0) ->
	%% Line 307
	case apply 'scan_host'/1
		 (_cor1) of
	  %% Line 308
	  <{'error',Error}> when 'true' ->
	      %% Line 309
	      {'error',Error}
	  %% Line 310
	  <{[58|C1],Host}> when 'true' ->
	      %% Line 311
	      case apply 'scan_port'/2
		       (C1, []) of
		<{C2,Port}> when 'true' ->
		    let <_cor3> =
			%% Line 312
			call 'erlang':'list_to_integer'
			    (Port)
		    in  %% Line 312
			{C2,Host,_cor3}
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 313
	  <{C1,Host}>
	      when call 'erlang':'=:='
		    (_cor0,
		     'http') ->
	      %% Line 314
	      {C1,Host,80}
	  %% Line 315
	  <{C1,Host}>
	      when call 'erlang':'=:='
		    (_cor0,
		     'https') ->
	      %% Line 316
	      {C1,Host,443}
	  %% Line 317
	  <{C1,Host}>
	      when call 'erlang':'=:='
		    (_cor0,
		     'ftp') ->
	      %% Line 318
	      {C1,Host,21}
	  %% Line 319
	  <{C1,Host}>
	      when call 'erlang':'=:='
		    (_cor0,
		     'sip') ->
	      %% Line 320
	      {C1,Host,5060}
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor4})
	    -| ['compiler_generated'] )
	end
'scan_host'/1 =
    %% Line 352
    fun (_cor0) ->
	%% Line 353
	case apply 'scan_host2'/5
		 (_cor0, [], 0, [], []) of
	  %% Line 354
	  <{C1,IPv4address,[1|[1|[1|[1]]]]}> when 'true' ->
	      let <_cor1> =
		  %% Line 355
		  call 'lists':'append'
		      (IPv4address)
	      in  let <_cor2> =
		      %% Line 355
		      call 'lists':'reverse'
			  (_cor1)
		  in  %% Line 355
		      {C1,_cor2}
	  %% Line 361
	  <{C1,Hostname,[_X_A|_X_HostF]}> when 'true' ->
	      let <_cor3> =
		  %% Line 362
		  call 'lists':'append'
		      (Hostname)
	      in  let <_cor4> =
		      %% Line 362
		      call 'lists':'reverse'
			  (_cor3)
		  in  %% Line 362
		      {C1,_cor4}
	  ( <_cor5> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor5})
	    -| ['compiler_generated'] )
	end
'scan_host2'/5 =
    %% Line 367
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[H|C0],Acc,CurF,Host,HostF>
	      when let <_cor5> =
		    call 'erlang':'=<'
			(48, H)
		in  let <_cor6> =
			call 'erlang':'=<'
			    (H, 57)
		    in  call 'erlang':'and'
			    (_cor5, _cor6) ->
	      let <_cor7> =
		  %% Line 368
		  call 'erlang':'bor'
		      (CurF, 1)
	      in  %% Line 368
		  apply 'scan_host2'/5
		      (C0, [H|Acc], _cor7, Host, HostF)
	  %% Line 369
	  <[H|C0],Acc,CurF,Host,HostF>
	      when let <_cor10> =
		    let <_cor8> =
			call 'erlang':'=<'
			    (97, H)
		    in  let <_cor9> =
			    call 'erlang':'=<'
				(H, 122)
			in  call 'erlang':'and'
				(_cor8, _cor9)
		in  let <_cor13> =
			let <_cor11> =
			    call 'erlang':'=<'
				(65, H)
			in  let <_cor12> =
				call 'erlang':'=<'
				    (H, 90)
			    in  call 'erlang':'and'
				    (_cor11, _cor12)
		    in  call 'erlang':'or'
			    (_cor10, _cor13) ->
	      let <_cor14> =
		  %% Line 370
		  call 'erlang':'bor'
		      (CurF, 6)
	      in  %% Line 370
		  apply 'scan_host2'/5
		      (C0, [H|Acc], _cor14, Host, HostF)
	  %% Line 371
	  <[45|C0],Acc,CurF,Host,HostF>
	      when call 'erlang':'=/='
		    (CurF,
		     0) ->
	      %% Line 372
	      apply 'scan_host2'/5
		  (C0, [45|Acc], CurF, Host, HostF)
	  %% Line 373
	  <[46|C0],Acc,CurF,Host,HostF>
	      when call 'erlang':'=/='
		    (CurF,
		     0) ->
	      %% Line 374
	      apply 'scan_host2'/5
		  (C0, [], 0, [[46]|[Acc|Host]], [CurF|HostF])
	  %% Line 375
	  <C0,Acc,CurF,Host,HostF> when 'true' ->
	      %% Line 376
	      {C0,[Acc|Host],[CurF|HostF]}
	end
'scan_port'/2 =
    %% Line 380
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[H|C0],Acc>
	      when let <_cor2> =
		    call 'erlang':'=<'
			(48, H)
		in  let <_cor3> =
			call 'erlang':'=<'
			    (H, 57)
		    in  call 'erlang':'and'
			    (_cor2, _cor3) ->
	      %% Line 381
	      apply 'scan_port'/2
		  (C0, [H|Acc])
	  %% Line 382
	  <C0,Acc> when 'true' ->
	      let <_cor4> =
		  %% Line 383
		  call 'lists':'reverse'
		      (Acc)
	      in  %% Line 383
		  {C0,_cor4}
	end
'scan_abspath'/1 =
    %% Line 386
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      %% Line 387
	      {[],[]}
	  %% Line 388
	  <[47|C0]> when 'true' ->
	      %% Line 389
	      apply 'scan_pathsegments'/2
		  (C0, [[47]])
	  %% Line 390
	  <_cor2> when 'true' ->
	      %% Line 391
	      {'error','no_abspath'}
	end
'scan_pathsegments'/2 =
    %% Line 394
    fun (_cor1,_cor0) ->
	%% Line 395
	case apply 'scan_segment'/2
		 (_cor1, []) of
	  %% Line 396
	  <{[47|C1],Segment}> when 'true' ->
	      %% Line 397
	      apply 'scan_pathsegments'/2
		  (C1, [[47]|[Segment|_cor0]])
	  %% Line 398
	  <{C1,Segment}> when 'true' ->
	      let <_cor2> =
		  %% Line 399
		  call 'lists':'append'
		      ([Segment|_cor0])
	      in  let <_cor3> =
		      %% Line 399
		      call 'lists':'reverse'
			  (_cor2)
		  in  %% Line 399
		      {C1,_cor3}
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor4})
	    -| ['compiler_generated'] )
	end
'scan_segment'/2 =
    %% Line 405
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[59|C0],Acc> when 'true' ->
	      let <_cor2> =
		  %% Line 406
		  [59|Acc]
	      in  %% Line 406
		  case apply 'scan_pchars'/2
			   (C0, _cor2) of
		    <{C1,ParamAcc}> when 'true' ->
			%% Line 407
			apply 'scan_segment'/2
			    (C1, ParamAcc)
		    ( <_cor3> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor3})
		      -| ['compiler_generated'] )
		  end
	  %% Line 408
	  <C0,Acc> when 'true' ->
	      %% Line 409
	      case apply 'scan_pchars'/2
		       (C0, Acc) of
		%% Line 410
		<{[59|C1],Segment}> when 'true' ->
		    let <_cor4> =
			%% Line 411
			[59|Segment]
		    in  %% Line 411
			case apply 'scan_pchars'/2
				 (C1, _cor4) of
			  <{C2,ParamAcc}> when 'true' ->
			      %% Line 412
			      apply 'scan_segment'/2
				  (C2, ParamAcc)
			  ( <_cor5> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor5})
			    -| ['compiler_generated'] )
			end
		%% Line 413
		<{C1,Segment}> when 'true' ->
		    %% Line 414
		    {C1,Segment}
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor6})
		  -| ['compiler_generated'] )
	      end
	end
'scan_query'/2 =
    %% Line 425
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],Acc> when 'true' ->
	      %% Line 426
	      call 'lists':'reverse'
		  (Acc)
	  %% Line 427
	  <[37|[H1|[H2|C0]]],Acc> when 'true' ->
	      let <_cor3> =
		  %% Line 428
		  apply 'hex2dec'/1
		      (H1)
	      in  let <_cor4> =
		      %% Line 428
		      call 'erlang':'*'
			  (_cor3, 16)
		  in  let <_cor2> =
			  %% Line 428
			  apply 'hex2dec'/1
			      (H2)
		      in  let <_cor5> =
			      %% Line 428
			      call 'erlang':'+'
				  (_cor4, _cor2)
			  in  %% Line 428
			      apply 'scan_query'/2
				  ([_cor5|C0], Acc)
	  %% Line 429
	  <[H|C0],Acc>
	      when let <_cor8> =
		    let <_cor6> =
			call 'erlang':'=<'
			    (97, H)
		    in  let <_cor7> =
			    call 'erlang':'=<'
				(H, 122)
			in  call 'erlang':'and'
				(_cor6, _cor7)
		in  let <_cor11> =
			let <_cor9> =
			    call 'erlang':'=<'
				(65, H)
			in  let <_cor10> =
				call 'erlang':'=<'
				    (H, 90)
			    in  call 'erlang':'and'
				    (_cor9, _cor10)
		    in  let <_cor14> =
			    let <_cor12> =
				call 'erlang':'=<'
				    (48, H)
			    in  let <_cor13> =
				    call 'erlang':'=<'
					(H, 57)
				in  call 'erlang':'and'
					(_cor12, _cor13)
			in  let <_cor15> =
				call 'erlang':'or'
				    (_cor11, _cor14)
			    in  call 'erlang':'or'
				    (_cor8, _cor15) ->
	      %% Line 430
	      apply 'scan_query'/2
		  (C0, [H|Acc])
	  %% Line 431
	  <[H|C0],Acc>
	      when let <_cor16> =
		    call 'erlang':'=='
			(H, 59)
		in  let <_cor17> =
			call 'erlang':'=='
			    (H, 47)
		    in  let <_cor18> =
			    call 'erlang':'=='
				(H, 63)
			in  let <_cor19> =
				call 'erlang':'=='
				    (H, 58)
			    in  let <_cor20> =
				    call 'erlang':'=='
					(H, 64)
				in  let <_cor21> =
					call 'erlang':'=='
					    (H, 91)
				    in  let <_cor22> =
					    call 'erlang':'=='
						(H, 93)
					in  let <_cor23> =
						%% Line 432
						call 'erlang':'=='
						    (H, 38)
					    in  let <_cor24> =
						    %% Line 432
						    call 'erlang':'=='
							(H, 61)
						in  let <_cor25> =
							%% Line 432
							call 'erlang':'=='
							    (H, 43)
						    in  let <_cor26> =
							    %% Line 432
							    call 'erlang':'=='
								(H, 36)
							in  let <_cor27> =
								%% Line 432
								call 'erlang':'=='
								    (H, 44)
							    in  let <_cor28> =
								    %% Line 432
								    call 'erlang':'or'
									(_cor26, _cor27)
								in  let <_cor29> =
									%% Line 432
									call 'erlang':'or'
									    (_cor25, _cor28)
								    in  let <_cor30> =
									    %% Line 432
									    call 'erlang':'or'
										(_cor24, _cor29)
									in  let <_cor31> =
										%% Line 432
										call 'erlang':'or'
										    (_cor23, _cor30)
									    in  let <_cor32> =
										    call 'erlang':'or'
											(_cor22, _cor31)
										in  let <_cor33> =
											call 'erlang':'or'
											    (_cor21, _cor32)
										    in  let <_cor34> =
											    call 'erlang':'or'
												(_cor20, _cor33)
											in  let <_cor35> =
												call 'erlang':'or'
												    (_cor19, _cor34)
											    in  let <_cor36> =
												    call 'erlang':'or'
													(_cor18, _cor35)
												in  let <_cor37> =
													call 'erlang':'or'
													    (_cor17, _cor36)
												    in  call 'erlang':'or'
													    (_cor16, _cor37) ->
	      %% Line 433
	      apply 'scan_query'/2
		  (C0, [H|Acc])
	  %% Line 434
	  <[H|C0],Acc>
	      when let <_cor38> =
		    call 'erlang':'=='
			(H, 45)
		in  let <_cor39> =
			call 'erlang':'=='
			    (H, 95)
		    in  let <_cor40> =
			    call 'erlang':'=='
				(H, 46)
			in  let <_cor41> =
				call 'erlang':'=='
				    (H, 33)
			    in  let <_cor42> =
				    call 'erlang':'=='
					(H, 126)
				in  let <_cor43> =
					%% Line 435
					call 'erlang':'=='
					    (H, 42)
				    in  let <_cor44> =
					    %% Line 435
					    call 'erlang':'=='
						(H, 39)
					in  let <_cor45> =
						%% Line 435
						call 'erlang':'=='
						    (H, 40)
					    in  let <_cor46> =
						    %% Line 435
						    call 'erlang':'=='
							(H, 41)
						in  let <_cor47> =
							%% Line 435
							call 'erlang':'or'
							    (_cor45, _cor46)
						    in  let <_cor48> =
							    %% Line 435
							    call 'erlang':'or'
								(_cor44, _cor47)
							in  let <_cor49> =
								%% Line 435
								call 'erlang':'or'
								    (_cor43, _cor48)
							    in  let <_cor50> =
								    call 'erlang':'or'
									(_cor42, _cor49)
								in  let <_cor51> =
									call 'erlang':'or'
									    (_cor41, _cor50)
								    in  let <_cor52> =
									    call 'erlang':'or'
										(_cor40, _cor51)
									in  let <_cor53> =
										call 'erlang':'or'
										    (_cor39, _cor52)
									    in  call 'erlang':'or'
										    (_cor38, _cor53) ->
	      %% Line 436
	      apply 'scan_query'/2
		  (C0, [H|Acc])
	  %% Line 437
	  <[H|C0],Acc>
	      when let <_cor54> =
		    call 'erlang':'=<'
			(0, H)
		in  let <_cor55> =
			call 'erlang':'=<'
			    (H, 127)
		    in  call 'erlang':'and'
			    (_cor54, _cor55) ->
	      %% Line 438
	      case apply 'dec2hex'/1
		       (H) of
		<{H1,H2}> when 'true' ->
		    %% Line 439
		    apply 'scan_query'/2
			(C0, [H2|[H1|[37|Acc]]])
		( <_cor56> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor56})
		  -| ['compiler_generated'] )
	      end
	  %% Line 440
	  <[_X_H|_X_C0],_X_Acc> when 'true' ->
	      %% Line 441
	      {'error','no_query'}
	  ( <_cor58,_cor57> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor58,_cor57})
		  -| [{'function_name',{'scan_query',2}}] )
	    -| ['compiler_generated'] )
	end
'scan_pchars'/2 =
    %% Line 446
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],Acc> when 'true' ->
	      %% Line 447
	      {[],Acc}
	  %% Line 448
	  <[37|[H1|[H2|C0]]],Acc> when 'true' ->
	      let <_cor3> =
		  %% Line 449
		  apply 'hex2dec'/1
		      (H1)
	      in  let <_cor4> =
		      %% Line 449
		      call 'erlang':'*'
			  (_cor3, 16)
		  in  let <_cor2> =
			  %% Line 449
			  apply 'hex2dec'/1
			      (H2)
		      in  let <_cor5> =
			      %% Line 449
			      call 'erlang':'+'
				  (_cor4, _cor2)
			  in  %% Line 449
			      apply 'scan_pchars'/2
				  ([_cor5|C0], Acc)
	  %% Line 450
	  <[H|C0],Acc>
	      when let <_cor8> =
		    let <_cor6> =
			call 'erlang':'=<'
			    (97, H)
		    in  let <_cor7> =
			    call 'erlang':'=<'
				(H, 122)
			in  call 'erlang':'and'
				(_cor6, _cor7)
		in  let <_cor11> =
			let <_cor9> =
			    call 'erlang':'=<'
				(65, H)
			in  let <_cor10> =
				call 'erlang':'=<'
				    (H, 90)
			    in  call 'erlang':'and'
				    (_cor9, _cor10)
		    in  let <_cor14> =
			    let <_cor12> =
				call 'erlang':'=<'
				    (48, H)
			    in  let <_cor13> =
				    call 'erlang':'=<'
					(H, 57)
				in  call 'erlang':'and'
					(_cor12, _cor13)
			in  let <_cor15> =
				call 'erlang':'or'
				    (_cor11, _cor14)
			    in  call 'erlang':'or'
				    (_cor8, _cor15) ->
	      %% Line 451
	      apply 'scan_pchars'/2
		  (C0, [H|Acc])
	  %% Line 452
	  <[H|C0],Acc>
	      when let <_cor16> =
		    call 'erlang':'=='
			(H, 45)
		in  let <_cor17> =
			call 'erlang':'=='
			    (H, 95)
		    in  let <_cor18> =
			    call 'erlang':'=='
				(H, 46)
			in  let <_cor19> =
				call 'erlang':'=='
				    (H, 33)
			    in  let <_cor20> =
				    call 'erlang':'=='
					(H, 126)
				in  let <_cor21> =
					%% Line 453
					call 'erlang':'=='
					    (H, 42)
				    in  let <_cor22> =
					    %% Line 453
					    call 'erlang':'=='
						(H, 39)
					in  let <_cor23> =
						%% Line 453
						call 'erlang':'=='
						    (H, 40)
					    in  let <_cor24> =
						    %% Line 453
						    call 'erlang':'=='
							(H, 41)
						in  let <_cor25> =
							%% Line 453
							call 'erlang':'or'
							    (_cor23, _cor24)
						    in  let <_cor26> =
							    %% Line 453
							    call 'erlang':'or'
								(_cor22, _cor25)
							in  let <_cor27> =
								%% Line 453
								call 'erlang':'or'
								    (_cor21, _cor26)
							    in  let <_cor28> =
								    call 'erlang':'or'
									(_cor20, _cor27)
								in  let <_cor29> =
									call 'erlang':'or'
									    (_cor19, _cor28)
								    in  let <_cor30> =
									    call 'erlang':'or'
										(_cor18, _cor29)
									in  let <_cor31> =
										call 'erlang':'or'
										    (_cor17, _cor30)
									    in  call 'erlang':'or'
										    (_cor16, _cor31) ->
	      %% Line 454
	      apply 'scan_pchars'/2
		  (C0, [H|Acc])
	  %% Line 455
	  <[H|C0],Acc>
	      when let <_cor32> =
		    call 'erlang':'=='
			(H, 58)
		in  let <_cor33> =
			call 'erlang':'=='
			    (H, 64)
		    in  let <_cor34> =
			    call 'erlang':'=='
				(H, 38)
			in  let <_cor35> =
				call 'erlang':'=='
				    (H, 61)
			    in  let <_cor36> =
				    call 'erlang':'=='
					(H, 43)
				in  let <_cor37> =
					call 'erlang':'=='
					    (H, 36)
				    in  let <_cor38> =
					    call 'erlang':'=='
						(H, 44)
					in  let <_cor39> =
						call 'erlang':'or'
						    (_cor37, _cor38)
					    in  let <_cor40> =
						    call 'erlang':'or'
							(_cor36, _cor39)
						in  let <_cor41> =
							call 'erlang':'or'
							    (_cor35, _cor40)
						    in  let <_cor42> =
							    call 'erlang':'or'
								(_cor34, _cor41)
							in  let <_cor43> =
								call 'erlang':'or'
								    (_cor33, _cor42)
							    in  call 'erlang':'or'
								    (_cor32, _cor43) ->
	      %% Line 456
	      apply 'scan_pchars'/2
		  (C0, [H|Acc])
	  %% Line 457
	  <[H|C0],Acc>
	      when try
		    let <_cor44> =
			call 'erlang':'=<'
			    (0, H)
		    in  let <_cor45> =
			    call 'erlang':'=<'
				(H, 127)
			in  let <_cor46> =
				%% Line 458
				call 'erlang':'=/='
				    (H, 63)
			    in  let <_cor47> =
				    %% Line 458
				    call 'erlang':'=/='
					(H, 59)
				in  let <_cor48> =
					%% Line 458
					call 'erlang':'=/='
					    (H, 47)
				    in  let <_cor49> =
					    %% Line 458
					    call 'erlang':'=/='
						(H, 35)
					in  let <_cor50> =
						call 'erlang':'and'
						    (_cor48, _cor49)
					    in  let <_cor51> =
						    call 'erlang':'and'
							(_cor47, _cor50)
						in  let <_cor52> =
							call 'erlang':'and'
							    (_cor46, _cor51)
						    in  let <_cor53> =
							    call 'erlang':'and'
								(_cor45, _cor52)
							in  call 'erlang':'and'
								(_cor44, _cor53)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 459
	      case apply 'dec2hex'/1
		       (H) of
		<{H1,H2}> when 'true' ->
		    %% Line 460
		    apply 'scan_pchars'/2
			(C0, [H2|[H1|[37|Acc]]])
		( <_cor54> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor54})
		  -| ['compiler_generated'] )
	      end
	  %% Line 461
	  <C0,Acc> when 'true' ->
	      %% Line 462
	      {C0,Acc}
	end
'hex2dec'/1 =
    %% Line 464
    fun (_cor0) ->
	case _cor0 of
	  <X>
	      when let <_cor1> =
		    call 'erlang':'>='
			(_cor0, 48)
		in  let <_cor2> =
			call 'erlang':'=<'
			    (_cor0, 57)
		    in  call 'erlang':'and'
			    (_cor1, _cor2) ->
	      call 'erlang':'-'
		  (X, 48)
	  %% Line 465
	  <X>
	      when let <_cor3> =
		    call 'erlang':'>='
			(_cor0, 65)
		in  let <_cor4> =
			call 'erlang':'=<'
			    (_cor0, 70)
		    in  call 'erlang':'and'
			    (_cor3, _cor4) ->
	      let <_cor5> =
		  call 'erlang':'-'
		      (X, 65)
	      in  call 'erlang':'+'
		      (_cor5, 10)
	  %% Line 466
	  <X>
	      when let <_cor6> =
		    call 'erlang':'>='
			(_cor0, 97)
		in  let <_cor7> =
			call 'erlang':'=<'
			    (_cor0, 102)
		    in  call 'erlang':'and'
			    (_cor6, _cor7) ->
	      let <_cor8> =
		  call 'erlang':'-'
		      (X, 97)
	      in  call 'erlang':'+'
		      (_cor8, 10)
	  ( <_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9})
		  -| [{'function_name',{'hex2dec',1}}] )
	    -| ['compiler_generated'] )
	end
'dec2hex'/1 =
    %% Line 468
    fun (_cor0) ->
	case _cor0 of
	  <H>
	      when call 'erlang':'<'
		    (_cor0,
		     256) ->
	      %% Line 469
	      case #{#<H>(8,1,'integer',['unsigned'|['big']])}# of
		<#{#<H1>(4,1,'integer',['unsigned'|['big']]),
		   #<H2>(4,1,'integer',['unsigned'|['big']])}#> when 'true' ->
		    let <_cor3> =
			%% Line 470
			apply 'nibble2hex'/1
			    (H1)
		    in  let <_cor2> =
			    %% Line 470
			    apply 'nibble2hex'/1
				(H2)
			in  %% Line 470
			    {_cor3,_cor2}
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'dec2hex',1}}] )
	    -| ['compiler_generated'] )
	end
'nibble2hex'/1 =
    %% Line 472
    fun (_cor0) ->
	case _cor0 of
	  <X>
	      when let <_cor1> =
		    call 'erlang':'=<'
			(0, _cor0)
		in  let <_cor2> =
			call 'erlang':'=<'
			    (_cor0, 9)
		    in  call 'erlang':'and'
			    (_cor1, _cor2) ->
	      call 'erlang':'+'
		  (X, 48)
	  %% Line 473
	  <10> when 'true' ->
	      97
	  %% Line 474
	  <11> when 'true' ->
	      98
	  %% Line 475
	  <12> when 'true' ->
	      99
	  %% Line 476
	  <13> when 'true' ->
	      100
	  %% Line 477
	  <14> when 'true' ->
	      101
	  %% Line 478
	  <15> when 'true' ->
	      102
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'nibble2hex',1}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('xmerl_uri')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('xmerl_uri', _cor0)
end