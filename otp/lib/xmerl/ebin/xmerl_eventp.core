module 'xmerl_eventp' ['file_sax'/4,
		       'module_info'/0,
		       'module_info'/1,
		       'stream'/2,
		       'stream_sax'/4,
		       'string_sax'/4]
    attributes [%% Line 28
		'vsn' =
		    %% Line 28
		    ['0.19'],
		%% Line 29
		'date' =
		    %% Line 29
		    ['03-09-17'],
		%% Line 37
		'type' =
		    %% Line 37
		    [{{'record','xmlDecl'},[{'record_field',38,{'atom',38,'vsn'}}|[{'record_field',39,{'atom',39,'encoding'}}|[{'record_field',40,{'atom',40,'standalone'}}|[{'record_field',41,{'atom',41,'attributes'}}]]]],[]}],
		%% Line 45
		'type' =
		    %% Line 45
		    [{{'record','xmlAttribute'},[{'record_field',46,{'atom',46,'name'}}|[{'record_field',47,{'atom',47,'expanded_name'},{'nil',47}}|[{'record_field',48,{'atom',48,'nsinfo'},{'nil',48}}|[{'record_field',49,{'atom',49,'namespace'},{'nil',49}}|[{'record_field',50,{'atom',50,'parents'},{'nil',50}}|[{'record_field',51,{'atom',51,'pos'}}|[{'record_field',52,{'atom',52,'language'},{'nil',52}}|[{'record_field',53,{'atom',53,'value'}}|[{'record_field',54,{'atom',54,'normalized'}}]]]]]]]]],[]}],
		%% Line 58
		'type' =
		    %% Line 58
		    [{{'record','xmlNamespace'},[{'record_field',59,{'atom',59,'default'},{'nil',59}}|[{'record_field',60,{'atom',60,'nodes'},{'nil',60}}]],[]}],
		%% Line 64
		'type' =
		    %% Line 64
		    [{{'record','xmlNsNode'},[{'record_field',65,{'atom',65,'parents'},{'nil',65}}|[{'record_field',66,{'atom',66,'pos'}}|[{'record_field',67,{'atom',67,'prefix'}}|[{'record_field',68,{'atom',68,'uri'},{'nil',68}}]]]],[]}],
		%% Line 73
		'type' =
		    %% Line 73
		    [{{'record','xmlElement'},[{'record_field',74,{'atom',74,'name'}}|[{'record_field',75,{'atom',75,'expanded_name'},{'nil',75}}|[{'record_field',76,{'atom',76,'nsinfo'},{'nil',76}}|[{'record_field',77,{'atom',77,'namespace'},{'record',77,'xmlNamespace',[]}}|[{'record_field',78,{'atom',78,'parents'},{'nil',78}}|[{'record_field',79,{'atom',79,'pos'}}|[{'record_field',80,{'atom',80,'attributes'},{'nil',80}}|[{'record_field',81,{'atom',81,'content'},{'nil',81}}|[{'record_field',82,{'atom',82,'language'},{'string',82,[]}}|[{'record_field',83,{'atom',83,'xmlbase'},{'string',83,[]}}|[{'record_field',84,{'atom',84,'elementdef'},{'atom',84,'undeclared'}}]]]]]]]]]]],[]}],
		%% Line 89
		'type' =
		    %% Line 89
		    [{{'record','xmlText'},[{'record_field',90,{'atom',90,'parents'},{'nil',90}}|[{'record_field',91,{'atom',91,'pos'}}|[{'record_field',92,{'atom',92,'language'},{'nil',92}}|[{'record_field',93,{'atom',93,'value'}}|[{'record_field',94,{'atom',94,'type'},{'atom',94,'text'}}]]]]],[]}],
		%% Line 98
		'type' =
		    %% Line 98
		    [{{'record','xmlComment'},[{'record_field',99,{'atom',99,'parents'},{'nil',99}}|[{'record_field',100,{'atom',100,'pos'}}|[{'record_field',101,{'atom',101,'language'},{'nil',101}}|[{'record_field',102,{'atom',102,'value'}}]]]],[]}],
		%% Line 106
		'type' =
		    %% Line 106
		    [{{'record','xmlPI'},[{'record_field',107,{'atom',107,'name'}}|[{'record_field',108,{'atom',108,'parents'},{'nil',108}}|[{'record_field',109,{'atom',109,'pos'}}|[{'record_field',110,{'atom',110,'value'}}]]]],[]}],
		%% Line 113
		'type' =
		    %% Line 113
		    [{{'record','xmlDocument'},[{'record_field',114,{'atom',114,'content'}}],[]}],
		%% Line 120
		'type' =
		    %% Line 120
		    [{{'record','xmlContext'},[{'record_field',121,{'atom',121,'axis_type'},{'atom',121,'forward'}}|[{'record_field',122,{'atom',122,'context_node'}}|[{'record_field',123,{'atom',123,'context_position'},{'integer',123,1}}|[{'record_field',124,{'atom',124,'nodeset'},{'nil',124}}|[{'record_field',125,{'atom',125,'bindings'},{'nil',125}}|[{'record_field',126,{'atom',126,'functions'},{'nil',126}}|[{'record_field',127,{'atom',127,'namespace'},{'nil',127}}|[{'record_field',128,{'atom',128,'whole_document'}}]]]]]]]],[]}],
		%% Line 131
		'type' =
		    %% Line 131
		    [{{'record','xmlNode'},[{'record_field',132,{'atom',132,'type'},{'atom',132,'element'}}|[{'record_field',133,{'atom',133,'node'}}|[{'record_field',134,{'atom',134,'parents'},{'nil',134}}|[{'record_field',135,{'atom',135,'pos'},{'integer',135,1}}]]]],[]}],
		%% Line 138
		'type' =
		    %% Line 138
		    [{{'record','xmlObj'},[{'record_field',139,{'atom',139,'type'}}|[{'record_field',140,{'atom',140,'value'}}]],[]}],
		%% Line 143
		'type' =
		    %% Line 143
		    [{{'record','xmerl_fun_states'},[{'record_field',143,{'atom',143,'event'}}|[{'record_field',144,{'atom',144,'hook'}}|[{'record_field',145,{'atom',145,'rules'}}|[{'record_field',146,{'atom',146,'fetch'}}|[{'record_field',147,{'atom',147,'cont'}}]]]]],[]}],
		%% Line 151
		'type' =
		    %% Line 151
		    [{{'record','xmerl_scanner'},[{'record_field',152,{'atom',152,'encoding'},{'atom',152,'undefined'}}|[{'record_field',153,{'atom',153,'standalone'},{'atom',153,'no'}}|[{'record_field',155,{'atom',155,'environment'},{'atom',155,'prolog'}}|[{'record_field',156,{'atom',156,'declarations'},{'nil',156}}|[{'record_field',157,{'atom',157,'doctype_name'}}|[{'record_field',158,{'atom',158,'doctype_DTD'},{'atom',158,'internal'}}|[{'record_field',159,{'atom',159,'comments'},{'atom',159,'true'}}|[{'record_field',160,{'atom',160,'document'},{'atom',160,'false'}}|[{'record_field',161,{'atom',161,'default_attrs'},{'atom',161,'false'}}|[{'record_field',162,{'atom',162,'rules'}}|[{'record_field',163,{'atom',163,'keep_rules'},{'atom',163,'false'}}|[{'record_field',164,{'atom',164,'namespace_conformant'},{'atom',164,'false'}}|[{'record_field',165,{'atom',165,'xmlbase'}}|[{'record_field',166,{'atom',166,'xmlbase_cache'}}|[{'record_field',167,{'atom',167,'fetch_path'},{'nil',167}}|[{'record_field',169,{'atom',169,'filename'},{'atom',169,'file_name_unknown'}}|[{'record_field',170,{'atom',170,'validation'},{'atom',170,'off'}}|[{'record_field',171,{'atom',171,'schemaLocation'},{'nil',171}}|[{'record_field',172,{'atom',172,'space'},{'atom',172,'preserve'}}|[{'record_field',173,{'atom',173,'event_fun'}}|[{'record_field',174,{'atom',174,'hook_fun'}}|[{'record_field',175,{'atom',175,'acc_fun'}}|[{'record_field',176,{'atom',176,'fetch_fun'}}|[{'record_field',177,{'atom',177,'close_fun'}}|[{'record_field',178,{'atom',178,'continuation_fun'}}|[{'record_field',179,{'atom',179,'rules_read_fun'}}|[{'record_field',180,{'atom',180,'rules_write_fun'}}|[{'record_field',181,{'atom',181,'rules_delete_fun'}}|[{'record_field',182,{'atom',182,'user_state'}}|[{'record_field',183,{'atom',183,'fun_states'},{'record',183,'xmerl_fun_states',[]}}|[{'record_field',184,{'atom',184,'entity_references'},{'nil',184}}|[{'record_field',185,{'atom',185,'text_decl'},{'atom',185,'false'}}|[{'record_field',186,{'atom',186,'quiet'},{'atom',186,'false'}}|[{'record_field',187,{'atom',187,'col'},{'integer',187,1}}|[{'record_field',188,{'atom',188,'line'},{'integer',188,1}}|[{'record_field',189,{'atom',189,'common_data'},{'nil',189}}]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[]}],
		%% Line 198
		'type' =
		    %% Line 198
		    [{{'record','xmerl_event'},[{'record_field',199,{'atom',199,'event'}}|[{'record_field',200,{'atom',200,'line'}}|[{'record_field',201,{'atom',201,'col'}}|[{'record_field',202,{'atom',202,'pos'}}|[{'record_field',203,{'atom',203,'data'}}]]]]],[]}],
		%% Line 24
		'type' =
		    %% Line 24
		    [{{'record','file_info'},[{'typed_record_field',{'record_field',25,{'atom',25,'size'}},{'type',25,'union',[{'atom',25,'undefined'}|[{'type',25,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',26,{'atom',26,'type'}},{'type',26,'union',[{'atom',26,'undefined'}|[{'atom',26,'device'}|[{'atom',26,'directory'}|[{'atom',26,'other'}|[{'atom',26,'regular'}|[{'atom',26,'symlink'}]]]]]]}}|[{'typed_record_field',{'record_field',27,{'atom',27,'access'}},{'type',27,'union',[{'atom',27,'undefined'}|[{'atom',27,'read'}|[{'atom',27,'write'}|[{'atom',27,'read_write'}|[{'atom',27,'none'}]]]]]}}|[{'typed_record_field',{'record_field',28,{'atom',28,'atime'}},{'type',28,'union',[{'atom',28,'undefined'}|[{'remote_type',28,[{'atom',28,'file'}|[{'atom',28,'date_time'}|[[]]]]}|[{'type',28,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',32,{'atom',32,'mtime'}},{'type',32,'union',[{'atom',32,'undefined'}|[{'remote_type',32,[{'atom',32,'file'}|[{'atom',32,'date_time'}|[[]]]]}|[{'type',32,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',34,{'atom',34,'ctime'}},{'type',34,'union',[{'atom',34,'undefined'}|[{'remote_type',34,[{'atom',34,'file'}|[{'atom',34,'date_time'}|[[]]]]}|[{'type',34,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',40,{'atom',40,'mode'}},{'type',40,'union',[{'atom',40,'undefined'}|[{'type',40,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',43,{'atom',43,'links'}},{'type',43,'union',[{'atom',43,'undefined'}|[{'type',43,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',46,{'atom',46,'major_device'}},{'type',46,'union',[{'atom',46,'undefined'}|[{'type',46,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',52,{'atom',52,'minor_device'}},{'type',52,'union',[{'atom',52,'undefined'}|[{'type',52,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',53,{'atom',53,'inode'}},{'type',53,'union',[{'atom',53,'undefined'}|[{'type',53,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',54,{'atom',54,'uid'}},{'type',54,'union',[{'atom',54,'undefined'}|[{'type',54,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',55,{'atom',55,'gid'}},{'type',55,'union',[{'atom',55,'undefined'}|[{'type',55,'non_neg_integer',[]}]]}}]]]]]]]]]]]]],[]}],
		%% Line 58
		'type' =
		    %% Line 58
		    [{{'record','file_descriptor'},[{'typed_record_field',{'record_field',59,{'atom',59,'module'}},{'type',59,'union',[{'atom',59,'undefined'}|[{'type',59,'module',[]}]]}}|[{'typed_record_field',{'record_field',60,{'atom',60,'data'}},{'type',60,'union',[{'atom',60,'undefined'}|[{'type',60,'term',[]}]]}}]],[]}]]
'stream'/2 =
    %% Line 47
    fun (_cor1,_cor0) ->
	let <AccF> =
	    %% Line 48
	    ( fun (_cor4,_cor3,_cor2) ->
		  apply 'acc'/3
		      (_cor4, _cor3, _cor2)
	      -| [{'id',{0,0,'-stream/2-fun-0-'}}] )
	in  %% Line 49
	    case call 'file':'open'
		     (_cor1, ['read'|['raw'|['binary']]]) of
	      %% Line 50
	      <{'ok',Fd}> when 'true' ->
		  let <ContS> =
		      %% Line 52
		      [{#{}#,_cor1,Fd}|[]]
		  in  let <Opts> =
			  %% Line 53
			  apply 'scanner_options'/2
			      (_cor0, %% Line 54
				      [{'continuation_fun',( 'cont'/3
							     -| [{'id',{0,0,'-stream/2-fun-1-'}}] ),ContS}|%% Line 55
													   [{'acc_fun',AccF}|%% Line 56
															     [{'fetch_fun',( 'fetch'/2
																	     -| [{'id',{0,0,'-stream/2-fun-2-'}}] )}|%% Line 57
																						     [{'rules',( 'rules_read'/3
																								 -| [{'id',{0,0,'-stream/2-fun-3-'}}] ),( 'rules_write'/4
																													  -| [{'id',{0,0,'-stream/2-fun-4-'}}] ),[]}|%% Line 58
																																		     [{'close_fun',( 'close'/1
																																				     -| [{'id',{0,0,'-stream/2-fun-5-'}}] )}|[]]]]]])
		      in  %% Line 59
			  call 'xmerl_scan':'string'
			      ([], Opts)
	      %% Line 60
	      <Error> when 'true' ->
		  %% Line 61
		  Error
	    end
'stream_sax'/4 =
    %% Line 77
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 78
	    call 'xmerl':'callbacks'
		(_cor2)
	in  let <US> = {_cor4,_cor1}
	    in  let <AccF> =
		    %% Line 79
		    ( fun (_cor8,_cor7,_cor6) ->
			  apply 'acc'/3
			      (_cor8, _cor7, _cor6)
		      -| [{'id',{0,0,'-stream_sax/4-fun-0-'}}] )
		in  let <HookF> =
			%% Line 81
			( fun (_cor18,_cor17) ->
			      %% Line 82
			      case call 'xmerl_scan':'user_state'
				       (_cor17) of
				<{CBs,Arg}> when 'true' ->
				    %% Line 84
				    case _cor18 of
				      %% Line 85
				      <{'xmlComment',_cor30,_cor31,_cor32,_cor33}> when 'true' ->
					  %% Line 86
					  {[],_cor17}
				      %% Line 87
				      <_cor34> when 'true' ->
					  %% Line 89
					  case call 'xmerl':'export_element'
						   (_cor18, CBs, Arg) of
					    %% Line 90
					    <{'error',Reason}> when 'true' ->
						%% Line 91
						call 'erlang':'throw'
						    ({'error',Reason})
					    %% Line 92
					    <Resp> when 'true' ->
						let <_cor14> =
						    %% Line 94
						    call 'xmerl_scan':'user_state'
							({CBs,Resp}, _cor17)
						in  %% Line 94
						    {Resp,_cor14}
					  end
				    end
				( <_cor13> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor13})
				  -| ['compiler_generated'] )
			      end
			  -| [{'id',{0,0,'-stream_sax/4-fun-1-'}}] )
		    in  %% Line 98
			case call 'file':'open'
				 (_cor3, ['read'|['raw'|['binary']]]) of
			  %% Line 99
			  <{'ok',Fd}> when 'true' ->
			      let <ContS> =
				  %% Line 101
				  [{#{}#,_cor3,Fd}|[]]
			      in  let <Opts> =
				      %% Line 102
				      apply 'scanner_options'/2
					  (_cor0, %% Line 103
						  [{'acc_fun',AccF}|%% Line 104
								    [{'close_fun',( 'close'/1
										    -| [{'id',{0,0,'-stream_sax/4-fun-2-'}}] )}|%% Line 105
																[{'continuation_fun',( 'cont'/3
																		       -| [{'id',{0,0,'-stream_sax/4-fun-3-'}}] ),ContS}|%% Line 106
																									 [{'fetch_fun',( 'fetch'/2
																											 -| [{'id',{0,0,'-stream_sax/4-fun-4-'}}] )}|%% Line 107
																																     [{'hook_fun',HookF}|%% Line 108
																																			 [{'rules',( 'rules_read'/3
																																				     -| [{'id',{0,0,'-stream_sax/4-fun-5-'}}] ),( 'rules_write'/4
																																										  -| [{'id',{0,0,'-stream_sax/4-fun-6-'}}] ),[]}|%% Line 109
																																																 [{'user_state',US}|[]]]]]]]])
				  in  %% Line 110
				      call 'xmerl_scan':'string'
					  ([], Opts)
			  %% Line 111
			  <Error> when 'true' ->
			      %% Line 112
			      Error
			end
'file_sax'/4 =
    %% Line 123
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 124
	    call 'xmerl':'callbacks'
		(_cor2)
	in  let <US> = {_cor4,_cor1}
	    in  let <AccF> =
		    %% Line 125
		    ( fun (_cor8,_cor7,_cor6) ->
			  {[_cor8|_cor7],_cor6}
		      -| [{'id',{0,0,'-file_sax/4-fun-0-'}}] )
		in  let <HookF> =
			%% Line 127
			( fun (_cor18,_cor17) ->
			      %% Line 128
			      case call 'xmerl_scan':'user_state'
				       (_cor17) of
				<{CBs,Arg}> when 'true' ->
				    %% Line 129
				    case _cor18 of
				      %% Line 130
				      <{'xmlComment',_cor27,_cor28,_cor29,_cor30}> when 'true' ->
					  %% Line 131
					  {[],_cor17}
				      %% Line 132
				      <_cor31> when 'true' ->
					  %% Line 133
					  case call 'xmerl':'export_element'
						   (_cor18, CBs, Arg) of
					    %% Line 134
					    <{'error',Reason}> when 'true' ->
						%% Line 135
						call 'erlang':'throw'
						    ({'error',Reason})
					    %% Line 136
					    <Resp> when 'true' ->
						let <_cor14> =
						    %% Line 137
						    call 'xmerl_scan':'user_state'
							({CBs,Resp}, _cor17)
						in  %% Line 137
						    {Resp,_cor14}
					  end
				    end
				( <_cor13> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor13})
				  -| ['compiler_generated'] )
			      end
			  -| [{'id',{0,0,'-file_sax/4-fun-1-'}}] )
		    in  let <Opts> =
			    %% Line 142
			    apply 'scanner_options'/2
				(_cor0, [{'acc_fun',AccF}|%% Line 143
							  [{'hook_fun',HookF}|%% Line 144
									      [{'user_state',US}|[]]]])
			in  %% Line 145
			    call 'xmerl_scan':'file'
				(_cor3, Opts)
'string_sax'/4 =
    %% Line 156
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 157
	    call 'xmerl':'callbacks'
		(_cor2)
	in  let <US> = {_cor4,_cor1}
	    in  let <AccF> =
		    %% Line 158
		    ( fun (_cor8,_cor7,_cor6) ->
			  {[_cor8|_cor7],_cor6}
		      -| [{'id',{0,0,'-string_sax/4-fun-0-'}}] )
		in  let <HookF> =
			%% Line 160
			( fun (_cor18,_cor17) ->
			      %% Line 161
			      case call 'xmerl_scan':'user_state'
				       (_cor17) of
				<{CBs,Arg}> when 'true' ->
				    %% Line 162
				    case _cor18 of
				      %% Line 163
				      <{'xmlComment',_cor27,_cor28,_cor29,_cor30}> when 'true' ->
					  %% Line 164
					  {[],_cor17}
				      %% Line 165
				      <_cor31> when 'true' ->
					  %% Line 166
					  case call 'xmerl':'export_element'
						   (_cor18, CBs, Arg) of
					    %% Line 167
					    <{'error',Reason}> when 'true' ->
						%% Line 168
						call 'erlang':'throw'
						    ({'error',Reason})
					    %% Line 169
					    <Resp> when 'true' ->
						let <_cor14> =
						    %% Line 170
						    call 'xmerl_scan':'user_state'
							({CBs,Resp}, _cor17)
						in  %% Line 170
						    {Resp,_cor14}
					  end
				    end
				( <_cor13> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor13})
				  -| ['compiler_generated'] )
			      end
			  -| [{'id',{0,0,'-string_sax/4-fun-1-'}}] )
		    in  let <Opts> =
			    %% Line 175
			    apply 'scanner_options'/2
				(_cor0, [{'acc_fun',AccF}|%% Line 176
							  [{'hook_fun',HookF}|%% Line 177
									      [{'user_state',US}|[]]]])
			in  %% Line 178
			    call 'xmerl_scan':'string'
				(_cor3, Opts)
'cont'/3 =
    %% Line 186
    fun (_cor2,_cor1,_cor0) ->
	%% Line 187
	case call 'xmerl_scan':'cont_state'
		 (_cor0) of
	  %% Line 188
	  <[{_X_Fname,'eof'}|_cor7]> when 'true' ->
	      %% Line 189
	      apply _cor1
		  (_cor0)
	  %% Line 190
	  <[{Sofar,Fname,Fd}|T]> when 'true' ->
	      %% Line 191
	      apply 'cont2'/7
		  (_cor2, _cor1, Sofar, Fd, Fname, T, _cor0)
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor3})
	    -| ['compiler_generated'] )
	end
'cont2'/7 =
    %% Line 195
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor7> =
	    catch
		%% Line 196
		apply 'read_chunk'/3
		    (_cor3, _cor2, _cor4)
	in  %% Line 196
	    case _cor7 of
	      %% Line 197
	      <{'ok',Bin}> when 'true' ->
		  let <_cor8> =
		      %% Line 198
		      call 'erlang':'list_to_binary'
			  ([_cor4|[Bin|[]]])
		  in  %% Line 198
		      apply 'find_good_split'/7
			  (_cor8, _cor6, _cor5, _cor3, _cor2, _cor1, _cor0)
	      %% Line 200
	      <'eof'> when 'true' ->
		  do  %% Line 201
		      call 'file':'close'
			  (_cor3)
		      let <NewS> =
			  %% Line 202
			  call 'xmerl_scan':'cont_state'
			      ([{_cor2,'eof'}|_cor1], _cor0)
		      in  let <_cor10> =
			      %% Line 203
			      call 'erlang':'binary_to_list'
				  (_cor4)
			  in  %% Line 203
			      apply _cor6
				  (_cor10, NewS)
	      %% Line 204
	      <Error> when 'true' ->
		  %% Line 205
		  call 'erlang':'exit'
		      (Error)
	    end
'read_chunk'/3 =
    %% Line 208
    fun (_cor2,_cor1,_cor0) ->
	%% Line 209
	call 'file':'read'
	    (_cor2, 8192)
'find_good_split'/7 =
    %% Line 213
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor7> =
	    %% Line 214
	    call 'erlang':'size'
		(_cor6)
	in  let <_cor8> =
		%% Line 214
		call 'erlang':'-'
		    (_cor7, 1)
	    in  %% Line 214
		apply 'find_good_split'/8
		    (_cor8, _cor6, _cor5, _cor4, _cor3, _cor2, _cor1, _cor0)
'find_good_split'/8 =
    %% Line 216
    fun (_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <0,B,F,Exception,Fd,Fname,T,S> when 'true' ->
	      %% Line 217
	      apply 'cont2'/7
		  (F, Exception, B, Fd, Fname, T, S)
	  %% Line 218
	  <Size,B,F,Exception,Fd,Fname,T,S> when 'true' ->
	      %% Line 219
	      case B of
		%% Line 220
		<#{#<_X_Bytes>(Size,8,'binary',['unsigned'|['big']]),
		   #<H>(8,1,'integer',['unsigned'|['big']]),
		   #<Tail>('all',8,'binary',['unsigned'|['big']])}#>
		    when let <_cor8> =
			  call 'erlang':'=='
			      (H, 32)
		      in  let <_cor9> =
			      call 'erlang':'=='
				  (H, 13)
			  in  let <_cor10> =
				  call 'erlang':'=='
				      (H, 10)
			      in  let <_cor11> =
				      call 'erlang':'=='
					  (H, 9)
				  in  let <_cor12> =
					  call 'erlang':'or'
					      (_cor10, _cor11)
				      in  let <_cor13> =
					      call 'erlang':'or'
						  (_cor9, _cor12)
					  in  call 'erlang':'or'
						  (_cor8, _cor13) ->
		    let <_cor14> =
			%% Line 221
			call 'erlang':'+'
			    (Size, 1)
		    in  %% Line 221
			case call 'erlang':'split_binary'
				 (B, _cor14) of
			  <{SubB,_cor28}> when 'true' ->
			      let <NewS> =
				  %% Line 222
				  call 'xmerl_scan':'cont_state'
				      ([{Tail,Fname,Fd}|T], S)
			      in  let <_cor17> =
				      %% Line 223
				      call 'erlang':'binary_to_list'
					  (SubB)
				  in  %% Line 223
				      apply F
					  (_cor17, NewS)
			  ( <_cor15> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor15})
			    -| ['compiler_generated'] )
			end
		%% Line 224
		<_cor29> when 'true' ->
		    let <_cor18> =
			%% Line 225
			call 'erlang':'-'
			    (Size, 1)
		    in  %% Line 225
			apply 'find_good_split'/8
			    (_cor18, B, F, Exception, Fd, Fname, T, S)
	      end
	end
'acc'/3 =
    %% Line 250
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <X = {'xmlText',_cor11,_cor12,_cor13,Text,_cor14},Acc,S> when 'true' ->
	      %% Line 251
	      case apply 'detect_nul_text'/1
		       (Text) of
		%% Line 252
		<'ok'> when 'true' ->
		    let <_rec0> =
			%% Line 253
			call 'lists':'flatten'
			    (Text)
		    in  let <_cor6> =
			    %% Line 253
			    call 'erlang':'setelement'
				(5, X, _rec0)
			in  %% Line 253
			    {[_cor6|Acc],S}
		%% Line 254
		<'nok'> when 'true' ->
		    %% Line 255
		    {Acc,S}
		( <_cor7> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor7})
		  -| ['compiler_generated'] )
	      end
	  %% Line 257
	  <X,Acc,S> when 'true' ->
	      %% Line 258
	      {[X|Acc],S}
	end
'detect_nul_text'/1 =
    %% Line 261
    fun (_cor0) ->
	case _cor0 of
	  <[H|T]>
	      when let <_cor1> =
		    call 'erlang':'=='
			(H, 10)
		in  let <_cor2> =
			call 'erlang':'=='
			    (H, 32)
		    in  let <_cor3> =
			    call 'erlang':'=='
				(H, 9)
			in  let <_cor4> =
				call 'erlang':'or'
				    (_cor2, _cor3)
			    in  call 'erlang':'or'
				    (_cor1, _cor4) ->
	      %% Line 262
	      apply 'detect_nul_text'/1
		  (T)
	  %% Line 263
	  <[]> when 'true' ->
	      %% Line 264
	      'nok'
	  %% Line 265
	  <_cor6> when 'true' ->
	      %% Line 266
	      'ok'
	end
'fetch'/2 =
    %% Line 271
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'system',URI},S> when 'true' ->
	      %% Line 272
	      apply 'fetch_URI'/2
		  (URI, S)
	  %% Line 273
	  <{'public',_X_PublicID,URI},S> when 'true' ->
	      %% Line 274
	      apply 'fetch_URI'/2
		  (URI, S)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'fetch',2}}] )
	    -| ['compiler_generated'] )
	end
'fetch_URI'/2 =
    %% Line 276
    fun (_cor1,_cor0) ->
	let <Split> =
	    %% Line 278
	    call 'filename':'split'
		(_cor1)
	in  let <Filename> =
		%% Line 279
		call 'lists':'last'
		    (Split)
	    in  let <_cor9> =
		    %% Line 281
		    case Split of
		      %% Line 282
		      <[[47]|[_cor20|_cor21]]> when 'true' ->
			  _cor1
		      %% Line 285
		      <[[102|[105|[108|[101|[58]]]]]|[Name|[]]]> when 'true' ->
			  %% Line 287
			  ( case _cor0 of
			      ( <( {'xmerl_scanner',_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_rec2,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56}
				   -| ['compiler_generated'] )> when 'true' ->
				    call 'filename':'join'
					(_rec2, Name)
				-| ['compiler_generated'] )
			      ( <_cor57> when 'true' ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {'badrecord','xmerl_scanner'}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
		      %% Line 288
		      <_cor58> when 'true' ->
			  %% Line 289
			  ( case _cor0 of
			      ( <( {'xmerl_scanner',_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,_cor69,_cor70,_rec3,_cor71,_cor72,_cor73,_cor74,_cor75,_cor76,_cor77,_cor78,_cor79,_cor80,_cor81,_cor82,_cor83,_cor84,_cor85,_cor86,_cor87,_cor88,_cor89,_cor90,_cor91,_cor92,_cor93}
				   -| ['compiler_generated'] )> when 'true' ->
				    call 'filename':'join'
					(_rec3, _cor1)
				-| ['compiler_generated'] )
			      ( <_cor94> when 'true' ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {'badrecord','xmerl_scanner'}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
		    end
		in  %% Line 291
		    ( case _cor0 of
			( <( {'xmerl_scanner',_cor95,_cor96,_cor97,_cor98,_cor99,_cor100,_cor101,_cor102,_cor103,_cor104,_cor105,_cor106,_cor107,_cor108,_rec4,_cor109,_cor110,_cor111,_cor112,_cor113,_cor114,_cor115,_cor116,_cor117,_cor118,_cor119,_cor120,_cor121,_cor122,_cor123,_cor124,_cor125,_cor126,_cor127,_cor128,_cor129}
			     -| ['compiler_generated'] )> when 'true' ->
			      let <File> =
				  apply 'path_locate'/3
				      (_rec4, Filename, _cor9)
			      in  %% Line 293
				  case call 'file':'open'
					   (File, ['read'|['raw'|['binary']]]) of
				    %% Line 294
				    <{'ok',Fd}> when 'true' ->
					let <ContS> =
					    %% Line 295
					    call 'xmerl_scan':'cont_state'
						(_cor0)
					in  let <NewS> =
						%% Line 296
						call 'xmerl_scan':'cont_state'
						    ([{#{}#,File,Fd}|ContS], _cor0)
					    in  %% Line 297
						{'ok',{'string',[]},NewS}
				    %% Line 298
				    <_X_Error> when 'true' ->
					%% Line 300
					{'ok','not_fetched',_cor0}
				  end
			  -| ['compiler_generated'] )
			( <_cor130> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','xmerl_scanner'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
'path_locate'/3 =
    %% Line 303
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[Dir|Dirs],FN,FullName> when 'true' ->
	      let <F> =
		  %% Line 304
		  call 'filename':'join'
		      (Dir, FN)
	      in  %% Line 305
		  case call 'file':'read_file_info'
			   (F) of
		    %% Line 306
		    <{'ok',{'file_info',_cor8,'regular',_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19}}> when 'true' ->
			%% Line 307
			F
		    %% Line 308
		    <_cor20> when 'true' ->
			%% Line 309
			apply 'path_locate'/3
			    (Dirs, FN, FullName)
		  end
	  %% Line 311
	  <[],_X_FN,FullName> when 'true' ->
	      %% Line 312
	      FullName
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'path_locate',3}}] )
	    -| ['compiler_generated'] )
	end
'close'/1 =
    %% Line 315
    fun (_cor0) ->
	%% Line 317
	case call 'xmerl_scan':'cont_state'
		 (_cor0) of
	  %% Line 318
	  <[{_X_Fname,'eof'}|T]> when 'true' ->
	      %% Line 319
	      call 'xmerl_scan':'cont_state'
		  (T, _cor0)
	  %% Line 320
	  <[{_X_Sofar,_X_Fname,Fd}|T]> when 'true' ->
	      do  %% Line 321
		  call 'file':'close'
		      (Fd)
		  %% Line 322
		  call 'xmerl_scan':'cont_state'
		      (T, _cor0)
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor2})
	    -| ['compiler_generated'] )
	end
'rules_write'/4 =
    %% Line 327
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Context,Name,Value,S = {'xmerl_scanner',_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,'undefined',_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46}> when 'true' ->
	      let <Tab> =
		  %% Line 328
		  call 'ets':'new'
		      ('rules', ['set'|['public']])
	      in  let <_cor7> =
		      %% Line 329
		      call 'erlang':'setelement'
			  (11, S, Tab)
		  in  %% Line 329
		      apply 'rules_write'/4
			  (Context, Name, Value, _cor7)
	  %% Line 330
	  <Context,Name,Value,S = {'xmerl_scanner',_cor84,_cor85,_cor86,_cor87,_cor88,_cor89,_cor90,_cor91,_cor92,T,_cor93,_cor94,_cor95,_cor96,_cor97,_cor98,_cor99,_cor100,_cor101,_cor102,_cor103,_cor104,_cor105,_cor106,_cor107,_cor108,_cor109,_cor110,_cor111,_cor112,_cor113,_cor114,_cor115,_cor116,_cor117,_cor118}> when 'true' ->
	      do  %% Line 331
		  call 'ets':'insert'
		      (T, {{Context,Name},Value})
		  %% Line 332
		  S
	  ( <_cor11,_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9,_cor8})
		  -| [{'function_name',{'rules_write',4}}] )
	    -| ['compiler_generated'] )
	end
'rules_read'/3 =
    %% Line 334
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <_X_Context,_X_Name,{'xmerl_scanner',_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,'undefined',_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41}> when 'true' ->
	      %% Line 335
	      'undefined'
	  %% Line 336
	  <Context,Name,{'xmerl_scanner',_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,T,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,_cor69,_cor70,_cor71,_cor72,_cor73,_cor74,_cor75,_cor76}> when 'true' ->
	      %% Line 337
	      case call 'ets':'lookup'
		       (T, {Context,Name}) of
		%% Line 338
		<[]> when 'true' ->
		    %% Line 339
		    'undefined'
		%% Line 340
		<[{_X_K,V}|[]]> when 'true' ->
		    %% Line 341
		    V
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'rules_read',3}}] )
	    -| ['compiler_generated'] )
	end
'scanner_options'/2 =
    %% Line 349
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[H|T],Opts> when 'true' ->
	      let <_cor2> =
		  catch
		      %% Line 350
		      apply 'keyreplace'/3
			  (H, 1, Opts)
	      in  %% Line 350
		  case _cor2 of
		    %% Line 351
		    <'false'> when 'true' ->
			%% Line 352
			apply 'scanner_options'/2
			    (T, [H|Opts])
		    %% Line 353
		    <NewOpts> when 'true' ->
			%% Line 354
			apply 'scanner_options'/2
			    (T, NewOpts)
		  end
	  %% Line 356
	  <[],Opts> when 'true' ->
	      %% Line 357
	      Opts
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'scanner_options',2}}] )
	    -| ['compiler_generated'] )
	end
'keyreplace'/3 =
    %% Line 359
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <X,Pos,[H|T]>
	      when try
		    let <_cor4> =
			call 'erlang':'element'
			    (Pos, X)
		    in  let <_cor3> =
			    call 'erlang':'element'
				(Pos, H)
			in  call 'erlang':'=='
				(_cor4, _cor3)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 360
	      [X|T]
	  %% Line 361
	  <X,Pos,[H|T]> when 'true' ->
	      let <_cor5> =
		  %% Line 362
		  apply 'keyreplace'/3
		      (X, Pos, T)
	      in  %% Line 362
		  [H|_cor5]
	  %% Line 363
	  <_cor9,_X_Pos,[]> when 'true' ->
	      %% Line 364
	      call 'erlang':'throw'
		  ('false')
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'keyreplace',3}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('xmerl_eventp')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('xmerl_eventp', _cor0)
end