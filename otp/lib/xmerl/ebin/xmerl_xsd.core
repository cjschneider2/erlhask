module 'xmerl_xsd' ['file2state'/1,
		    'format_error'/1,
		    'module_info'/0,
		    'module_info'/1,
		    'print_table'/1,
		    'process_schema'/1,
		    'process_schema'/2,
		    'process_schemas'/1,
		    'process_schemas'/2,
		    'process_validate'/2,
		    'process_validate'/3,
		    'state2file'/1,
		    'state2file'/2,
		    'validate'/2,
		    'validate'/3]
    attributes [%% Line 37
		'type' =
		    %% Line 37
		    [{{'record','xmlDecl'},[{'record_field',38,{'atom',38,'vsn'}}|[{'record_field',39,{'atom',39,'encoding'}}|[{'record_field',40,{'atom',40,'standalone'}}|[{'record_field',41,{'atom',41,'attributes'}}]]]],[]}],
		%% Line 45
		'type' =
		    %% Line 45
		    [{{'record','xmlAttribute'},[{'record_field',46,{'atom',46,'name'}}|[{'record_field',47,{'atom',47,'expanded_name'},{'nil',47}}|[{'record_field',48,{'atom',48,'nsinfo'},{'nil',48}}|[{'record_field',49,{'atom',49,'namespace'},{'nil',49}}|[{'record_field',50,{'atom',50,'parents'},{'nil',50}}|[{'record_field',51,{'atom',51,'pos'}}|[{'record_field',52,{'atom',52,'language'},{'nil',52}}|[{'record_field',53,{'atom',53,'value'}}|[{'record_field',54,{'atom',54,'normalized'}}]]]]]]]]],[]}],
		%% Line 58
		'type' =
		    %% Line 58
		    [{{'record','xmlNamespace'},[{'record_field',59,{'atom',59,'default'},{'nil',59}}|[{'record_field',60,{'atom',60,'nodes'},{'nil',60}}]],[]}],
		%% Line 64
		'type' =
		    %% Line 64
		    [{{'record','xmlNsNode'},[{'record_field',65,{'atom',65,'parents'},{'nil',65}}|[{'record_field',66,{'atom',66,'pos'}}|[{'record_field',67,{'atom',67,'prefix'}}|[{'record_field',68,{'atom',68,'uri'},{'nil',68}}]]]],[]}],
		%% Line 73
		'type' =
		    %% Line 73
		    [{{'record','xmlElement'},[{'record_field',74,{'atom',74,'name'}}|[{'record_field',75,{'atom',75,'expanded_name'},{'nil',75}}|[{'record_field',76,{'atom',76,'nsinfo'},{'nil',76}}|[{'record_field',77,{'atom',77,'namespace'},{'record',77,'xmlNamespace',[]}}|[{'record_field',78,{'atom',78,'parents'},{'nil',78}}|[{'record_field',79,{'atom',79,'pos'}}|[{'record_field',80,{'atom',80,'attributes'},{'nil',80}}|[{'record_field',81,{'atom',81,'content'},{'nil',81}}|[{'record_field',82,{'atom',82,'language'},{'string',82,[]}}|[{'record_field',83,{'atom',83,'xmlbase'},{'string',83,[]}}|[{'record_field',84,{'atom',84,'elementdef'},{'atom',84,'undeclared'}}]]]]]]]]]]],[]}],
		%% Line 89
		'type' =
		    %% Line 89
		    [{{'record','xmlText'},[{'record_field',90,{'atom',90,'parents'},{'nil',90}}|[{'record_field',91,{'atom',91,'pos'}}|[{'record_field',92,{'atom',92,'language'},{'nil',92}}|[{'record_field',93,{'atom',93,'value'}}|[{'record_field',94,{'atom',94,'type'},{'atom',94,'text'}}]]]]],[]}],
		%% Line 98
		'type' =
		    %% Line 98
		    [{{'record','xmlComment'},[{'record_field',99,{'atom',99,'parents'},{'nil',99}}|[{'record_field',100,{'atom',100,'pos'}}|[{'record_field',101,{'atom',101,'language'},{'nil',101}}|[{'record_field',102,{'atom',102,'value'}}]]]],[]}],
		%% Line 106
		'type' =
		    %% Line 106
		    [{{'record','xmlPI'},[{'record_field',107,{'atom',107,'name'}}|[{'record_field',108,{'atom',108,'parents'},{'nil',108}}|[{'record_field',109,{'atom',109,'pos'}}|[{'record_field',110,{'atom',110,'value'}}]]]],[]}],
		%% Line 113
		'type' =
		    %% Line 113
		    [{{'record','xmlDocument'},[{'record_field',114,{'atom',114,'content'}}],[]}],
		%% Line 120
		'type' =
		    %% Line 120
		    [{{'record','xmlContext'},[{'record_field',121,{'atom',121,'axis_type'},{'atom',121,'forward'}}|[{'record_field',122,{'atom',122,'context_node'}}|[{'record_field',123,{'atom',123,'context_position'},{'integer',123,1}}|[{'record_field',124,{'atom',124,'nodeset'},{'nil',124}}|[{'record_field',125,{'atom',125,'bindings'},{'nil',125}}|[{'record_field',126,{'atom',126,'functions'},{'nil',126}}|[{'record_field',127,{'atom',127,'namespace'},{'nil',127}}|[{'record_field',128,{'atom',128,'whole_document'}}]]]]]]]],[]}],
		%% Line 131
		'type' =
		    %% Line 131
		    [{{'record','xmlNode'},[{'record_field',132,{'atom',132,'type'},{'atom',132,'element'}}|[{'record_field',133,{'atom',133,'node'}}|[{'record_field',134,{'atom',134,'parents'},{'nil',134}}|[{'record_field',135,{'atom',135,'pos'},{'integer',135,1}}]]]],[]}],
		%% Line 138
		'type' =
		    %% Line 138
		    [{{'record','xmlObj'},[{'record_field',139,{'atom',139,'type'}}|[{'record_field',140,{'atom',140,'value'}}]],[]}],
		%% Line 143
		'type' =
		    %% Line 143
		    [{{'record','xmerl_fun_states'},[{'record_field',143,{'atom',143,'event'}}|[{'record_field',144,{'atom',144,'hook'}}|[{'record_field',145,{'atom',145,'rules'}}|[{'record_field',146,{'atom',146,'fetch'}}|[{'record_field',147,{'atom',147,'cont'}}]]]]],[]}],
		%% Line 151
		'type' =
		    %% Line 151
		    [{{'record','xmerl_scanner'},[{'record_field',152,{'atom',152,'encoding'},{'atom',152,'undefined'}}|[{'record_field',153,{'atom',153,'standalone'},{'atom',153,'no'}}|[{'record_field',155,{'atom',155,'environment'},{'atom',155,'prolog'}}|[{'record_field',156,{'atom',156,'declarations'},{'nil',156}}|[{'record_field',157,{'atom',157,'doctype_name'}}|[{'record_field',158,{'atom',158,'doctype_DTD'},{'atom',158,'internal'}}|[{'record_field',159,{'atom',159,'comments'},{'atom',159,'true'}}|[{'record_field',160,{'atom',160,'document'},{'atom',160,'false'}}|[{'record_field',161,{'atom',161,'default_attrs'},{'atom',161,'false'}}|[{'record_field',162,{'atom',162,'rules'}}|[{'record_field',163,{'atom',163,'keep_rules'},{'atom',163,'false'}}|[{'record_field',164,{'atom',164,'namespace_conformant'},{'atom',164,'false'}}|[{'record_field',165,{'atom',165,'xmlbase'}}|[{'record_field',166,{'atom',166,'xmlbase_cache'}}|[{'record_field',167,{'atom',167,'fetch_path'},{'nil',167}}|[{'record_field',169,{'atom',169,'filename'},{'atom',169,'file_name_unknown'}}|[{'record_field',170,{'atom',170,'validation'},{'atom',170,'off'}}|[{'record_field',171,{'atom',171,'schemaLocation'},{'nil',171}}|[{'record_field',172,{'atom',172,'space'},{'atom',172,'preserve'}}|[{'record_field',173,{'atom',173,'event_fun'}}|[{'record_field',174,{'atom',174,'hook_fun'}}|[{'record_field',175,{'atom',175,'acc_fun'}}|[{'record_field',176,{'atom',176,'fetch_fun'}}|[{'record_field',177,{'atom',177,'close_fun'}}|[{'record_field',178,{'atom',178,'continuation_fun'}}|[{'record_field',179,{'atom',179,'rules_read_fun'}}|[{'record_field',180,{'atom',180,'rules_write_fun'}}|[{'record_field',181,{'atom',181,'rules_delete_fun'}}|[{'record_field',182,{'atom',182,'user_state'}}|[{'record_field',183,{'atom',183,'fun_states'},{'record',183,'xmerl_fun_states',[]}}|[{'record_field',184,{'atom',184,'entity_references'},{'nil',184}}|[{'record_field',185,{'atom',185,'text_decl'},{'atom',185,'false'}}|[{'record_field',186,{'atom',186,'quiet'},{'atom',186,'false'}}|[{'record_field',187,{'atom',187,'col'},{'integer',187,1}}|[{'record_field',188,{'atom',188,'line'},{'integer',188,1}}|[{'record_field',189,{'atom',189,'common_data'},{'nil',189}}]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[]}],
		%% Line 198
		'type' =
		    %% Line 198
		    [{{'record','xmerl_event'},[{'record_field',199,{'atom',199,'event'}}|[{'record_field',200,{'atom',200,'line'}}|[{'record_field',201,{'atom',201,'col'}}|[{'record_field',202,{'atom',202,'pos'}}|[{'record_field',203,{'atom',203,'data'}}]]]]],[]}],
		%% Line 35
		'type' =
		    %% Line 35
		    [{{'record','xsd_state'},[{'record_field',36,{'atom',36,'schema_name'}}|[{'record_field',37,{'atom',37,'vsn'}}|[{'record_field',38,{'atom',38,'schema_preprocessed'},{'atom',38,'false'}}|[{'record_field',39,{'atom',39,'external_xsd_base'},{'atom',39,'false'}}|[{'record_field',40,{'atom',40,'xsd_base'}}|[{'record_field',41,{'atom',41,'xml_options'},{'nil',41}}|[{'record_field',42,{'atom',42,'scope'},{'nil',42}}|[{'record_field',43,{'atom',43,'schemaLocations'},{'nil',43}}|[{'record_field',44,{'atom',44,'elementFormDefault'},{'atom',44,'unqualified'}}|[{'record_field',45,{'atom',45,'attributeFormDefault'},{'atom',45,'unqualified'}}|[{'record_field',46,{'atom',46,'localElementsNamespace'}}|[{'record_field',47,{'atom',47,'targetNamespace'}}|[{'record_field',48,{'atom',48,'namespace_nodes'},{'cons',48,{'tuple',48,[{'string',48,[120|[109|[108]]]}|[{'atom',48,'http://www.w3.org/XML/1998/namespace'}]]},{'nil',48}}}|[{'record_field',49,{'atom',49,'global_namespace_nodes'},{'nil',49}}|[{'record_field',50,{'atom',50,'checked_namespace_nodes'},{'cons',50,{'tuple',50,[{'string',50,[120|[109|[108]]]}|[{'nil',50}|[{'atom',50,'http://www.w3.org/XML/1998/namespace'}]]]},{'nil',50}}}|[{'record_field',51,{'atom',51,'table'}}|[{'record_field',52,{'atom',52,'tab2file'},{'atom',52,'false'}}|[{'record_field',53,{'atom',53,'redefine'},{'atom',53,'false'}}|[{'record_field',54,{'atom',54,'finalDefault'}}|[{'record_field',57,{'atom',57,'blockDefault'}}|[{'record_field',58,{'atom',58,'fetch_fun'}}|[{'record_field',59,{'atom',59,'fetch_path'},{'nil',59}}|[{'record_field',60,{'atom',60,'num_el'},{'integer',60,0}}|[{'record_field',61,{'atom',61,'global_element_source'},{'nil',61}}|[{'record_field',62,{'atom',62,'keyrefs'},{'nil',62}}|[{'record_field',63,{'atom',63,'IDs'},{'nil',63}}|[{'record_field',64,{'atom',64,'substitutionGroups'},{'nil',64}}|[{'record_field',65,{'atom',65,'derived_types'},{'nil',65}}|[{'record_field',66,{'atom',66,'unchecked_references'},{'nil',66}}|[{'record_field',67,{'atom',67,'circularity_stack'},{'nil',67}}|[{'record_field',68,{'atom',68,'circularity_disallowed'},{'nil',68}}|[{'record_field',69,{'atom',69,'errors'},{'nil',69}}]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[]}],
		%% Line 71
		'type' =
		    %% Line 71
		    [{{'record','schema'},[{'record_field',72,{'atom',72,'elementFormDefault'}}|[{'record_field',73,{'atom',73,'attributeFormDefault'}}|[{'record_field',74,{'atom',74,'targetNamespace'}}|[{'record_field',75,{'atom',75,'blockDefault'},{'nil',75}}|[{'record_field',76,{'atom',76,'finalDefault'},{'nil',76}}|[{'record_field',77,{'atom',77,'id'}}|[{'record_field',78,{'atom',78,'content'},{'nil',78}}]]]]]]],[]}],
		%% Line 80
		'type' =
		    %% Line 80
		    [{{'record','schema_element'},[{'record_field',81,{'atom',81,'name'}}|[{'record_field',82,{'atom',82,'type'}}|[{'record_field',83,{'atom',83,'resolved'},{'atom',83,'false'}}|[{'record_field',84,{'atom',84,'substitutionGroup'}}|[{'record_field',85,{'atom',85,'uniqueness'}}|[{'record_field',86,{'atom',86,'key'}}|[{'record_field',87,{'atom',87,'scope'}}|[{'record_field',88,{'atom',88,'form'}}|[{'record_field',89,{'atom',89,'id'}}|[{'record_field',90,{'atom',90,'occurance'},{'tuple',90,[{'integer',90,1}|[{'integer',90,1}]]}}|[{'record_field',91,{'atom',91,'value_constraint'}}|[{'record_field',92,{'atom',92,'nillable'},{'atom',92,'false'}}|[{'record_field',93,{'atom',93,'abstract'},{'atom',93,'false'}}|[{'record_field',94,{'atom',94,'block'},{'nil',94}}|[{'record_field',95,{'atom',95,'final'},{'nil',95}}]]]]]]]]]]]]]]],[]}],
		%% Line 97
		'type' =
		    %% Line 97
		    [{{'record','schema_simple_type'},[{'record_field',98,{'atom',98,'name'}}|[{'record_field',99,{'atom',99,'scope'}}|[{'record_field',100,{'atom',100,'base_type'}}|[{'record_field',101,{'atom',101,'resolved'},{'atom',101,'false'}}|[{'record_field',102,{'atom',102,'final'},{'nil',102}}|[{'record_field',103,{'atom',103,'id'}}|[{'record_field',104,{'atom',104,'facets'},{'nil',104}}|[{'record_field',105,{'atom',105,'variety'},{'atom',105,'atomic'}}|[{'record_field',106,{'atom',106,'content'}}]]]]]]]]],[]}],
		%% Line 108
		'type' =
		    %% Line 108
		    [{{'record','schema_complex_type'},[{'record_field',109,{'atom',109,'name'}}|[{'record_field',110,{'atom',110,'base_type'}}|[{'record_field',111,{'atom',111,'resolved'},{'atom',111,'false'}}|[{'record_field',112,{'atom',112,'scope'}}|[{'record_field',113,{'atom',113,'derivation'}}|[{'record_field',114,{'atom',114,'final'},{'nil',114}}|[{'record_field',115,{'atom',115,'id'}}|[{'record_field',116,{'atom',116,'block'},{'nil',116}}|[{'record_field',118,{'atom',118,'abstract'},{'atom',118,'false'}}|[{'record_field',119,{'atom',119,'content_type'},{'atom',119,'element-only'}}|[{'record_field',120,{'atom',120,'complexity'}}|[{'record_field',121,{'atom',121,'attributes'},{'nil',121}}|[{'record_field',122,{'atom',122,'content'},{'nil',122}}|[{'record_field',123,{'atom',123,'prohibited'}}]]]]]]]]]]]]]],[]}],
		%% Line 125
		'type' =
		    %% Line 125
		    [{{'record','schema_attribute'},[{'record_field',126,{'atom',126,'name'}}|[{'record_field',127,{'atom',127,'type'}}|[{'record_field',128,{'atom',128,'resolved'},{'atom',128,'false'}}|[{'record_field',129,{'atom',129,'scope'}}|[{'record_field',131,{'atom',131,'use'},{'atom',131,'optional'}}|[{'record_field',132,{'atom',132,'default'}}|[{'record_field',133,{'atom',133,'fixed'}}|[{'record_field',134,{'atom',134,'form'}}|[{'record_field',135,{'atom',135,'id'}}]]]]]]]]],[]}],
		%% Line 137
		'type' =
		    %% Line 137
		    [{{'record','schema_attribute_group'},[{'record_field',138,{'atom',138,'name'}}|[{'record_field',139,{'atom',139,'id'}}|[{'record_field',140,{'atom',140,'ref'}}|[{'record_field',141,{'atom',141,'content'},{'nil',141}}]]]],[]}],
		%% Line 143
		'type' =
		    %% Line 143
		    [{{'record','schema_anyAttribute'},[{'record_field',144,{'atom',144,'id'}}|[{'record_field',145,{'atom',145,'processContents'},{'atom',145,'strict'}}|[{'record_field',146,{'atom',146,'namespace'}}|[{'record_field',147,{'atom',147,'scope'}}]]]],[]}],
		%% Line 149
		'type' =
		    %% Line 149
		    [{{'record','schema_group'},[{'record_field',150,{'atom',150,'name'}}|[{'record_field',151,{'atom',151,'id'}}|[{'record_field',152,{'atom',152,'ref'}}|[{'record_field',153,{'atom',153,'content'},{'nil',153}}|[{'record_field',154,{'atom',154,'occurance'},{'tuple',154,[{'integer',154,1}|[{'integer',154,1}]]}}]]]]],[]}],
		%% Line 156
		'type' =
		    %% Line 156
		    [{{'record','schema_extension'},[{'record_field',157,{'atom',157,'base'}}|[{'record_field',158,{'atom',158,'id'}}|[{'record_field',159,{'atom',159,'content'},{'nil',159}}]]],[]}],
		%% Line 161
		'type' =
		    %% Line 161
		    [{{'record','schema_restriction'},[{'record_field',162,{'atom',162,'base'}}|[{'record_field',163,{'atom',163,'id'}}|[{'record_field',164,{'atom',164,'content'},{'nil',164}}]]],[]}],
		%% Line 166
		'type' =
		    %% Line 166
		    [{{'record','schema_list'},[{'record_field',167,{'atom',167,'id'}}|[{'record_field',168,{'atom',168,'itemType'}}]],[]}],
		%% Line 170
		'type' =
		    %% Line 170
		    [{{'record','id_constraint'},[{'record_field',171,{'atom',171,'category'}}|[{'record_field',172,{'atom',172,'id'}}|[{'record_field',173,{'atom',173,'name'}}|[{'record_field',174,{'atom',174,'refer'}}|[{'record_field',175,{'atom',175,'type'}}|[{'record_field',177,{'atom',177,'selector'}}|[{'record_field',178,{'atom',178,'fields'}}|[{'record_field',179,{'atom',179,'key_sequence'}}]]]]]]]],[]}],
		%% Line 188
		'type' =
		    %% Line 188
		    [{{'record','chain'},[{'record_field',189,{'atom',189,'content'}}|[{'record_field',190,{'atom',190,'occurance'},{'tuple',190,[{'integer',190,1}|[{'integer',190,1}]]}}]],[]}],
		%% Line 192
		'type' =
		    %% Line 192
		    [{{'record','alternative'},[{'record_field',193,{'atom',193,'content'}}|[{'record_field',194,{'atom',194,'occurance'},{'tuple',194,[{'integer',194,0}|[{'integer',194,1}]]}}]],[]}],
		%% Line 24
		'type' =
		    %% Line 24
		    [{{'record','file_info'},[{'typed_record_field',{'record_field',25,{'atom',25,'size'}},{'type',25,'union',[{'atom',25,'undefined'}|[{'type',25,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',26,{'atom',26,'type'}},{'type',26,'union',[{'atom',26,'undefined'}|[{'atom',26,'device'}|[{'atom',26,'directory'}|[{'atom',26,'other'}|[{'atom',26,'regular'}|[{'atom',26,'symlink'}]]]]]]}}|[{'typed_record_field',{'record_field',27,{'atom',27,'access'}},{'type',27,'union',[{'atom',27,'undefined'}|[{'atom',27,'read'}|[{'atom',27,'write'}|[{'atom',27,'read_write'}|[{'atom',27,'none'}]]]]]}}|[{'typed_record_field',{'record_field',28,{'atom',28,'atime'}},{'type',28,'union',[{'atom',28,'undefined'}|[{'remote_type',28,[{'atom',28,'file'}|[{'atom',28,'date_time'}|[[]]]]}|[{'type',28,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',32,{'atom',32,'mtime'}},{'type',32,'union',[{'atom',32,'undefined'}|[{'remote_type',32,[{'atom',32,'file'}|[{'atom',32,'date_time'}|[[]]]]}|[{'type',32,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',34,{'atom',34,'ctime'}},{'type',34,'union',[{'atom',34,'undefined'}|[{'remote_type',34,[{'atom',34,'file'}|[{'atom',34,'date_time'}|[[]]]]}|[{'type',34,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',40,{'atom',40,'mode'}},{'type',40,'union',[{'atom',40,'undefined'}|[{'type',40,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',43,{'atom',43,'links'}},{'type',43,'union',[{'atom',43,'undefined'}|[{'type',43,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',46,{'atom',46,'major_device'}},{'type',46,'union',[{'atom',46,'undefined'}|[{'type',46,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',52,{'atom',52,'minor_device'}},{'type',52,'union',[{'atom',52,'undefined'}|[{'type',52,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',53,{'atom',53,'inode'}},{'type',53,'union',[{'atom',53,'undefined'}|[{'type',53,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',54,{'atom',54,'uid'}},{'type',54,'union',[{'atom',54,'undefined'}|[{'type',54,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',55,{'atom',55,'gid'}},{'type',55,'union',[{'atom',55,'undefined'}|[{'type',55,'non_neg_integer',[]}]]}}]]]]]]]]]]]]],[]}],
		%% Line 58
		'type' =
		    %% Line 58
		    [{{'record','file_descriptor'},[{'typed_record_field',{'record_field',59,{'atom',59,'module'}},{'type',59,'union',[{'atom',59,'undefined'}|[{'type',59,'module',[]}]]}}|[{'typed_record_field',{'record_field',60,{'atom',60,'data'}},{'type',60,'union',[{'atom',60,'undefined'}|[{'type',60,'term',[]}]]}}]],[]}]]
'validate'/2 =
    %% Line 96
    fun (_cor1,_cor0) ->
	%% Line 97
	apply 'validate'/3
	    (_cor1, _cor0, [])
'validate'/3 =
    %% Line 127
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Xml,State = {'xsd_state',_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41},Opts> when ( 'true'
																																		  -| ['compiler_generated'] ) ->
	      let <S2> =
		  %% Line 128
		  apply 'initiate_state2'/2
		      (State, Opts)
	      in  let <S3> =
		      %% Line 129
		      apply 'validation_options'/2
			  (S2, Opts)
		  in  %% Line 130
		      ( case S3 of
			  ( <( {'xsd_state',_rec0,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,_cor69,_cor70,_cor71,_cor72}
			       -| ['compiler_generated'] )> when 'true' ->
				apply 'validate3'/3
				    (_rec0, Xml, S3)
			    -| ['compiler_generated'] )
			  ( <_cor73> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','xsd_state'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
	  ( <_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7})
		  -| [{'function_name',{'validate',3}}] )
	    -| ['compiler_generated'] )
	end
'state2file'/1 =
    %% Line 137
    fun (_cor0) ->
	case _cor0 of
	  <S = {'xsd_state',SN,_cor3,_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33}> when 'true' ->
	      let <_cor1> =
		  %% Line 138
		  call 'filename':'rootname'
		      (SN)
	      in  %% Line 138
		  apply 'state2file'/2
		      (S, _cor1)
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'state2file',1}}] )
	    -| ['compiler_generated'] )
	end
'state2file'/2 =
    %% Line 147
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <S = {'xsd_state',_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40},FileName> when ( 'true'
																																	     -| ['compiler_generated'] ) ->
	      do  %% Line 148
		  apply 'save_xsd_state'/1
		      (S)
		  let <_cor5> =
		      catch
			  let <_cor2> =
			      %% Line 149
			      call 'lists':'append'
				  (FileName, [46|[120|[115|[115]]]])
			  in  %% Line 149
			      call 'ets':'tab2file'
				  (_cor24, _cor2)
		  in  %% Line 149
		      case _cor5 of
			%% Line 150
			<{'EXIT',Reason}> when 'true' ->
			    %% Line 151
			    {'error',{[],'xmerl_xsd',Reason}}
			%% Line 152
			<Ret> when 'true' ->
			    Ret
		      end
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'state2file',2}}] )
	    -| ['compiler_generated'] )
	end
'file2state'/1 =
    %% Line 162
    fun (_cor0) ->
	let <_cor1> =
	    catch
		%% Line 163
		call 'ets':'file2tab'
		    (_cor0)
	in  %% Line 163
	    case _cor1 of
	      %% Line 164
	      <{'ok',Tab}> when 'true' ->
		  %% Line 165
		  case apply 'load_xsd_state'/1
			   (Tab) of
		    %% Line 166
		    <[{'state',S = {'xsd_state',_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36}}|[]]> when ( 'true'
																																			 -| ['compiler_generated'] ) ->
			%% Line 167
			apply 'xmerl_xsd_vsn_check'/1
			    (S)
		    %% Line 169
		    <Other> when 'true' ->
			%% Line 170
			{'error',{[],'xmerl_xsd',{'incomplete_file',_cor0,Other}}}
		  end
	      %% Line 172
	      <{'error',Reason}> when 'true' ->
		  %% Line 173
		  {'error',{[],'xmerl_xsd',Reason}}
	      %% Line 174
	      <Other> when 'true' ->
		  %% Line 175
		  {'error',{[],'xmerl_xsd',Other}}
	    end
'save_xsd_state'/1 =
    %% Line 178
    fun (_cor0) ->
	catch
	    %% Line 179
	    ( case _cor0 of
		( <( {'xsd_state',_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_rec2,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34}
		     -| ['compiler_generated'] )> when 'true' ->
		      call 'ets':'insert'
			  (_rec2, {'state',_cor0})
		  -| ['compiler_generated'] )
		( <_cor35> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','xsd_state'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	      -| ['compiler_generated'] )
'load_xsd_state'/1 =
    %% Line 180
    fun (_cor0) ->
	catch
	    %% Line 181
	    call 'ets':'lookup'
		(_cor0, 'state')
'xmerl_xsd_vsn'/0 =
    %% Line 183
    fun () ->
	let <_cor0> =
	    %% Line 184
	    call 'xmerl_xsd':'module_info'
		('attributes')
	in  %% Line 184
	    case call 'lists':'keysearch'
		     ('vsn', 1, _cor0) of
	      %% Line 185
	      <{'value',{_cor2,MD5_VSN}}> when 'true' ->
		  %% Line 186
		  MD5_VSN
	      %% Line 187
	      <_cor3> when 'true' ->
		  %% Line 188
		  'undefined'
	    end
'xmerl_xsd_vsn_check'/1 =
    %% Line 190
    fun (_cor0) ->
	case _cor0 of
	  <S = {'xsd_state',_cor9,MD5_VSN,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39}> when 'true' ->
	      let <_cor6> =
		  %% Line 191
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor4) ->
				case _cor4 of
				  <[{'vsn',V}|_cor2]> when 'true' ->
				      let <_cor5> =
					  apply 'lc$^0'/1
					      (_cor2)
				      in  ( [V|_cor5]
					    -| ['compiler_generated'] )
				  ( <[_cor1|_cor2]> when 'true' ->
					apply 'lc$^0'/1
					    (_cor2)
				    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor4> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor4})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  let <_cor3> =
			    call 'xmerl_xsd':'module_info'
				('attributes')
			in  apply 'lc$^0'/1
				(_cor3)
		    -| ['list_comprehension'] )
	      in  %% Line 191
		  case _cor6 of
		    %% Line 192
		    <[_cor40|[]]>
			when call 'erlang':'=:='
			      (_cor40,
			       MD5_VSN) ->
			%% Line 193
			{'ok',S}
		    %% Line 194
		    <_cor41> when 'true' ->
			%% Line 195
			{'error',{[],'xmerl_xsd',{'different_version_of_xmerl_xsd_module_used','state_not_reliable'}}}
		  end
	  ( <_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8})
		  -| [{'function_name',{'xmerl_xsd_vsn_check',1}}] )
	    -| ['compiler_generated'] )
	end
'process_validate'/2 =
    %% Line 203
    fun (_cor1,_cor0) ->
	%% Line 204
	apply 'process_validate'/3
	    (_cor1, _cor0, [])
'process_validate'/3 =
    %% Line 222
    fun (_cor2,_cor1,_cor0) ->
	let <TargetNamespace> =
	    %% Line 223
	    apply 'target_namespace'/1
		(_cor1)
	in  %% Line 224
	    case _cor2 of
	      %% Line 225
	      <[H|_cor15]>
		  when let <_cor4> =
			call 'erlang':'is_list'
			    (H)
		    in  let <_cor5> =
			    call 'erlang':'is_tuple'
				(H)
			in  call 'erlang':'or'
				(_cor4, _cor5) ->
		  %% Line 226
		  case apply 'process_schemas'/2
			   (_cor2, %% Line 227
				   [{'target_namespace',TargetNamespace}|_cor0]) of
		    %% Line 228
		    <{'ok',S}> when 'true' ->
			let <S2> =
			    %% Line 229
			    apply 'validation_options'/2
				(S, _cor0)
			in  %% Line 230
			    ( case S2 of
				( <( {'xsd_state',_rec3,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46}
				     -| ['compiler_generated'] )> when 'true' ->
				      apply 'validate3'/3
					  (_rec3, _cor1, S2)
				  -| ['compiler_generated'] )
				( <_cor47> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {'badrecord','xsd_state'}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
		    %% Line 231
		    <Err> when 'true' ->
			%% Line 232
			Err
		  end
	      %% Line 234
	      <_cor48> when 'true' ->
		  let <_cor10> =
		      %% Line 235
		      call 'xmerl_scan':'file'
			  (_cor2)
		  in  %% Line 235
		      apply 'process_validate2'/4
			  (_cor10, _cor2, _cor1, _cor0)
	    end
'process_validate2'/4 =
    %% Line 238
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Err = {'error',_cor13},_cor14,_cor15,_cor16> when 'true' ->
	      %% Line 239
	      Err
	  %% Line 240
	  <{SE,_cor17},Schema,Xml,Opts> when 'true' ->
	      let <S> =
		  %% Line 241
		  apply 'initiate_state'/2
		      (Opts, Schema)
	      in  let <S1> =
		      %% Line 242
		      apply 'validate_schema'/2
			  (SE, S)
		  in  let <S2> =
			  %% Line 243
			  apply 'validate_schema_ph2'/1
			      (S1)
		      in  let <S3> =
			      %% Line 244
			      apply 'schema_concistence_checks'/1
				  (S2)
			  in  let <S4> =
				  %% Line 245
				  apply 'validation_options'/2
				      (S3, Opts)
			      in  %% Line 246
				  apply 'validate3'/3
				      (Schema, Xml, S4)
	  ( <_cor12,_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10,_cor9})
		  -| [{'function_name',{'process_validate2',4}}] )
	    -| ['compiler_generated'] )
	end
'validate3'/3 =
    %% Line 248
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Schema,Xml,S = {'xsd_state',_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,[]}> when 'true' ->
	      let <_cor3> =
		  catch
		      %% Line 250
		      apply 'validate_xml'/2
			  (Xml, S)
	      in  let <_cor19> =
		      %% Line 250
		      case _cor3 of
			%% Line 251
			<_X_Err = {'error',Reason}> when 'true' ->
			    let <_cor4> =
				%% Line 252
				apply 'acc_errs'/2
				    (S, Reason)
			    in  %% Line 252
				{Xml,_cor4}
			%% Line 253
			<{'EXIT',Reason}> when 'true' ->
			    %% Line 254
			    ( case Xml of
				( <( {'xmlElement',_rec4,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,_cor69,_cor70,_cor71}
				     -| ['compiler_generated'] )> when 'true' ->
				      let <_cor7> =
					  apply 'error_path'/2
					      (Xml, _rec4)
				      in  let <_cor8> =
					      apply 'acc_errs'/2
						  (S, {_cor7,'xmerl_xsd',%% Line 255
									 {'undefined',{'internal_error',Reason}}})
					  in  {Xml,_cor8}
				  -| ['compiler_generated'] )
				( <_cor72> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {'badrecord','xmlElement'}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
			%% Line 256
			<{XML2,Rest,Sx}> when 'true' ->
			    let <_cor11> =
				%% Line 257
				( fun (_cor9) ->
				      case _cor9 of
					<X = {'xmlComment',_cor73,_cor74,_cor75,_cor76}> when ( 'true'
												-| ['compiler_generated'] ) ->
					    'true'
					<_cor77> when 'true' ->
					    'false'
				      end
				  -| [{'id',{0,0,'-validate3/3-fun-0-'}}] )
			    in  %% Line 257
				case call 'lists':'dropwhile'
					 (_cor11, Rest) of
				  %% Line 258
				  <[]> when 'true' ->
				      %% Line 259
				      case XML2 of
					%% Line 260
					<[XML3|[]]> when 'true' ->
					    %% Line 261
					    {XML3,Sx}
					%% Line 262
					<XML3> when 'true' ->
					    %% Line 263
					    {XML3,Sx}
				      end
				  %% Line 265
				  <UnValidated> when 'true' ->
				      %% Line 266
				      ( case Xml of
					  ( <( {'xmlElement',_rec5,_cor78,_cor79,_cor80,_cor81,_cor82,_cor83,_cor84,_cor85,_cor86,_cor87}
					       -| ['compiler_generated'] )> when 'true' ->
						let <_cor15> =
						    apply 'error_path'/2
							(UnValidated, _rec5)
						in  let <_cor16> =
							apply 'acc_errs'/2
							    (Sx, {_cor15,'xmerl_xsd',%% Line 267
										     {'unvalidated_rest',UnValidated}})
						    in  {Xml,_cor16}
					    -| ['compiler_generated'] )
					  ( <_cor88> when 'true' ->
						( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'error'
										       -| ['compiler_generated'] )
						      (( {'badrecord','xmlElement'}
							 -| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					end
					-| ['compiler_generated'] )
				end
			( <_cor18> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor18})
			  -| ['compiler_generated'] )
		      end
		  in  %% Line 249
		      case _cor19 of
			<Ret = {_cor89,S2}> when 'true' ->
			    let <_cor21> =
				%% Line 270
				call 'filename':'rootname'
				    (Schema)
			    in  let <_cor22> =
				    %% Line 270
				    call 'erlang':'++'
					(_cor21, [46|[116|[97|[98|[50]]]]])
				in  do  %% Line 270
					apply 'save_to_file'/2
					    (S2, _cor22)
					%% Line 271
					( case S2 of
					    ( <( {'xsd_state',_cor90,_cor91,_cor92,_cor93,_cor94,_cor95,_cor96,_cor97,_cor98,_cor99,_cor100,_cor101,_cor102,_cor103,_cor104,_cor105,_cor106,_cor107,_cor108,_cor109,_cor110,_cor111,_cor112,_cor113,_cor114,_cor115,_cor116,_cor117,_cor118,_cor119,_cor120,_rec6}
						 -| ['compiler_generated'] )> when 'true' ->
						  case _rec6 of
						    %% Line 272
						    <[]> when 'true' ->
							%% Line 273
							Ret
						    %% Line 274
						    <L> when 'true' ->
							%% Line 276
							apply 'return_error'/1
							    (L)
						  end
					      -| ['compiler_generated'] )
					    ( <_cor121> when 'true' ->
						  ( call ( 'erlang'
							   -| ['compiler_generated'] ):( 'error'
											 -| ['compiler_generated'] )
							(( {'badrecord','xsd_state'}
							   -| ['compiler_generated'] ))
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					  end
					  -| ['compiler_generated'] )
			( <_cor20> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor20})
			  -| ['compiler_generated'] )
		      end
	  %% Line 278
	  <_cor122,_cor123,S> when 'true' ->
	      %% Line 279
	      ( case S of
		  ( <( {'xsd_state',_cor124,_cor125,_cor126,_cor127,_cor128,_cor129,_cor130,_cor131,_cor132,_cor133,_cor134,_cor135,_cor136,_cor137,_cor138,_cor139,_cor140,_cor141,_cor142,_cor143,_cor144,_cor145,_cor146,_cor147,_cor148,_cor149,_cor150,_cor151,_cor152,_cor153,_cor154,_rec7}
		       -| ['compiler_generated'] )> when 'true' ->
			apply 'return_schema_error'/1
			    (_rec7)
		    -| ['compiler_generated'] )
		  ( <_cor155> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','xsd_state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'process_schema'/1 =
    %% Line 283
    fun (_cor0) ->
	%% Line 284
	apply 'process_schema'/2
	    (_cor0, [])
'process_schema'/2 =
    %% Line 295
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Schema,Options>
	      when call 'erlang':'is_list'
		    (Options) ->
	      let <State> =
		  %% Line 296
		  apply 'initiate_state'/2
		      (Options, Schema)
	      in  %% Line 297
		  apply 'process_schema'/2
		      (Schema, State)
	  %% Line 298
	  <Schema,State = {'xsd_state',_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,Fetch,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38}> when 'true' ->
	      %% Line 299
	      case apply Fetch
		       (Schema, State) of
		%% Line 300
		<{'ok',{'file',File},_cor39}> when 'true' ->
		    let <_cor3> =
			%% Line 301
			call 'xmerl_scan':'file'
			    (File)
		    in  %% Line 301
			apply 'process_schema2'/3
			    (_cor3, State, Schema)
		%% Line 302
		<{'ok',{'string',Str},_cor40}> when 'true' ->
		    let <_cor4> =
			%% Line 303
			call 'xmerl_scan':'string'
			    (Str)
		    in  %% Line 303
			apply 'process_schema2'/3
			    (_cor4, State, Schema)
		%% Line 304
		<{'ok',[],_cor41}> when 'true' ->
		    %% Line 305
		    {'error','enoent'}
		%% Line 306
		<Err> when 'true' ->
		    %% Line 307
		    Err
	      end
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6})
		  -| [{'function_name',{'process_schema',2}}] )
	    -| ['compiler_generated'] )
	end
'process_schema2'/3 =
    %% Line 310
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Err = {'error',_cor11},_cor12,_cor13> when 'true' ->
	      %% Line 311
	      Err
	  %% Line 312
	  <{SE,_cor14},State,_X_Schema> when 'true' ->
	      let <S1> =
		  %% Line 313
		  apply 'validate_schema'/2
		      (SE, State)
	      in  let <S2> =
		      %% Line 314
		      apply 'validate_schema_ph2'/1
			  (S1)
		  in  %% Line 315
		      case apply 'schema_concistence_checks'/1
			       (S2) of
			%% Line 316
			<S3 = {'xsd_state',_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,[]}> when 'true' ->
			    %% Line 317
			    {'ok',S3}
			%% Line 318
			<S3> when 'true' ->
			    do  %% Line 319
				apply 'delete_table'/1
				    (S3)
				%% Line 320
				( case S3 of
				    ( <( {'xsd_state',_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,_cor69,_cor70,_cor71,_cor72,_cor73,_cor74,_cor75,_cor76,_rec8}
					 -| ['compiler_generated'] )> when 'true' ->
					  apply 'return_error'/1
					      (_rec8)
				      -| ['compiler_generated'] )
				    ( <_cor77> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {'badrecord','xsd_state'}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
		      end
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'process_schema2',3}}] )
	    -| ['compiler_generated'] )
	end
'process_schemas'/1 =
    %% Line 325
    fun (_cor0) ->
	%% Line 326
	apply 'process_schemas'/2
	    (_cor0, [])
'process_schemas'/2 =
    %% Line 336
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Schemas = [{_cor11,Schema}|_cor12],Options>
	      when call 'erlang':'is_list'
		    (Options) ->
	      let <State> =
		  %% Line 337
		  apply 'initiate_state'/2
		      (Options, Schema)
	      in  %% Line 338
		  apply 'process_schemas'/2
		      (Schemas, State)
	  %% Line 339
	  <[{_X_NS,Schema}|Rest],State = {'xsd_state',_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,Fetch,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43}> when 'true' ->
	      let <_cor6> =
		  %% Line 341
		  case apply Fetch
			   (Schema, State) of
		    %% Line 342
		    <{'ok',{'file',File},_cor44}> when 'true' ->
			let <_cor3> =
			    %% Line 343
			    call 'xmerl_scan':'file'
				(File)
			in  %% Line 343
			    apply 'process_schema2'/3
				(_cor3, State, Schema)
		    %% Line 344
		    <{'ok',{'string',Str},_cor45}> when 'true' ->
			let <_cor4> =
			    %% Line 345
			    call 'xmerl_scan':'string'
				(Str)
			in  %% Line 345
			    apply 'process_schema2'/3
				(_cor4, State, Schema)
		    %% Line 346
		    <{'ok',[],_cor46}> when 'true' ->
			%% Line 347
			{'ok',State}
		    %% Line 348
		    <Err> when 'true' ->
			%% Line 349
			Err
		  end
	      in  %% Line 351
		  case _cor6 of
		    %% Line 352
		    <{'ok',S2}> when 'true' ->
			%% Line 353
			apply 'process_schemas'/2
			    (Rest, S2)
		    %% Line 354
		    <_cor47> when 'true' ->
			_cor6
		  end
	  %% Line 357
	  <[],S = {'xsd_state',_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,_cor69,_cor70,_cor71,_cor72,_cor73,_cor74,_cor75,_cor76,_cor77,_cor78,_cor79}> when ( 'true'
																																	-| ['compiler_generated'] ) ->
	      %% Line 358
	      {'ok',S}
	  ( <_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9})
		  -| [{'function_name',{'process_schemas',2}}] )
	    -| ['compiler_generated'] )
	end
'initiate_state'/2 =
    %% Line 360
    fun (_cor1,_cor0) ->
	let <XSDBase> =
	    %% Line 361
	    call 'filename':'dirname'
		(_cor0)
	in  %% Line 362
	    case apply 'new_state'/1
		     (_cor1) of
	      <{{'state',S},RestOpts}> when 'true' ->
		  let <S2> =
		      %% Line 363
		      apply 'create_tables'/1
			  (S)
		  in  let <_rec9> = 'fetch'/2
		      in  %% Line 364
			  case S2 of
			    <{'xsd_state',_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44}> when 'true' ->
				let <_cor7> =
				    %% Line 365
				    call 'erlang':'setelement'
					(22, S2, _rec9)
				in  let <_cor8> =
					call 'erlang':'setelement'
					    (6, _cor7, XSDBase)
				    in  let <_cor10> =
					    call 'erlang':'setelement'
						(2, _cor8, _cor0)
					in  apply 'initiate_state2'/2
						(_cor10, %% Line 366
							 RestOpts)
			    ( <_cor45> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','xsd_state'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
	      ( <_cor3> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor3})
		-| ['compiler_generated'] )
	    end
'initiate_state2'/2 =
    %% Line 368
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <S,[]> when 'true' ->
	      %% Line 369
	      S
	  %% Line 370
	  <S,[{'tab2file',Bool}|T]> when 'true' ->
	      %% Line 371
	      case S of
		<{'xsd_state',_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51}> when 'true' ->
		    let <_cor4> =
			call 'erlang':'setelement'
			    (18, S, Bool)
		    in  apply 'initiate_state2'/2
			    (_cor4, T)
		( <_cor52> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','xsd_state'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 372
	  <S,[{'xsdbase',XSDBase}|T]> when 'true' ->
	      %% Line 373
	      case S of
		<{'xsd_state',_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,_cor69,_cor70,_cor71,_cor72,_cor73,_cor74,_cor75,_cor76,_cor77,_cor78,_cor79,_cor80,_cor81,_cor82,_cor83,_cor84}> when 'true' ->
		    let <_cor6> =
			call 'erlang':'setelement'
			    (6, S, XSDBase)
		    in  let <_cor8> =
			    call 'erlang':'setelement'
				(5, _cor6, 'true')
			in  apply 'initiate_state2'/2
				(_cor8, T)
		( <_cor85> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','xsd_state'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 374
	  <S,[{'fetch_fun',FetchFun}|T]> when 'true' ->
	      %% Line 375
	      case S of
		<{'xsd_state',_cor86,_cor87,_cor88,_cor89,_cor90,_cor91,_cor92,_cor93,_cor94,_cor95,_cor96,_cor97,_cor98,_cor99,_cor100,_cor101,_cor102,_cor103,_cor104,_cor105,_cor106,_cor107,_cor108,_cor109,_cor110,_cor111,_cor112,_cor113,_cor114,_cor115,_cor116,_cor117}> when 'true' ->
		    let <_cor11> =
			call 'erlang':'setelement'
			    (22, S, FetchFun)
		    in  apply 'initiate_state2'/2
			    (_cor11, T)
		( <_cor118> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','xsd_state'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 376
	  <S,[{'fetch_path',FetchPath}|T]> when 'true' ->
	      %% Line 377
	      case S of
		<{'xsd_state',_cor119,_cor120,_cor121,_cor122,_cor123,_cor124,_cor125,_cor126,_cor127,_cor128,_cor129,_cor130,_cor131,_cor132,_cor133,_cor134,_cor135,_cor136,_cor137,_cor138,_cor139,_cor140,_cor141,_cor142,_cor143,_cor144,_cor145,_cor146,_cor147,_cor148,_cor149,_cor150}> when 'true' ->
		    let <_cor14> =
			call 'erlang':'setelement'
			    (23, S, FetchPath)
		    in  apply 'initiate_state2'/2
			    (_cor14, T)
		( <_cor151> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','xsd_state'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 378
	  <S,[{'schema_preprocessed',Bool}|T]> when 'true' ->
	      %% Line 379
	      case S of
		<{'xsd_state',_cor152,_cor153,_cor154,_cor155,_cor156,_cor157,_cor158,_cor159,_cor160,_cor161,_cor162,_cor163,_cor164,_cor165,_cor166,_cor167,_cor168,_cor169,_cor170,_cor171,_cor172,_cor173,_cor174,_cor175,_cor176,_cor177,_cor178,_cor179,_cor180,_cor181,_cor182,_cor183}> when 'true' ->
		    let <_cor17> =
			call 'erlang':'setelement'
			    (4, S, Bool)
		    in  apply 'initiate_state2'/2
			    (_cor17, T)
		( <_cor184> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','xsd_state'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 380
	  <S,[{'target_namespace',_X_NS}|T]> when 'true' ->
	      %% Line 382
	      apply 'initiate_state2'/2
		  (S, T)
	  %% Line 383
	  <S,[H|T]> when 'true' ->
	      do  %% Line 384
		  apply 'error_msg'/2
		      ([73|[110|[118|[97|[108|[105|[100|[32|[111|[112|[116|[105|[111|[110|[58|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]], [H|[]])
		  %% Line 385
		  apply 'initiate_state2'/2
		      (S, T)
	  ( <_cor19,_cor18> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor19,_cor18})
		  -| [{'function_name',{'initiate_state2',2}}] )
	    -| ['compiler_generated'] )
	end
'validation_options'/2 =
    %% Line 387
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <S,[{'target_namespace',NS}|T]> when 'true' ->
	      let <_rec16> =
		  %% Line 388
		  apply 'if_list_to_atom'/1
		      (NS)
	      in  %% Line 388
		  case S of
		    <{'xsd_state',_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39}> when 'true' ->
			let <_cor5> =
			    call 'erlang':'setelement'
				(13, S, _rec16)
			in  apply 'validation_options'/2
				(_cor5, T)
		    ( <_cor40> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','xsd_state'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 389
	  <S,[_X_H|T]> when 'true' ->
	      %% Line 390
	      apply 'validation_options'/2
		  (S, T)
	  %% Line 391
	  <S,[]> when 'true' ->
	      %% Line 392
	      S
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6})
		  -| [{'function_name',{'validation_options',2}}] )
	    -| ['compiler_generated'] )
	end
'new_state'/1 =
    %% Line 394
    fun (_cor0) ->
	let <XSD_VSN> =
	    %% Line 395
	    apply 'xmerl_xsd_vsn'/0
		()
	in  %% Line 396
	    apply 'keysearch_delete'/4
		('state', 1, _cor0, {'state',{'xsd_state','undefined',XSD_VSN,'false','false','undefined',[],[],[],'unqualified','unqualified','undefined','undefined',[{[120|[109|[108]]],'http://www.w3.org/XML/1998/namespace'}],[],[{[120|[109|[108]]],[],'http://www.w3.org/XML/1998/namespace'}],'undefined','false','false','undefined','undefined','undefined',[],0,[],[],[],[],[],[],[],[],[]}})
'validate_schema'/2 =
    %% Line 401
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <E = {'xmlElement',_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26},%% Line 402
													   S> when 'true' ->
	      let <_rec18> =
		  %% Line 409
		  apply 'target_namespace'/1
		      (E)
	      in  %% Line 409
		  case S of
		    <{'xsd_state',_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58}> when 'true' ->
			let <_cor5> =
			    call 'erlang':'setelement'
				(13, S, _rec18)
			in  %% Line 410
			    ( case _cor5 of
				( <( {'xsd_state',_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,_cor69,_cor70,_rec20,_cor71,_cor72,_cor73,_cor74,_cor75,_cor76,_cor77,_cor78,_cor79,_cor80,_cor81,_cor82,_cor83,_cor84,_cor85,_cor86,_cor87,_cor88,_cor89,_cor90}
				     -| ['compiler_generated'] )> when 'true' ->
				      case apply 'is_already_processed'/2
					       (_rec20, _cor5) of
					%% Line 411
					<'true'> when 'true' ->
					    %% Line 412
					    apply 'save_namespace_definition'/2
						(_rec20, _cor5)
					%% Line 413
					<_cor124> when 'true' ->
					    %% Line 415
					    case apply 'traverse_content'/2
						     (E, _cor5) of
					      <{CM,S3}> when 'true' ->
						  do  %% Line 416
						      apply 'save_schema_element'/2
							  (CM, S3)
						      %% Line 417
						      S3
					      ( <_cor12> when 'true' ->
						    primop 'match_fail'
							({'badmatch',_cor12})
						-| ['compiler_generated'] )
					    end
				      end
				  -| ['compiler_generated'] )
				( <_cor91> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {'badrecord','xsd_state'}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
		    ( <_cor59> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','xsd_state'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  ( <_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14})
		  -| [{'function_name',{'validate_schema',2}}] )
	    -| ['compiler_generated'] )
	end
'validate_schema_ph2'/1 =
    %% Line 420
    fun (_cor0) ->
	case _cor0 of
	  <S = {'xsd_state',_cor2,_cor3,_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,[],_cor29,_cor30,_cor31,_cor32}> when 'true' ->
	      %% Line 421
	      S
	  %% Line 422
	  <S = {'xsd_state',_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,DT,_cor60,_cor61,_cor62,_cor63}> when 'true' ->
	      %% Line 423
	      apply 'deduce_derived_types'/2
		  (DT, S)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'validate_schema_ph2',1}}] )
	    -| ['compiler_generated'] )
	end
'traverse_content'/2 =
    %% Line 470
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <E = {'xmlElement',Name,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34},S> when 'true' ->
	      %% Line 471
	      case apply 'local_name'/1
		       (Name) of
		%% Line 472
		<'schema'> when 'true' ->
		    %% Line 475
		    ( case S of
			( <( {'xsd_state',_rec23,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,_cor69,_cor70,_cor71,_cor72,_cor73,_cor74,_cor75,_cor76}
			     -| ['compiler_generated'] )> when 'true' ->
			      let <ThisNS> =
				  {[35|[116|[104|[105|[115|[35]]]]]],_rec23,_cor56}
			      in  let <_rec25> =
				      %% Line 478
				      apply 'add_once'/2
					  (ThisNS, _cor59)
				  in  let <_cor15> =
					  %% Line 477
					  call 'erlang':'setelement'
					      (16, S, _rec25)
				      in  let <S3> =
					      %% Line 479
					      apply 'namespace_nodes'/2
						  (E, _cor15)
					  in  let <S4> =
						  %% Line 480
						  apply 'element_form_default'/2
						      (E, S3)
					      in  let <S5> =
						      %% Line 481
						      apply 'attribute_form_default'/2
							  (E, S4)
						  in  let <S6> =
							  %% Line 482
							  apply 'substitution_default'/3
							      ('finalDefault', E, S5)
						      in  let <S7> =
							      %% Line 483
							      apply 'substitution_default'/3
								  ('blockDefault', E, S6)
							  in  %% Line 484
							      apply 'traverse_content2'/3
								  (_cor31, S7, [])
			  -| ['compiler_generated'] )
			( <_cor77> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','xsd_state'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		%% Line 485
		<Err> when 'true' ->
		    %% Line 486
		    call 'erlang':'exit'
			({'error',{[],'xmerl_xsd',{'schema_error',Err}}})
	      end
	  ( <_cor24,_cor23> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor24,_cor23})
		  -| [{'function_name',{'traverse_content',2}}] )
	    -| ['compiler_generated'] )
	end
'traverse_content2'/3 =
    %% Line 490
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],S,Acc> when 'true' ->
	      let <_cor4> =
		  %% Line 491
		  apply 'remove_annotation'/1
		      (Acc)
	      in  let <_cor5> =
		      %% Line 491
		      call 'lists':'reverse'
			  (_cor4)
		  in  let <_cor3> =
			  %% Line 491
			  apply 'reset_scope'/1
			      (S)
		      in  %% Line 491
			  {_cor5,_cor3}
	  %% Line 492
	  <[El = {'xmlElement',_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23}|Els],S,Acc> when ( 'true'
																-| ['compiler_generated'] ) ->
	      let <_cor8> =
		  %% Line 494
		  apply 'kind'/2
		      (El, S)
	      in  %% Line 494
		  ( case S of
		      ( <( {'xsd_state',_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_rec28,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54}
			   -| ['compiler_generated'] )> when 'true' ->
			    case apply 'element_content'/3
				     (_cor8, El, _rec28) of
			      <{Object,S2}> when 'true' ->
				  %% Line 495
				  apply 'traverse_content2'/3
				      (Els, S2, [Object|Acc])
			      ( <_cor9> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor9})
				-| ['compiler_generated'] )
			    end
			-| ['compiler_generated'] )
		      ( <_cor55> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','xsd_state'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  %% Line 496
	  <[_X_T|Els],S,Acc> when 'true' ->
	      %% Line 497
	      apply 'traverse_content2'/3
		  (Els, S, Acc)
	  ( <_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10})
		  -| [{'function_name',{'traverse_content2',3}}] )
	    -| ['compiler_generated'] )
	end
'target_namespace'/1 =
    %% Line 499
    fun (_cor0) ->
	%% Line 500
	case apply 'get_attribute_value'/3
		 ('targetNamespace', _cor0, 'undefined') of
	  %% Line 501
	  <URI>
	      when call 'erlang':'is_list'
		    (URI) ->
	      %% Line 502
	      call 'erlang':'list_to_atom'
		  (URI)
	  %% Line 503
	  <URI> when 'true' ->
	      %% Line 504
	      URI
	end
'namespace_nodes'/2 =
    %% Line 509
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'xmlElement',_cor16,_cor17,_cor18,{'xmlNamespace',_cor19,NS},_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26},S = %% Line 510
															       {'xsd_state',_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,NSN,%% Line 511
																												    GNSN,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56}> when 'true' ->
	      let <_rec29> =
		  %% Line 512
		  call 'lists':'foldl'
		      (( 'add_once'/2
			 -| [{'id',{0,0,'-namespace_nodes/2-fun-0-'}}] ), NSN, NS)
	      in  let <_cor5> =
		      %% Line 512
		      call 'erlang':'setelement'
			  (14, S, _rec29)
		  in  let <_rec31> =
			  %% Line 514
			  apply 'add_key_once'/4
			      (_cor38, 1, %% Line 515
					  {_cor38,NS}, %% Line 516
						       GNSN)
		      in  %% Line 513
			  case _cor5 of
			    <{'xsd_state',_cor154,_cor155,_cor156,_cor157,_cor158,_cor159,_cor160,_cor161,_cor162,_cor163,_cor164,_cor165,_cor166,_cor167,_cor168,_cor169,_cor170,_cor171,_cor172,_cor173,_cor174,_cor175,_cor176,_cor177,_cor178,_cor179,_cor180,_cor181,_cor182,_cor183,_cor184,_cor185}> when 'true' ->
				call 'erlang':'setelement'
				    (15, _cor5, _rec31)
			    ( <_cor186> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','xsd_state'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
	  ( <_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14})
		  -| [{'function_name',{'namespace_nodes',2}}] )
	    -| ['compiler_generated'] )
	end
'attribute_form_default'/2 =
    %% Line 518
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'xmlElement',_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,Atts,_cor13,_cor14,_cor15,_cor16},S> when 'true' ->
	      let <Def> =
		  %% Line 519
		  apply 'form_default'/3
		      ('attributeFormDefault', Atts, S)
	      in  %% Line 520
		  case S of
		    <{'xsd_state',_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48}> when 'true' ->
			call 'erlang':'setelement'
			    (11, S, Def)
		    ( <_cor49> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','xsd_state'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'attribute_form_default',2}}] )
	    -| ['compiler_generated'] )
	end
'element_form_default'/2 =
    %% Line 521
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'xmlElement',_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,Atts,_cor13,_cor14,_cor15,_cor16},S> when 'true' ->
	      let <Def> =
		  %% Line 522
		  apply 'form_default'/3
		      ('elementFormDefault', Atts, S)
	      in  %% Line 523
		  case S of
		    <{'xsd_state',_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48}> when 'true' ->
			call 'erlang':'setelement'
			    (10, S, Def)
		    ( <_cor49> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','xsd_state'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'element_form_default',2}}] )
	    -| ['compiler_generated'] )
	end
'form_default'/3 =
    %% Line 524
    fun (_cor2,_cor1,_cor0) ->
	%% Line 525
	case apply 'keyNsearch'/4
		 (_cor2, 2, _cor1, 'unqualified') of
	  %% Line 526
	  <{'xmlAttribute',_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,V,_cor14}>
	      when call 'erlang':'is_list'
		    (V) ->
	      call 'erlang':'list_to_atom'
		  (V)
	  %% Line 527
	  <{'xmlAttribute',_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,V,_cor22}> when 'true' ->
	      V
	  %% Line 528
	  <_cor23> when 'true' ->
	      'unqualified'
	end
'substitution_default'/3 =
    %% Line 531
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Subst = 'finalDefault',El,S> when 'true' ->
	      let <_rec37> =
		  %% Line 532
		  apply 'substitution'/3
		      (Subst, El, S)
	      in  %% Line 532
		  case S of
		    <{'xsd_state',_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43}> when 'true' ->
			call 'erlang':'setelement'
			    (20, S, _rec37)
		    ( <_cor44> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','xsd_state'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 533
	  <Subst = 'blockDefault',El,S> when 'true' ->
	      let <_rec39> =
		  %% Line 534
		  apply 'substitution'/3
		      (Subst, El, S)
	      in  %% Line 534
		  case S of
		    <{'xsd_state',_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,_cor69,_cor70,_cor71,_cor72,_cor73,_cor74,_cor75,_cor76}> when 'true' ->
			call 'erlang':'setelement'
			    (21, S, _rec39)
		    ( <_cor77> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','xsd_state'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  ( <_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9})
		  -| [{'function_name',{'substitution_default',3}}] )
	    -| ['compiler_generated'] )
	end
'substitution'/3 =
    %% Line 535
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 536
	    apply 'get_attribute_value'/3
		(_cor2, _cor1, [])
	in  %% Line 536
	    apply 'split_by_whitespace'/2
		(_cor3, [])
'element_content'/3 =
    %% Line 542
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'attribute',S = {'xsd_state',_cor440,_cor441,_cor442,_cor443,_cor444,_cor445,Scope,_cor446,_cor447,_cor448,_cor449,_cor450,_cor451,_cor452,_cor453,_cor454,_cor455,_cor456,_cor457,_cor458,_cor459,_cor460,_cor461,_cor462,_cor463,_cor464,_cor465,_cor466,_cor467,_cor468,_cor469,_cor470}},Att,Env> when 'true' ->
	      %% Line 543
	      case apply 'qualify_NCName'/2
		       (Att, S) of
		%% Line 544
		<'no_name'> when 'true' ->
		    let <Ref> =
			%% Line 545
			apply 'attribute_ref'/1
			    (Att)
		    in  %% Line 547
			( case Att of
			    ( <( {'xmlElement',_cor471,_cor472,_cor473,_rec41,_cor474,_cor475,_cor476,_cor477,_cor478,_cor479,_cor480}
				 -| ['compiler_generated'] )> when 'true' ->
				  let <_cor4> =
				      %% Line 548
				      apply 'reset_scope'/1
					  (S)
				  in  let <_cor7> =
					  apply 'get_QName'/3
					      (Ref, _rec41, _cor4)
				      in  let <AttRef> = {'attribute',_cor7}
					  in  let <_cor9> =
						  %% Line 549
						  apply 'add_ref'/2
						      (S, AttRef)
					      in  %% Line 549
						  {AttRef,_cor9}
			      -| ['compiler_generated'] )
			    ( <_cor481> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','xmlElement'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		%% Line 550
		<Name> when 'true' ->
		    %% Line 551
		    case apply 'attribute_type'/3
			     (Att, [Name|Env], S) of
		      <{AttrType,S2}> when 'true' ->
			  let <_cor11> =
			      %% Line 552
			      apply 'allowed_content'/2
				  ('attribute', Env)
			  in  let <S3> =
				  %% Line 552
				  apply 'check_cm'/4
				      ('attribute', _cor11, AttrType, S2)
			      in  %% Line 553
				  ( case Att of
				      ( <( {'xmlElement',_cor482,_cor483,_cor484,_cor485,_cor486,_cor487,_rec42,_cor488,_cor489,_cor490,_cor491}
					   -| ['compiler_generated'] )> when 'true' ->
					    case apply 'attribute_properties'/3
						     (_rec42, %% Line 554
							      {'schema_attribute','undefined',AttrType,'false','undefined','optional','undefined','undefined','undefined','undefined'}, %% Line 554
																							S3) of
					      <{Attr,S4}> when 'true' ->
						  %% Line 556
						  case Attr of
						    <{'schema_attribute',_cor493,_cor494,_cor495,_cor496,_cor497,_cor498,_cor499,_cor500,_cor501}> when 'true' ->
							let <_cor17> =
							    call 'erlang':'setelement'
								(5, Attr, Scope)
							in  let <_cor19> =
								call 'erlang':'setelement'
								    (2, _cor17, Name)
							    in  let <Object> = {'attribute',_cor19}
								in  let <S5> =
									%% Line 557
									apply 'save_object'/2
									    (Object, S4)
								    in  %% Line 558
									{{'attribute',Name},S5}
						    ( <_cor502> when 'true' ->
							  ( call ( 'erlang'
								   -| ['compiler_generated'] ):( 'error'
												 -| ['compiler_generated'] )
								(( {'badrecord','schema_attribute'}
								   -| ['compiler_generated'] ))
							    -| ['compiler_generated'] )
						      -| ['compiler_generated'] )
						  end
					      ( <_cor15> when 'true' ->
						    primop 'match_fail'
							({'badmatch',_cor15})
						-| ['compiler_generated'] )
					    end
					-| ['compiler_generated'] )
				      ( <_cor492> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','xmlElement'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
		      ( <_cor10> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor10})
			-| ['compiler_generated'] )
		    end
	      end
	  %% Line 560
	  <{'element',S},El,Env> when 'true' ->
	      %% Line 563
	      case apply 'qualify_NCName'/2
		       (El, S) of
		%% Line 564
		<'no_name'> when 'true' ->
		    let <Ref> =
			%% Line 565
			apply 'particle_ref'/1
			    (El)
		    in  %% Line 566
			case apply 'occurance'/3
				 (El, {1,1}, S) of
			  <{Occ,S2}> when 'true' ->
			      let <S3> =
				  %% Line 568
				  apply 'element_forbidden_properties'/2
				      (El, S2)
			      in  %% Line 569
				  ( case El of
				      ( <( {'xmlElement',_cor503,_cor504,_cor505,_cor506,_cor507,_cor508,_cor509,_rec44,_cor510,_cor511,_cor512}
					   -| ['compiler_generated'] )> when 'true' ->
					    let <S4> =
						apply 'element_forbidden_content'/2
						    (_rec44, S3)
					    in  let <_cor29> =
						    %% Line 572
						    apply 'reset_scope'/1
							(S)
						in  let <_cor32> =
							%% Line 572
							apply 'get_QName'/3
							    (Ref, _cor506, _cor29)
						    in  let <ElRef> = {%% Line 571
							     'element',%% Line 572
								       {_cor32,%% Line 573
									       Occ}}
							in  let <_cor34> =
								%% Line 574
								apply 'add_ref'/2
								    (S4, ElRef)
							    in  %% Line 574
								{ElRef,_cor34}
					-| ['compiler_generated'] )
				      ( <_cor513> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','xmlElement'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
			  ( <_cor24> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor24})
			    -| ['compiler_generated'] )
			end
		%% Line 575
		<Name> when 'true' ->
		    %% Line 576
		    case apply 'element_type'/3
			     (El, [Name|Env], S) of
		      <{Type,S2}> when 'true' ->
			  let <_cor36> =
			      %% Line 577
			      apply 'allowed_content'/2
				  ('element', Env)
			  in  let <S3> =
				  %% Line 577
				  apply 'check_cm'/4
				      ('element', _cor36, Type, S2)
			      in  let <Type2> =
				      %% Line 578
				      apply 'remove_annotation'/1
					  (Type)
				  in  let <_cor43> =
					  %% Line 579
					  ( letrec
						'lc$^0'/1 =
						    fun (_cor41) ->
							case _cor41 of
							  <[X = {'unique',_cor525}|_cor40]> when 'true' ->
							      let <_cor42> =
								  apply 'lc$^0'/1
								      (_cor40)
							      in  ( [X|_cor42]
								    -| ['compiler_generated'] )
							  ( <[_cor39|_cor40]> when 'true' ->
								apply 'lc$^0'/1
								    (_cor40)
							    -| ['compiler_generated'] )
							  <[]> when 'true' ->
							      []
							  ( <_cor41> when 'true' ->
								( primop 'match_fail'
								      ({'function_clause',_cor41})
								  -| [{'function_name',{'lc$^0',1}}] )
							    -| ['compiler_generated'] )
							end
					    in  apply 'lc$^0'/1
						    (Type2)
					    -| ['list_comprehension'] )
				      in  let <_cor52> =
					      %% Line 580
					      ( letrec
						    'lc$^1'/1 =
							fun (_cor50) ->
							    case _cor50 of
							      <[X = {K,_cor526}|_cor46]>
								  when try
									( case <> of
									    ( <>
										  when call 'erlang':'=:='
											(K,
											 'key') ->
										  'true'
									      -| ['compiler_generated'] )
									    ( <> when 'true' ->
										  call 'erlang':'=:='
										      (K, 'keyref')
									      -| ['compiler_generated'] )
									  end
									  -| ['compiler_generated'] )
								    of <Try> ->
									Try
								    catch <T,R> ->
									'false' ->
								  let <_cor51> =
								      apply 'lc$^1'/1
									  (_cor46)
								  in  ( [X|_cor51]
									-| ['compiler_generated'] )
							      ( <[_cor45|_cor46]> when 'true' ->
								    apply 'lc$^1'/1
									(_cor46)
								-| ['compiler_generated'] )
							      <[]> when 'true' ->
								  []
							      ( <_cor50> when 'true' ->
								    ( primop 'match_fail'
									  ({'function_clause',_cor50})
								      -| [{'function_name',{'lc$^1',1}}] )
								-| ['compiler_generated'] )
							    end
						in  apply 'lc$^1'/1
							(Type2)
						-| ['list_comprehension'] )
					  in  %% Line 581
					      case apply 'occurance'/3
						       (El, {1,1}, S3) of
						<{Occur,S4}> when 'true' ->
						    %% Line 582
						    ( case El of
							( <( {'xmlElement',_cor527,_cor528,_cor529,_cor530,_cor531,_cor532,_rec46,_cor533,_cor534,_cor535,_cor536}
							     -| ['compiler_generated'] )> when 'true' ->
							      case apply 'element_properties'/4
								       (_rec46, %% Line 583
										{'schema_element','undefined','undefined','false','undefined','undefined','undefined','undefined','undefined','undefined',{1,1},'undefined','false','false',[],[]}, %% Line 583
																														    El, %% Line 583
																															S4) of
								<{SE,S5}> when 'true' ->
								    let <_cor68> =
									%% Line 584
									( letrec
									      'lc$^2'/1 =
										  fun (_cor66) ->
										      case _cor66 of
											<[X = {Y,_cor538}|_cor59]>
											    when %% Line 585
											      try
												  let <_cor60> =
												      call 'erlang':'=/='
													  ('unique', Y)
												  in  let <_cor61> =
													  call 'erlang':'=/='
													      ('key', Y)
												      in  let <_cor62> =
													      %% Line 586
													      call 'erlang':'=/='
														  ('keyref', Y)
													  in  let <_cor63> =
														  %% Line 586
														  call 'erlang':'=/='
														      ('annotation', Y)
													      in  let <_cor64> =
														      call 'erlang':'and'
															  (_cor62, _cor63)
														  in  let <_cor65> =
															  call 'erlang':'and'
															      (_cor61, _cor64)
														      in  call 'erlang':'and'
															      (_cor60, _cor65)
											      of <Try> ->
												  Try
											      catch <T,R> ->
												  'false' ->
											    let <_cor67> =
												apply 'lc$^2'/1
												    (_cor59)
											    in  ( [X|_cor67]
												  -| ['compiler_generated'] )
											( <[_cor58|_cor59]> when 'true' ->
											      apply 'lc$^2'/1
												  (_cor59)
											  -| ['compiler_generated'] )
											<[]> when 'true' ->
											    []
											( <_cor66> when 'true' ->
											      ( primop 'match_fail'
												    ({'function_clause',_cor66})
												-| [{'function_name',{'lc$^2',1}}] )
											  -| ['compiler_generated'] )
										      end
									  in  apply 'lc$^2'/1
										  (Type2)
									  -| ['list_comprehension'] )
								    in  let <CM> =
									    %% Line 584
									    apply 'remove_attributes'/1
										(_cor68)
									in  %% Line 590
									    ( case S5 of
										( <( {'xsd_state',_cor539,_cor540,_cor541,_cor542,_cor543,_cor544,_rec49,_cor545,_cor546,_cor547,_cor548,_cor549,_cor550,_cor551,_cor552,_cor553,_cor554,_cor555,_cor556,_cor557,_cor558,_cor559,_cor560,_cor561,_cor562,_cor563,_cor564,_cor565,_cor566,_cor567,_cor568,_cor569}
										     -| ['compiler_generated'] )> when 'true' ->
										      case SE of
											<{'schema_element',_cor571,_cor572,_cor573,_cor574,_cor575,_cor576,_cor577,_cor578,_cor579,_cor580,_cor581,_cor582,_cor583,_cor584,_cor585}> when 'true' ->
											    let <_cor74> =
												call 'erlang':'setelement'
												    (11, SE, Occur)
											    in  let <_cor75> =
												    call 'erlang':'setelement'
													(8, _cor74, _rec49)
												in  let <_cor76> =
													call 'erlang':'setelement'
													    (7, _cor75, _cor52)
												    in  let <_cor77> =
													    call 'erlang':'setelement'
														(6, _cor76, _cor43)
													in  let <_cor78> =
														call 'erlang':'setelement'
														    (3, _cor77, CM)
													    in  let <_cor80> =
														    call 'erlang':'setelement'
															(2, _cor78, Name)
														in  let <S6> =
															%% Line 591
															apply 'insert_substitutionGroup'/2
															    (_cor80, S5)
														    in  let <S7> =
															    %% Line 592
															    apply 'save_object'/2
																({'element',_cor80}, S6)
															in  %% Line 593
															    {{'element',{Name,Occur}},S7}
											( <_cor586> when 'true' ->
											      ( call ( 'erlang'
												       -| ['compiler_generated'] ):( 'error'
																     -| ['compiler_generated'] )
												    (( {'badrecord','schema_element'}
												       -| ['compiler_generated'] ))
												-| ['compiler_generated'] )
											  -| ['compiler_generated'] )
										      end
										  -| ['compiler_generated'] )
										( <_cor570> when 'true' ->
										      ( call ( 'erlang'
											       -| ['compiler_generated'] ):( 'error'
															     -| ['compiler_generated'] )
											    (( {'badrecord','xsd_state'}
											       -| ['compiler_generated'] ))
											-| ['compiler_generated'] )
										  -| ['compiler_generated'] )
									      end
									      -| ['compiler_generated'] )
								( <_cor57> when 'true' ->
								      primop 'match_fail'
									  ({'badmatch',_cor57})
								  -| ['compiler_generated'] )
							      end
							  -| ['compiler_generated'] )
							( <_cor537> when 'true' ->
							      ( call ( 'erlang'
								       -| ['compiler_generated'] ):( 'error'
												     -| ['compiler_generated'] )
								    (( {'badrecord','xmlElement'}
								       -| ['compiler_generated'] ))
								-| ['compiler_generated'] )
							  -| ['compiler_generated'] )
						      end
						      -| ['compiler_generated'] )
						( <_cor54> when 'true' ->
						      primop 'match_fail'
							  ({'badmatch',_cor54})
						  -| ['compiler_generated'] )
					      end
		      ( <_cor35> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor35})
			-| ['compiler_generated'] )
		    end
	      end
	  %% Line 595
	  <{'complexType',S},CT,Env> when 'true' ->
	      %% Line 600
	      case apply 'c_t_properties'/3
		       (CT, {'schema_complex_type','undefined','undefined','false','undefined','undefined',[],'undefined',[],'false','element-only','undefined',[],[],'undefined'}, S) of
		<{SCT,S1}> when 'true' ->
		    %% Line 601
		    case apply 'mixed'/2
			     (CT, S1) of
		      <{Mixed,S2}> when 'true' ->
			  %% Line 602
			  ( case CT of
			      ( <( {'xmlElement',_cor587,_cor588,_cor589,_cor590,_cor591,_cor592,_cor593,_rec50,_cor594,_cor595,_cor596}
				   -| ['compiler_generated'] )> when 'true' ->
				    let <Complexity> =
					apply 'complexity'/1
					    (_rec50)
				    in  let <Object,Name,S7> =
					    %% Line 604
					    case apply 'qualify_NCName'/2
						     (CT, S2) of
					      %% Line 605
					      <'no_name'> when 'true' ->
						  let <_cor90> =
						      %% Line 607
						      apply 'in_scope'/2
							  ('anonymous', S2)
						  in  %% Line 606
						      case apply 'type'/3
							       (_rec50, _cor90, %% Line 607
										['complexType'|Env]) of
							<{CM,S3}> when 'true' ->
							    let <_cor94> =
								%% Line 608
								apply 'allowed_content'/2
								    ('complexType', Env)
							    in  let <S4> =
								    %% Line 608
								    apply 'check_cm'/4
									('complexType', _cor94, CM, S3)
								in  let <Name1> =
									%% Line 609
									apply 'get_QName'/3
									    ('_xmerl_no_name_', _cor590, S4)
								    in  %% Line 610
									( case S of
									    ( <( {'xsd_state',_cor620,_cor621,_cor622,_cor623,_cor624,_cor625,_rec53,_cor626,_cor627,_cor628,_cor629,_cor630,_cor631,_cor632,_cor633,_cor634,_cor635,_cor636,_cor637,_cor638,_cor639,_cor640,_cor641,_cor642,_cor643,_cor644,_cor645,_cor646,_cor647,_cor648,_cor649,_cor650}
										 -| ['compiler_generated'] )> when 'true' ->
										  let <S5> =
										      apply 'set_scope'/2
											  (_rec53, S4)
										  in  let <_cor102> =
											  %% Line 611
											  apply 'remove_annotation'/1
											      (CM)
										      in  %% Line 611
											  case apply 'split_content'/1
												   (_cor102) of
											    <{Content,Attributes}> when 'true' ->
												let <SCT2> =
												    %% Line 612
												    apply 'base_type'/2
													(Content, SCT)
												in  %% Line 616
												    ( case S5 of
													( <( {'xsd_state',_cor652,_cor653,_cor654,_cor655,_cor656,_cor657,_rec57,_cor658,_cor659,_cor660,_cor661,_cor662,_cor663,_cor664,_cor665,_cor666,_cor667,_cor668,_cor669,_cor670,_cor671,_cor672,_cor673,_cor674,_cor675,_cor676,_cor677,_cor678,_cor679,_cor680,_cor681,_cor682}
													     -| ['compiler_generated'] )> when 'true' ->
													      let <_rec55> =
														  %% Line 619
														  apply 'mixify'/2
														      (Mixed, Content)
													      in  case SCT2 of
														    <{'schema_complex_type',_cor684,_cor685,_cor686,_cor687,_cor688,_cor689,_cor690,_cor691,_cor692,_cor693,_cor694,_cor695,_cor696,_cor697}> when 'true' ->
															let <_cor110> =
															    %% Line 619
															    call 'erlang':'setelement'
																(14, SCT2, _rec55)
															in  let <_cor111> =
																%% Line 617
																call 'erlang':'setelement'
																    (13, _cor110, Attributes)
															    in  let <_cor112> =
																    %% Line 618
																    call 'erlang':'setelement'
																	(12, _cor111, Complexity)
																in  let <_cor113> =
																	call 'erlang':'setelement'
																	    (5, _cor112, _rec57)
																    in  let <_cor115> =
																	    call 'erlang':'setelement'
																		(2, _cor113, Name1)
																	in  let <CTObj> = {'complexType',_cor115}
																	    in  %% Line 620
																		<CTObj,Name1,S5>
														    ( <_cor698> when 'true' ->
															  ( call ( 'erlang'
																   -| ['compiler_generated'] ):( 'error'
																				 -| ['compiler_generated'] )
																(( {'badrecord','schema_complex_type'}
																   -| ['compiler_generated'] ))
															    -| ['compiler_generated'] )
														      -| ['compiler_generated'] )
														  end
													  -| ['compiler_generated'] )
													( <_cor683> when 'true' ->
													      ( call ( 'erlang'
														       -| ['compiler_generated'] ):( 'error'
																		     -| ['compiler_generated'] )
														    (( {'badrecord','xsd_state'}
														       -| ['compiler_generated'] ))
														-| ['compiler_generated'] )
													  -| ['compiler_generated'] )
												      end
												      -| ['compiler_generated'] )
											    ( <_cor103> when 'true' ->
												  primop 'match_fail'
												      ({'badmatch',_cor103})
											      -| ['compiler_generated'] )
											  end
									      -| ['compiler_generated'] )
									    ( <_cor651> when 'true' ->
										  ( call ( 'erlang'
											   -| ['compiler_generated'] ):( 'error'
															 -| ['compiler_generated'] )
											(( {'badrecord','xsd_state'}
											   -| ['compiler_generated'] ))
										    -| ['compiler_generated'] )
									      -| ['compiler_generated'] )
									  end
									  -| ['compiler_generated'] )
							( <_cor93> when 'true' ->
							      primop 'match_fail'
								  ({'badmatch',_cor93})
							  -| ['compiler_generated'] )
						      end
					      %% Line 621
					      <Name2> when 'true' ->
						  let <S3> =
						      %% Line 622
						      apply 'in_scope'/2
							  (Name2, S2)
						  in  let <S3a> =
							  %% Line 623
							  apply 'push_circularity_mark'/2
							      ({'typeDef',Name2}, S3)
						      in  %% Line 624
							  case apply 'type'/3
								   (_rec50, S3a, %% Line 625
										 ['complexType'|Env]) of
							    <{CM,S4}> when 'true' ->
								let <S4a> =
								    %% Line 626
								    apply 'pop_circularity_mark'/2
									({'typeDef',Name2}, S4)
								in  let <_cor123> =
									%% Line 627
									apply 'allowed_content'/2
									    ('complexType', Env)
								    in  let <S5> =
									    %% Line 627
									    apply 'check_cm'/4
										('complexType', _cor123, %% Line 628
													 CM, %% Line 628
													     S4a)
									in  %% Line 629
									    ( case S of
										( <( {'xsd_state',_cor710,_cor711,_cor712,_cor713,_cor714,_cor715,_rec59,_cor716,_cor717,_cor718,_cor719,_cor720,_cor721,_cor722,_cor723,_cor724,_cor725,_cor726,_cor727,_cor728,_cor729,_cor730,_cor731,_cor732,_cor733,_cor734,_cor735,_cor736,_cor737,_cor738,_cor739,_cor740}
										     -| ['compiler_generated'] )> when 'true' ->
										      let <S6> =
											  apply 'set_scope'/2
											      (_rec59, S5)
										      in  let <_cor128> =
											      %% Line 630
											      apply 'remove_annotation'/1
												  (CM)
											  in  %% Line 630
											      case apply 'split_content'/1
												       (_cor128) of
												<{Content,Attributes}> when 'true' ->
												    let <SCT2> =
													%% Line 631
													apply 'base_type'/2
													    (Content, SCT)
												    in  %% Line 634
													( case S6 of
													    ( <( {'xsd_state',_cor742,_cor743,_cor744,_cor745,_cor746,_cor747,_rec63,_cor748,_cor749,_cor750,_cor751,_cor752,_cor753,_cor754,_cor755,_cor756,_cor757,_cor758,_cor759,_cor760,_cor761,_cor762,_cor763,_cor764,_cor765,_cor766,_cor767,_cor768,_cor769,_cor770,_cor771,_cor772}
														 -| ['compiler_generated'] )> when 'true' ->
														  let <_rec61> =
														      %% Line 637
														      apply 'mixify'/2
															  (Mixed, Content)
														  in  case SCT2 of
															<{'schema_complex_type',_cor774,_cor775,_cor776,_cor777,_cor778,_cor779,_cor780,_cor781,_cor782,_cor783,_cor784,_cor785,_cor786,_cor787}> when 'true' ->
															    let <_cor136> =
																%% Line 637
																call 'erlang':'setelement'
																    (14, SCT2, _rec61)
															    in  let <_cor137> =
																    %% Line 635
																    call 'erlang':'setelement'
																	(13, _cor136, Attributes)
																in  let <_cor138> =
																	%% Line 636
																	call 'erlang':'setelement'
																	    (12, _cor137, Complexity)
																    in  let <_cor139> =
																	    call 'erlang':'setelement'
																		(5, _cor138, _rec63)
																	in  let <_cor141> =
																		call 'erlang':'setelement'
																		    (2, _cor139, Name2)
																	    in  <{'complexType',_cor141},%% Line 638
																					 Name2,%% Line 638
																					       S6>
															( <_cor788> when 'true' ->
															      ( call ( 'erlang'
																       -| ['compiler_generated'] ):( 'error'
																				     -| ['compiler_generated'] )
																    (( {'badrecord','schema_complex_type'}
																       -| ['compiler_generated'] ))
																-| ['compiler_generated'] )
															  -| ['compiler_generated'] )
														      end
													      -| ['compiler_generated'] )
													    ( <_cor773> when 'true' ->
														  ( call ( 'erlang'
															   -| ['compiler_generated'] ):( 'error'
																			 -| ['compiler_generated'] )
															(( {'badrecord','xsd_state'}
															   -| ['compiler_generated'] ))
														    -| ['compiler_generated'] )
													      -| ['compiler_generated'] )
													  end
													  -| ['compiler_generated'] )
												( <_cor129> when 'true' ->
												      primop 'match_fail'
													  ({'badmatch',_cor129})
												  -| ['compiler_generated'] )
											      end
										  -| ['compiler_generated'] )
										( <_cor741> when 'true' ->
										      ( call ( 'erlang'
											       -| ['compiler_generated'] ):( 'error'
															     -| ['compiler_generated'] )
											    (( {'badrecord','xsd_state'}
											       -| ['compiler_generated'] ))
											-| ['compiler_generated'] )
										  -| ['compiler_generated'] )
									      end
									      -| ['compiler_generated'] )
							    ( <_cor121> when 'true' ->
								  primop 'match_fail'
								      ({'badmatch',_cor121})
							      -| ['compiler_generated'] )
							  end
					    end
					in  let <S8> =
						%% Line 640
						apply 'save_object'/2
						    (Object, S7)
					    in  let <S9> =
						    %% Line 641
						    apply 'derived_type'/2
							(Object, S8)
						in  %% Line 642
						    {{'complexType',Name},S9}
				-| ['compiler_generated'] )
			      ( <_cor597> when 'true' ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {'badrecord','xmlElement'}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
		      ( <_cor86> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor86})
			-| ['compiler_generated'] )
		    end
		( <_cor85> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor85})
		  -| ['compiler_generated'] )
	      end
	  %% Line 643
	  <{'attributeGroup',S},AG,Env> when 'true' ->
	      %% Line 646
	      case apply 'qualify_NCName'/2
		       (AG, S) of
		%% Line 647
		<'no_name'> when 'true' ->
		    let <Ref> =
			%% Line 650
			apply 'attributeGroup_ref'/1
			    (AG)
		    in  %% Line 652
			( case AG of
			    ( <( {'xmlElement',_cor789,_cor790,_cor791,_rec64,_cor792,_cor793,_cor794,_cor795,_cor796,_cor797,_cor798}
				 -| ['compiler_generated'] )> when 'true' ->
				  let <_cor148> =
				      %% Line 653
				      apply 'reset_scope'/1
					  (S)
				  in  let <_cor151> =
					  apply 'get_QName'/3
					      (Ref, _rec64, _cor148)
				      in  let <AGRef> = {'attributeGroup',_cor151}
					  in  let <_cor153> =
						  %% Line 654
						  apply 'add_ref'/2
						      (S, AGRef)
					      in  %% Line 654
						  {AGRef,_cor153}
			      -| ['compiler_generated'] )
			    ( <_cor799> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','xmlElement'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		%% Line 655
		<Name> when 'true' ->
		    %% Line 659
		    ( case AG of
			( <( {'xmlElement',_cor800,_cor801,_cor802,_cor803,_cor804,_cor805,_cor806,_rec65,_cor807,_cor808,_cor809}
			     -| ['compiler_generated'] )> when 'true' ->
			      let <_cor154> =
				  apply 'in_scope'/2
				      (Name, S)
			      in  case apply 'type'/3
					   (_rec65, _cor154, %% Line 660
							     ['attributeGroup'|Env]) of
				    <{CM,S2}> when 'true' ->
					let <S2_1> =
					    %% Line 661
					    apply 'out_scope'/2
						(Name, S2)
					in  let <_cor159> =
						%% Line 662
						apply 'allowed_content'/2
						    ('attributeGroup', Env)
					    in  let <S3> =
						    %% Line 662
						    apply 'check_cm'/4
							('attributeGroup', _cor159, CM, S2_1)
						in  let <_cor161> =
							%% Line 665
							apply 'keep_attributes'/1
							    (CM)
						    in  let <S4> =
							    %% Line 663
							    apply 'save_object'/2
								({'attributeGroup',%% Line 664
										   {'schema_attribute_group',Name,'undefined','undefined',_cor161}}, %% Line 665
																		     S3)
							in  %% Line 666
							    {{'attributeGroup',Name},S4}
				    ( <_cor157> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor157})
				      -| ['compiler_generated'] )
				  end
			  -| ['compiler_generated'] )
			( <_cor810> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','xmlElement'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
	      end
	  %% Line 668
	  <{'group',S},G,Env> when 'true' ->
	      %% Line 672
	      case apply 'qualify_NCName'/2
		       (G, S) of
		%% Line 673
		<'no_name'> when 'true' ->
		    let <Ref> =
			%% Line 679
			apply 'particle_ref'/1
			    (G)
		    in  %% Line 680
			case apply 'occurance'/3
				 (G, {1,1}, S) of
			  <{Occur,S2}> when 'true' ->
			      %% Line 683
			      ( case G of
				  ( <( {'xmlElement',_cor811,_cor812,_cor813,_rec66,_cor814,_cor815,_cor816,_cor817,_cor818,_cor819,_cor820}
				       -| ['compiler_generated'] )> when 'true' ->
					let <_cor166> =
					    apply 'reset_scope'/1
						(S2)
					in  let <_cor169> =
						apply 'get_QName'/3
						    (Ref, _rec66, _cor166)
					    in  let <GRef> = {'group',{_cor169,%% Line 684
								      Occur}}
						in  let <_cor171> =
							%% Line 685
							apply 'add_ref'/2
							    (S2, GRef)
						    in  %% Line 685
							{GRef,_cor171}
				    -| ['compiler_generated'] )
				  ( <_cor821> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','xmlElement'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			  ( <_cor165> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor165})
			    -| ['compiler_generated'] )
			end
		%% Line 686
		<Name> when 'true' ->
		    %% Line 687
		    ( case G of
			( <( {'xmlElement',_cor822,_cor823,_cor824,_cor825,_cor826,_cor827,_cor828,_rec67,_cor829,_cor830,_cor831}
			     -| ['compiler_generated'] )> when 'true' ->
			      let <_cor172> =
				  apply 'in_scope'/2
				      (Name, S)
			      in  case apply 'type'/3
					   (_rec67, _cor172, ['group'|Env]) of
				    <{CM,S2}> when 'true' ->
					let <CM2> =
					    %% Line 688
					    apply 'recursive_redefine'/3
						(Name, CM, S2)
					in  let <S2_1> =
						%% Line 689
						apply 'out_scope'/2
						    (Name, S2)
					    in  let <_cor178> =
						    %% Line 690
						    apply 'allowed_content'/2
							('group', Env)
						in  let <S3> =
							%% Line 690
							apply 'check_cm'/4
							    ('group', _cor178, CM2, S2_1)
						    in  let <_cor180> =
							    %% Line 692
							    apply 'remove_annotation'/1
								(CM2)
							in  let <S4> =
								%% Line 691
								apply 'save_object'/2
								    ({'group',{'schema_group',Name,'undefined','undefined',_cor180,{1,1}}}, %% Line 692
																	    S3)
							    in  %% Line 693
								{{'group',Name},S4}
				    ( <_cor175> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor175})
				      -| ['compiler_generated'] )
				  end
			  -| ['compiler_generated'] )
			( <_cor832> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','xmlElement'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
	      end
	  %% Line 695
	  <{'all',S},All,Env> when 'true' ->
	      %% Line 699
	      case apply 'occurance'/3
		       (All, {1,1}, S) of
		<{Occur,S1}> when 'true' ->
		    %% Line 700
		    ( case All of
			( <( {'xmlElement',_cor833,_cor834,_cor835,_cor836,_cor837,_cor838,_cor839,_rec68,_cor840,_cor841,_cor842}
			     -| ['compiler_generated'] )> when 'true' ->
			      case apply 'type'/3
				       (_rec68, S1, ['all'|Env]) of
				<{CM,S2}> when 'true' ->
				    let <_cor187> =
					%% Line 701
					apply 'allowed_content'/2
					    ('all', Env)
				    in  let <S3> =
					    %% Line 701
					    apply 'check_cm'/4
						('all', _cor187, CM, S2)
					in  let <_cor193> =
						%% Line 702
						( letrec
						      'lc$^3'/1 =
							  fun (_cor191) ->
							      case _cor191 of
								<[X = {'element',_cor844}|_cor190]> when 'true' ->
								    let <_cor192> =
									apply 'lc$^3'/1
									    (_cor190)
								    in  ( [X|_cor192]
									  -| ['compiler_generated'] )
								( <[_cor189|_cor190]> when 'true' ->
								      apply 'lc$^3'/1
									  (_cor190)
								  -| ['compiler_generated'] )
								<[]> when 'true' ->
								    []
								( <_cor191> when 'true' ->
								      ( primop 'match_fail'
									    ({'function_clause',_cor191})
									-| [{'function_name',{'lc$^3',1}}] )
								  -| ['compiler_generated'] )
							      end
						  in  apply 'lc$^3'/1
							  (CM)
						  -| ['list_comprehension'] )
					    in  %% Line 702
						{{'all',{_cor193,Occur}},S3}
				( <_cor186> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor186})
				  -| ['compiler_generated'] )
			      end
			  -| ['compiler_generated'] )
			( <_cor843> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','xmlElement'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		( <_cor183> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor183})
		  -| ['compiler_generated'] )
	      end
	  %% Line 703
	  <{'sequence',S},Seq,Env> when 'true' ->
	      %% Line 706
	      case apply 'occurance'/3
		       (Seq, {1,1}, S) of
		<{Occur,S1}> when 'true' ->
		    %% Line 707
		    ( case Seq of
			( <( {'xmlElement',_cor845,_cor846,_cor847,_cor848,_cor849,_cor850,_cor851,_rec69,_cor852,_cor853,_cor854}
			     -| ['compiler_generated'] )> when 'true' ->
			      case apply 'type'/3
				       (_rec69, S1, ['sequence'|Env]) of
				<{CM,S2}> when 'true' ->
				    let <_cor198> =
					%% Line 708
					apply 'allowed_content'/2
					    ('sequence', Env)
				    in  let <S3> =
					    %% Line 708
					    apply 'check_cm'/4
						('sequence', _cor198, CM, S2)
					in  let <_cor200> =
						%% Line 709
						apply 'remove_annotation'/1
						    (CM)
					    in  %% Line 709
						{{'sequence',{_cor200,Occur}},S3}
				( <_cor197> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor197})
				  -| ['compiler_generated'] )
			      end
			  -| ['compiler_generated'] )
			( <_cor855> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','xmlElement'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		( <_cor194> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor194})
		  -| ['compiler_generated'] )
	      end
	  %% Line 710
	  <{'choice',S},Choice,Env> when 'true' ->
	      %% Line 715
	      case apply 'occurance'/3
		       (Choice, {1,1}, S) of
		<{Occur,S1}> when 'true' ->
		    %% Line 716
		    ( case Choice of
			( <( {'xmlElement',_cor856,_cor857,_cor858,_cor859,_cor860,_cor861,_cor862,_rec70,_cor863,_cor864,_cor865}
			     -| ['compiler_generated'] )> when 'true' ->
			      case apply 'type'/3
				       (_rec70, S1, ['choice'|Env]) of
				<{CM,S2}> when 'true' ->
				    let <_cor205> =
					%% Line 717
					apply 'allowed_content'/2
					    ('choice', Env)
				    in  let <S3> =
					    %% Line 717
					    apply 'check_cm'/4
						('choice', _cor205, CM, S2)
					in  let <_cor207> =
						%% Line 718
						apply 'remove_annotation'/1
						    (CM)
					    in  %% Line 718
						{{'choice',{_cor207,Occur}},S3}
				( <_cor204> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor204})
				  -| ['compiler_generated'] )
			      end
			  -| ['compiler_generated'] )
			( <_cor866> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','xmlElement'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		( <_cor201> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor201})
		  -| ['compiler_generated'] )
	      end
	  %% Line 719
	  <{'any',S},Any,_X_Env> when 'true' ->
	      %% Line 720
	      case apply 'occurance'/3
		       (Any, {1,1}, S) of
		<{Occur,S1}> when 'true' ->
		    let <NameSpace> =
			%% Line 721
			apply 'wildcard_namespace'/2
			    (Any, S1)
		    in  let <PC> =
			    %% Line 722
			    apply 'processor_contents'/1
				(Any)
			in  let <Pred> =
				%% Line 724
				( fun (_cor212) ->
				      case _cor212 of
					<E = {'xmlElement',_cor867,_cor868,_cor869,_cor870,_cor871,_cor872,_cor873,_cor874,_cor875,_cor876,_cor877}> when 'true' ->
					    case apply 'kind'/1
						     (E) of
					      %% Line 725
					      <'annotation'> when 'true' ->
						  'false'
					      %% Line 726
					      <_cor878> when 'true' ->
						  'true'
					    end
					%% Line 728
					<_cor879> when 'true' ->
					    %% Line 729
					    'false'
				      end
				  -| [{'id',{0,0,'-element_content/3-fun-0-'}}] )
			    in  %% Line 731
				( case Any of
				    ( <( {'xmlElement',_cor880,_cor881,_cor882,_cor883,_cor884,_cor885,_cor886,_rec71,_cor887,_cor888,_cor889}
					 -| ['compiler_generated'] )> when 'true' ->
					  let <_cor221> =
					      case call 'lists':'filter'
						       (Pred, _rec71) of
						%% Line 732
						<[]> when 'true' ->
						    S1
						%% Line 733
						<Err> when 'true' ->
						    let <_cor219> =
							%% Line 734
							apply 'error_path'/2
							    (Any, _cor880)
						    in  %% Line 734
							apply 'acc_errs'/2
							    (S1, {_cor219,'xmerl_xsd',%% Line 735
										      {'unexpected_content_in_any',Err}})
					      end
					  in  %% Line 737
					      {{'any',{NameSpace,Occur,PC}},_cor221}
				      -| ['compiler_generated'] )
				    ( <_cor890> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {'badrecord','xmlElement'}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
		( <_cor208> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor208})
		  -| ['compiler_generated'] )
	      end
	  %% Line 738
	  <{IDC,S},El,Env>
	      when let <_cor223> =
		    %% Line 739
		    call 'erlang':'=:='
			(IDC, 'unique')
		in  let <_cor224> =
			%% Line 739
			call 'erlang':'=:='
			    (IDC, 'key')
		    in  let <_cor225> =
			    %% Line 739
			    call 'erlang':'=:='
				(IDC, 'keyref')
			in  let <_cor226> =
				%% Line 739
				call 'erlang':'or'
				    (_cor224, _cor225)
			    in  %% Line 739
				call 'erlang':'or'
				    (_cor223, _cor226) ->
	      let <_cor227> =
		  %% Line 740
		  apply 'reset_scope'/1
		      (S)
	      in  let <QName> =
		      %% Line 740
		      apply 'qualify_NCName'/2
			  (El, _cor227)
		  in  let <Ref> =
			  %% Line 741
			  apply 'keyrefer'/3
			      (IDC, El, S)
		      in  %% Line 742
			  ( case El of
			      ( <( {'xmlElement',_cor902,_cor903,_cor904,_cor905,_cor906,_cor907,_cor908,_rec73,_cor909,_cor910,_cor911}
				   -| ['compiler_generated'] )> when 'true' ->
				    case apply 'type'/3
					     (_rec73, S, [IDC|Env]) of
				      <{SelField,S2}> when 'true' ->
					  let <_cor242> =
					      %% Line 743
					      ( letrec
						    'lc$^5'/1 =
							fun (_cor240) ->
							    case _cor240 of
							      <[X = {'selector',_cor913}|_cor239]> when 'true' ->
								  let <_cor241> =
								      apply 'lc$^5'/1
									  (_cor239)
								  in  ( [X|_cor241]
									-| ['compiler_generated'] )
							      ( <[_cor238|_cor239]> when 'true' ->
								    apply 'lc$^5'/1
									(_cor239)
								-| ['compiler_generated'] )
							      <[]> when 'true' ->
								  []
							      ( <_cor240> when 'true' ->
								    ( primop 'match_fail'
									  ({'function_clause',_cor240})
								      -| [{'function_name',{'lc$^5',1}}] )
								-| ['compiler_generated'] )
							    end
						in  apply 'lc$^5'/1
							(SelField)
						-| ['list_comprehension'] )
					  in  let <_cor237> =
						  %% Line 743
						  ( letrec
							'lc$^4'/1 =
							    fun (_cor235) ->
								case _cor235 of
								  <[X = {'field',_cor914}|_cor234]> when 'true' ->
								      let <_cor236> =
									  apply 'lc$^4'/1
									      (_cor234)
								      in  ( [X|_cor236]
									    -| ['compiler_generated'] )
								  ( <[_cor233|_cor234]> when 'true' ->
									apply 'lc$^4'/1
									    (_cor234)
								    -| ['compiler_generated'] )
								  <[]> when 'true' ->
								      []
								  ( <_cor235> when 'true' ->
									( primop 'match_fail'
									      ({'function_clause',_cor235})
									  -| [{'function_name',{'lc$^4',1}}] )
								    -| ['compiler_generated'] )
								end
						    in  apply 'lc$^4'/1
							    (SelField)
						    -| ['list_comprehension'] )
					      in  %% Line 743
						  case <_cor242,_cor237> of
						    %% Line 744
						    <[Sel|[]],Fields = [_X_H|_X_T]> when 'true' ->
							let <IDConstr> =
							    %% Line 745
							    {'id_constraint',IDC,'undefined',QName,Ref,'undefined',%% Line 746
														   Sel,%% Line 746
														       Fields,'undefined'}
							in  let <S3> =
								%% Line 747
								apply 'save_idc'/3
								    (IDC, IDConstr, S2)
							    in  %% Line 748
								{{IDC,IDConstr},S3}
						    %% Line 749
						    <_fol680,_fol681> when 'true' ->
							let <Err> = {_fol680,_fol681}
							in  let <_cor247> =
								%% Line 750
								apply 'error_path'/2
								    (El, _cor902)
							    in  let <S3> =
								    %% Line 750
								    apply 'acc_errs'/2
									(S2, {_cor247,'xmerl_xsd',%% Line 751
												  {'erroneous_content_in_identity_constraint',IDC,Err}})
								in  %% Line 752
								    {{IDC,[]},S3}
						  end
				      ( <_cor232> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_cor232})
					-| ['compiler_generated'] )
				    end
				-| ['compiler_generated'] )
			      ( <_cor912> when 'true' ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {'badrecord','xmlElement'}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
	  %% Line 754
	  <{'selector',S},Sel,_X_Env> when 'true' ->
	      %% Line 755
	      case apply 'get_attribute_value'/3
		       ('xpath', Sel, 'error') of
		%% Line 756
		<'error'> when 'true' ->
		    %% Line 757
		    ( case Sel of
			( <( {'xmlElement',_rec75,_cor926,_cor927,_cor928,_cor929,_cor930,_cor931,_cor932,_cor933,_cor934,_cor935}
			     -| ['compiler_generated'] )> when 'true' ->
			      let <_cor252> =
				  apply 'error_path'/2
				      (Sel, _rec75)
			      in  let <S2> =
				      apply 'acc_errs'/2
					  (S, {_cor252,'xmerl_xsd',%% Line 758
								   {'missing_xpath_attribute','selector'}})
				  in  %% Line 759
				      {{'selector',[]},S2}
			  -| ['compiler_generated'] )
			( <_cor936> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','xmlElement'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		%% Line 760
		<XPath> when 'true' ->
		    %% Line 761
		    {{'selector',XPath},S}
	      end
	  %% Line 763
	  <{'field',S},F,_X_Env> when 'true' ->
	      %% Line 764
	      case apply 'get_attribute_value'/3
		       ('xpath', F, 'error') of
		%% Line 765
		<'error'> when 'true' ->
		    %% Line 766
		    ( case F of
			( <( {'xmlElement',_rec76,_cor937,_cor938,_cor939,_cor940,_cor941,_cor942,_cor943,_cor944,_cor945,_cor946}
			     -| ['compiler_generated'] )> when 'true' ->
			      let <_cor257> =
				  apply 'error_path'/2
				      (F, _rec76)
			      in  let <S2> =
				      apply 'acc_errs'/2
					  (S, {_cor257,'xmerl_xsd',%% Line 767
								   {'missing_xpath_attribute','field'}})
				  in  %% Line 768
				      {{'field',[]},S2}
			  -| ['compiler_generated'] )
			( <_cor947> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','xmlElement'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		%% Line 769
		<XPath> when 'true' ->
		    %% Line 770
		    {{'field',XPath},S}
	      end
	  %% Line 772
	  <{'notation',S},_X_N,_X_Env> when 'true' ->
	      %% Line 773
	      {{'notation',[]},S}
	  %% Line 774
	  <{'annotation',S},_X_Ann,_X_Env> when 'true' ->
	      %% Line 775
	      {{'annotation',[]},S}
	  %% Line 776
	  <{'appinfo',S},_X_AI,_X_Env> when 'true' ->
	      %% Line 777
	      {{'appinfo',[]},S}
	  %% Line 778
	  <{'documentation',S},_X_D,_X_Env> when 'true' ->
	      %% Line 779
	      {{'documentation',[]},S}
	  %% Line 780
	  <{'simpleType',S},ST,Env> when 'true' ->
	      let <_cor264> =
		  %% Line 781
		  case apply 'qualify_NCName'/2
			   (ST, S) of
		    %% Line 782
		    <'no_name'> when 'true' ->
			%% Line 783
			( case ST of
			    ( <( {'xmlElement',_cor948,_cor949,_cor950,_rec77,_cor951,_cor952,_cor953,_cor954,_cor955,_cor956,_cor957}
				 -| ['compiler_generated'] )> when 'true' ->
				  let <_cor260> =
				      %% Line 784
				      apply 'in_scope'/2
					  ('_xmerl_no_name_', S)
				  in  apply 'get_QName'/3
					  ('_xmerl_no_name_', _rec77, _cor260)
			      -| ['compiler_generated'] )
			    ( <_cor958> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','xmlElement'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    %% Line 785
		    <QName> when 'true' ->
			%% Line 786
			QName
		  end
	      in  %% Line 788
		  ( case ST of
		      ( <( {'xmlElement',_cor959,_cor960,_cor961,_cor962,_cor963,_cor964,_cor965,_rec78,_cor966,_cor967,_cor968}
			   -| ['compiler_generated'] )> when 'true' ->
			    let <_cor266> =
				%% Line 789
				apply 'in_scope'/2
				    (_cor264, S)
			    in  let <_cor267> =
				    %% Line 789
				    apply 'push_circularity_mark'/2
					({'typeDef',_cor264}, _cor266)
				in  case apply 'type'/3
					     (_rec78, _cor267, %% Line 790
							       ['simpleType'|Env]) of
				      <{Type,S2}> when 'true' ->
					  let <S2_1> =
					      %% Line 791
					      apply 'pop_circularity_mark'/2
						  ({'typeDef',_cor264}, S2)
					  in  %% Line 792
					      ( case S of
						  ( <( {'xsd_state',_cor970,_cor971,_cor972,_cor973,_cor974,_cor975,_rec79,_cor976,_cor977,_cor978,_cor979,_cor980,_cor981,_cor982,_cor983,_cor984,_cor985,_cor986,_cor987,_cor988,_cor989,_cor990,_cor991,_cor992,_cor993,_cor994,_cor995,_cor996,_cor997,_cor998,_cor999,_cor1000}
						       -| ['compiler_generated'] )> when 'true' ->
							let <S3> =
							    apply 'set_scope'/2
								(_rec79, S2_1)
							in  let <_cor275> =
								%% Line 793
								apply 'allowed_content'/2
								    ('simpleType', Env)
							    in  let <S4> =
								    %% Line 793
								    apply 'check_cm'/4
									('simpleType', _cor275, Type, S3)
								in  %% Line 794
								    case apply 'facets'/2
									     (Type, S4) of
								      <{BaseType,Facets}> when 'true' ->
									  let <Variety> =
									      %% Line 795
									      apply 'variety'/1
										  (Type)
									  in  let <Final> =
										  %% Line 796
										  apply 'simpleType_final'/2
										      (ST, S4)
									      in  %% Line 803
										  ( case S4 of
										      ( <( {'xsd_state',_cor1002,_cor1003,_cor1004,_cor1005,_cor1006,_cor1007,_rec80,_cor1008,_cor1009,_cor1010,_cor1011,_cor1012,_cor1013,_cor1014,_cor1015,_cor1016,_cor1017,_cor1018,_cor1019,_cor1020,_cor1021,_cor1022,_cor1023,_cor1024,_cor1025,_cor1026,_cor1027,_cor1028,_cor1029,_cor1030,_cor1031,_cor1032}
											   -| ['compiler_generated'] )> when 'true' ->
											    let <_cor280> =
												apply 'remove_annotation'/1
												    (Type)
											    in  let <Object> =
												    {'simpleType',{'schema_simple_type',_cor264,_rec80,BaseType,'false',Final,'undefined',Facets,Variety,_cor280}}
												in  let <S5> =
													%% Line 804
													apply 'save_object'/2
													    (Object, S4)
												    in  let <S6> =
													    %% Line 805
													    apply 'derived_type'/2
														(Object, S5)
													in  %% Line 806
													    {{'simpleType',_cor264},S6}
											-| ['compiler_generated'] )
										      ( <_cor1033> when 'true' ->
											    ( call ( 'erlang'
												     -| ['compiler_generated'] ):( 'error'
																   -| ['compiler_generated'] )
												  (( {'badrecord','xsd_state'}
												     -| ['compiler_generated'] ))
											      -| ['compiler_generated'] )
											-| ['compiler_generated'] )
										    end
										    -| ['compiler_generated'] )
								      ( <_cor277> when 'true' ->
									    primop 'match_fail'
										({'badmatch',_cor277})
									-| ['compiler_generated'] )
								    end
						    -| ['compiler_generated'] )
						  ( <_cor1001> when 'true' ->
							( call ( 'erlang'
								 -| ['compiler_generated'] ):( 'error'
											       -| ['compiler_generated'] )
							      (( {'badrecord','xsd_state'}
								 -| ['compiler_generated'] ))
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						end
						-| ['compiler_generated'] )
				      ( <_cor270> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_cor270})
					-| ['compiler_generated'] )
				    end
			-| ['compiler_generated'] )
		      ( <_cor969> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','xmlElement'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  %% Line 807
	  <{'restriction',S},R,Env> when 'true' ->
	      %% Line 813
	      ( case R of
		  ( <( {'xmlElement',_cor1034,_cor1035,_cor1036,_cor1037,_cor1038,_cor1039,_cor1040,_rec81,_cor1041,_cor1042,_cor1043}
		       -| ['compiler_generated'] )> when 'true' ->
			case apply 'type'/3
				 (_rec81, S, ['restriction'|Env]) of
			  <{CM,S2}> when 'true' ->
			      let <_cor289> =
				  %% Line 814
				  apply 'allowed_content'/2
				      ('restriction', Env)
			      in  let <S3> =
				      %% Line 814
				      apply 'check_cm'/4
					  ('restriction', _cor289, CM, S2)
				  in  %% Line 816
				      case apply 'restriction_base_type'/3
					       (R, CM, S3) of
					<{BaseTypeName,CM2,S4}> when 'true' ->
					    let <BaseTypeType> =
						%% Line 818
						apply 'base_type_type'/1
						    (Env)
					    in  let <_cor294> =
						    %% Line 819
						    apply 'remove_annotation'/1
							(CM2)
						in  let <_cor293> =
							%% Line 820
							apply 'add_ref'/2
							    (S4, {BaseTypeType,BaseTypeName})
						    in  %% Line 819
							{{'restriction',{BaseTypeName,_cor294}},_cor293}
					( <_cor291> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_cor291})
					  -| ['compiler_generated'] )
				      end
			  ( <_cor288> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor288})
			    -| ['compiler_generated'] )
			end
		    -| ['compiler_generated'] )
		  ( <_cor1044> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','xmlElement'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 821
	  <{'list',S = {'xsd_state',_cor1045,_cor1046,_cor1047,_cor1048,_cor1049,_cor1050,Scope,_cor1051,_cor1052,_cor1053,_cor1054,_cor1055,_cor1056,_cor1057,_cor1058,_cor1059,_cor1060,_cor1061,_cor1062,_cor1063,_cor1064,_cor1065,_cor1066,_cor1067,_cor1068,_cor1069,_cor1070,_cor1071,_cor1072,_cor1073,_cor1074,_cor1075}},L,Env> when 'true' ->
	      %% Line 822
	      case apply 'list_type'/3
		       (L, S, ['list'|Env]) of
		<{Type,S2}> when 'true' ->
		    let <_cor296> =
			%% Line 823
			apply 'allowed_content'/2
			    ('list', Scope)
		    in  let <S3> =
			    %% Line 823
			    apply 'check_cm'/4
				('list', _cor296, Type, S2)
			in  let <_cor298> =
				%% Line 824
				apply 'remove_annotation'/1
				    (Type)
			    in  %% Line 824
				{{'list',_cor298},S3}
		( <_cor295> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor295})
		  -| ['compiler_generated'] )
	      end
	  %% Line 825
	  <{'union',S = {'xsd_state',_cor1076,_cor1077,_cor1078,_cor1079,_cor1080,_cor1081,Scope,_cor1082,_cor1083,_cor1084,_cor1085,_cor1086,_cor1087,_cor1088,_cor1089,_cor1090,_cor1091,_cor1092,_cor1093,_cor1094,_cor1095,_cor1096,_cor1097,_cor1098,_cor1099,_cor1100,_cor1101,_cor1102,_cor1103,_cor1104,_cor1105,_cor1106}},U,Env> when 'true' ->
	      %% Line 826
	      case apply 'union_types'/3
		       (U, S, ['union'|Env]) of
		<{Types,S2}> when 'true' ->
		    let <_cor300> =
			%% Line 827
			apply 'allowed_content'/2
			    ('union', Scope)
		    in  let <S3> =
			    %% Line 827
			    apply 'check_cm'/4
				('union', _cor300, Types, S2)
			in  %% Line 828
			    {{'union',Types},S3}
		( <_cor299> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor299})
		  -| ['compiler_generated'] )
	      end
	  %% Line 829
	  <{'include',S = {'xsd_state',ThisSchema,_cor1107,_cor1108,_cor1109,_cor1110,_cor1111,_cor1112,_cor1113,_cor1114,_cor1115,_cor1116,%% Line 830
																	    TNS,_cor1117,_cor1118,_cor1119,_cor1120,_cor1121,_cor1122,_cor1123,_cor1124,_cor1125,_cor1126,_cor1127,_cor1128,_cor1129,_cor1130,_cor1131,_cor1132,_cor1133,_cor1134,_cor1135,_cor1136}},%% Line 830
																																								      I,%% Line 830
																																									_X_Env> when 'true' ->
	      let <S2> =
		  %% Line 831
		  apply 'process_external_schema_once'/3
		      (I, TNS, S)
	      in  %% Line 832
		  case S2 of
		    <{'xsd_state',_cor1169,_cor1170,_cor1171,_cor1172,_cor1173,_cor1174,_cor1175,_cor1176,_cor1177,_cor1178,_cor1179,_cor1180,_cor1181,_cor1182,_cor1183,_cor1184,_cor1185,_cor1186,_cor1187,_cor1188,_cor1189,_cor1190,_cor1191,_cor1192,_cor1193,_cor1194,_cor1195,_cor1196,_cor1197,_cor1198,_cor1199,_cor1200}> when 'true' ->
			let <_cor306> =
			    call 'erlang':'setelement'
				(13, S2, TNS)
			in  let <_cor308> =
				call 'erlang':'setelement'
				    (2, _cor306, ThisSchema)
			    in  {{'include',[]},_cor308}
		    ( <_cor1201> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','xsd_state'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 833
	  <{'import',S = {'xsd_state',ThisSchema,_cor1202,_cor1203,_cor1204,_cor1205,_cor1206,_cor1207,_cor1208,_cor1209,_cor1210,_cor1211,%% Line 834
																	   ThisNameS,_cor1212,_cor1213,_cor1214,_cor1215,_cor1216,_cor1217,_cor1218,_cor1219,_cor1220,_cor1221,_cor1222,_cor1223,_cor1224,_cor1225,_cor1226,_cor1227,_cor1228,_cor1229,_cor1230,_cor1231}},%% Line 834
																																									   I,%% Line 834
																																									     _X_Env> when 'true' ->
	      let <_cor310> =
		  %% Line 841
		  case apply 'get_attribute_value'/3
			   ('namespace', I, 'undefined') of
		    %% Line 842
		    <L>
			when call 'erlang':'is_list'
			      (L) ->
			%% Line 843
			call 'erlang':'list_to_atom'
			    (L)
		    %% Line 844
		    <A> when 'true' ->
			A
		  end
	      in  let <SchemaLocation> =
		      %% Line 849
		      apply 'get_attribute_value'/3
			  ('schemaLocation', I, 'absent')
		  in  let <S2> =
			  %% Line 854
			  apply 'process_external_schema_once'/3
			      (SchemaLocation, _cor310, S)
		      in  %% Line 855
			  case S2 of
			    <{'xsd_state',_cor1232,_cor1233,_cor1234,_cor1235,_cor1236,_cor1237,_cor1238,_cor1239,_cor1240,_cor1241,_cor1242,_cor1243,_cor1244,_cor1245,_cor1246,_cor1247,_cor1248,_cor1249,_cor1250,_cor1251,_cor1252,_cor1253,_cor1254,_cor1255,_cor1256,_cor1257,_cor1258,_cor1259,_cor1260,_cor1261,_cor1262,_cor1263}> when 'true' ->
				let <_cor315> =
				    %% Line 856
				    call 'erlang':'setelement'
					(13, S2, ThisNameS)
				in  let <_cor317> =
					call 'erlang':'setelement'
					    (2, _cor315, ThisSchema)
				    in  {{'import',[]},_cor317}
			    ( <_cor1264> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','xsd_state'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
	  %% Line 857
	  <{'redefine',S = {'xsd_state',ThisSchema,_cor1265,_cor1266,_cor1267,_cor1268,_cor1269,_cor1270,_cor1271,_cor1272,_cor1273,_cor1274,_cor1275,_cor1276,_cor1277,_cor1278,_cor1279,_cor1280,_cor1281,_cor1282,_cor1283,_cor1284,_cor1285,_cor1286,_cor1287,_cor1288,_cor1289,_cor1290,_cor1291,_cor1292,_cor1293,_cor1294,_cor1295}},RD,Env> when 'true' ->
	      let <_cor320> =
		  %% Line 865
		  call 'erlang':'setelement'
		      (33, S, [])
	      in  let <S2> =
		      %% Line 864
		      apply 'process_external_schema_once'/3
			  (RD, _cor1275, _cor320)
		  in  %% Line 866
		      ( case S2 of
			  ( <( {'xsd_state',_cor1361,_cor1362,_cor1363,_cor1364,_cor1365,_cor1366,_cor1367,_cor1368,_cor1369,_cor1370,_cor1371,_cor1372,_cor1373,_cor1374,_cor1375,_cor1376,_cor1377,_cor1378,_cor1379,_cor1380,_cor1381,_cor1382,_cor1383,_cor1384,_cor1385,_cor1386,_cor1387,_cor1388,_cor1389,_cor1390,_cor1391,_rec87}
			       -| ['compiler_generated'] )> when 'true' ->
				case _rec87 of
				  %% Line 867
				  <[]> when 'true' ->
				      let <_cor330> =
					  %% Line 871
					  call 'erlang':'setelement'
					      (33, S2, _cor1295)
				      in  let <_cor332> =
					      %% Line 869
					      call 'erlang':'setelement'
						  (2, _cor330, ThisSchema)
					  in  %% Line 872
					      ( case RD of
						  ( <( {'xmlElement',_cor1458,_cor1459,_cor1460,_cor1461,_cor1462,_cor1463,_cor1464,_rec91,_cor1465,_cor1466,_cor1467}
						       -| ['compiler_generated'] )> when 'true' ->
							%% Line 873
							case _cor332 of
							  <{'xsd_state',_cor1469,_cor1470,_cor1471,_cor1472,_cor1473,_cor1474,_cor1475,_cor1476,_cor1477,_cor1478,_cor1479,_cor1480,_cor1481,_cor1482,_cor1483,_cor1484,_cor1485,_cor1486,_cor1487,_cor1488,_cor1489,_cor1490,_cor1491,_cor1492,_cor1493,_cor1494,_cor1495,_cor1496,_cor1497,_cor1498,_cor1499,_cor1500}> when 'true' ->
							      let <_cor336> =
								  call 'erlang':'setelement'
								      (19, _cor332, 'true')
							      in  case apply 'type'/3
									   (_rec91, _cor336, ['redefine'|Env]) of
								    <{CM,S4}> when 'true' ->
									%% Line 874
									case S4 of
									  <{'xsd_state',_cor1502,_cor1503,_cor1504,_cor1505,_cor1506,_cor1507,_cor1508,_cor1509,_cor1510,_cor1511,_cor1512,_cor1513,_cor1514,_cor1515,_cor1516,_cor1517,_cor1518,_cor1519,_cor1520,_cor1521,_cor1522,_cor1523,_cor1524,_cor1525,_cor1526,_cor1527,_cor1528,_cor1529,_cor1530,_cor1531,_cor1532,_cor1533}> when 'true' ->
									      let <_cor342> =
										  call 'erlang':'setelement'
										      (19, S4, 'false')
									      in  let <_cor344> =
										      %% Line 875
										      apply 'allowed_content'/2
											  ('redefine', Env)
										  in  let <S6> =
											  %% Line 875
											  apply 'check_cm'/4
											      ('redefine', _cor344, CM, _cor342)
										      in  let <S7> =
											      %% Line 876
											      apply 'redefine'/2
												  (CM, S6)
											  in  %% Line 877
											      {{'redefine',[]},S7}
									  ( <_cor1534> when 'true' ->
										( call ( 'erlang'
											 -| ['compiler_generated'] ):( 'error'
														       -| ['compiler_generated'] )
										      (( {'badrecord','xsd_state'}
											 -| ['compiler_generated'] ))
										  -| ['compiler_generated'] )
									    -| ['compiler_generated'] )
									end
								    ( <_cor339> when 'true' ->
									  primop 'match_fail'
									      ({'badmatch',_cor339})
								      -| ['compiler_generated'] )
								  end
							  ( <_cor1501> when 'true' ->
								( call ( 'erlang'
									 -| ['compiler_generated'] ):( 'error'
												       -| ['compiler_generated'] )
								      (( {'badrecord','xsd_state'}
									 -| ['compiler_generated'] ))
								  -| ['compiler_generated'] )
							    -| ['compiler_generated'] )
							end
						    -| ['compiler_generated'] )
						  ( <_cor1468> when 'true' ->
							( call ( 'erlang'
								 -| ['compiler_generated'] ):( 'error'
											       -| ['compiler_generated'] )
							      (( {'badrecord','xmlElement'}
								 -| ['compiler_generated'] ))
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						end
						-| ['compiler_generated'] )
				  %% Line 878
				  <Errs> when 'true' ->
				      let <_rec94> =
					  %% Line 880
					  call 'erlang':'++'
					      (Errs, _cor1295)
				      in  let <_cor351> =
					      %% Line 880
					      call 'erlang':'setelement'
						  (33, S2, _rec94)
					  in  let <_cor353> =
						  %% Line 879
						  call 'erlang':'setelement'
						      (2, _cor351, ThisSchema)
					      in  %% Line 881
						  {{'redefine',[]},_cor353}
				end
			    -| ['compiler_generated'] )
			  ( <_cor1392> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','xsd_state'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
	  %% Line 883
	  <{'anyAttribute',S},AA,_X_Env> when 'true' ->
	      let <NameSpace> =
		  %% Line 888
		  apply 'wildcard_namespace'/2
		      (AA, S)
	      in  let <PC> =
		      %% Line 889
		      apply 'processor_contents'/1
			  (AA)
		  in  let <Pred> =
			  %% Line 890
			  ( fun (_cor359) ->
				case _cor359 of
				  <E = {'xmlElement',_cor1600,_cor1601,_cor1602,_cor1603,_cor1604,_cor1605,_cor1606,_cor1607,_cor1608,_cor1609,_cor1610}> when 'true' ->
				      case apply 'kind'/1
					       (E) of
					%% Line 891
					<'annotation'> when 'true' ->
					    'false'
					%% Line 892
					<_cor1611> when 'true' ->
					    'true'
				      end
				  %% Line 894
				  <_cor1612> when 'true' ->
				      'false'
				end
			    -| [{'id',{0,0,'-element_content/3-fun-1-'}}] )
		      in  %% Line 897
			  ( case AA of
			      ( <( {'xmlElement',_cor1613,_cor1614,_cor1615,_cor1616,_cor1617,_cor1618,_cor1619,_rec97,_cor1620,_cor1621,_cor1622}
				   -| ['compiler_generated'] )> when 'true' ->
				    let <_cor368> =
					case call 'lists':'filter'
						 (Pred, _rec97) of
					  %% Line 898
					  <[]> when 'true' ->
					      S
					  %% Line 899
					  <Err> when 'true' ->
					      let <_cor366> =
						  %% Line 900
						  apply 'error_path'/2
						      (AA, _cor1613)
					      in  %% Line 900
						  apply 'acc_errs'/2
						      (S, {_cor366,'xmerl_xsd',%% Line 901
									       {'content_in_anyAttribute',Err}})
					end
				    in  %% Line 903
					{{'anyAttribute',{NameSpace,PC}},_cor368}
				-| ['compiler_generated'] )
			      ( <_cor1623> when 'true' ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {'badrecord','xmlElement'}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
	  %% Line 904
	  <{'simpleContent',S},SC,Env> when 'true' ->
	      %% Line 907
	      ( case SC of
		  ( <( {'xmlElement',_cor1635,_cor1636,_cor1637,_cor1638,_cor1639,_cor1640,_cor1641,_rec99,_cor1642,_cor1643,_cor1644}
		       -| ['compiler_generated'] )> when 'true' ->
			( case S of
			    ( <( {'xsd_state',_cor1646,_cor1647,_cor1648,_cor1649,_cor1650,_cor1651,_rec100,_cor1652,_cor1653,_cor1654,_cor1655,_cor1656,_cor1657,_cor1658,_cor1659,_cor1660,_cor1661,_cor1662,_cor1663,_cor1664,_cor1665,_cor1666,_cor1667,_cor1668,_cor1669,_cor1670,_cor1671,_cor1672,_cor1673,_cor1674,_cor1675,_cor1676}
				 -| ['compiler_generated'] )> when 'true' ->
				  let <_cor372> =
				      apply 'mk_name'/1
					  (_rec100)
				  in  let <S2> =
					  apply 'pre_check_cm'/4
					      ('simpleContent', _rec99, _cor372, S)
				      in  let <_cor381> =
					      %% Line 908
					      ( fun (_cor379) ->
						    case _cor379 of
						      <X = {'xmlElement',_cor1678,_cor1679,_cor1680,_cor1681,_cor1682,_cor1683,_cor1684,_cor1685,_cor1686,_cor1687,_cor1688}> when 'true' ->
							  %% Line 909
							  case apply 'kind'/1
								   (X) of
							    %% Line 910
							    <'restriction'> when 'true' ->
								'true'
							    %% Line 911
							    <'extension'> when 'true' ->
								'true'
							    %% Line 912
							    <_cor1689> when 'true' ->
								'false'
							  end
						      %% Line 914
						      <_cor1690> when 'true' ->
							  'false'
						    end
						-| [{'id',{0,0,'-element_content/3-fun-2-'}}] )
					  in  %% Line 908
					      case call 'lists':'filter'
						       (_cor381, _rec99) of
						%% Line 917
						<[E|[]]> when 'true' ->
						    let <_cor382> =
							%% Line 918
							apply 'kind'/2
							    (E, S2)
						    in  %% Line 918
							apply 'element_content'/3
							    (_cor382, E, ['simpleContent'|Env])
						%% Line 919
						<Err> when 'true' ->
						    let <_cor385> =
							%% Line 920
							apply 'error_path'/2
							    (SC, _cor1635)
						    in  let <_cor386> =
							    %% Line 920
							    apply 'acc_errs'/2
								(S2, {_cor385,'xmerl_xsd',%% Line 921
											  {'content_in_simpleContent',Err}})
							in  %% Line 920
							    {[],_cor386}
					      end
			      -| ['compiler_generated'] )
			    ( <_cor1677> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','xsd_state'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  ( <_cor1645> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','xmlElement'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 923
	  <{'complexContent',S},CC,Env> when 'true' ->
	      %% Line 924
	      ( case CC of
		  ( <( {'xmlElement',_cor1713,_cor1714,_cor1715,_cor1716,_cor1717,_cor1718,_cor1719,_rec103,_cor1720,_cor1721,_cor1722}
		       -| ['compiler_generated'] )> when 'true' ->
			%% Line 925
			( case S of
			    ( <( {'xsd_state',_cor1724,_cor1725,_cor1726,_cor1727,_cor1728,_cor1729,_rec104,_cor1730,_cor1731,_cor1732,_cor1733,_cor1734,_cor1735,_cor1736,_cor1737,_cor1738,_cor1739,_cor1740,_cor1741,_cor1742,_cor1743,_cor1744,_cor1745,_cor1746,_cor1747,_cor1748,_cor1749,_cor1750,_cor1751,_cor1752,_cor1753,_cor1754}
				 -| ['compiler_generated'] )> when 'true' ->
				  let <_cor390> =
				      apply 'mk_name'/1
					  (_rec104)
				  in  let <S2> =
					  apply 'pre_check_cm'/4
					      ('complexContent', _rec103, _cor390, S)
				      in  let <_cor399> =
					      %% Line 928
					      ( fun (_cor397) ->
						    case _cor397 of
						      <X = {'xmlElement',_cor1756,_cor1757,_cor1758,_cor1759,_cor1760,_cor1761,_cor1762,_cor1763,_cor1764,_cor1765,_cor1766}> when 'true' ->
							  case apply 'kind'/1
								   (X) of
							    %% Line 929
							    <'restriction'> when 'true' ->
								'true'
							    %% Line 930
							    <'extension'> when 'true' ->
								'true'
							    %% Line 931
							    <_cor1767> when 'true' ->
								'false'
							  end
						      %% Line 933
						      <_cor1768> when 'true' ->
							  'false'
						    end
						-| [{'id',{0,0,'-element_content/3-fun-3-'}}] )
					  in  %% Line 928
					      case call 'lists':'filter'
						       (_cor399, _rec103) of
						%% Line 935
						<[E|[]]> when 'true' ->
						    let <_cor400> =
							%% Line 936
							apply 'kind'/2
							    (E, S2)
						    in  %% Line 936
							apply 'element_content'/3
							    (_cor400, E, ['complexContent'|Env])
						%% Line 937
						<Err> when 'true' ->
						    let <_cor403> =
							%% Line 938
							apply 'error_path'/2
							    (CC, _cor1713)
						    in  let <_cor404> =
							    %% Line 938
							    apply 'acc_errs'/2
								(S2, {_cor403,'xmerl_xsd',%% Line 939
											  {'complexContent_content_failure',Err}})
							in  %% Line 938
							    {[],_cor404}
					      end
			      -| ['compiler_generated'] )
			    ( <_cor1755> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','xsd_state'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  ( <_cor1723> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','xmlElement'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 941
	  <{'extension',S},Ext,Env> when 'true' ->
	      let <BaseType> =
		  %% Line 946
		  apply 'base_type'/1
		      (Ext)
	      in  %% Line 947
		  ( case Ext of
		      ( <( {'xmlElement',_cor1791,_cor1792,_cor1793,_cor1794,_cor1795,_cor1796,_cor1797,_rec107,_cor1798,_cor1799,_cor1800}
			   -| ['compiler_generated'] )> when 'true' ->
			    case apply 'type'/3
				     (_rec107, S, ['extension'|Env]) of
			      <{CM,S2}> when 'true' ->
				  %% Line 948
				  ( case S of
				      ( <( {'xsd_state',_cor1802,_cor1803,_cor1804,_cor1805,_cor1806,_cor1807,_rec108,_cor1808,_cor1809,_cor1810,_cor1811,_cor1812,_cor1813,_cor1814,_cor1815,_cor1816,_cor1817,_cor1818,_cor1819,_cor1820,_cor1821,_cor1822,_cor1823,_cor1824,_cor1825,_cor1826,_cor1827,_cor1828,_cor1829,_cor1830,_cor1831,_cor1832}
					   -| ['compiler_generated'] )> when 'true' ->
					    let <_cor412> =
						apply 'allowed_content'/2
						    ('extension', _rec108)
					    in  let <S3> =
						    apply 'check_cm'/4
							('extension', _cor412, CM, S2)
						in  let <_cor414> =
							%% Line 949
							apply 'reset_scope'/1
							    (S)
						    in  let <BaseTypeName> =
							    %% Line 949
							    apply 'get_QName'/3
								(BaseType, _cor1794, _cor414)
							in  let <BaseTypeType> =
								%% Line 950
								apply 'base_type_type'/1
								    (Env)
							    in  let <_cor419> =
								    %% Line 951
								    apply 'add_ref'/2
									(S3, {BaseTypeType,BaseTypeName})
								in  %% Line 951
								    {{'extension',{BaseTypeName,CM}},_cor419}
					-| ['compiler_generated'] )
				      ( <_cor1833> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','xsd_state'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
			      ( <_cor409> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor409})
				-| ['compiler_generated'] )
			    end
			-| ['compiler_generated'] )
		      ( <_cor1801> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','xmlElement'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  %% Line 953
	  <{'minExclusive',S},CF,_X_Env> when 'true' ->
	      let <Value> =
		  %% Line 954
		  apply 'get_value'/1
		      (CF)
	      in  %% Line 955
		  {{'minExclusive',Value},S}
	  %% Line 956
	  <{'minInclusive',S},CF,_X_Env> when 'true' ->
	      let <Value> =
		  %% Line 957
		  apply 'get_value'/1
		      (CF)
	      in  %% Line 958
		  {{'minInclusive',Value},S}
	  %% Line 959
	  <{'maxExclusive',S},CF,_X_Env> when 'true' ->
	      let <Value> =
		  %% Line 960
		  apply 'get_value'/1
		      (CF)
	      in  %% Line 961
		  {{'maxExclusive',Value},S}
	  %% Line 962
	  <{'maxInclusive',S},CF,_X_Env> when 'true' ->
	      let <Value> =
		  %% Line 963
		  apply 'get_value'/1
		      (CF)
	      in  %% Line 964
		  {{'maxInclusive',Value},S}
	  %% Line 965
	  <{'totalDigits',S},CF,_X_Env> when 'true' ->
	      let <Value> =
		  %% Line 966
		  apply 'get_value'/1
		      (CF)
	      in  %% Line 967
		  {{'totalDigits',Value},S}
	  %% Line 968
	  <{'fractionDigits',S},CF,_X_Env> when 'true' ->
	      let <Value> =
		  %% Line 969
		  apply 'get_value'/1
		      (CF)
	      in  %% Line 970
		  {{'fractionDigits',Value},S}
	  %% Line 971
	  <{'length',S},CF,_X_Env> when 'true' ->
	      let <Value> =
		  %% Line 972
		  apply 'get_value'/1
		      (CF)
	      in  %% Line 973
		  {{'length',Value},S}
	  %% Line 974
	  <{'minLength',S},CF,_X_Env> when 'true' ->
	      let <Value> =
		  %% Line 975
		  apply 'get_value'/1
		      (CF)
	      in  %% Line 976
		  {{'minLength',Value},S}
	  %% Line 977
	  <{'maxLength',S},CF,_X_Env> when 'true' ->
	      let <Value> =
		  %% Line 978
		  apply 'get_value'/1
		      (CF)
	      in  %% Line 979
		  {{'maxLength',Value},S}
	  %% Line 980
	  <{'enumeration',S},CF,_X_Env> when 'true' ->
	      let <Value> =
		  %% Line 981
		  apply 'get_value'/1
		      (CF)
	      in  %% Line 982
		  {{'enumeration',Value},S}
	  %% Line 983
	  <{'whiteSpace',S},CF,_X_Env> when 'true' ->
	      let <Value> =
		  %% Line 984
		  apply 'get_value'/1
		      (CF)
	      in  %% Line 985
		  {{'whiteSpace',Value},S}
	  %% Line 986
	  <{'pattern',S},CF,_X_Env> when 'true' ->
	      let <Value> =
		  %% Line 987
		  apply 'get_value'/1
		      (CF)
	      in  %% Line 988
		  {{'pattern',Value},S}
	  %% Line 989
	  <{Other,S = {'xsd_state',_cor1845,_cor1846,_cor1847,_cor1848,_cor1849,_cor1850,_cor1851,_cor1852,_cor1853,_cor1854,_cor1855,_cor1856,_cor1857,_cor1858,_cor1859,_cor1860,_cor1861,_cor1862,_cor1863,_cor1864,_cor1865,_cor1866,_cor1867,_cor1868,_cor1869,_cor1870,_cor1871,_cor1872,_cor1873,_cor1874,_cor1875,Errs}},C,_X_Env> when 'true' ->
	      %% Line 990
	      case Errs of
		%% Line 991
		<[]> when 'true' ->
		    %% Line 992
		    ( case C of
			( <( {'xmlElement',_rec110,_cor1876,_cor1877,_cor1878,_cor1879,_cor1880,_cor1881,_cor1882,_cor1883,_cor1884,_cor1885}
			     -| ['compiler_generated'] )> when 'true' ->
			      let <_cor434> =
				  apply 'error_path'/2
				      (C, _rec110)
			      in  let <_cor435> =
				      apply 'acc_errs'/2
					  (S, {_cor434,'xmerl_xsd',%% Line 993
								   {'unknown_content',Other}})
				  in  {[],_cor435}
			  -| ['compiler_generated'] )
			( <_cor1886> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','xmlElement'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		%% Line 994
		<_cor1887> when 'true' ->
		    %% Line 995
		    {[],S}
	      end
	  ( <_cor439,_cor438,_cor437> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor439,_cor438,_cor437})
		  -| [{'function_name',{'element_content',3}}] )
	    -| ['compiler_generated'] )
	end
'type'/3 =
    %% Line 999
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1000
	apply 'type'/4
	    (_cor2, _cor1, _cor0, [])
'type'/4 =
    %% Line 1001
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[E = {'xmlElement',_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25}|Els],S,Env,Acc> when 'true' ->
	      let <_cor4> =
		  %% Line 1002
		  apply 'kind'/2
		      (E, S)
	      in  %% Line 1002
		  case apply 'element_content'/3
			   (_cor4, E, Env) of
		    <{CM,S2}> when 'true' ->
			%% Line 1003
			( case S of
			    ( <( {'xsd_state',_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_rec111,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56}
				 -| ['compiler_generated'] )> when 'true' ->
				  let <_cor8> =
				      apply 'set_scope'/2
					  (_rec111, S2)
				  in  apply 'type'/4
					  (Els, _cor8, %% Line 1004
						       Env, %% Line 1004
							    [CM|Acc])
			      -| ['compiler_generated'] )
			    ( <_cor57> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','xsd_state'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor5})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1005
	  <[_X_H|Els],S,Env,Acc> when 'true' ->
	      %% Line 1006
	      apply 'type'/4
		  (Els, S, Env, Acc)
	  %% Line 1007
	  <[],S,_X_Env,Acc> when 'true' ->
	      let <_cor9> =
		  %% Line 1008
		  call 'lists':'reverse'
		      (Acc)
	      in  let <_cor10> =
		      %% Line 1008
		      call 'lists':'flatten'
			  (_cor9)
		  in  %% Line 1008
		      {_cor10,S}
	  ( <_cor14,_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12,_cor11})
		  -| [{'function_name',{'type',4}}] )
	    -| ['compiler_generated'] )
	end
'simpleUrType'/0 =
    %% Line 1010
    fun () ->
	%% Line 1011
	{'anySimpleType',[]}
'urType'/0 =
    %% Line 1014
    fun () ->
	%% Line 1015
	{'anyType',[]}
'attribute_type'/3 =
    %% Line 1018
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Att,Env = [Name|_cor30],S> when 'true' ->
	      %% Line 1023
	      ( case Att of
		  ( <( {'xmlElement',_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_rec112,_cor38,_cor39,_cor40}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_cor3> =
			    apply 'in_scope'/2
				(Name, S)
			in  case apply 'type'/3
				     (_rec112, _cor3, Env) of
			      <{CM,S2}> when 'true' ->
				  %% Line 1024
				  case apply 'remove_annotation'/1
					   (CM) of
				    %% Line 1025
				    <[]> when 'true' ->
					%% Line 1026
					case apply 'keyNsearch'/4
						 ('type', 2, _cor37, %% Line 1027
								     []) of
					  %% Line 1028
					  <{'xmlAttribute',_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,SimpleTypeName,_cor60}> when 'true' ->
					      let <_cor9> =
						  %% Line 1032
						  apply 'reset_scope'/1
						      (S)
					      in  let <_cor12> =
						      %% Line 1030
						      apply 'get_QName'/3
							  (SimpleTypeName, _cor34, _cor9)
						  in  let <TypeRef> = {%% Line 1030
							   'simpleType',_cor12}
						      in  %% Line 1034
							  ( case S of
							      ( <( {'xsd_state',_cor72,_cor73,_cor74,_cor75,_cor76,_cor77,_rec115,_cor78,_cor79,_cor80,_cor81,_cor82,_cor83,_cor84,_cor85,_cor86,_cor87,_cor88,_cor89,_cor90,_cor91,_cor92,_cor93,_cor94,_cor95,_cor96,_cor97,_cor98,_cor99,_cor100,_cor101,_cor102}
								   -| ['compiler_generated'] )> when 'true' ->
								    let <_cor14> =
									apply 'add_ref'/2
									    (S2, TypeRef)
								    in  let <_cor17> =
									    apply 'set_scope'/2
										(_rec115, _cor14)
									in  {[TypeRef|[]],_cor17}
								-| ['compiler_generated'] )
							      ( <_cor103> when 'true' ->
								    ( call ( 'erlang'
									     -| ['compiler_generated'] ):( 'error'
													   -| ['compiler_generated'] )
									  (( {'badrecord','xsd_state'}
									     -| ['compiler_generated'] ))
								      -| ['compiler_generated'] )
								-| ['compiler_generated'] )
							    end
							    -| ['compiler_generated'] )
					  %% Line 1035
					  <_cor104> when 'true' ->
					      let <_cor21> =
						  apply 'simpleUrType'/0
						      ()
					      in  %% Line 1036
						  ( case S of
						      ( <( {'xsd_state',_cor105,_cor106,_cor107,_cor108,_cor109,_cor110,_rec116,_cor111,_cor112,_cor113,_cor114,_cor115,_cor116,_cor117,_cor118,_cor119,_cor120,_cor121,_cor122,_cor123,_cor124,_cor125,_cor126,_cor127,_cor128,_cor129,_cor130,_cor131,_cor132,_cor133,_cor134,_cor135}
							   -| ['compiler_generated'] )> when 'true' ->
							    let <_cor20> =
								apply 'set_scope'/2
								    (_rec116, S2)
							    in  {[{'simpleType',_cor21}|[]],_cor20}
							-| ['compiler_generated'] )
						      ( <_cor136> when 'true' ->
							    ( call ( 'erlang'
								     -| ['compiler_generated'] ):( 'error'
												   -| ['compiler_generated'] )
								  (( {'badrecord','xsd_state'}
								     -| ['compiler_generated'] ))
							      -| ['compiler_generated'] )
							-| ['compiler_generated'] )
						    end
						    -| ['compiler_generated'] )
					end
				    %% Line 1038
				    <Type> when 'true' ->
					%% Line 1039
					( case S of
					    ( <( {'xsd_state',_cor137,_cor138,_cor139,_cor140,_cor141,_cor142,_rec117,_cor143,_cor144,_cor145,_cor146,_cor147,_cor148,_cor149,_cor150,_cor151,_cor152,_cor153,_cor154,_cor155,_cor156,_cor157,_cor158,_cor159,_cor160,_cor161,_cor162,_cor163,_cor164,_cor165,_cor166,_cor167}
						 -| ['compiler_generated'] )> when 'true' ->
						  let <_cor25> =
						      apply 'set_scope'/2
							  (_rec117, S2)
						  in  {Type,_cor25}
					      -| ['compiler_generated'] )
					    ( <_cor168> when 'true' ->
						  ( call ( 'erlang'
							   -| ['compiler_generated'] ):( 'error'
											 -| ['compiler_generated'] )
							(( {'badrecord','xsd_state'}
							   -| ['compiler_generated'] ))
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					  end
					  -| ['compiler_generated'] )
				  end
			      ( <_cor6> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor6})
				-| ['compiler_generated'] )
			    end
		    -| ['compiler_generated'] )
		  ( <_cor41> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','xmlElement'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_cor29,_cor28,_cor27> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor29,_cor28,_cor27})
		  -| [{'function_name',{'attribute_type',3}}] )
	    -| ['compiler_generated'] )
	end
'element_type'/3 =
    %% Line 1042
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <El,Env = [Name|_cor59],S> when 'true' ->
	      %% Line 1046
	      ( case El of
		  ( <( {'xmlElement',_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_rec118,_cor67,_cor68,_cor69}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_cor3> =
			    apply 'in_scope'/2
				(Name, S)
			in  case apply 'type'/3
				     (_rec118, _cor3, Env) of
			      <{CM,S2}> when 'true' ->
				  %% Line 1047
				  case apply 'remove_annotation'/1
					   (CM) of
				    %% Line 1048
				    <[]> when 'true' ->
					let <_cor8> =
					    %% Line 1049
					    apply 'get_attribute_value'/3
						('type', El, 'no_name')
					in  let <_cor7> =
						%% Line 1050
						apply 'get_attribute_value'/3
						    ('substitutionGroup', El, 'undefined')
					    in  %% Line 1049
						case <_cor8,_cor7> of
						  %% Line 1051
						  <'no_name',SGName>
						      when call 'erlang':'is_list'
							    (SGName) ->
						      let <_cor9> =
							  %% Line 1052
							  apply 'reset_scope'/1
							      (S)
						      in  let <QN> =
							      %% Line 1052
							      apply 'get_QName'/3
								  (SGName, _cor63, _cor9)
							  in  %% Line 1053
							      case apply 'is_simple_type'/2
								       (QN, S2) of
								%% Line 1054
								<'true'> when 'true' ->
								    %% Line 1055
								    call 'erlang':'exit'
									('this_can_never_happen')
								%% Line 1063
								<_cor114> when 'true' ->
								    %% Line 1065
								    ( case S of
									( <( {'xsd_state',_cor115,_cor116,_cor117,_cor118,_cor119,_cor120,_rec121,_cor121,_cor122,_cor123,_cor124,_cor125,_cor126,_cor127,_cor128,_cor129,_cor130,_cor131,_cor132,_cor133,_cor134,_cor135,_cor136,_cor137,_cor138,_cor139,_cor140,_cor141,_cor142,_cor143,_cor144,_cor145}
									     -| ['compiler_generated'] )> when 'true' ->
									      let <_cor20> =
										  apply 'set_scope'/2
										      (_rec121, S2)
									      in  {[{'substitutionGroup',QN}|[]],_cor20}
									  -| ['compiler_generated'] )
									( <_cor146> when 'true' ->
									      ( call ( 'erlang'
										       -| ['compiler_generated'] ):( 'error'
														     -| ['compiler_generated'] )
										    (( {'badrecord','xsd_state'}
										       -| ['compiler_generated'] ))
										-| ['compiler_generated'] )
									  -| ['compiler_generated'] )
								      end
								      -| ['compiler_generated'] )
							      end
						  %% Line 1067
						  <TName,_cor147>
						      when call 'erlang':'is_list'
							    (TName) ->
						      let <_cor22> =
							  %% Line 1068
							  apply 'reset_scope'/1
							      (S2)
						      in  let <QN> =
							      %% Line 1068
							      apply 'get_QName'/3
								  (TName, _cor63, _cor22)
							  in  %% Line 1069
							      case apply 'is_simple_type'/2
								       (QN, S2) of
								%% Line 1070
								<'true'> when 'true' ->
								    let <TRef> = {%% Line 1071
									 'simpleType',%% Line 1071
										      QN}
								    in  %% Line 1073
									( case S of
									    ( <( {'xsd_state',_cor159,_cor160,_cor161,_cor162,_cor163,_cor164,_rec123,_cor165,_cor166,_cor167,_cor168,_cor169,_cor170,_cor171,_cor172,_cor173,_cor174,_cor175,_cor176,_cor177,_cor178,_cor179,_cor180,_cor181,_cor182,_cor183,_cor184,_cor185,_cor186,_cor187,_cor188,_cor189}
										 -| ['compiler_generated'] )> when 'true' ->
										  let <_cor29> =
										      apply 'set_scope'/2
											  (_rec123, S2)
										  in  let <_cor30> =
											  apply 'add_ref'/2
											      (_cor29, TRef)
										      in  {[TRef|[]],_cor30}
									      -| ['compiler_generated'] )
									    ( <_cor190> when 'true' ->
										  ( call ( 'erlang'
											   -| ['compiler_generated'] ):( 'error'
															 -| ['compiler_generated'] )
											(( {'badrecord','xsd_state'}
											   -| ['compiler_generated'] ))
										    -| ['compiler_generated'] )
									      -| ['compiler_generated'] )
									  end
									  -| ['compiler_generated'] )
								%% Line 1074
								<_cor191> when 'true' ->
								    let <TRef> = {%% Line 1075
									 'simple_or_complex_Type',%% Line 1075
												  QN}
								    in  %% Line 1077
									( case S of
									    ( <( {'xsd_state',_cor192,_cor193,_cor194,_cor195,_cor196,_cor197,_rec124,_cor198,_cor199,_cor200,_cor201,_cor202,_cor203,_cor204,_cor205,_cor206,_cor207,_cor208,_cor209,_cor210,_cor211,_cor212,_cor213,_cor214,_cor215,_cor216,_cor217,_cor218,_cor219,_cor220,_cor221,_cor222}
										 -| ['compiler_generated'] )> when 'true' ->
										  let <_cor34> =
										      apply 'set_scope'/2
											  (_rec124, S2)
										  in  let <_cor35> =
											  apply 'add_ref'/2
											      (_cor34, TRef)
										      in  {[TRef|[]],_cor35}
									      -| ['compiler_generated'] )
									    ( <_cor223> when 'true' ->
										  ( call ( 'erlang'
											   -| ['compiler_generated'] ):( 'error'
															 -| ['compiler_generated'] )
											(( {'badrecord','xsd_state'}
											   -| ['compiler_generated'] ))
										    -| ['compiler_generated'] )
									      -| ['compiler_generated'] )
									  end
									  -| ['compiler_generated'] )
							      end
						  %% Line 1079
						  <_fol1349,_fol1350> when 'true' ->
						      let <_cor38> =
							  %% Line 1080
							  apply 'get_attribute_value'/3
							      ('ref', El, 'no_name')
						      in  let <_cor37> =
							      %% Line 1081
							      apply 'is_global_env'/1
								  (Env)
							  in  %% Line 1080
							      case <_cor38,_cor37> of
								%% Line 1082
								<Ref,'false'>
								    when call 'erlang':'is_list'
									  (Ref) ->
								    let <_cor42> =
									%% Line 1086
									apply 'reset_scope'/1
									    (S)
								    in  let <_cor45> =
									    %% Line 1085
									    apply 'get_QName'/3
										(Ref, _cor63, _cor42)
									in  %% Line 1087
									    ( case S of
										( <( {'xsd_state',_cor236,_cor237,_cor238,_cor239,_cor240,_cor241,_rec126,_cor242,_cor243,_cor244,_cor245,_cor246,_cor247,_cor248,_cor249,_cor250,_cor251,_cor252,_cor253,_cor254,_cor255,_cor256,_cor257,_cor258,_cor259,_cor260,_cor261,_cor262,_cor263,_cor264,_cor265,_cor266}
										     -| ['compiler_generated'] )> when 'true' ->
										      let <_cor41> =
											  apply 'set_scope'/2
											      (_rec126, S2)
										      in  {[{'element',_cor45}|[]],_cor41}
										  -| ['compiler_generated'] )
										( <_cor267> when 'true' ->
										      ( call ( 'erlang'
											       -| ['compiler_generated'] ):( 'error'
															     -| ['compiler_generated'] )
											    (( {'badrecord','xsd_state'}
											       -| ['compiler_generated'] ))
											-| ['compiler_generated'] )
										  -| ['compiler_generated'] )
									      end
									      -| ['compiler_generated'] )
								%% Line 1088
								<_fol1353,_fol1354> when 'true' ->
								    let <_cor49> =
									%% Line 1089
									apply 'urType'/0
									    ()
								    in  %% Line 1090
									( case S of
									    ( <( {'xsd_state',_cor269,_cor270,_cor271,_cor272,_cor273,_cor274,_rec127,_cor275,_cor276,_cor277,_cor278,_cor279,_cor280,_cor281,_cor282,_cor283,_cor284,_cor285,_cor286,_cor287,_cor288,_cor289,_cor290,_cor291,_cor292,_cor293,_cor294,_cor295,_cor296,_cor297,_cor298,_cor299}
										 -| ['compiler_generated'] )> when 'true' ->
										  let <_cor48> =
										      apply 'set_scope'/2
											  (_rec127, S2)
										  in  {[_cor49|[]],_cor48}
									      -| ['compiler_generated'] )
									    ( <_cor300> when 'true' ->
										  ( call ( 'erlang'
											   -| ['compiler_generated'] ):( 'error'
															 -| ['compiler_generated'] )
											(( {'badrecord','xsd_state'}
											   -| ['compiler_generated'] ))
										    -| ['compiler_generated'] )
									      -| ['compiler_generated'] )
									  end
									  -| ['compiler_generated'] )
							      end
						end
				    %% Line 1095
				    <_X_Type> when 'true' ->
					%% Line 1096
					( case S of
					    ( <( {'xsd_state',_cor301,_cor302,_cor303,_cor304,_cor305,_cor306,_rec128,_cor307,_cor308,_cor309,_cor310,_cor311,_cor312,_cor313,_cor314,_cor315,_cor316,_cor317,_cor318,_cor319,_cor320,_cor321,_cor322,_cor323,_cor324,_cor325,_cor326,_cor327,_cor328,_cor329,_cor330,_cor331}
						 -| ['compiler_generated'] )> when 'true' ->
						  let <_cor54> =
						      apply 'set_scope'/2
							  (_rec128, S2)
						  in  {CM,_cor54}
					      -| ['compiler_generated'] )
					    ( <_cor332> when 'true' ->
						  ( call ( 'erlang'
							   -| ['compiler_generated'] ):( 'error'
											 -| ['compiler_generated'] )
							(( {'badrecord','xsd_state'}
							   -| ['compiler_generated'] ))
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					  end
					  -| ['compiler_generated'] )
				  end
			      ( <_cor6> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor6})
				-| ['compiler_generated'] )
			    end
		    -| ['compiler_generated'] )
		  ( <_cor70> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','xmlElement'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_cor58,_cor57,_cor56> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor58,_cor57,_cor56})
		  -| [{'function_name',{'element_type',3}}] )
	    -| ['compiler_generated'] )
	end
'list_type'/3 =
    %% Line 1100
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1101
	( case _cor2 of
	    ( <( {'xmlElement',_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_rec129,_cor23,_cor24,_cor25,_cor26}
		 -| ['compiler_generated'] )> when 'true' ->
		  case apply 'keyNsearch'/4
			   ('itemType', 2, _rec129, []) of
		    %% Line 1102
		    <[]> when 'true' ->
			%% Line 1104
			apply 'type'/3
			    (_cor23, _cor1, _cor0)
		    %% Line 1105
		    <{'xmlAttribute',_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,V,_cor46}> when 'true' ->
			let <_cor7> =
			    %% Line 1109
			    apply 'reset_scope'/1
				(_cor1)
			in  let <_cor10> =
				%% Line 1109
				apply 'get_QName'/3
				    (V, _cor20, _cor7)
			    in  let <TypeRef> = {%% Line 1108
				     'simpleType',_cor10}
				in  let <_cor12> =
					%% Line 1110
					apply 'add_ref'/2
					    (_cor1, TypeRef)
				    in  %% Line 1110
					{[TypeRef|[]],_cor12}
		    ( <_cor13> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor13})
		      -| ['compiler_generated'] )
		  end
	      -| ['compiler_generated'] )
	    ( <_cor27> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','xmlElement'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'union_types'/3 =
    %% Line 1112
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1114
	( case _cor2 of
	    ( <( {'xmlElement',_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_rec132,_cor38,_cor39,_cor40,_cor41}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <MemberTypes,S2> =
		      case apply 'keyNsearch'/4
			       ('memberTypes', 2, _rec132, []) of
			%% Line 1115
			<[]> when 'true' ->
			    %% Line 1116
			    <[],_cor1>
			%% Line 1117
			<{'xmlAttribute',_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,NameString,_cor50}> when 'true' ->
			    let <Names> =
				%% Line 1118
				apply 'namestring2namelist'/1
				    (NameString)
			    in  let <_cor14> =
				    %% Line 1120
				    ( letrec
					  'lc$^0'/1 =
					      fun (_cor8) ->
						  case _cor8 of
						    <[%% Line 1121
						      X|_cor7]> when 'true' ->
							let <_cor9> =
							    %% Line 1121
							    apply 'reset_scope'/1
								(_cor1)
							in  let <_cor12> =
								apply 'get_QName'/3
								    (X, _cor35, _cor9)
							    in  let <_cor13> =
								    %% Line 1121
								    apply 'lc$^0'/1
									(_cor7)
								in  ( [{'simpleType',_cor12}|_cor13]
								      -| ['compiler_generated'] )
						    <[]> when 'true' ->
							[]
						    ( <_cor8> when 'true' ->
							  ( primop 'match_fail'
								({'function_clause',_cor8})
							    -| [{'function_name',{'lc$^0',1}}] )
						      -| ['compiler_generated'] )
						  end
				      in  apply 'lc$^0'/1
					      (%% Line 1121
					       Names)
				      -| ['list_comprehension'] )
				in  let <_cor20> =
					%% Line 1122
					( fun (_cor17,_cor16) ->
					      apply 'add_ref'/2
						  (_cor16, _cor17)
					  -| [{'id',{0,0,'-union_types/3-fun-0-'}}] )
				    in  let <_cor21> =
					    %% Line 1122
					    call 'lists':'foldl'
						(_cor20, _cor1, _cor14)
					in  <_cor14,_cor21>
			( <_cor22> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor22})
			  -| ['compiler_generated'] )
		      end
		  in  %% Line 1124
		      case apply 'union_types1'/3
			       (_cor38, S2, _cor0) of
			<{DefinedTypes,S3}> when 'true' ->
			    let <_cor28> =
				%% Line 1125
				call 'erlang':'++'
				    (MemberTypes, DefinedTypes)
			    in  %% Line 1125
				{_cor28,S3}
			( <_cor27> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor27})
			  -| ['compiler_generated'] )
		      end
	      -| ['compiler_generated'] )
	    ( <_cor42> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','xmlElement'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'union_types1'/3 =
    %% Line 1127
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1128
	apply 'union_types1'/4
	    (_cor2, _cor1, _cor0, [])
'union_types1'/4 =
    %% Line 1129
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[],S,_X_Env,Acc> when 'true' ->
	      %% Line 1130
	      {Acc,S}
	  %% Line 1131
	  <[C = {'xmlElement',_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25}|Cs],S,Env,Acc> when 'true' ->
	      let <_cor4> =
		  %% Line 1132
		  apply 'kind'/2
		      (C, S)
	      in  %% Line 1132
		  case apply 'element_content'/3
			   (_cor4, C, Env) of
		    %% Line 1133
		    <{ST = {'simpleType',_cor26},S2}> when 'true' ->
			%% Line 1134
			apply 'union_types1'/4
			    (Cs, S2, Env, [ST|Acc])
		    %% Line 1135
		    <{{'annotation',_cor27},S2}> when 'true' ->
			%% Line 1136
			apply 'union_types1'/4
			    (Cs, S2, Env, Acc)
		    %% Line 1137
		    <{IllegalType,S2}> when 'true' ->
			let <_cor7> =
			    %% Line 1138
			    apply 'error_path'/2
				(C, _cor15)
			in  let <Err> = {_cor7,%% Line 1138
				       'xmerl_xsd',%% Line 1139
						   {'union_member_type_not_simpleType',IllegalType}}
			    in  let <_cor9> =
				    %% Line 1140
				    apply 'acc_errs'/2
					(S2, Err)
				in  %% Line 1140
				    apply 'union_types1'/4
					(Cs, _cor9, Env, Acc)
		    ( <_cor10> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor10})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1142
	  <[_X_H|T],S,Env,Acc> when 'true' ->
	      %% Line 1143
	      apply 'union_types1'/4
		  (T, S, Env, Acc)
	  ( <_cor14,_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12,_cor11})
		  -| [{'function_name',{'union_types1',4}}] )
	    -| ['compiler_generated'] )
	end
'recursive_redefine'/3 =
    %% Line 1149
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Name,CM,S = {'xsd_state',_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,'true',_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38}> when 'true' ->
	      %% Line 1150
	      case apply 'remove_annotation'/1
		       (CM) of
		%% Line 1151
		<[{MG,{C,Occ}}|[]]> when 'true' ->
		    let <_cor3> =
			%% Line 1152
			apply 'recursive_redefine2'/3
			    (Name, C, S)
		    in  %% Line 1152
			[{MG,{_cor3,Occ}}|[]]
		%% Line 1153
		<_cor39> when 'true' ->
		    %% Line 1154
		    CM
	      end
	  %% Line 1156
	  <_cor40,CM,_cor41> when 'true' ->
	      %% Line 1157
	      CM
	end
'recursive_redefine2'/3 =
    %% Line 1158
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Name,[{'group',{_cor16,Occ}}|T],S>
	      when call 'erlang':'=:='
		    (_cor16,
		     Name) ->
	      %% Line 1160
	      case apply 'rename_redef_group'/2
		       (Name, S) of
		%% Line 1161
		<'failed'> when 'true' ->
		    %% Line 1162
		    [{'group',{Name,Occ}}|T]
		%% Line 1163
		<NewName> when 'true' ->
		    %% Line 1164
		    [{'group',{NewName,Occ}}|T]
	      end
	  %% Line 1166
	  <Name,[{MG,{C,Occ}}|T],S>
	      when let <_cor4> =
		    %% Line 1167
		    call 'erlang':'=:='
			(MG, 'sequence')
		in  let <_cor5> =
			%% Line 1167
			call 'erlang':'=:='
			    (MG, 'choice')
		    in  let <_cor6> =
			    %% Line 1167
			    call 'erlang':'=:='
				(MG, 'all')
			in  let <_cor7> =
				%% Line 1167
				call 'erlang':'=:='
				    (MG, 'group')
			    in  let <_cor8> =
				    %% Line 1167
				    call 'erlang':'or'
					(_cor6, _cor7)
				in  let <_cor9> =
					%% Line 1167
					call 'erlang':'or'
					    (_cor5, _cor8)
				    in  %% Line 1167
					call 'erlang':'or'
					    (_cor4, _cor9) ->
	      let <C2> =
		  %% Line 1168
		  apply 'recursive_redefine2'/3
		      (Name, C, S)
	      in  let <_cor11> =
		      %% Line 1169
		      apply 'recursive_redefine2'/3
			  (Name, T, S)
		  in  %% Line 1169
		      [{MG,{C2,Occ}}|_cor11]
	  %% Line 1170
	  <Name,[H|T],S> when 'true' ->
	      let <_cor12> =
		  %% Line 1171
		  apply 'recursive_redefine2'/3
		      (Name, T, S)
	      in  %% Line 1171
		  [H|_cor12]
	  %% Line 1172
	  <_cor17,[],_cor18> when 'true' ->
	      %% Line 1173
	      []
	  ( <_cor15,_cor14,_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14,_cor13})
		  -| [{'function_name',{'recursive_redefine2',3}}] )
	    -| ['compiler_generated'] )
	end
'rename_redef_group'/2 =
    %% Line 1175
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Name = {LN,Scope,NS},S> when 'true' ->
	      let <NewName> =
		  %% Line 1177
		  {LN,['#redefine'|Scope],NS}
	      in  %% Line 1178
		  case apply 'resolve'/2
			   ({'group',NewName}, S) of
		    %% Line 1179
		    <{SG = {'schema_group',_cor9,_cor10,_cor11,_cor12,_cor13},_cor14}>
			when call 'erlang':'=:='
			      (_cor9,
			       Name) ->
			let <_cor5> =
			    %% Line 1180
			    call 'erlang':'setelement'
				(2, SG, NewName)
			in  do  %% Line 1180
				apply 'save_object'/2
				    ({'group',_cor5}, S)
				%% Line 1181
				NewName
		    %% Line 1182
		    <_cor21> when 'true' ->
			%% Line 1183
			'failed'
		  end
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'rename_redef_group',2}}] )
	    -| ['compiler_generated'] )
	end
'add_ref'/2 =
    %% Line 1187
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <S = {'xsd_state',_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,UR,_cor51,_cor52,_cor53},STRef = {'simpleType',Ref}> when 'true' ->
	      let <_cor2> =
		  %% Line 1188
		  call 'xmerl_lib':'is_builtin_simple_type'
		      (Ref)
	      in  %% Line 1188
		  case <_cor2,Ref> of
		    %% Line 1189
		    <'true',_cor54> when 'true' ->
			%% Line 1190
			S
		    %% Line 1191
		    <_cor55,{'',_cor56,_cor57}> when 'true' ->
			%% Line 1192
			S
		    %% Line 1193
		    <_fol1563,_fol1564> when 'true' ->
			let <_rec137> =
			    %% Line 1194
			    apply 'add_once'/2
				(STRef, UR)
			in  let <_cor6> =
				%% Line 1194
				call 'erlang':'setelement'
				    (30, S, _rec137)
			    in  %% Line 1195
				apply 'add_circularity_ref'/2
				    (STRef, _cor6)
		  end
	  %% Line 1197
	  <S = {'xsd_state',_cor92,_cor93,_cor94,_cor95,_cor96,_cor97,_cor98,_cor99,_cor100,_cor101,_cor102,_cor103,_cor104,_cor105,_cor106,_cor107,_cor108,_cor109,_cor110,_cor111,_cor112,_cor113,_cor114,_cor115,_cor116,_cor117,_cor118,_cor119,UR,_cor120,_cor121,_cor122},STRef = {'simple_or_complex_Type',Ref}> when 'true' ->
	      let <_cor9> =
		  %% Line 1198
		  call 'xmerl_lib':'is_builtin_simple_type'
		      (Ref)
	      in  %% Line 1198
		  case <_cor9,Ref> of
		    %% Line 1199
		    <'true',_cor123> when 'true' ->
			%% Line 1200
			S
		    %% Line 1201
		    <_cor124,{'',_cor125,_cor126}> when 'true' ->
			%% Line 1202
			S
		    %% Line 1203
		    <_cor127,{'anyType',_cor128,'http://www.w3.org/2001/XMLSchema'}> when 'true' ->
			%% Line 1204
			S
		    %% Line 1205
		    <_cor129,{'anySimpleType',_cor130,'http://www.w3.org/2001/XMLSchema'}> when 'true' ->
			%% Line 1206
			S
		    %% Line 1207
		    <_fol1632,_fol1633> when 'true' ->
			let <_rec139> =
			    %% Line 1208
			    apply 'add_once'/2
				(STRef, UR)
			in  let <_cor13> =
				%% Line 1208
				call 'erlang':'setelement'
				    (30, S, _rec139)
			    in  %% Line 1209
				apply 'add_circularity_ref'/2
				    (STRef, _cor13)
		  end
	  %% Line 1211
	  <S,{'complexType',{'anyType',_cor165,'http://www.w3.org/2001/XMLSchema'}}> when 'true' ->
	      %% Line 1212
	      S
	  %% Line 1213
	  <S = {'xsd_state',_cor166,_cor167,_cor168,_cor169,_cor170,_cor171,_cor172,_cor173,_cor174,_cor175,_cor176,_cor177,_cor178,_cor179,_cor180,_cor181,_cor182,_cor183,_cor184,_cor185,_cor186,_cor187,_cor188,_cor189,_cor190,_cor191,_cor192,_cor193,UR,_cor194,_cor195,_cor196},Ref> when 'true' ->
	      let <_rec141> =
		  %% Line 1214
		  apply 'add_once'/2
		      (Ref, UR)
	      in  let <_cor19> =
		      %% Line 1214
		      call 'erlang':'setelement'
			  (30, S, _rec141)
		  in  %% Line 1215
		      apply 'add_circularity_ref'/2
			  (Ref, _cor19)
	  ( <_cor22,_cor21> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor22,_cor21})
		  -| [{'function_name',{'add_ref',2}}] )
	    -| ['compiler_generated'] )
	end
'add_circularity_ref'/2 =
    %% Line 1222
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Ref = {Kind,To},S = {'xsd_state',_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,%% Line 1223
																				   'false',_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,CD,_cor41}>
	      when let <_cor2> =
		    %% Line 1224
		    call 'erlang':'=:='
			(Kind, 'simpleType')
		in  let <_cor3> =
			%% Line 1224
			call 'erlang':'=:='
			    (Kind, 'simple_or_complex_Type')
		    in  let <_cor4> =
			    %% Line 1224
			    call 'erlang':'=:='
				(Kind, 'complexType')
			in  let <_cor5> =
				%% Line 1224
				call 'erlang':'or'
				    (_cor3, _cor4)
			    in  %% Line 1224
				call 'erlang':'or'
				    (_cor2, _cor5) ->
	      %% Line 1225
	      case apply 'get_circularity_mark'/2
		       (Ref, S) of
		%% Line 1226
		<[]> when 'true' ->
		    %% Line 1227
		    S
		%% Line 1228
		<From> when 'true' ->
		    let <_rec143> =
			%% Line 1229
			apply 'add_once'/2
			    ({From,{'typeDef',To}}, CD)
		    in  %% Line 1229
			call 'erlang':'setelement'
			    (32, S, _rec143)
	      end
	  %% Line 1231
	  <_cor75,S> when 'true' ->
	      %% Line 1232
	      S
	end
'get_circularity_mark'/2 =
    %% Line 1233
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{TD,_cor11},S>
	      when let <_cor2> =
		    %% Line 1234
		    call 'erlang':'=:='
			(TD, 'simpleType')
		in  let <_cor3> =
			%% Line 1234
			call 'erlang':'=:='
			    (TD, 'complexType')
		    in  let <_cor4> =
			    %% Line 1234
			    call 'erlang':'=:='
				(TD, 'simple_or_complex_Type')
			in  let <_cor5> =
				%% Line 1234
				call 'erlang':'or'
				    (_cor3, _cor4)
			    in  %% Line 1234
				call 'erlang':'or'
				    (_cor2, _cor5) ->
	      %% Line 1235
	      ( case S of
		  ( <( {'xsd_state',_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_rec145,_cor41,_cor42}
		       -| ['compiler_generated'] )> when 'true' ->
			case _rec145 of
			  %% Line 1236
			  <[From = {'typeDef',_cor44}|_cor45]> when 'true' ->
			      %% Line 1237
			      From
			  %% Line 1238
			  <_cor46> when 'true' ->
			      []
			end
		    -| ['compiler_generated'] )
		  ( <_cor43> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','xsd_state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1240
	  <_cor47,_X_S> when 'true' ->
	      %% Line 1241
	      []
	end
'push_circularity_mark'/2 =
    %% Line 1243
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Mark,S = {'xsd_state',_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,%% Line 1244
																		     'false',_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,CS,_cor35,_cor36}> when 'true' ->
	      let <_rec146> =
		  %% Line 1245
		  [Mark|CS]
	      in  %% Line 1245
		  call 'erlang':'setelement'
		      (31, S, _rec146)
	  %% Line 1246
	  <_cor70,S> when 'true' ->
	      %% Line 1247
	      S
	end
'pop_circularity_mark'/2 =
    %% Line 1248
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Mark,S = {'xsd_state',_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,'false',_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39}> when 'true' ->
	      %% Line 1249
	      case _cor37 of
		%% Line 1250
		<[_cor72|Rest]>
		    when call 'erlang':'=:='
			  (_cor72,
			   Mark) ->
		    %% Line 1251
		    call 'erlang':'setelement'
			(31, S, Rest)
		%% Line 1252
		<_cor106> when 'true' ->
		    %% Line 1253
		    S
	      end
	  %% Line 1255
	  <_cor107,S> when 'true' ->
	      %% Line 1256
	      S
	end
'derived_type'/2 =
    %% Line 1258
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'complexType',{'schema_complex_type',Name,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,C,_cor25}},S = %% Line 1259
																		  {'xsd_state',_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,DT,_cor53,_cor54,_cor55,_cor56}> when 'true' ->
	      let <_cor3> =
		  %% Line 1260
		  call 'lists':'keymember'
		      ('restriction', 1, C)
	      in  let <_cor2> =
		      %% Line 1260
		      call 'lists':'keymember'
			  ('extension', 1, C)
		  in  %% Line 1260
		      case <_cor3,_cor2> of
			%% Line 1261
			<'false','false'> when 'true' ->
			    %% Line 1262
			    S
			%% Line 1263
			<_fol2121,_fol2122> when 'true' ->
			    let <_rec150> =
				%% Line 1264
				[{'complexType',Name}|DT]
			    in  %% Line 1264
				call 'erlang':'setelement'
				    (29, S, _rec150)
		      end
	  %% Line 1266
	  <{'simpleType',{'schema_simple_type',Name,_cor91,_cor92,_cor93,_cor94,_cor95,_cor96,_cor97,C}},S = %% Line 1267
													     {'xsd_state',_cor98,_cor99,_cor100,_cor101,_cor102,_cor103,_cor104,_cor105,_cor106,_cor107,_cor108,_cor109,_cor110,_cor111,_cor112,_cor113,_cor114,_cor115,_cor116,_cor117,_cor118,_cor119,_cor120,_cor121,_cor122,_cor123,_cor124,DT,_cor125,_cor126,_cor127,_cor128}> when 'true' ->
	      %% Line 1268
	      case call 'lists':'keymember'
		       ('restriction', 1, C) of
		%% Line 1269
		<'true'> when 'true' ->
		    let <_rec152> =
			%% Line 1270
			[{'simpleType',Name}|DT]
		    in  %% Line 1270
			call 'erlang':'setelement'
			    (29, S, _rec152)
		%% Line 1271
		<_cor162> when 'true' ->
		    %% Line 1272
		    S
	      end
	  ( <_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12})
		  -| [{'function_name',{'derived_type',2}}] )
	    -| ['compiler_generated'] )
	end
'facets'/2 =
    %% Line 1275
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{'annotation',_cor12}|Rest],S> when 'true' ->
	      %% Line 1276
	      apply 'facets'/2
		  (Rest, S)
	  %% Line 1277
	  <[{'restriction',{BaseType,CM}}|[]],_X_S> when 'true' ->
	      let <_cor7> =
		  %% Line 1278
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor4) ->
				case _cor4 of
				  <[X = {F,_cor13}|_cor3]> when 'true' ->
				      ( case call 'xmerl_lib':'is_facet'
						 (F) of
					  <'true'> when 'true' ->
					      let <_cor5> =
						  apply 'lc$^0'/1
						      (_cor3)
					      in  ( [X|_cor5]
						    -| ['compiler_generated'] )
					  ( <'false'> when 'true' ->
						apply 'lc$^0'/1
						    (_cor3)
					    -| ['compiler_generated'] )
					  ( <_cor6> when 'true' ->
						primop 'match_fail'
						    ({'case_clause',_cor6})
					    -| ['compiler_generated'] )
					end
					-| ['list_comprehension'] )
				  ( <[_cor2|_cor3]> when 'true' ->
					apply 'lc$^0'/1
					    (_cor3)
				    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor4> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor4})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (CM)
		    -| ['list_comprehension'] )
	      in  let <GroupFacets> =
		      %% Line 1279
		      apply 'group_facets'/1
			  (_cor7)
		  in  %% Line 1280
		      {BaseType,GroupFacets}
	  %% Line 1281
	  <_cor14,_X_S> when 'true' ->
	      %% Line 1282
	      {'undefined',[]}
	end
'group_facets'/1 =
    %% Line 1284
    fun (_cor0) ->
	%% Line 1285
	apply 'group_facets'/2
	    (_cor0, [])
'group_facets'/2 =
    %% Line 1286
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <L = [{'enumeration',_cor13}|_X_Rest],Acc> when 'true' ->
	      let <_cor4> =
		  %% Line 1287
		  ( fun (_cor2) ->
			case _cor2 of
			  <{'enumeration',_cor14}> when 'true' ->
			      'true'
			  %% Line 1288
			  <_cor15> when 'true' ->
			      'false'
			end
		    -| [{'id',{0,0,'-group_facets/2-fun-0-'}}] )
	      in  %% Line 1287
		  case call 'lists':'splitwith'
			   (_cor4, %% Line 1290
				   L) of
		    <{Enums,Rest}> when 'true' ->
			let <_cor10> =
			    %% Line 1291
			    ( letrec
				  'lc$^0'/1 =
				      fun (_cor8) ->
					  case _cor8 of
					    <[{'enumeration',X}|_cor7]> when 'true' ->
						let <_cor9> =
						    apply 'lc$^0'/1
							(_cor7)
						in  ( [X|_cor9]
						      -| ['compiler_generated'] )
					    ( <[_cor6|_cor7]> when 'true' ->
						  apply 'lc$^0'/1
						      (_cor7)
					      -| ['compiler_generated'] )
					    <[]> when 'true' ->
						[]
					    ( <_cor8> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor8})
						    -| [{'function_name',{'lc$^0',1}}] )
					      -| ['compiler_generated'] )
					  end
			      in  apply 'lc$^0'/1
				      (Enums)
			      -| ['list_comprehension'] )
			in  %% Line 1291
			    apply 'group_facets'/2
				(Rest, [{'enumeration',_cor10}|Acc])
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor5})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1292
	  <[H|T],Acc> when 'true' ->
	      %% Line 1293
	      apply 'group_facets'/2
		  (T, [H|Acc])
	  %% Line 1294
	  <[],Acc> when 'true' ->
	      %% Line 1295
	      call 'lists':'reverse'
		  (Acc)
	  ( <_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11})
		  -| [{'function_name',{'group_facets',2}}] )
	    -| ['compiler_generated'] )
	end
'simpleType_final'/2 =
    %% Line 1297
    fun (_cor1,_cor0) ->
	let <Final> =
	    %% Line 1298
	    apply 'get_attribute_value'/3
		('final', _cor1, [])
	in  %% Line 1299
	    apply 'split_by_whitespace'/2
		(Final, [])
'redefine'/2 =
    %% Line 1304
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[CM|Rest],S> when 'true' ->
	      let <S2> =
		  %% Line 1305
		  apply 'redefine'/2
		      (CM, S)
	      in  %% Line 1306
		  apply 'redefine'/2
		      (Rest, S2)
	  %% Line 1307
	  <ST = {Type,_X_Name},S>
	      when let <_cor3> =
		    %% Line 1308
		    call 'erlang':'=:='
			(Type, 'simpleType')
		in  let <_cor4> =
			%% Line 1308
			call 'erlang':'=:='
			    (Type, 'complexType')
		    in  %% Line 1308
			call 'erlang':'or'
			    (_cor3, _cor4) ->
	      %% Line 1310
	      case apply 'resolve'/2
		       (ST, S) of
		<{OriginalType,S2}> when 'true' ->
		    %% Line 1312
		    case apply 'load_redefine_object'/2
			     (ST, S2) of
		      <{RedefinedType,S3}> when 'true' ->
			  %% Line 1313
			  case apply 'merge_derived_types'/4
				   (OriginalType, RedefinedType, 'redefine', S3) of
			    <{_X_MergedType,S4}> when 'true' ->
				%% Line 1314
				S4
			    ( <_cor7> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor7})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor6> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor6})
			-| ['compiler_generated'] )
		    end
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1315
	  <_cor10,S> when 'true' ->
	      %% Line 1317
	      S
	end
'keyrefer'/3 =
    %% Line 1319
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'keyref',El,S> when 'true' ->
	      let <Ref> =
		  %% Line 1320
		  apply 'get_attribute_value'/3
		      ('refer', El, 'undefined')
	      in  %% Line 1321
		  ( case El of
		      ( <( {'xmlElement',_cor10,_cor11,_cor12,_rec154,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19}
			   -| ['compiler_generated'] )> when 'true' ->
			    let <_cor4> =
				apply 'reset_scope'/1
				    (S)
			    in  apply 'get_QName'/3
				    (Ref, _rec154, _cor4)
			-| ['compiler_generated'] )
		      ( <_cor20> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','xmlElement'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  %% Line 1322
	  <_cor21,_cor22,_cor23> when 'true' ->
	      %% Line 1323
	      'undefined'
	end
'remove_annotation'/1 =
    %% Line 1325
    fun (_cor0) ->
	case _cor0 of
	  <CM>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      %% Line 1326
	      ( letrec
		    'lc$^0'/1 =
			fun (_cor3) ->
			    case _cor3 of
			      <[X = {K,_cor6}|_cor2]>
				  when call 'erlang':'=/='
					(K,
					 'annotation') ->
				  let <_cor4> =
				      apply 'lc$^0'/1
					  (_cor2)
				  in  ( [X|_cor4]
					-| ['compiler_generated'] )
			      ( <[_cor1|_cor2]> when 'true' ->
				    apply 'lc$^0'/1
					(_cor2)
				-| ['compiler_generated'] )
			      <[]> when 'true' ->
				  []
			      ( <_cor3> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_cor3})
				      -| [{'function_name',{'lc$^0',1}}] )
				-| ['compiler_generated'] )
			    end
		in  apply 'lc$^0'/1
			(CM)
		-| ['list_comprehension'] )
	  ( <_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5})
		  -| [{'function_name',{'remove_annotation',1}}] )
	    -| ['compiler_generated'] )
	end
'remove_attributes'/1 =
    %% Line 1327
    fun (_cor0) ->
	case _cor0 of
	  <CM>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      %% Line 1328
	      ( letrec
		    'lc$^0'/1 =
			fun (_cor7) ->
			    case _cor7 of
			      <[X = {K,_cor10}|_cor2]>
				  when try
					let <_cor3> =
					    call 'erlang':'=/='
						(K, 'attribute')
					in  let <_cor4> =
						call 'erlang':'=/='
						    (K, 'anyAttribute')
					    in  let <_cor5> =
						    call 'erlang':'=/='
							(K, 'attributeGroup')
						in  let <_cor6> =
							call 'erlang':'and'
							    (_cor4, _cor5)
						    in  call 'erlang':'and'
							    (_cor3, _cor6)
				    of <Try> ->
					Try
				    catch <T,R> ->
					'false' ->
				  let <_cor8> =
				      apply 'lc$^0'/1
					  (_cor2)
				  in  ( [X|_cor8]
					-| ['compiler_generated'] )
			      ( <[_cor1|_cor2]> when 'true' ->
				    apply 'lc$^0'/1
					(_cor2)
				-| ['compiler_generated'] )
			      <[]> when 'true' ->
				  []
			      ( <_cor7> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_cor7})
				      -| [{'function_name',{'lc$^0',1}}] )
				-| ['compiler_generated'] )
			    end
		in  apply 'lc$^0'/1
			(CM)
		-| ['list_comprehension'] )
	  ( <_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9})
		  -| [{'function_name',{'remove_attributes',1}}] )
	    -| ['compiler_generated'] )
	end
'keep_attributes'/1 =
    %% Line 1329
    fun (_cor0) ->
	case _cor0 of
	  <CM>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      %% Line 1330
	      ( letrec
		    'lc$^0'/1 =
			fun (_cor8) ->
			    case _cor8 of
			      <[X = {K,_cor11}|_cor2]>
				  when try
					( case <> of
					    ( <>
						  when call 'erlang':'=:='
							(K,
							 'attribute') ->
						  'true'
					      -| ['compiler_generated'] )
					    ( <> when 'true' ->
						  ( case <> of
						      ( <>
							    when call 'erlang':'=:='
								  (K,
								   'anyAttribute') ->
							    'true'
							-| ['compiler_generated'] )
						      ( <> when 'true' ->
							    call 'erlang':'=:='
								(K, 'attributeGroup')
							-| ['compiler_generated'] )
						    end
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					  end
					  -| ['compiler_generated'] )
				    of <Try> ->
					Try
				    catch <T,R> ->
					'false' ->
				  let <_cor9> =
				      apply 'lc$^0'/1
					  (_cor2)
				  in  ( [X|_cor9]
					-| ['compiler_generated'] )
			      ( <[_cor1|_cor2]> when 'true' ->
				    apply 'lc$^0'/1
					(_cor2)
				-| ['compiler_generated'] )
			      <[]> when 'true' ->
				  []
			      ( <_cor8> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_cor8})
				      -| [{'function_name',{'lc$^0',1}}] )
				-| ['compiler_generated'] )
			    end
		in  apply 'lc$^0'/1
			(CM)
		-| ['list_comprehension'] )
	  ( <_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10})
		  -| [{'function_name',{'keep_attributes',1}}] )
	    -| ['compiler_generated'] )
	end
'split_content'/1 =
    %% Line 1331
    fun (_cor0) ->
	case _cor0 of
	  <[{'restriction',{BaseT,CM}}|[]]> when 'true' ->
	      let <_cor2> =
		  %% Line 1332
		  apply 'remove_attributes'/1
		      (CM)
	      in  let <_cor1> =
		      %% Line 1332
		      apply 'keep_attributes'/1
			  (CM)
		  in  %% Line 1332
		      {[{'restriction',{BaseT,_cor2}}|[]],_cor1}
	  %% Line 1333
	  <[{'extension',{BaseT,CM}}|[]]> when 'true' ->
	      let <_cor4> =
		  %% Line 1334
		  apply 'remove_annotation'/1
		      (CM)
	      in  let <_cor5> =
		      %% Line 1334
		      apply 'remove_attributes'/1
			  (_cor4)
		  in  let <_cor3> =
			  %% Line 1335
			  apply 'keep_attributes'/1
			      (CM)
		      in  %% Line 1334
			  {[{'extension',{BaseT,_cor5}}|[]],_cor3}
	  %% Line 1336
	  <CM> when 'true' ->
	      let <_cor7> =
		  %% Line 1337
		  apply 'remove_attributes'/1
		      (CM)
	      in  let <_cor6> =
		      %% Line 1337
		      apply 'keep_attributes'/1
			  (CM)
		  in  %% Line 1337
		      {_cor7,_cor6}
	end
'restriction_base_type'/3 =
    %% Line 1339
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1340
	case apply 'base_type'/1
		 (_cor2) of
	  %% Line 1341
	  <[]> when 'true' ->
	      let <_cor7> =
		  %% Line 1342
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor5) ->
				case _cor5 of
				  <[X = {'simpleType',_cor23}|_cor4]> when 'true' ->
				      let <_cor6> =
					  apply 'lc$^0'/1
					      (_cor4)
				      in  ( [X|_cor6]
					    -| ['compiler_generated'] )
				  ( <[_cor3|_cor4]> when 'true' ->
					apply 'lc$^0'/1
					    (_cor4)
				    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor5> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor5})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (_cor1)
		    -| ['list_comprehension'] )
	      in  %% Line 1342
		  case _cor7 of
		    %% Line 1343
		    <[{'simpleType',TypeName}|[]]> when 'true' ->
			let <_cor8> =
			    %% Line 1344
			    call 'lists':'keydelete'
				('simpleType', 1, _cor1)
			in  %% Line 1344
			    {TypeName,_cor8,_cor0}
		    %% Line 1345
		    <Other> when 'true' ->
			%% Line 1346
			( case _cor2 of
			    ( <( {'xmlElement',_rec155,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33}
				 -| ['compiler_generated'] )> when 'true' ->
				  let <_cor11> =
				      apply 'error_path'/2
					  (_cor2, _rec155)
				  in  let <Err> = {_cor11,'xmerl_xsd',%% Line 1347
							      {'missing_base_type','restriction',Other}}
				      in  let <_cor13> =
					      %% Line 1348
					      apply 'acc_errs'/2
						  (_cor0, Err)
					  in  %% Line 1348
					      {{[],[],[]},_cor1,_cor13}
			      -| ['compiler_generated'] )
			    ( <_cor34> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','xmlElement'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		  end
	  %% Line 1350
	  <BT> when 'true' ->
	      %% Line 1351
	      ( case _cor2 of
		  ( <( {'xmlElement',_cor35,_cor36,_cor37,_rec156,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_cor15> =
			    apply 'reset_scope'/1
				(_cor0)
			in  let <_cor18> =
				apply 'get_QName'/3
				    (BT, _rec156, _cor15)
			    in  {_cor18,_cor1,_cor0}
		    -| ['compiler_generated'] )
		  ( <_cor45> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','xmlElement'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'base_type'/2 =
    %% Line 1354
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{'restriction',{BaseT,_cor8}}|[]],SCT> when 'true' ->
	      %% Line 1355
	      case SCT of
		<{'schema_complex_type',_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22}> when 'true' ->
		    call 'erlang':'setelement'
			(3, SCT, BaseT)
		( <_cor23> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','schema_complex_type'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 1356
	  <[{'extension',{BaseT,_cor24}}|[]],SCT> when 'true' ->
	      %% Line 1357
	      case SCT of
		<{'schema_complex_type',_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38}> when 'true' ->
		    call 'erlang':'setelement'
			(3, SCT, BaseT)
		( <_cor39> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','schema_complex_type'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 1358
	  <_cor40,SCT> when 'true' ->
	      %% Line 1359
	      SCT
	end
'variety'/1 =
    %% Line 1361
    fun (_cor0) ->
	case _cor0 of
	  <[{'list',_X_ItemType}|[]]> when 'true' ->
	      %% Line 1362
	      'list'
	  %% Line 1363
	  <[{'union',_X_ItemType}|[]]> when 'true' ->
	      %% Line 1364
	      'union'
	  %% Line 1365
	  <_cor2> when 'true' ->
	      %% Line 1366
	      'atomic'
	end
'pre_check_cm'/4 =
    %% Line 1370
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Kind,Cs = [C = {'xmlElement',_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20}|RestC],Name,S> when 'true' ->
	      %% Line 1371
	      case apply 'kind'/2
		       (C, S) of
		%% Line 1372
		<{'annotation',_cor21}> when 'true' ->
		    %% Line 1373
		    apply 'pre_check_cm2'/6
			(Kind, RestC, Name, C, S, 0)
		%% Line 1374
		<{_cor22,S2}> when 'true' ->
		    %% Line 1375
		    apply 'pre_check_cm2'/6
			(Kind, Cs, Name, C, S2, 0)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1377
	  <Kind,[_X_C|Cs],Name,S> when 'true' ->
	      %% Line 1378
	      apply 'pre_check_cm'/4
		  (Kind, Cs, Name, S)
	  %% Line 1379
	  <Kind,[],Name,S> when 'true' ->
	      let <Err> =
		  %% Line 1380
		  {[],'xmerl_xsd',{'content_failure',Kind,[],Name}}
	      in  %% Line 1381
		  apply 'acc_errs'/2
		      (S, Err)
	  ( <_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'pre_check_cm',4}}] )
	    -| ['compiler_generated'] )
	end
'pre_check_cm2'/6 =
    %% Line 1383
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Kind,[C = {'xmlElement',_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39}|Cs],Name,_X_El,S,N> when 'true' ->
	      let <_cor11> =
		  %% Line 1385
		  case apply 'kind'/2
			   (C, S) of
		    %% Line 1386
		    <{'restriction',_cor40}> when 'true' ->
			%% Line 1387
			S
		    %% Line 1388
		    <{'extension',_cor41}> when 'true' ->
			%% Line 1389
			S
		    %% Line 1390
		    <{Other,S1}> when 'true' ->
			let <_cor8> =
			    %% Line 1391
			    apply 'error_path'/2
				(C, _cor29)
			in  let <Err> =
				%% Line 1391
				{_cor8,'xmerl_xsd',%% Line 1392
						   {'illegal_element',Kind,Other,Name}}
			    in  %% Line 1393
				apply 'acc_errs'/2
				    (S1, Err)
		    ( <_cor10> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor10})
		      -| ['compiler_generated'] )
		  end
	      in  let <_cor13> =
		      %% Line 1395
		      call 'erlang':'+'
			  (N, 1)
		  in  %% Line 1395
		      apply 'pre_check_cm2'/6
			  (Kind, Cs, Name, C, _cor11, _cor13)
	  %% Line 1396
	  <Kind,[_X_H|T],Name,El,S,N> when 'true' ->
	      %% Line 1397
	      apply 'pre_check_cm2'/6
		  (Kind, T, Name, El, S, N)
	  %% Line 1398
	  <_cor53,[],_cor54,_cor55,S,N>
	      when call 'erlang':'=='
		    (N,
		     1) ->
	      %% Line 1399
	      S
	  %% Line 1400
	  <Kind,[],Name,El,S,N> when 'true' ->
	      let <_cor21> =
		  %% Line 1402
		  case N of
		    %% Line 1403
		    <0> when 'true' ->
			%% Line 1404
			( case El of
			    ( <( {'xmlElement',_rec160,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65}
				 -| ['compiler_generated'] )> when 'true' ->
				  let <_cor16> =
				      apply 'error_path'/2
					  (El, _rec160)
				  in  {_cor16,'xmerl_xsd',%% Line 1405
							  {'content_failure_expected_restriction_or_extension',%% Line 1406
													       Kind,%% Line 1406
														    Name}}
			      -| ['compiler_generated'] )
			    ( <_cor66> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','xmlElement'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    %% Line 1407
		    <_cor67> when 'true' ->
			%% Line 1408
			( case El of
			    ( <( {'xmlElement',_rec161,_cor68,_cor69,_cor70,_cor71,_cor72,_cor73,_cor74,_cor75,_cor76,_cor77}
				 -| ['compiler_generated'] )> when 'true' ->
				  let <_cor19> =
				      apply 'error_path'/2
					  (El, _rec161)
				  in  {_cor19,'xmerl_xsd',%% Line 1409
							  {'content_failure_only_one_restriction_or_extension_allowed',%% Line 1410
														       Kind,%% Line 1410
															    Name}}
			      -| ['compiler_generated'] )
			    ( <_cor78> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','xmlElement'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		  end
	      in  %% Line 1412
		  apply 'acc_errs'/2
		      (S, _cor21)
	  ( <_cor28,_cor27,_cor26,_cor25,_cor24,_cor23> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor28,_cor27,_cor26,_cor25,_cor24,_cor23})
		  -| [{'function_name',{'pre_check_cm2',6}}] )
	    -| ['compiler_generated'] )
	end
'check_cm'/4 =
    %% Line 1418
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1419
	case apply 'check_cm2'/4
		 (_cor3, _cor2, _cor1, _cor0) of
	  %% Line 1420
	  <{[],_X_S}> when 'true' ->
	      _cor0
	  %% Line 1422
	  <{[_cor9|[[]|_cor10]],_X_S}> when 'true' ->
	      _cor0
	  %% Line 1424
	  <{_X_CM,S2}> when 'true' ->
	      %% Line 1425
	      S2
	  %% Line 1426
	  <Err> when 'true' ->
	      %% Line 1427
	      call 'erlang':'exit'
		  ({'error',{[],'xmerl_xsd',{'internal_error',Err}}})
	end
'check_cm2'/4 =
    %% Line 1430
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Kind,{'chain',S4SCM,Occ},%% Line 1431
				    ContentModel,%% Line 1431
						 S> when 'true' ->
	      %% Line 1432
	      case apply 'occurance_loop'/4
		       (Occ, ( 'check_chain'/1
			       -| [{'id',{0,0,'-check_cm2/4-fun-0-'}}] ), %% Line 1433
									  [S4SCM|[ContentModel|[Kind|[S|[]]]]], %% Line 1433
														0) of
		%% Line 1434
		<{'ok',[]}> when 'true' ->
		    %% Line 1435
		    {[],S}
		%% Line 1436
		<{'ok',[S4SCMRest|[CMRest|_cor18]]}> when 'true' ->
		    %% Line 1437
		    case apply 'all_optional'/1
			     (S4SCMRest) of
		      %% Line 1438
		      <'true'> when 'true' ->
			  %% Line 1439
			  {CMRest,S}
		      %% Line 1440
		      <_cor19> when 'true' ->
			  let <Err> = {%% Line 1441
			       [],%% Line 1441
				  'xmerl_xsd',%% Line 1442
					      {'mandatory_component_missing',S4SCMRest,Kind}}
			  in  %% Line 1443
			      apply 'acc_errs'/2
				  (S, Err)
		    end
		%% Line 1445
		<{'error',{_cor20,_cor21,Reason}}> when 'true' ->
		    let <Err> = {%% Line 1446
			 [],%% Line 1446
			    'xmerl_xsd',%% Line 1446
					{'illegal_content',Reason,Kind}}
		    in  let <_cor7> =
			    %% Line 1447
			    apply 'acc_errs'/2
				(S, Err)
			in  %% Line 1447
			    {ContentModel,_cor7}
		( <_cor8> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor8})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1449
	  <Kind,{'alternative',S4SCM,Occ},%% Line 1450
					  ContentModel,%% Line 1450
						       S> when 'true' ->
	      %% Line 1451
	      case apply 'occurance_loop'/4
		       (Occ, ( 'check_alternative'/1
			       -| [{'id',{0,0,'-check_cm2/4-fun-1-'}}] ), %% Line 1452
									  [S4SCM|[ContentModel|[Kind|[S|[]]]]], %% Line 1452
														0) of
		%% Line 1453
		<{'ok',[]}> when 'true' ->
		    %% Line 1454
		    {[],S}
		%% Line 1455
		<{'ok',[_cor22|[CMRest|_cor23]]}> when 'true' ->
		    %% Line 1456
		    {CMRest,S}
		%% Line 1457
		<{'error',Reason}> when 'true' ->
		    let <_cor9> =
			%% Line 1458
			apply 'acc_errs'/2
			    (S, Reason)
		    in  %% Line 1458
			{ContentModel,_cor9}
		( <_cor10> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor10})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1460
	  <_cor24,{Kind,Occ},CM,S> when 'true' ->
	      %% Line 1461
	      case apply 'occurance_loop'/4
		       (Occ, ( 'check_simple_cm'/1
			       -| [{'id',{0,0,'-check_cm2/4-fun-2-'}}] ), [Kind|[CM|[]]], 0) of
		%% Line 1462
		<{'ok',[]}> when 'true' ->
		    %% Line 1463
		    {[],S}
		%% Line 1464
		<{'ok',[_cor25|[CMRest|_cor26]]}> when 'true' ->
		    %% Line 1465
		    {CMRest,S}
		%% Line 1466
		<{'error',Reason}> when 'true' ->
		    let <_cor11> =
			%% Line 1467
			apply 'acc_errs'/2
			    (S, Reason)
		    in  %% Line 1467
			{CM,_cor11}
		%% Line 1468
		<Err> when 'true' ->
		    let <_cor12> =
			%% Line 1469
			apply 'acc_errs'/2
			    (S, Err)
		    in  %% Line 1469
			{CM,_cor12}
	      end
	  ( <_cor17,_cor16,_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor17,_cor16,_cor15,_cor14})
		  -| [{'function_name',{'check_cm2',4}}] )
	    -| ['compiler_generated'] )
	end
'check_simple_cm'/1 =
    %% Line 1473
    fun (_cor0) ->
	case _cor0 of
	  <[Kind|[CM|[]]]> when 'true' ->
	      %% Line 1474
	      apply 'check_simple_cm'/2
		  (Kind, CM)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'check_simple_cm',1}}] )
	    -| ['compiler_generated'] )
	end
'check_simple_cm'/2 =
    %% Line 1477
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Kind,[]> when 'true' ->
	      %% Line 1478
	      {'error',{[],'xmerl_xsd',{'no_match',{Kind,[]}}}}
	  %% Line 1479
	  <Kind,[{_cor7,_cor8}|Rest]>
	      when call 'erlang':'=:='
		    (_cor7,
		     Kind) ->
	      %% Line 1480
	      {'ok',[Kind|[Rest|[]]]}
	  %% Line 1481
	  <Kind,[{Other,_cor9}|Rest]>
	      when let <_cor2> =
		    %% Line 1482
		    call 'erlang':'=:='
			(Kind, 'simpleType')
		in  let <_cor3> =
			%% Line 1482
			call 'erlang':'=:='
			    (Kind, 'complexType')
		    in  %% Line 1482
			call 'erlang':'or'
			    (_cor2, _cor3) ->
	      %% Line 1483
	      case Other of
		%% Line 1484
		<'simple_or_complex_Type'> when 'true' ->
		    {'ok',[Kind|[Rest|[]]]}
		%% Line 1485
		<_cor10> when 'true' ->
		    {'error',{[],'xmerl_xsd',{'no_match',Other}}}
	      end
	  %% Line 1487
	  <_X_Kind,[{Other,_cor11}|_cor12]> when 'true' ->
	      %% Line 1488
	      {'error',{[],'xmerl_xsd',{'no_match',Other}}}
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'check_simple_cm',2}}] )
	    -| ['compiler_generated'] )
	end
'check_chain'/1 =
    %% Line 1491
    fun (_cor0) ->
	case _cor0 of
	  <[S4SCM|[ContentModel|[Kind|[S|[]]]]]> when 'true' ->
	      %% Line 1492
	      apply 'check_chain'/4
		  (Kind, S4SCM, ContentModel, S)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'check_chain',1}}] )
	    -| ['compiler_generated'] )
	end
'check_chain'/4 =
    %% Line 1493
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Kind,[S4SC|S4SCs],ChainCM = [_X_H|_X_T],S = %% Line 1494
						       {'xsd_state',_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,Errs}> when 'true' ->
	      let <_cor5> =
		  %% Line 1496
		  case S4SC of
		    %% Line 1497
		    <{NK,_cor45}> when 'true' ->
			NK
		    %% Line 1498
		    <_cor46> when 'true' ->
			Kind
		  end
	      in  %% Line 1500
		  case apply 'check_cm2'/4
			   (_cor5, S4SC, ChainCM, S) of
		    %% Line 1501
		    <{ChainCMRest,{'xsd_state',_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,_cor69,_cor70,_cor71,_cor72,_cor73,_cor74,_cor75,_cor76,_cor77,_cor78}}>
			when call 'erlang':'=:='
			      (_cor78,
			       Errs) ->
			%% Line 1502
			apply 'check_chain'/4
			    (Kind, S4SCs, ChainCMRest, S)
		    %% Line 1503
		    <{_X_ChainCMRest,_X_S2}> when 'true' ->
			%% Line 1504
			case apply 'optional'/1
				 (S4SC) of
			  %% Line 1505
			  <'true'> when 'true' ->
			      %% Line 1506
			      apply 'check_chain'/4
				  (Kind, S4SCs, ChainCM, S)
			  %% Line 1507
			  <_cor79> when 'true' ->
			      %% Line 1508
			      {'error',{[],'xmerl_xsd',{'unmatched_mandatory_object',Kind,S4SC}}}
			end
		    ( <_cor8> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor8})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1511
	  <Kind,[],CM,S> when 'true' ->
	      %% Line 1512
	      {'ok',[[]|[CM|[Kind|[S|[]]]]]}
	  %% Line 1513
	  <Kind,Rest,CM,S> when 'true' ->
	      %% Line 1514
	      case apply 'all_optional'/1
		       (Rest) of
		%% Line 1515
		<'true'> when 'true' ->
		    %% Line 1516
		    {'ok',[Rest|[CM|[Kind|[S|[]]]]]}
		%% Line 1517
		<_cor80> when 'true' ->
		    %% Line 1518
		    {'error',{[],'xmerl_xsd',{'bad_match',Rest,CM}}}
	      end
	end
'check_alternative'/1 =
    %% Line 1523
    fun (_cor0) ->
	case _cor0 of
	  <[S4SC|[CM|[Kind|[S|[]]]]]> when 'true' ->
	      %% Line 1524
	      apply 'check_alternative'/4
		  (Kind, S4SC, CM, S)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'check_alternative',1}}] )
	    -| ['compiler_generated'] )
	end
'check_alternative'/4 =
    %% Line 1525
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Kind,[S4SC|S4SCs],AltCM = [_X_H|_X_T],S = %% Line 1526
						     {'xsd_state',_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,Err}> when 'true' ->
	      let <_cor5> =
		  %% Line 1528
		  case S4SC of
		    %% Line 1529
		    <{NK,_cor43}> when 'true' ->
			NK
		    %% Line 1530
		    <_cor44> when 'true' ->
			Kind
		  end
	      in  %% Line 1532
		  case apply 'check_cm2'/4
			   (_cor5, S4SC, AltCM, S) of
		    %% Line 1533
		    <{AltCMRest,{'xsd_state',_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,_cor69,_cor70,_cor71,_cor72,_cor73,_cor74,_cor75,_cor76}}>
			when call 'erlang':'=:='
			      (_cor76,
			       Err) ->
			%% Line 1534
			{'ok',[[S4SC|[]]|[AltCMRest|[Kind|[S|[]]]]]}
		    %% Line 1535
		    <{AltCMRest,_X_S2}> when 'true' ->
			%% Line 1536
			apply 'check_alternative'/4
			    (Kind, S4SCs, AltCMRest, S)
		    ( <_cor7> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor7})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1538
	  <Kind,[],_X_AltCM,_X_S> when 'true' ->
	      %% Line 1539
	      {'error',{[],'xmerl_xsd',{'no_match',Kind}}}
	  ( <_cor11,_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9,_cor8})
		  -| [{'function_name',{'check_alternative',4}}] )
	    -| ['compiler_generated'] )
	end
'occurance_loop'/4 =
    %% Line 1546
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{Min,Max},_X_CheckFun,[_cor15|[[]|_X_Rest]],N>
	      when let <_cor4> =
		    %% Line 1547
		    call 'erlang':'=<'
			(Min, N)
		in  let <_cor5> =
			%% Line 1547
			call 'erlang':'>='
			    (Max, N)
		    in  %% Line 1547
			call 'erlang':'and'
			    (_cor4, _cor5) ->
	      %% Line 1548
	      {'ok',[]}
	  %% Line 1549
	  <Occ = {Min,Max},CheckFun,Args,N> when 'true' ->
	      let <Nplus1> =
		  %% Line 1550
		  call 'erlang':'+'
		      (N, 1)
	      in  %% Line 1551
		  case apply CheckFun
			   (Args) of
		    %% Line 1552
		    <{'error',{_cor16,_cor17,{'no_match',_cor18}}}>
			when let <_cor7> =
			      call 'erlang':'=<'
				  (Min, N)
			  in  let <_cor8> =
				  call 'erlang':'>='
				      (Max, N)
			      in  call 'erlang':'and'
				      (_cor7, _cor8) ->
			%% Line 1553
			{'ok',Args}
		    %% Line 1554
		    <Err = {'error',_cor19}> when 'true' ->
			%% Line 1555
			Err
		    %% Line 1556
		    <{'ok',_cor20}>
			when call 'erlang':'=:='
			      (_cor20,
			       Args) ->
			let <_cor9> =
			    %% Line 1557
			    apply 'occurance_kind'/1
				(Args)
			in  %% Line 1557
			    {'error',{[],'xmerl_xsd',{'no_match',_cor9}}}
		    %% Line 1558
		    <{'ok',NewArgs}>
			when call 'erlang':'<'
			      (Nplus1,
			       Max) ->
			%% Line 1559
			apply 'occurance_loop'/4
			    (Occ, CheckFun, NewArgs, Nplus1)
		    %% Line 1560
		    <Ret = {'ok',_X_NewArgs}> when 'true' ->
			%% Line 1561
			Ret
		    ( <_cor10> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor10})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor14,_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12,_cor11})
		  -| [{'function_name',{'occurance_loop',4}}] )
	    -| ['compiler_generated'] )
	end
'occurance_kind'/1 =
    %% Line 1564
    fun (_cor0) ->
	case _cor0 of
	  <[Kind|[_cor2|[]]]> when 'true' ->
	      %% Line 1565
	      Kind
	  %% Line 1566
	  <[_cor3|[_cor4|[Kind|[_cor5|[]]]]]> when 'true' ->
	      %% Line 1567
	      Kind
	  %% Line 1568
	  <_cor6> when 'true' ->
	      %% Line 1569
	      []
	end
'count_occur'/1 =
    %% Line 1585
    fun (_cor0) ->
	case _cor0 of
	  <{Min,Max}> when 'true' ->
	      let <_cor1> =
		  %% Line 1587
		  apply 'decrease'/1
		      (Min)
	      in  %% Line 1587
		  {_cor1,Max}
	  %% Line 1588
	  <Other> when 'true' ->
	      %% Line 1589
	      Other
	end
'decrease'/1 =
    %% Line 1591
    fun (_cor0) ->
	case _cor0 of
	  <I>
	      when let <_cor1> =
		    call 'erlang':'is_integer'
			(_cor0)
		in  let <_cor2> =
			call 'erlang':'>'
			    (_cor0, 0)
		    in  call 'erlang':'and'
			    (_cor1, _cor2) ->
	      %% Line 1592
	      call 'erlang':'-'
		  (I, 1)
	  %% Line 1593
	  <I> when 'true' ->
	      %% Line 1594
	      I
	end
'decrease_occurance'/1 =
    %% Line 1596
    fun (_cor0) ->
	case _cor0 of
	  <{K,{ID,Occ}}> when 'true' ->
	      let <_cor1> =
		  %% Line 1597
		  apply 'count_occur'/1
		      (Occ)
	      in  %% Line 1597
		  {K,{ID,_cor1}}
	  %% Line 1598
	  <Other> when 'true' ->
	      %% Line 1599
	      Other
	end
'get_occur'/1 =
    %% Line 1601
    fun (_cor0) ->
	case _cor0 of
	  <{_cor2,{_cor3,Occ = {Min,_cor4}}}>
	      when call 'erlang':'is_integer'
		    (Min) ->
	      %% Line 1602
	      Occ
	  %% Line 1603
	  <{_cor5,{_cor6,Occ = {Min,_cor7},_cor8}}>
	      when call 'erlang':'is_integer'
		    (Min) ->
	      %% Line 1604
	      Occ
	  %% Line 1605
	  <Other> when 'true' ->
	      %% Line 1606
	      Other
	end
'optional'/1 =
    %% Line 1617
    fun (_cor0) ->
	case _cor0 of
	  <'optional_text'> when 'true' ->
	      %% Line 1618
	      'true'
	  %% Line 1619
	  <{_cor2,{0,_cor3}}> when 'true' ->
	      %% Line 1620
	      'true'
	  %% Line 1621
	  <{_cor4,{_cor5,{0,_cor6}}}> when 'true' ->
	      %% Line 1622
	      'true'
	  %% Line 1623
	  <{'any',{_cor7,{0,_cor8},_cor9}}> when 'true' ->
	      %% Line 1624
	      'true'
	  %% Line 1625
	  <{'chain',_cor10,{0,_cor11}}> when 'true' ->
	      %% Line 1626
	      'true'
	  %% Line 1627
	  <{'alternative',_cor12,{0,_cor13}}> when 'true' ->
	      %% Line 1628
	      'true'
	  %% Line 1629
	  <{'chain',Content,_cor14}> when 'true' ->
	      catch
		  %% Line 1630
		  apply 'is_optional_content'/1
		      (Content)
	  %% Line 1631
	  <{'alternative',Content,_cor15}> when 'true' ->
	      catch
		  %% Line 1632
		  apply 'is_optional_content'/1
		      (Content)
	  %% Line 1633
	  <{'all',{Content,_cor16}}> when 'true' ->
	      catch
		  %% Line 1634
		  apply 'is_optional_content'/1
		      (Content)
	  %% Line 1635
	  <_cor17> when 'true' ->
	      %% Line 1636
	      'false'
	end
'is_optional_content'/1 =
    %% Line 1638
    fun (_cor0) ->
	case _cor0 of
	  <[H|T]> when 'true' ->
	      %% Line 1639
	      case apply 'optional'/1
		       (H) of
		%% Line 1640
		<'true'> when 'true' ->
		    %% Line 1641
		    apply 'is_optional_content'/1
			(T)
		%% Line 1642
		<'false'> when 'true' ->
		    %% Line 1643
		    call 'erlang':'throw'
			('false')
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1645
	  <[]> when 'true' ->
	      %% Line 1646
	      'true'
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'is_optional_content',1}}] )
	    -| ['compiler_generated'] )
	end
'not_optional'/1 =
    %% Line 1648
    fun (_cor0) ->
	%% Line 1649
	case apply 'optional'/1
		 (_cor0) of
	  %% Line 1650
	  <'true'> when 'true' ->
	      %% Line 1651
	      'false'
	  %% Line 1652
	  <_cor3> when 'true' ->
	      %% Line 1653
	      'true'
	end
'all_optional'/1 =
    %% Line 1656
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      %% Line 1657
	      'true'
	  %% Line 1658
	  <L> when 'true' ->
	      %% Line 1659
	      case call 'lists':'filter'
		       (( 'not_optional'/1
			  -| [{'id',{0,0,'-all_optional/1-fun-0-'}}] ), L) of
		%% Line 1660
		<[]> when 'true' ->
		    %% Line 1661
		    'true'
		%% Line 1662
		<_cor3> when 'true' ->
		    %% Line 1663
		    'false'
	      end
	end
'allowed_content'/2 =
    %% Line 1669
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'element',_X_Parents> when 'true' ->
	      %% Line 1670
	      {'chain',[{'annotation',{0,1}}|[{'chain',[{'alternative',[{'simpleType',{1,1}}|[{'complexType',{1,1}}]],{0,1}}|[{'alternative',[{'unique',{1,1}}|[{'key',{1,1}}|[{'keyref',{1,1}}]]],{0,'unbounded'}}]],{1,1}}]],{1,1}}
	  %% Line 1681
	  <'attribute',_X_Parents> when 'true' ->
	      %% Line 1682
	      {'chain',[{'annotation',{0,1}}|[{'simpleType',{0,1}}]],{1,1}}
	  %% Line 1683
	  <'complexType',Parents> when 'true' ->
	      let <_cor2> =
		  %% Line 1687
		  apply 'allowed_content'/2
		      ('simpleContent', Parents)
	      in  let <_cor3> =
		      %% Line 1687
		      apply 'set_occurance'/2
			  (_cor2, {1,1})
		  in  let <_cor4> =
			  %% Line 1688
			  apply 'allowed_content'/2
			      ('complexContent', Parents)
		      in  let <_cor5> =
			      %% Line 1688
			      apply 'set_occurance'/2
				  (_cor4, {1,1})
			  in  %% Line 1684
			      {'chain',%% Line 1685
				       [{'annotation',{0,1}}|%% Line 1686
							     [{'alternative',%% Line 1687
									     [_cor3|%% Line 1688
										    [_cor5|%% Line 1689
											   [{'chain',[{'alternative',[{'group',{1,1}}|[{'all',{1,1}}|[{'choice',{1,1}}|[{'sequence',{1,1}}]]]],{0,1}}|[{'chain',[{'alternative',[{'attribute',{1,1}}|[{'attributeGroup',{1,1}}]],{0,'unbounded'}}|[{'anyAttribute',{0,1}}]],{1,1}}]],{1,1}}]]],{0,1}}|%% Line 1705
																																										      []]],{1,1}}
	  %% Line 1707
	  <'attributeGroup',Parents> when 'true' ->
	      %% Line 1708
	      case call 'lists':'member'
		       ('simpleContent', Parents) of
		%% Line 1709
		<'true'> when 'true' ->
		    %% Line 1710
		    {'annotation',{0,1}}
		%% Line 1711
		<_cor36> when 'true' ->
		    %% Line 1712
		    {'chain',[{'annotation',{0,1}}|[{'chain',[{'alternative',[{'attribute',{1,1}}|[{'attributeGroup',{1,1}}]],{0,'unbounded'}}|[{'anyAttribute',{0,1}}]],{1,1}}]],{1,1}}
	      end
	  %% Line 1721
	  <'group',_X_Parents> when 'true' ->
	      %% Line 1722
	      {'chain',[{'annotation',{0,1}}|[{'alternative',[{'all',{1,1}}|[{'choice',{1,1}}|[{'sequence',{1,1}}]]],{0,1}}]],{1,1}}
	  %% Line 1727
	  <'all',_X_Parents> when 'true' ->
	      %% Line 1728
	      {'chain',[{'annotation',{0,1}}|[{'element',{0,'unbounded'}}]],{1,1}}
	  %% Line 1729
	  <SorC,_X_Parents>
	      when let <_cor7> =
		    call 'erlang':'=:='
			(SorC, 'sequence')
		in  let <_cor8> =
			call 'erlang':'=:='
			    (SorC, 'choice')
		    in  call 'erlang':'or'
			    (_cor7, _cor8) ->
	      %% Line 1730
	      {'chain',[{'annotation',{0,1}}|[{'alternative',[{'element',{1,1}}|[{'group',{1,1}}|[{'choice',{1,1}}|[{'sequence',{1,1}}|[{'any',{1,1}}]]]]],{0,'unbounded'}}]],{1,1}}
	  %% Line 1737
	  <E,_X_Parents>
	      when let <_cor9> =
		    %% Line 1738
		    call 'erlang':'=:='
			(E, 'any')
		in  let <_cor10> =
			%% Line 1738
			call 'erlang':'=:='
			    (E, 'selector')
		    in  let <_cor11> =
			    %% Line 1738
			    call 'erlang':'=:='
				(E, 'field')
			in  let <_cor12> =
				%% Line 1738
				call 'erlang':'=:='
				    (E, 'notation')
			    in  let <_cor13> =
				    %% Line 1738
				    call 'erlang':'=:='
					(E, 'include')
				in  let <_cor14> =
					%% Line 1738
					call 'erlang':'=:='
					    (E, 'import')
				    in  let <_cor15> =
					    %% Line 1739
					    call 'erlang':'=:='
						(E, 'anyAttribute')
					in  let <_cor16> =
						%% Line 1738
						call 'erlang':'or'
						    (_cor14, _cor15)
					    in  let <_cor17> =
						    %% Line 1738
						    call 'erlang':'or'
							(_cor13, _cor16)
						in  let <_cor18> =
							%% Line 1738
							call 'erlang':'or'
							    (_cor12, _cor17)
						    in  let <_cor19> =
							    %% Line 1738
							    call 'erlang':'or'
								(_cor11, _cor18)
							in  let <_cor20> =
								%% Line 1738
								call 'erlang':'or'
								    (_cor10, _cor19)
							    in  %% Line 1738
								call 'erlang':'or'
								    (_cor9, _cor20) ->
	      %% Line 1740
	      {'annotation',{0,1}}
	  %% Line 1741
	  <UKK,_X_Parents>
	      when let <_cor21> =
		    call 'erlang':'=:='
			(UKK, 'unique')
		in  let <_cor22> =
			call 'erlang':'=:='
			    (UKK, 'key')
		    in  let <_cor23> =
			    call 'erlang':'=:='
				(UKK, 'keyref')
			in  let <_cor24> =
				call 'erlang':'or'
				    (_cor22, _cor23)
			    in  call 'erlang':'or'
				    (_cor21, _cor24) ->
	      %% Line 1742
	      {'chain',[{'annotation',{0,1}}|[{'chain',[{'selector',{1,1}}|[{'selector',{1,'unbounded'}}]],{1,1}}]],{1,1}}
	  %% Line 1746
	  <'annotation',_X_Parents> when 'true' ->
	      %% Line 1747
	      {'alternative',[{'appinfo',{1,1}}|[{'documentation',{1,1}}]],{0,'unbounded'}}
	  %% Line 1749
	  <E,_X_Parents>
	      when let <_cor25> =
		    call 'erlang':'=:='
			(E, 'appinfo')
		in  let <_cor26> =
			call 'erlang':'=:='
			    (E, 'documentation')
		    in  call 'erlang':'or'
			    (_cor25, _cor26) ->
	      %% Line 1750
	      {'any',{0,'unbounded'}}
	  %% Line 1751
	  <'simpleType',_X_Parents> when 'true' ->
	      %% Line 1752
	      {'chain',[{'annotation',{0,1}}|[{'alternative',[{'restriction',{1,1}}|[{'list',{1,1}}|[{'union',{1,1}}]]],{0,1}}]],{1,1}}
	  %% Line 1756
	  <'restriction',Parents> when 'true' ->
	      %% Line 1757
	      case call 'lists':'member'
		       ('simpleType', Parents) of
		%% Line 1758
		<'true'> when 'true' ->
		    %% Line 1759
		    apply 'allowed_content2'/2
			('restriction', 'simpleType')
		%% Line 1760
		<_cor37> when 'true' ->
		    %% Line 1761
		    case call 'lists':'member'
			     ('simpleContent', Parents) of
		      %% Line 1762
		      <'true'> when 'true' ->
			  %% Line 1763
			  apply 'allowed_content2'/2
			      ('restriction', 'simpleContent')
		      %% Line 1764
		      <_cor38> when 'true' ->
			  %% Line 1765
			  apply 'allowed_content2'/2
			      ('restriction', 'complexContent')
		    end
	      end
	  %% Line 1768
	  <LU,_X_Parent>
	      when let <_cor29> =
		    call 'erlang':'=:='
			(LU, 'list')
		in  let <_cor30> =
			call 'erlang':'=:='
			    (LU, 'union')
		    in  call 'erlang':'or'
			    (_cor29, _cor30) ->
	      %% Line 1769
	      {'chain',[{'annotation',{0,1}}|[{'simpleType',{0,1}}]],{1,1}}
	  %% Line 1770
	  <'schema',_cor39> when 'true' ->
	      %% Line 1771
	      {'chain',[{'alternative',[{'include',{1,1}}|[{'import',{1,1}}|[{'redefine',{1,1}}|[{'annotation',{1,1}}]]]],{0,1}}|[{'chain',[{'alternative',[{'alternative',[{'simpleType',{1,1}}|[{'complexType',{1,1}}|[{'group',{1,1}}|[{'attributeGroup',{1,1}}]]]],{0,1}}|[{'element',{1,1}}|[{'attribute',{1,1}}|[{'notation',{1,1}}]]]],{0,1}}|[{'annotation',{0,'unbounded'}}]],{0,'unbounded'}}]],{1,1}}
	  %% Line 1786
	  <'redefine',_X_Parents> when 'true' ->
	      %% Line 1787
	      {'alternative',[{'annotation',{1,1}}|[{'alternative',[{'simpleType',{1,1}}|[{'complexType',{1,1}}|[{'group',{1,1}}|[{'attributeGroup',{1,1}}]]]],{0,1}}]],{0,'unbounded'}}
	  %% Line 1793
	  <E,_X_Parents>
	      when let <_cor31> =
		    call 'erlang':'=:='
			(E, 'simpleContent')
		in  let <_cor32> =
			%% Line 1794
			call 'erlang':'=:='
			    (E, 'complexContent')
		    in  call 'erlang':'or'
			    (_cor31, _cor32) ->
	      %% Line 1795
	      {'chain',[{'annotation',{0,1}}|[{'alternative',[{'restriction',{1,1}}|[{'extension',{1,1}}]],{0,1}}]],{1,1}}
	  %% Line 1799
	  <'extension',Parents> when 'true' ->
	      %% Line 1800
	      case call 'lists':'member'
		       ('simpleContent', Parents) of
		%% Line 1801
		<'true'> when 'true' ->
		    %% Line 1802
		    apply 'allowed_content2'/2
			('extension', 'simpleContent')
		%% Line 1803
		<_cor40> when 'true' ->
		    %% Line 1804
		    apply 'allowed_content2'/2
			('extension', 'complexContent')
	      end
	  %% Line 1806
	  <'minExclusive',_X_Parents> when 'true' ->
	      %% Line 1807
	      []
	  %% Line 1808
	  <'minInclusive',_X_Parents> when 'true' ->
	      %% Line 1809
	      []
	  %% Line 1810
	  <'maxExclusive',_X_Parents> when 'true' ->
	      %% Line 1811
	      []
	  %% Line 1812
	  <'maxInclusive',_X_Parents> when 'true' ->
	      %% Line 1813
	      []
	  %% Line 1814
	  <'totalDigits',_X_Parents> when 'true' ->
	      %% Line 1815
	      []
	  %% Line 1816
	  <'fractionDigits',_X_Parents> when 'true' ->
	      %% Line 1817
	      []
	  %% Line 1818
	  <'length',_X_Parents> when 'true' ->
	      %% Line 1819
	      []
	  %% Line 1820
	  <'minLength',_X_Parents> when 'true' ->
	      %% Line 1821
	      []
	  %% Line 1822
	  <'maxLength',_X_Parents> when 'true' ->
	      %% Line 1823
	      []
	  %% Line 1824
	  <'enumeration',_X_Parents> when 'true' ->
	      %% Line 1825
	      []
	  %% Line 1826
	  <'whiteSpace',_X_Parents> when 'true' ->
	      %% Line 1827
	      []
	  %% Line 1828
	  <'pattern',_X_Parents> when 'true' ->
	      %% Line 1829
	      []
	  ( <_cor35,_cor34> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor35,_cor34})
		  -| [{'function_name',{'allowed_content',2}}] )
	    -| ['compiler_generated'] )
	end
'allowed_content2'/2 =
    %% Line 1834
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'restriction','simpleType'> when 'true' ->
	      %% Line 1835
	      {'chain',[{'annotation',{0,1}}|[{'chain',[{'simpleType',{0,1}}|[{'alternative',[{'minExclusive',{1,1}}|[{'minInclusive',{1,1}}|[{'maxExclusive',{1,1}}|[{'maxInclusive',{1,1}}|[{'totalDigits',{1,1}}|[{'fractionDigits',{1,1}}|[{'length',{1,1}}|[{'minLength',{1,1}}|[{'maxLength',{1,1}}|[{'enumeration',{1,1}}|[{'whiteSpace',{1,1}}|[{'pattern',{1,1}}]]]]]]]]]]]],{0,'unbounded'}}]],{1,1}}]],{1,1}}
	  %% Line 1847
	  <'restriction','simpleContent'> when 'true' ->
	      %% Line 1848
	      {'chain',[{'annotation',{0,1}}|[{'chain',[{'simpleType',{0,1}}|[{'alternative',[{'minExclusive',{1,1}}|[{'minInclusive',{1,1}}|[{'maxExclusive',{1,1}}|[{'maxInclusive',{1,1}}|[{'totalDigits',{1,1}}|[{'fractionDigits',{1,1}}|[{'length',{1,1}}|[{'minLength',{1,1}}|[{'maxLength',{1,1}}|[{'enumeration',{1,1}}|[{'whiteSpace',{1,1}}|[{'pattern',{1,1}}]]]]]]]]]]]],{0,'unbounded'}}]],{0,1}}|[{'chain',[{'alternative',[{'attribute',{1,1}}|[{'attributeGroup',{1,1}}]],{0,'unbounded'}}|[{'anyAttribute',{0,1}}]],{1,1}}]]],{1,1}}
	  %% Line 1866
	  <'restriction','complexContent'> when 'true' ->
	      %% Line 1867
	      {'chain',[{'annotation',{0,1}}|[{'alternative',[{'group',{1,1}}|[{'all',{1,1}}|[{'choice',{1,1}}|[{'sequence',{1,1}}]]]],{0,1}}|[{'chain',[{'alternative',[{'attribute',{1,1}}|[{'attributeGroup',{1,1}}]],{0,'unbounded'}}|[{'anyAttribute',{0,1}}]],{1,1}}]]],{1,1}}
	  %% Line 1878
	  <'extension','simpleContent'> when 'true' ->
	      %% Line 1879
	      {'chain',[{'annotation',{0,1}}|[{'chain',[{'alternative',[{'attribute',{1,1}}|[{'attributeGroup',{1,1}}]],{0,'unbounded'}}|[{'anyAttribute',{0,1}}]],{1,1}}]],{1,1}}
	  %% Line 1886
	  <'extension','complexContent'> when 'true' ->
	      %% Line 1887
	      {'chain',[{'annotation',{0,1}}|[{'chain',[{'alternative',[{'group',{1,1}}|[{'all',{1,1}}|[{'choice',{1,1}}|[{'sequence',{1,1}}]]]],{0,1}}|[{'chain',[{'alternative',[{'attribute',{1,1}}|[{'attributeGroup',{1,1}}]],{0,1}}|[{'anyAttribute',{0,1}}]],{1,1}}]],{1,1}}]],{1,1}}
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'allowed_content2',2}}] )
	    -| ['compiler_generated'] )
	end
'set_occurance'/2 =
    %% Line 1902
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Ch = {'chain',_cor8,_cor9},Occ> when 'true' ->
	      %% Line 1903
	      call 'erlang':'setelement'
		  (3, Ch, Occ)
	  %% Line 1904
	  <Alt = {'alternative',_cor13,_cor14},Occ> when 'true' ->
	      %% Line 1905
	      call 'erlang':'setelement'
		  (3, Alt, Occ)
	  %% Line 1906
	  <{Name,_cor18},Occ>
	      when call 'erlang':'is_atom'
		    (Name) ->
	      %% Line 1907
	      {Name,Occ}
	  %% Line 1908
	  <CM,_cor19> when 'true' ->
	      %% Line 1909
	      CM
	end
'process_external_schema_once'/3 =
    %% Line 1912
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <E = {'xmlElement',_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26},Namespace,S> when ( 'true'
															       -| ['compiler_generated'] ) ->
	      %% Line 1913
	      case apply 'get_attribute_value'/3
		       ('schemaLocation', E, []) of
		%% Line 1914
		<[]> when 'true' ->
		    let <Err> = {%% Line 1915
			 'missing_schemalocation_attribute',_cor16}
		    in  %% Line 1916
			apply 'acc_errs'/2
			    (S, Err)
		%% Line 1917
		<Path> when 'true' ->
		    %% Line 1918
		    apply 'process_external_schema_once'/3
			(Path, Namespace, S)
	      end
	  %% Line 1920
	  <SchemaLocation,Namespace,S> when 'true' ->
	      %% Line 1921
	      case apply 'fetch_external_schema'/2
		       (SchemaLocation, S) of
		%% Line 1922
		<{E = {'xmlElement',_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48},S2}> when 'true' ->
		    %% Line 1923
		    case apply 'is_already_processed'/2
			     (Namespace, S2) of
		      %% Line 1924
		      <'true'> when 'true' ->
			  %% Line 1925
			  apply 'save_namespace_definition'/2
			      (Namespace, S2)
		      %% Line 1926
		      <_cor49> when 'true' ->
			  let <S3> =
			      %% Line 1927
			      apply 'save_namespace_definition'/2
				  (Namespace, S2)
			  in  %% Line 1928
			      case S3 of
				<{'xsd_state',_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,_cor69,_cor70,_cor71,_cor72,_cor73,_cor74,_cor75,_cor76,_cor77,_cor78,_cor79,_cor80,_cor81}> when 'true' ->
				    let <_cor10> =
					call 'erlang':'setelement'
					    (13, S3, Namespace)
				    in  apply 'traverse_ext_schema'/2
					    (E, _cor10)
				( <_cor82> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {'badrecord','xsd_state'}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
		    end
		%% Line 1930
		<{_cor83,S2}> when 'true' ->
		    %% Line 1931
		    S2
		( <_cor12> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor12})
		  -| ['compiler_generated'] )
	      end
	end
'process_external_schema'/2 =
    %% Line 1936
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Path,S>
	      when call 'erlang':'is_list'
		    (Path) ->
	      %% Line 1937
	      case apply 'fetch_external_schema'/2
		       (Path, S) of
		%% Line 1938
		<{E = {'xmlElement',_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15},S2}> when 'true' ->
		    %% Line 1939
		    apply 'traverse_ext_schema'/2
			(E, S2)
		%% Line 1940
		<{_cor16,S2}> when 'true' ->
		    %% Line 1941
		    S2
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1943
	  <'absent',S> when 'true' ->
	      %% Line 1944
	      S
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'process_external_schema',2}}] )
	    -| ['compiler_generated'] )
	end
'fetch_external_schema'/2 =
    %% Line 1946
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Path,S>
	      when call 'erlang':'is_list'
		    (Path) ->
	      %% Line 1947
	      ( case S of
		  ( <( {'xsd_state',_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_rec166,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53}
		       -| ['compiler_generated'] )> when 'true' ->
			%% Line 1949
			case apply _rec166
				 (Path, S) of
			  %% Line 1950
			  <{'ok',{'file',File},_cor55}> when 'true' ->
			      %% Line 1952
			      case call 'xmerl_scan':'file'
				       (File, _cor28) of
				%% Line 1953
				<{'error',Reason}> when 'true' ->
				    let <_cor7> =
					%% Line 1954
					apply 'acc_errs'/2
					    (S, {[],'xmerl_xsd',{'parsing_external_schema_failed',File,Reason}})
				    in  %% Line 1954
					{'error',_cor7}
				%% Line 1955
				<{EXSD,_cor88}> when 'true' ->
				    let <_cor10> =
					%% Line 1956
					call 'erlang':'setelement'
					    (2, S, File)
				    in  %% Line 1956
					{EXSD,_cor10}
				( <_cor11> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor11})
				  -| ['compiler_generated'] )
			      end
			  %% Line 1958
			  <{_cor122,{'string',String},_cor123}> when 'true' ->
			      %% Line 1960
			      case call 'xmerl_scan':'string'
				       (String, _cor28) of
				%% Line 1961
				<{'error',Reason}> when 'true' ->
				    let <_cor14> =
					%% Line 1962
					apply 'acc_errs'/2
					    (S, {[],'xmerl_xsd',{'parsing_external_schema_failed',Path,Reason}})
				    in  %% Line 1962
					{'error',_cor14}
				%% Line 1963
				<{EXSD,_cor156}> when 'true' ->
				    let <_cor17> =
					%% Line 1964
					call 'erlang':'setelement'
					    (2, S, Path)
				    in  %% Line 1964
					{EXSD,_cor17}
				( <_cor18> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor18})
				  -| ['compiler_generated'] )
			      end
			  %% Line 1966
			  <{'ok',[],_cor190}> when 'true' ->
			      %% Line 1967
			      {'ok',S}
			  %% Line 1968
			  <{_cor191,Other,_cor192}> when 'true' ->
			      let <_cor19> =
				  %% Line 1969
				  apply 'acc_errs'/2
				      (S, {[],'xmerl_xsd',{'fetch_fun_failed',Other}})
			      in  %% Line 1969
				  {'error',_cor19}
			  ( <_cor20> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor20})
			    -| ['compiler_generated'] )
			end
		    -| ['compiler_generated'] )
		  ( <_cor54> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','xsd_state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1971
	  <'absent',S> when 'true' ->
	      %% Line 1972
	      {'ok',S}
	  ( <_cor22,_cor21> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor22,_cor21})
		  -| [{'function_name',{'fetch_external_schema',2}}] )
	    -| ['compiler_generated'] )
	end
'is_already_processed'/2 =
    %% Line 1978
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <NameSpace,{'xsd_state',SchemaName,_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,%% Line 1979
																   CNS,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34}> when 'true' ->
	      %% Line 1982
	      case call 'lists':'keysearch'
		       (SchemaName, 2, CNS) of
		%% Line 1983
		<{_cor35,{_cor36,_cor37,_cor38}}>
		    when call 'erlang':'=:='
			  (_cor38,
			   NameSpace) ->
		    %% Line 1984
		    'true'
		%% Line 1985
		<_cor39> when 'true' ->
		    %% Line 1986
		    'false'
	      end
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'is_already_processed',2}}] )
	    -| ['compiler_generated'] )
	end
'save_namespace_definition'/2 =
    %% Line 1990
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <NameSpace,S = %% Line 1991
			 {'xsd_state',_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,TNS,_cor27,%% Line 1992
															      GNS,%% Line 1993
																  CNS,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44}> when 'true' ->
	      let <Prefix,S2> =
		  %% Line 2002
		  case call 'lists':'keysearch'
			   (TNS, 1, GNS) of
		    %% Line 2003
		    <{'value',{_cor45,ImportedNodes}}> when 'true' ->
			%% Line 2004
			case call 'lists':'keysearch'
				 (NameSpace, 2, ImportedNodes) of
			  %% Line 2005
			  <{'value',{_X_P,_cor46}}> when 'true' ->
			      <_X_P,S>
			  %% Line 2006
			  <_cor47> when 'true' ->
			      <'none',S>
			end
		    %% Line 2008
		    <_cor48> when 'true' ->
			let <Err> = {%% Line 2009
			     [],%% Line 2009
				'xmerl_xsd',%% Line 2009
					    {'imported_namespace_wo_namespace_definition',NameSpace}}
			in  let <_cor4> =
				%% Line 2010
				apply 'acc_errs'/2
				    (S, Err)
			    in  %% Line 2010
				<'none',_cor4>
		  end
	      in  %% Line 2013
		  case Prefix of
		    %% Line 2014
		    <'none'> when 'true' ->
			%% Line 2015
			S2
		    %% Line 2016
		    <_cor49> when 'true' ->
			let <_rec171> =
			    %% Line 2018
			    apply 'add_once'/2
				({Prefix,_cor16,NameSpace}, CNS)
			in  %% Line 2017
			    call 'erlang':'setelement'
				(16, S, _rec171)
		  end
	  ( <_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14})
		  -| [{'function_name',{'save_namespace_definition',2}}] )
	    -| ['compiler_generated'] )
	end
'prefix_namespace_2global'/3 =
    %% Line 2025
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Namespace,%% Line 2026
		     {'xmlNamespace',_cor16,Nodes},S = %% Line 2027
						       {'xsd_state',_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,TNS,_cor28,%% Line 2028
																			    GNS,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46}> when 'true' ->
	      %% Line 2029
	      case call 'lists':'keysearch'
		       (Namespace, 2, Nodes) of
		%% Line 2030
		<{'value',{Prefix,_cor47}}> when 'true' ->
		    %% Line 2031
		    case call 'lists':'keysearch'
			     (TNS, 1, GNS) of
		      %% Line 2032
		      <{'value',{_cor48,DefinedNamespaces}}> when 'true' ->
			  let <_cor3> =
			      %% Line 2035
			      apply 'add_once'/2
				  ({Prefix,Namespace}, %% Line 2036
						       DefinedNamespaces)
			  in  let <_rec174> =
				  %% Line 2034
				  call 'lists':'keyreplace'
				      (TNS, 1, GNS, %% Line 2035
						    {TNS,_cor3})
			      in  %% Line 2033
				  call 'erlang':'setelement'
				      (15, S, _rec174)
		      %% Line 2037
		      <_cor82> when 'true' ->
			  let <_cor7> =
			      %% Line 2039
			      apply 'default_namespace_by_convention'/0
				  ()
			  in  let <_rec176> =
				  %% Line 2039
				  [{TNS,[{Prefix,Namespace}|_cor7]}|[]]
			      in  %% Line 2038
				  call 'erlang':'setelement'
				      (15, S, _rec176)
		    end
		%% Line 2041
		<_cor116> when 'true' ->
		    %% Line 2042
		    S
	      end
	  %% Line 2044
	  <_cor117,_cor118,S> when 'true' ->
	      %% Line 2045
	      S
	end
'traverse_ext_schema'/2 =
    %% Line 2048
    fun (_cor1,_cor0) ->
	let <TargetNS> =
	    %% Line 2049
	    apply 'target_namespace'/1
		(_cor1)
	in  %% Line 2050
	    ( case _cor0 of
		( <( {'xsd_state',_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_rec178,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42}
		     -| ['compiler_generated'] )> when 'true' ->
		      case <TargetNS,_rec178> of
			%% Line 2051
			<'undefined',_cor44> when 'true' ->
			    %% Line 2052
			    apply 'traverse_ext_schema2'/2
				(_cor1, _cor0)
			%% Line 2053
			<TNS,_cor45>
			    when call 'erlang':'=:='
				  (_cor45,
				   TNS) ->
			    %% Line 2054
			    apply 'traverse_ext_schema2'/2
				(_cor1, _cor0)
			%% Line 2055
			<_fol3013,_fol3014> when 'true' ->
			    let <_cor7> =
				%% Line 2056
				apply 'error_path'/2
				    (_cor1, 'schema')
			    in  %% Line 2056
				( case _cor1 of
				    ( <( {'xmlElement',_rec179,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56}
					 -| ['compiler_generated'] )> when 'true' ->
					  let <Err> = {_cor7,'xmerl_xsd',{'illegal_target_namespace_external_schema',_rec179}}
					  in  %% Line 2057
					      apply 'acc_errs'/2
						  (_cor0, Err)
				      -| ['compiler_generated'] )
				    ( <_cor57> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {'badrecord','xmlElement'}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
		      end
		  -| ['compiler_generated'] )
		( <_cor43> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','xsd_state'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	      -| ['compiler_generated'] )
'traverse_ext_schema2'/2 =
    %% Line 2059
    fun (_cor1,_cor0) ->
	let <S1> =
	    %% Line 2061
	    apply 'namespace_nodes'/2
		(_cor1, _cor0)
	in  let <S2> =
		%% Line 2062
		apply 'element_form_default'/2
		    (_cor1, S1)
	    in  let <S3> =
		    %% Line 2063
		    apply 'attribute_form_default'/2
			(_cor1, S2)
		in  let <S4> =
			%% Line 2064
			apply 'substitution_default'/3
			    ('finalDefault', _cor1, S3)
		    in  let <S5> =
			    %% Line 2065
			    apply 'substitution_default'/3
				('blockDefault', _cor1, S4)
			in  %% Line 2066
			    ( case _cor1 of
				( <( {'xmlElement',_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_rec180,_cor19,_cor20,_cor21}
				     -| ['compiler_generated'] )> when 'true' ->
				      case apply 'traverse_content2'/3
					       (_rec180, S5, []) of
					<{CM,S6}> when 'true' ->
					    do  %% Line 2068
						apply 'save_schema_element'/2
						    (CM, S6)
						%% Line 2069
						S6
					( <_cor9> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_cor9})
					  -| ['compiler_generated'] )
				      end
				  -| ['compiler_generated'] )
				( <_cor22> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {'badrecord','xmlElement'}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
'attribute_properties'/3 =
    %% Line 2072
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[{'xmlAttribute','default',_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,Default,_cor30}|Rest],%% Line 2073
												      Attr,%% Line 2073
													   S> when 'true' ->
	      %% Line 2074
	      case Attr of
		<{'schema_attribute',_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39}> when 'true' ->
		    let <_cor5> =
			call 'erlang':'setelement'
			    (7, Attr, Default)
		    in  apply 'attribute_properties'/3
			    (Rest, _cor5, S)
		( <_cor40> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','schema_attribute'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 2075
	  <[{'xmlAttribute','fixed',_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,Fixed,_cor47}|Rest],Attr,S> when 'true' ->
	      %% Line 2076
	      case Attr of
		<{'schema_attribute',_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56}> when 'true' ->
		    let <_cor8> =
			call 'erlang':'setelement'
			    (8, Attr, Fixed)
		    in  apply 'attribute_properties'/3
			    (Rest, _cor8, S)
		( <_cor57> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','schema_attribute'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 2077
	  <[{'xmlAttribute','use',_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,Use,_cor64}|Rest],Attr,S> when 'true' ->
	      %% Line 2078
	      case apply 'attribute_use'/2
		       (Use, S) of
		<{Use2,S2}> when 'true' ->
		    %% Line 2079
		    case Attr of
		      <{'schema_attribute',_cor65,_cor66,_cor67,_cor68,_cor69,_cor70,_cor71,_cor72,_cor73}> when 'true' ->
			  let <_cor12> =
			      call 'erlang':'setelement'
				  (6, Attr, Use2)
			  in  apply 'attribute_properties'/3
				  (Rest, _cor12, S2)
		      ( <_cor74> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','schema_attribute'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		( <_cor9> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor9})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2080
	  <[{'xmlAttribute','form',_cor75,_cor76,_cor77,_cor78,_cor79,_cor80,Form,_cor81}|Rest],Attr,S> when 'true' ->
	      %% Line 2081
	      case apply 'attribute_form'/2
		       (Form, S) of
		<{Form2,S2}> when 'true' ->
		    %% Line 2082
		    case Attr of
		      <{'schema_attribute',_cor82,_cor83,_cor84,_cor85,_cor86,_cor87,_cor88,_cor89,_cor90}> when 'true' ->
			  let <_cor16> =
			      call 'erlang':'setelement'
				  (9, Attr, Form2)
			  in  apply 'attribute_properties'/3
				  (Rest, _cor16, S2)
		      ( <_cor91> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','schema_attribute'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		( <_cor13> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor13})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2083
	  <[{'xmlAttribute','id',_cor92,_cor93,_cor94,_cor95,_cor96,_cor97,ID,_cor98}|Rest],Attr,S> when 'true' ->
	      let <S2> =
		  %% Line 2084
		  apply 'check_and_save_ID'/2
		      (ID, S)
	      in  %% Line 2085
		  case Attr of
		    <{'schema_attribute',_cor99,_cor100,_cor101,_cor102,_cor103,_cor104,_cor105,_cor106,_cor107}> when 'true' ->
			let <_cor20> =
			    call 'erlang':'setelement'
				(10, Attr, ID)
			in  apply 'attribute_properties'/3
				(Rest, _cor20, S2)
		    ( <_cor108> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','schema_attribute'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 2086
	  <[_X_H|Rest],Attr,S> when 'true' ->
	      %% Line 2087
	      apply 'attribute_properties'/3
		  (Rest, Attr, S)
	  %% Line 2088
	  <[],Attr,S> when 'true' ->
	      %% Line 2089
	      {Attr,S}
	  ( <_cor23,_cor22,_cor21> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor23,_cor22,_cor21})
		  -| [{'function_name',{'attribute_properties',3}}] )
	    -| ['compiler_generated'] )
	end
'attribute_use'/2 =
    %% Line 2090
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Use,S>
	      when let <_cor2> =
		    call 'erlang':'=='
			(Use, [111|[112|[116|[105|[111|[110|[97|[108]]]]]]]])
		in  let <_cor3> =
			call 'erlang':'=='
			    (Use, [112|[114|[111|[104|[105|[98|[105|[116|[101|[100]]]]]]]]]])
		    in  let <_cor4> =
			    call 'erlang':'=='
				(Use, [114|[101|[113|[117|[105|[114|[101|[100]]]]]]]])
			in  let <_cor5> =
				call 'erlang':'or'
				    (_cor3, _cor4)
			    in  call 'erlang':'or'
				    (_cor2, _cor5) ->
	      let <_cor6> =
		  %% Line 2091
		  call 'erlang':'list_to_atom'
		      (Use)
	      in  %% Line 2091
		  {_cor6,S}
	  %% Line 2092
	  <Use,S> when 'true' ->
	      let <_cor7> =
		  %% Line 2093
		  apply 'acc_errs'/2
		      (S, {[],'xmerl_xsd',{'illegal_use_value',Use}})
	      in  %% Line 2093
		  {Use,_cor7}
	end
'attribute_form'/2 =
    %% Line 2094
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Form,S>
	      when let <_cor2> =
		    call 'erlang':'=='
			(Form, [113|[117|[97|[108|[105|[102|[105|[101|[100]]]]]]]]])
		in  let <_cor3> =
			call 'erlang':'=='
			    (Form, [117|[110|[113|[117|[97|[108|[105|[102|[105|[101|[100]]]]]]]]]]])
		    in  call 'erlang':'or'
			    (_cor2, _cor3) ->
	      let <_cor4> =
		  %% Line 2095
		  call 'erlang':'list_to_atom'
		      (Form)
	      in  %% Line 2095
		  {_cor4,S}
	  %% Line 2096
	  <Form,S> when 'true' ->
	      let <_cor5> =
		  %% Line 2097
		  apply 'acc_errs'/2
		      (S, {[],'xmerl_xsd',{'illegal_form_value',Form}})
	      in  %% Line 2097
		  {Form,_cor5}
	end
'element_properties'/4 =
    %% Line 2099
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[{'xmlAttribute','default',_cor74,_cor75,_cor76,_cor77,_cor78,_cor79,Default,_cor80}|Rest],SE,El,S> when 'true' ->
	      %% Line 2100
	      ( case SE of
		  ( <( {'schema_element',_cor81,_cor82,_cor83,_cor84,_cor85,_cor86,_cor87,_cor88,_cor89,_cor90,_rec186,_cor91,_cor92,_cor93,_cor94}
		       -| ['compiler_generated'] )> when 'true' ->
			case _rec186 of
			  %% Line 2101
			  <{'fixed',_cor96}> when 'true' ->
			      let <_cor8> =
				  %% Line 2102
				  apply 'error_path'/2
				      (El, 'schema')
			      in  %% Line 2103
				  ( case El of
				      ( <( {'xmlElement',_rec187,_cor97,_cor98,_cor99,_cor100,_cor101,_cor102,_cor103,_cor104,_cor105,_cor106}
					   -| ['compiler_generated'] )> when 'true' ->
					    let <Err> =
						{_cor8,'xmerl_xsd',{[111|[110|[108|[121|[32|[111|[110|[101|[32|[111|[102|[32|[102|[105|[110|[97|[108|[47|[100|[101|[102|[97|[117|[108|[116|[32|[97|[116|[116|[114|[105|[98|[117|[116|[101|[115|[32|[97|[108|[108|[111|[119|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],_rec187}}
					    in  let <_cor10> =
						    %% Line 2104
						    apply 'acc_errs'/2
							(S, Err)
						in  %% Line 2104
						    apply 'element_properties'/4
							(Rest, SE, El, _cor10)
					-| ['compiler_generated'] )
				      ( <_cor107> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','xmlElement'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
			  %% Line 2105
			  <_cor108> when 'true' ->
			      let <_rec188> = {%% Line 2107
				   'default',%% Line 2107
					     Default}
			      in  let <_cor14> =
				      %% Line 2106
				      call 'erlang':'setelement'
					  (12, SE, _rec188)
				  in  %% Line 2106
				      apply 'element_properties'/4
					  (Rest, _cor14, %% Line 2107
							 El, %% Line 2107
							     S)
			end
		    -| ['compiler_generated'] )
		  ( <_cor95> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','schema_element'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 2109
	  <[{'xmlAttribute','fixed',_cor125,_cor126,_cor127,_cor128,_cor129,_cor130,Fixed,_cor131}|Rest],SE,El,S> when 'true' ->
	      %% Line 2110
	      ( case SE of
		  ( <( {'schema_element',_cor132,_cor133,_cor134,_cor135,_cor136,_cor137,_cor138,_cor139,_cor140,_cor141,_rec190,_cor142,_cor143,_cor144,_cor145}
		       -| ['compiler_generated'] )> when 'true' ->
			case _rec190 of
			  %% Line 2111
			  <{'default',_cor147}> when 'true' ->
			      let <_cor20> =
				  %% Line 2112
				  apply 'error_path'/2
				      (El, 'schema')
			      in  %% Line 2114
				  ( case El of
				      ( <( {'xmlElement',_rec191,_cor148,_cor149,_cor150,_cor151,_cor152,_cor153,_cor154,_cor155,_cor156,_cor157}
					   -| ['compiler_generated'] )> when 'true' ->
					    let <Err> =
						{_cor20,'xmerl_xsd',{[111|[110|[108|[121|[32|[111|[110|[101|[32|[111|[102|[32|[102|[105|[110|[97|[108|[47|[100|[101|[102|[97|[117|[108|[116|[32|[97|[116|[116|[114|[105|[98|[117|[116|[101|[115|[32|[97|[108|[108|[111|[119|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],_rec191}}
					    in  let <_cor22> =
						    %% Line 2115
						    apply 'acc_errs'/2
							(S, Err)
						in  %% Line 2115
						    apply 'element_properties'/4
							(Rest, SE, El, _cor22)
					-| ['compiler_generated'] )
				      ( <_cor158> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','xmlElement'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
			  %% Line 2116
			  <_cor159> when 'true' ->
			      let <_rec192> = {%% Line 2118
				   'fixed',%% Line 2118
					   Fixed}
			      in  let <_cor26> =
				      %% Line 2117
				      call 'erlang':'setelement'
					  (12, SE, _rec192)
				  in  %% Line 2117
				      apply 'element_properties'/4
					  (Rest, _cor26, %% Line 2118
							 El, %% Line 2118
							     S)
			end
		    -| ['compiler_generated'] )
		  ( <_cor146> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','schema_element'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 2120
	  <[{'xmlAttribute','substitutionGroup',_cor176,_cor177,_cor178,_cor179,_cor180,_cor181,SG,_cor182}|Rest],%% Line 2121
														  SE,%% Line 2121
														     El,%% Line 2121
															S> when 'true' ->
	      %% Line 2122
	      ( case El of
		  ( <( {'xmlElement',_cor183,_cor184,_cor185,_rec194,_cor186,_cor187,_cor188,_cor189,_cor190,_cor191,_cor192}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_cor28> =
			    apply 'reset_scope'/1
				(S)
			in  let <SGName> =
				apply 'get_QName'/3
				    (SG, _rec194, _cor28)
			    in  %% Line 2123
				case SE of
				  <{'schema_element',_cor194,_cor195,_cor196,_cor197,_cor198,_cor199,_cor200,_cor201,_cor202,_cor203,_cor204,_cor205,_cor206,_cor207,_cor208}> when 'true' ->
				      let <_cor35> =
					  call 'erlang':'setelement'
					      (5, SE, SGName)
				      in  let <_cor32> =
					      %% Line 2124
					      apply 'add_ref'/2
						  (S, {'element',SGName})
					  in  apply 'element_properties'/4
						  (Rest, _cor35, El, _cor32)
				  ( <_cor209> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','schema_element'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
		    -| ['compiler_generated'] )
		  ( <_cor193> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','xmlElement'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 2125
	  <[{'xmlAttribute','form',_cor210,_cor211,_cor212,_cor213,_cor214,_cor215,F,_cor216}|Rest],SE,El,S> when 'true' ->
	      %% Line 2126
	      case apply 'attribute_form'/2
		       (F, S) of
		<{Form,S2}> when 'true' ->
		    %% Line 2127
		    case SE of
		      <{'schema_element',_cor217,_cor218,_cor219,_cor220,_cor221,_cor222,_cor223,_cor224,_cor225,_cor226,_cor227,_cor228,_cor229,_cor230,_cor231}> when 'true' ->
			  let <_cor39> =
			      call 'erlang':'setelement'
				  (9, SE, Form)
			  in  apply 'element_properties'/4
				  (Rest, _cor39, El, S2)
		      ( <_cor232> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','schema_element'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		( <_cor36> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor36})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2128
	  <[{'xmlAttribute','id',_cor233,_cor234,_cor235,_cor236,_cor237,_cor238,ID,_cor239}|Rest],SE,El,S> when 'true' ->
	      let <S2> =
		  %% Line 2129
		  apply 'check_and_save_ID'/2
		      (ID, S)
	      in  %% Line 2130
		  case SE of
		    <{'schema_element',_cor240,_cor241,_cor242,_cor243,_cor244,_cor245,_cor246,_cor247,_cor248,_cor249,_cor250,_cor251,_cor252,_cor253,_cor254}> when 'true' ->
			let <_cor43> =
			    call 'erlang':'setelement'
				(10, SE, ID)
			in  apply 'element_properties'/4
				(Rest, _cor43, El, S2)
		    ( <_cor255> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','schema_element'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 2131
	  <[{'xmlAttribute','nillable',_cor256,_cor257,_cor258,_cor259,_cor260,_cor261,N,_cor262}|Rest],SE,El,S> when 'true' ->
	      %% Line 2132
	      case apply 'boolean_to_atom'/1
		       (N) of
		%% Line 2133
		<'error'> when 'true' ->
		    let <_cor44> =
			%% Line 2135
			apply 'error_path'/2
			    (El, 'schema')
		    in  let <_cor45> =
			    %% Line 2135
			    apply 'acc_errs'/2
				(S, {_cor44,'xmerl_xsd',{'illegal_nillable_value',N}})
			in  %% Line 2134
			    apply 'element_properties'/4
				(Rest, SE, El, _cor45)
		%% Line 2136
		<N_atom> when 'true' ->
		    %% Line 2137
		    case SE of
		      <{'schema_element',_cor263,_cor264,_cor265,_cor266,_cor267,_cor268,_cor269,_cor270,_cor271,_cor272,_cor273,_cor274,_cor275,_cor276,_cor277}> when 'true' ->
			  let <_cor48> =
			      call 'erlang':'setelement'
				  (13, SE, N_atom)
			  in  apply 'element_properties'/4
				  (Rest, _cor48, El, S)
		      ( <_cor278> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','schema_element'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
	      end
	  %% Line 2139
	  <[{'xmlAttribute','abstract',_cor279,_cor280,_cor281,_cor282,_cor283,_cor284,A,_cor285}|Rest],SE,El,S> when 'true' ->
	      %% Line 2140
	      case apply 'boolean_to_atom'/1
		       (A) of
		%% Line 2141
		<'error'> when 'true' ->
		    let <_cor50> =
			%% Line 2143
			apply 'error_path'/2
			    (El, 'schema')
		    in  let <_cor51> =
			    %% Line 2143
			    apply 'acc_errs'/2
				(S, {_cor50,'xmerl_xsd',{'illegal_abstract_value',A}})
			in  %% Line 2142
			    apply 'element_properties'/4
				(Rest, SE, El, _cor51)
		%% Line 2144
		<A_atom> when 'true' ->
		    %% Line 2145
		    case SE of
		      <{'schema_element',_cor286,_cor287,_cor288,_cor289,_cor290,_cor291,_cor292,_cor293,_cor294,_cor295,_cor296,_cor297,_cor298,_cor299,_cor300}> when 'true' ->
			  let <_cor54> =
			      call 'erlang':'setelement'
				  (14, SE, A_atom)
			  in  apply 'element_properties'/4
				  (Rest, _cor54, El, S)
		      ( <_cor301> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','schema_element'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
	      end
	  %% Line 2147
	  <[{'xmlAttribute','block',_cor302,_cor303,_cor304,_cor305,_cor306,_cor307,B,_cor308}|Rest],SE,El,S> when 'true' ->
	      let <BlockValues> =
		  %% Line 2148
		  apply 'split_by_whitespace'/2
		      (B, [])
	      in  %% Line 2149
		  case apply 'legal_block_values'/2
			   ('element', BlockValues) of
		    %% Line 2150
		    <{'error',Reason}> when 'true' ->
			let <_cor57> =
			    %% Line 2152
			    apply 'error_path'/2
				(El, 'schema')
			in  let <_cor58> =
				%% Line 2152
				apply 'acc_errs'/2
				    (S, {_cor57,'xmerl_xsd',{'illegal_block_values',Reason}})
			    in  %% Line 2151
				apply 'element_properties'/4
				    (Rest, SE, El, _cor58)
		    %% Line 2153
		    <_cor309> when 'true' ->
			%% Line 2154
			case SE of
			  <{'schema_element',_cor310,_cor311,_cor312,_cor313,_cor314,_cor315,_cor316,_cor317,_cor318,_cor319,_cor320,_cor321,_cor322,_cor323,_cor324}> when 'true' ->
			      let <_cor61> =
				  call 'erlang':'setelement'
				      (15, SE, BlockValues)
			      in  apply 'element_properties'/4
				      (Rest, _cor61, El, S)
			  ( <_cor325> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','schema_element'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
		  end
	  %% Line 2156
	  <[{'xmlAttribute','final',_cor326,_cor327,_cor328,_cor329,_cor330,_cor331,F,_cor332}|Rest],SE,El,S> when 'true' ->
	      let <FinalValues> =
		  %% Line 2157
		  apply 'split_by_whitespace'/2
		      (F, [])
	      in  %% Line 2158
		  case apply 'legal_final_values'/2
			   ('element', FinalValues) of
		    %% Line 2159
		    <{'error',Reason}> when 'true' ->
			let <_cor64> =
			    %% Line 2161
			    apply 'error_path'/2
				(El, 'schema')
			in  let <_cor65> =
				%% Line 2161
				apply 'acc_errs'/2
				    (S, {_cor64,'xmerl_xsd',{'illegal_final_values',Reason}})
			    in  %% Line 2160
				apply 'element_properties'/4
				    (Rest, SE, El, _cor65)
		    %% Line 2162
		    <_cor333> when 'true' ->
			%% Line 2163
			case SE of
			  <{'schema_element',_cor334,_cor335,_cor336,_cor337,_cor338,_cor339,_cor340,_cor341,_cor342,_cor343,_cor344,_cor345,_cor346,_cor347,_cor348}> when 'true' ->
			      let <_cor68> =
				  call 'erlang':'setelement'
				      (16, SE, FinalValues)
			      in  apply 'element_properties'/4
				      (Rest, _cor68, El, S)
			  ( <_cor349> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','schema_element'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
		  end
	  %% Line 2165
	  <[_X_H|T],SE,El,S> when 'true' ->
	      %% Line 2166
	      apply 'element_properties'/4
		  (T, SE, El, S)
	  %% Line 2167
	  <[],SE,_X_El,S> when 'true' ->
	      %% Line 2168
	      {SE,S}
	  ( <_cor73,_cor72,_cor71,_cor70> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor73,_cor72,_cor71,_cor70})
		  -| [{'function_name',{'element_properties',4}}] )
	    -| ['compiler_generated'] )
	end
'element_forbidden_properties'/2 =
    %% Line 2173
    fun (_cor1,_cor0) ->
	%% Line 2174
	( case _cor1 of
	    ( <( {'xmlElement',_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_rec202,_cor12,_cor13,_cor14,_cor15}
		 -| ['compiler_generated'] )> when 'true' ->
		  apply 'element_forbidden_properties'/3
		      (_rec202, _cor1, _cor0)
	      -| ['compiler_generated'] )
	    ( <_cor16> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','xmlElement'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'element_forbidden_properties'/3 =
    %% Line 2175
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[{'xmlAttribute','nillable',_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,V,_cor24}|Atts],El,S> when 'true' ->
	      let <_cor3> =
		  %% Line 2176
		  apply 'error_path'/2
		      (El, 'schema')
	      in  let <_cor4> =
		      %% Line 2176
		      apply 'acc_errs'/2
			  (S, {_cor3,'xmerl_xsd',{'forbidden_property','nillable',V}})
		  in  %% Line 2176
		      apply 'element_forbidden_properties'/3
			  (Atts, El, _cor4)
	  %% Line 2177
	  <[{'xmlAttribute','default',_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,V,_cor31}|Atts],El,S> when 'true' ->
	      let <_cor5> =
		  %% Line 2178
		  apply 'error_path'/2
		      (El, 'schema')
	      in  let <_cor6> =
		      %% Line 2178
		      apply 'acc_errs'/2
			  (S, {_cor5,'xmerl_xsd',{'forbidden_property','default',V}})
		  in  %% Line 2178
		      apply 'element_forbidden_properties'/3
			  (Atts, El, _cor6)
	  %% Line 2179
	  <[{'xmlAttribute','fixed',_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,V,_cor38}|Atts],El,S> when 'true' ->
	      let <_cor7> =
		  %% Line 2180
		  apply 'error_path'/2
		      (El, 'schema')
	      in  let <_cor8> =
		      %% Line 2180
		      apply 'acc_errs'/2
			  (S, {_cor7,'xmerl_xsd',{'forbidden_property','fixed',V}})
		  in  %% Line 2180
		      apply 'element_forbidden_properties'/3
			  (Atts, El, _cor8)
	  %% Line 2181
	  <[{'xmlAttribute','form',_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,V,_cor45}|Atts],El,S> when 'true' ->
	      let <_cor9> =
		  %% Line 2182
		  apply 'error_path'/2
		      (El, 'schema')
	      in  let <_cor10> =
		      %% Line 2182
		      apply 'acc_errs'/2
			  (S, {_cor9,'xmerl_xsd',{'forbidden_property','form',V}})
		  in  %% Line 2182
		      apply 'element_forbidden_properties'/3
			  (Atts, El, _cor10)
	  %% Line 2183
	  <[{'xmlAttribute','block',_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,V,_cor52}|Atts],El,S> when 'true' ->
	      let <_cor11> =
		  %% Line 2184
		  apply 'error_path'/2
		      (El, 'schema')
	      in  let <_cor12> =
		      %% Line 2184
		      apply 'acc_errs'/2
			  (S, {_cor11,'xmerl_xsd',{'forbidden_property','block',V}})
		  in  %% Line 2184
		      apply 'element_forbidden_properties'/3
			  (Atts, El, _cor12)
	  %% Line 2185
	  <[{'xmlAttribute','type',_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,V,_cor59}|Atts],El,S> when 'true' ->
	      let <_cor13> =
		  %% Line 2186
		  apply 'error_path'/2
		      (El, 'schema')
	      in  let <_cor14> =
		      %% Line 2186
		      apply 'acc_errs'/2
			  (S, {_cor13,'xmerl_xsd',{'forbidden_property','type',V}})
		  in  %% Line 2186
		      apply 'element_forbidden_properties'/3
			  (Atts, El, _cor14)
	  %% Line 2187
	  <[{'xmlAttribute',_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68}|Atts],El,S> when 'true' ->
	      %% Line 2188
	      apply 'element_forbidden_properties'/3
		  (Atts, El, S)
	  %% Line 2189
	  <[],_cor69,S> when 'true' ->
	      %% Line 2190
	      S
	  ( <_cor17,_cor16,_cor15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor17,_cor16,_cor15})
		  -| [{'function_name',{'element_forbidden_properties',3}}] )
	    -| ['compiler_generated'] )
	end
'element_forbidden_content'/2 =
    %% Line 2195
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],S> when 'true' ->
	      %% Line 2196
	      S
	  %% Line 2197
	  <[El = {'xmlElement',_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27}|Els],S> when 'true' ->
	      %% Line 2198
	      case apply 'kind'/1
		       (El) of
		%% Line 2199
		<K>
		    when let <_cor2> =
			  call 'erlang':'=:='
			      (K, 'complexType')
		      in  let <_cor3> =
			      call 'erlang':'=:='
				  (K, 'simpleType')
			  in  let <_cor4> =
				  call 'erlang':'=:='
				      (K, 'key')
			      in  let <_cor5> =
				      call 'erlang':'=:='
					  (K, 'keyref')
				  in  let <_cor6> =
					  call 'erlang':'=:='
					      (K, 'unique')
				      in  let <_cor7> =
					      call 'erlang':'or'
						  (_cor5, _cor6)
					  in  let <_cor8> =
						  call 'erlang':'or'
						      (_cor4, _cor7)
					      in  let <_cor9> =
						      call 'erlang':'or'
							  (_cor3, _cor8)
						  in  call 'erlang':'or'
							  (_cor2, _cor9) ->
		    let <_cor10> =
			%% Line 2200
			apply 'error_path'/2
			    (El, 'schema')
		    in  %% Line 2200
			apply 'acc_errs'/2
			    (S, {_cor10,'xmerl_xsd',{'element_content_must_not_contain',K,El}})
		%% Line 2201
		<'annotation'> when 'true' ->
		    %% Line 2202
		    apply 'element_forbidden_content'/2
			(Els, S)
		%% Line 2203
		<Other> when 'true' ->
		    let <_cor11> =
			%% Line 2204
			apply 'error_path'/2
			    (El, 'schema')
		    in  %% Line 2204
			apply 'acc_errs'/2
			    (S, {_cor11,'xmerl_xsd',{'illegal_element_content',Other}})
	      end
	  %% Line 2206
	  <[T = {'xmlText',_cor28,_cor29,_cor30,_cor31,_cor32}|Rest],S> when 'true' ->
	      %% Line 2207
	      case apply 'is_whitespace'/1
		       (T) of
		%% Line 2208
		<'true'> when 'true' ->
		    %% Line 2209
		    apply 'element_forbidden_content'/2
			(Rest, S)
		%% Line 2210
		<_cor33> when 'true' ->
		    let <_cor13> =
			%% Line 2211
			apply 'error_path'/2
			    (T, 'schema')
		    in  %% Line 2211
			apply 'acc_errs'/2
			    (S, {_cor13,'xmerl_xsd',{'illegal_element_content',T}})
	      end
	  ( <_cor16,_cor15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15})
		  -| [{'function_name',{'element_forbidden_content',2}}] )
	    -| ['compiler_generated'] )
	end
'c_t_properties'/3 =
    %% Line 2214
    fun (_cor2,_cor1,_cor0) ->
	%% Line 2215
	( case _cor2 of
	    ( <( {'xmlElement',_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_rec203,_cor14,_cor15,_cor16,_cor17}
		 -| ['compiler_generated'] )> when 'true' ->
		  apply 'c_t_properties'/4
		      (_rec203, _cor2, _cor1, _cor0)
	      -| ['compiler_generated'] )
	    ( <_cor18> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','xmlElement'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'c_t_properties'/4 =
    %% Line 2216
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[{'xmlAttribute','final',_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,V,_cor37}|Rest],El,CT,S> when 'true' ->
	      let <FinalValues> =
		  %% Line 2217
		  apply 'split_by_whitespace'/2
		      (V, [])
	      in  %% Line 2218
		  case apply 'legal_final_values'/2
			   ('complexType', FinalValues) of
		    %% Line 2219
		    <{'error',Reason}> when 'true' ->
			let <_cor5> =
			    %% Line 2220
			    apply 'error_path'/2
				(El, 'schema')
			in  let <Err> = {_cor5,%% Line 2220
				       'xmerl_xsd',%% Line 2220
						   {'illegal_final_values',Reason}}
			    in  let <_cor7> =
				    %% Line 2221
				    apply 'acc_errs'/2
					(S, Err)
				in  %% Line 2221
				    apply 'c_t_properties'/4
					(Rest, El, CT, _cor7)
		    %% Line 2222
		    <_cor38> when 'true' ->
			%% Line 2224
			case CT of
			  <{'schema_complex_type',_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52}> when 'true' ->
			      let <_cor10> =
				  call 'erlang':'setelement'
				      (7, CT, FinalValues)
			      in  apply 'c_t_properties'/4
				      (Rest, El, _cor10, S)
			  ( <_cor53> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','schema_complex_type'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
		  end
	  %% Line 2226
	  <[{'xmlAttribute','block',_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,V,_cor60}|Rest],El,CT,S> when 'true' ->
	      let <BlockValues> =
		  %% Line 2227
		  apply 'split_by_whitespace'/2
		      (V, [])
	      in  %% Line 2228
		  case apply 'legal_block_values'/2
			   ('complexType', BlockValues) of
		    %% Line 2229
		    <{'error',Reason}> when 'true' ->
			let <_cor13> =
			    %% Line 2230
			    apply 'error_path'/2
				(El, 'schema')
			in  let <Err> = {_cor13,%% Line 2230
					'xmerl_xsd',%% Line 2231
						    {'illegal_block_values',Reason}}
			    in  let <_cor15> =
				    %% Line 2232
				    apply 'acc_errs'/2
					(S, Err)
				in  %% Line 2232
				    apply 'c_t_properties'/4
					(Rest, El, CT, _cor15)
		    %% Line 2233
		    <_cor61> when 'true' ->
			%% Line 2234
			case CT of
			  <{'schema_complex_type',_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,_cor69,_cor70,_cor71,_cor72,_cor73,_cor74,_cor75}> when 'true' ->
			      let <_cor18> =
				  call 'erlang':'setelement'
				      (9, CT, BlockValues)
			      in  apply 'c_t_properties'/4
				      (Rest, El, _cor18, S)
			  ( <_cor76> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','schema_complex_type'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
		  end
	  %% Line 2236
	  <[{'xmlAttribute','abstract',_cor77,_cor78,_cor79,_cor80,_cor81,_cor82,V,_cor83}|Rest],El,CT,S> when 'true' ->
	      %% Line 2237
	      case apply 'boolean_to_atom'/1
		       (V) of
		%% Line 2238
		<'error'> when 'true' ->
		    let <_cor20> =
			%% Line 2239
			apply 'error_path'/2
			    (El, 'schema')
		    in  let <Err> = {_cor20,%% Line 2239
				    'xmerl_xsd',%% Line 2240
						{'illegal_abstract_value',V}}
			in  let <_cor22> =
				%% Line 2241
				apply 'acc_errs'/2
				    (S, Err)
			    in  %% Line 2241
				apply 'c_t_properties'/4
				    (Rest, El, CT, _cor22)
		%% Line 2242
		<V_atom> when 'true' ->
		    %% Line 2243
		    case CT of
		      <{'schema_complex_type',_cor84,_cor85,_cor86,_cor87,_cor88,_cor89,_cor90,_cor91,_cor92,_cor93,_cor94,_cor95,_cor96,_cor97}> when 'true' ->
			  let <_cor25> =
			      call 'erlang':'setelement'
				  (10, CT, V_atom)
			  in  apply 'c_t_properties'/4
				  (Rest, El, _cor25, S)
		      ( <_cor98> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','schema_complex_type'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
	      end
	  %% Line 2245
	  <[_X_H|T],El,CT,S> when 'true' ->
	      %% Line 2246
	      apply 'c_t_properties'/4
		  (T, El, CT, S)
	  %% Line 2247
	  <[],_cor99,CT,S> when 'true' ->
	      %% Line 2248
	      {CT,S}
	  ( <_cor30,_cor29,_cor28,_cor27> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor30,_cor29,_cor28,_cor27})
		  -| [{'function_name',{'c_t_properties',4}}] )
	    -| ['compiler_generated'] )
	end
'legal_block_values'/2 =
    %% Line 2251
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <_cor4,['#all']> when 'true' ->
	      %% Line 2252
	      'true'
	  %% Line 2253
	  <'element',BlockValues> when 'true' ->
	      %% Line 2254
	      apply 'list_members'/2
		  (BlockValues, ['extension'|['restriction'|['substitution']]])
	  %% Line 2255
	  <'complexType',BlockValues> when 'true' ->
	      %% Line 2256
	      apply 'list_members'/2
		  (BlockValues, ['extension'|['restriction']])
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'legal_block_values',2}}] )
	    -| ['compiler_generated'] )
	end
'legal_final_values'/2 =
    %% Line 2258
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <_cor4,['#all']> when 'true' ->
	      %% Line 2259
	      'true'
	  %% Line 2260
	  <_cor5,FinalValues> when 'true' ->
	      %% Line 2261
	      apply 'list_members'/2
		  (FinalValues, ['extension'|['restriction']])
	end
'boolean_to_atom'/1 =
    %% Line 2263
    fun (_cor0) ->
	case _cor0 of
	  <B>
	      when let <_cor1> =
		    call 'erlang':'=='
			(_cor0, [49])
		in  let <_cor2> =
			call 'erlang':'=='
			    (_cor0, [116|[114|[117|[101]]]])
		    in  call 'erlang':'or'
			    (_cor1, _cor2) ->
	      %% Line 2264
	      'true'
	  %% Line 2265
	  <B>
	      when let <_cor3> =
		    call 'erlang':'=='
			(_cor0, [48])
		in  let <_cor4> =
			call 'erlang':'=='
			    (_cor0, [102|[97|[108|[115|[101]]]]])
		    in  call 'erlang':'or'
			    (_cor3, _cor4) ->
	      %% Line 2266
	      'false'
	  %% Line 2267
	  <_cor6> when 'true' ->
	      %% Line 2268
	      'error'
	end
'count_num_el'/1 =
    %% Line 2271
    fun (_cor0) ->
	case _cor0 of
	  <S = {'xsd_state',_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,N,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35}> when 'true' ->
	      let <_rec207> =
		  %% Line 2272
		  call 'erlang':'+'
		      (N, 1)
	      in  %% Line 2272
		  call 'erlang':'setelement'
		      (24, S, _rec207)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'count_num_el',1}}] )
	    -| ['compiler_generated'] )
	end
'set_num_el'/2 =
    %% Line 2273
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <S = {'xsd_state',_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39},I>
	      when call 'erlang':'is_integer'
		    (I) ->
	      %% Line 2274
	      call 'erlang':'setelement'
		  (24, S, I)
	  %% Line 2275
	  <S = {'xsd_state',_cor73,_cor74,_cor75,_cor76,_cor77,_cor78,_cor79,_cor80,_cor81,_cor82,_cor83,_cor84,_cor85,_cor86,_cor87,_cor88,_cor89,_cor90,_cor91,_cor92,_cor93,_cor94,_cor95,_cor96,_cor97,_cor98,_cor99,_cor100,_cor101,_cor102,_cor103,_cor104},{'xsd_state',_cor105,_cor106,_cor107,_cor108,_cor109,_cor110,_cor111,_cor112,_cor113,_cor114,_cor115,_cor116,_cor117,_cor118,_cor119,_cor120,_cor121,_cor122,_cor123,_cor124,_cor125,_cor126,I,_cor127,_cor128,_cor129,_cor130,_cor131,_cor132,_cor133,_cor134,_cor135}> when 'true' ->
	      %% Line 2276
	      call 'erlang':'setelement'
		  (24, S, I)
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6})
		  -| [{'function_name',{'set_num_el',2}}] )
	    -| ['compiler_generated'] )
	end
'occurance'/3 =
    %% Line 2279
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <El = {'xmlElement',_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,Atts,_cor26,_cor27,_cor28,_cor29},{Min,Max},S> when 'true' ->
	      let <AttVal> =
		  %% Line 2280
		  ( fun (_cor9,_cor8) ->
			case <_cor9,_cor8> of
			  <{'xmlAttribute',_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,V,_cor37},Sin> when 'true' ->
			      let <_cor3> =
				  catch
				      %% Line 2281
				      apply 'mk_int_or_atom'/1
					  (V)
			      in  %% Line 2281
				  case _cor3 of
				    %% Line 2282
				    <{'EXIT',_cor38}> when 'true' ->
					let <_cor4> =
					    %% Line 2283
					    apply 'error_path'/2
						(El, 'schema')
					in  let <Err> = {_cor4,%% Line 2283
						       'xmerl_xsd',%% Line 2284
								   {'illegal_occurance_value',V}}
					    in  let <_cor6> =
						    %% Line 2285
						    apply 'acc_errs'/2
							(Sin, Err)
						in  %% Line 2285
						    {V,_cor6}
				    %% Line 2286
				    <IAV> when 'true' ->
					{IAV,Sin}
				  end
			  %% Line 2288
			  <V1,Sin> when 'true' ->
			      {V1,Sin}
			end
		    -| [{'id',{0,0,'-occurance/3-fun-0-'}}] )
	      in  let <_cor13> =
		      %% Line 2290
		      apply 'keyNsearch'/4
			  ('minOccurs', 2, %% Line 2291
					   Atts, %% Line 2291
						 Min)
		  in  %% Line 2290
		      case apply AttVal
			       (_cor13, %% Line 2291
					S) of
			<{MinVal,S2}> when 'true' ->
			    let <_cor15> =
				%% Line 2292
				apply 'keyNsearch'/4
				    ('maxOccurs', 2, %% Line 2293
						     Atts, %% Line 2293
							   Max)
			    in  %% Line 2292
				case apply AttVal
					 (_cor15, %% Line 2293
						  S2) of
				  <{MaxVal,S3}> when 'true' ->
				      %% Line 2294
				      {{MinVal,MaxVal},S3}
				  ( <_cor16> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor16})
				    -| ['compiler_generated'] )
				end
			( <_cor14> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor14})
			  -| ['compiler_generated'] )
		      end
	  ( <_cor19,_cor18,_cor17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor19,_cor18,_cor17})
		  -| [{'function_name',{'occurance',3}}] )
	    -| ['compiler_generated'] )
	end
'mk_int_or_atom'/1 =
    %% Line 2296
    fun (_cor0) ->
	case _cor0 of
	  <V = [117|[110|[98|[111|[117|[110|[100|[101|[100]]]]]]]]]> when 'true' ->
	      %% Line 2297
	      call 'erlang':'list_to_atom'
		  (V)
	  %% Line 2298
	  <V>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      %% Line 2299
	      call 'erlang':'list_to_integer'
		  (V)
	  %% Line 2300
	  <V> when 'true' ->
	      %% Line 2301
	      V
	end
'mixed'/2 =
    %% Line 2307
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <E = {'xmlElement',_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,C,_cor35,_cor36,_cor37},S> when 'true' ->
	      let <_cor9> =
		  %% Line 2308
		  apply 'get_attribute_value'/3
		      ('mixed', E, 'undefined')
	      in  let <_cor8> =
		      %% Line 2309
		      ( letrec
			    'lc$^0'/1 =
				fun (_cor5) ->
				    case _cor5 of
				      <[Y = {'xmlElement',_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48}|_cor3]> when 'true' ->
					  let <_cor4> =
					      apply 'kind'/1
						  (Y)
					  in  ( case <> of
						  <>
						      when call 'erlang':'=:='
							    (_cor4,
							     'simpleContent') ->
						      let <_cor6> =
							  apply 'lc$^0'/1
							      (_cor3)
						      in  ( [Y|_cor6]
							    -| ['compiler_generated'] )
						  ( <> when 'true' ->
							apply 'lc$^0'/1
							    (_cor3)
						    -| ['compiler_generated'] )
						end
						-| ['list_comprehension'] )
				      ( <[_cor2|_cor3]> when 'true' ->
					    apply 'lc$^0'/1
						(_cor3)
					-| ['compiler_generated'] )
				      <[]> when 'true' ->
					  []
				      ( <_cor5> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_cor5})
					      -| [{'function_name',{'lc$^0',1}}] )
					-| ['compiler_generated'] )
				    end
			in  apply 'lc$^0'/1
				(C)
			-| ['list_comprehension'] )
		  in  %% Line 2308
		      case <_cor9,_cor8> of
			%% Line 2310
			<_cor49,[_X_SCE|[]]> when 'true' ->
			    %% Line 2311
			    {'false',S}
			%% Line 2312
			<'undefined',_cor50> when 'true' ->
			    let <_cor16> =
				%% Line 2313
				( letrec
				      'lc$^1'/1 =
					  fun (_cor13) ->
					      case _cor13 of
						<[X = {'xmlElement',_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61}|_cor11]> when 'true' ->
						    let <_cor12> =
							%% Line 2314
							apply 'kind'/1
							    (X)
						    in  %% Line 2314
							( case <> of
							    <>
								when call 'erlang':'=:='
								      (_cor12,
								       'complexContent') ->
								let <_cor14> =
								    apply 'lc$^1'/1
									(_cor11)
								in  ( [X|_cor14]
								      -| ['compiler_generated'] )
							    ( <> when 'true' ->
								  apply 'lc$^1'/1
								      (_cor11)
							      -| ['compiler_generated'] )
							  end
							  -| ['list_comprehension'] )
						( <[_cor10|_cor11]> when 'true' ->
						      apply 'lc$^1'/1
							  (_cor11)
						  -| ['compiler_generated'] )
						<[]> when 'true' ->
						    []
						( <_cor13> when 'true' ->
						      ( primop 'match_fail'
							    ({'function_clause',_cor13})
							-| [{'function_name',{'lc$^1',1}}] )
						  -| ['compiler_generated'] )
					      end
				  in  apply 'lc$^1'/1
					  (C)
				  -| ['list_comprehension'] )
			    in  %% Line 2313
				case _cor16 of
				  %% Line 2315
				  <[E2|[]]> when 'true' ->
				      %% Line 2317
				      apply 'mixed'/2
					  (E2, S)
				  %% Line 2318
				  <_cor62> when 'true' ->
				      %% Line 2319
				      {'false',S}
				end
			%% Line 2321
			<M,_cor63>
			    when let <_cor18> =
				  call 'erlang':'=='
				      (M, [49])
			      in  let <_cor19> =
				      call 'erlang':'=='
					  (M, [116|[114|[117|[101]]]])
				  in  call 'erlang':'or'
					  (_cor18, _cor19) ->
			    {'true',S}
			%% Line 2322
			<M,_cor64>
			    when let <_cor20> =
				  call 'erlang':'=='
				      (M, [48])
			      in  let <_cor21> =
				      call 'erlang':'=='
					  (M, [102|[97|[108|[115|[101]]]]])
				  in  call 'erlang':'or'
					  (_cor20, _cor21) ->
			    {'false',S}
			%% Line 2323
			<M,_cor65> when 'true' ->
			    let <_cor22> =
				%% Line 2324
				apply 'error_path'/2
				    (E, 'schema')
			    in  let <Err> = {_cor22,%% Line 2324
					    'xmerl_xsd',%% Line 2324
							{'invalid_mixed_value',M}}
				in  let <_cor24> =
					%% Line 2325
					apply 'acc_errs'/2
					    (S, Err)
				    in  %% Line 2325
					{'false',_cor24}
		      end
	  ( <_cor27,_cor26> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor27,_cor26})
		  -| [{'function_name',{'mixed',2}}] )
	    -| ['compiler_generated'] )
	end
'mixify'/2 =
    %% Line 2328
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'false',CM> when 'true' ->
	      %% Line 2329
	      CM
	  %% Line 2330
	  <'true',CM> when 'true' ->
	      %% Line 2331
	      apply 'mixify2'/2
		  (CM, ['optional_text'])
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'mixify',2}}] )
	    -| ['compiler_generated'] )
	end
'mixify2'/2 =
    %% Line 2332
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],Acc> when 'true' ->
	      %% Line 2333
	      call 'lists':'reverse'
		  (Acc)
	  %% Line 2334
	  <[H|T],Acc> when 'true' ->
	      %% Line 2335
	      apply 'mixify2'/2
		  (T, ['optional_text'|[H|Acc]])
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'mixify2',2}}] )
	    -| ['compiler_generated'] )
	end
'complexity'/1 =
    %% Line 2337
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      %% Line 2338
	      'undefined'
	  %% Line 2339
	  <[{'xmlText',_cor3,_cor4,_cor5,_cor6,_cor7}|T]> when 'true' ->
	      %% Line 2340
	      apply 'complexity'/1
		  (T)
	  %% Line 2341
	  <[{'xmlComment',_cor8,_cor9,_cor10,_cor11}|T]> when 'true' ->
	      %% Line 2342
	      apply 'complexity'/1
		  (T)
	  %% Line 2343
	  <[H|T]> when 'true' ->
	      %% Line 2344
	      case apply 'kind'/1
		       (H) of
		%% Line 2345
		<'simpleContent'> when 'true' ->
		    %% Line 2346
		    'simple'
		%% Line 2347
		<'complexContent'> when 'true' ->
		    %% Line 2348
		    'complex'
		%% Line 2349
		<_cor12> when 'true' ->
		    %% Line 2350
		    apply 'complexity'/1
			(T)
	      end
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'complexity',1}}] )
	    -| ['compiler_generated'] )
	end
'validate_xml'/2 =
    %% Line 2373
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <El = {'xmlElement',Name,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39},S = %% Line 2374
													      {'xsd_state',_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,SchemaLocations,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,Tab,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,_cor69}> when 'true' ->
	      %% Line 2375
	      case apply 'mk_EII_QName'/3
		       (Name, El, S) of
		<ElQName = {_cor70,_cor71,Namespace}> when 'true' ->
		    let <SchemaCM> =
			%% Line 2376
			apply 'get_schema_cm'/2
			    (Tab, Namespace)
		    in  let <_cor12> =
			    %% Line 2377
			    ( letrec
				  'lc$^0'/1 =
				      fun (_cor8) ->
					  case _cor8 of
					    <[X = {'element',{QName,Occ}}|_cor5]> when 'true' ->
						%% Line 2378
						( case apply 'cmp_name'/3
							   (ElQName, QName, S) of
						    <'true'> when 'true' ->
							%% Line 2379
							( case apply 'at_least_one'/1
								   (Occ) of
							    <'true'> when 'true' ->
								let <_cor9> =
								    apply 'lc$^0'/1
									(_cor5)
								in  ( [X|_cor9]
								      -| ['compiler_generated'] )
							    ( <'false'> when 'true' ->
								  apply 'lc$^0'/1
								      (_cor5)
							      -| ['compiler_generated'] )
							    ( <_cor10> when 'true' ->
								  primop 'match_fail'
								      ({'case_clause',_cor10})
							      -| ['compiler_generated'] )
							  end
							  -| ['list_comprehension'] )
						    ( <'false'> when 'true' ->
							  apply 'lc$^0'/1
							      (_cor5)
						      -| ['compiler_generated'] )
						    ( <_cor11> when 'true' ->
							  primop 'match_fail'
							      ({'case_clause',_cor11})
						      -| ['compiler_generated'] )
						  end
						  -| ['list_comprehension'] )
					    ( <[_cor4|_cor5]> when 'true' ->
						  apply 'lc$^0'/1
						      (_cor5)
					      -| ['compiler_generated'] )
					    <[]> when 'true' ->
						[]
					    ( <_cor8> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor8})
						    -| [{'function_name',{'lc$^0',1}}] )
					      -| ['compiler_generated'] )
					  end
			      in  ( case SchemaCM of
				      ( <( {'schema',_cor72,_cor73,_cor74,_cor75,_cor76,_cor77,_rec211}
					   -| ['compiler_generated'] )> when 'true' ->
					    apply 'lc$^0'/1
						(_rec211)
					-| ['compiler_generated'] )
				      ( <_cor78> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','schema'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
			      -| ['list_comprehension'] )
			in  %% Line 2377
			    case _cor12 of
			      %% Line 2380
			      <[Obj|[]]> when 'true' ->
				  %% Line 2381
				  case apply 'load_object'/2
					   (Obj, S) of
				    <{Object,S2}> when 'true' ->
					%% Line 2382
					apply 'validate_xml'/3
					    (El, Object, S2)
				    ( <_cor13> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor13})
				      -| ['compiler_generated'] )
				  end
			      %% Line 2383
			      <_cor79> when 'true' ->
				  %% Line 2386
				  case apply 'is_already_processed'/2
					   (Namespace, S) of
				    %% Line 2387
				    <'true'> when 'true' ->
					let <_cor14> =
					    %% Line 2388
					    apply 'error_path'/2
						(El, Name)
					in  %% Line 2388
					    {'error',{_cor14,'xmerl_xsd',%% Line 2389
									 {'element_not_in_schema',[Name|[ElQName|[SchemaCM|[]]]]}}}
				    %% Line 2390
				    <_cor80> when 'true' ->
					let <_cor15> =
					    %% Line 2391
					    apply 'if_atom_to_list'/1
						(Namespace)
					in  %% Line 2391
					    case call 'lists':'keysearch'
						     (_cor15, 1, SchemaLocations) of
					      %% Line 2392
					      <{'value',{_cor81,Location}}> when 'true' ->
						  let <S1> =
						      %% Line 2395
						      apply 'prefix_namespace_2global'/3
							  (Namespace, _cor32, S)
						  in  let <S2> =
							  %% Line 2396
							  apply 'save_namespace_definition'/2
							      (Namespace, S1)
						      in  %% Line 2397
							  case S2 of
							    <{'xsd_state',_cor93,_cor94,_cor95,_cor96,_cor97,_cor98,_cor99,_cor100,_cor101,_cor102,_cor103,_cor104,_cor105,_cor106,_cor107,_cor108,_cor109,_cor110,_cor111,_cor112,_cor113,_cor114,_cor115,_cor116,_cor117,_cor118,_cor119,_cor120,_cor121,_cor122,_cor123,_cor124}> when 'true' ->
								let <_cor22> =
								    call 'erlang':'setelement'
									(13, S2, Namespace)
								in  let <S3> =
									apply 'process_external_schema'/2
									    (Location, _cor22)
								    in  %% Line 2398
									apply 'validate_xml'/2
									    (El, S3)
							    ( <_cor125> when 'true' ->
								  ( call ( 'erlang'
									   -| ['compiler_generated'] ):( 'error'
													 -| ['compiler_generated'] )
									(( {'badrecord','xsd_state'}
									   -| ['compiler_generated'] ))
								    -| ['compiler_generated'] )
							      -| ['compiler_generated'] )
							  end
					      %% Line 2399
					      <_cor126> when 'true' ->
						  let <_cor24> =
						      %% Line 2400
						      apply 'error_path'/2
							  (El, Name)
						  in  %% Line 2400
						      {'error',{_cor24,'xmerl_xsd',%% Line 2401
										   {'element_not_in_schema',[Name|[ElQName|[SchemaCM|[]]]]}}}
					    end
				  end
			    end
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor29,_cor28> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor29,_cor28})
		  -| [{'function_name',{'validate_xml',2}}] )
	    -| ['compiler_generated'] )
	end
'validate_xml'/3 =
    %% Line 2406
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <XMLEl = {'xmlElement',_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29},SEl = {'schema_element',_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44},S> when 'true' ->
	      %% Line 2408
	      case apply 'check_target_namespace'/2
		       (XMLEl, S) of
		%% Line 2409
		<'ok'> when 'true' ->
		    let <S2> =
			%% Line 2413
			apply 'schemaLocations'/2
			    (XMLEl, S)
		    in  %% Line 2416
			( case S2 of
			    ( <( {'xsd_state',_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,_cor69,_cor70,_cor71,_cor72,_cor73,_cor74,_cor75,_rec214,_cor76,_cor77,_cor78,_cor79,_cor80,_cor81,_cor82,_cor83,_cor84,_cor85,_cor86,_cor87}
				 -| ['compiler_generated'] )> when 'true' ->
				  let <Block> =
				      apply 'blocking'/2
					  (_cor43, _rec214)
				  in  let <Ret> =
					  %% Line 2417
					  apply 'check_element_type'/6
					      ([XMLEl|[]], SEl, [], Block, S2, [])
				      in  %% Line 2418
					  case Ret of
					    %% Line 2419
					    <{ValXML,UnvalRest,S3}> when 'true' ->
						%% Line 2421
						{ValXML,UnvalRest,S3}
					    %% Line 2422
					    <_cor89> when 'true' ->
						%% Line 2423
						Ret
					  end
			      -| ['compiler_generated'] )
			    ( <_cor88> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','xsd_state'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		%% Line 2425
		<_cor90> when 'true' ->
		    let <_cor12> =
			%% Line 2426
			apply 'error_path'/2
			    (XMLEl, _cor19)
		    in  let <Err> =
			    %% Line 2426
			    {_cor12,'xmerl_xsd',%% Line 2427
						{'target_namespace_missmatch'}}
			in  let <_cor14> =
				%% Line 2428
				apply 'acc_errs'/2
				    (S, Err)
			    in  %% Line 2428
				{XMLEl,[],_cor14}
	      end
	  ( <_cor18,_cor17,_cor16> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor18,_cor17,_cor16})
		  -| [{'function_name',{'validate_xml',3}}] )
	    -| ['compiler_generated'] )
	end
'check_element_type'/6 =
    %% Line 2435
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <XML = [XMLTxt = {'xmlText',_cor146,_cor147,_cor148,_cor149,_cor150}|Rest],CM = [CMEl|CMRest],Env,%% Line 2436
													    Block,%% Line 2436
														  S,%% Line 2436
														    Checked> when 'true' ->
	      %% Line 2439
	      case apply 'is_whitespace'/1
		       (XMLTxt) of
		%% Line 2440
		<'true'> when 'true' ->
		    %% Line 2441
		    apply 'check_element_type'/6
			(Rest, CM, Env, Block, S, [XMLTxt|Checked])
		%% Line 2442
		<_cor151> when 'true' ->
		    %% Line 2443
		    case apply 'resolve'/2
			     (CMEl, S) of
		      <{ResolvedT,S2}> when 'true' ->
			  %% Line 2444
			  case apply 'check_text_type'/3
				   (XML, ResolvedT, S2) of
			    %% Line 2445
			    <{'error',Reason}> when 'true' ->
				%% Line 2446
				case apply 'is_optional'/2
					 (CMEl, S) of
				  %% Line 2447
				  <'true'> when 'true' ->
				      %% Line 2448
				      apply 'check_element_type'/6
					  (XML, CMRest, Env, Block, S, Checked)
				  %% Line 2449
				  <_cor152> when 'true' ->
				      let <_cor7> =
					  %% Line 2451
					  apply 'acc_errs'/2
					      (S, Reason)
				      in  %% Line 2450
					  apply 'check_element_type'/6
					      (Rest, CM, Env, Block, _cor7, %% Line 2451
									    Checked)
				end
			    %% Line 2453
			    <{Ret,Rest2,S3}> when 'true' ->
				let <_cor9> =
				    %% Line 2454
				    call 'lists':'reverse'
					(Ret, Checked)
				in  %% Line 2454
				    apply 'check_element_type'/6
					(Rest2, CMRest, Env, Block, S3, _cor9)
			    ( <_cor10> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor10})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor6> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor6})
			-| ['compiler_generated'] )
		    end
	      end
	  %% Line 2459
	  <XML = [{'xmlElement',_cor153,_cor154,_cor155,_cor156,_cor157,_cor158,_cor159,_cor160,_cor161,_cor162,_cor163}|_cor164],[{'sequence',{CM,Occ}}|_X_CMRest],%% Line 2460
																				    Env,%% Line 2460
																					_X_Block,%% Line 2460
																						 S,%% Line 2460
																						   Checked> when 'true' ->
	      let <_cor12> =
		  %% Line 2462
		  apply 'set_num_el'/2
		      (S, 0)
	      in  %% Line 2462
		  apply 'check_sequence'/6
		      (XML, CM, Occ, Env, _cor12, Checked)
	  %% Line 2463
	  <XML = [{'xmlElement',_cor165,_cor166,_cor167,_cor168,_cor169,_cor170,_cor171,_cor172,_cor173,_cor174,_cor175}|_cor176],[{'choice',{CM,Occ}}|_X_CMRest],%% Line 2464
																				  Env,%% Line 2464
																				      _X_Block,%% Line 2464
																					       S,%% Line 2464
																						 Checked> when 'true' ->
	      let <_cor13> =
		  %% Line 2466
		  apply 'set_num_el'/2
		      (S, 0)
	      in  %% Line 2466
		  apply 'check_choice'/6
		      (XML, CM, Occ, Env, _cor13, Checked)
	  %% Line 2467
	  <XML = [{'xmlElement',_cor177,_cor178,_cor179,_cor180,_cor181,_cor182,_cor183,_cor184,_cor185,_cor186,_cor187}|_cor188],[{'all',{CM,Occ}}|_X_CMRest],%% Line 2468
																			       Env,%% Line 2468
																				   _X_Block,%% Line 2468
																					    S,%% Line 2468
																					      Checked> when 'true' ->
	      let <_cor14> =
		  %% Line 2470
		  apply 'set_num_el'/2
		      (S, 0)
	      in  %% Line 2470
		  apply 'check_all'/7
		      (XML, CM, Occ, Env, _cor14, Checked, XML)
	  %% Line 2472
	  <XML = [XMLEl = {'xmlElement',_cor189,_cor190,_cor191,_cor192,_cor193,_cor194,_cor195,_cor196,_cor197,_cor198,_cor199}|_cor200],[CMEl|CMRest],Env,%% Line 2473
																			    Block,%% Line 2473
																				  S,%% Line 2473
																				    Checked> when 'true' ->
	      %% Line 2481
	      case apply 'resolve'/2
		       (CMEl, S) of
		<{ResolvedT,S2}> when 'true' ->
		    %% Line 2482
		    case apply 'check_element_type'/6
			     (XML, ResolvedT, Env, Block, S2, []) of
		      %% Line 2483
		      <{'error',Reason}> when 'true' ->
			  let <_cor17> =
			      %% Line 2484
			      call 'erlang':'tl'
				  (XML)
			  in  let <_cor16> =
				  %% Line 2485
				  apply 'acc_errs'/2
				      (S, Reason)
			      in  %% Line 2484
				  apply 'check_element_type'/6
				      (_cor17, CMRest, Env, Block, _cor16, %% Line 2485
									   [XMLEl|Checked])
		      %% Line 2486
		      <{[],_cor201,_cor202}> when 'true' ->
			  %% Line 2487
			  apply 'check_element_type'/6
			      (XML, CMRest, Env, Block, S, Checked)
		      %% Line 2488
		      <{XMLEl2,RestXML,S3}> when 'true' ->
			  let <_cor19> =
			      %% Line 2489
			      apply 'decrease_occurance'/1
				  (CMEl)
			  in  let <_cor18> =
				  %% Line 2490
				  call 'erlang':'++'
				      (XMLEl2, Checked)
			      in  %% Line 2489
				  apply 'check_element_type'/6
				      (RestXML, [_cor19|CMRest], Env, %% Line 2490
								      Block, %% Line 2490
									     S3, _cor18)
		      ( <_cor20> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor20})
			-| ['compiler_generated'] )
		    end
		( <_cor15> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor15})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2492
	  <[],[],_X_Env,_X_Block,S,Checked> when 'true' ->
	      %% Line 2493
	      {Checked,[],S}
	  %% Line 2494
	  <[],[CMEl|CMRest],Env,Block,S,Checked> when 'true' ->
	      %% Line 2495
	      case apply 'is_optional'/2
		       (CMEl, S) of
		%% Line 2496
		<'true'> when 'true' ->
		    %% Line 2497
		    apply 'check_element_type'/6
			([], CMRest, Env, Block, S, Checked)
		%% Line 2498
		<_cor203> when 'true' ->
		    let <_cor21> =
			%% Line 2499
			apply 'error_path'/2
			    (Checked, 'undefined')
		    in  let <Err> = {_cor21,%% Line 2499
				    'xmerl_xsd',%% Line 2500
						{'missing_mandatory_element',CMEl}}
			in  let <_cor23> =
				%% Line 2501
				apply 'acc_errs'/2
				    (S, Err)
			    in  %% Line 2501
				{Checked,[],_cor23}
	      end
	  %% Line 2503
	  <_X_XML = [],CT = %% Line 2504
			    {'schema_complex_type',_X_Name,BT,_cor204,_cor205,_cor206,_cor207,_cor208,_cor209,_cor210,_cor211,%% Line 2505
															      'simple',_cor212,%% Line 2506
																	       _X_C,_cor213},%% Line 2507
																			     _X_Env,%% Line 2507
																				    _X_Block,%% Line 2507
																					     S,%% Line 2507
																					       Checked> when 'true' ->
	      %% Line 2510
	      case apply 'resolve'/2
		       ({'simple_or_complex_Type',BT}, S) of
		<{ResolvedType,_cor214}> when 'true' ->
		    %% Line 2511
		    case ResolvedType of
		      %% Line 2512
		      <{'schema_simple_type',_cor215,_cor216,_cor217,_cor218,_cor219,_cor220,_cor221,_cor222,_cor223}> when 'true' ->
			  %% Line 2513
			  case apply 'check_type'/4
				   (ResolvedType, [], 'unapplied', S) of
			    <{NewVal,S2}> when 'true' ->
				%% Line 2514
				{NewVal,[],S2}
			    ( <_cor26> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor26})
			      -| ['compiler_generated'] )
			  end
		      %% Line 2515
		      <{'simpleType',_cor224}> when 'true' ->
			  %% Line 2516
			  case apply 'check_type'/4
				   (ResolvedType, [], 'unapplied', S) of
			    <{NewVal,S2}> when 'true' ->
				%% Line 2517
				{NewVal,[],S2}
			    ( <_cor27> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor27})
			      -| ['compiler_generated'] )
			  end
		      %% Line 2518
		      <_cor225> when 'true' ->
			  let <_cor28> =
			      %% Line 2519
			      apply 'error_path'/2
				  (Checked, 'undefined')
			  in  %% Line 2519
			      {'error',{_cor28,'xmerl_xsd',%% Line 2520
							   {'empty_content_not_allowed',CT}}}
		    end
		( <_cor25> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor25})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2522
	  <[],{'schema_complex_type',_X_Name,_cor226,_cor227,_cor228,_cor229,_cor230,_cor231,_X_Bl,_cor232,_cor233,_cor234,_cor235,C,_cor236},%% Line 2523
																	      _X_Env,%% Line 2523
																		     _X_Block,%% Line 2523
																			      S,%% Line 2523
																				Checked> when 'true' ->
	      %% Line 2525
	      case apply 'allow_empty_content'/1
		       (C) of
		%% Line 2526
		<'true'> when 'true' ->
		    {[],[],S}
		%% Line 2527
		<'false'> when 'true' ->
		    let <_cor30> =
			%% Line 2528
			apply 'error_path'/2
			    (Checked, 'undefined')
		    in  %% Line 2528
			{'error',{_cor30,'xmerl_xsd',%% Line 2529
						     {'empty_content_not_allowed',C}}}
		( <_cor31> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor31})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2531
	  <C,{'anyType',_cor237},_X_Env,_X_Block,S,_X_Checked> when 'true' ->
	      let <_cor32> =
		  %% Line 2533
		  call 'lists':'reverse'
		      (C)
	      in  %% Line 2533
		  {_cor32,[],S}
	  %% Line 2535
	  <XML = [{'xmlText',_cor238,_cor239,_cor240,_cor241,_cor242}|_cor243],Type = {'schema_simple_type',_cor244,_cor245,_cor246,_cor247,_cor248,_cor249,_cor250,_cor251,_cor252},%% Line 2536
																						     _X_Env,%% Line 2536
																							    _X_Block,%% Line 2536
																								     S,%% Line 2536
																								       _X_Checked> when 'true' ->
	      %% Line 2537
	      apply 'check_text_type'/3
		  (XML, Type, S)
	  %% Line 2538
	  <XML = [{'xmlText',_cor253,_cor254,_cor255,_cor256,_cor257}|_cor258],Type = {'simpleType',_X_NameNS},%% Line 2539
													       _X_Env,%% Line 2539
														      _X_Block,%% Line 2539
															       S,%% Line 2539
																 _X_Checked> when 'true' ->
	      %% Line 2540
	      apply 'check_text_type'/3
		  (XML, Type, S)
	  %% Line 2542
	  <XML = [{'xmlText',_cor259,_cor260,_cor261,_cor262,_cor263}|_cor264],%% Line 2543
									       {'schema_complex_type',_X_Name,BT,_cor265,_cor266,_cor267,_cor268,_cor269,_cor270,_cor271,_cor272,%% Line 2544
																						 'simple',_cor273,%% Line 2545
																								  _X_C,_cor274},%% Line 2545
																										Env,%% Line 2545
																										    Block,%% Line 2545
																											  S,%% Line 2545
																											    Checked> when 'true' ->
	      %% Line 2548
	      case apply 'resolve'/2
		       ({'simple_or_complex_Type',BT}, S) of
		<{ResolvedType,_cor275}> when 'true' ->
		    %% Line 2549
		    apply 'check_element_type'/6
			(XML, ResolvedType, Env, Block, S, Checked)
		( <_cor33> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor33})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2552
	  <XML = [_X_H|_cor276],%% Line 2553
				{'schema_complex_type',Name,_cor277,_cor278,_cor279,_cor280,_cor281,_cor282,Bl,_cor283,_cor284,_cor285,_cor286,C,_cor287},%% Line 2554
																			  Env,%% Line 2554
																			      _X_Block,%% Line 2554
																				       S,%% Line 2554
																					 Checked> when 'true' ->
	      let <_cor35> =
		  %% Line 2555
		  case Name of
		    %% Line 2556
		    <{LN,_X_Scope,_X_NS}> when 'true' ->
			LN
		    %% Line 2557
		    <_cor288> when 'true' ->
			'anonymous'
		  end
	      in  %% Line 2559
		  ( case S of
		      ( <( {'xsd_state',_cor289,_cor290,_cor291,_cor292,_cor293,_cor294,_cor295,_cor296,_cor297,_cor298,_cor299,_cor300,_cor301,_cor302,_cor303,_cor304,_cor305,_cor306,_cor307,_rec216,_cor308,_cor309,_cor310,_cor311,_cor312,_cor313,_cor314,_cor315,_cor316,_cor317,_cor318,_cor319}
			   -| ['compiler_generated'] )> when 'true' ->
			    let <Block> =
				apply 'blocking'/2
				    (Bl, _rec216)
			    in  let <_cor40> =
				    %% Line 2560
				    apply 'name_scope'/2
					(Name, S)
				in  %% Line 2560
				    apply 'check_element_type'/6
					(XML, C, [_cor35|Env], Block, _cor40, Checked)
			-| ['compiler_generated'] )
		      ( <_cor320> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','xsd_state'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  %% Line 2563
	  <XML = [XMLEl = {'xmlElement',Name,_cor321,_cor322,_cor323,_cor324,_cor325,_cor326,_cor327,_cor328,_cor329,_cor330}|RestXML],CMEl = %% Line 2564
																	      {'schema_element',CMName,Type,_cor331,_cor332,_cor333,_cor334,_cor335,_cor336,_cor337,_cor338,_cor339,_cor340,_cor341,_cor342,_cor343},%% Line 2565
																																		     Env,%% Line 2565
																																			 Block,%% Line 2565
																																			       S,%% Line 2565
																																				 Checked> when 'true' ->
	      let <_rec217> =
		  %% Line 2566
		  call 'erlang':'element'
		      (2, CMName)
	      in  %% Line 2566
		  case S of
		    <{'xsd_state',_cor344,_cor345,_cor346,_cor347,_cor348,_cor349,_cor350,_cor351,_cor352,_cor353,_cor354,_cor355,_cor356,_cor357,_cor358,_cor359,_cor360,_cor361,_cor362,_cor363,_cor364,_cor365,_cor366,_cor367,_cor368,_cor369,_cor370,_cor371,_cor372,_cor373,_cor374,_cor375}> when 'true' ->
			let <_cor44> =
			    call 'erlang':'setelement'
				(8, S, _rec217)
			in  let <ElName> =
				apply 'mk_EII_QName'/3
				    (Name, XMLEl, _cor44)
			    in  %% Line 2567
				case _cor338 of
				  <{Min,Max}> when 'true' ->
				      %% Line 2568
				      case apply 'cmp_name'/3
					       (ElName, CMName, S) of
					%% Line 2569
					<'true'>
					    when ( call 'erlang':'=<'
						    (_cor366,
						     Max)
						-| ['compiler_generated'] ) ->
					    let <S1> =
						%% Line 2570
						apply 'id_constraints'/3
						    (CMEl, XMLEl, S)
					    in  let <CMEl2,Type2,S2> =
						    %% Line 2574
						    case <> of
						      %% Line 2575
						      <>
							  when call 'erlang':'=:='
								(ElName,
								 CMName) ->
							  %% Line 2576
							  <CMEl,Type,S1>
						      %% Line 2577
						      <> when 'true' ->
							  %% Line 2578
							  case apply 'resolve'/2
								   ({'element',ElName}, S1) of
							    %% Line 2579
							    <{SESub = {'schema_element',_cor392,SubType,_cor393,_cor394,_cor395,_cor396,_cor397,_cor398,_cor399,_cor400,_cor401,_cor402,_cor403,_cor404,_cor405},Ssub}> when 'true' ->
								%% Line 2580
								<SESub,SubType,Ssub>
							    %% Line 2581
							    <{_cor406,Ssub}> when 'true' ->
								%% Line 2582
								<CMEl,Type,Ssub>
							    ( <_cor56> when 'true' ->
								  primop 'match_fail'
								      ({'case_clause',_cor56})
							      -| ['compiler_generated'] )
							  end
						    end
						in  %% Line 2586
						    case apply 'resolve'/3
							     (Type2, XMLEl, S2) of
						      <{ResolvedType,S3}> when 'true' ->
							  let <XsiFactors> =
							      %% Line 2589
							      apply 'xsi_factors'/1
								  (CMEl2)
							  in  %% Line 2590
							      case apply 'check_attributes'/4
								       (XMLEl, ResolvedType, %% Line 2591
											     XsiFactors, %% Line 2591
													 S3) of
								<{XMLEl2,S4}> when 'true' ->
								    let <S5> =
									%% Line 2592
									apply 'check_abstract'/4
									    (ElName, XMLEl, CMEl, S4)
								    in  %% Line 2595
									( case S5 of
									    ( <( {'xsd_state',_cor422,_cor423,_cor424,_cor425,_cor426,_cor427,_cor428,_cor429,_rec221,_cor430,_cor431,_cor432,_cor433,_cor434,_cor435,_cor436,_cor437,_cor438,_cor439,_cor440,_cor441,_cor442,_cor443,_cor444,_cor445,_cor446,_cor447,_cor448,_cor449,_cor450,_cor451,_cor452}
										 -| ['compiler_generated'] )> when 'true' ->
										  let <_cor67> =
										      apply 'actual_form_value'/2
											  (_cor336, _rec221)
										  in  let <S6> =
											  apply 'check_form'/5
											      (ElName, Name, XMLEl, _cor67, %% Line 2596
															    S5)
										      in  %% Line 2600
											  ( case XMLEl2 of
											      ( <( {'xmlElement',_cor454,_cor455,_cor456,_cor457,_cor458,_cor459,_cor460,_rec222,_cor461,_cor462,_cor463}
												   -| ['compiler_generated'] )> when 'true' ->
												    let <_cor80> =
													case apply 'check_element_type'/6
														 (_rec222, %% Line 2601
															   ResolvedType, %% Line 2601
																	 Env, %% Line 2602
																	      Block, %% Line 2602
																		     S6, %% Line 2602
																			 Checked) of
													  %% Line 2603
													  <{'error',Reason}> when 'true' ->
													      let <_cor71> =
														  %% Line 2604
														  apply 'acc_errs'/2
														      (S6, Reason)
													      in  %% Line 2604
														  {_rec222,[],_cor71}
													  %% Line 2605
													  <Result = {_cor476,[],_cor477}> when 'true' ->
													      Result
													  %% Line 2606
													  <{_cor478,UnexpectedRest,_cor479}> when 'true' ->
													      let <_cor74> =
														  %% Line 2607
														  apply 'error_path'/2
														      (XMLEl, Name)
													      in  let <Err> = {_cor74,%% Line 2607
															      'xmerl_xsd',%% Line 2608
																	  {'unexpected_rest',UnexpectedRest}}
														  in  let <_cor76> =
															  %% Line 2610
															  apply 'acc_errs'/2
															      (S6, Err)
														      in  %% Line 2609
															  {_rec222,[],_cor76}
													  ( <_cor79> when 'true' ->
														primop 'match_fail'
														    ({'case_clause',_cor79})
													    -| ['compiler_generated'] )
													end
												    in  case _cor80 of
													  <{Content,_cor491,S7}> when 'true' ->
													      let <_rec225> =
														  %% Line 2612
														  call 'lists':'reverse'
														      (Content)
													      in  let <_cor89> =
														      %% Line 2612
														      call 'erlang':'setelement'
															  (9, XMLEl2, _rec225)
														  in  let <_cor82> =
															  %% Line 2614
															  apply 'set_num_el'/2
															      (S7, S6)
														      in  let <_cor85> =
															      %% Line 2614
															      apply 'set_scope'/2
																  (_cor428, _cor82)
															  in  %% Line 2612
															      {[_cor89|[]],%% Line 2613
																	   RestXML,_cor85}
													  ( <_cor81> when 'true' ->
														primop 'match_fail'
														    ({'badmatch',_cor81})
													    -| ['compiler_generated'] )
													end
												-| ['compiler_generated'] )
											      ( <_cor464> when 'true' ->
												    ( call ( 'erlang'
													     -| ['compiler_generated'] ):( 'error'
																	   -| ['compiler_generated'] )
													  (( {'badrecord','xmlElement'}
													     -| ['compiler_generated'] ))
												      -| ['compiler_generated'] )
												-| ['compiler_generated'] )
											    end
											    -| ['compiler_generated'] )
									      -| ['compiler_generated'] )
									    ( <_cor453> when 'true' ->
										  ( call ( 'erlang'
											   -| ['compiler_generated'] ):( 'error'
															 -| ['compiler_generated'] )
											(( {'badrecord','xsd_state'}
											   -| ['compiler_generated'] ))
										    -| ['compiler_generated'] )
									      -| ['compiler_generated'] )
									  end
									  -| ['compiler_generated'] )
								( <_cor61> when 'true' ->
								      primop 'match_fail'
									  ({'badmatch',_cor61})
								  -| ['compiler_generated'] )
							      end
						      ( <_cor59> when 'true' ->
							    primop 'match_fail'
								({'badmatch',_cor59})
							-| ['compiler_generated'] )
						    end
					%% Line 2615
					<'true'> when 'true' ->
					    let <_cor90> =
						%% Line 2616
						apply 'error_path'/2
						    (XMLEl, Name)
					    in  %% Line 2616
						{'error',{_cor90,'xmerl_xsd',%% Line 2617
									     {'element_not_suitable_with_schema',ElName,S}}}
					%% Line 2618
					<_cor536>
					    when ( call 'erlang':'>='
						    (_cor366,
						     Min)
						-| ['compiler_generated'] ) ->
					    let <_cor99> =
						%% Line 2621
						call 'erlang':'setelement'
						    (24, S, 0)
					    in  %% Line 2621
						{[],XML,_cor99}
					%% Line 2622
					<_cor570> when 'true' ->
					    let <_cor100> =
						%% Line 2623
						apply 'error_path'/2
						    (XMLEl, Name)
					    in  %% Line 2623
						{'error',{_cor100,'xmerl_xsd',%% Line 2624
									      {'element_not_suitable_with_schema',ElName,CMName,CMEl,S}}}
				      end
				  ( <_cor48> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor48})
				    -| ['compiler_generated'] )
				end
		    ( <_cor376> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','xsd_state'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 2626
	  <XML,{'schema_group',_cor571,_cor572,_cor573,[CM|[]],_cor574},Env,Block,S,Checked> when 'true' ->
	      %% Line 2628
	      apply 'check_element_type'/6
		  (XML, CM, Env, Block, S, Checked)
	  %% Line 2629
	  <XML,{'schema_group',_cor575,_cor576,_cor577,[],_cor578},_X_Env,_X_Block,_X_S,_X_Checked> when 'true' ->
	      let <_cor102> =
		  %% Line 2630
		  apply 'error_path'/2
		      (XML, 'undefined')
	      in  %% Line 2630
		  {'error',{_cor102,'xmerl_xsd',{'no_element_expected_in_group',XML}}}
	  %% Line 2631
	  <XML = [{'xmlElement',_cor579,_cor580,_cor581,_cor582,_cor583,_cor584,_cor585,_X_Content,_cor586,_cor587,_cor588}|_X_Rest],%% Line 2632
																     {'sequence',{Els,Occ}},%% Line 2632
																			    Env,%% Line 2632
																				_X_Block,%% Line 2632
																					 S,%% Line 2632
																					   Checked> when 'true' ->
	      %% Line 2634
	      case S of
		<{'xsd_state',_cor589,_cor590,_cor591,_cor592,_cor593,_cor594,_cor595,_cor596,_cor597,_cor598,_cor599,_cor600,_cor601,_cor602,_cor603,_cor604,_cor605,_cor606,_cor607,_cor608,_cor609,_cor610,_cor611,_cor612,_cor613,_cor614,_cor615,_cor616,_cor617,_cor618,_cor619,_cor620}> when 'true' ->
		    let <_cor105> =
			call 'erlang':'setelement'
			    (24, S, 0)
		    in  case apply 'check_sequence'/6
				 (XML, Els, Occ, Env, _cor105, Checked) of
			  %% Line 2635
			  <Err = {'error',_cor622}> when 'true' ->
			      %% Line 2636
			      Err
			  %% Line 2637
			  <{ValidContent,Rest2,S2}> when 'true' ->
			      %% Line 2640
			      {ValidContent,Rest2,S2}
			  ( <_cor106> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor106})
			    -| ['compiler_generated'] )
			end
		( <_cor621> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','xsd_state'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 2642
	  <XML = [{'xmlElement',_cor623,_cor624,_cor625,_cor626,_cor627,_cor628,_cor629,_cor630,_cor631,_cor632,_cor633}|_X_Rest],%% Line 2643
																  {'choice',{Els,Occ}},%% Line 2643
																		       Env,%% Line 2643
																			   _X_Block,%% Line 2643
																				    S,%% Line 2643
																				      Checked> when 'true' ->
	      %% Line 2646
	      case S of
		<{'xsd_state',_cor634,_cor635,_cor636,_cor637,_cor638,_cor639,_cor640,_cor641,_cor642,_cor643,_cor644,_cor645,_cor646,_cor647,_cor648,_cor649,_cor650,_cor651,_cor652,_cor653,_cor654,_cor655,_cor656,_cor657,_cor658,_cor659,_cor660,_cor661,_cor662,_cor663,_cor664,_cor665}> when 'true' ->
		    let <_cor109> =
			call 'erlang':'setelement'
			    (24, S, 0)
		    in  case apply 'check_choice'/6
				 (XML, Els, Occ, Env, _cor109, Checked) of
			  %% Line 2647
			  <Err = {'error',_cor667}> when 'true' ->
			      %% Line 2648
			      Err
			  %% Line 2649
			  <{ValidContent,Rest2,S2}> when 'true' ->
			      %% Line 2651
			      {ValidContent,Rest2,S2}
			  ( <_cor110> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor110})
			    -| ['compiler_generated'] )
			end
		( <_cor666> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','xsd_state'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 2653
	  <XML = [E = {'xmlElement',Name,_cor668,_cor669,_cor670,_cor671,_cor672,_cor673,_cor674,_cor675,_cor676,_cor677}|Rest],Any = %% Line 2654
																      {'any',{Namespace,_X_Occ = {Min,_cor678},ProcessorContents}},%% Line 2654
																								   Env,%% Line 2655
																								       _X_Block,%% Line 2655
																										S,%% Line 2655
																										  _X_Checked> when 'true' ->
	      let <ElName> =
		  %% Line 2660
		  apply 'mk_EII_QName'/3
		      (Name, E, S)
	      in  %% Line 2661
		  case apply 'cmp_any_namespace'/3
			   (ElName, Namespace, S) of
		    %% Line 2662
		    <'true'> when 'true' ->
			%% Line 2663
			case ProcessorContents of
			  %% Line 2664
			  <'skip'> when 'true' ->
			      %% Line 2665
			      {[E|[]],Rest,S}
			  %% Line 2666
			  <'lax'> when 'true' ->
			      %% Line 2667
			      {[E|[]],Rest,S}
			  %% Line 2669
			  <'strict'> when 'true' ->
			      %% Line 2670
			      case call 'lists':'member'
				       ('absent', Namespace) of
				%% Line 2671
				<'true'> when 'true' ->
				    let <Traverse> =
					%% Line 2676
					( fun (_cor118,_cor117,_cor116) ->
					      case <_cor118,_cor117,_cor116> of
						<{'xmlElement',_cor679,_cor680,[],_cor681,_cor682,_cor683,%% Line 2677
													  Atts,%% Line 2678
													       C,_cor684,_cor685,_cor686},%% Line 2679
																	  Sin,%% Line 2679
																	      Fun> when 'true' ->
						    let <Sin2> =
							%% Line 2680
							apply Fun
							    (Atts, Sin, Fun)
						    in  %% Line 2681
							apply Fun
							    (C, Sin2, Fun)
						%% Line 2682
						<{'xmlAttribute',_cor687,_cor688,_cor689,[],_cor690,_cor691,_cor692,_cor693,_cor694},Sin,_X_Fun> when 'true' ->
						    %% Line 2683
						    Sin
						%% Line 2684
						<{'xmlText',_cor695,_cor696,_cor697,_cor698,_cor699},Sin,_X_Fun> when 'true' ->
						    Sin
						%% Line 2685
						<[H|T],Sin,Fun> when 'true' ->
						    let <Sin2> =
							%% Line 2686
							apply Fun
							    (H, Sin, Fun)
						    in  %% Line 2687
							apply Fun
							    (T, Sin2, Fun)
						%% Line 2688
						<[],Sin,_X_Fun> when 'true' ->
						    %% Line 2689
						    Sin
						%% Line 2690
						<El,Sin,_X_Fun> when 'true' ->
						    let <_cor114> =
							%% Line 2691
							apply 'error_path'/2
							    (E, Name)
						    in  let <Err> = {_cor114,%% Line 2691
								     'xmerl_xsd',%% Line 2692
										 {'illegal_component_in_any',El}}
							in  %% Line 2693
							    apply 'acc_errs'/2
								(Sin, Err)
					      end
					  -| [{'id',{0,0,'-check_element_type/6-fun-0-'}}] )
				    in  let <S2> =
					    %% Line 2695
					    apply Traverse
						(E, S, Traverse)
					in  %% Line 2696
					    {[E|[]],Rest,S2}
				%% Line 2697
				<_cor700> when 'true' ->
				    %% Line 2698
				    case apply 'check_any'/4
					     (E, Any, Env, S) of
				      <{Result,S2}> when 'true' ->
					  %% Line 2699
					  {[Result|[]],Rest,S2}
				      ( <_cor124> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_cor124})
					-| ['compiler_generated'] )
				    end
			      end
			  ( <_cor126> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor126})
			    -| ['compiler_generated'] )
			end
		    %% Line 2702
		    <'false'>
			when ( try
				( case <> of
				    ( <>
					  when ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'is_record'
										   -| ['compiler_generated'] )
						  (S,
						   ( 'xsd_state'
						     -| ['compiler_generated'] ),
						   ( 33
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] ) ->
					  let <_cor131> =
					      ( call 'erlang':'element'
						    (24, S)
						-| ['compiler_generated'] )
					  in  ( call 'erlang':'>='
						    (_cor131, Min)
						-| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				    ( <> when 'true' ->
					  'false'
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
			    of <Try> ->
				Try
			    catch <T,R> ->
				'false'
			    -| ['compiler_generated'] ) ->
			%% Line 2703
			{[],XML,S}
		    %% Line 2704
		    <_cor701> when 'true' ->
			let <_cor133> =
			    %% Line 2705
			    apply 'error_path'/2
				(E, Name)
			in  %% Line 2705
			    {'error',{_cor133,'xmerl_xsd',{'element_bad_match',E,Any,Env}}}
		  end
	  %% Line 2707
	  <[],CM,_X_Env,_X_Block,S,Checked> when 'true' ->
	      %% Line 2710
	      case CM of
		%% Line 2711
		<{'schema_simple_type',_cor702,_cor703,_cor704,_cor705,_cor706,_cor707,_cor708,_cor709,_cor710}> when 'true' ->
		    %% Line 2712
		    case apply 'check_type'/4
			     (CM, [], 'unapplied', S) of
		      <{NewVal,S2}> when 'true' ->
			  %% Line 2713
			  {NewVal,[],S2}
		      ( <_cor135> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor135})
			-| ['compiler_generated'] )
		    end
		%% Line 2714
		<{'simpleType',_cor711}> when 'true' ->
		    %% Line 2715
		    case apply 'check_type'/4
			     (CM, [], 'unapplied', S) of
		      <{NewVal,S2}> when 'true' ->
			  %% Line 2716
			  {NewVal,[],S2}
		      ( <_cor136> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor136})
			-| ['compiler_generated'] )
		    end
		%% Line 2717
		<_cor712> when 'true' ->
		    let <_cor137> =
			%% Line 2718
			apply 'error_path'/2
			    (Checked, 'undefined')
		    in  %% Line 2718
			{'error',{_cor137,'xmerl_xsd',%% Line 2719
						      {'empty_content_not_allowed',CM}}}
	      end
	  %% Line 2721
	  <[C = {'xmlComment',_cor713,_cor714,_cor715,_cor716}|Rest],CM,Env,Block,S,Checked> when 'true' ->
	      %% Line 2722
	      apply 'check_element_type'/6
		  (Rest, CM, Env, Block, S, [C|Checked])
	  %% Line 2723
	  <XML,CM,_X_Env,_X_Block,S,_X_Checked> when 'true' ->
	      let <_cor139> =
		  %% Line 2724
		  apply 'error_path'/2
		      (XML, 'undefined')
	      in  %% Line 2724
		  {'error',{_cor139,'xmerl_xsd',{'match_failure',XML,CM,S}}}
	end
'check_text_type'/3 =
    %% Line 2727
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <XML = [{'xmlText',_cor30,_cor31,_cor32,_cor33,_cor34}|_cor35],'optional_text',S> when 'true' ->
	      %% Line 2729
	      case apply 'split_xmlText'/1
		       (XML) of
		<{XMLText,Rest}> when 'true' ->
		    %% Line 2730
		    {XMLText,Rest,S}
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2731
	  <XML = [Txt = {'xmlText',_cor36,_cor37,_cor38,_cor39,_cor40}|_cor41],Type = {'simpleType',_cor42},S> when 'true' ->
	      %% Line 2732
	      case apply 'split_xmlText'/1
		       (XML) of
		<{XMLText,Rest}> when 'true' ->
		    let <_cor9> =
			%% Line 2733
			( letrec
			      'lc$^0'/1 =
				  fun (_cor7) ->
				      case _cor7 of
					<[{'xmlText',_cor43,_cor44,_cor45,X,_cor46}|_cor6]> when 'true' ->
					    let <_cor8> =
						apply 'lc$^0'/1
						    (_cor6)
					    in  ( [X|_cor8]
						  -| ['compiler_generated'] )
					( <[_cor5|_cor6]> when 'true' ->
					      apply 'lc$^0'/1
						  (_cor6)
					  -| ['compiler_generated'] )
					<[]> when 'true' ->
					    []
					( <_cor7> when 'true' ->
					      ( primop 'match_fail'
						    ({'function_clause',_cor7})
						-| [{'function_name',{'lc$^0',1}}] )
					  -| ['compiler_generated'] )
				      end
			  in  apply 'lc$^0'/1
				  (XMLText)
			  -| ['list_comprehension'] )
		    in  let <_cor10> =
			    %% Line 2733
			    call 'lists':'flatten'
				(_cor9)
			in  %% Line 2733
			    case apply 'check_type'/4
				     (Type, _cor10, 'unapplied', S) of
			      <{NewVal,S2}> when 'true' ->
				  let <_cor14> =
				      %% Line 2734
				      call 'erlang':'setelement'
					  (5, Txt, NewVal)
				  in  %% Line 2734
				      {[_cor14|[]],Rest,S2}
			      ( <_cor11> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor11})
				-| ['compiler_generated'] )
			    end
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2735
	  <XML = [Txt = {'xmlText',_cor53,_cor54,_cor55,_cor56,_cor57}|_cor58],Type = {'schema_simple_type',_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67},S> when 'true' ->
	      %% Line 2736
	      case apply 'split_xmlText'/1
		       (XML) of
		<{XMLText,Rest}> when 'true' ->
		    let <_cor20> =
			%% Line 2737
			( letrec
			      'lc$^1'/1 =
				  fun (_cor18) ->
				      case _cor18 of
					<[{'xmlText',_cor68,_cor69,_cor70,X,_cor71}|_cor17]> when 'true' ->
					    let <_cor19> =
						apply 'lc$^1'/1
						    (_cor17)
					    in  ( [X|_cor19]
						  -| ['compiler_generated'] )
					( <[_cor16|_cor17]> when 'true' ->
					      apply 'lc$^1'/1
						  (_cor17)
					  -| ['compiler_generated'] )
					<[]> when 'true' ->
					    []
					( <_cor18> when 'true' ->
					      ( primop 'match_fail'
						    ({'function_clause',_cor18})
						-| [{'function_name',{'lc$^1',1}}] )
					  -| ['compiler_generated'] )
				      end
			  in  apply 'lc$^1'/1
				  (XMLText)
			  -| ['list_comprehension'] )
		    in  let <_cor21> =
			    %% Line 2737
			    call 'lists':'flatten'
				(_cor20)
			in  %% Line 2737
			    case apply 'check_type'/4
				     (Type, _cor21, 'unapplied', S) of
			      <{NewVal,S2}> when 'true' ->
				  let <_cor25> =
				      %% Line 2738
				      call 'erlang':'setelement'
					  (5, Txt, NewVal)
				  in  %% Line 2738
				      {[_cor25|[]],Rest,S2}
			      ( <_cor22> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor22})
				-| ['compiler_generated'] )
			    end
		( <_cor15> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor15})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2739
	  <[XMLTxt = {'xmlText',_cor78,_cor79,_cor80,_cor81,_cor82}|_cor83],CMEl,_X_S> when 'true' ->
	      let <_cor26> =
		  %% Line 2740
		  apply 'error_path'/2
		      (XMLTxt, 'undefined')
	      in  %% Line 2740
		  {'error',{_cor26,'xmerl_xsd',%% Line 2741
					       {'cannot_contain_text',XMLTxt,CMEl}}}
	  ( <_cor29,_cor28,_cor27> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor29,_cor28,_cor27})
		  -| [{'function_name',{'check_text_type',3}}] )
	    -| ['compiler_generated'] )
	end
'split_xmlText'/1 =
    %% Line 2743
    fun (_cor0) ->
	let <_cor3> =
	    %% Line 2744
	    ( fun (_cor1) ->
		  case _cor1 of
		    <{'xmlText',_cor5,_cor6,_cor7,_cor8,_cor9}> when 'true' ->
			'true'
		    <{'xmlComment',_cor10,_cor11,_cor12,_cor13}> when 'true' ->
			'true'
		    <_cor14> when 'true' ->
			'false'
		  end
	      -| [{'id',{0,0,'-split_xmlText/1-fun-0-'}}] )
	in  %% Line 2744
	    call 'lists':'splitwith'
		(_cor3, _cor0)
'check_sequence'/6 =
    %% Line 2747
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[T = {'xmlText',_cor40,_cor41,_cor42,_cor43,_cor44}|Rest],Els,Occ,Env,S,Checked> when 'true' ->
	      %% Line 2748
	      apply 'check_sequence'/6
		  (Rest, Els, Occ, Env, S, [T|Checked])
	  %% Line 2749
	  <Seq = [_X_InstEl = {'xmlElement',_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55}|_cor56],[El|Els],Occ = {_X_Min,_X_Max},Env,S,Checked> when 'true' ->
	      %% Line 2752
	      case apply 'resolve'/2
		       (El, S) of
		<{ResolvedT,S2}> when 'true' ->
		    let <_cor7> =
			%% Line 2753
			apply 'count_num_el'/1
			    (S2)
		    in  %% Line 2753
			case apply 'check_element_type'/6
				 (Seq, ResolvedT, Env, [], _cor7, []) of
			  %% Line 2754
			  <{[],_cor57,S3}> when 'true' ->
			      %% Line 2755
			      case apply 'is_optional'/2
				       (El, S3) of
				%% Line 2756
				<'true'> when 'true' ->
				    let <_cor8> =
					%% Line 2757
					apply 'set_num_el'/2
					    (S3, 0)
				    in  %% Line 2757
					apply 'check_sequence'/6
					    (Seq, Els, Occ, Env, _cor8, Checked)
				%% Line 2758
				<_cor58> when 'true' ->
				    let <_cor9> =
					%% Line 2759
					apply 'error_path'/2
					    (Checked, 'undefined')
				    in  %% Line 2759
					{'error',{_cor9,'xmerl_xsd',%% Line 2760
								    {'missing_mandatory_elements',El}}}
			      end
			  %% Line 2762
			  <Err = {'error',_X_Reason}> when 'true' ->
			      let <_cor14> =
				  %% Line 2763
				  apply 'is_optional'/2
				      (El, S)
			      in  %% Line 2763
				  ( case S of
				      ( <( {'xsd_state',_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,_cor69,_cor70,_cor71,_cor72,_cor73,_cor74,_cor75,_cor76,_cor77,_cor78,_cor79,_cor80,_rec233,_cor81,_cor82,_cor83,_cor84,_cor85,_cor86,_cor87,_cor88,_cor89}
					   -| ['compiler_generated'] )> when 'true' ->
					    let <_cor11> =
						apply 'get_occur'/1
						    (El)
					    in  case <_cor14,_rec233,_cor11> of
						  %% Line 2764
						  <'true',_cor91,_cor92> when 'true' ->
						      let <_cor15> =
							  %% Line 2765
							  apply 'set_num_el'/2
							      (S, 0)
						      in  %% Line 2765
							  apply 'check_sequence'/6
							      (Seq, Els, Occ, Env, _cor15, Checked)
						  %% Line 2766
						  <_cor93,N,{_X_Min2,Max}>
						      when call 'erlang':'>='
							    (N,
							     Max) ->
						      let <_cor16> =
							  %% Line 2767
							  apply 'set_num_el'/2
							      (S, 0)
						      in  %% Line 2767
							  apply 'check_sequence'/6
							      (Seq, Els, Occ, Env, _cor16, Checked)
						  %% Line 2768
						  <_fol3745,_fol3746,_fol3747> when 'true' ->
						      %% Line 2769
						      Err
						end
					-| ['compiler_generated'] )
				      ( <_cor90> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','xsd_state'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
			  %% Line 2779
			  <{Ret,UnValRest,S3}> when 'true' ->
			      let <_cor21> =
				  %% Line 2783
				  apply 'decrease_occurance'/1
				      (El)
			      in  let <_cor19> =
				      %% Line 2784
				      apply 'set_num_el'/2
					  (S3, S2)
				  in  let <_cor20> =
					  %% Line 2784
					  apply 'count_num_el'/1
					      (_cor19)
				      in  let <_cor18> =
					      %% Line 2785
					      call 'erlang':'++'
						  (Ret, Checked)
					  in  %% Line 2783
					      apply 'check_sequence'/6
						  (UnValRest, [_cor21|Els], Occ, Env, _cor20, _cor18)
			  ( <_cor22> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor22})
			    -| ['compiler_generated'] )
			end
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor6})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2787
	  <[C = {'xmlComment',_cor95,_cor96,_cor97,_cor98}|Rest],Els,Occ,Env,S,Checked> when 'true' ->
	      %% Line 2788
	      apply 'check_sequence'/6
		  (Rest, Els, Occ, Env, S, [C|Checked])
	  %% Line 2789
	  <Rest,[],_X_Occ,_X_Env,S,Checked> when 'true' ->
	      let <_cor23> =
		  %% Line 2790
		  apply 'set_num_el'/2
		      (S, 0)
	      in  %% Line 2790
		  {Checked,Rest,_cor23}
	  %% Line 2791
	  <[],Els,_X_Occ,_X_Env,S,Checked> when 'true' ->
	      let <_cor30> =
		  %% Line 2792
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor27) ->
				case _cor27 of
				  <[X = {_cor99,Y = {_cor100,_cor101}}|_cor25]> when 'true' ->
				      let <_cor26> =
					  apply 'optional'/1
					      (Y)
				      in  ( case <> of
					      <>
						  when call 'erlang':'=:='
							(_cor26,
							 'false') ->
						  let <_cor28> =
						      apply 'lc$^0'/1
							  (_cor25)
						  in  ( [X|_cor28]
							-| ['compiler_generated'] )
					      ( <> when 'true' ->
						    apply 'lc$^0'/1
							(_cor25)
						-| ['compiler_generated'] )
					    end
					    -| ['list_comprehension'] )
				  ( <[_cor24|_cor25]> when 'true' ->
					apply 'lc$^0'/1
					    (_cor25)
				    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor27> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor27})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (Els)
		    -| ['list_comprehension'] )
	      in  %% Line 2792
		  case _cor30 of
		    %% Line 2793
		    <[]> when 'true' ->
			let <_cor31> =
			    %% Line 2794
			    apply 'set_num_el'/2
				(S, 0)
			in  %% Line 2794
			    {Checked,[],_cor31}
		    %% Line 2795
		    <MandatoryEls> when 'true' ->
			let <_cor32> =
			    %% Line 2796
			    apply 'error_path'/2
				(Checked, 'undefined')
			in  %% Line 2796
			    {'error',{_cor32,'xmerl_xsd',%% Line 2797
							 {'missing_mandatory_elements',MandatoryEls}}}
		  end
	  ( <_cor39,_cor38,_cor37,_cor36,_cor35,_cor34> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor39,_cor38,_cor37,_cor36,_cor35,_cor34})
		  -| [{'function_name',{'check_sequence',6}}] )
	    -| ['compiler_generated'] )
	end
'check_choice'/6 =
    %% Line 2805
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[T = {'xmlText',_cor34,_cor35,_cor36,_cor37,_cor38}|Rest],Els,Occ,Env,S,Checked> when 'true' ->
	      %% Line 2806
	      case apply 'is_whitespace'/1
		       (T) of
		%% Line 2807
		<'true'> when 'true' ->
		    %% Line 2808
		    apply 'check_choice'/6
			(Rest, Els, Occ, Env, S, [T|Checked])
		%% Line 2809
		<_cor39> when 'true' ->
		    let <_cor6> =
			%% Line 2810
			apply 'error_path'/2
			    (T, 'undefined')
		    in  %% Line 2810
			{'error',{_cor6,'xmerl_xsd',%% Line 2811
						    {'choice_missmatch',T,Els}}}
	      end
	  %% Line 2813
	  <Ch = [{'xmlElement',_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50}|_cor51],[El|Els],Occ,Env,S,Checked> when 'true' ->
	      %% Line 2814
	      case apply 'resolve'/2
		       (El, S) of
		<{ResolvedT,S2}> when 'true' ->
		    let <_cor9> =
			%% Line 2815
			apply 'count_num_el'/1
			    (S2)
		    in  %% Line 2815
			case apply 'check_element_type'/6
				 (Ch, ResolvedT, Env, [], _cor9, []) of
			  %% Line 2816
			  <{[],_cor52,_X_S3}> when 'true' ->
			      %% Line 2817
			      apply 'check_choice'/6
				  (Ch, Els, Occ, Env, S2, Checked)
			  %% Line 2818
			  <{'error',_X_Reason}> when 'true' ->
			      let <_cor14> =
				  %% Line 2822
				  ( letrec
					'lc$^0'/1 =
					    fun (_cor12) ->
						case _cor12 of
						  <[X = {'xmlElement',_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63}|_cor11]> when 'true' ->
						      let <_cor13> =
							  apply 'lc$^0'/1
							      (_cor11)
						      in  ( [X|_cor13]
							    -| ['compiler_generated'] )
						  ( <[_cor10|_cor11]> when 'true' ->
							apply 'lc$^0'/1
							    (_cor11)
						    -| ['compiler_generated'] )
						  <[]> when 'true' ->
						      []
						  ( <_cor12> when 'true' ->
							( primop 'match_fail'
							      ({'function_clause',_cor12})
							  -| [{'function_name',{'lc$^0',1}}] )
						    -| ['compiler_generated'] )
						end
				    in  apply 'lc$^0'/1
					    (Checked)
				    -| ['list_comprehension'] )
			      in  %% Line 2822
				  case _cor14 of
				    %% Line 2823
				    <[]> when 'true' ->
					%% Line 2824
					apply 'check_choice'/6
					    (Ch, Els, Occ, Env, S2, Checked)
				    %% Line 2825
				    <_cor64> when 'true' ->
					let <_cor15> =
					    %% Line 2826
					    apply 'set_num_el'/2
						(S, 0)
					in  %% Line 2826
					    {Checked,Ch,_cor15}
				  end
			  %% Line 2828
			  <{Result,UnValRest,S3}> when 'true' ->
			      let <_cor18> =
				  %% Line 2831
				  apply 'set_num_el'/2
				      (S3, S)
			      in  let <_cor19> =
				      %% Line 2831
				      apply 'count_num_el'/1
					  (_cor18)
				  in  let <_cor17> =
					  %% Line 2831
					  call 'erlang':'++'
					      (Result, Checked)
				      in  %% Line 2830
					  apply 'check_choice'/6
					      (UnValRest, [El|[]], Occ, Env, _cor19, _cor17)
			  ( <_cor20> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor20})
			    -| ['compiler_generated'] )
			end
		( <_cor8> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor8})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2833
	  <[],_cor65,_cor66,_cor67,S,Checked> when 'true' ->
	      let <_cor21> =
		  %% Line 2834
		  apply 'set_num_el'/2
		      (S, 0)
	      in  %% Line 2834
		  {Checked,[],_cor21}
	  %% Line 2835
	  <XML,[],{0,_cor68},_cor69,S,Checked> when 'true' ->
	      let <_cor22> =
		  %% Line 2837
		  apply 'set_num_el'/2
		      (S, 0)
	      in  %% Line 2837
		  {Checked,XML,_cor22}
	  %% Line 2838
	  <XML,[],_cor70,_cor71,S,Checked> when 'true' ->
	      %% Line 2841
	      ( case S of
		  ( <( {'xsd_state',_cor72,_cor73,_cor74,_cor75,_cor76,_cor77,_cor78,_cor79,_cor80,_cor81,_cor82,_cor83,_cor84,_cor85,_cor86,_cor87,_cor88,_cor89,_cor90,_cor91,_cor92,_cor93,_rec234,_cor94,_cor95,_cor96,_cor97,_cor98,_cor99,_cor100,_cor101,_cor102}
		       -| ['compiler_generated'] )> when 'true' ->
			case call 'erlang':'>'
				 (_rec234, 0) of
			  %% Line 2842
			  <'true'> when 'true' ->
			      let <_cor25> =
				  %% Line 2843
				  apply 'set_num_el'/2
				      (S, 0)
			      in  %% Line 2843
				  {Checked,XML,_cor25}
			  %% Line 2844
			  <_cor104> when 'true' ->
			      let <_cor26> =
				  %% Line 2845
				  apply 'error_path'/2
				      (XML, 'undefined')
			      in  %% Line 2845
				  {'error',{_cor26,'xmerl_xsd',%% Line 2846
							       {'no_element_matching_choice',XML}}}
			end
		    -| ['compiler_generated'] )
		  ( <_cor103> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','xsd_state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_cor33,_cor32,_cor31,_cor30,_cor29,_cor28> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor33,_cor32,_cor31,_cor30,_cor29,_cor28})
		  -| [{'function_name',{'check_choice',6}}] )
	    -| ['compiler_generated'] )
	end
'check_all'/7 =
    %% Line 2849
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[T = {'xmlText',_cor46,_cor47,_cor48,_cor49,_cor50}|RestXML],CM,Occ,Env,S,Checked,XML> when 'true' ->
	      %% Line 2850
	      case apply 'is_whitespace'/1
		       (T) of
		%% Line 2851
		<'true'> when 'true' ->
		    %% Line 2852
		    apply 'check_all'/7
			(RestXML, CM, Occ, Env, S, [T|Checked], XML)
		%% Line 2853
		<_cor51> when 'true' ->
		    let <_cor7> =
			%% Line 2854
			apply 'error_path'/2
			    (T, 'undefined')
		    in  %% Line 2854
			{'error',{_cor7,'xmerl_xsd',{'all_missmatch',T,CM}}}
	      end
	  %% Line 2856
	  <XML = [E = {'xmlElement',Name,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61}|RestXML],CM,Occ,Env,S,%% Line 2857
																      Checked,%% Line 2857
																	      PrevXML> when 'true' ->
	      let <ElName> =
		  %% Line 2858
		  apply 'mk_EII_QName'/3
		      (Name, E, S)
	      in  %% Line 2859
		  case apply 'search_delete_all_el'/3
			   (ElName, CM, S) of
		    %% Line 2860
		    <{CMEl = {'element',_cor62},RestCM}> when 'true' ->
			%% Line 2861
			case apply 'resolve'/2
				 (CMEl, S) of
			  <{ResolvedT,S2}> when 'true' ->
			      %% Line 2862
			      case apply 'check_element_type'/6
				       (XML, ResolvedT, Env, [], S2, []) of
				%% Line 2863
				<{[],_cor63,_X_S3}> when 'true' ->
				    let <_cor11> =
					%% Line 2864
					apply 'error_path'/2
					    (E, Name)
				    in  let <Err> = {_cor11,%% Line 2864
						    'xmerl_xsd',%% Line 2865
								{'validation_error_all',ElName,CM}}
					in  let <_cor13> =
						%% Line 2866
						apply 'acc_errs'/2
						    (S, Err)
					    in  %% Line 2866
						apply 'check_all'/7
						    (RestXML, CM, Occ, Env, _cor13, %% Line 2867
										    Checked, %% Line 2867
											     PrevXML)
				%% Line 2868
				<{'error',_cor64}>
				    when try
					  let <_cor14> =
					      call 'erlang':'element'
						  (1, Occ)
					  in  call 'erlang':'=='
						  (_cor14, 0)
				      of <Try> ->
					  Try
				      catch <T,R> ->
					  'false' ->
				    %% Line 2869
				    {[],PrevXML,S}
				%% Line 2870
				<{'error',Reason}> when 'true' ->
				    let <_cor15> =
					%% Line 2872
					apply 'acc_errs'/2
					    (S, Reason)
				    in  %% Line 2871
					apply 'check_all'/7
					    (RestXML, RestCM, Occ, Env, _cor15, %% Line 2872
										[E|Checked], %% Line 2872
											     PrevXML)
				%% Line 2873
				<{Result,UnValRest,S3}> when 'true' ->
				    %% Line 2875
				    ( case S of
					( <( {'xsd_state',_cor65,_cor66,_cor67,_cor68,_cor69,_cor70,_rec237,_cor71,_cor72,_cor73,_cor74,_cor75,_cor76,_cor77,_cor78,_cor79,_cor80,_cor81,_cor82,_cor83,_cor84,_cor85,_cor86,_cor87,_cor88,_cor89,_cor90,_cor91,_cor92,_cor93,_cor94,_cor95}
					     -| ['compiler_generated'] )> when 'true' ->
					      case S3 of
						<{'xsd_state',_cor97,_cor98,_cor99,_cor100,_cor101,_cor102,_cor103,_cor104,_cor105,_cor106,_cor107,_cor108,_cor109,_cor110,_cor111,_cor112,_cor113,_cor114,_cor115,_cor116,_cor117,_cor118,_cor119,_cor120,_cor121,_cor122,_cor123,_cor124,_cor125,_cor126,_cor127,_cor128}> when 'true' ->
						    let <_cor22> =
							call 'erlang':'setelement'
							    (8, S3, _rec237)
						    in  let <_cor16> =
							    %% Line 2876
							    call 'erlang':'++'
								(Result, Checked)
							in  apply 'check_all'/7
								(UnValRest, RestCM, Occ, Env, _cor22, _cor16, %% Line 2876
													      PrevXML)
						( <_cor129> when 'true' ->
						      ( call ( 'erlang'
							       -| ['compiler_generated'] ):( 'error'
											     -| ['compiler_generated'] )
							    (( {'badrecord','xsd_state'}
							       -| ['compiler_generated'] ))
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					      end
					  -| ['compiler_generated'] )
					( <_cor96> when 'true' ->
					      ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'error'
										     -| ['compiler_generated'] )
						    (( {'badrecord','xsd_state'}
						       -| ['compiler_generated'] ))
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				      end
				      -| ['compiler_generated'] )
				( <_cor23> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor23})
				  -| ['compiler_generated'] )
			      end
			  ( <_cor10> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor10})
			    -| ['compiler_generated'] )
			end
		    %% Line 2878
		    <_cor130>
			when try
			      let <_cor24> =
				  call 'erlang':'element'
				      (1, Occ)
			      in  call 'erlang':'=='
				      (_cor24, 0)
			  of <Try> ->
			      Try
			  catch <T,R> ->
			      'false' ->
			%% Line 2879
			{[],PrevXML,S}
		    %% Line 2880
		    <_cor131> when 'true' ->
			let <_cor25> =
			    %% Line 2881
			    apply 'error_path'/2
				(E, Name)
			in  let <Err> =
				%% Line 2881
				{_cor25,'xmerl_xsd',%% Line 2882
						    {'element_not_in_all',ElName,E,CM}}
			    in  let <_cor27> =
				    %% Line 2883
				    apply 'acc_errs'/2
					(S, Err)
				in  %% Line 2883
				    apply 'check_all'/7
					(RestXML, CM, Occ, Env, _cor27, [E|Checked], PrevXML)
		  end
	  %% Line 2885
	  <[C = {'xmlComment',_cor132,_cor133,_cor134,_cor135}|RestXML],CM,Occ,Env,S,Checked,XML> when 'true' ->
	      %% Line 2886
	      apply 'check_all'/7
		  (RestXML, CM, Occ, Env, S, [C|Checked], XML)
	  %% Line 2887
	  <XML,[],_cor136,_cor137,S,Checked,_cor138> when 'true' ->
	      %% Line 2888
	      {Checked,XML,S}
	  %% Line 2889
	  <[],CM,_X_Occ,_cor139,S,Checked,_X_PrevXML> when 'true' ->
	      let <_cor35> =
		  %% Line 2890
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor32) ->
				case _cor32 of
				  <[X = {_cor140,Y = {_cor141,_cor142}}|_cor30]> when 'true' ->
				      let <_cor31> =
					  apply 'optional'/1
					      (Y)
				      in  ( case <> of
					      <>
						  when call 'erlang':'=:='
							(_cor31,
							 'false') ->
						  let <_cor33> =
						      apply 'lc$^0'/1
							  (_cor30)
						  in  ( [X|_cor33]
							-| ['compiler_generated'] )
					      ( <> when 'true' ->
						    apply 'lc$^0'/1
							(_cor30)
						-| ['compiler_generated'] )
					    end
					    -| ['list_comprehension'] )
				  ( <[_cor29|_cor30]> when 'true' ->
					apply 'lc$^0'/1
					    (_cor30)
				    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor32> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor32})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (CM)
		    -| ['list_comprehension'] )
	      in  %% Line 2890
		  case _cor35 of
		    %% Line 2891
		    <[]> when 'true' ->
			let <_cor36> =
			    %% Line 2892
			    apply 'set_num_el'/2
				(S, 0)
			in  %% Line 2892
			    {Checked,[],_cor36}
		    %% Line 2893
		    <MandatoryEls> when 'true' ->
			let <_cor37> =
			    %% Line 2894
			    apply 'error_path'/2
				(Checked, 'undefined')
			in  %% Line 2894
			    {'error',{_cor37,'xmerl_xsd',%% Line 2895
							 {'missing_mandatory_elements_in_all',MandatoryEls}}}
		  end
	  ( <_cor45,_cor44,_cor43,_cor42,_cor41,_cor40,_cor39> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor45,_cor44,_cor43,_cor42,_cor41,_cor40,_cor39})
		  -| [{'function_name',{'check_all',7}}] )
	    -| ['compiler_generated'] )
	end
'check_any'/4 =
    %% Line 2898
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor7> =
	    catch
		%% Line 2899
		case _cor0 of
		  <{'xsd_state',_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,_cor69}> when 'true' ->
		      let <_cor6> =
			  call 'erlang':'setelement'
			      (8, _cor0, [])
		      in  apply 'validate_xml'/2
			      (_cor3, _cor6)
		  ( <_cor70> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','xsd_state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
	in  %% Line 2899
	    case _cor7 of
	      %% Line 2900
	      <{[Result|[]],[],S2}> when 'true' ->
		  %% Line 2901
		  ( case _cor0 of
		      ( <( {'xsd_state',_cor71,_cor72,_cor73,_cor74,_cor75,_cor76,_rec241,_cor77,_cor78,_cor79,_cor80,_cor81,_cor82,_cor83,_cor84,_cor85,_cor86,_cor87,_cor88,_cor89,_cor90,_cor91,_cor92,_cor93,_cor94,_cor95,_cor96,_cor97,_cor98,_cor99,_cor100,_cor101}
			   -| ['compiler_generated'] )> when 'true' ->
			    case S2 of
			      <{'xsd_state',_cor103,_cor104,_cor105,_cor106,_cor107,_cor108,_cor109,_cor110,_cor111,_cor112,_cor113,_cor114,_cor115,_cor116,_cor117,_cor118,_cor119,_cor120,_cor121,_cor122,_cor123,_cor124,_cor125,_cor126,_cor127,_cor128,_cor129,_cor130,_cor131,_cor132,_cor133,_cor134}> when 'true' ->
				  let <_cor13> =
				      call 'erlang':'setelement'
					  (8, S2, _rec241)
				  in  {Result,_cor13}
			      ( <_cor135> when 'true' ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {'badrecord','xsd_state'}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
			-| ['compiler_generated'] )
		      ( <_cor102> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','xsd_state'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      %% Line 2902
	      <{Result,[],S2}> when 'true' ->
		  %% Line 2903
		  ( case _cor0 of
		      ( <( {'xsd_state',_cor136,_cor137,_cor138,_cor139,_cor140,_cor141,_rec244,_cor142,_cor143,_cor144,_cor145,_cor146,_cor147,_cor148,_cor149,_cor150,_cor151,_cor152,_cor153,_cor154,_cor155,_cor156,_cor157,_cor158,_cor159,_cor160,_cor161,_cor162,_cor163,_cor164,_cor165,_cor166}
			   -| ['compiler_generated'] )> when 'true' ->
			    case S2 of
			      <{'xsd_state',_cor168,_cor169,_cor170,_cor171,_cor172,_cor173,_cor174,_cor175,_cor176,_cor177,_cor178,_cor179,_cor180,_cor181,_cor182,_cor183,_cor184,_cor185,_cor186,_cor187,_cor188,_cor189,_cor190,_cor191,_cor192,_cor193,_cor194,_cor195,_cor196,_cor197,_cor198,_cor199}> when 'true' ->
				  let <_cor19> =
				      call 'erlang':'setelement'
					  (8, S2, _rec244)
				  in  {Result,_cor19}
			      ( <_cor200> when 'true' ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {'badrecord','xsd_state'}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
			-| ['compiler_generated'] )
		      ( <_cor167> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','xsd_state'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      %% Line 2904
	      <{_cor201,_X_Unvalidated,S2}> when 'true' ->
		  let <_cor20> =
		      %% Line 2905
		      apply 'error_path'/2
			  (_cor3, 'undefined')
		  in  let <Err> = {_cor20,%% Line 2905
				  'xmerl_xsd',%% Line 2905
					      {'failed_validating',_cor3,_cor2}}
		      in  %% Line 2906
			  ( case _cor0 of
			      ( <( {'xsd_state',_cor202,_cor203,_cor204,_cor205,_cor206,_cor207,_rec247,_cor208,_cor209,_cor210,_cor211,_cor212,_cor213,_cor214,_cor215,_cor216,_cor217,_cor218,_cor219,_cor220,_cor221,_cor222,_cor223,_cor224,_cor225,_cor226,_cor227,_cor228,_cor229,_cor230,_cor231,_cor232}
				   -| ['compiler_generated'] )> when 'true' ->
				    case S2 of
				      <{'xsd_state',_cor234,_cor235,_cor236,_cor237,_cor238,_cor239,_cor240,_cor241,_cor242,_cor243,_cor244,_cor245,_cor246,_cor247,_cor248,_cor249,_cor250,_cor251,_cor252,_cor253,_cor254,_cor255,_cor256,_cor257,_cor258,_cor259,_cor260,_cor261,_cor262,_cor263,_cor264,_cor265}> when 'true' ->
					  let <_cor27> =
					      call 'erlang':'setelement'
						  (8, S2, _rec247)
					  in  let <_cor28> =
						  apply 'acc_errs'/2
						      (_cor27, Err)
					      in  {_cor3,_cor28}
				      ( <_cor266> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','xsd_state'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				-| ['compiler_generated'] )
			      ( <_cor233> when 'true' ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {'badrecord','xsd_state'}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
	      %% Line 2907
	      <{'error',Reason}> when 'true' ->
		  let <_cor29> =
		      %% Line 2908
		      apply 'acc_errs'/2
			  (_cor0, Reason)
		  in  %% Line 2908
		      {_cor3,_cor29}
	      %% Line 2909
	      <{'EXIT',Reason}> when 'true' ->
		  let <_cor30> =
		      %% Line 2911
		      apply 'error_path'/2
			  (_cor3, 'undefined')
		  in  let <Err> = {_cor30,%% Line 2911
				  'xmerl_xsd',%% Line 2911
					      {'internal_error',Reason}}
		      in  let <_cor32> =
			      %% Line 2912
			      apply 'acc_errs'/2
				  (_cor0, Err)
			  in  %% Line 2912
			      {_cor3,_cor32}
	      ( <_cor33> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor33})
		-| ['compiler_generated'] )
	    end
'check_target_namespace'/2 =
    %% Line 2915
    fun (_cor1,_cor0) ->
	%% Line 2916
	( case _cor0 of
	    ( <( {'xsd_state',_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_rec248,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50}
		 -| ['compiler_generated'] )> when 'true' ->
		  ( case _cor1 of
		      ( <( {'xmlElement',_cor52,_cor53,_rec249,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61}
			   -| ['compiler_generated'] )> when 'true' ->
			    case <_rec248,_rec249> of
			      %% Line 2917
			      <'undefined',[]> when 'true' ->
				  %% Line 2918
				  'ok'
			      %% Line 2919
			      <URI,{Prefix,_cor63}> when 'true' ->
				  %% Line 2921
				  ( case _cor54 of
				      ( <( {'xmlNamespace',_rec251,_cor75}
					   -| ['compiler_generated'] )> when 'true' ->
					    case apply 'namespace'/3
						     (Prefix, _cor54, _rec251) of
					      %% Line 2922
					      <_cor77>
						  when call 'erlang':'=:='
							(_cor77,
							 URI) ->
						  %% Line 2923
						  'ok'
					      %% Line 2924
					      <_cor78> when 'true' ->
						  %% Line 2925
						  'failed'
					    end
					-| ['compiler_generated'] )
				      ( <_cor76> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','xmlNamespace'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
			      %% Line 2927
			      <URI,_cor79> when 'true' ->
				  %% Line 2928
				  ( case _cor54 of
				      ( <( {'xmlNamespace',_rec252,_cor91}
					   -| ['compiler_generated'] )> when 'true' ->
					    case _rec252 of
					      %% Line 2929
					      <_cor93>
						  when call 'erlang':'=:='
							(_rec252,
							 URI) ->
						  %% Line 2930
						  'ok'
					      %% Line 2931
					      <_cor94> when 'true' ->
						  %% Line 2932
						  'failed'
					    end
					-| ['compiler_generated'] )
				      ( <_cor92> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','xmlNamespace'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
			    end
			-| ['compiler_generated'] )
		      ( <_cor62> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','xmlElement'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	    ( <_cor51> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','xsd_state'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'schemaLocations'/2 =
    %% Line 2936
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <El = {'xmlElement',_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,Atts,_cor31,_cor32,_cor33,_cor34},S> when 'true' ->
	      let <Pred> =
		  %% Line 2937
		  ( fun (_cor2) ->
			case _cor2 of
			  <{'xmlAttribute','schemaLocation',_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42}> when 'true' ->
			      'false'
			  %% Line 2938
			  <{'xmlAttribute',_cor43,_cor44,{_cor45,[115|[99|[104|[101|[109|[97|[76|[111|[99|[97|[116|[105|[111|[110]]]]]]]]]]]]]]},_cor46,_cor47,_cor48,_cor49,_cor50,_cor51}> when 'true' ->
			      'false'
			  %% Line 2939
			  <_cor52> when 'true' ->
			      'true'
			end
		    -| [{'id',{0,0,'-schemaLocations/2-fun-0-'}}] )
	      in  %% Line 2941
		  case call 'lists':'dropwhile'
			   (Pred, Atts) of
		    %% Line 2942
		    <[]> when 'true' ->
			%% Line 2943
			S
		    %% Line 2944
		    <[{'xmlAttribute',_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,Paths,_cor60}|_cor61]> when 'true' ->
			%% Line 2945
			case call 'string':'tokens'
				 (Paths, [32|[10|[9|[13]]]]) of
			  %% Line 2946
			  <L>
			      when try
				    let <_cor5> =
					call 'erlang':'length'
					    (L)
				    in  call 'erlang':'>'
					    (_cor5, 0)
				of <Try> ->
				    Try
				catch <T,R> ->
				    'false' ->
			      let <_cor6> =
				  %% Line 2947
				  call 'erlang':'length'
				      (L)
			      in  %% Line 2947
				  case call 'erlang':'rem'
					   (_cor6, 2) of
				    %% Line 2948
				    <0> when 'true' ->
					let <PairList> =
					    %% Line 2950
					    ( fun (_cor9,_cor8) ->
						  case <_cor9,_cor8> of
						    <[],_X_Fun> when 'true' ->
							%% Line 2951
							[]
						    %% Line 2952
						    <[SLNS|[SLLoc|Rest]],Fun> when 'true' ->
							let <_cor7> =
							    %% Line 2953
							    apply Fun
								(Rest, Fun)
							in  %% Line 2953
							    [{SLNS,SLLoc}|_cor7]
						    ( <_cor11,_cor10> when 'true' ->
							  ( primop 'match_fail'
								({'function_clause',_cor11,_cor10})
							    -| [{'function_name',{'-schemaLocations/2-fun-1-',2}}] )
						      -| ['compiler_generated'] )
						  end
					      -| [{'id',{0,0,'-schemaLocations/2-fun-1-'}}] )
					in  let <_rec254> =
						%% Line 2955
						apply PairList
						    (L, PairList)
					    in  %% Line 2955
						case S of
						  <{'xsd_state',_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,_cor69,_cor70,_cor71,_cor72,_cor73,_cor74,_cor75,_cor76,_cor77,_cor78,_cor79,_cor80,_cor81,_cor82,_cor83,_cor84,_cor85,_cor86,_cor87,_cor88,_cor89,_cor90,_cor91,_cor92,_cor93}> when 'true' ->
						      call 'erlang':'setelement'
							  (9, S, _rec254)
						  ( <_cor94> when 'true' ->
							( call ( 'erlang'
								 -| ['compiler_generated'] ):( 'error'
											       -| ['compiler_generated'] )
							      (( {'badrecord','xsd_state'}
								 -| ['compiler_generated'] ))
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						end
				    %% Line 2956
				    <_cor95> when 'true' ->
					let <_cor18> =
					    %% Line 2957
					    apply 'error_path'/2
						(El, _cor25)
					in  let <Err> = {_cor18,%% Line 2957
							'xmerl_xsd',%% Line 2958
								    {'schemaLocation_list_failure',Paths}}
					    in  %% Line 2959
						apply 'acc_errs'/2
						    (S, Err)
				  end
			  %% Line 2961
			  <_cor107> when 'true' ->
			      %% Line 2962
			      S
			end
		    %% Line 2964
		    <_cor108> when 'true' ->
			%% Line 2965
			S
		  end
	  ( <_cor24,_cor23> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor24,_cor23})
		  -| [{'function_name',{'schemaLocations',2}}] )
	    -| ['compiler_generated'] )
	end
'blocking'/2 =
    %% Line 2968
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],BlockDefault> when 'true' ->
	      %% Line 2969
	      BlockDefault
	  %% Line 2970
	  <Block,_cor4> when 'true' ->
	      %% Line 2971
	      Block
	end
'allow_empty_content'/1 =
    %% Line 2973
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      %% Line 2974
	      'true'
	  %% Line 2975
	  <[{'restriction',{_X_BT,_X_CM = []}}|[]]> when 'true' ->
	      %% Line 2976
	      'true'
	  %% Line 2977
	  <[{'extension',{_X_BT,_X_CM = []}}|[]]> when 'true' ->
	      %% Line 2978
	      'true'
	  %% Line 2979
	  <[{_cor3,{_cor4,{0,_cor5}}}|Rest]> when 'true' ->
	      %% Line 2980
	      apply 'allow_empty_content'/1
		  (Rest)
	  %% Line 2981
	  <[{_cor6,{Content,_cor7}}|Rest]> when 'true' ->
	      %% Line 2982
	      case apply 'allow_empty_content'/1
		       (Content) of
		%% Line 2983
		<'true'> when 'true' ->
		    %% Line 2984
		    apply 'allow_empty_content'/1
			(Rest)
		%% Line 2985
		<_cor8> when 'true' ->
		    'false'
	      end
	  %% Line 2987
	  <_cor9> when 'true' ->
	      %% Line 2988
	      'false'
	end
'empty_xml_content'/1 =
    %% Line 2990
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      %% Line 2991
	      'true'
	  %% Line 2992
	  <[H|T]> when 'true' ->
	      %% Line 2993
	      case apply 'is_whitespace'/1
		       (H) of
		%% Line 2994
		<'true'> when 'true' ->
		    %% Line 2995
		    apply 'empty_xml_content'/1
			(T)
		%% Line 2996
		<_cor3> when 'true' ->
		    %% Line 2997
		    'false'
	      end
	  %% Line 2999
	  <_cor4> when 'true' ->
	      %% Line 3000
	      'false'
	end
'xsi_factors'/1 =
    %% Line 3002
    fun (_cor0) ->
	case _cor0 of
	  <{'schema_element',_cor2,_cor3,_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,N,_cor13,_cor14,_cor15}> when 'true' ->
	      %% Line 3003
	      [{'nillable',N}|[]]
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'xsi_factors',1}}] )
	    -| ['compiler_generated'] )
	end
'check_xsi_factors'/5 =
    %% Line 3004
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <{'nil',_cor18,'http://www.w3.org/2001/XMLSchema-instance'},%% Line 3005
								      {'xmlAttribute',_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,[116|[114|[117|[101]]]],_cor26},%% Line 3005
																				       XsiFactors,%% Line 3005
																						  XMLEl,%% Line 3005
																							S> when 'true' ->
	      %% Line 3006
	      case apply 'key1search'/3
		       ('nillable', XsiFactors, 'false') of
		%% Line 3007
		<{_cor27,'true'}> when 'true' ->
		    %% Line 3008
		    ( case XMLEl of
			( <( {'xmlElement',_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_rec257,_cor35,_cor36,_cor37}
			     -| ['compiler_generated'] )> when 'true' ->
			      case apply 'empty_xml_content'/1
				       (_rec257) of
				%% Line 3009
				<'true'> when 'true' ->
				    %% Line 3010
				    S
				%% Line 3011
				<_cor39> when 'true' ->
				    let <_cor9> =
					%% Line 3012
					apply 'error_path'/2
					    (XMLEl, _cor28)
				    in  let <Err> = {_cor9,%% Line 3012
						   'xmerl_xsd',%% Line 3013
							       {'element_content_not_nil',XMLEl}}
					in  %% Line 3014
					    apply 'acc_errs'/2
						(S, Err)
			      end
			  -| ['compiler_generated'] )
			( <_cor38> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','xmlElement'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		%% Line 3016
		<_cor51> when 'true' ->
		    %% Line 3017
		    S
	      end
	  %% Line 3019
	  <_cor52,_cor53,_cor54,_cor55,S> when 'true' ->
	      %% Line 3020
	      S
	end
'check_attributes'/4 =
    %% Line 3022
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <XMLEl = {'xmlElement',_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,Atts,_cor37,_cor38,_cor39,_cor40},%% Line 3023
													     {'schema_complex_type',Name,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,SchemaAtts,_cor51,_cor52},%% Line 3024
																													 XsiFactors,%% Line 3024
																														    S> when 'true' ->
	      %% Line 3028
	      ( case S of
		  ( <( {'xsd_state',_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_rec259,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,_cor69,_cor70,_cor71,_cor72,_cor73,_cor74,_cor75,_cor76,_cor77,_cor78,_cor79,_cor80,_cor81,_cor82,_cor83}
		       -| ['compiler_generated'] )> when 'true' ->
			let <SchemaAtts2> =
			    %% Line 3029
			    apply 'resolve_attributeGroups'/3
				(SchemaAtts, XMLEl, S)
			in  let <_cor8> =
				%% Line 3031
				apply 'name_scope'/2
				    (Name, S)
			    in  %% Line 3030
				case apply 'check_attributes'/6
					 (Atts, SchemaAtts2, XMLEl, XsiFactors, _cor8, %% Line 3031
										       []) of
				  <{XMLEl2,S2}> when 'true' ->
				      %% Line 3032
				      case S2 of
					<{'xsd_state',_cor85,_cor86,_cor87,_cor88,_cor89,_cor90,_cor91,_cor92,_cor93,_cor94,_cor95,_cor96,_cor97,_cor98,_cor99,_cor100,_cor101,_cor102,_cor103,_cor104,_cor105,_cor106,_cor107,_cor108,_cor109,_cor110,_cor111,_cor112,_cor113,_cor114,_cor115,_cor116}> when 'true' ->
					    let <_cor12> =
						call 'erlang':'setelement'
						    (8, S2, _rec259)
					    in  {XMLEl2,_cor12}
					( <_cor117> when 'true' ->
					      ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'error'
										     -| ['compiler_generated'] )
						    (( {'badrecord','xsd_state'}
						       -| ['compiler_generated'] ))
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				      end
				  ( <_cor9> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor9})
				    -| ['compiler_generated'] )
				end
		    -| ['compiler_generated'] )
		  ( <_cor84> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','xsd_state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 3033
	  <XMLEl = {'xmlElement',_cor118,_cor119,_cor120,_cor121,_cor122,_cor123,[],_cor124,_cor125,_cor126,_cor127},_cor128,_cor129,S> when 'true' ->
	      %% Line 3034
	      {XMLEl,S}
	  %% Line 3035
	  <XMLEl = {'xmlElement',N,_cor130,_cor131,_cor132,_cor133,_cor134,Atts,_cor135,_cor136,_cor137,_cor138},_cor139,XsiFactors,S> when 'true' ->
	      let <Fun> =
		  %% Line 3037
		  ( fun (_cor22,_cor21) ->
			%% Line 3038
			case apply 'reserved_attribute'/2
				 (_cor22, _cor132) of
			  %% Line 3039
			  <'true'> when 'true' ->
			      %% Line 3041
			      ( case _cor22 of
				  ( <( {'xmlAttribute',_rec262,_cor151,_cor152,_cor153,_cor154,_cor155,_cor156,_cor157,_cor158}
				       -| ['compiler_generated'] )> when 'true' ->
					let <AttQName> =
					    apply 'mk_EII_QName'/3
						(_rec262, XMLEl, _cor21)
					in  %% Line 3042
					    apply 'check_xsi_factors'/5
						(AttQName, _cor22, XsiFactors, XMLEl, _cor21)
				    -| ['compiler_generated'] )
				  ( <_cor159> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','xmlAttribute'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			  %% Line 3043
			  <_cor160> when 'true' ->
			      let <_cor18> =
				  %% Line 3044
				  apply 'error_path'/2
				      (XMLEl, N)
			      in  let <Err> = {_cor18,%% Line 3044
					      'xmerl_xsd',%% Line 3045
							  {'attribute_in_simpleType',XMLEl,_cor22}}
				  in  %% Line 3046
				      apply 'acc_errs'/2
					  (_cor21, Err)
			end
		    -| [{'id',{0,0,'-check_attributes/4-fun-0-'}}] )
	      in  let <_cor26> =
		      %% Line 3049
		      call 'lists':'foldl'
			  (Fun, S, Atts)
		  in  %% Line 3049
		      {XMLEl,_cor26}
	  ( <_cor30,_cor29,_cor28,_cor27> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor30,_cor29,_cor28,_cor27})
		  -| [{'function_name',{'check_attributes',4}}] )
	    -| ['compiler_generated'] )
	end
'check_attributes'/6 =
    %% Line 3051
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[],[SA|SchemaAtts],XMLEl,XsiFactors,S,CheckedAtts> when 'true' ->
	      %% Line 3052
	      case apply 'resolve'/2
		       (SA, S) of
		%% Line 3053
		<{{'schema_attribute',Name,_cor55,_cor56,_cor57,Use,Def,Fix,_cor58,_cor59},S2}> when 'true' ->
		    %% Line 3054
		    case <Use,Def,Fix> of
		      %% Line 3055
		      <'required',_cor60,_cor61> when 'true' ->
			  %% Line 3056
			  ( case XMLEl of
			      ( <( {'xmlElement',_rec263,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,_cor69,_cor70,_cor71}
				   -| ['compiler_generated'] )> when 'true' ->
				    let <_cor8> =
					apply 'error_path'/2
					    (XMLEl, _rec263)
				    in  let <Err> = {_cor8,'xmerl_xsd',%% Line 3057
							       {'required_attribute_missed',XMLEl,Name}}
					in  let <_cor10> =
						%% Line 3059
						apply 'acc_errs'/2
						    (S2, Err)
					    in  %% Line 3058
						apply 'check_attributes'/6
						    ([], SchemaAtts, XMLEl, XsiFactors, _cor10, %% Line 3059
												CheckedAtts)
				-| ['compiler_generated'] )
			      ( <_cor72> when 'true' ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {'badrecord','xmlElement'}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
		      %% Line 3060
		      <'optional','undefined','undefined'> when 'true' ->
			  %% Line 3061
			  apply 'check_attributes'/6
			      ([], SchemaAtts, XMLEl, XsiFactors, %% Line 3062
								  S2, %% Line 3062
								      CheckedAtts)
		      %% Line 3063
		      <'optional',Default,'undefined'> when 'true' ->
			  let <NewAtt> =
			      %% Line 3064
			      apply 'create_attribute'/2
				  (Name, Default)
			  in  %% Line 3065
			      apply 'check_attributes'/6
				  ([], SchemaAtts, XMLEl, XsiFactors, S2, %% Line 3066
									  [NewAtt|CheckedAtts])
		      %% Line 3067
		      <'optional','undefined',_cor73>
			  when call 'erlang':'=:='
				(_cor73,
				 Fix) ->
			  let <NewAtt> =
			      %% Line 3068
			      apply 'create_attribute'/2
				  (Name, Def)
			  in  %% Line 3069
			      apply 'check_attributes'/6
				  ([], SchemaAtts, XMLEl, XsiFactors, S2, %% Line 3070
									  [NewAtt|CheckedAtts])
		      %% Line 3071
		      <'optional',Default,_cor74>
			  when call 'erlang':'=:='
				(_cor74,
				 Fix) ->
			  %% Line 3072
			  ( case XMLEl of
			      ( <( {'xmlElement',_rec264,_cor75,_cor76,_cor77,_cor78,_cor79,_cor80,_cor81,_cor82,_cor83,_cor84}
				   -| ['compiler_generated'] )> when 'true' ->
				    let <_cor15> =
					apply 'error_path'/2
					    (XMLEl, _rec264)
				    in  let <Err> =
					    {_cor15,'xmerl_xsd',%% Line 3073
								{'default_and_fixed_attributes_mutual_exclusive',%% Line 3074
														 Name,%% Line 3074
														      Default,%% Line 3074
															      Fix}}
					in  let <_cor17> =
						%% Line 3076
						apply 'acc_errs'/2
						    (S2, Err)
					    in  %% Line 3075
						apply 'check_attributes'/6
						    ([], SchemaAtts, XMLEl, XsiFactors, _cor17, %% Line 3076
												CheckedAtts)
				-| ['compiler_generated'] )
			      ( <_cor85> when 'true' ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {'badrecord','xmlElement'}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
		      %% Line 3077
		      <_fol3876,_fol3877,_fol3878> when 'true' ->
			  %% Line 3078
			  apply 'check_attributes'/6
			      ([], SchemaAtts, XMLEl, XsiFactors, %% Line 3079
								  S2, %% Line 3079
								      CheckedAtts)
		    end
		%% Line 3081
		<{{'anyAttribute',{_X_Namespaces,_X_PC}},S2}> when 'true' ->
		    %% Line 3082
		    apply 'check_attributes'/6
			([], SchemaAtts, XMLEl, XsiFactors, %% Line 3083
							    S2, %% Line 3083
								CheckedAtts)
		%% Line 3084
		<Err> when 'true' ->
		    %% Line 3085
		    ( case XMLEl of
			( <( {'xmlElement',_rec265,_cor87,_cor88,_cor89,_cor90,_cor91,_cor92,_cor93,_cor94,_cor95,_cor96}
			     -| ['compiler_generated'] )> when 'true' ->
			      let <_cor21> =
				  apply 'error_path'/2
				      (XMLEl, _rec265)
			      in  let <ErrMsg> =
				      {_cor21,'xmerl_xsd',%% Line 3086
							  {'schema_error','unexpected_object',SA,Err}}
				  in  let <_cor23> =
					  %% Line 3088
					  apply 'acc_errs'/2
					      (S, ErrMsg)
				      in  %% Line 3087
					  apply 'check_attributes'/6
					      ([], SchemaAtts, XMLEl, XsiFactors, _cor23, %% Line 3088
											  CheckedAtts)
			  -| ['compiler_generated'] )
			( <_cor97> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','xmlElement'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
	      end
	  %% Line 3090
	  <[],[],XMLEl,_X_XsiFactors,S,CheckedAtts> when 'true' ->
	      let <_rec266> =
		  %% Line 3091
		  call 'lists':'reverse'
		      (CheckedAtts)
	      in  %% Line 3091
		  case XMLEl of
		    <{'xmlElement',_cor98,_cor99,_cor100,_cor101,_cor102,_cor103,_cor104,_cor105,_cor106,_cor107,_cor108}> when 'true' ->
			let <_cor28> =
			    call 'erlang':'setelement'
				(8, XMLEl, _rec266)
			in  {_cor28,S}
		    ( <_cor109> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','xmlElement'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 3092
	  <[Att|Atts],SchemaAtts,XMLEl,XsiFactors,%% Line 3093
						  S,%% Line 3093
						    CheckedAtts> when 'true' ->
	      %% Line 3095
	      ( case Att of
		  ( <( {'xmlAttribute',_rec268,_cor110,_cor111,_cor112,_cor113,_cor114,_cor115,_cor116,_cor117}
		       -| ['compiler_generated'] )> when 'true' ->
			case apply 'mk_EII_Att_QName'/3
				 (_rec268, XMLEl, S) of
			  <{IsQ,AttQName}> when 'true' ->
			      %% Line 3096
			      case apply 'search_attribute'/3
				       (IsQ, AttQName, SchemaAtts) of
				%% Line 3097
				<{AttObj = {'attribute',_cor119},SchemaAtts2}> when 'true' ->
				    %% Line 3098
				    case apply 'load_object'/2
					     (AttObj, S) of
				      <{SA,S2}> when 'true' ->
					  %% Line 3099
					  case SA of
					    <{'schema_attribute',_cor120,[AttType|[]],_cor121,_cor122,_cor123,_cor124,_cor125,_cor126,_cor127}> when 'true' ->
						%% Line 3100
						case apply 'check_type'/4
							 (AttType, _cor116, %% Line 3101
									    'unapplied', %% Line 3101
											 S2) of
						  <{Val,S4}> when 'true' ->
						      let <_cor39> =
							  %% Line 3103
							  call 'erlang':'setelement'
							      (9, Att, Val)
						      in  %% Line 3102
							  apply 'check_attributes'/6
							      (Atts, SchemaAtts2, XMLEl, XsiFactors, S4, %% Line 3103
													 [_cor39|CheckedAtts])
						  ( <_cor36> when 'true' ->
							primop 'match_fail'
							    ({'badmatch',_cor36})
						    -| ['compiler_generated'] )
						end
					    ( <_cor33> when 'true' ->
						  primop 'match_fail'
						      ({'badmatch',_cor33})
					      -| ['compiler_generated'] )
					  end
				      ( <_cor32> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_cor32})
					-| ['compiler_generated'] )
				    end
				%% Line 3104
				<{'undefined',SchemaAtts2}> when 'true' ->
				    %% Line 3106
				    ( case XMLEl of
					( <( {'xmlElement',_cor147,_cor148,_cor149,_rec271,_cor150,_cor151,_cor152,_cor153,_cor154,_cor155,_cor156}
					     -| ['compiler_generated'] )> when 'true' ->
					      case apply 'reserved_attribute'/2
						       (Att, _rec271) of
						%% Line 3107
						<'true'> when 'true' ->
						    let <S2> =
							%% Line 3108
							apply 'check_xsi_factors'/5
							    (AttQName, Att, XsiFactors, XMLEl, S)
						    in  %% Line 3109
							apply 'check_attributes'/6
							    (Atts, SchemaAtts2, XMLEl, XsiFactors, %% Line 3110
												   S2, %% Line 3110
												       [Att|CheckedAtts])
						%% Line 3111
						<_cor158> when 'true' ->
						    %% Line 3112
						    case apply 'check_anyAttribute'/4
							     (Att, SchemaAtts2, XMLEl, S) of
						      %% Line 3113
						      <{'error',Reason}> when 'true' ->
							  let <_cor43> =
							      %% Line 3115
							      apply 'acc_errs'/2
								  (S, Reason)
							  in  %% Line 3114
							      apply 'check_attributes'/6
								  (Atts, SchemaAtts2, XMLEl, XsiFactors, _cor43, %% Line 3115
														 CheckedAtts)
						      %% Line 3116
						      <{Att2,S2}> when 'true' ->
							  %% Line 3117
							  apply 'check_attributes'/6
							      (Atts, SchemaAtts2, XMLEl, XsiFactors, %% Line 3118
												     S2, %% Line 3118
													 [Att2|CheckedAtts])
						      ( <_cor44> when 'true' ->
							    primop 'match_fail'
								({'case_clause',_cor44})
							-| ['compiler_generated'] )
						    end
					      end
					  -| ['compiler_generated'] )
					( <_cor157> when 'true' ->
					      ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'error'
										     -| ['compiler_generated'] )
						    (( {'badrecord','xmlElement'}
						       -| ['compiler_generated'] ))
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				      end
				      -| ['compiler_generated'] )
				%% Line 3121
				<Other> when 'true' ->
				    let <Err> = {%% Line 3122
					 [],%% Line 3122
					    'xmerl_xsd',%% Line 3122
							{'internal_error',Other}}
				    in  let <_cor47> =
					    %% Line 3124
					    apply 'acc_errs'/2
						(S, Err)
					in  %% Line 3123
					    apply 'check_attributes'/6
						(Atts, SchemaAtts, XMLEl, XsiFactors, _cor47, %% Line 3124
											      CheckedAtts)
			      end
			  ( <_cor31> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor31})
			    -| ['compiler_generated'] )
			end
		    -| ['compiler_generated'] )
		  ( <_cor118> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','xmlAttribute'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_cor54,_cor53,_cor52,_cor51,_cor50,_cor49> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor54,_cor53,_cor52,_cor51,_cor50,_cor49})
		  -| [{'function_name',{'check_attributes',6}}] )
	    -| ['compiler_generated'] )
	end
'check_anyAttribute'/4 =
    %% Line 3127
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Att,SchemaAtts,El = {'xmlElement',Name,_cor21,_cor22,NS,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29},S> when 'true' ->
	      let <_cor8> =
		  %% Line 3128
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor6) ->
				case _cor6 of
				  <[Any = {'anyAttribute',_cor30}|_cor5]> when 'true' ->
				      let <_cor7> =
					  apply 'lc$^0'/1
					      (_cor5)
				      in  ( [Any|_cor7]
					    -| ['compiler_generated'] )
				  ( <[_cor4|_cor5]> when 'true' ->
					apply 'lc$^0'/1
					    (_cor5)
				    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor6> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor6})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (SchemaAtts)
		    -| ['list_comprehension'] )
	      in  %% Line 3128
		  case _cor8 of
		    %% Line 3129
		    <[]> when 'true' ->
			let <_cor11> =
			    %% Line 3130
			    apply 'error_path'/2
				(El, Name)
			in  %% Line 3132
			    ( case Att of
				( <( {'xmlAttribute',_rec272,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38}
				     -| ['compiler_generated'] )> when 'true' ->
				      {'error',{_cor11,'xmerl_xsd',{'attribute_not_defined_in_schema',_rec272}}}
				  -| ['compiler_generated'] )
				( <_cor39> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {'badrecord','xmlAttribute'}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
		    %% Line 3133
		    <[{_cor40,{Namespace,PC}}|_cor41]> when 'true' ->
			%% Line 3134
			case apply 'check_anyAttribute_namespace'/2
				 (Namespace, NS) of
			  %% Line 3135
			  <'ok'> when 'true' ->
			      %% Line 3136
			      apply 'check_anyAttribute2'/5
				  (Namespace, PC, Att, NS, S)
			  %% Line 3137
			  <_cor42> when 'true' ->
			      let <_cor14> =
				  %% Line 3138
				  apply 'error_path'/2
				      (El, Name)
			      in  %% Line 3140
				  ( case Att of
				      ( <( {'xmlAttribute',_rec273,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50}
					   -| ['compiler_generated'] )> when 'true' ->
					    {'error',{_cor14,'xmerl_xsd',{'disallowed_namespace',Namespace,NS,_rec273}}}
					-| ['compiler_generated'] )
				      ( <_cor51> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','xmlAttribute'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
			end
		    ( <_cor16> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor16})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor20,_cor19,_cor18,_cor17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor20,_cor19,_cor18,_cor17})
		  -| [{'function_name',{'check_anyAttribute',4}}] )
	    -| ['compiler_generated'] )
	end
'check_anyAttribute2'/5 =
    %% Line 3143
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <_cor12,PC,Att,_cor13,S>
	      when let <_cor5> =
		    call 'erlang':'=:='
			(PC, 'skip')
		in  let <_cor6> =
			call 'erlang':'=:='
			    (PC, 'lax')
		    in  call 'erlang':'or'
			    (_cor5, _cor6) ->
	      %% Line 3144
	      {Att,S}
	  %% Line 3145
	  <_X_Namespace,_cor14,Att,_X_NS,S> when 'true' ->
	      %% Line 3147
	      {Att,S}
	end
'check_anyAttribute_namespace'/2 =
    %% Line 3149
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <['##any'|_cor4],_X_NS> when 'true' ->
	      %% Line 3150
	      'ok'
	  %% Line 3151
	  <['absent'],_X_NS> when 'true' ->
	      %% Line 3152
	      'ok'
	  %% Line 3153
	  <[NS|_cor5],_cor6>
	      when call 'erlang':'=:='
		    (_cor6,
		     NS) ->
	      %% Line 3154
	      'ok'
	  %% Line 3155
	  <[{'not',NS}|_cor7],_cor8>
	      when call 'erlang':'=:='
		    (_cor8,
		     NS) ->
	      %% Line 3156
	      'false'
	  %% Line 3157
	  <[_X_H|T],NS> when 'true' ->
	      %% Line 3158
	      apply 'check_anyAttribute_namespace2'/2
		  (T, NS)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'check_anyAttribute_namespace',2}}] )
	    -| ['compiler_generated'] )
	end
'check_anyAttribute_namespace2'/2 =
    %% Line 3159
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[NS|_cor4],_cor5>
	      when call 'erlang':'=:='
		    (_cor5,
		     NS) ->
	      %% Line 3160
	      'ok'
	  %% Line 3161
	  <[_X_H|T],NS> when 'true' ->
	      %% Line 3162
	      apply 'check_anyAttribute_namespace2'/2
		  (T, NS)
	  %% Line 3163
	  <[],_X_NS> when 'true' ->
	      %% Line 3164
	      'false'
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'check_anyAttribute_namespace2',2}}] )
	    -| ['compiler_generated'] )
	end
'resolve_attributeGroups'/3 =
    %% Line 3166
    fun (_cor2,_cor1,_cor0) ->
	%% Line 3167
	apply 'resolve_attributeGroups'/5
	    (_cor2, _cor1, _cor0, [], [])
'resolve_attributeGroups'/5 =
    %% Line 3168
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[AG = {'attributeGroup',_cor26}|SchemaAtts],El,S,Parents,Acc> when 'true' ->
	      %% Line 3169
	      case apply 'resolve'/2
		       (AG, S) of
		%% Line 3170
		<{{'schema_attribute_group',Name,_cor27,_cor28,AGC},_X_S2}> when 'true' ->
		    let <_cor7> =
			%% Line 3171
			call 'lists':'member'
			    (Name, Parents)
		    in  %% Line 3171
			( case S of
			    ( <( {'xsd_state',_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_rec274,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59}
				 -| ['compiler_generated'] )> when 'true' ->
				  case <_cor7,_rec274> of
				    %% Line 3172
				    <'true','false'> when 'true' ->
					%% Line 3173
					( case El of
					    ( <( {'xmlElement',_rec275,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,_cor69,_cor70}
						 -| ['compiler_generated'] )> when 'true' ->
						  let <_cor10> =
						      apply 'error_path'/2
							  (El, _rec275)
						  in  let <Err> = {_cor10,'xmerl_xsd',%% Line 3174
									      {'cirkular_attributeGroup_reference',Name}}
						      in  let <_cor12> =
							      %% Line 3175
							      apply 'acc_errs'/2
								  (S, Err)
							  in  %% Line 3175
							      apply 'resolve_attributeGroups'/5
								  (SchemaAtts, El, _cor12, %% Line 3176
											   Parents, %% Line 3176
												    Acc)
					      -| ['compiler_generated'] )
					    ( <_cor71> when 'true' ->
						  ( call ( 'erlang'
							   -| ['compiler_generated'] ):( 'error'
											 -| ['compiler_generated'] )
							(( {'badrecord','xmlElement'}
							   -| ['compiler_generated'] ))
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					  end
					  -| ['compiler_generated'] )
				    %% Line 3177
				    <'true',_cor72> when 'true' ->
					%% Line 3178
					apply 'resolve_attributeGroups'/5
					    (SchemaAtts, El, S, Parents, Acc)
				    %% Line 3179
				    <_fol3923,_fol3924> when 'true' ->
					let <_cor13> =
					    %% Line 3180
					    call 'erlang':'++'
						(AGC, ['marker'|SchemaAtts])
					in  %% Line 3180
					    apply 'resolve_attributeGroups'/5
						(_cor13, %% Line 3181
							 El, %% Line 3181
							     S, %% Line 3181
								[Name|Parents], %% Line 3181
										Acc)
				  end
			      -| ['compiler_generated'] )
			    ( <_cor60> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','xsd_state'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		%% Line 3183
		<Err> when 'true' ->
		    %% Line 3184
		    ( case El of
			( <( {'xmlElement',_rec276,_cor74,_cor75,_cor76,_cor77,_cor78,_cor79,_cor80,_cor81,_cor82,_cor83}
			     -| ['compiler_generated'] )> when 'true' ->
			      let <_cor17> =
				  apply 'error_path'/2
				      (El, _rec276)
			      in  let <ErrMsg> =
				      {_cor17,'xmerl_xsd',%% Line 3185
							  {'schema_error','unexpected_object',AG,Err}}
				  in  let <_cor19> =
					  %% Line 3186
					  apply 'acc_errs'/2
					      (S, ErrMsg)
				      in  %% Line 3186
					  apply 'resolve_attributeGroups'/5
					      (SchemaAtts, El, _cor19, %% Line 3187
								       Parents, %% Line 3187
										Acc)
			  -| ['compiler_generated'] )
			( <_cor84> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','xmlElement'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
	      end
	  %% Line 3189
	  <['marker'|T],El,S,[_X_P|Ps],Acc> when 'true' ->
	      %% Line 3190
	      apply 'resolve_attributeGroups'/5
		  (T, El, S, Ps, Acc)
	  %% Line 3191
	  <[H|T],El,S,Parents,Acc> when 'true' ->
	      %% Line 3192
	      apply 'resolve_attributeGroups'/5
		  (T, El, S, Parents, [H|Acc])
	  %% Line 3193
	  <[],_cor85,_cor86,_cor87,Acc> when 'true' ->
	      %% Line 3194
	      Acc
	  ( <_cor25,_cor24,_cor23,_cor22,_cor21> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor25,_cor24,_cor23,_cor22,_cor21})
		  -| [{'function_name',{'resolve_attributeGroups',5}}] )
	    -| ['compiler_generated'] )
	end
'check_type'/4 =
    %% Line 3196
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Type = {'schema_simple_type',_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28},Value,FacetS,S> when 'true' ->
	      %% Line 3197
	      apply 'check_simpleType'/4
		  (Type, Value, FacetS, S)
	  %% Line 3198
	  <{'simpleType',{'anySimpleType',_cor29}},Value,_X_FacetS,S> when 'true' ->
	      %% Line 3199
	      {Value,S}
	  %% Line 3200
	  <{'union',Types},Value,_X_FacetS,S> when 'true' ->
	      %% Line 3201
	      apply 'check_union_types'/3
		  (Types, Value, S)
	  %% Line 3202
	  <ST = {'simpleType',QName = {Name,_X_Scope,_X_NS}},Value,FacetS,S> when 'true' ->
	      %% Line 3203
	      case call 'xmerl_lib':'is_builtin_simple_type'
		       (QName) of
		%% Line 3204
		<'true'> when 'true' ->
		    let <_cor4> =
			%% Line 3206
			apply 'default_facets'/2
			    (FacetS, Name)
		    in  %% Line 3205
			case %% Line 3206
			     apply 'constrained'/4
				 (QName, _cor4, Value, S) of
			  <{ConstrainedValue,S2}> when 'true' ->
			      %% Line 3207
			      case call 'xmerl_xsd_type':'check_simpleType'
				       (Name, ConstrainedValue, S2) of
				%% Line 3208
				<{'ok',_cor30}>
				    when let <_cor6> =
					  call 'erlang':'=:='
					      (Name, 'IDREF')
				      in  let <_cor7> =
					      call 'erlang':'=:='
						  (Name, 'IDREFS')
					  in  call 'erlang':'or'
						  (_cor6, _cor7) ->
				    %% Line 3210
				    {ConstrainedValue,S2}
				%% Line 3211
				<{'ok',_cor31}> when 'true' ->
				    %% Line 3212
				    {ConstrainedValue,S2}
				%% Line 3213
				<{'error',Reason}> when 'true' ->
				    let <_cor8> =
					%% Line 3215
					apply 'acc_errs'/2
					    (S2, Reason)
				    in  %% Line 3215
					{Value,_cor8}
				( <_cor9> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor9})
				  -| ['compiler_generated'] )
			      end
			  ( <_cor5> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor5})
			    -| ['compiler_generated'] )
			end
		%% Line 3217
		<_cor32> when 'true' ->
		    %% Line 3218
		    case apply 'resolve'/2
			     (ST, S) of
		      %% Line 3219
		      <{[],S2}> when 'true' ->
			  let <Err> = {%% Line 3220
			       [],%% Line 3220
				  'xmerl_xsd',%% Line 3220
					      {'could_not_resolve_type',ST}}
			  in  let <_cor11> =
				  %% Line 3221
				  apply 'acc_errs'/2
				      (S2, Err)
			      in  %% Line 3221
				  {Value,_cor11}
		      %% Line 3222
		      <{RefedST,S2}> when 'true' ->
			  %% Line 3223
			  apply 'check_type'/4
			      (RefedST, Value, 'unapplied', S2)
		      ( <_cor12> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor12})
			-| ['compiler_generated'] )
		    end
	      end
	  %% Line 3226
	  <Type,Value,_X_FacetS,S> when 'true' ->
	      let <Err> = {%% Line 3227
		   [],%% Line 3227
		      'xmerl_xsd',%% Line 3227
				  {'could_not_check_value_for_type',Type}}
	      in  let <_cor15> =
		      %% Line 3229
		      apply 'acc_errs'/2
			  (S, Err)
		  in  %% Line 3229
		      {Value,_cor15}
	end
'check_simpleType'/4 =
    %% Line 3231
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{'schema_simple_type',_cor22,_cor23,BT,_cor24,_X_Final,_cor25,%% Line 3232
									 Facets,_cor26,%% Line 3232
										       Type},%% Line 3233
											     Value,%% Line 3233
												   FacetS,%% Line 3233
													  S> when 'true' ->
	      %% Line 3234
	      case <BT,Type> of
		%% Line 3235
		<{_X_ST,_cor27,_cor28},_cor29> when 'true' ->
		    %% Line 3236
		    case call 'xmerl_lib':'is_builtin_simple_type'
			     (BT) of
		      %% Line 3237
		      <'true'> when 'true' ->
			  let <_cor4> =
			      %% Line 3239
			      apply 'default_facets'/2
				  (FacetS, BT)
			  in  let <_cor5> =
				  %% Line 3239
				  apply 'merge_facets'/2
				      (_cor4, Facets)
			      in  %% Line 3238
				  case %% Line 3239
				       apply 'constrained'/4
					   (BT, _cor5, Value, S) of
				    <{ConstrainedValue,S2}> when 'true' ->
					let <_cor30> =
					    %% Line 3240
					    apply 'check_type'/4
						({'simpleType',BT}, ConstrainedValue, 'applied', S2)
					in  %% Line 3240
					    case _cor30 of
					      <{_cor31,_X_S3}> when 'true' ->
						  ( _cor30
						    -| ['compiler_generated'] )
					      ( <_cor7> when 'true' ->
						    primop 'match_fail'
							({'badmatch',_cor7})
						-| ['compiler_generated'] )
					    end
				    ( <_cor6> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor6})
				      -| ['compiler_generated'] )
				  end
		      %% Line 3241
		      <_cor32> when 'true' ->
			  %% Line 3242
			  case apply 'resolve'/2
				   ({'simpleType',BT}, S) of
			    %% Line 3243
			    <{BaseST = {'schema_simple_type',_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,Facets2,_cor39,_cor40},_cor41}> when 'true' ->
				let <_rec277> =
				    %% Line 3244
				    call 'erlang':'++'
					(Facets, Facets2)
				in  let <_cor11> =
					%% Line 3244
					call 'erlang':'setelement'
					    (8, BaseST, _rec277)
				    in  %% Line 3244
					apply 'check_simpleType'/4
					    (_cor11, Value, 'unapplied', S)
			    %% Line 3245
			    <_cor52> when 'true' ->
				let <Err> = {%% Line 3246
				     [],%% Line 3246
					'xmerl_xsd',%% Line 3246
						    {'unknown_simpleType',BT}}
				in  let <_cor13> =
					%% Line 3247
					apply 'acc_errs'/2
					    (S, Err)
				    in  %% Line 3247
					{Value,_cor13}
			  end
		    end
		%% Line 3250
		<_cor53,[CT|[]]> when 'true' ->
		    let <_cor54> =
			%% Line 3251
			apply 'check_type'/4
			    (CT, Value, 'unapplied', S)
		    in  %% Line 3251
			case _cor54 of
			  <{_cor55,_X_S2}> when 'true' ->
			      ( _cor54
				-| ['compiler_generated'] )
			  ( <_cor16> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor16})
			    -| ['compiler_generated'] )
			end
		( <_fol3927,_fol3928> when 'true' ->
		      let <_cor17> = {_fol3927,_fol3928}
		      in  primop 'match_fail'
			      ({'case_clause',_cor17})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor21,_cor20,_cor19,_cor18> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor21,_cor20,_cor19,_cor18})
		  -| [{'function_name',{'check_simpleType',4}}] )
	    -| ['compiler_generated'] )
	end
'check_union_types'/3 =
    %% Line 3254
    fun (_cor2,_cor1,_cor0) ->
	%% Line 3255
	apply 'check_union_types'/4
	    (_cor2, _cor2, _cor1, _cor0)
'check_union_types'/4 =
    %% Line 3256
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[],UT,Value,S> when 'true' ->
	      %% Line 3257
	      apply 'acc_errs'/2
		  (S, {[],'xmerl_xsd',{'value_not_valid',Value,UT}})
	  %% Line 3258
	  <[T|Ts],UT,Value,S = {'xsd_state',_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,Errs}> when 'true' ->
	      %% Line 3259
	      case apply 'check_type'/4
		       (T, Value, 'unapplied', S) of
		%% Line 3260
		<{Val,S2 = {'xsd_state',_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,_cor69,_cor70,_cor71}}>
		    when call 'erlang':'=:='
			  (_cor71,
			   Errs) ->
		    %% Line 3261
		    {Val,S2}
		%% Line 3262
		<{_cor72,_cor73}> when 'true' ->
		    %% Line 3263
		    apply 'check_union_types'/4
			(Ts, UT, Value, S)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor8,_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6,_cor5})
		  -| [{'function_name',{'check_union_types',4}}] )
	    -| ['compiler_generated'] )
	end
'reserved_attribute'/2 =
    %% Line 3266
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{RA,_cor20,'http://www.w3.org/2001/XMLSchema-instance'},_cor21>
	      when let <_cor2> =
		    %% Line 3267
		    call 'erlang':'=:='
			(RA, 'type')
		in  let <_cor3> =
			%% Line 3267
			call 'erlang':'=:='
			    (RA, 'nil')
		    in  let <_cor4> =
			    %% Line 3267
			    call 'erlang':'=:='
				(RA, 'schemaLocation')
			in  let <_cor5> =
				%% Line 3267
				call 'erlang':'=:='
				    (RA, 'noNamespaceSchemaLocation')
			    in  let <_cor6> =
				    %% Line 3267
				    call 'erlang':'or'
					(_cor4, _cor5)
				in  let <_cor7> =
					%% Line 3267
					call 'erlang':'or'
					    (_cor3, _cor6)
				    in  %% Line 3267
					call 'erlang':'or'
					    (_cor2, _cor7) ->
	      %% Line 3268
	      'true'
	  %% Line 3269
	  <{'xmlAttribute',Name,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29},{'xmlNamespace',_cor30,NSNodes}> when 'true' ->
	      let <_cor8> =
		  %% Line 3270
		  case <> of
		    %% Line 3271
		    <>
			when call 'erlang':'is_atom'
			      (Name) ->
			call 'erlang':'atom_to_list'
			    (Name)
		    %% Line 3272
		    <> when 'true' ->
			Name
		  end
	      in  %% Line 3274
		  case call 'string':'tokens'
			   (_cor8, [58]) of
		    %% Line 3275
		    <[[120|[109|[108|[110|[115]]]]]|_cor31]> when 'true' ->
			%% Line 3276
			'true'
		    %% Line 3277
		    <[Prefix|[InstAtt|[]]]>
			when let <_cor10> =
			      call 'erlang':'=='
				  (InstAtt, [116|[121|[112|[101]]]])
			  in  let <_cor11> =
				  %% Line 3278
				  call 'erlang':'=='
				      (InstAtt, [110|[105|[108]]])
			      in  let <_cor12> =
				      %% Line 3279
				      call 'erlang':'=='
					  (InstAtt, [115|[99|[104|[101|[109|[97|[76|[111|[99|[97|[116|[105|[111|[110]]]]]]]]]]]]]])
				  in  let <_cor13> =
					  %% Line 3280
					  call 'erlang':'=='
					      (InstAtt, [110|[111|[78|[97|[109|[101|[115|[112|[97|[99|[101|[83|[99|[104|[101|[109|[97|[76|[111|[99|[97|[116|[105|[111|[110]]]]]]]]]]]]]]]]]]]]]]]]])
				      in  let <_cor14> =
					      %% Line 3279
					      call 'erlang':'or'
						  (_cor12, _cor13)
					  in  let <_cor15> =
						  %% Line 3278
						  call 'erlang':'or'
						      (_cor11, _cor14)
					      in  call 'erlang':'or'
						      (_cor10, _cor15) ->
			%% Line 3281
			case apply 'keyNsearch'/4
				 ('http://www.w3.org/2001/XMLSchema-instance', 2, NSNodes, []) of
			  %% Line 3282
			  <{_cor32,_cor33}>
			      when call 'erlang':'=:='
				    (_cor32,
				     Prefix) ->
			      %% Line 3283
			      'true'
			  %% Line 3284
			  <_cor34> when 'true' ->
			      %% Line 3285
			      'false'
			end
		    %% Line 3287
		    <_cor35> when 'true' ->
			%% Line 3288
			'false'
		  end
	  %% Line 3290
	  <_cor36,_cor37> when 'true' ->
	      %% Line 3291
	      'false'
	end
'default_facets'/2 =
    %% Line 3294
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'applied',_cor4> when 'true' ->
	      %% Line 3295
	      []
	  %% Line 3296
	  <_cor5,Type> when 'true' ->
	      %% Line 3297
	      apply 'default_facets'/1
		  (Type)
	end
'default_facets'/1 =
    %% Line 3298
    fun (_cor0) ->
	case _cor0 of
	  <{Name,_cor4,_cor5}>
	      when call 'erlang':'is_list'
		    (Name) ->
	      let <_cor1> =
		  %% Line 3300
		  call 'erlang':'list_to_atom'
		      (Name)
	      in  %% Line 3300
		  apply 'default_facets'/1
		      (_cor1)
	  %% Line 3301
	  <{Name,_cor6,_cor7}> when 'true' ->
	      %% Line 3302
	      apply 'default_facets'/1
		  (Name)
	  %% Line 3303
	  <TypeName> when 'true' ->
	      %% Line 3304
	      case call 'xmerl_lib':'is_xsd_string'
		       (TypeName) of
		%% Line 3305
		<'false'> when 'true' ->
		    %% Line 3306
		    [{'whiteSpace',[99|[111|[108|[108|[97|[112|[115|[101]]]]]]]]}]
		%% Line 3307
		<_cor8> when 'true' ->
		    %% Line 3308
		    []
	      end
	end
'merge_facets'/2 =
    %% Line 3311
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],DefinedF> when 'true' ->
	      %% Line 3312
	      DefinedF
	  %% Line 3313
	  <[F = {Name,_cor5}|Rest],DefinedF> when 'true' ->
	      let <_cor2> =
		  %% Line 3315
		  call 'lists':'keyreplace'
		      (Name, 1, DefinedF, F)
	      in  %% Line 3315
		  apply 'merge_facets'/2
		      (Rest, _cor2)
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'merge_facets',2}}] )
	    -| ['compiler_generated'] )
	end
'constrained'/4 =
    %% Line 3317
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{T,_cor15,_cor16},Facets,Value,S> when 'true' ->
	      let <_cor9> =
		  %% Line 3318
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor6) ->
				case _cor6 of
				  <[F|_cor5]> when 'true' ->
				      let <_cor7> =
					  call 'xmerl_xsd_type':'facet_fun'
					      (T, F)
				      in  let <_cor8> =
					      apply 'lc$^0'/1
						  (_cor5)
					  in  ( [_cor7|_cor8]
						-| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor6> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor6})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (Facets)
		    -| ['list_comprehension'] )
	      in  %% Line 3319
		  apply 'constrained2'/3
		      (_cor9, Value, S)
	  ( <_cor14,_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12,_cor11})
		  -| [{'function_name',{'constrained',4}}] )
	    -| ['compiler_generated'] )
	end
'constrained2'/3 =
    %% Line 3320
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],Value,S> when 'true' ->
	      %% Line 3321
	      {Value,S}
	  %% Line 3322
	  <[Facet|RestFacets],Value,S> when 'true' ->
	      %% Line 3323
	      case apply Facet
		       (Value) of
		%% Line 3324
		<{'error',Reason}> when 'true' ->
		    let <_cor3> =
			%% Line 3325
			apply 'acc_errs'/2
			    (S, Reason)
		    in  %% Line 3325
			apply 'constrained2'/3
			    (RestFacets, Value, _cor3)
		%% Line 3326
		<{'ok',NewValue}> when 'true' ->
		    %% Line 3327
		    apply 'constrained2'/3
			(RestFacets, NewValue, S)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'constrained2',3}}] )
	    -| ['compiler_generated'] )
	end
'id_constraints'/3 =
    %% Line 3330
    fun (_cor2,_cor1,_cor0) ->
	%% Line 3331
	( case _cor2 of
	    ( <( {'schema_element',_cor24,_cor25,_cor26,_cor27,_rec279,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <S1> =
		      apply 'check_uniqueness'/3
			  (_rec279, _cor1, _cor0)
		  in  let <_cor12> =
			  %% Line 3333
			  ( letrec
				'lc$^0'/1 =
				    fun (_cor10) ->
					case _cor10 of
					  <[{'key',X}|_cor7]> when 'true' ->
					      let <_cor11> =
						  apply 'lc$^0'/1
						      (_cor7)
					      in  ( [X|_cor11]
						    -| ['compiler_generated'] )
					  ( <[_cor6|_cor7]> when 'true' ->
						apply 'lc$^0'/1
						    (_cor7)
					    -| ['compiler_generated'] )
					  <[]> when 'true' ->
					      []
					  ( <_cor10> when 'true' ->
						( primop 'match_fail'
						      ({'function_clause',_cor10})
						  -| [{'function_name',{'lc$^0',1}}] )
					    -| ['compiler_generated'] )
					end
			    in  apply 'lc$^0'/1
				    (_cor28)
			    -| ['list_comprehension'] )
		      in  let <S2> =
			      %% Line 3333
			      apply 'check_keys'/3
				  (_cor12, _cor1, S1)
			  in  let <_cor20> =
				  %% Line 3334
				  ( letrec
					'lc$^1'/1 =
					    fun (_cor18) ->
						case _cor18 of
						  <[{'keyref',X}|_cor15]> when 'true' ->
						      let <_cor19> =
							  apply 'lc$^1'/1
							      (_cor15)
						      in  ( [X|_cor19]
							    -| ['compiler_generated'] )
						  ( <[_cor14|_cor15]> when 'true' ->
							apply 'lc$^1'/1
							    (_cor15)
						    -| ['compiler_generated'] )
						  <[]> when 'true' ->
						      []
						  ( <_cor18> when 'true' ->
							( primop 'match_fail'
							      ({'function_clause',_cor18})
							  -| [{'function_name',{'lc$^1',1}}] )
						    -| ['compiler_generated'] )
						end
				    in  apply 'lc$^1'/1
					    (_cor28)
				    -| ['list_comprehension'] )
			      in  %% Line 3334
				  apply 'prepare_keyrefs'/3
				      (_cor20, _cor1, S2)
	      -| ['compiler_generated'] )
	    ( <_cor38> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','schema_element'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'check_abstract'/4 =
    %% Line 3336
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <ElName,El,{'schema_element',_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,'true',_cor24,_cor25},S>
	      when call 'erlang':'=:='
		    (_cor12,
		     ElName) ->
	      %% Line 3337
	      ( case El of
		  ( <( {'xmlElement',_rec282,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_cor6> =
			    apply 'error_path'/2
				(El, _rec282)
			in  apply 'acc_errs'/2
				(S, {_cor6,'xmerl_xsd',%% Line 3338
						       {'abstract_element_instance',ElName}})
		    -| ['compiler_generated'] )
		  ( <_cor36> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','xmlElement'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 3339
	  <ElName,_X_El,{'schema_element',_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51},S>
	      when call 'erlang':'=:='
		    (_cor37,
		     ElName) ->
	      %% Line 3340
	      S
	  %% Line 3341
	  <ElName,El,{'schema_element',_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66},S> when 'true' ->
	      %% Line 3342
	      case apply 'load_object'/2
		       ({'element',ElName}, S) of
		<{XMLEl,_X_S2}> when 'true' ->
		    %% Line 3343
		    apply 'check_abstract'/4
			(ElName, El, XMLEl, S)
		( <_cor7> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor7})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor11,_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9,_cor8})
		  -| [{'function_name',{'check_abstract',4}}] )
	    -| ['compiler_generated'] )
	end
'check_form'/5 =
    %% Line 3352
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <{LocalName,_cor17,Namespace},_cor18,El = %% Line 3353
						    {'xmlElement',Name,_cor19,_cor20,NS,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27},%% Line 3353
																	  'qualified',%% Line 3353
																		      S>
	      when call 'erlang':'=:='
		    (_cor18,
		     LocalName) ->
	      %% Line 3354
	      ( case NS of
		  ( <( {'xmlNamespace',_rec283,_cor28}
		       -| ['compiler_generated'] )> when 'true' ->
			case _rec283 of
			  %% Line 3355
			  <_cor30>
			      when call 'erlang':'=:='
				    (_rec283,
				     Namespace) ->
			      %% Line 3356
			      S
			  %% Line 3357
			  <_cor31> when 'true' ->
			      let <_cor7> =
				  %% Line 3358
				  apply 'error_path'/2
				      (El, Name)
			      in  %% Line 3358
				  apply 'acc_errs'/2
				      (S, {_cor7,'xmerl_xsd',%% Line 3359
							     {'qualified_name_required',LocalName}})
			end
		    -| ['compiler_generated'] )
		  ( <_cor29> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','xmlNamespace'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 3361
	  <{LocalName,_cor32,_cor33},_cor34,_X_El,_X_ActualFormDefault,S>
	      when call 'erlang':'=:='
		    (_cor34,
		     LocalName) ->
	      %% Line 3362
	      S
	  %% Line 3363
	  <{_X_LocalName,[],_cor35},_X_QualifiedName,_X_El,_X_ActualFormDefault,S> when 'true' ->
	      %% Line 3364
	      S
	  %% Line 3365
	  <{_X_LocalName,_cor36,_cor37},QualifiedName,El,'unqualified',S> when 'true' ->
	      %% Line 3366
	      ( case El of
		  ( <( {'xmlElement',_rec284,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_cor11> =
			    apply 'error_path'/2
				(El, _rec284)
			in  apply 'acc_errs'/2
				(S, {_cor11,'xmerl_xsd',%% Line 3367
							{'unqualified_name_required',QualifiedName}})
		    -| ['compiler_generated'] )
		  ( <_cor48> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','xmlElement'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 3368
	  <{_X_LocalName,_cor49,_cor50},_X_QualifiedName,_X_El,_X_ActualFormDefault,S> when 'true' ->
	      %% Line 3369
	      S
	  ( <_cor16,_cor15,_cor14,_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15,_cor14,_cor13,_cor12})
		  -| [{'function_name',{'check_form',5}}] )
	    -| ['compiler_generated'] )
	end
'actual_form_value'/2 =
    %% Line 3371
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'undefined',GlobalForm> when 'true' ->
	      %% Line 3372
	      GlobalForm
	  %% Line 3373
	  <LocalForm,_cor4> when 'true' ->
	      %% Line 3374
	      LocalForm
	end
'check_uniqueness'/3 =
    %% Line 3377
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'undefined',_cor9,S> when 'true' ->
	      %% Line 3378
	      S
	  %% Line 3379
	  <Unique,XMLEl,S> when 'true' ->
	      %% Line 3380
	      case Unique of
		%% Line 3381
		<[{'unique',{'id_constraint',_cor10,_cor11,_cor12,_cor13,_cor14,{'selector',SelectorPath},%% Line 3382
													  Fields,_cor15}}|%% Line 3382
															  []]> when 'true' ->
		    let <TargetNodeSet> =
			%% Line 3383
			apply 'target_node_set'/3
			    (SelectorPath, XMLEl, S)
		    in  %% Line 3384
			case apply 'qualified_node_set'/4
				 (Fields, TargetNodeSet, XMLEl, S) of
			  %% Line 3385
			  <{[],S1}> when 'true' ->
			      S1
			  %% Line 3386
			  <{[_X_E|[]],S1}> when 'true' ->
			      S1
			  %% Line 3387
			  <{L,S1}>
			      when call 'erlang':'is_list'
				    (L) ->
			      %% Line 3388
			      apply 'key_sequence_uniqueness'/3
				  (L, XMLEl, S1)
			  ( <_cor4> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor4})
			    -| ['compiler_generated'] )
			end
		%% Line 3390
		<_cor16> when 'true' ->
		    S
	      end
	end
'target_node_set'/3 =
    %% Line 3393
    fun (_cor2,_cor1,_cor0) ->
	%% Line 3395
	( case _cor0 of
	    ( <( {'xsd_state',_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_rec285,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38}
		 -| ['compiler_generated'] )> when 'true' ->
		  call 'xmerl_xpath':'string'
		      (_cor2, _cor1, [{'namespace',_rec285}|[]])
	      -| ['compiler_generated'] )
	    ( <_cor39> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','xsd_state'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'qualified_node_set'/4 =
    %% Line 3397
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor8> =
	    %% Line 3398
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor6) ->
			  case _cor6 of
			    <[{'field',X}|_cor5]> when 'true' ->
				let <_cor7> =
				    apply 'lc$^0'/1
					(_cor5)
				in  ( [X|_cor7]
				      -| ['compiler_generated'] )
			    ( <[_cor4|_cor5]> when 'true' ->
				  apply 'lc$^0'/1
				      (_cor5)
			      -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor6> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor6})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (_cor3)
	      -| ['list_comprehension'] )
	in  %% Line 3398
	    apply 'qualified_node_set'/5
		(_cor8, _cor2, _cor1, _cor0, [])
'qualified_node_set'/5 =
    %% Line 3400
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[],_X_Set,_X_El,S,Acc> when 'true' ->
	      %% Line 3401
	      {Acc,S}
	  %% Line 3402
	  <_cor24,[],_X_El,S,Acc> when 'true' ->
	      %% Line 3403
	      {Acc,S}
	  %% Line 3404
	  <Paths,[QN|QNs],El,S,Acc> when 'true' ->
	      let <Fun> =
		  %% Line 3405
		  ( fun (_cor13,_cor12) ->
			%% Line 3406
			case apply 'apply_field'/3
				 (_cor13, QN, _cor12) of
			  %% Line 3407
			  <L>
			      when try
				    let <_cor5> =
					call 'erlang':'length'
					    (L)
				    in  call 'erlang':'=<'
					    (_cor5, 1)
				of <Try> ->
				    Try
				catch <T,R> ->
				    'false' ->
			      %% Line 3408
			      {L,_cor12}
			  %% Line 3409
			  <Err> when 'true' ->
			      %% Line 3411
			      ( case El of
				  ( <( {'xmlElement',_rec286,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34}
				       -| ['compiler_generated'] )> when 'true' ->
					let <_cor8> =
					    apply 'error_path'/2
						(El, _rec286)
					in  let <RetErr> = {_cor8,'xmerl_xsd',%% Line 3412
								   {'illegal_key_sequence_value',Err}}
					    in  let <_cor10> =
						    %% Line 3413
						    apply 'acc_errs'/2
							(_cor12, RetErr)
						in  %% Line 3413
						    {[],_cor10}
				    -| ['compiler_generated'] )
				  ( <_cor35> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','xmlElement'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			end
		    -| [{'id',{0,0,'-qualified_node_set/5-fun-0-'}}] )
	      in  %% Line 3416
		  case call 'lists':'mapfoldl'
			   (Fun, S, Paths) of
		    <{KeySequence,S2}> when 'true' ->
			%% Line 3417
			case call 'lists':'flatten'
				 (KeySequence) of
			  %% Line 3418
			  <[]> when 'true' ->
			      %% Line 3419
			      apply 'qualified_node_set'/5
				  (Paths, QNs, El, S2, Acc)
			  %% Line 3420
			  <KS> when 'true' ->
			      %% Line 3421
			      apply 'qualified_node_set'/5
				  (Paths, QNs, El, S2, [KS|Acc])
			end
		    ( <_cor17> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor17})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor23,_cor22,_cor21,_cor20,_cor19> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor23,_cor22,_cor21,_cor20,_cor19})
		  -| [{'function_name',{'qualified_node_set',5}}] )
	    -| ['compiler_generated'] )
	end
'apply_field'/3 =
    %% Line 3424
    fun (_cor2,_cor1,_cor0) ->
	%% Line 3426
	( case _cor0 of
	    ( <( {'xsd_state',_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_rec287,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38}
		 -| ['compiler_generated'] )> when 'true' ->
		  call 'xmerl_xpath':'string'
		      (_cor2, _cor1, [{'namespace',_rec287}|[]])
	      -| ['compiler_generated'] )
	    ( <_cor39> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','xsd_state'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'check_keys'/3 =
    %% Line 3428
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],_X_XMLEl,S> when 'true' ->
	      %% Line 3429
	      S
	  %% Line 3430
	  <[Key = {'id_constraint',_cor19,_cor20,_cor21,_cor22,_cor23,{'selector',SelectorPath},%% Line 3431
												Fields,_cor24}|%% Line 3431
													       Keys],%% Line 3431
														     XMLEl,%% Line 3431
															   S> when 'true' ->
	      let <TargetNodeSet> =
		  %% Line 3432
		  apply 'target_node_set'/3
		      (SelectorPath, XMLEl, S)
	      in  let <_cor14> =
		      %% Line 3434
		      case apply 'qualified_node_set'/4
			       (Fields, TargetNodeSet, XMLEl, S) of
			%% Line 3435
			<{L,S1}>
			    when try
				  let <_cor5> =
				      call 'erlang':'length'
					  (L)
				  in  let <_cor4> =
					  call 'erlang':'length'
					      (TargetNodeSet)
				      in  call 'erlang':'=='
					      (_cor5, _cor4)
			      of <Try> ->
				  Try
			      catch <T,R> ->
				  'false' ->
			    let <S2> =
				%% Line 3437
				apply 'key_sequence_uniqueness'/3
				    (L, XMLEl, S1)
			    in  let <_cor9> =
				    %% Line 3438
				    call 'erlang':'setelement'
					(9, Key, L)
				in  do  %% Line 3438
					apply 'save_key'/2
					    (_cor9, S2)
					%% Line 3439
					S2
			%% Line 3440
			<{Err,S1}> when 'true' ->
			    %% Line 3441
			    ( case XMLEl of
				( <( {'xmlElement',_rec289,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43}
				     -| ['compiler_generated'] )> when 'true' ->
				      let <_cor12> =
					  apply 'error_path'/2
					      (XMLEl, _rec289)
				      in  apply 'acc_errs'/2
					      (S1, {_cor12,'xmerl_xsd',%% Line 3442
								       {'qualified_node_set_not_correct_for_key',Err}})
				  -| ['compiler_generated'] )
				( <_cor44> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {'badrecord','xmlElement'}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
			( <_cor13> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor13})
			  -| ['compiler_generated'] )
		      end
		  in  %% Line 3444
		      apply 'check_keys'/3
			  (Keys, XMLEl, _cor14)
	  ( <_cor18,_cor17,_cor16> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor18,_cor17,_cor16})
		  -| [{'function_name',{'check_keys',3}}] )
	    -| ['compiler_generated'] )
	end
'prepare_keyrefs'/3 =
    %% Line 3450
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],_X_XMLEl,S> when 'true' ->
	      %% Line 3451
	      S
	  %% Line 3452
	  <[KeyRef = {'id_constraint',_cor11,_cor12,_cor13,_cor14,_cor15,{'selector',SelectorPath},%% Line 3453
												   Fields,_cor16}|%% Line 3453
														  Rest],%% Line 3453
															XMLEl,%% Line 3453
															      S> when 'true' ->
	      let <TargetNodeSet> =
		  %% Line 3454
		  apply 'target_node_set'/3
		      (SelectorPath, XMLEl, S)
	      in  %% Line 3455
		  case apply 'qualified_node_set'/4
			   (Fields, TargetNodeSet, XMLEl, S) of
		    <{L,S1}> when 'true' ->
			let <_cor7> =
			    %% Line 3456
			    call 'erlang':'setelement'
				(9, KeyRef, L)
			in  do  %% Line 3456
				apply 'save_keyref'/2
				    (_cor7, S1)
				%% Line 3457
				apply 'prepare_keyrefs'/3
				    (Rest, XMLEl, S1)
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor4})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'prepare_keyrefs',3}}] )
	    -| ['compiler_generated'] )
	end
'key_sequence_uniqueness'/3 =
    %% Line 3468
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],_cor13,S> when 'true' ->
	      %% Line 3469
	      S
	  %% Line 3470
	  <[_X_H|[]],_cor14,S> when 'true' ->
	      %% Line 3471
	      S
	  %% Line 3472
	  <[KS = [F1|FRest]|KSs],El,S> when 'true' ->
	      %% Line 3473
	      case apply 'is_key_sequence_equal'/2
		       (F1, KSs) of
		%% Line 3474
		<{'true',TailOfEquals}> when 'true' ->
		    let <_cor7> =
			%% Line 3476
			case apply 'k_s_u'/3
				 (FRest, TailOfEquals, S) of
			  %% Line 3477
			  <'true'> when 'true' ->
			      %% Line 3478
			      ( case El of
				  ( <( {'xmlElement',_rec291,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24}
				       -| ['compiler_generated'] )> when 'true' ->
					let <_cor5> =
					    apply 'error_path'/2
						(El, _rec291)
					in  apply 'acc_errs'/2
						(S, {_cor5,'xmerl_xsd',%% Line 3479
								       {'key_value_not_unique',KS}})
				    -| ['compiler_generated'] )
				  ( <_cor25> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','xmlElement'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			  %% Line 3480
			  <_cor26> when 'true' ->
			      %% Line 3481
			      S
			end
		    in  %% Line 3483
			apply 'key_sequence_uniqueness'/3
			    (KSs, El, _cor7)
		%% Line 3484
		<'false'> when 'true' ->
		    %% Line 3485
		    apply 'key_sequence_uniqueness'/3
			(KSs, El, S)
		( <_cor9> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor9})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10})
		  -| [{'function_name',{'key_sequence_uniqueness',3}}] )
	    -| ['compiler_generated'] )
	end
'k_s_u'/3 =
    %% Line 3488
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],_cor7,_cor8> when 'true' ->
	      %% Line 3489
	      'true'
	  %% Line 3490
	  <[F|Fs],KSs,S> when 'true' ->
	      %% Line 3491
	      case apply 'is_key_sequence_equal'/2
		       (F, KSs) of
		%% Line 3492
		<{'true',TailOfEquals}> when 'true' ->
		    %% Line 3493
		    apply 'k_s_u'/3
			(Fs, TailOfEquals, S)
		%% Line 3494
		<_cor9> when 'true' ->
		    %% Line 3495
		    'false'
	      end
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'k_s_u',3}}] )
	    -| ['compiler_generated'] )
	end
'is_key_sequence_equal'/2 =
    %% Line 3498
    fun (_cor1,_cor0) ->
	%% Line 3499
	apply 'is_key_sequence_equal'/3
	    (_cor1, _cor0, [])
'is_key_sequence_equal'/3 =
    %% Line 3500
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <_X_F,[],[]> when 'true' ->
	      %% Line 3501
	      'false'
	  %% Line 3502
	  <_X_F,[],Acc> when 'true' ->
	      let <_cor3> =
		  %% Line 3503
		  call 'lists':'reverse'
		      (Acc)
	      in  %% Line 3503
		  {'true',_cor3}
	  %% Line 3504
	  <F,[[F1|TlF1]|Rest],Acc> when 'true' ->
	      %% Line 3505
	      case apply 'is_key_el_equal'/2
		       (F, F1) of
		%% Line 3506
		<'true'> when 'true' ->
		    %% Line 3507
		    apply 'is_key_sequence_equal'/3
			(F, Rest, [TlF1|Acc])
		%% Line 3508
		<'false'> when 'true' ->
		    %% Line 3509
		    apply 'is_key_sequence_equal'/3
			(F, Rest, Acc)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'is_key_sequence_equal',3}}] )
	    -| ['compiler_generated'] )
	end
'is_key_el_equal'/2 =
    %% Line 3513
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'xmlElement',_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,C1,_cor11,_cor12,_cor13},{'xmlElement',_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,C2,_cor21,_cor22,_cor23}> when 'true' ->
	      %% Line 3516
	      apply 'is_equal_content'/2
		  (C1, C2)
	  %% Line 3517
	  <{'xmlAttribute',_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,V1,_cor31},{'xmlAttribute',_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40}>
	      when call 'erlang':'=:='
		    (_cor39,
		     V1) ->
	      %% Line 3518
	      'true'
	  %% Line 3519
	  <_cor41,_cor42> when 'true' ->
	      %% Line 3520
	      'false'
	end
'is_equal_content'/2 =
    %% Line 3522
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[T1 = {'xmlText',_cor11,_cor12,_cor13,_cor14,_cor15}|Rest1],[T2 = {'xmlText',_cor16,_cor17,_cor18,_cor19,_cor20}|Rest2]> when 'true' ->
	      %% Line 3524
	      case apply 'is_whitespace'/1
		       (T1) of
		%% Line 3525
		<'true'> when 'true' ->
		    %% Line 3526
		    case apply 'is_whitespace'/1
			     (T2) of
		      %% Line 3527
		      <'true'> when 'true' ->
			  %% Line 3528
			  apply 'is_equal_content'/2
			      (Rest1, Rest2)
		      %% Line 3529
		      <_cor21> when 'true' ->
			  %% Line 3530
			  apply 'is_equal_content'/2
			      (Rest1, [T2|Rest2])
		    end
		%% Line 3532
		<_cor22> when 'true' ->
		    %% Line 3533
		    case call 'erlang':'=='
			     (_cor14, _cor19) of
		      %% Line 3534
		      <'true'> when 'true' ->
			  %% Line 3535
			  apply 'is_equal_content'/2
			      (Rest1, Rest2)
		      %% Line 3536
		      <_cor33> when 'true' ->
			  %% Line 3537
			  'false'
		    end
	      end
	  %% Line 3540
	  <[],[]> when 'true' ->
	      %% Line 3541
	      'true'
	  %% Line 3542
	  <_cor34,_cor35> when 'true' ->
	      %% Line 3543
	      'false'
	end
'schema_concistence_checks'/1 =
    %% Line 3545
    fun (_cor0) ->
	let <S2> =
	    %% Line 3546
	    apply 'check_keyrefs'/1
		(_cor0)
	in  let <S3> =
		%% Line 3547
		apply 'check_references'/1
		    (S2)
	    in  %% Line 3548
		( case S3 of
		    ( <( {'xsd_state',_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_rec294,_cor34,_cor35,_cor36,_cor37,_cor38}
			 -| ['compiler_generated'] )> when 'true' ->
			  let <S4> =
			      apply 'check_substitutionGroups'/2
				  (_rec294, S3)
			  in  let <S5> =
				  %% Line 3549
				  apply 'check_cyclic_defs'/1
				      (S4)
			      in  %% Line 3550
				  apply 'reset_state'/1
				      (S5)
		      -| ['compiler_generated'] )
		    ( <_cor39> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','xsd_state'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
		  -| ['compiler_generated'] )
'reset_state'/1 =
    %% Line 3552
    fun (_cor0) ->
	%% Line 3553
	case _cor0 of
	  <{'xsd_state',_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41}> when 'true' ->
	      let <_cor2> =
		  %% Line 3559
		  call 'erlang':'setelement'
		      (32, _cor0, [])
	      in  let <_cor3> =
		      %% Line 3558
		      call 'erlang':'setelement'
			  (31, _cor2, [])
		  in  let <_cor4> =
			  %% Line 3555
			  call 'erlang':'setelement'
			      (30, _cor3, [])
		      in  let <_cor5> =
			      %% Line 3557
			      call 'erlang':'setelement'
				  (29, _cor4, [])
			  in  let <_cor6> =
				  %% Line 3556
				  call 'erlang':'setelement'
				      (28, _cor5, [])
			      in  let <_cor7> =
				      %% Line 3554
				      call 'erlang':'setelement'
					  (27, _cor6, [])
				  in  call 'erlang':'setelement'
					  (26, _cor7, [])
	  ( <_cor42> when 'true' ->
		( call ( 'erlang'
			 -| ['compiler_generated'] ):( 'error'
						       -| ['compiler_generated'] )
		      (( {'badrecord','xsd_state'}
			 -| ['compiler_generated'] ))
		  -| ['compiler_generated'] )
	    -| ['compiler_generated'] )
	end
'check_keyrefs'/1 =
    %% Line 3561
    fun (_cor0) ->
	%% Line 3562
	( case _cor0 of
	    ( <( {'xsd_state',_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_rec296,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <KeyExist> =
		      %% Line 3565
		      ( fun (_cor7,_cor6) ->
			    case <_cor7,_cor6> of
			      <{'keyref',Name,Refer},S_in> when 'true' ->
				  %% Line 3566
				  case apply 'load_key'/2
					   (Refer, S_in) of
				    %% Line 3567
				    <Key = {'id_constraint',_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51}> when 'true' ->
					let <_cor4> =
					    %% Line 3569
					    apply 'load_keyref'/2
						(Name, S_in)
					in  %% Line 3568
					    apply 'check_keyref_cardinality'/4
						(Name, _cor4, %% Line 3570
							      Key, %% Line 3570
								   S_in)
				    %% Line 3572
				    <_cor52> when 'true' ->
					%% Line 3573
					apply 'acc_errs'/2
					    (S_in, {[],'xmerl_xsd',%% Line 3574
								   {'keyref_missed_matching_key',Refer}})
				  end
			      %% Line 3576
			      <Other,S_in> when 'true' ->
				  %% Line 3577
				  apply 'acc_errs'/2
				      (S_in, {[],'xmerl_xsd',%% Line 3578
							     {'keyref_unexpected_object',Other}})
			    end
			-| [{'id',{0,0,'-check_keyrefs/1-fun-0-'}}] )
		  in  %% Line 3580
		      call 'lists':'foldl'
			  (KeyExist, _cor0, _rec296)
	      -| ['compiler_generated'] )
	    ( <_cor43> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','xsd_state'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'check_keyref_cardinality'/4 =
    %% Line 3581
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <_cor11,KR = {'id_constraint','keyref',_cor12,_cor13,_cor14,_cor15,_cor16,KeyRefFs,_cor17},K = %% Line 3582
													 {'id_constraint',_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,KeyFs,_cor24},%% Line 3582
																						  S> when 'true' ->
	      let <_cor5> =
		  %% Line 3583
		  call 'erlang':'length'
		      (KeyRefFs)
	      in  let <_cor4> =
		      %% Line 3583
		      call 'erlang':'length'
			  (KeyFs)
		  in  %% Line 3583
		      case call 'erlang':'=='
			       (_cor5, _cor4) of
			%% Line 3584
			<'true'> when 'true' ->
			    %% Line 3585
			    S
			%% Line 3586
			<_cor25> when 'true' ->
			    %% Line 3587
			    apply 'acc_errs'/2
				(S, {[],'xmerl_xsd',%% Line 3588
						    {'cardinality_of_fields_not_equal',KR,K}})
		      end
	  %% Line 3590
	  <Name,_cor26,_cor27,S> when 'true' ->
	      %% Line 3591
	      apply 'acc_errs'/2
		  (S, {[],'xmerl_xsd',{'could_not_load_keyref',Name}})
	end
'check_references'/1 =
    %% Line 3593
    fun (_cor0) ->
	case _cor0 of
	  <S = {'xsd_state',_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35}> when ( 'true'
																															       -| ['compiler_generated'] ) ->
	      %% Line 3594
	      apply 'check_references'/2
		  (_cor32, S)
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'check_references',1}}] )
	    -| ['compiler_generated'] )
	end
'check_references'/2 =
    %% Line 3595
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],S> when 'true' ->
	      %% Line 3596
	      S
	  %% Line 3597
	  <[H|T],S> when 'true' ->
	      let <_cor2> =
		  %% Line 3598
		  apply 'check_reference'/2
		      (H, S)
	      in  %% Line 3598
		  apply 'check_references'/2
		      (T, _cor2)
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'check_references',2}}] )
	    -| ['compiler_generated'] )
	end
'check_reference'/2 =
    %% Line 3599
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Ref = {'attribute',_cor11},S> when 'true' ->
	      %% Line 3600
	      case apply 'load_object'/2
		       (Ref, S) of
		%% Line 3601
		<{{'schema_attribute',_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20},S2}> when 'true' ->
		    %% Line 3602
		    S2
		%% Line 3603
		<_cor21> when 'true' ->
		    %% Line 3604
		    apply 'acc_errs'/2
			(S, {[],'xmerl_xsd',{'reference_undeclared','attribute',Ref}})
	      end
	  %% Line 3606
	  <Ref = {'element',_cor22},S> when 'true' ->
	      %% Line 3607
	      case apply 'load_object'/2
		       (Ref, S) of
		%% Line 3608
		<{{'schema_element',_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37},S2}> when 'true' ->
		    %% Line 3609
		    S2
		%% Line 3610
		<_cor38> when 'true' ->
		    %% Line 3611
		    apply 'acc_errs'/2
			(S, {[],'xmerl_xsd',{'reference_undeclared','element',Ref}})
	      end
	  %% Line 3613
	  <Ref = {'attributeGroup',_cor39},S> when 'true' ->
	      %% Line 3614
	      case apply 'load_object'/2
		       (Ref, S) of
		%% Line 3615
		<{{'schema_attribute_group',_cor40,_cor41,_cor42,_cor43},S2}> when 'true' ->
		    %% Line 3616
		    S2
		%% Line 3617
		<_cor44> when 'true' ->
		    %% Line 3618
		    apply 'acc_errs'/2
			(S, {[],'xmerl_xsd',{'reference_undeclared','attributeGroup',Ref}})
	      end
	  %% Line 3620
	  <Ref = {'group',_cor45},S> when 'true' ->
	      %% Line 3621
	      case apply 'load_object'/2
		       (Ref, S) of
		%% Line 3622
		<{{'schema_group',_cor46,_cor47,_cor48,_cor49,_cor50},S2}> when 'true' ->
		    S2
		%% Line 3623
		<_cor51> when 'true' ->
		    apply 'acc_errs'/2
			(S, {[],'xmerl_xsd',{'reference_undeclared','group',Ref}})
	      end
	  %% Line 3625
	  <Ref = {'simpleType',_cor52},S> when 'true' ->
	      %% Line 3626
	      case apply 'load_object'/2
		       (Ref, S) of
		%% Line 3627
		<{{'schema_simple_type',_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61},S2}> when 'true' ->
		    S2
		%% Line 3628
		<_cor62> when 'true' ->
		    apply 'acc_errs'/2
			(S, {[],'xmerl_xsd',{'reference_undeclared','simpleType',Ref}})
	      end
	  %% Line 3630
	  <Ref = {'complexType',_cor63},S> when 'true' ->
	      %% Line 3631
	      case apply 'load_object'/2
		       (Ref, S) of
		%% Line 3632
		<{{'schema_complex_type',_cor64,_cor65,_cor66,_cor67,_cor68,_cor69,_cor70,_cor71,_cor72,_cor73,_cor74,_cor75,_cor76,_cor77},S2}> when 'true' ->
		    S2
		%% Line 3633
		<_cor78> when 'true' ->
		    apply 'acc_errs'/2
			(S, {[],'xmerl_xsd',{'reference_undeclared','complexType',Ref}})
	      end
	  %% Line 3635
	  <{'simple_or_complex_Type',Ref},S = {'xsd_state',_cor79,_cor80,_cor81,_cor82,_cor83,_cor84,_cor85,_cor86,_cor87,_cor88,_cor89,_cor90,_cor91,_cor92,_cor93,_cor94,_cor95,_cor96,_cor97,_cor98,_cor99,_cor100,_cor101,_cor102,_cor103,_cor104,_cor105,_cor106,_cor107,_cor108,_cor109,Errs}> when 'true' ->
	      %% Line 3637
	      case apply 'check_reference'/2
		       ({'complexType',Ref}, S) of
		%% Line 3638
		<S2 = {'xsd_state',_cor110,_cor111,_cor112,_cor113,_cor114,_cor115,_cor116,_cor117,_cor118,_cor119,_cor120,_cor121,_cor122,_cor123,_cor124,_cor125,_cor126,_cor127,_cor128,_cor129,_cor130,_cor131,_cor132,_cor133,_cor134,_cor135,_cor136,_cor137,_cor138,_cor139,_cor140,_cor141}>
		    when call 'erlang':'=:='
			  (_cor141,
			   Errs) ->
		    S2
		%% Line 3639
		<_cor142> when 'true' ->
		    apply 'check_reference'/2
			({'simpleType',Ref}, S)
	      end
	  %% Line 3641
	  <Ref,S> when 'true' ->
	      %% Line 3642
	      apply 'acc_errs'/2
		  (S, {[],'xmerl_xsd',{'internal_error','unknown_reference',Ref}})
	end
'check_substitutionGroups'/2 =
    %% Line 3647
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],S> when 'true' ->
	      %% Line 3648
	      S
	  %% Line 3649
	  <SGs,S> when 'true' ->
	      let <S2> =
		  %% Line 3650
		  apply 'check_substGr_acyclic'/2
		      (SGs, S)
	      in  let <S3> =
		      %% Line 3651
		      apply 'check_substGr_type_structure'/2
			  (SGs, S2)
		  in  %% Line 3652
		      apply 'save_substitutionGroup'/2
			  (SGs, S3)
	end
'check_substGr_acyclic'/2 =
    %% Line 3653
    fun (_cor1,_cor0) ->
	let <Set> =
	    %% Line 3654
	    call 'sofs':'family'
		(_cor1)
	in  let <_cor3> =
		catch
		    %% Line 3655
		    call 'sofs':'family_to_digraph'
			(Set, ['acyclic'])
	    in  %% Line 3655
		case _cor3 of
		  %% Line 3656
		  <{'EXIT',{'cyclic',_cor7}}> when 'true' ->
		      %% Line 3657
		      apply 'acc_errs'/2
			  (_cor0, {[],'xmerl_xsd',{'cyclic_substitutionGroup',_cor1}})
		  %% Line 3658
		  <DG> when 'true' ->
		      do  %% Line 3659
			  call 'digraph':'delete'
			      (DG)
			  _cor0
		end
'check_substGr_type_structure'/2 =
    %% Line 3662
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[SG|SGs],S> when 'true' ->
	      let <_cor2> =
		  %% Line 3663
		  apply 'check_substGr_type_structure2'/2
		      (SG, S)
	      in  %% Line 3663
		  apply 'check_substGr_type_structure'/2
		      (SGs, _cor2)
	  %% Line 3664
	  <[],S> when 'true' ->
	      %% Line 3665
	      S
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'check_substGr_type_structure',2}}] )
	    -| ['compiler_generated'] )
	end
'check_substGr_type_structure2'/2 =
    %% Line 3666
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{Head,SGMembers},S> when 'true' ->
	      let <TypeCheck> =
		  %% Line 3668
		  ( fun (_cor5,_cor4) ->
			let <_cor2> =
			    catch
				%% Line 3669
				apply 'cmp_substGr_types'/3
				    (Head, _cor5, _cor4)
			in  %% Line 3669
			    case _cor2 of
			      %% Line 3670
			      <{'EXIT',_cor11}> when 'true' ->
				  %% Line 3671
				  apply 'acc_errs'/2
				      (_cor4, {[],'xmerl_xsd',%% Line 3672
							      {'substitutionGroup_error',Head,_cor5}})
			      %% Line 3673
			      <S_out> when 'true' ->
				  S_out
			    end
		    -| [{'id',{0,0,'-check_substGr_type_structure2/2-fun-0-'}}] )
	      in  %% Line 3676
		  call 'lists':'foldl'
		      (TypeCheck, S, SGMembers)
	  ( <_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9})
		  -| [{'function_name',{'check_substGr_type_structure2',2}}] )
	    -| ['compiler_generated'] )
	end
'cmp_substGr_types'/3 =
    %% Line 3677
    fun (_cor2,_cor1,_cor0) ->
	%% Line 3678
	case apply 'load_object'/2
		 ({'element',_cor2}, _cor0) of
	  <{HeadElement,S2}> when 'true' ->
	      %% Line 3679
	      case apply 'load_object'/2
		       ({'element',_cor1}, S2) of
		<{MemberElement,S3}> when 'true' ->
		    let <_cor9> =
			catch
			    %% Line 3680
			    ( case MemberElement of
				( <( {'schema_element',_cor18,_rec298,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31}
				     -| ['compiler_generated'] )> when 'true' ->
				      %% Line 3681
				      ( case HeadElement of
					  ( <( {'schema_element',_cor33,_rec299,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46}
					       -| ['compiler_generated'] )> when 'true' ->
						apply 'derived_or_equal'/4
						    (_rec298, _rec299, %% Line 3682
								       [], %% Line 3682
									   S3)
					    -| ['compiler_generated'] )
					  ( <_cor47> when 'true' ->
						( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'error'
										       -| ['compiler_generated'] )
						      (( {'badrecord','schema_element'}
							 -| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					end
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				( <_cor32> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {'badrecord','schema_element'}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
		    in  %% Line 3680
			case _cor9 of
			  %% Line 3683
			  <S4 = {'xsd_state',_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,_cor69,_cor70,_cor71,_cor72,_cor73,_cor74,_cor75,_cor76,_cor77,_cor78,_cor79}> when 'true' ->
			      %% Line 3684
			      S4
			  %% Line 3685
			  <_cor80> when 'true' ->
			      %% Line 3687
			      ( case MemberElement of
				  ( <( {'schema_element',_cor81,_rec300,_cor82,_cor83,_cor84,_cor85,_cor86,_cor87,_cor88,_cor89,_cor90,_cor91,_cor92,_cor93,_cor94}
				       -| ['compiler_generated'] )> when 'true' ->
					%% Line 3688
					( case HeadElement of
					    ( <( {'schema_element',_cor96,_rec301,_cor97,_cor98,_cor99,_cor100,_cor101,_cor102,_cor103,_cor104,_cor105,_cor106,_cor107,_cor108,_cor109}
						 -| ['compiler_generated'] )> when 'true' ->
						  apply 'acc_errs'/2
						      (S3, {[],'xmerl_xsd',{'internal_error','derived_or_equal',_rec300,_rec301}})
					      -| ['compiler_generated'] )
					    ( <_cor110> when 'true' ->
						  ( call ( 'erlang'
							   -| ['compiler_generated'] ):( 'error'
											 -| ['compiler_generated'] )
							(( {'badrecord','schema_element'}
							   -| ['compiler_generated'] ))
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					  end
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				  ( <_cor95> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','schema_element'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			end
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'check_cyclic_defs'/1 =
    %% Line 3690
    fun (_cor0) ->
	case _cor0 of
	  <S = {'xsd_state',_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,CA,_cor36}> when 'true' ->
	      let <_cor1> =
		  %% Line 3691
		  call 'sofs':'relation'
		      (CA)
	      in  let <Set> =
		      %% Line 3691
		      call 'sofs':'relation_to_family'
			  (_cor1)
		  in  let <_cor3> =
			  catch
			      %% Line 3692
			      call 'sofs':'family_to_digraph'
				  (Set, ['acyclic'])
		      in  %% Line 3692
			  case _cor3 of
			    %% Line 3693
			    <{'EXIT',{'cyclic',_cor37}}> when 'true' ->
				%% Line 3694
				apply 'acc_errs'/2
				    (S, {[],'xmerl_xsd',{'cyclic_definition',CA}})
			    %% Line 3695
			    <DG> when 'true' ->
				do  %% Line 3696
				    call 'digraph':'delete'
					(DG)
				    %% Line 3697
				    S
			  end
	  ( <_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5})
		  -| [{'function_name',{'check_cyclic_defs',1}}] )
	    -| ['compiler_generated'] )
	end
'derived_or_equal'/4 =
    %% Line 3702
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Type,_cor10,_X_Block,S>
	      when call 'erlang':'=:='
		    (_cor10,
		     Type) ->
	      %% Line 3703
	      S
	  %% Line 3704
	  <[MemberTypeRef|[]],[HeadTypeRef|[]],Block,S> when 'true' ->
	      %% Line 3706
	      case apply 'resolve'/2
		       (HeadTypeRef, S) of
		<{HeadType,_cor11}> when 'true' ->
		    %% Line 3707
		    case apply 'resolve'/2
			     (MemberTypeRef, S) of
		      <{MemberType,_cor12}> when 'true' ->
			  %% Line 3708
			  apply 'derived_or_equal_types'/5
			      (MemberType, HeadType, 'schema', Block, S)
		      ( <_cor5> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor5})
			-| ['compiler_generated'] )
		    end
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'derived_or_equal',4}}] )
	    -| ['compiler_generated'] )
	end
'derived_or_equal_types'/5 =
    %% Line 3709
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <MemT,{'anyType',_cor22},Env,Block,S> when 'true' ->
	      %% Line 3710
	      case MemT of
		%% Line 3711
		<{'schema_simple_type',_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,Cntnt}> when 'true' ->
		    %% Line 3712
		    apply 'is_derivation_blocked'/4
			(Env, Block, Cntnt, S)
		%% Line 3713
		<{'schema_complex_type',_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,Cntnt,_cor43}> when 'true' ->
		    %% Line 3714
		    apply 'is_derivation_blocked'/4
			(Env, Block, Cntnt, S)
		%% Line 3715
		<_cor44> when 'true' ->
		    S
	      end
	  %% Line 3717
	  <MemT = {'schema_simple_type',Mem,_cor45,MemBase,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51},%% Line 3718
												      {'schema_simple_type',Head,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59},%% Line 3718
																							  Env,%% Line 3718
																							      Block,%% Line 3718
																								    S>
	      when let <_cor6> =
		    %% Line 3719
		    call 'erlang':'=='
			(Mem, Head)
		in  let <_cor7> =
			%% Line 3719
			call 'erlang':'=='
			    (MemBase, Head)
		    in  %% Line 3719
			call 'erlang':'or'
			    (_cor6, _cor7) ->
	      %% Line 3720
	      apply 'is_derivation_blocked'/4
		  (Env, Block, _cor51, S)
	  %% Line 3721
	  <{'simpleType',Name},%% Line 3722
			       {'simpleType',_cor69},%% Line 3722
						     _X_Env,%% Line 3722
							    _X_Block,%% Line 3722
								     S>
	      when call 'erlang':'=:='
		    (_cor69,
		     %% Line 3722
		     Name) ->
	      %% Line 3723
	      S
	  %% Line 3724
	  <{'schema_simple_type',_cor70,_cor71,Name,_cor72,_cor73,_cor74,_cor75,_cor76,Content},%% Line 3725
												{'simpleType',_cor77},%% Line 3725
														      Env,%% Line 3725
															  Block,%% Line 3725
																S>
	      when call 'erlang':'=:='
		    (_cor77,
		     %% Line 3725
		     Name) ->
	      %% Line 3726
	      apply 'is_derivation_blocked'/4
		  (Env, Block, Content, S)
	  %% Line 3727
	  <{'schema_simple_type',_cor78,_cor79,_cor80,_cor81,_cor82,_cor83,_cor84,_cor85,[{LoU,[Content|[]]}|[]]},%% Line 3728
														  SimpleType,%% Line 3728
															     Env,%% Line 3728
																 Block,%% Line 3728
																       S>
	      when let <_cor10> =
		    %% Line 3728
		    call 'erlang':'=:='
			(LoU, 'list')
		in  let <_cor11> =
			%% Line 3728
			call 'erlang':'=:='
			    (LoU, 'union')
		    in  %% Line 3728
			call 'erlang':'or'
			    (_cor10, _cor11) ->
	      %% Line 3729
	      case apply 'resolve'/2
		       (Content, S) of
		<{NewMemType,S2}> when 'true' ->
		    %% Line 3730
		    apply 'derived_or_equal_types'/5
			(NewMemType, SimpleType, Env, Block, S2)
		( <_cor12> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor12})
		  -| ['compiler_generated'] )
	      end
	  %% Line 3731
	  <MemT = {'schema_complex_type',Mem,MemBase,_cor86,_cor87,_cor88,_cor89,_cor90,_cor91,_cor92,_cor93,_cor94,_cor95,_cor96,_cor97},%% Line 3732
																	  {'schema_complex_type',Head,_cor98,_cor99,_cor100,_cor101,_cor102,_cor103,_cor104,_cor105,_cor106,_cor107,_cor108,_cor109,_cor110},%% Line 3732
																																	     Env,%% Line 3732
																																		 Block,%% Line 3732
																																		       S>
	      when let <_cor13> =
		    %% Line 3733
		    call 'erlang':'=='
			(Mem, Head)
		in  let <_cor14> =
			%% Line 3733
			call 'erlang':'=='
			    (MemBase, Head)
		    in  %% Line 3733
			call 'erlang':'or'
			    (_cor13, _cor14) ->
	      %% Line 3734
	      apply 'is_derivation_blocked'/4
		  (Env, Block, _cor96, S)
	  %% Line 3735
	  <MemT,HeadT,_X_Env,_X_Block,S> when 'true' ->
	      %% Line 3736
	      apply 'acc_errs'/2
		  (S, {[],'xmerl_xsd',{'type_of_element_not_derived',MemT,HeadT}})
	end
'is_derivation_blocked'/4 =
    %% Line 3738
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <'schema',_cor9,_cor10,S> when 'true' ->
	      %% Line 3739
	      S
	  %% Line 3740
	  <'instance',['#all'],Derivation,S> when 'true' ->
	      %% Line 3741
	      apply 'acc_errs'/2
		  (S, {'derivation_blocked','#all',Derivation})
	  %% Line 3742
	  <'instance',[],_cor11,S> when 'true' ->
	      %% Line 3743
	      S
	  %% Line 3744
	  <'instance',Block,C = [{Derivation,_cor12}|[]],S> when 'true' ->
	      %% Line 3745
	      case call 'lists':'member'
		       (Derivation, Block) of
		%% Line 3746
		<'true'> when 'true' ->
		    %% Line 3747
		    apply 'acc_errs'/2
			(S, {[],'xmerl_xsd',{'derivation_blocked',Derivation,C}})
		%% Line 3748
		<_cor13> when 'true' ->
		    %% Line 3749
		    S
	      end
	  %% Line 3751
	  <'instance',_X_Block,_cor14,S> when 'true' ->
	      %% Line 3752
	      S
	  ( <_cor8,_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6,_cor5})
		  -| [{'function_name',{'is_derivation_blocked',4}}] )
	    -| ['compiler_generated'] )
	end
'create_attribute'/2 =
    %% Line 3756
    fun (_cor1,_cor0) ->
	%% Line 3757
	case _cor1 of
	  <{Name,_X_Scope,NSName}> when 'true' ->
	      %% Line 3758
	      {'xmlAttribute',Name,[],[],{Name,NSName},[],'undefined',[],_cor0,'undefined'}
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'mk_name'/1 =
    %% Line 3761
    fun (_cor0) ->
	%% Line 3762
	apply 'mk_name'/2
	    (_cor0, [])
'mk_name'/2 =
    %% Line 3763
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],_X_Acc> when 'true' ->
	      %% Line 3764
	      []
	  %% Line 3765
	  <[H|[]],[]> when 'true' ->
	      %% Line 3766
	      H
	  %% Line 3767
	  <[H|[]],Acc> when 'true' ->
	      let <_cor2> =
		  %% Line 3768
		  call 'lists':'concat'
		      ([H|['_'|Acc]])
	      in  %% Line 3768
		  call 'erlang':'list_to_atom'
		      (_cor2)
	  %% Line 3769
	  <[H|T],[]> when 'true' ->
	      %% Line 3770
	      apply 'mk_name'/2
		  (T, [H|[]])
	  %% Line 3771
	  <[H1|T],Acc> when 'true' ->
	      %% Line 3772
	      apply 'mk_name'/2
		  (T, [H1|['_'|Acc]])
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'mk_name',2}}] )
	    -| ['compiler_generated'] )
	end
'cmp_name'/3 =
    %% Line 3774
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{LName,Scope,NS},{_cor7,_cor8,_cor9},_X_S>
	      when let <_cor12> =
		    call 'erlang':'=:='
			(_cor7, LName)
		in  let <_cor10> =
			call 'erlang':'=:='
			    (_cor8, Scope)
		    in  let <_cor11> =
			    call 'erlang':'=:='
				(_cor9, NS)
			in  let <_cor13> =
				call 'erlang':'and'
				    (_cor10, _cor11)
			    in  call 'erlang':'and'
				    (_cor12, _cor13) ->
	      %% Line 3775
	      'true'
	  %% Line 3777
	  <XMLName = {_cor14,Scope,NS},CMName = {_cor15,_cor16,_cor17},S>
	      when let <_cor18> =
		    call 'erlang':'=:='
			(_cor16, Scope)
		in  let <_cor19> =
			call 'erlang':'=:='
			    (_cor17, NS)
		    in  call 'erlang':'and'
			    (_cor18, _cor19) ->
	      %% Line 3778
	      case apply 'load_object'/2
		       ({'element',XMLName}, S) of
		<{El,_X_S2}> when 'true' ->
		    %% Line 3779
		    apply 'cmp_SG_name'/3
			(El, CMName, S)
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 3780
	  <_cor20,_cor21,_cor22> when 'true' ->
	      %% Line 3781
	      'false'
	end
'cmp_SG_name'/3 =
    %% Line 3783
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'schema_element',_cor6,_cor7,_cor8,Name,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19},_cor20,_X_S>
	      when call 'erlang':'=:='
		    (_cor20,
		     Name) ->
	      %% Line 3784
	      'true'
	  %% Line 3785
	  <{'schema_element',_cor21,_cor22,_cor23,SGName,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34},CMName,S> when 'true' ->
	      %% Line 3786
	      apply 'cmp_name'/3
		  (SGName, CMName, S)
	  %% Line 3787
	  <_cor35,_cor36,_cor37> when 'true' ->
	      %% Line 3788
	      'false'
	end
'cmp_any_namespace'/3 =
    %% Line 3792
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{_cor8,_cor9,EIINS},Namespace,_X_S> when 'true' ->
	      %% Line 3793
	      case call 'lists':'member'
		       (EIINS, Namespace) of
		%% Line 3794
		<'true'> when 'true' ->
		    %% Line 3795
		    'true'
		%% Line 3796
		<_cor10> when 'true' ->
		    %% Line 3797
		    case call 'lists':'keysearch'
			     (EIINS, 2, Namespace) of
		      %% Line 3798
		      <{'value',{'not',_cor11}}>
			  when call 'erlang':'=:='
				(_cor11,
				 EIINS) ->
			  %% Line 3799
			  'false'
		      %% Line 3800
		      <_cor12> when 'true' ->
			  %% Line 3801
			  'true'
		    end
	      end
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'cmp_any_namespace',3}}] )
	    -| ['compiler_generated'] )
	end
'at_least_one'/1 =
    %% Line 3805
    fun (_cor0) ->
	case _cor0 of
	  <{_X_Min,Max}>
	      when call 'erlang':'>'
		    (Max,
		     0) ->
	      %% Line 3806
	      'true'
	  %% Line 3807
	  <_cor2> when 'true' ->
	      %% Line 3808
	      'false'
	end
'is_optional'/2 =
    %% Line 3810
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'element',{_cor20,{0,_cor21}}},_X_S> when 'true' ->
	      %% Line 3811
	      'true'
	  %% Line 3812
	  <{'any',{_cor22,{0,_cor23},_cor24}},_X_S> when 'true' ->
	      %% Line 3813
	      'true'
	  %% Line 3814
	  <{MG,{_X_CM,{0,_cor25}}},_X_S>
	      when let <_cor2> =
		    %% Line 3815
		    call 'erlang':'=:='
			(MG, 'all')
		in  let <_cor3> =
			%% Line 3815
			call 'erlang':'=:='
			    (MG, 'sequence')
		    in  let <_cor4> =
			    %% Line 3815
			    call 'erlang':'=:='
				(MG, 'choice')
			in  let <_cor5> =
				%% Line 3815
				call 'erlang':'or'
				    (_cor3, _cor4)
			    in  %% Line 3815
				call 'erlang':'or'
				    (_cor2, _cor5) ->
	      %% Line 3816
	      'true'
	  %% Line 3817
	  <{MG,{CM,_X_Occ}},S>
	      when let <_cor6> =
		    %% Line 3818
		    call 'erlang':'=:='
			(MG, 'all')
		in  let <_cor7> =
			%% Line 3818
			call 'erlang':'=:='
			    (MG, 'sequence')
		    in  let <_cor8> =
			    %% Line 3818
			    call 'erlang':'=:='
				(MG, 'choice')
			in  let <_cor9> =
				%% Line 3818
				call 'erlang':'or'
				    (_cor7, _cor8)
			    in  %% Line 3818
				call 'erlang':'or'
				    (_cor6, _cor9) ->
	      let <_cor15> =
		  %% Line 3819
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor12) ->
				case _cor12 of
				  <[Y|_cor11]> when 'true' ->
				      let <_cor13> =
					  apply 'is_optional'/2
					      (Y, S)
				      in  let <_cor14> =
					      apply 'lc$^0'/1
						  (_cor11)
					  in  ( [_cor13|_cor14]
						-| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor12> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor12})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (CM)
		    -| ['list_comprehension'] )
	      in  %% Line 3819
		  case call 'lists':'member'
			   ('false', _cor15) of
		    %% Line 3820
		    <'true'> when 'true' ->
			%% Line 3821
			'false'
		    %% Line 3822
		    <_cor26> when 'true' ->
			'true'
		  end
	  %% Line 3824
	  <{'group',{_cor27,{0,_cor28}}},_X_S> when 'true' ->
	      %% Line 3825
	      'true'
	  %% Line 3826
	  <G = {'group',_cor29},S> when 'true' ->
	      %% Line 3827
	      case apply 'resolve'/2
		       (G, S) of
		%% Line 3828
		<{{'schema_group',_cor30,_cor31,_cor32,[],_cor33},_cor34}> when 'true' ->
		    %% Line 3829
		    'true'
		%% Line 3830
		<{{'schema_group',_cor35,_cor36,_cor37,[CM|[]],_cor38},_cor39}> when 'true' ->
		    %% Line 3831
		    apply 'is_optional'/2
			(CM, S)
		( <_cor17> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor17})
		  -| ['compiler_generated'] )
	      end
	  %% Line 3833
	  <_cor40,_cor41> when 'true' ->
	      %% Line 3834
	      'false'
	end
'acc_errs'/2 =
    %% Line 3838
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <S = {'xsd_state',_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,Errs},ErrMsg> when 'true' ->
	      let <_rec304> =
		  %% Line 3839
		  [ErrMsg|Errs]
	      in  %% Line 3839
		  call 'erlang':'setelement'
		      (33, S, _rec304)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'acc_errs',2}}] )
	    -| ['compiler_generated'] )
	end
'error_path'/2 =
    %% Line 3842
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[H|_X_T],Top>
	      when let <_cor2> =
		    call 'erlang':'=:='
			(H, {'xmlElement','undefined',[],[],{'xmlNamespace',[],[]},[],'undefined',[],[],[],[],'undeclared'})
		in  let <_cor3> =
			call 'erlang':'=:='
			    (H, {'xmlText',[],'undefined',[],'undefined','text'})
		    in  call 'erlang':'or'
			    (_cor2, _cor3) ->
	      %% Line 3843
	      apply 'error_path'/2
		  (H, Top)
	  %% Line 3844
	  <[_X_H|T],Top> when 'true' ->
	      %% Line 3845
	      apply 'error_path'/2
		  (T, Top)
	  %% Line 3846
	  <{'xmlElement',_cor6,_cor7,_cor8,_cor9,Ps,Pos,_cor10,_cor11,_cor12,_cor13,_cor14},Top> when 'true' ->
	      %% Line 3847
	      apply 'error_path'/3
		  (Ps, Pos, Top)
	  %% Line 3848
	  <{'xmlAttribute',_cor15,_cor16,_cor17,_cor18,Ps,Pos,_cor19,_cor20,_cor21},Top> when 'true' ->
	      %% Line 3849
	      apply 'error_path'/3
		  (Ps, Pos, Top)
	  %% Line 3850
	  <{'xmlText',Ps,Pos,_cor22,_cor23,_cor24},Top> when 'true' ->
	      %% Line 3851
	      apply 'error_path'/3
		  (Ps, Pos, Top)
	  %% Line 3852
	  <_cor25,_cor26> when 'true' ->
	      %% Line 3853
	      []
	end
'error_path'/3 =
    %% Line 3854
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],Pos,Top>
	      when call 'erlang':'is_integer'
		    (Pos) ->
	      %% Line 3855
	      apply 'mk_xpath_path'/1
		  ([{Top,Pos}|[]])
	  %% Line 3856
	  <[],_cor6,Top> when 'true' ->
	      %% Line 3857
	      Top
	  %% Line 3858
	  <Nodes,_cor7,_cor8> when 'true' ->
	      %% Line 3859
	      apply 'mk_xpath_path'/1
		  (Nodes)
	end
'mk_xpath_path'/1 =
    %% Line 3861
    fun (_cor0) ->
	let <Slash> =
	    %% Line 3863
	    ( fun (_cor3,_cor2,_cor1) ->
		  case <_cor3,_cor2,_cor1> of
		    <[H1|[H2|T]],Fun,Acc> when 'true' ->
			apply Fun
			    ([H2|T], Fun, [[47]|[H1|Acc]])
		    %% Line 3864
		    <[H1|[]],_cor16,Acc> when 'true' ->
			[H1|Acc]
		    %% Line 3865
		    <[],_cor17,Acc> when 'true' ->
			Acc
		    ( <_cor6,_cor5,_cor4> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor6,_cor5,_cor4})
			    -| [{'function_name',{'-mk_xpath_path/1-fun-0-',3}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-mk_xpath_path/1-fun-0-'}}] )
	in  let <_cor13> =
		%% Line 3867
		( letrec
		      'lc$^0'/1 =
			  fun (_cor10) ->
			      case _cor10 of
				<[{A,B}|_cor9]> when 'true' ->
				    let <_cor11> =
					call 'lists':'concat'
					    ([A|[[91]|[B|[[93]]]]])
				    in  let <_cor12> =
					    apply 'lc$^0'/1
						(_cor9)
					in  ( [_cor11|_cor12]
					      -| ['compiler_generated'] )
				( <[_cor8|_cor9]> when 'true' ->
				      apply 'lc$^0'/1
					  (_cor9)
				  -| ['compiler_generated'] )
				<[]> when 'true' ->
				    []
				( <_cor10> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_cor10})
					-| [{'function_name',{'lc$^0',1}}] )
				  -| ['compiler_generated'] )
			      end
		  in  apply 'lc$^0'/1
			  (_cor0)
		  -| ['list_comprehension'] )
	    in  let <_cor14> =
		    %% Line 3867
		    apply Slash
			(_cor13, Slash, [])
		in  %% Line 3867
		    call 'lists':'flatten'
			(_cor14)
'resolve'/3 =
    %% Line 3869
    fun (_cor2,_cor1,_cor0) ->
	%% Line 3870
	apply 'explicit_type'/3
	    (_cor2, _cor1, _cor0)
'resolve'/2 =
    %% Line 3872
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[H|[]],S> when 'true' ->
	      %% Line 3873
	      apply 'resolve'/2
		  (H, S)
	  %% Line 3874
	  <Any = {'any',_cor26},S> when 'true' ->
	      %% Line 3875
	      {Any,S}
	  %% Line 3876
	  <Any = {'anyAttribute',_cor27},S> when 'true' ->
	      %% Line 3877
	      {Any,S}
	  %% Line 3878
	  <Any = {'anyType',_cor28},S> when 'true' ->
	      %% Line 3879
	      {Any,S}
	  %% Line 3880
	  <Seq = {'sequence',_cor29},S> when 'true' ->
	      %% Line 3881
	      {Seq,S}
	  %% Line 3882
	  <Choice = {'choice',_cor30},S> when 'true' ->
	      %% Line 3883
	      {Choice,S}
	  %% Line 3884
	  <{'simple_or_complex_Type',QN},S> when 'true' ->
	      %% Line 3886
	      case apply 'resolve'/2
		       ({'simpleType',QN}, S) of
		%% Line 3887
		<Res = {{'schema_simple_type',_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39},_X_S1}> when 'true' ->
		    %% Line 3888
		    Res
		%% Line 3889
		<{[],_X_S}> when 'true' ->
		    %% Line 3890
		    case apply 'load_object'/2
			     ({'complexType',QN}, S) of
		      %% Line 3891
		      <{[],_cor40}> when 'true' ->
			  %% Line 3894
			  {[],S}
		      %% Line 3895
		      <T> when 'true' ->
			  %% Line 3896
			  T
		    end
		%% Line 3898
		<T> when 'true' ->
		    %% Line 3899
		    T
	      end
	  %% Line 3901
	  <{'complexType',{'anyType',_cor41,_cor42}},S> when 'true' ->
	      %% Line 3902
	      {{'anyType',[]},S}
	  %% Line 3903
	  <{'simpleType',{'anyType',_cor43,_cor44}},S> when 'true' ->
	      %% Line 3904
	      {{'anyType',[]},S}
	  %% Line 3905
	  <ST = {'simpleType',NameNS = {_cor45,_cor46,_cor47}},S> when 'true' ->
	      %% Line 3906
	      case apply 'load_object'/2
		       (ST, S) of
		%% Line 3907
		<{[],_X_S}> when 'true' ->
		    case call 'xmerl_lib':'is_builtin_simple_type'
			     (NameNS) of
		      %% Line 3908
		      <'true'> when 'true' ->
			  %% Line 3909
			  {ST,S}
		      %% Line 3910
		      <_cor48> when 'true' ->
			  %% Line 3911
			  {[],S}
		    end
		%% Line 3913
		<Obj> when 'true' ->
		    %% Line 3915
		    Obj
	      end
	  %% Line 3917
	  <{'substitutionGroup',QName},S> when 'true' ->
	      %% Line 3919
	      case apply 'load_object'/2
		       ({'element',QName}, S) of
		%% Line 3920
		<Ret = {[],_X_S}> when 'true' ->
		    Ret
		%% Line 3921
		<{{'schema_element',_cor49,[Type|[]],_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62},S2}> when 'true' ->
		    %% Line 3922
		    case Type of
		      %% Line 3923
		      <{'simple_or_complex_Type',_cor63}> when 'true' ->
			  %% Line 3924
			  apply 'resolve'/2
			      (Type, S2)
		      %% Line 3925
		      <_cor64> when 'true' ->
			  %% Line 3926
			  {Type,S2}
		    end
		%% Line 3928
		<{{'schema_element',_cor65,Type,_cor66,_cor67,_cor68,_cor69,_cor70,_cor71,_cor72,_cor73,_cor74,_cor75,_cor76,_cor77,_cor78},S2}> when 'true' ->
		    %% Line 3929
		    {Type,S2}
		( <_cor7> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor7})
		  -| ['compiler_generated'] )
	      end
	  %% Line 3931
	  <{'extension',{BaseType,CM}},S> when 'true' ->
	      %% Line 3932
	      case call 'xmerl_lib':'is_builtin_simple_type'
		       (BaseType) of
		%% Line 3933
		<'true'> when 'true' ->
		    %% Line 3934
		    {{'simpleType',BaseType},S}
		%% Line 3935
		<_cor79> when 'true' ->
		    %% Line 3936
		    case apply 'resolve'/2
			     ({'simple_or_complex_Type',BaseType}, S) of
		      %% Line 3937
		      <{ST = {'schema_simple_type',_cor80,_cor81,_cor82,_cor83,_cor84,_cor85,_cor86,_cor87,_cor88},_cor89}> when 'true' ->
			  %% Line 3938
			  {ST,S}
		      %% Line 3940
		      <{CT = {'schema_complex_type',_cor90,_cor91,_cor92,_cor93,_cor94,_cor95,_cor96,_cor97,_cor98,_cor99,_cor100,_cor101,C,_cor102},_cor103}> when 'true' ->
			  %% Line 3941
			  case apply 'extend_type'/3
				   (C, CM, S) of
			    <{NewC,S2}> when 'true' ->
				let <_cor11> =
				    %% Line 3942
				    call 'erlang':'setelement'
					(14, CT, NewC)
				in  %% Line 3942
				    {_cor11,S2}
			    ( <_cor8> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor8})
			      -| ['compiler_generated'] )
			  end
		      %% Line 3943
		      <T> when 'true' ->
			  T
		    end
	      end
	  %% Line 3946
	  <{'restriction',{BaseType,CM}},S> when 'true' ->
	      %% Line 3947
	      case call 'xmerl_lib':'is_builtin_simple_type'
		       (BaseType) of
		%% Line 3948
		<'true'> when 'true' ->
		    %% Line 3949
		    {{'simpleType',BaseType},S}
		%% Line 3950
		<_cor119> when 'true' ->
		    %% Line 3951
		    case apply 'resolve'/2
			     ({'simple_or_complex_Type',BaseType}, S) of
		      %% Line 3952
		      <{ST = {'schema_simple_type',_cor120,_cor121,_cor122,_cor123,_cor124,_cor125,_cor126,_cor127,C},_cor128}> when 'true' ->
			  %% Line 3953
			  case apply 'restrict_simple_type'/4
				   (C, CM, BaseType, S) of
			    <{NewContent,S2}> when 'true' ->
				let <_cor17> =
				    %% Line 3954
				    call 'erlang':'setelement'
					(10, ST, NewContent)
				in  %% Line 3954
				    {_cor17,S2}
			    ( <_cor14> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor14})
			      -| ['compiler_generated'] )
			  end
		      %% Line 3956
		      <{CT = {'schema_complex_type',_cor139,_cor140,_cor141,_cor142,_cor143,_cor144,_cor145,_cor146,_cor147,_cor148,_cor149,_cor150,C,_cor151},_cor152}> when 'true' ->
			  %% Line 3957
			  case apply 'restrict_type'/4
				   (C, CM, BaseType, S) of
			    <{NewContent,S2}> when 'true' ->
				let <_cor21> =
				    %% Line 3958
				    call 'erlang':'setelement'
					(14, CT, NewContent)
				in  %% Line 3958
				    {_cor21,S2}
			    ( <_cor18> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor18})
			      -| ['compiler_generated'] )
			  end
		      %% Line 3959
		      <T> when 'true' ->
			  T
		    end
	      end
	  %% Line 3962
	  <'optional_text',S> when 'true' ->
	      %% Line 3963
	      {'optional_text',S}
	  %% Line 3964
	  <E,S> when 'true' ->
	      %% Line 3966
	      apply 'load_object'/2
		  (E, S)
	end
'explicit_type'/3 =
    %% Line 3973
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <XSDType,InstanceEl = {'xmlElement',_cor13,_cor14,_cor15,NS,_cor16,_cor17,Atts,_cor18,_cor19,_cor20,_cor21},S> when 'true' ->
	      %% Line 3974
	      case apply 'get_instance_type'/2
		       (NS, Atts) of
		%% Line 3975
		<'false'> when 'true' ->
		    %% Line 3976
		    apply 'resolve'/2
			(XSDType, S)
		%% Line 3977
		<{'ok',Name}> when 'true' ->
		    %% Line 3980
		    case S of
		      <{'xsd_state',_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53}> when 'true' ->
			  let <_cor5> =
			      call 'erlang':'setelement'
				  (8, S, [])
			  in  let <QName> =
				  apply 'mk_EII_QName'/3
				      (Name, InstanceEl, _cor5)
			      in  %% Line 3985
				  case apply 'resolve'/2
					   ({'simple_or_complex_Type',QName}, S) of
				    <{XsiType,S2}> when 'true' ->
					%% Line 3986
					case apply 'legal_substitution'/3
						 (InstanceEl, XsiType, S2) of
					  <{_X_Blocks,S3}> when 'true' ->
					      %% Line 3988
					      {XsiType,S3}
					  ( <_cor8> when 'true' ->
						primop 'match_fail'
						    ({'badmatch',_cor8})
					    -| ['compiler_generated'] )
					end
				    ( <_cor7> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor7})
				      -| ['compiler_generated'] )
				  end
		      ( <_cor54> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','xsd_state'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		( <_cor9> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor9})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10})
		  -| [{'function_name',{'explicit_type',3}}] )
	    -| ['compiler_generated'] )
	end
'get_instance_type'/2 =
    %% Line 3992
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'xmlNamespace',_cor8,Nodes},Atts> when 'true' ->
	      %% Line 3993
	      case apply 'keyNsearch'/4
		       ('http://www.w3.org/2001/XMLSchema-instance', 2, Nodes, []) of
		%% Line 3994
		<{Prefix,_cor9}> when 'true' ->
		    let <_cor2> =
			%% Line 3995
			call 'erlang':'++'
			    (Prefix, [58|[116|[121|[112|[101]]]]])
		    in  let <TypeAtt> =
			    %% Line 3995
			    call 'erlang':'list_to_atom'
				(_cor2)
			in  %% Line 3996
			    case apply 'keyNsearch'/4
				     (TypeAtt, 2, Atts, []) of
			      %% Line 3997
			      <{'xmlAttribute',_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,Value,_cor17}> when 'true' ->
				  %% Line 3998
				  {'ok',Value}
			      %% Line 3999
			      <_cor18> when 'true' ->
				  'false'
			    end
		%% Line 4001
		<_cor19> when 'true' ->
		    %% Line 4002
		    'false'
	      end
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6})
		  -| [{'function_name',{'get_instance_type',2}}] )
	    -| ['compiler_generated'] )
	end
'merge_derived_types'/4 =
    %% Line 4005
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 4006
	apply 'merge_derived_types'/5
	    (_cor3, _cor2, [], _cor1, _cor0)
'merge_derived_types'/5 =
    %% Line 4007
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Type,_cor13,_X_Blocks,_X_Mode,S>
	      when call 'erlang':'=:='
		    (_cor13,
		     Type) ->
	      %% Line 4008
	      {Type,S}
	  %% Line 4009
	  <XSDType,InstType,Blocks,Mode,S> when 'true' ->
	      let <_cor5> =
		  catch
		      %% Line 4010
		      apply 'merge_derived_types2'/5
			  (XSDType, InstType, Blocks, Mode, S)
	      in  %% Line 4010
		  case _cor5 of
		    %% Line 4011
		    <{'EXIT',Reason}> when 'true' ->
			let <_cor6> =
			    %% Line 4012
			    apply 'acc_errs'/2
				(S, {[],'xmerl_xsd',{'internal_error','merge_derived_types',Reason}})
			in  %% Line 4012
			    {InstType,_cor6}
		    %% Line 4013
		    <{'error',S2}> when 'true' ->
			%% Line 4014
			{InstType,S2}
		    %% Line 4015
		    <{MergedType,S2}> when 'true' ->
			do  %% Line 4016
			    apply 'save_merged_type'/2
				(MergedType, S2)
			    %% Line 4017
			    {MergedType,S2}
		    ( <_cor7> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor7})
		      -| ['compiler_generated'] )
		  end
	end
'merge_derived_types2'/5 =
    %% Line 4020
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <XSDType = {'schema_complex_type',_cor117,_cor118,_cor119,_cor120,_cor121,_cor122,_cor123,_cor124,_cor125,_cor126,_cor127,_cor128,_cor129,_cor130},InstType = %% Line 4021
																					{'schema_complex_type',_cor131,_cor132,_cor133,_cor134,_cor135,_cor136,_cor137,_cor138,_cor139,_cor140,_cor141,_cor142,_cor143,_cor144},%% Line 4021
																																						Blocks,%% Line 4021
																																						       Mode,%% Line 4021
																																							    S> when 'true' ->
	      %% Line 4037
	      case _cor143 of
		%% Line 4038
		<[{'extension',{BaseTypeName,CM}}|[]]> when 'true' ->
		    let <_cor7> =
			%% Line 4043
			apply 'allowed_derivation'/3
			    ('extension', Blocks, S)
		    in  %% Line 4039
			case %% Line 4040
			     apply 'extend_attributes'/6
				 (_cor128, _cor142, %% Line 4042
						    BaseTypeName, %% Line 4042
								  CM, %% Line 4042
								      Mode, _cor7) of
			  <{ExtendedAtts,S2}> when 'true' ->
			      %% Line 4044
			      case apply 'compare_base_types'/3
				       (BaseTypeName, XSDType, S2) of
				%% Line 4045
				<'ok'> when 'true' ->
				    %% Line 4046
				    case %% Line 4047
					 apply 'extend_type'/3
					     (_cor129, CM, S2) of
				      <{NewContent,S3}> when 'true' ->
					  let <_cor17> =
					      %% Line 4049
					      call 'erlang':'setelement'
						  (14, InstType, NewContent)
					  in  let <_cor19> =
						  %% Line 4048
						  call 'erlang':'setelement'
						      (13, _cor17, ExtendedAtts)
					      in  %% Line 4048
						  {_cor19,%% Line 4049
							  S3}
				      ( <_cor15> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_cor15})
					-| ['compiler_generated'] )
				    end
				%% Line 4050
				<Err> when 'true' ->
				    let <_cor20> =
					%% Line 4051
					apply 'acc_errs'/2
					    (S2, Err)
				    in  %% Line 4051
					{'error',_cor20}
			      end
			  ( <_cor12> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor12})
			    -| ['compiler_generated'] )
			end
		%% Line 4053
		<[{'restriction',{BaseTypeName,CM}}|[]]> when 'true' ->
		    let <_cor22> =
			%% Line 4057
			apply 'allowed_derivation'/3
			    ('restriction', Blocks, S)
		    in  %% Line 4054
			case %% Line 4055
			     apply 'restrict_attributes'/3
				 (_cor128, _cor142, _cor22) of
			  <{RestrictedAtts,S2}> when 'true' ->
			      %% Line 4058
			      case apply 'compare_base_types'/3
				       (BaseTypeName, XSDType, S2) of
				%% Line 4059
				<'ok'> when 'true' ->
				    let <_cor35> =
					%% Line 4061
					case _cor141 of
					  %% Line 4062
					  <'simple'> when 'true' ->
					      %% Line 4063
					      apply 'restrict_simple_type'/4
						  (_cor129, CM, BaseTypeName, S2)
					  %% Line 4064
					  <_cor272> when 'true' ->
					      %% Line 4065
					      apply 'restrict_type'/4
						  (_cor129, CM, BaseTypeName, S2)
					end
				    in  %% Line 4060
					case _cor35 of
					  <{NewContent,S3}> when 'true' ->
					      let <_cor38> =
						  %% Line 4068
						  call 'erlang':'setelement'
						      (14, InstType, NewContent)
					      in  let <_cor40> =
						      %% Line 4067
						      call 'erlang':'setelement'
							  (13, _cor38, RestrictedAtts)
						  in  %% Line 4067
						      {_cor40,%% Line 4068
							      S3}
					  ( <_cor36> when 'true' ->
						primop 'match_fail'
						    ({'badmatch',_cor36})
					    -| ['compiler_generated'] )
					end
				%% Line 4069
				<Err> when 'true' ->
				    let <_cor41> =
					%% Line 4070
					apply 'acc_errs'/2
					    (S, Err)
				    in  %% Line 4070
					{'error',_cor41}
			      end
			  ( <_cor27> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor27})
			    -| ['compiler_generated'] )
			end
		%% Line 4072
		<Other> when 'true' ->
		    let <_cor43> =
			%% Line 4073
			apply 'acc_errs'/2
			    (S, {[],'xmerl_xsd',{'unexpected_type',Other}})
		    in  %% Line 4073
			{'error',_cor43}
	      end
	  %% Line 4075
	  <XSDType = {'schema_simple_type',_cor302,_cor303,_cor304,_cor305,_cor306,_cor307,_cor308,_cor309,_cor310},InstType = %% Line 4076
															       {'schema_simple_type',_cor311,_cor312,_cor313,_cor314,_cor315,_cor316,_cor317,_cor318,_cor319},%% Line 4076
																											      Blocks,%% Line 4076
																												     _X_Mode,%% Line 4076
																													     S> when 'true' ->
	      %% Line 4077
	      case _cor319 of
		%% Line 4078
		<[{'restriction',{BaseTypeName,CM}}|[]]> when 'true' ->
		    %% Line 4079
		    case apply 'compare_base_types'/3
			     (BaseTypeName, XSDType, S) of
		      %% Line 4080
		      <'ok'> when 'true' ->
			  %% Line 4082
			  case %% Line 4083
			       apply 'restrict_simple_type'/4
				   (_cor310, CM, %% Line 4084
						 BaseTypeName, %% Line 4084
							       S) of
			    <{NewContent,S2}> when 'true' ->
				let <_cor53> =
				    %% Line 4085
				    call 'erlang':'setelement'
					(10, InstType, NewContent)
				in  let <_cor50> =
					%% Line 4086
					apply 'allowed_derivation'/3
					    ('restriction', Blocks, S2)
				    in  %% Line 4085
					{_cor53,_cor50}
			    ( <_cor49> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor49})
			      -| ['compiler_generated'] )
			  end
		      %% Line 4087
		      <Err> when 'true' ->
			  let <_cor54> =
			      %% Line 4089
			      apply 'acc_errs'/2
				  (S, Err)
			  in  let <_cor55> =
				  %% Line 4088
				  apply 'allowed_derivation'/3
				      ('restriction', Blocks, _cor54)
			      in  %% Line 4088
				  {'error',_cor55}
		    end
		%% Line 4091
		<Other> when 'true' ->
		    let <_cor57> =
			%% Line 4092
			apply 'acc_errs'/2
			    (S, {'unexpected_type',Other})
		    in  %% Line 4092
			{'error',_cor57}
	      end
	  %% Line 4094
	  <XSDType = {'schema_simple_type',_cor348,_cor349,_cor350,_cor351,_cor352,_cor353,_cor354,_cor355,XSDContent},InstType = %% Line 4095
																  {'schema_complex_type',_cor356,_cor357,_cor358,_cor359,_cor360,_cor361,_cor362,_cor363,_cor364,_cor365,_cor366,_cor367,_cor368,_cor369},%% Line 4095
																																	  Blocks,%% Line 4095
																																		 _X_Mode,%% Line 4095
																																			 S> when 'true' ->
	      %% Line 4097
	      case _cor368 of
		%% Line 4098
		<[{'extension',{BaseTypeName,CM}}|[]]> when 'true' ->
		    %% Line 4099
		    case apply 'compare_base_types'/3
			     (BaseTypeName, XSDType, S) of
		      %% Line 4100
		      <'ok'> when 'true' ->
			  let <_cor61> =
			      %% Line 4102
			      case <> of
				<>
				    when call 'erlang':'=:='
					  (CM,
					   []) ->
				    {XSDContent,S}
				%% Line 4103
				<> when 'true' ->
				    apply 'extend_type'/3
					(XSDContent, CM, S)
			      end
			  in  %% Line 4101
			      case _cor61 of
				<{NewContent,S2}> when 'true' ->
				    let <_cor66> =
					%% Line 4105
					call 'erlang':'setelement'
					    (14, InstType, NewContent)
				    in  let <_cor63> =
					    %% Line 4106
					    apply 'allowed_derivation'/3
						('extension', Blocks, S2)
					in  %% Line 4105
					    {_cor66,_cor63}
				( <_cor62> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor62})
				  -| ['compiler_generated'] )
			      end
		      %% Line 4107
		      <Err> when 'true' ->
			  let <_cor67> =
			      %% Line 4109
			      apply 'acc_errs'/2
				  (S, Err)
			  in  let <_cor68> =
				  %% Line 4108
				  apply 'allowed_derivation'/3
				      ('extension', Blocks, _cor67)
			      in  %% Line 4108
				  {'error',_cor68}
		    end
		%% Line 4111
		<[{'restriction',{BaseTypeName,_X_CM}}|[]]>
		    when %% Line 4112
		      call 'erlang':'=:='
			  (_cor366,
			   'simple') ->
		    %% Line 4113
		    case apply 'compare_base_types'/3
			     (BaseTypeName, XSDType, S) of
		      %% Line 4114
		      <'ok'> when 'true' ->
			  let <_cor76> =
			      %% Line 4116
			      apply 'allowed_derivation'/3
				  ('restriction', Blocks, S)
			  in  %% Line 4115
			      {InstType,_cor76}
		      %% Line 4117
		      <Err> when 'true' ->
			  let <_cor77> =
			      %% Line 4119
			      apply 'acc_errs'/2
				  (S, Err)
			  in  let <_cor78> =
				  %% Line 4118
				  apply 'allowed_derivation'/3
				      ('extension', Blocks, _cor77)
			      in  %% Line 4118
				  {'error',_cor78}
		    end
		%% Line 4121
		<Other> when 'true' ->
		    let <_cor80> =
			%% Line 4122
			apply 'acc_errs'/2
			    (S, {[],'xmerl_xsd',{'unexpected_type',Other}})
		    in  %% Line 4122
			{'error',_cor80}
	      end
	  %% Line 4124
	  <_X_XSDType = {'simpleType',BuiltInType},InstType = %% Line 4125
							      {'schema_complex_type',_cor399,_cor400,_cor401,_cor402,_cor403,_cor404,_cor405,_cor406,_cor407,_cor408,_cor409,_cor410,Content,_cor411},%% Line 4126
																								      Blocks,%% Line 4126
																									     _X_Mode,%% Line 4126
																										     S> when 'true' ->
	      %% Line 4127
	      case Content of
		%% Line 4128
		<[{'extension',{_cor412,CM}}|[]]>
		    when call 'erlang':'=:='
			  (_cor412,
			   BuiltInType) ->
		    %% Line 4129
		    case apply 'extend_type'/3
			     ([], CM, S) of
		      <{NewContent,S2}> when 'true' ->
			  let <_cor85> =
			      %% Line 4131
			      call 'erlang':'setelement'
				  (14, InstType, NewContent)
			  in  let <_cor87> =
				  %% Line 4130
				  call 'erlang':'setelement'
				      (3, _cor85, BuiltInType)
			      in  let <_cor83> =
				      %% Line 4132
				      apply 'allowed_derivation'/3
					  ('extension', Blocks, S2)
				  in  %% Line 4130
				      {_cor87,_cor83}
		      ( <_cor82> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor82})
			-| ['compiler_generated'] )
		    end
		%% Line 4133
		<[{'restriction',{_cor428,CM}}|[]]>
		    when call 'erlang':'=:='
			  (_cor428,
			   BuiltInType) ->
		    %% Line 4134
		    case apply 'restrict_simple_type'/4
			     ([], CM, BuiltInType, S) of
		      <{NewContent,S2}> when 'true' ->
			  let <_cor91> =
			      %% Line 4136
			      call 'erlang':'setelement'
				  (14, InstType, NewContent)
			  in  let <_cor93> =
				  %% Line 4135
				  call 'erlang':'setelement'
				      (3, _cor91, BuiltInType)
			      in  let <_cor89> =
				      %% Line 4137
				      apply 'allowed_derivation'/3
					  ('restriction', Blocks, S2)
				  in  %% Line 4135
				      {_cor93,_cor89}
		      ( <_cor88> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor88})
			-| ['compiler_generated'] )
		    end
		%% Line 4138
		<Other> when 'true' ->
		    let <_cor94> =
			%% Line 4139
			apply 'acc_errs'/2
			    (S, {[],'xmerl_xsd',{'unexpected_content',Other,InstType}})
		    in  %% Line 4139
			{'error',_cor94}
	      end
	  %% Line 4141
	  <_X_XSDType = {'anyType',_cor444},InstType,Blocks,_X_Mode,S> when 'true' ->
	      %% Line 4142
	      case apply 'type_content'/1
		       (InstType) of
		%% Line 4143
		<[{'restriction',{_X_BaseTypeName,CM}}|[]]> when 'true' ->
		    let <_cor97> =
			%% Line 4144
			apply 'set_type_content'/2
			    (InstType, CM)
		    in  let <_cor96> =
			    %% Line 4145
			    apply 'allowed_derivation'/3
				('restriction', Blocks, S)
			in  %% Line 4144
			    {_cor97,_cor96}
		%% Line 4146
		<Other> when 'true' ->
		    let <_cor98> =
			%% Line 4147
			apply 'acc_errs'/2
			    (S, {[],'xmerl_xsd',{'unexpected_content',Other,InstType}})
		    in  %% Line 4147
			{'error',_cor98}
	      end
	  %% Line 4149
	  <{'simpleType',BuiltInType},InstType = %% Line 4150
						 {'schema_simple_type',_cor445,_cor446,_cor447,_cor448,_cor449,_cor450,_cor451,_cor452,Content},%% Line 4151
																		Blocks,%% Line 4151
																		       _X_Mode,%% Line 4151
																			       S> when 'true' ->
	      %% Line 4152
	      case Content of
		%% Line 4153
		<[{'restriction',{_cor453,CM}}|[]]>
		    when call 'erlang':'=:='
			  (_cor453,
			   BuiltInType) ->
		    let <_cor102> =
			%% Line 4155
			call 'erlang':'setelement'
			    (10, InstType, CM)
		    in  let <_cor104> =
			    %% Line 4154
			    call 'erlang':'setelement'
				(4, _cor102, BuiltInType)
			in  let <_cor100> =
				%% Line 4156
				apply 'allowed_derivation'/3
				    ('restriction', Blocks, S)
			    in  %% Line 4154
				{_cor104,_cor100}
		%% Line 4157
		<Other> when 'true' ->
		    let <_cor105> =
			%% Line 4158
			apply 'acc_errs'/2
			    (S, {[],'xmerl_xsd',{'unexpected_content',Other,InstType}})
		    in  %% Line 4158
			{'error',_cor105}
	      end
	  %% Line 4160
	  <XSDType,InstType,Blocks,Mode,S> when 'true' ->
	      let <_cor108> =
		  %% Line 4161
		  apply 'variety_type'/2
		      (XSDType, S)
	      in  let <_cor107> =
		      %% Line 4161
		      apply 'variety_type'/2
			  (InstType, S)
		  in  %% Line 4161
		      case <_cor108,_cor107> of
			%% Line 4162
			<_cor464,_cor465>
			    when let <_cor466> =
				  call 'erlang':'=:='
				      (_cor464, XSDType)
			      in  let <_cor467> =
				      call 'erlang':'=:='
					  (_cor465, InstType)
				  in  call 'erlang':'and'
					  (_cor466, _cor467) ->
			    let <_cor109> =
				%% Line 4163
				apply 'acc_errs'/2
				    (S, {[],'xmerl_xsd',{'unexpected_type',XSDType,InstType}})
			    in  %% Line 4163
				{'error',_cor109}
			%% Line 4164
			<_X_XSDType2,InstType2> when 'true' ->
			    %% Line 4165
			    case apply 'allowed_derivation'/3
				     ('substitution', Blocks, S) of
			      %% Line 4166
			      <_cor468>
				  when call 'erlang':'=:='
					(_cor468,
					 S) ->
				  %% Line 4167
				  apply 'merge_derived_types2'/5
				      (XSDType, InstType2, Blocks, Mode, S)
			      %% Line 4168
			      <S2> when 'true' ->
				  %% Line 4169
				  {'error',S2}
			    end
		      end
	end
'variety_type'/2 =
    %% Line 4173
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'schema_simple_type',_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,'list',[{'list',[Type|[]]}|[]]},S> when 'true' ->
	      %% Line 4174
	      case apply 'resolve'/2
		       (Type, S) of
		<{VarietyType,_cor22}> when 'true' ->
		    %% Line 4175
		    VarietyType
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 4176
	  <{'schema_simple_type',_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,'union',[{'union',Types}|[]]},S> when 'true' ->
	      %% Line 4177
	      ( letrec
		    'lc$^1'/1 =
			fun (_cor11) ->
			    case _cor11 of
			      <[{T,_cor30}|_cor4]> when 'true' ->
				  let <_cor12> =
				      apply 'lc$^1'/1
					  (_cor4)
				  in  ( [T|_cor12]
					-| ['compiler_generated'] )
			      ( <[_cor3|_cor4]> when 'true' ->
				    apply 'lc$^1'/1
					(_cor4)
				-| ['compiler_generated'] )
			      <[]> when 'true' ->
				  []
			      ( <_cor11> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_cor11})
				      -| [{'function_name',{'lc$^1',1}}] )
				-| ['compiler_generated'] )
			    end
		in  let <_cor10> =
			( letrec
			      'lc$^0'/1 =
				  fun (_cor7) ->
				      case _cor7 of
					<[VarietyType|_cor6]> when 'true' ->
					    let <_cor8> =
						apply 'resolve'/2
						    (VarietyType, S)
					    in  let <_cor9> =
						    apply 'lc$^0'/1
							(_cor6)
						in  ( [_cor8|_cor9]
						      -| ['compiler_generated'] )
					<[]> when 'true' ->
					    []
					( <_cor7> when 'true' ->
					      ( primop 'match_fail'
						    ({'function_clause',_cor7})
						-| [{'function_name',{'lc$^0',1}}] )
					  -| ['compiler_generated'] )
				      end
			  in  apply 'lc$^0'/1
				  (Types)
			  -| ['list_comprehension'] )
		    in  apply 'lc$^1'/1
			    (_cor10)
		-| ['list_comprehension'] )
	  %% Line 4178
	  <Type,_X_S> when 'true' ->
	      %% Line 4179
	      Type
	end
'allowed_derivation'/3 =
    %% Line 4181
    fun (_cor2,_cor1,_cor0) ->
	_cor0
'legal_substitution'/3 =
    %% Line 4194
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <El = {'xmlElement',ElName,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17},XsiType,S> when 'true' ->
	      let <QName> =
		  %% Line 4200
		  apply 'mk_EII_QName'/3
		      (ElName, El, S)
	      in  %% Line 4201
		  case apply 'load_object'/2
			   ({'element',QName}, S) of
		    <{HeadElement,_cor18}> when 'true' ->
			%% Line 4203
			apply 'legal_substitution2'/3
			    (HeadElement, XsiType, S)
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor4})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'legal_substitution',3}}] )
	    -| ['compiler_generated'] )
	end
'legal_substitution2'/3 =
    %% Line 4204
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'schema_element',_cor11,Type,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,Bl,_cor23},XsiType,S> when 'true' ->
	      %% Line 4205
	      case apply 'resolve'/2
		       (Type, S) of
		<{HeadType,_cor24}> when 'true' ->
		    %% Line 4206
		    ( case S of
			( <( {'xsd_state',_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_rec329,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55}
			     -| ['compiler_generated'] )> when 'true' ->
			      let <Block> =
				  apply 'blocking'/2
				      (Bl, _rec329)
			      in  let <S2> =
				      %% Line 4207
				      apply 'derived_or_equal_types'/5
					  (XsiType, HeadType, 'instance', Block, S)
				  in  %% Line 4208
				      {Block,S2}
			  -| ['compiler_generated'] )
			( <_cor56> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','xsd_state'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'legal_substitution2',3}}] )
	    -| ['compiler_generated'] )
	end
'compare_base_types'/3 =
    %% Line 4210
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <QName,{'schema_complex_type',_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19},_X_S>
	      when call 'erlang':'=:='
		    (_cor6,
		     QName) ->
	      %% Line 4211
	      'ok'
	  %% Line 4212
	  <QName1,{'schema_complex_type',QName2,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32},_X_S> when 'true' ->
	      %% Line 4213
	      {[],'xmerl_xsd',{'names_not_equal',QName1,QName2}}
	  %% Line 4214
	  <QName,{'schema_simple_type',_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41},_X_S>
	      when call 'erlang':'=:='
		    (_cor33,
		     QName) ->
	      %% Line 4215
	      'ok'
	  %% Line 4216
	  <QName1,{'schema_simple_type',QName2,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49},_X_S> when 'true' ->
	      %% Line 4217
	      {[],'xmerl_xsd',{'names_not_equal',QName1,QName2}}
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'compare_base_types',3}}] )
	    -| ['compiler_generated'] )
	end
'extend_type'/3 =
    %% Line 4221
    fun (_cor2,_cor1,_cor0) ->
	%% Line 4222
	apply 'extend_type'/4
	    (_cor2, _cor1, [], _cor0)
'extend_type'/4 =
    %% Line 4227
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[],[],Acc,S> when 'true' ->
	      let <_cor4> =
		  %% Line 4228
		  call 'lists':'reverse'
		      (Acc)
	      in  %% Line 4228
		  {_cor4,S}
	  %% Line 4229
	  <[BaseCM|BaseRest],Ext = [{SeqCho,{Extension,Occ}}|ExtRest],Acc,S>
	      when let <_cor5> =
		    %% Line 4230
		    call 'erlang':'=:='
			(SeqCho, 'sequence')
		in  let <_cor6> =
			%% Line 4230
			call 'erlang':'=:='
			    (SeqCho, 'choice')
		    in  %% Line 4230
			call 'erlang':'or'
			    (_cor5, _cor6) ->
	      %% Line 4231
	      case BaseCM of
		%% Line 4232
		<{_cor26,{BC,_X_Occ}}>
		    when call 'erlang':'=:='
			  (_cor26,
			   SeqCho) ->
		    let <_cor7> =
			%% Line 4233
			call 'erlang':'++'
			    (BC, Extension)
		    in  %% Line 4233
			apply 'extend_type'/4
			    (BaseRest, ExtRest, [{SeqCho,{_cor7,Occ}}|Acc], S)
		%% Line 4234
		<G = {'group',{_X_Ref,_X_Occ}}> when 'true' ->
		    %% Line 4235
		    case apply 'resolve'/2
			     (G, S) of
		      <{ResG,S2}> when 'true' ->
			  %% Line 4236
			  case ResG of
			    %% Line 4237
			    <{'schema_group',_cor27,_cor28,_cor29,GC,_cor30}> when 'true' ->
				%% Line 4238
				case call 'lists':'keysearch'
					 (SeqCho, 1, GC) of
				  %% Line 4239
				  <{'value',SCC}> when 'true' ->
				      %% Line 4240
				      apply 'extend_type'/4
					  ([SCC|BaseRest], Ext, Acc, S)
				  %% Line 4241
				  <_cor31> when 'true' ->
				      let <S3> =
					  %% Line 4242
					  apply 'acc_errs'/2
					      (S2, {[],'xmerl_xsd',{'illegal_content_in_extension',Ext}})
				      in  let <_cor10> =
					      %% Line 4243
					      call 'lists':'reverse'
						  (Acc)
					  in  %% Line 4243
					      {_cor10,S3}
				end
			    %% Line 4245
			    <_cor32> when 'true' ->
				let <S3> =
				    %% Line 4246
				    apply 'acc_errs'/2
					(S2, {[],'xmerl_xsd',{'illegal_content_in_extension',ResG}})
				in  let <_cor13> =
					%% Line 4247
					call 'lists':'reverse'
					    (Acc)
				    in  %% Line 4247
					{_cor13,S3}
			  end
		      ( <_cor8> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor8})
			-| ['compiler_generated'] )
		    end
		%% Line 4249
		<_cor33> when 'true' ->
		    %% Line 4251
		    apply 'extend_type'/4
			([BaseCM|BaseRest], ExtRest, [{SeqCho,{Extension,Occ}}|Acc], S)
	      end
	  %% Line 4253
	  <BaseCM,ExtCM,Acc,S>
	      when let <_cor16> =
		    call 'erlang':'is_list'
			(BaseCM)
		in  let <_cor17> =
			call 'erlang':'is_list'
			    (ExtCM)
		    in  call 'erlang':'and'
			    (_cor16, _cor17) ->
	      let <_cor20> =
		  %% Line 4254
		  call 'lists':'reverse'
		      (ExtCM)
	      in  let <_cor18> =
		      %% Line 4254
		      call 'lists':'reverse'
			  (BaseCM)
		  in  let <_cor19> =
			  %% Line 4254
			  call 'erlang':'++'
			      (_cor18, Acc)
		      in  let <_cor21> =
			      %% Line 4254
			      call 'erlang':'++'
				  (_cor20, _cor19)
			  in  %% Line 4254
			      apply 'extend_type'/4
				  ([], [], _cor21, S)
	  ( <_cor25,_cor24,_cor23,_cor22> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor25,_cor24,_cor23,_cor22})
		  -| [{'function_name',{'extend_type',4}}] )
	    -| ['compiler_generated'] )
	end
'restrict_type'/4 =
    %% Line 4256
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 4257
	apply 'restrict_type'/5
	    (_cor3, _cor2, _cor1, [], _cor0)
'restrict_type'/5 =
    %% Line 4270
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[],[],_X_TypeName,Acc,S> when 'true' ->
	      let <_cor5> =
		  %% Line 4271
		  call 'lists':'reverse'
		      (Acc)
	      in  %% Line 4271
		  {_cor5,S}
	  %% Line 4272
	  <[{'restriction',{_X_Type,CM1}}|[]],[],_X_TypeName,Acc,S> when 'true' ->
	      let <_cor6> =
		  %% Line 4273
		  call 'lists':'reverse'
		      (Acc)
	      in  let <_cor7> =
		      %% Line 4273
		      call 'erlang':'++'
			  (CM1, _cor6)
		  in  %% Line 4273
		      {_cor7,S}
	  %% Line 4274
	  <[{'extension',{_X_Type,CM1}}|[]],[],_X_TypeName,Acc,S> when 'true' ->
	      let <_cor8> =
		  %% Line 4275
		  call 'lists':'reverse'
		      (Acc)
	      in  let <_cor9> =
		      %% Line 4275
		      call 'erlang':'++'
			  (CM1, _cor8)
		  in  %% Line 4275
		      {_cor9,S}
	  %% Line 4276
	  <BaseRest,[ST = {'simpleType',_X_Name}|RestrRest],TypeName,Acc,S> when 'true' ->
	      %% Line 4278
	      apply 'restrict_type'/5
		  (BaseRest, RestrRest, TypeName, [ST|Acc], S)
	  %% Line 4279
	  <[BaseCM|BaseRest],[{SeqCho,{CM,Occ}}|RestrRest],TypeName,Acc,S>
	      when let <_cor10> =
		    %% Line 4280
		    call 'erlang':'=:='
			(SeqCho, 'sequence')
		in  let <_cor11> =
			%% Line 4280
			call 'erlang':'=:='
			    (SeqCho, 'choice')
		    in  %% Line 4280
			call 'erlang':'or'
			    (_cor10, _cor11) ->
	      %% Line 4282
	      case BaseCM of
		%% Line 4283
		<{_cor26,{BCM,_cor27}}>
		    when call 'erlang':'=:='
			  (_cor26,
			   SeqCho) ->
		    %% Line 4284
		    case apply 'check_element_presence'/2
			     (CM, BCM) of
		      %% Line 4285
		      <{'error',Reason}> when 'true' ->
			  let <_cor13> =
			      %% Line 4286
			      call 'lists':'reverse'
				  (Acc)
			  in  let <_cor12> =
				  %% Line 4286
				  apply 'acc_errs'/2
				      (S, Reason)
			      in  %% Line 4286
				  {_cor13,_cor12}
		      %% Line 4287
		      <'ok'> when 'true' ->
			  %% Line 4288
			  apply 'restrict_type'/5
			      (BaseRest, RestrRest, TypeName, %% Line 4289
							      [{SeqCho,{CM,Occ}}|Acc], %% Line 4289
										       S)
		      ( <_cor14> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor14})
			-| ['compiler_generated'] )
		    end
		%% Line 4291
		<Other> when 'true' ->
		    let <_cor16> =
			%% Line 4292
			call 'lists':'reverse'
			    (Acc)
		    in  let <_cor15> =
			    %% Line 4292
			    apply 'acc_errs'/2
				(S, {[],'xmerl_xsd',{SeqCho,'expected',Other,'found'}})
			in  %% Line 4292
			    {_cor16,_cor15}
	      end
	  %% Line 4294
	  <BaseRest,[Facet = {F,_X_Val}|RestrRest],TypeName,Acc,S> when 'true' ->
	      %% Line 4295
	      case call 'xmerl_lib':'is_facet'
		       (F) of
		%% Line 4296
		<'true'> when 'true' ->
		    %% Line 4297
		    apply 'restrict_type'/5
			(BaseRest, RestrRest, TypeName, [Facet|Acc], S)
		%% Line 4298
		<_cor28> when 'true' ->
		    let <_cor19> =
			%% Line 4299
			call 'lists':'reverse'
			    (Acc)
		    in  let <_cor18> =
			    %% Line 4299
			    apply 'acc_errs'/2
				(S, {[],'xmerl_xsd',{'does_not_support',Facet,'in_restriction'}})
			in  %% Line 4299
			    {_cor19,_cor18}
	      end
	  ( <_cor25,_cor24,_cor23,_cor22,_cor21> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor25,_cor24,_cor23,_cor22,_cor21})
		  -| [{'function_name',{'restrict_type',5}}] )
	    -| ['compiler_generated'] )
	end
'restrict_simple_type'/4 =
    %% Line 4302
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[{'restriction',{_X_Type,BaseCM}}|[]],RestrCM,_X_TypeName,S> when 'true' ->
	      %% Line 4303
	      apply 'restrict_simple_type'/4
		  (BaseCM, RestrCM, _X_TypeName, S)
	  %% Line 4304
	  <CM = [{'extension',{_X_Type,_X_BaseCM}}|[]],_X_RestrCM,TypeName,S> when 'true' ->
	      let <_cor4> =
		  %% Line 4305
		  apply 'acc_errs'/2
		      (S, {[],'xmerl_xsd',{'illegal_content_simple_type',CM,TypeName}})
	      in  %% Line 4305
		  {[],_cor4}
	  %% Line 4306
	  <BaseCM,RestrCM,TypeName,S> when 'true' ->
	      let <_cor6> =
		  %% Line 4311
		  case BaseCM of
		    %% Line 4312
		    <[]> when 'true' ->
			{[],S}
		    %% Line 4313
		    <_cor22> when 'true' ->
			%% Line 4314
			apply 'restrict_simple_type'/4
			    ([], BaseCM, TypeName, S)
		  end
	      in  %% Line 4310
		  case _cor6 of
		    <{Acc,S2}> when 'true' ->
			let <Fun> =
			    %% Line 4317
			    ( fun (_cor14,_cor13) ->
				  case <_cor14,_cor13> of
				    <X = {'simpleType',_cor23},{Acc_in,S_in}> when 'true' ->
					%% Line 4318
					{[X|Acc_in],S_in}
				    %% Line 4319
				    <X = {LU,_cor24},{Acc_in,S_in}>
					when let <_cor8> =
					      call 'erlang':'=:='
						  (LU, 'list')
					  in  let <_cor9> =
						  call 'erlang':'=:='
						      (LU, 'union')
					      in  call 'erlang':'or'
						      (_cor8, _cor9) ->
					%% Line 4320
					{[X|Acc_in],S_in}
				    %% Line 4321
				    <X = {F,_cor25},{Acc_in,S_in}> when 'true' ->
					%% Line 4323
					case call 'xmerl_lib':'is_facet'
						 (F) of
					  %% Line 4324
					  <'true'> when 'true' ->
					      %% Line 4325
					      {[X|Acc_in],S_in}
					  %% Line 4326
					  <_cor26> when 'true' ->
					      let <_cor10> =
						  %% Line 4327
						  apply 'acc_errs'/2
						      (S_in, {[],'xmerl_xsd',{'illegal_in_restriction_of_simpleType',X}})
					      in  %% Line 4327
						  {Acc_in,_cor10}
					end
				    %% Line 4329
				    <X,{Acc_in,S_in}> when 'true' ->
					let <_cor12> =
					    %% Line 4330
					    apply 'acc_errs'/2
						(S_in, {[],'xmerl_xsd',{'illegal_in_restriction_of_simpleType',X}})
					in  %% Line 4330
					    {Acc_in,_cor12}
				    ( <_cor16,_cor15> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor16,_cor15})
					    -| [{'function_name',{'-restrict_simple_type/4-fun-0-',2}}] )
				      -| ['compiler_generated'] )
				  end
			      -| [{'id',{0,0,'-restrict_simple_type/4-fun-0-'}}] )
			in  %% Line 4332
			    call 'lists':'foldl'
				(Fun, {Acc,S2}, RestrCM)
		    ( <_cor7> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor7})
		      -| ['compiler_generated'] )
		  end
	end
'check_element_presence'/2 =
    %% Line 4334
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],_X_BCM> when 'true' ->
	      %% Line 4335
	      'ok'
	  %% Line 4336
	  <[{'element',{Name,_cor5}}|CM],BCM> when 'true' ->
	      %% Line 4337
	      case apply 'check_element_presence2'/2
		       (Name, BCM) of
		%% Line 4338
		<{'ok',BCM2}> when 'true' ->
		    %% Line 4339
		    apply 'check_element_presence'/2
			(CM, BCM2)
		%% Line 4340
		<_cor6> when 'true' ->
		    %% Line 4341
		    {'error',{[],'xmerl_xsd',{'element',Name,'not_present_in_restriction'}}}
	      end
	  %% Line 4343
	  <[_X_C|CM],BCM> when 'true' ->
	      %% Line 4344
	      apply 'check_element_presence'/2
		  (CM, BCM)
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'check_element_presence',2}}] )
	    -| ['compiler_generated'] )
	end
'check_element_presence2'/2 =
    %% Line 4346
    fun (_cor1,_cor0) ->
	%% Line 4347
	apply 'check_element_presence2'/3
	    (_cor1, _cor0, [])
'check_element_presence2'/3 =
    %% Line 4348
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{LocalName,_cor8,NS},[{'element',{{_cor9,_cor10,_cor11},_cor12}}|BCM],Acc>
	      when let <_cor13> =
		    call 'erlang':'=:='
			(_cor9, LocalName)
		in  let <_cor14> =
			call 'erlang':'=:='
			    (_cor11, NS)
		    in  call 'erlang':'and'
			    (_cor13, _cor14) ->
	      let <_cor3> =
		  %% Line 4349
		  call 'lists':'reverse'
		      (Acc)
	      in  let <_cor4> =
		      %% Line 4349
		      call 'erlang':'++'
			  (_cor3, BCM)
		  in  %% Line 4349
		      {'ok',_cor4}
	  %% Line 4350
	  <Name,[E|BCM],Acc> when 'true' ->
	      %% Line 4351
	      apply 'check_element_presence2'/3
		  (Name, BCM, [E|Acc])
	  %% Line 4352
	  <_X_Name,[],_X_Acc> when 'true' ->
	      %% Line 4353
	      'error'
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'check_element_presence2',3}}] )
	    -| ['compiler_generated'] )
	end
'extend_attributes'/6 =
    %% Line 4357
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <BaseAtts,[EA = {'attribute',Name}|ExtAtts],%% Line 4358
						      BaseTypeName,%% Line 4358
								   CM,%% Line 4358
								      Mode,%% Line 4358
									   S> when 'true' ->
	      let <NewAtts> =
		  %% Line 4359
		  apply 'key_replace_or_insert'/4
		      (Name, 2, BaseAtts, EA)
	      in  %% Line 4360
		  apply 'extend_attributes'/6
		      (NewAtts, ExtAtts, BaseTypeName, CM, Mode, S)
	  %% Line 4364
	  <BaseAtts,[LocalWC = {'anyAttribute',_X_NS_PC}|ExtAtts],%% Line 4365
								  BaseTypeName,%% Line 4365
									       CM,%% Line 4365
										  'deduce',%% Line 4365
											   S> when 'true' ->
	      %% Line 4366
	      case apply 'complete_wildcard'/3
		       (LocalWC, CM, S) of
		<{CompleteWC,S2}> when 'true' ->
		    let <BaseWC> =
			%% Line 4367
			apply 'base_wildcard'/1
			    (BaseAtts)
		    in  let <NewWC,S4> =
			    %% Line 4369
			    case BaseWC of
			      %% Line 4370
			      <[]> when 'true' ->
				  <CompleteWC,S2>
			      %% Line 4371
			      <_cor24> when 'true' ->
				  %% Line 4372
				  case <> of
				    <>
					when call 'erlang':'=='
					      (CompleteWC,
					       LocalWC) ->
					<BaseWC,S2>
				    %% Line 4373
				    <> when 'true' ->
					let <_cor10> =
					    %% Line 4374
					    apply 'wc_ns'/1
						(CompleteWC)
					in  let <_cor9> =
						%% Line 4375
						apply 'wc_ns'/1
						    (BaseWC)
					    in  %% Line 4374
						case apply 'attribute_wildcard_union'/3
							 (_cor10, _cor9, %% Line 4375
									 S2) of
						  <{NS,S3}> when 'true' ->
						      let <PC> =
							  %% Line 4376
							  apply 'wc_pc'/1
							      (CompleteWC)
						      in  %% Line 4377
							  <[{'anyAttribute',{NS,PC}}|[]],S3>
						  ( <_cor11> when 'true' ->
							primop 'match_fail'
							    ({'badmatch',_cor11})
						    -| ['compiler_generated'] )
						end
				  end
			    end
			in  let <NewBaseAtts> =
				%% Line 4380
				call 'lists':'keyreplace'
				    ('anyAttribute', 1, BaseAtts, NewWC)
			    in  %% Line 4381
				apply 'extend_attributes'/6
				    (NewBaseAtts, ExtAtts, BaseTypeName, CM, 'deduce', S4)
		( <_cor7> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor7})
		  -| ['compiler_generated'] )
	      end
	  %% Line 4382
	  <Atts,[],_cor25,_cor26,_X_Mode,S> when 'true' ->
	      let <_cor17> =
		  %% Line 4383
		  call 'lists':'reverse'
		      (Atts)
	      in  %% Line 4383
		  {_cor17,S}
	  ( <_cor23,_cor22,_cor21,_cor20,_cor19,_cor18> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor23,_cor22,_cor21,_cor20,_cor19,_cor18})
		  -| [{'function_name',{'extend_attributes',6}}] )
	    -| ['compiler_generated'] )
	end
'restrict_attributes'/3 =
    %% Line 4385
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <BaseAtts,[RA|RAtts],S> when 'true' ->
	      %% Line 4387
	      case apply 'restrict_attribute_replace'/3
		       (BaseAtts, RA, S) of
		<{NewAtts,S2}> when 'true' ->
		    %% Line 4388
		    apply 'restrict_attributes'/3
			(NewAtts, RAtts, S2)
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 4389
	  <Atts,[],S> when 'true' ->
	      let <_cor4> =
		  %% Line 4390
		  call 'lists':'reverse'
		      (Atts)
	      in  %% Line 4390
		  {_cor4,S}
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'restrict_attributes',3}}] )
	    -| ['compiler_generated'] )
	end
'restrict_attribute_replace'/3 =
    %% Line 4391
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <BaseAtts,EA = {'attribute',Name},S> when 'true' ->
	      let <_cor3> =
		  %% Line 4392
		  call 'lists':'keyreplace'
		      (Name, 2, BaseAtts, EA)
	      in  %% Line 4392
		  {_cor3,S}
	  %% Line 4393
	  <BaseAtts,EA = {'anyAttribute',{NS,_cor11}},S> when 'true' ->
	      %% Line 4394
	      case apply 'key1search'/3
		       ('anyAttribute', BaseAtts, 'false') of
		%% Line 4395
		<'false'> when 'true' ->
		    let <_cor4> =
			%% Line 4396
			apply 'acc_errs'/2
			    (S, {'invalid_derivation',EA,BaseAtts})
		    in  %% Line 4396
			{BaseAtts,_cor4}
		%% Line 4397
		<{_cor12,{BaseNS,_cor13}}> when 'true' ->
		    let <S2> =
			%% Line 4398
			apply 'wildcard_subset'/3
			    (BaseNS, NS, S)
		    in  let <_cor6> =
			    %% Line 4399
			    call 'lists':'keyreplace'
				('anyAttribute', 1, BaseAtts, EA)
			in  %% Line 4399
			    {_cor6,S2}
		( <_cor7> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor7})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'restrict_attribute_replace',3}}] )
	    -| ['compiler_generated'] )
	end
'wildcard_subset'/3 =
    %% Line 4404
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <['##any'],_X_NS,S> when 'true' ->
	      %% Line 4405
	      S
	  %% Line 4407
	  <[{'not',NS}|[]],[{'not',_cor22}|[]],S>
	      when call 'erlang':'=:='
		    (_cor22,
		     NS) ->
	      %% Line 4408
	      S
	  %% Line 4412
	  <_cor23,[],S> when 'true' ->
	      %% Line 4413
	      S
	  %% Line 4414
	  <BaseNS,NS,S>
	      when let <_cor3> =
		    call 'erlang':'is_list'
			(BaseNS)
		in  let <_cor4> =
			call 'erlang':'is_list'
			    (NS)
		    in  call 'erlang':'and'
			    (_cor3, _cor4) ->
	      let <_cor10> =
		  %% Line 4415
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor7) ->
				case _cor7 of
				  <[X|_cor6]> when 'true' ->
				      ( case call 'lists':'member'
						 (X, BaseNS) of
					  <'true'> when 'true' ->
					      let <_cor8> =
						  apply 'lc$^0'/1
						      (_cor6)
					      in  ( [X|_cor8]
						    -| ['compiler_generated'] )
					  ( <'false'> when 'true' ->
						apply 'lc$^0'/1
						    (_cor6)
					    -| ['compiler_generated'] )
					  ( <_cor9> when 'true' ->
						primop 'match_fail'
						    ({'case_clause',_cor9})
					    -| ['compiler_generated'] )
					end
					-| ['list_comprehension'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor7> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor7})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (NS)
		    -| ['list_comprehension'] )
	      in  %% Line 4415
		  case _cor10 of
		    %% Line 4416
		    <_cor24>
			when call 'erlang':'=:='
			      (_cor10,
			       NS) ->
			%% Line 4417
			S
		    %% Line 4418
		    <_cor25> when 'true' ->
			%% Line 4419
			apply 'acc_errs'/2
			    (S, {[],'xmerl_xsd',{'wildcard_namespace',NS,%% Line 4420
									 'not_subset_of_base_namespace',%% Line 4420
													BaseNS}})
		  end
	  %% Line 4422
	  <BaseNS = [{'not',BNS}|[]],NS,S>
	      when call 'erlang':'is_list'
		    (NS) ->
	      let <_cor17> =
		  %% Line 4423
		  ( letrec
			'lc$^1'/1 =
			    fun (_cor14) ->
				case _cor14 of
				  <[X|_cor13]> when 'true' ->
				      ( case call 'lists':'member'
						 (X, NS) of
					  <'true'> when 'true' ->
					      let <_cor15> =
						  apply 'lc$^1'/1
						      (_cor13)
					      in  ( [X|_cor15]
						    -| ['compiler_generated'] )
					  ( <'false'> when 'true' ->
						apply 'lc$^1'/1
						    (_cor13)
					    -| ['compiler_generated'] )
					  ( <_cor16> when 'true' ->
						primop 'match_fail'
						    ({'case_clause',_cor16})
					    -| ['compiler_generated'] )
					end
					-| ['list_comprehension'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor14> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor14})
					  -| [{'function_name',{'lc$^1',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^1'/1
			    (BNS)
		    -| ['list_comprehension'] )
	      in  %% Line 4423
		  case _cor17 of
		    %% Line 4424
		    <[]> when 'true' ->
			%% Line 4425
			S
		    %% Line 4426
		    <_cor26> when 'true' ->
			%% Line 4427
			apply 'acc_errs'/2
			    (S, {[],'xmerl_xsd',{'wildcard_namespace',NS,%% Line 4428
									 'not_subset_of_base_namespace',%% Line 4428
													BaseNS}})
		  end
	  %% Line 4430
	  <BaseNS,NS,S> when 'true' ->
	      %% Line 4431
	      apply 'acc_errs'/2
		  (S, {[],'xmerl_xsd',{'wildcard_namespace',NS,%% Line 4432
							       'not_subset_of_base_namespace',%% Line 4432
											      BaseNS}})
	end
'base_wildcard'/1 =
    %% Line 4434
    fun (_cor0) ->
	%% Line 4435
	apply 'key1search'/3
	    ('anyAttribute', _cor0, [])
'complete_wildcard'/3 =
    %% Line 4437
    fun (_cor2,_cor1,_cor0) ->
	%% Line 4438
	case call 'lists':'keysearch'
		 ('attributeGroup', 1, _cor1) of
	  %% Line 4439
	  <{'value',AttG = {_cor13,_X_Name}}> when 'true' ->
	      %% Line 4440
	      case apply 'resolve'/2
		       (AttG, _cor0) of
		%% Line 4441
		<{{'schema_attribute_group',_cor14,_cor15,_cor16,Atts},_X_S}> when 'true' ->
		    %% Line 4442
		    case call 'lists':'keysearch'
			     ('anyAttribute', 1, Atts) of
		      %% Line 4443
		      <{'value',AA}> when 'true' ->
			  let <_cor4> =
			      %% Line 4445
			      apply 'wc_ns'/1
				  (_cor2)
			  in  let <_cor3> =
				  %% Line 4446
				  apply 'wc_ns'/1
				      (AA)
			      in  %% Line 4444
				  case %% Line 4445
				       apply 'attribute_wildcard_intersection'/3
					   (_cor4, _cor3, _cor0) of
				    <{PC,S2}> when 'true' ->
					let <_cor6> =
					    %% Line 4447
					    apply 'wc_pc'/1
						(_cor2)
					in  %% Line 4447
					    {{'anyAttribute',{_cor6,PC}},S2}
				    ( <_cor5> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor5})
				      -| ['compiler_generated'] )
				  end
		      %% Line 4448
		      <_cor17> when 'true' ->
			  {_cor2,_cor0}
		    end
		%% Line 4450
		<_cor18> when 'true' ->
		    {_cor2,_cor0}
	      end
	  %% Line 4452
	  <_cor19> when 'true' ->
	      {_cor2,_cor0}
	end
'wc_ns'/1 =
    %% Line 4455
    fun (_cor0) ->
	case _cor0 of
	  <{'anyAttribute',{NS,_cor2}}> when 'true' ->
	      %% Line 4456
	      NS
	  %% Line 4457
	  <_cor3> when 'true' ->
	      %% Line 4458
	      []
	end
'wc_pc'/1 =
    %% Line 4459
    fun (_cor0) ->
	case _cor0 of
	  <{'anyAttribute',{_cor2,PC}}> when 'true' ->
	      %% Line 4460
	      PC
	  %% Line 4461
	  <_cor3> when 'true' ->
	      %% Line 4462
	      'strict'
	end
'attribute_wildcard_union'/3 =
    %% Line 4468
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <NS,_cor29,S>
	      when call 'erlang':'=:='
		    (_cor29,
		     NS) ->
	      %% Line 4469
	      {NS,S}
	  %% Line 4471
	  <NS1,NS2,S>
	      when let <_cor3> =
		    call 'erlang':'=:='
			(NS1, ['##any'])
		in  let <_cor4> =
			call 'erlang':'=:='
			    (NS2, ['##any'])
		    in  call 'erlang':'or'
			    (_cor3, _cor4) ->
	      %% Line 4472
	      {['##any'],S}
	  %% Line 4473
	  <NS1,NS2,S> when 'true' ->
	      let <_cor6> =
		  %% Line 4474
		  call 'lists':'keysearch'
		      ('not', 1, NS1)
	      in  let <_cor5> =
		      %% Line 4474
		      call 'lists':'keysearch'
			  ('not', 1, NS2)
		  in  %% Line 4474
		      case <_cor6,_cor5> of
			%% Line 4475
			<'false','false'> when 'true' ->
			    let <_cor13> =
				%% Line 4476
				( letrec
				      'lc$^0'/1 =
					  fun (_cor10) ->
					      case _cor10 of
						<[X|_cor8]> when 'true' ->
						    let <_cor9> =
							call 'lists':'member'
							    (X, NS1)
						    in  ( case <> of
							    <>
								when call 'erlang':'=:='
								      (_cor9,
								       'false') ->
								let <_cor11> =
								    apply 'lc$^0'/1
									(_cor8)
								in  ( [X|_cor11]
								      -| ['compiler_generated'] )
							    ( <> when 'true' ->
								  apply 'lc$^0'/1
								      (_cor8)
							      -| ['compiler_generated'] )
							  end
							  -| ['list_comprehension'] )
						<[]> when 'true' ->
						    []
						( <_cor10> when 'true' ->
						      ( primop 'match_fail'
							    ({'function_clause',_cor10})
							-| [{'function_name',{'lc$^0',1}}] )
						  -| ['compiler_generated'] )
					      end
				  in  apply 'lc$^0'/1
					  (NS2)
				  -| ['list_comprehension'] )
			    in  let <_cor14> =
				    %% Line 4476
				    call 'erlang':'++'
					(NS1, _cor13)
				in  %% Line 4476
				    {_cor14,S}
			%% Line 4477
			<{'value',{_cor30,Set1}},{'value',{_cor31,Set2}}> when 'true' ->
			    let <_cor16> =
				%% Line 4478
				call 'lists':'sort'
				    (Set1)
			    in  let <_cor15> =
				    %% Line 4478
				    call 'lists':'sort'
					(Set2)
				in  %% Line 4478
				    case <_cor16,_cor15> of
				      %% Line 4479
				      <L,_cor32>
					  when call 'erlang':'=:='
						(_cor32,
						 L) ->
					  {[{'not',L}|[]],S}
				      %% Line 4480
				      <_fol4936,_fol4937> when 'true' ->
					  {[{'not',['absent']}],S}
				    end
			%% Line 4482
			<_fol4932,_fol4933> when 'true' ->
			    %% Line 4483
			    case apply 'toggle_ns'/2
				     (NS1, NS2) of
			      %% Line 4484
			      <{_X_O1 = ['absent'],NS3}> when 'true' ->
				  %% Line 4485
				  case call 'lists':'member'
					   ('absent', NS3) of
				    %% Line 4486
				    <'true'> when 'true' ->
					{['##any'],S}
				    %% Line 4487
				    <_cor35> when 'true' ->
					{[{'not',['absent']}],S}
				  end
			      %% Line 4489
			      <{O1 = [O1Name|[]],NS4}> when 'true' ->
				  %% Line 4490
				  case call 'lists':'member'
					   (O1Name, NS4) of
				    %% Line 4491
				    <'true'> when 'true' ->
					%% Line 4492
					case call 'lists':'member'
						 ('absent', NS4) of
					  %% Line 4493
					  <'true'> when 'true' ->
					      {['##any'],S}
					  %% Line 4494
					  <_cor36> when 'true' ->
					      {[{'not',['absent']}],S}
					end
				    %% Line 4496
				    <_cor37> when 'true' ->
					%% Line 4497
					case call 'lists':'member'
						 ('absent', NS4) of
					  %% Line 4498
					  <'true'> when 'true' ->
					      let <Err> = {%% Line 4500
						   [],%% Line 4500
						      'xmerl_xsd',%% Line 4500
								  {'wildcard_namespace_union_not_expressible',NS1,NS2}}
					      in  let <_cor21> =
						      %% Line 4501
						      apply 'acc_errs'/2
							  (S, Err)
						  in  %% Line 4501
						      {[],_cor21}
					  %% Line 4502
					  <_cor38> when 'true' ->
					      {[{'not',O1}|[]],S}
					end
				  end
			      ( <_cor24> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor24})
				-| ['compiler_generated'] )
			    end
		      end
	end
'attribute_wildcard_intersection'/3 =
    %% Line 4510
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <O1,_cor37,S>
	      when call 'erlang':'=:='
		    (_cor37,
		     O1) ->
	      {O1,S}
	  %% Line 4512
	  <['##any'],O2,S> when 'true' ->
	      {O2,S}
	  %% Line 4513
	  <O1,['##any'],S> when 'true' ->
	      {O1,S}
	  %% Line 4515
	  <[{'not',['absent']}],O2 = [{'not',_cor38}|[]],S> when 'true' ->
	      {O2,S}
	  %% Line 4516
	  <O1 = [{'not',_cor39}|[]],[{'not',['absent']}],S> when 'true' ->
	      {O1,S}
	  %% Line 4518
	  <[{'not',NS1}|[]],[{'not',NS2}|[]],S> when 'true' ->
	      let <_cor8> =
		  %% Line 4519
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor5) ->
				case _cor5 of
				  <[X|_cor4]> when 'true' ->
				      ( case call 'lists':'member'
						 (X, NS2) of
					  <'true'> when 'true' ->
					      let <_cor6> =
						  apply 'lc$^0'/1
						      (_cor4)
					      in  ( [X|_cor6]
						    -| ['compiler_generated'] )
					  ( <'false'> when 'true' ->
						apply 'lc$^0'/1
						    (_cor4)
					    -| ['compiler_generated'] )
					  ( <_cor7> when 'true' ->
						primop 'match_fail'
						    ({'case_clause',_cor7})
					    -| ['compiler_generated'] )
					end
					-| ['list_comprehension'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor5> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor5})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (NS1)
		    -| ['list_comprehension'] )
	      in  %% Line 4519
		  case _cor8 of
		    %% Line 4520
		    <[]> when 'true' ->
			let <_cor9> =
			    apply 'acc_errs'/2
				(S, {[],'xmerl_xsd',{'wildcard_namespace_intersection_not_expressible',NS1,NS2}})
			in  {[],_cor9}
		    %% Line 4521
		    <NS3> when 'true' ->
			{[{'not',NS3}|[]],S}
		  end
	  %% Line 4524
	  <[{'not',NS}|[]],O2,S> when 'true' ->
	      let <_cor17> =
		  %% Line 4525
		  ( letrec
			'lc$^1'/1 =
			    fun (_cor14) ->
				case _cor14 of
				  <[X|_cor12]> when 'true' ->
				      let <_cor13> =
					  call 'lists':'member'
					      (X, NS)
				      in  ( case <> of
					      <>
						  when call 'erlang':'=:='
							(_cor13,
							 'false') ->
						  let <_cor15> =
						      apply 'lc$^1'/1
							  (_cor12)
						  in  ( [X|_cor15]
							-| ['compiler_generated'] )
					      ( <> when 'true' ->
						    apply 'lc$^1'/1
							(_cor12)
						-| ['compiler_generated'] )
					    end
					    -| ['list_comprehension'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor14> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor14})
					  -| [{'function_name',{'lc$^1',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^1'/1
			    (O2)
		    -| ['list_comprehension'] )
	      in  let <_cor18> =
		      %% Line 4525
		      call 'lists':'delete'
			  ('absent', _cor17)
		  in  %% Line 4525
		      {_cor18,S}
	  %% Line 4526
	  <O1,[{'not',NS}|[]],S> when 'true' ->
	      let <_cor25> =
		  %% Line 4527
		  ( letrec
			'lc$^2'/1 =
			    fun (_cor22) ->
				case _cor22 of
				  <[X|_cor20]> when 'true' ->
				      let <_cor21> =
					  call 'lists':'member'
					      (X, NS)
				      in  ( case <> of
					      <>
						  when call 'erlang':'=:='
							(_cor21,
							 'false') ->
						  let <_cor23> =
						      apply 'lc$^2'/1
							  (_cor20)
						  in  ( [X|_cor23]
							-| ['compiler_generated'] )
					      ( <> when 'true' ->
						    apply 'lc$^2'/1
							(_cor20)
						-| ['compiler_generated'] )
					    end
					    -| ['list_comprehension'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor22> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor22})
					  -| [{'function_name',{'lc$^2',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^2'/1
			    (O1)
		    -| ['list_comprehension'] )
	      in  let <_cor26> =
		      %% Line 4527
		      call 'lists':'delete'
			  ('absent', _cor25)
		  in  %% Line 4527
		      {_cor26,S}
	  %% Line 4529
	  <O1,O2,S> when 'true' ->
	      let <_cor32> =
		  %% Line 4530
		  ( letrec
			'lc$^3'/1 =
			    fun (_cor29) ->
				case _cor29 of
				  <[X|_cor28]> when 'true' ->
				      ( case call 'lists':'member'
						 (X, O2) of
					  <'true'> when 'true' ->
					      let <_cor30> =
						  apply 'lc$^3'/1
						      (_cor28)
					      in  ( [X|_cor30]
						    -| ['compiler_generated'] )
					  ( <'false'> when 'true' ->
						apply 'lc$^3'/1
						    (_cor28)
					    -| ['compiler_generated'] )
					  ( <_cor31> when 'true' ->
						primop 'match_fail'
						    ({'case_clause',_cor31})
					    -| ['compiler_generated'] )
					end
					-| ['list_comprehension'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor29> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor29})
					  -| [{'function_name',{'lc$^3',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^3'/1
			    (O1)
		    -| ['list_comprehension'] )
	      in  %% Line 4530
		  case _cor32 of
		    %% Line 4531
		    <[]> when 'true' ->
			%% Line 4532
			{['absent'],S}
		    %% Line 4533
		    <L> when 'true' ->
			{L,S}
		  end
	end
'toggle_ns'/2 =
    %% Line 4536
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <NS1,NS2 = [{'not',_cor4}|[]]> when 'true' ->
	      %% Line 4537
	      {NS2,NS1}
	  %% Line 4538
	  <NS1,NS2> when 'true' ->
	      %% Line 4539
	      {NS1,NS2}
	end
'deduce_derived_types'/2 =
    %% Line 4542
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[DT|DTs],S> when 'true' ->
	      let <_cor2> =
		  %% Line 4543
		  apply 'deduce_derived_type'/3
		      (DT, S, [])
	      in  %% Line 4543
		  apply 'deduce_derived_types'/2
		      (DTs, _cor2)
	  %% Line 4544
	  <[],S> when 'true' ->
	      %% Line 4545
	      S
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'deduce_derived_types',2}}] )
	    -| ['compiler_generated'] )
	end
'deduce_derived_type'/3 =
    %% Line 4548
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <DT = {_X_Kind,TName},S,RefChain> when 'true' ->
	      %% Line 4550
	      case call 'lists':'keymember'
		       (TName, 2, RefChain) of
		%% Line 4551
		<'true'> when 'true' ->
		    %% Line 4552
		    apply 'acc_errs'/2
			(S, {[],'xmerl_xsd',{'circular_reference_of_type',TName}})
		%% Line 4553
		<_cor7> when 'true' ->
		    %% Line 4554
		    apply 'deduce_derived_type2'/3
			(DT, S, [DT|RefChain])
	      end
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'deduce_derived_type',3}}] )
	    -| ['compiler_generated'] )
	end
'deduce_derived_type2'/3 =
    %% Line 4556
    fun (_cor2,_cor1,_cor0) ->
	%% Line 4557
	case apply 'resolve'/2
		 (_cor2, _cor1) of
	  <{DerivedType,_cor22}> when 'true' ->
	      %% Line 4558
	      case apply 'is_unmerged_type'/1
		       (DerivedType) of
		%% Line 4559
		<'true'> when 'true' ->
		    let <BaseTypeRef> =
			%% Line 4560
			apply 'get_base_type'/1
			    (DerivedType)
		    in  %% Line 4561
			case apply 'resolve'/2
				 ({'simple_or_complex_Type',BaseTypeRef}, _cor1) of
			  <{BaseType,_cor23}> when 'true' ->
			      let <_cor8> =
				  %% Line 4563
				  ( fun (_cor6) ->
					case _cor6 of
					  <{'schema_complex_type',_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37}> when 'true' ->
					      'complexType'
					  %% Line 4564
					  <_cor38> when 'true' ->
					      'simpleType'
					end
				    -| [{'id',{0,0,'-deduce_derived_type2/3-fun-0-'}}] )
			      in  let <BaseTypeKind> =
				      %% Line 4563
				      apply _cor8
					  (%% Line 4565
					   BaseType)
				  in  %% Line 4566
				      case apply 'is_unmerged_type'/1
					       (BaseType) of
					%% Line 4567
					<'true'> when 'true' ->
					    let <S2> =
						%% Line 4569
						apply 'deduce_derived_type'/3
						    ({BaseTypeKind,BaseTypeRef}, _cor1, _cor0)
					    in  %% Line 4570
						( case S2 of
						    ( <( {'xsd_state',_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,_cor69,_rec330}
							 -| ['compiler_generated'] )> when 'true' ->
							  ( case _cor1 of
							      ( <( {'xsd_state',_cor71,_cor72,_cor73,_cor74,_cor75,_cor76,_cor77,_cor78,_cor79,_cor80,_cor81,_cor82,_cor83,_cor84,_cor85,_cor86,_cor87,_cor88,_cor89,_cor90,_cor91,_cor92,_cor93,_cor94,_cor95,_cor96,_cor97,_cor98,_cor99,_cor100,_cor101,_rec331}
								   -| ['compiler_generated'] )> when 'true' ->
								    case call 'erlang':'=='
									     (_rec330, _rec331) of
								      %% Line 4571
								      <'true'> when 'true' ->
									  apply 'deduce_derived_type2'/3
									      (_cor2, S2, _cor0)
								      %% Line 4572
								      <_cor103> when 'true' ->
									  S2
								    end
								-| ['compiler_generated'] )
							      ( <_cor102> when 'true' ->
								    ( call ( 'erlang'
									     -| ['compiler_generated'] ):( 'error'
													   -| ['compiler_generated'] )
									  (( {'badrecord','xsd_state'}
									     -| ['compiler_generated'] ))
								      -| ['compiler_generated'] )
								-| ['compiler_generated'] )
							    end
							    -| ['compiler_generated'] )
						      -| ['compiler_generated'] )
						    ( <_cor70> when 'true' ->
							  ( call ( 'erlang'
								   -| ['compiler_generated'] ):( 'error'
												 -| ['compiler_generated'] )
								(( {'badrecord','xsd_state'}
								   -| ['compiler_generated'] ))
							    -| ['compiler_generated'] )
						      -| ['compiler_generated'] )
						  end
						  -| ['compiler_generated'] )
					%% Line 4574
					<_cor104> when 'true' ->
					    %% Line 4575
					    case apply 'merge_derived_types'/4
						     (BaseType, DerivedType, 'deduce', _cor1) of
					      <{_cor105,S2}> when 'true' ->
						  %% Line 4576
						  S2
					      ( <_cor16> when 'true' ->
						    primop 'match_fail'
							({'badmatch',_cor16})
						-| ['compiler_generated'] )
					    end
				      end
			  ( <_cor5> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor5})
			    -| ['compiler_generated'] )
			end
		%% Line 4578
		<_cor106> when 'true' ->
		    _cor1
	      end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'is_unmerged_type'/1 =
    %% Line 4581
    fun (_cor0) ->
	%% Line 4582
	case apply 'type_content'/1
		 (_cor0) of
	  %% Line 4583
	  <[{'restriction',_cor3}|[]]> when 'true' ->
	      'true'
	  %% Line 4584
	  <[{'extension',_cor4}|[]]> when 'true' ->
	      'true'
	  %% Line 4585
	  <_cor5> when 'true' ->
	      'false'
	end
'type_content'/1 =
    %% Line 4587
    fun (_cor0) ->
	case _cor0 of
	  <{'schema_simple_type',_cor2,_cor3,_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,C}> when 'true' ->
	      %% Line 4588
	      C
	  %% Line 4589
	  <{'schema_complex_type',_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,C,_cor22}> when 'true' ->
	      %% Line 4590
	      C
	  %% Line 4591
	  <_cor23> when 'true' ->
	      %% Line 4592
	      []
	end
'set_type_content'/2 =
    %% Line 4594
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Type = {'schema_simple_type',_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16},CM> when 'true' ->
	      %% Line 4595
	      call 'erlang':'setelement'
		  (10, Type, CM)
	  %% Line 4596
	  <Type = {'schema_complex_type',_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40},CM> when 'true' ->
	      %% Line 4597
	      call 'erlang':'setelement'
		  (14, Type, CM)
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6})
		  -| [{'function_name',{'set_type_content',2}}] )
	    -| ['compiler_generated'] )
	end
'get_base_type'/1 =
    %% Line 4599
    fun (_cor0) ->
	case _cor0 of
	  <{'schema_simple_type',_cor2,_cor3,BT,_cor4,_cor5,_cor6,_cor7,_cor8,_cor9}> when 'true' ->
	      %% Line 4600
	      BT
	  %% Line 4601
	  <{'schema_complex_type',_cor10,BT,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22}> when 'true' ->
	      %% Line 4602
	      BT
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'get_base_type',1}}] )
	    -| ['compiler_generated'] )
	end
'in_scope'/2 =
    %% Line 4604
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{Local,_X_Scope,_X_NS},S> when 'true' ->
	      %% Line 4605
	      apply 'in_scope'/2
		  (Local, S)
	  %% Line 4606
	  <Name,S = {'xsd_state',_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,Scope,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41}>
	      when call 'erlang':'is_atom'
		    (Name) ->
	      let <_rec334> =
		  %% Line 4607
		  [Name|Scope]
	      in  %% Line 4607
		  call 'erlang':'setelement'
		      (8, S, _rec334)
	  %% Line 4608
	  <Name,S = {'xsd_state',_cor75,_cor76,_cor77,_cor78,_cor79,_cor80,Scope,_cor81,_cor82,_cor83,_cor84,_cor85,_cor86,_cor87,_cor88,_cor89,_cor90,_cor91,_cor92,_cor93,_cor94,_cor95,_cor96,_cor97,_cor98,_cor99,_cor100,_cor101,_cor102,_cor103,_cor104,_cor105}>
	      when call 'erlang':'is_list'
		    (Name) ->
	      let <_cor5> =
		  %% Line 4609
		  apply 'atom_if_shortasciilist'/1
		      (Name)
	      in  let <_rec336> =
		      %% Line 4609
		      [_cor5|Scope]
		  in  %% Line 4609
		      call 'erlang':'setelement'
			  (8, S, _rec336)
	  ( <_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9})
		  -| [{'function_name',{'in_scope',2}}] )
	    -| ['compiler_generated'] )
	end
'out_scope'/2 =
    %% Line 4611
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{Local,_cor7,_cor8},S> when 'true' ->
	      let <_cor2> =
		  %% Line 4612
		  apply 'atom_if_shortasciilist'/1
		      (Local)
	      in  %% Line 4612
		  apply 'out_scope'/2
		      (_cor2, S)
	  %% Line 4613
	  <Name,S = {'xsd_state',_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,[_cor15|Rest],_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40}>
	      when call 'erlang':'=:='
		    (_cor15,
		     Name) ->
	      %% Line 4614
	      call 'erlang':'setelement'
		  (8, S, Rest)
	  %% Line 4615
	  <_X_Name,S> when 'true' ->
	      %% Line 4616
	      S
	end
'name_scope'/2 =
    %% Line 4618
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'_xmerl_no_name_',Scope,_X_NS},S> when 'true' ->
	      %% Line 4619
	      case S of
		<{'xsd_state',_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40}> when 'true' ->
		    call 'erlang':'setelement'
			(8, S, Scope)
		( <_cor41> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','xsd_state'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 4620
	  <{Name,Scope,_X_NS},S> when 'true' ->
	      let <_rec340> =
		  %% Line 4621
		  [Name|Scope]
	      in  %% Line 4621
		  case S of
		    <{'xsd_state',_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,_cor69,_cor70,_cor71,_cor72,_cor73}> when 'true' ->
			call 'erlang':'setelement'
			    (8, S, _rec340)
		    ( <_cor74> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','xsd_state'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'name_scope',2}}] )
	    -| ['compiler_generated'] )
	end
'reset_scope'/1 =
    %% Line 4623
    fun (_cor0) ->
	%% Line 4624
	case _cor0 of
	  <{'xsd_state',_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35}> when 'true' ->
	      call 'erlang':'setelement'
		  (8, _cor0, [])
	  ( <_cor36> when 'true' ->
		( call ( 'erlang'
			 -| ['compiler_generated'] ):( 'error'
						       -| ['compiler_generated'] )
		      (( {'badrecord','xsd_state'}
			 -| ['compiler_generated'] ))
		  -| ['compiler_generated'] )
	    -| ['compiler_generated'] )
	end
'set_scope'/2 =
    %% Line 4626
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Scope,S>
	      when call 'erlang':'is_list'
		    (Scope) ->
	      %% Line 4627
	      case S of
		<{'xsd_state',_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37}> when 'true' ->
		    call 'erlang':'setelement'
			(8, S, Scope)
		( <_cor38> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','xsd_state'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 4628
	  <_cor39,S> when 'true' ->
	      %% Line 4629
	      S
	end
'is_global_env'/1 =
    %% Line 4631
    fun (_cor0) ->
	case _cor0 of
	  <[_X_Env|[]]> when 'true' ->
	      %% Line 4632
	      'true'
	  %% Line 4633
	  <_cor2> when 'true' ->
	      %% Line 4634
	      'false'
	end
'kind'/2 =
    %% Line 4636
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'xmlElement',Name,_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14},S> when 'true' ->
	      let <LocalName> =
		  %% Line 4637
		  apply 'local_name'/1
		      (Name)
	      in  %% Line 4638
		  apply 'is_a'/2
		      (LocalName, S)
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'kind',2}}] )
	    -| ['compiler_generated'] )
	end
'kind'/1 =
    %% Line 4640
    fun (_cor0) ->
	case _cor0 of
	  <{'xmlElement',Name,_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13}> when 'true' ->
	      let <LocalName> =
		  %% Line 4641
		  apply 'local_name'/1
		      (Name)
	      in  let <_cor2> =
		      %% Line 4642
		      apply 'is_a'/2
			  (LocalName, 'dummy')
		  in  %% Line 4642
		      call 'erlang':'element'
			  (1, _cor2)
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'kind',1}}] )
	    -| ['compiler_generated'] )
	end
'is_a'/2 =
    %% Line 4644
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'element',S> when 'true' ->
	      {'element',S}
	  %% Line 4645
	  <'annotation',S> when 'true' ->
	      {'annotation',S}
	  %% Line 4646
	  <'simpleType',S> when 'true' ->
	      {'simpleType',S}
	  %% Line 4647
	  <'complexType',S> when 'true' ->
	      {'complexType',S}
	  %% Line 4648
	  <'simpleContent',S> when 'true' ->
	      {'simpleContent',S}
	  %% Line 4649
	  <'complexContent',S> when 'true' ->
	      {'complexContent',S}
	  %% Line 4650
	  <'include',S> when 'true' ->
	      {'include',S}
	  %% Line 4651
	  <'import',S> when 'true' ->
	      {'import',S}
	  %% Line 4652
	  <'redefine',S> when 'true' ->
	      {'redefine',S}
	  %% Line 4653
	  <'unique',S> when 'true' ->
	      {'unique',S}
	  %% Line 4654
	  <'key',S> when 'true' ->
	      {'key',S}
	  %% Line 4655
	  <'keyref',S> when 'true' ->
	      {'keyref',S}
	  %% Line 4656
	  <'attribute',S> when 'true' ->
	      {'attribute',S}
	  %% Line 4657
	  <'attributeGroup',S> when 'true' ->
	      {'attributeGroup',S}
	  %% Line 4658
	  <'group',S> when 'true' ->
	      {'group',S}
	  %% Line 4659
	  <'all',S> when 'true' ->
	      {'all',S}
	  %% Line 4660
	  <'sequence',S> when 'true' ->
	      {'sequence',S}
	  %% Line 4661
	  <'choice',S> when 'true' ->
	      {'choice',S}
	  %% Line 4662
	  <'any',S> when 'true' ->
	      {'any',S}
	  %% Line 4663
	  <'anyAttribute',S> when 'true' ->
	      {'anyAttribute',S}
	  %% Line 4664
	  <'selector',S> when 'true' ->
	      {'selector',S}
	  %% Line 4665
	  <'field',S> when 'true' ->
	      {'field',S}
	  %% Line 4666
	  <'notation',S> when 'true' ->
	      {'notation',S}
	  %% Line 4667
	  <'appinfo',S> when 'true' ->
	      {'appinfo',S}
	  %% Line 4668
	  <'documentation',S> when 'true' ->
	      {'documentation',S}
	  %% Line 4669
	  <'restriction',S> when 'true' ->
	      {'restriction',S}
	  %% Line 4670
	  <'extension',S> when 'true' ->
	      {'extension',S}
	  %% Line 4671
	  <'list',S> when 'true' ->
	      {'list',S}
	  %% Line 4672
	  <'union',S> when 'true' ->
	      {'union',S}
	  %% Line 4673
	  <'schema',S> when 'true' ->
	      {'schema',S}
	  %% Line 4674
	  <'minExclusive',S> when 'true' ->
	      {'minExclusive',S}
	  %% Line 4675
	  <'minInclusive',S> when 'true' ->
	      {'minInclusive',S}
	  %% Line 4676
	  <'maxExclusive',S> when 'true' ->
	      {'maxExclusive',S}
	  %% Line 4677
	  <'maxInclusive',S> when 'true' ->
	      {'maxInclusive',S}
	  %% Line 4678
	  <'totalDigits',S> when 'true' ->
	      {'totalDigits',S}
	  %% Line 4679
	  <'fractionDigits',S> when 'true' ->
	      {'fractionDigits',S}
	  %% Line 4680
	  <'length',S> when 'true' ->
	      {'length',S}
	  %% Line 4681
	  <'minLength',S> when 'true' ->
	      {'minLength',S}
	  %% Line 4682
	  <'maxLength',S> when 'true' ->
	      {'maxLength',S}
	  %% Line 4683
	  <'enumeration',S> when 'true' ->
	      {'enumeration',S}
	  %% Line 4684
	  <'whiteSpace',S> when 'true' ->
	      {'whiteSpace',S}
	  %% Line 4685
	  <'pattern',S> when 'true' ->
	      {'pattern',S}
	  %% Line 4686
	  <Name,S = {'xsd_state',_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36}> when ( 'true'
																																     -| ['compiler_generated'] ) ->
	      let <_cor2> =
		  %% Line 4687
		  apply 'acc_errs'/2
		      (S, {[],'xmerl_xsd',{'unknown_content',Name}})
	      in  %% Line 4687
		  {Name,_cor2}
	  %% Line 4688
	  <Name,_cor37> when 'true' ->
	      %% Line 4689
	      call 'erlang':'exit'
		  ({'error',{'internal_error','not_implemented',Name}})
	end
'wildcard_namespace'/2 =
    %% Line 4702
    fun (_cor1,_cor0) ->
	let <AttVal> =
	    %% Line 4703
	    apply 'get_attribute_value'/3
		('namespace', _cor1, [35|[35|[97|[110|[121]]]]])
	in  let <ListOfVals> =
		%% Line 4704
		apply 'namestring2namelist'/1
		    (AttVal)
	    in  let <Pred> =
		    %% Line 4705
		    ( fun (_cor10) ->
			  case _cor10 of
			    <'##other'> when 'true' ->
				%% Line 4706
				( case _cor0 of
				    ( <( {'xsd_state',_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_rec344,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50}
					 -| ['compiler_generated'] )> when 'true' ->
					  case _rec344 of
					    %% Line 4707
					    <'undefined'> when 'true' ->
						{'not',['absent']}
					    %% Line 4708
					    <TN> when 'true' ->
						{'not',TN}
					  end
				      -| ['compiler_generated'] )
				    ( <_cor51> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {'badrecord','xsd_state'}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
			    %% Line 4710
			    <'##targetNamespace'> when 'true' ->
				%% Line 4711
				( case _cor0 of
				    ( <( {'xsd_state',_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_rec345,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,_cor69,_cor70,_cor71,_cor72,_cor73,_cor74,_cor75,_cor76,_cor77,_cor78,_cor79,_cor80,_cor81,_cor82}
					 -| ['compiler_generated'] )> when 'true' ->
					  case _rec345 of
					    %% Line 4712
					    <'undefined'> when 'true' ->
						'absent'
					    %% Line 4713
					    <TN> when 'true' ->
						TN
					  end
				      -| ['compiler_generated'] )
				    ( <_cor83> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {'badrecord','xsd_state'}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
			    %% Line 4715
			    <'##local'> when 'true' ->
				'absent'
			    %% Line 4717
			    <X> when 'true' ->
				X
			  end
		      -| [{'id',{0,0,'-wildcard_namespace/2-fun-0-'}}] )
		in  %% Line 4719
		    ( letrec
			  'lc$^0'/1 =
			      fun (_cor16) ->
				  case _cor16 of
				    <[X|_cor14]>
					when call 'erlang':'=/='
					      (X,
					       []) ->
					let <_cor17> =
					    apply 'lc$^0'/1
						(_cor14)
					in  ( [X|_cor17]
					      -| ['compiler_generated'] )
				    ( <[X|_cor14]> when 'true' ->
					  apply 'lc$^0'/1
					      (_cor14)
				      -| ['compiler_generated'] )
				    <[]> when 'true' ->
					[]
				    ( <_cor16> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor16})
					    -| [{'function_name',{'lc$^0',1}}] )
				      -| ['compiler_generated'] )
				  end
		      in  let <_cor15> =
			      call 'lists':'map'
				  (Pred, ListOfVals)
			  in  apply 'lc$^0'/1
				  (_cor15)
		      -| ['list_comprehension'] )
'processor_contents'/1 =
    %% Line 4721
    fun (_cor0) ->
	%% Line 4722
	case apply 'get_attribute_value'/3
		 ('processContents', _cor0, 'strict') of
	  %% Line 4723
	  <V>
	      when call 'erlang':'is_list'
		    (V) ->
	      call 'erlang':'list_to_atom'
		  (V)
	  %% Line 4724
	  <A> when 'true' ->
	      A
	end
'base_type'/1 =
    %% Line 4727
    fun (_cor0) ->
	%% Line 4728
	apply 'get_attribute_value'/3
	    ('base', _cor0, [])
'base_type_type'/1 =
    %% Line 4729
    fun (_cor0) ->
	%% Line 4730
	case call 'lists':'member'
		 ('simpleType', _cor0) of
	  %% Line 4731
	  <'true'> when 'true' ->
	      'simpleType'
	  %% Line 4732
	  <_cor3> when 'true' ->
	      'simple_or_complex_Type'
	end
'attribute_ref'/1 =
    %% Line 4735
    fun (_cor0) ->
	%% Line 4736
	apply 'get_attribute_value'/3
	    ('ref', _cor0, [])
'particle_ref'/1 =
    %% Line 4738
    fun (_cor0) ->
	%% Line 4739
	apply 'get_attribute_value'/3
	    ('ref', _cor0, [])
'attributeGroup_ref'/1 =
    %% Line 4741
    fun (_cor0) ->
	%% Line 4742
	apply 'get_attribute_value'/3
	    ('ref', _cor0, [])
'get_value'/1 =
    %% Line 4744
    fun (_cor0) ->
	%% Line 4745
	apply 'get_attribute_value'/3
	    ('value', _cor0, 'undefined')
'get_attribute_value'/3 =
    %% Line 4747
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Key,{'xmlElement',_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,Atts,_cor13,_cor14,_cor15,_cor16},Default> when 'true' ->
	      %% Line 4748
	      case apply 'keyNsearch'/4
		       (Key, 2, Atts, Default) of
		%% Line 4749
		<{'xmlAttribute',_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,V,_cor24}> when 'true' ->
		    %% Line 4750
		    V
		%% Line 4751
		<_cor25> when 'true' ->
		    Default
	      end
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'get_attribute_value',3}}] )
	    -| ['compiler_generated'] )
	end
'qualify_NCName'/2 =
    %% Line 4759
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <E = {'xmlElement',_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23},S> when 'true' ->
	      %% Line 4760
	      case apply 'get_local_name'/1
		       (E) of
		%% Line 4761
		<[]> when 'true' ->
		    'no_name'
		%% Line 4762
		<LocalName> when 'true' ->
		    %% Line 4764
		    ( case S of
			( <( {'xsd_state',_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_rec346,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54}
			     -| ['compiler_generated'] )> when 'true' ->
			      let <_cor5> =
				  case _rec346 of
				    %% Line 4765
				    <'undefined'> when 'true' ->
					%% Line 4766
					[]
				    %% Line 4767
				    <TNS> when 'true' ->
					%% Line 4768
					TNS
				  end
			      in  let <_cor9> =
				      %% Line 4770
				      apply 'atom_if_shortasciilist'/1
					  (LocalName)
				  in  %% Line 4770
				      {_cor9,_cor30,_cor5}
			  -| ['compiler_generated'] )
			( <_cor55> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','xsd_state'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
	      end
	  ( <_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11})
		  -| [{'function_name',{'qualify_NCName',2}}] )
	    -| ['compiler_generated'] )
	end
'get_local_name'/1 =
    %% Line 4774
    fun (_cor0) ->
	case _cor0 of
	  <{'xmlElement',_cor3,_cor4,_cor5,_cor6,_cor7,_cor8,Atts,_cor9,_cor10,_cor11,_cor12}> when 'true' ->
	      %% Line 4775
	      case apply 'keyNsearch'/4
		       ('name', 2, Atts, []) of
		%% Line 4776
		<{'xmlAttribute',_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,V,_cor20}> when 'true' ->
		    %% Line 4777
		    V
		%% Line 4778
		<Default> when 'true' ->
		    Default
	      end
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'get_local_name',1}}] )
	    -| ['compiler_generated'] )
	end
'local_name'/1 =
    %% Line 4781
    fun (_cor0) ->
	case _cor0 of
	  <Name>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      let <_cor1> =
		  %% Line 4782
		  call 'erlang':'atom_to_list'
		      (Name)
	      in  %% Line 4782
		  apply 'local_name'/1
		      (_cor1)
	  %% Line 4783
	  <Name>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      let <_cor4> =
		  %% Line 4784
		  ( fun (_cor2) ->
			case _cor2 of
			  <58> when 'true' ->
			      'false'
			  <_cor7> when 'true' ->
			      'true'
			end
		    -| [{'id',{0,0,'-local_name/1-fun-0-'}}] )
	      in  %% Line 4784
		  case call 'lists':'splitwith'
			   (_cor4, Name) of
		    %% Line 4785
		    <{_cor8,[58|LocalName]}> when 'true' ->
			call 'erlang':'list_to_atom'
			    (LocalName)
		    %% Line 4786
		    <_cor9> when 'true' ->
			%% Line 4787
			call 'erlang':'list_to_atom'
			    (Name)
		  end
	  ( <_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6})
		  -| [{'function_name',{'local_name',1}}] )
	    -| ['compiler_generated'] )
	end
'namestring2namelist'/1 =
    %% Line 4791
    fun (_cor0) ->
	%% Line 4792
	apply 'split_by_whitespace'/2
	    (_cor0, [])
'split_by_whitespace'/2 =
    %% Line 4793
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Str,Acc>
	      when try
		    let <_cor2> =
			call 'erlang':'is_list'
			    (Str)
		    in  let <_cor3> =
			    call 'erlang':'length'
				(Str)
			in  let <_cor4> =
				call 'erlang':'>'
				    (_cor3, 0)
			    in  call 'erlang':'and'
				    (_cor2, _cor4)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <F> =
		  %% Line 4794
		  ( fun (_cor5) ->
			case _cor5 of
			  <32> when 'true' ->
			      %% Line 4795
			      'false'
			  %% Line 4796
			  <_cor13> when 'true' ->
			      %% Line 4797
			      'true'
			end
		    -| [{'id',{0,0,'-split_by_whitespace/2-fun-0-'}}] )
	      in  %% Line 4799
		  case call 'lists':'splitwith'
			   (F, Str) of
		    <{Str1,Rest}> when 'true' ->
			let <_cor10> =
			    %% Line 4800
			    call 'string':'strip'
				(Rest)
			in  let <_cor9> =
				%% Line 4800
				call 'erlang':'list_to_atom'
				    (Str1)
			    in  %% Line 4800
				apply 'split_by_whitespace'/2
				    (_cor10, [_cor9|Acc])
		    ( <_cor8> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor8})
		      -| ['compiler_generated'] )
		  end
	  %% Line 4801
	  <_cor14,Acc> when 'true' ->
	      %% Line 4802
	      call 'lists':'reverse'
		  (Acc)
	end
'get_QName'/3 =
    %% Line 4808
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Name,NS,S>
	      when call 'erlang':'is_atom'
		    (Name) ->
	      let <_cor3> =
		  %% Line 4809
		  call 'erlang':'atom_to_list'
		      (Name)
	      in  %% Line 4809
		  apply 'get_QName'/3
		      (_cor3, NS, S)
	  %% Line 4810
	  <Name,NS,{'xsd_state',_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,Scope,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39}> when 'true' ->
	      %% Line 4811
	      ( case NS of
		  ( <( {'xmlNamespace',_rec348,_cor40}
		       -| ['compiler_generated'] )> when 'true' ->
			apply 'qualified_name'/4
			    (Name, NS, _rec348, Scope)
		    -| ['compiler_generated'] )
		  ( <_cor41> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','xmlNamespace'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'get_QName',3}}] )
	    -| ['compiler_generated'] )
	end
'qualified_name'/4 =
    %% Line 4813
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor6> =
	    %% Line 4814
	    ( fun (_cor4) ->
		  case _cor4 of
		    <58> when 'true' ->
			'false'
		    <_cor15> when 'true' ->
			'true'
		  end
	      -| [{'id',{0,0,'-qualified_name/4-fun-0-'}}] )
	in  %% Line 4814
	    case call 'lists':'splitwith'
		     (_cor6, _cor3) of
	      %% Line 4815
	      <{GlobalName,[58|LocalName]}> when 'true' ->
		  let <_cor8> =
		      apply 'atom_if_shortasciilist'/1
			  (LocalName)
		  in  let <_cor7> =
			  %% Line 4816
			  apply 'namespace'/3
			      (GlobalName, _cor2, _cor1)
		      in  {_cor8,_cor0,_cor7}
	      %% Line 4817
	      <_cor16> when 'true' ->
		  let <_cor9> =
		      %% Line 4818
		      apply 'atom_if_shortasciilist'/1
			  (_cor3)
		  in  %% Line 4818
		      {_cor9,_cor0,_cor1}
	    end
'atom_if_shortasciilist'/1 =
    %% Line 4821
    fun (_cor0) ->
	case _cor0 of
	  <N>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      let <_cor1> =
		  catch
		      %% Line 4822
		      call 'erlang':'list_to_atom'
			  (N)
	      in  %% Line 4822
		  case _cor1 of
		    %% Line 4823
		    <{'EXIT',_X_Reason}> when 'true' ->
			%% Line 4826
			N
		    %% Line 4827
		    <AN> when 'true' ->
			AN
		  end
	  %% Line 4829
	  <N> when 'true' ->
	      %% Line 4830
	      N
	end
'namespace'/3 =
    %% Line 4832
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[120|[109|[108]]],_cor9,_cor10> when 'true' ->
	      'http://www.w3.org/XML/1998/namespace'
	  %% Line 4833
	  <Prefix,NS,Default> when 'true' ->
	      %% Line 4834
	      ( case NS of
		  ( <( {'xmlNamespace',_cor11,_rec349}
		       -| ['compiler_generated'] )> when 'true' ->
			case apply 'key1search'/3
				 (Prefix, _rec349, Default) of
			  %% Line 4835
			  <{_cor13,Namespace}>
			      when call 'erlang':'=:='
				    (_cor13,
				     Prefix) ->
			      %% Line 4836
			      Namespace
			  %% Line 4837
			  <Namespace> when 'true' ->
			      Namespace
			end
		    -| ['compiler_generated'] )
		  ( <_cor12> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','xmlNamespace'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'mk_EII_QName'/3 =
    %% Line 4848
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Name,{'xmlElement',Me,_cor16,_cor17,NS,P,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23},S>
	      when %% Line 4849
		call 'erlang':'is_list'
		    (Name) ->
	      let <_cor3> =
		  %% Line 4850
		  call 'erlang':'list_to_atom'
		      (Name)
	      in  %% Line 4850
		  apply 'mk_EII_QName'/3
		      (_cor3, %% Line 4851
			      {'xmlElement',Me,[],[],NS,P,'undefined',[],[],[],[],'undeclared'}, %% Line 4851
												 S)
	  %% Line 4852
	  <Name,{'xmlElement',Me,_cor24,_cor25,NS,P,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31},S> when 'true' ->
	      %% Line 4853
	      ( case S of
		  ( <( {'xsd_state',_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_rec350,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62}
		       -| ['compiler_generated'] )> when 'true' ->
			let <NameStr> =
			    %% Line 4854
			    call 'erlang':'atom_to_list'
				(Name)
			in  %% Line 4855
			    case call 'string':'tokens'
				     (NameStr, [58]) of
			      %% Line 4856
			      <[[120|[109|[108|[110|[115]]]]]|[PrefixDef|[]]]> when 'true' ->
				  let <_cor8> =
				      %% Line 4857
				      apply 'namespace'/3
					  (PrefixDef, NS, [])
				  in  %% Line 4857
				      {'xmlns',_rec350,_cor8}
			      %% Line 4858
			      <[Prefix|[LocalName|[]]]> when 'true' ->
				  let <_cor10> =
				      %% Line 4859
				      call 'erlang':'list_to_atom'
					  (LocalName)
				  in  let <_cor9> =
					  %% Line 4859
					  apply 'namespace'/3
					      (Prefix, NS, [])
				      in  %% Line 4859
					  {_cor10,_rec350,_cor9}
			      %% Line 4860
			      <[_X_LocalName|[]]> when 'true' ->
				  let <_cor11> =
				      %% Line 4861
				      apply 'mk_EII_namespace'/3
					  ([{Me,0}|P], NS, S)
				  in  %% Line 4861
				      {Name,_rec350,_cor11}
			      ( <_cor12> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor12})
				-| ['compiler_generated'] )
			    end
		    -| ['compiler_generated'] )
		  ( <_cor63> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','xsd_state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_cor15,_cor14,_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14,_cor13})
		  -| [{'function_name',{'mk_EII_QName',3}}] )
	    -| ['compiler_generated'] )
	end
'mk_EII_namespace'/3 =
    %% Line 4863
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],{'xmlNamespace',DefaultNS,_cor9},_X_S> when 'true' ->
	      %% Line 4864
	      DefaultNS
	  %% Line 4866
	  <[{PName,_cor10}|GrandPs],NS,S> when 'true' ->
	      let <NameStr> =
		  %% Line 4867
		  call 'erlang':'atom_to_list'
		      (PName)
	      in  %% Line 4868
		  case call 'string':'tokens'
			   (NameStr, [58]) of
		    %% Line 4869
		    <[Prefix|[_X_LocalName|[]]]> when 'true' ->
			%% Line 4870
			apply 'namespace'/3
			    (Prefix, NS, [])
		    %% Line 4871
		    <[_X_LocalName|[]]> when 'true' ->
			%% Line 4872
			apply 'mk_EII_namespace'/3
			    (GrandPs, NS, S)
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor4})
		      -| ['compiler_generated'] )
		  end
	  %% Line 4874
	  <_cor11,NS,_X_S> when 'true' ->
	      %% Line 4875
	      ( case NS of
		  ( <( {'xmlNamespace',_rec351,_cor12}
		       -| ['compiler_generated'] )> when 'true' ->
			_rec351
		    -| ['compiler_generated'] )
		  ( <_cor13> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','xmlNamespace'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'mk_EII_Att_QName'/3 =
    %% Line 4877
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <AttName,XMLEl,S>
	      when call 'erlang':'is_list'
		    (AttName) ->
	      let <_cor3> =
		  %% Line 4878
		  call 'erlang':'list_to_atom'
		      (AttName)
	      in  %% Line 4878
		  apply 'mk_EII_Att_QName'/3
		      (_cor3, XMLEl, S)
	  %% Line 4879
	  <AttName,XMLEl,S> when 'true' ->
	      let <NameStr> =
		  %% Line 4880
		  call 'erlang':'atom_to_list'
		      (AttName)
	      in  let <_cor6> =
		      %% Line 4881
		      call 'lists':'member'
			  (58, NameStr)
		  in  let <_cor5> =
			  %% Line 4881
			  apply 'mk_EII_QName'/3
			      (AttName, XMLEl, S)
		      in  %% Line 4881
			  {_cor6,_cor5}
	end
'create_tables'/1 =
    %% Line 4888
    fun (_cor0) ->
	case _cor0 of
	  <S = {'xsd_state',_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,'undefined',_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35}> when 'true' ->
	      let <Tid> =
		  %% Line 4889
		  call 'ets':'new'
		      ('xmerl_schema_tab', [])
	      in  do  %% Line 4890
		      apply 'initial_tab_data'/1
			  (Tid)
		      %% Line 4891
		      call 'erlang':'setelement'
			  (17, S, Tid)
	  %% Line 4892
	  <S> when 'true' ->
	      %% Line 4893
	      S
	end
'delete_table'/1 =
    %% Line 4895
    fun (_cor0) ->
	case _cor0 of
	  <{'xsd_state',_cor2,_cor3,_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,Tab,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32}> when 'true' ->
	      catch
		  %% Line 4896
		  call 'ets':'delete'
		      (Tab)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'delete_table',1}}] )
	    -| ['compiler_generated'] )
	end
'print_table'/1 =
    %% Line 4899
    fun (_cor0) ->
	case _cor0 of
	  <{'xsd_state',_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,Tab,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34}> when 'true' ->
	      let <_cor1> =
		  catch
		      %% Line 4900
		      call 'ets':'tab2list'
			  (Tab)
	      in  %% Line 4900
		  case _cor1 of
		    %% Line 4901
		    <Res>
			when call 'erlang':'is_list'
			      (_cor1) ->
			%% Line 4902
			Res
		    %% Line 4903
		    <{'EXIT',Reason}> when 'true' ->
			%% Line 4904
			{'error',{'xmerl_xsd',[],Reason}}
		    ( <_cor2> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor2})
		      -| ['compiler_generated'] )
		  end
	  %% Line 4906
	  <_cor35> when 'true' ->
	      %% Line 4907
	      'ok'
	end
'save_object'/2 =
    %% Line 4914
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{Kind,Obj},S = {'xsd_state',_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,'true',_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47}>
	      when let <_cor2> =
		    %% Line 4915
		    call 'erlang':'=:='
			(Kind, 'simpleType')
		in  let <_cor3> =
			%% Line 4915
			call 'erlang':'=:='
			    (Kind, 'complexType')
		    in  %% Line 4915
			call 'erlang':'or'
			    (_cor2, _cor3) ->
	      let <_cor4> =
		  %% Line 4916
		  apply 'object_name'/1
		      (Obj)
	      in  %% Line 4916
		  apply 'save_in_table'/3
		      ({Kind,'redefine',_cor4}, Obj, S)
	  %% Line 4917
	  <{Kind,Obj},S = {'xsd_state',_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,'true',_cor65,_cor66,_cor67,_cor68,_cor69,_cor70,_cor71,_cor72,_cor73,_cor74,_cor75,_cor76,_cor77,_cor78}>
	      when let <_cor5> =
		    %% Line 4918
		    call 'erlang':'=:='
			(Kind, 'group')
		in  let <_cor6> =
			%% Line 4918
			call 'erlang':'=:='
			    (Kind, 'attributeGroup')
		    in  %% Line 4918
			call 'erlang':'or'
			    (_cor5, _cor6) ->
	      let <_cor7> =
		  %% Line 4919
		  apply 'object_name'/1
		      (Obj)
	      in  %% Line 4919
		  apply 'save_in_table'/3
		      ({Kind,_cor7}, Obj, S)
	  %% Line 4920
	  <{Kind,Obj},S>
	      when let <_cor8> =
		    call 'erlang':'=:='
			(Kind, 'simpleType')
		in  let <_cor9> =
			call 'erlang':'=:='
			    (Kind, 'complexType')
		    in  call 'erlang':'or'
			    (_cor8, _cor9) ->
	      let <_cor10> =
		  %% Line 4921
		  apply 'object_name'/1
		      (Obj)
	      in  %% Line 4921
		  apply 'save_unique_type'/3
		      ({Kind,_cor10}, Obj, S)
	  %% Line 4922
	  <{Kind,Obj},S>
	      when let <_cor11> =
		    %% Line 4923
		    call 'erlang':'=:='
			(Kind, 'attributeGroup')
		in  let <_cor12> =
			%% Line 4923
			call 'erlang':'=:='
			    (Kind, 'group')
		    in  %% Line 4923
			call 'erlang':'or'
			    (_cor11, _cor12) ->
	      let <_cor13> =
		  %% Line 4924
		  apply 'object_name'/1
		      (Obj)
	      in  %% Line 4924
		  apply 'save_uniquely'/3
		      ({Kind,_cor13}, Obj, S)
	  %% Line 4925
	  <{Kind,Obj},S> when 'true' ->
	      let <_cor14> =
		  %% Line 4926
		  apply 'object_name'/1
		      (Obj)
	      in  %% Line 4926
		  apply 'save_in_table'/3
		      ({Kind,_cor14}, Obj, S)
	  ( <_cor16,_cor15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15})
		  -| [{'function_name',{'save_object',2}}] )
	    -| ['compiler_generated'] )
	end
'save_unique_type'/3 =
    %% Line 4928
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Key = {_cor7,Name},Obj,S> when 'true' ->
	      %% Line 4929
	      case apply 'resolve'/2
		       ({'simple_or_complex_Type',Name}, S) of
		%% Line 4930
		<{{'schema_simple_type',_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16},_cor17}> when 'true' ->
		    %% Line 4931
		    apply 'acc_errs'/2
			(S, {[],'xmerl_xsd',{'type_not_uniquely_defined_in_schema',Name}})
		%% Line 4932
		<{{'schema_complex_type',_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31},_cor32}> when 'true' ->
		    %% Line 4933
		    apply 'acc_errs'/2
			(S, {[],'xmerl_xsd',{'type_not_uniquely_defined_in_schema',Name}})
		%% Line 4934
		<_cor33> when 'true' ->
		    %% Line 4935
		    apply 'save_in_table'/3
			(Key, Obj, S)
	      end
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'save_unique_type',3}}] )
	    -| ['compiler_generated'] )
	end
'save_uniquely'/3 =
    %% Line 4938
    fun (_cor2,_cor1,_cor0) ->
	%% Line 4939
	case apply 'load_object'/2
		 (_cor2, _cor0) of
	  %% Line 4940
	  <{[],_cor7}> when 'true' ->
	      %% Line 4941
	      apply 'save_in_table'/3
		  (_cor2, _cor1, _cor0)
	  %% Line 4942
	  <_cor8> when 'true' ->
	      %% Line 4943
	      apply 'acc_errs'/2
		  (_cor0, {[],'xmerl_xsd',{'not_uniquely_defined_in_schema',_cor2}})
	end
'save_schema_element'/2 =
    %% Line 4948
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <CM,S = {'xsd_state',_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,EFD,%% Line 4949
											   AFD,_cor42,%% Line 4950
												      TN,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,%% Line 4951
																		   FD,%% Line 4952
																		      BD,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60}> when 'true' ->
	      let <_cor6> =
		  %% Line 4953
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor4) ->
				case _cor4 of
				  <[X = {'element',_cor61}|_cor3]> when 'true' ->
				      let <_cor5> =
					  apply 'lc$^0'/1
					      (_cor3)
				      in  ( [X|_cor5]
					    -| ['compiler_generated'] )
				  ( <[_cor2|_cor3]> when 'true' ->
					apply 'lc$^0'/1
					    (_cor3)
				    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor4> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor4})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (CM)
		    -| ['list_comprehension'] )
	      in  let <Schema> =
		      %% Line 4955
		      apply 'get_schema_cm'/2
			  (_cor46, TN)
		  in  let <_cor27> =
			  %% Line 4957
			  case call 'erlang':'=:='
				   (Schema, {'schema','undefined','undefined','undefined',[],[],'undefined',[]}) of
			    %% Line 4958
			    <'true'> when 'true' ->
				%% Line 4964
				case Schema of
				  <{'schema',_rec355,_rec356,_rec357,_rec358,_rec359,_rec360,_rec361}> when 'true' ->
				      {'schema',EFD,AFD,TN,BD,FD,_rec360,_cor6}
				  ( <_cor94> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','schema'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
			    %% Line 4965
			    <_cor95> when 'true' ->
				%% Line 4966
				( case Schema of
				    ( <( {'schema',_cor96,_cor97,_cor98,_cor99,_cor100,_cor101,_rec362}
					 -| ['compiler_generated'] )> when 'true' ->
					  let <_cor22> =
					      %% Line 4967
					      ( letrec
						    'lc$^1'/1 =
							fun (_cor19) ->
							    case _cor19 of
							      <[X|_cor17]> when 'true' ->
								  let <_cor18> =
								      call 'lists':'member'
									  (X, _cor6)
								  in  ( case <> of
									  <>
									      when call 'erlang':'=:='
										    (_cor18,
										     'false') ->
									      let <_cor20> =
										  apply 'lc$^1'/1
										      (_cor17)
									      in  ( [X|_cor20]
										    -| ['compiler_generated'] )
									  ( <> when 'true' ->
										apply 'lc$^1'/1
										    (_cor17)
									    -| ['compiler_generated'] )
									end
									-| ['list_comprehension'] )
							      <[]> when 'true' ->
								  _cor6
							      ( <_cor19> when 'true' ->
								    ( primop 'match_fail'
									  ({'function_clause',_cor19})
								      -| [{'function_name',{'lc$^1',1}}] )
								-| ['compiler_generated'] )
							    end
						in  apply 'lc$^1'/1
							(_rec362)
						-| ['list_comprehension'] )
					  in  %% Line 4967
					      call 'erlang':'setelement'
						  (8, Schema, _cor22)
				      -| ['compiler_generated'] )
				    ( <_cor102> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {'badrecord','schema'}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
			  end
		      in  let <_cor30> =
			      %% Line 4969
			      case TN of
				%% Line 4970
				<'undefined'> when 'true' ->
				    []
				%% Line 4971
				<_cor111> when 'true' ->
				    TN
			      end
			  in  do  %% Line 4973
				  apply 'save_in_table'/3
				      ({'schema',_cor30}, _cor27, S)
				  %% Line 4974
				  apply 'save_to_file'/1
				      (S)
	  ( <_cor33,_cor32> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor33,_cor32})
		  -| [{'function_name',{'save_schema_element',2}}] )
	    -| ['compiler_generated'] )
	end
'save_to_file'/2 =
    %% Line 4998
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <S = {'xsd_state',_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,'true',_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37},FileName> when 'true' ->
	      let <_cor4> =
		  %% Line 4999
		  call 'erlang':'setelement'
		      (18, S, FileName)
	      in  %% Line 4999
		  apply 'save_to_file'/1
		      (_cor4)
	  %% Line 5000
	  <_cor71,_cor72> when 'true' ->
	      %% Line 5001
	      'ok'
	end
'save_to_file'/1 =
    %% Line 5003
    fun (_cor0) ->
	case _cor0 of
	  <S = {'xsd_state',_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,TF,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45}> when 'true' ->
	      %% Line 5004
	      case TF of
		%% Line 5005
		<'true'> when 'true' ->
		    let <_cor3> =
			%% Line 5006
			call 'filename':'rootname'
			    (_cor15)
		    in  let <_cor4> =
			    %% Line 5006
			    call 'erlang':'++'
				(_cor3, [46|[116|[97|[98]]]])
			in  %% Line 5006
			    case call 'file':'open'
				     (_cor4, %% Line 5007
					     ['write']) of
			      <{'ok',IO}> when 'true' ->
				  let <_cor8> =
				      catch
					  %% Line 5008
					  call 'ets':'tab2list'
					      (_cor30)
				  in  do  %% Line 5008
					  call 'io':'format'
					      (IO, [126|[112|[126|[110]]]], [_cor8|[]])
					  %% Line 5009
					  call 'file':'close'
					      (IO)
			      ( <_cor5> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor5})
				-| ['compiler_generated'] )
			    end
		%% Line 5010
		<'false'> when 'true' ->
		    %% Line 5011
		    'ok'
		%% Line 5012
		<IOFile> when 'true' ->
		    %% Line 5013
		    case call 'file':'open'
			     (IOFile, ['write']) of
		      <{'ok',IO}> when 'true' ->
			  let <_cor12> =
			      catch
				  %% Line 5014
				  call 'ets':'tab2list'
				      (_cor30)
			  in  do  %% Line 5014
				  call 'io':'format'
				      (IO, [126|[112|[126|[110]]]], [_cor12|[]])
				  %% Line 5015
				  call 'file':'close'
				      (IO)
		      ( <_cor9> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor9})
			-| ['compiler_generated'] )
		    end
	      end
	  ( <_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14})
		  -| [{'function_name',{'save_to_file',1}}] )
	    -| ['compiler_generated'] )
	end
'save_merged_type'/2 =
    %% Line 5018
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Type = {'schema_simple_type',_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12},S> when 'true' ->
	      %% Line 5019
	      apply 'resave_object'/2
		  ({'simpleType',Type}, S)
	  %% Line 5020
	  <Type = {'schema_complex_type',_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26},S> when 'true' ->
	      %% Line 5021
	      apply 'resave_object'/2
		  ({'complexType',Type}, S)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'save_merged_type',2}}] )
	    -| ['compiler_generated'] )
	end
'resave_object'/2 =
    %% Line 5022
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{Kind,Obj},S> when 'true' ->
	      let <_cor2> =
		  %% Line 5023
		  apply 'object_name'/1
		      (Obj)
	      in  %% Line 5023
		  apply 'save_in_table'/3
		      ({Kind,_cor2}, Obj, S)
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'resave_object',2}}] )
	    -| ['compiler_generated'] )
	end
'save_in_table'/3 =
    %% Line 5025
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Name,ElDef,S = {'xsd_state',_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,Tab,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36}> when 'true' ->
	      do  catch
		      %% Line 5026
		      call 'ets':'insert'
			  (Tab, {Name,ElDef})
		  %% Line 5027
		  S
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'save_in_table',3}}] )
	    -| ['compiler_generated'] )
	end
'save_idc'/3 =
    %% Line 5029
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'key',IDConstr,S> when 'true' ->
	      %% Line 5030
	      apply 'save_key'/2
		  (IDConstr, S)
	  %% Line 5031
	  <'keyref',IDConstr,S> when 'true' ->
	      %% Line 5032
	      apply 'save_keyref'/2
		  (IDConstr, S)
	  %% Line 5033
	  <'unique',IDConstr,S> when 'true' ->
	      %% Line 5034
	      apply 'save_unique'/2
		  (IDConstr, S)
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'save_idc',3}}] )
	    -| ['compiler_generated'] )
	end
'save_key'/2 =
    %% Line 5036
    fun (_cor1,_cor0) ->
	do  %% Line 5037
	    apply 'save_object'/2
		({'key',_cor1}, _cor0)
	    _cor0
'save_keyref'/2 =
    %% Line 5040
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <KeyRef = {'id_constraint','keyref',_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11},S> when 'true' ->
	      let <S1> =
		  %% Line 5041
		  apply 'add_keyref'/2
		      (KeyRef, S)
	      in  do  %% Line 5042
		      apply 'save_object'/2
			  ({'keyref',KeyRef}, S1)
		      %% Line 5043
		      S1
	  %% Line 5044
	  <_cor12,S> when 'true' ->
	      %% Line 5045
	      S
	end
'save_unique'/2 =
    %% Line 5047
    fun (_cor1,_cor0) ->
	do  %% Line 5048
	    apply 'save_object'/2
		({'unique',_cor1}, _cor0)
	    _cor0
'save_substitutionGroup'/2 =
    %% Line 5051
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],S> when 'true' ->
	      %% Line 5052
	      S
	  %% Line 5053
	  <[{Head,Members}|SGs],S> when 'true' ->
	      do  %% Line 5055
		  apply 'save_in_table'/3
		      ({'substitutionGroup',Head}, Members, S)
		  let <_cor4> =
		      %% Line 5058
		      ( fun (_cor2) ->
			    apply 'save_in_table'/3
				({'substitutionGroup_member',_cor2}, Head, S)
			-| [{'id',{0,0,'-save_substitutionGroup/2-fun-0-'}}] )
		  in  do  %% Line 5058
			  call 'lists':'foreach'
			      (_cor4, Members)
			  %% Line 5059
			  apply 'save_substitutionGroup'/2
			      (SGs, S)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'save_substitutionGroup',2}}] )
	    -| ['compiler_generated'] )
	end
'substitutionGroup_member'/2 =
    %% Line 5060
    fun (_cor1,_cor0) ->
	%% Line 5061
	case apply 'load_object'/2
		 ({'substitutionGroup_member',_cor1}, _cor0) of
	  %% Line 5062
	  <{[],_cor5}> when 'true' ->
	      %% Line 5063
	      'false'
	  %% Line 5064
	  <{Res,_cor6}> when 'true' ->
	      %% Line 5065
	      Res
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor2})
	    -| ['compiler_generated'] )
	end
'add_keyref'/2 =
    %% Line 5075
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'id_constraint',_cor7,_cor8,Name,Refer,_cor9,_cor10,_cor11,_cor12},S = %% Line 5076
										   {'xsd_state',_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,KeyRefs,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43}> when 'true' ->
	      let <_rec369> =
		  %% Line 5077
		  apply 'add_once'/2
		      ({'keyref',Name,Refer}, KeyRefs)
	      in  %% Line 5077
		  call 'erlang':'setelement'
		      (26, S, _rec369)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'add_keyref',2}}] )
	    -| ['compiler_generated'] )
	end
'load_redefine_object'/2 =
    %% Line 5080
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{Kind,Name},S> when 'true' ->
	      %% Line 5081
	      apply 'load_object'/2
		  ({Kind,'redefine',Name}, S)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'load_redefine_object',2}}] )
	    -| ['compiler_generated'] )
	end
'load_object'/2 =
    %% Line 5083
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'element',{QN,Occ = {Min,_cor12}}},S>
	      when call 'erlang':'is_integer'
		    (Min) ->
	      %% Line 5084
	      case apply 'load_object'/2
		       ({'element',QN}, S) of
		%% Line 5085
		<{SE = {'schema_element',_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27},S1}> when 'true' ->
		    let <_cor4> =
			call 'erlang':'setelement'
			    (11, SE, Occ)
		    in  {_cor4,S1}
		%% Line 5086
		<Other> when 'true' ->
		    Other
	      end
	  %% Line 5088
	  <{'group',{QN,_X_Occ = {Min,_cor44}}},S>
	      when call 'erlang':'is_integer'
		    (Min) ->
	      %% Line 5089
	      apply 'load_object'/2
		  ({'group',QN}, S)
	  %% Line 5090
	  <Key,S = {'xsd_state',_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,Tab,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,_cor69,_cor70,_cor71,_cor72,_cor73,_cor74,_cor75}> when 'true' ->
	      %% Line 5091
	      case call 'ets':'lookup'
		       (Tab, Key) of
		%% Line 5092
		<[{_cor76,Value}|[]]>
		    when call 'erlang':'=:='
			  (_cor76,
			   Key) ->
		    %% Line 5093
		    {Value,S}
		%% Line 5094
		<[]> when 'true' ->
		    let <_cor6> =
			%% Line 5095
			apply 'global_def'/1
			    (Key)
		    in  %% Line 5095
			case call 'ets':'lookup'
				 (Tab, _cor6) of
			  %% Line 5096
			  <[{_cor77,Value}|[]]> when 'true' ->
			      let <_cor7> =
				  apply 'global_scope'/1
				      (S)
			      in  {Value,_cor7}
			  %% Line 5097
			  <Other> when 'true' ->
			      {Other,S}
			end
		%% Line 5099
		<Other> when 'true' ->
		    %% Line 5100
		    {Other,S}
	      end
	  ( <_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10})
		  -| [{'function_name',{'load_object',2}}] )
	    -| ['compiler_generated'] )
	end
'load_keyref'/2 =
    %% Line 5104
    fun (_cor1,_cor0) ->
	%% Line 5105
	case apply 'load_object'/2
		 ({'keyref',_cor1}, _cor0) of
	  %% Line 5106
	  <{KeyRef = {'id_constraint',_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12},_cor13}> when 'true' ->
	      KeyRef
	  %% Line 5107
	  <_cor14> when 'true' ->
	      %% Line 5108
	      []
	end
'load_key'/2 =
    %% Line 5110
    fun (_cor1,_cor0) ->
	%% Line 5111
	case apply 'load_object'/2
		 ({'key',_cor1}, _cor0) of
	  %% Line 5112
	  <{Key = {'id_constraint',_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13},_cor14}> when 'true' ->
	      Key
	  %% Line 5113
	  <_cor15> when 'true' ->
	      %% Line 5114
	      case apply 'load_object'/2
		       ({'unique',_cor1}, _cor0) of
		%% Line 5115
		<{Key = {'id_constraint',_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23},_cor24}> when 'true' ->
		    Key
		%% Line 5116
		<_cor25> when 'true' ->
		    %% Line 5117
		    []
	      end
	end
'save_ID'/2 =
    %% Line 5126
    fun (_cor1,_cor0) ->
	%% Line 5127
	( case _cor0 of
	    ( <( {'xsd_state',_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_rec372,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42}
		 -| ['compiler_generated'] )> when 'true' ->
		  case call 'lists':'member'
			   (_cor1, _rec372) of
		    %% Line 5128
		    <'true'> when 'true' ->
			%% Line 5129
			apply 'acc_errs'/2
			    (_cor0, {'ID_name_not_unique',_cor1})
		    %% Line 5130
		    <_cor44> when 'true' ->
			let <_rec373> =
			    %% Line 5131
			    [_cor1|_rec372]
			in  %% Line 5131
			    call 'erlang':'setelement'
				(27, _cor0, _rec373)
		  end
	      -| ['compiler_generated'] )
	    ( <_cor43> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','xsd_state'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'check_and_save_ID'/2 =
    %% Line 5133
    fun (_cor1,_cor0) ->
	%% Line 5134
	case call 'xmerl_xsd_type':'check_simpleType'
		 ('ID', _cor1, _cor0) of
	  %% Line 5135
	  <{'ok',_cor5}>
	      when call 'erlang':'=:='
		    (_cor5,
		     _cor1) ->
	      %% Line 5136
	      apply 'save_ID'/2
		  (_cor1, _cor0)
	  %% Line 5137
	  <_cor6> when 'true' ->
	      %% Line 5138
	      apply 'acc_errs'/2
		  (_cor0, {'illegal_ID_value',_cor1})
	end
'insert_substitutionGroup'/2 =
    %% Line 5141
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'schema_element',_cor11,_cor12,_cor13,'undefined',_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24},S> when 'true' ->
	      %% Line 5142
	      S
	  %% Line 5143
	  <{'schema_element',Name,_cor25,_cor26,%% Line 5144
						SG,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37},S = %% Line 5145
																     {'xsd_state',_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,SGregister,_cor64,_cor65,_cor66,_cor67,_cor68}> when 'true' ->
	      %% Line 5146
	      case apply 'key1search'/3
		       (SG, SGregister, []) of
		%% Line 5147
		<{_cor69,SGList}> when 'true' ->
		    let <_rec376> =
			%% Line 5149
			call 'lists':'keyreplace'
			    (SG, 1, SGregister, {SG,[Name|SGList]})
		    in  %% Line 5148
			call 'erlang':'setelement'
			    (28, S, _rec376)
		%% Line 5150
		<_cor103> when 'true' ->
		    let <_rec378> =
			%% Line 5151
			[{SG,[Name|[]]}|SGregister]
		    in  %% Line 5151
			call 'erlang':'setelement'
			    (28, S, _rec378)
	      end
	  ( <_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9})
		  -| [{'function_name',{'insert_substitutionGroup',2}}] )
	    -| ['compiler_generated'] )
	end
'global_scope'/1 =
    %% Line 5155
    fun (_cor0) ->
	case _cor0 of
	  <S = {'xsd_state',_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35}> when 'true' ->
	      %% Line 5156
	      call 'erlang':'setelement'
		  (8, S, [])
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'global_scope',1}}] )
	    -| ['compiler_generated'] )
	end
'global_def'/1 =
    %% Line 5158
    fun (_cor0) ->
	case _cor0 of
	  <{Kind,{Local,_cor16,NS}}>
	      when let <_cor1> =
		    %% Line 5159
		    call 'erlang':'=:='
			(Kind, 'simpleType')
		in  let <_cor2> =
			%% Line 5159
			call 'erlang':'=:='
			    (Kind, 'complexType')
		    in  let <_cor3> =
			    %% Line 5159
			    call 'erlang':'=:='
				(Kind, 'group')
			in  let <_cor4> =
				%% Line 5160
				call 'erlang':'=:='
				    (Kind, 'attributeGroup')
			    in  let <_cor5> =
				    %% Line 5160
				    call 'erlang':'=:='
					(Kind, 'element')
				in  let <_cor6> =
					%% Line 5160
					call 'erlang':'=:='
					    (Kind, 'attribute')
				    in  let <_cor7> =
					    %% Line 5161
					    call 'erlang':'=:='
						(Kind, 'substitutionGroup')
					in  let <_cor8> =
						%% Line 5161
						call 'erlang':'=:='
						    (Kind, 'substitutionGroup_member')
					    in  let <_cor9> =
						    %% Line 5161
						    call 'erlang':'or'
							(_cor7, _cor8)
						in  let <_cor10> =
							%% Line 5160
							call 'erlang':'or'
							    (_cor6, _cor9)
						    in  let <_cor11> =
							    %% Line 5160
							    call 'erlang':'or'
								(_cor5, _cor10)
							in  let <_cor12> =
								%% Line 5160
								call 'erlang':'or'
								    (_cor4, _cor11)
							    in  let <_cor13> =
								    %% Line 5159
								    call 'erlang':'or'
									(_cor3, _cor12)
								in  let <_cor14> =
									%% Line 5159
									call 'erlang':'or'
									    (_cor2, _cor13)
								    in  %% Line 5159
									call 'erlang':'or'
									    (_cor1, _cor14) ->
	      %% Line 5162
	      {Kind,{Local,[],NS}}
	  %% Line 5163
	  <D> when 'true' ->
	      D
	end
'get_schema_cm'/2 =
    %% Line 5166
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Tab,'undefined'> when 'true' ->
	      %% Line 5167
	      apply 'get_schema_cm'/2
		  (Tab, [])
	  %% Line 5168
	  <Tab,[]> when 'true' ->
	      %% Line 5169
	      apply 'get_schema_cm1'/2
		  (Tab, [])
	  %% Line 5170
	  <Tab,Namespace> when 'true' ->
	      let <NoNamespaceC> =
		  %% Line 5171
		  apply 'get_no_namespace_content'/1
		      (Tab)
	      in  let <Schema> =
		      %% Line 5172
		      apply 'get_schema_cm1'/2
			  (Tab, Namespace)
		  in  %% Line 5173
		      ( case Schema of
			  ( <( {'schema',_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_rec381}
			       -| ['compiler_generated'] )> when 'true' ->
				let <_cor13> =
				    %% Line 5174
				    ( letrec
					  'lc$^0'/1 =
					      fun (_cor10) ->
						  case _cor10 of
						    <[X|_cor8]> when 'true' ->
							let <_cor9> =
							    call 'lists':'member'
								(X, _rec381)
							in  ( case <> of
								<>
								    when call 'erlang':'=:='
									  (_cor9,
									   'false') ->
								    let <_cor11> =
									apply 'lc$^0'/1
									    (_cor8)
								    in  ( [X|_cor11]
									  -| ['compiler_generated'] )
								( <> when 'true' ->
								      apply 'lc$^0'/1
									  (_cor8)
								  -| ['compiler_generated'] )
							      end
							      -| ['list_comprehension'] )
						    <[]> when 'true' ->
							[]
						    ( <_cor10> when 'true' ->
							  ( primop 'match_fail'
								({'function_clause',_cor10})
							    -| [{'function_name',{'lc$^0',1}}] )
						      -| ['compiler_generated'] )
						  end
				      in  apply 'lc$^0'/1
					      (NoNamespaceC)
				      -| ['list_comprehension'] )
				in  let <_rec382> =
					%% Line 5174
					call 'erlang':'++'
					    (_rec381, _cor13)
				    in  %% Line 5174
					call 'erlang':'setelement'
					    (8, Schema, _rec382)
			    -| ['compiler_generated'] )
			  ( <_cor25> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','schema'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
	end
'get_schema_cm1'/2 =
    %% Line 5175
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    catch
		%% Line 5176
		call 'ets':'lookup'
		    (_cor1, {'schema',_cor0})
	in  %% Line 5176
	    case _cor2 of
	      %% Line 5177
	      <[{_cor6,H}|[]]> when 'true' ->
		  %% Line 5178
		  H
	      %% Line 5179
	      <_cor7> when 'true' ->
		  %% Line 5180
		  {'schema','undefined','undefined','undefined',[],[],'undefined',[]}
	    end
'get_no_namespace_content'/1 =
    %% Line 5182
    fun (_cor0) ->
	%% Line 5183
	case apply 'get_schema_cm1'/2
		 (_cor0, []) of
	  %% Line 5184
	  <{'schema',_cor3,_cor4,_cor5,_cor6,_cor7,_cor8,C}> when 'true' ->
	      %% Line 5185
	      C
	  %% Line 5186
	  <_cor9> when 'true' ->
	      []
	end
'is_simple_type'/2 =
    %% Line 5192
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{LName,Scope,NS},S>
	      when call 'erlang':'is_atom'
		    (LName) ->
	      let <_cor2> =
		  %% Line 5193
		  call 'erlang':'atom_to_list'
		      (LName)
	      in  %% Line 5193
		  apply 'is_simple_type'/2
		      ({_cor2,Scope,NS}, S)
	  %% Line 5194
	  <QName = {_cor6,_cor7,_cor8},S> when 'true' ->
	      %% Line 5195
	      case call 'xmerl_lib':'is_builtin_simple_type'
		       (QName) of
		%% Line 5196
		<'true'> when 'true' ->
		    %% Line 5197
		    'true'
		%% Line 5198
		<_cor9> when 'true' ->
		    %% Line 5199
		    apply 'is_derived_simple_type'/2
			(QName, S)
	      end
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'is_simple_type',2}}] )
	    -| ['compiler_generated'] )
	end
'is_derived_simple_type'/2 =
    %% Line 5203
    fun (_cor1,_cor0) ->
	%% Line 5205
	case apply 'resolve'/2
		 ({'simpleType',_cor1}, _cor0) of
	  %% Line 5206
	  <{{'schema_simple_type',_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13},_cor14}> when 'true' ->
	      'true'
	  %% Line 5207
	  <_cor15> when 'true' ->
	      'false'
	end
'object_name'/1 =
    %% Line 5212
    fun (_cor0) ->
	case _cor0 of
	  <{'schema_element',N,_cor2,_cor3,_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15}> when 'true' ->
	      %% Line 5213
	      N
	  %% Line 5214
	  <{'schema_simple_type',N,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23}> when 'true' ->
	      %% Line 5215
	      N
	  %% Line 5216
	  <{'schema_complex_type',N,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36}> when 'true' ->
	      %% Line 5217
	      N
	  %% Line 5218
	  <{'schema_attribute',N,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44}> when 'true' ->
	      %% Line 5219
	      N
	  %% Line 5220
	  <{'schema_attribute_group',N,_cor45,_cor46,_cor47}> when 'true' ->
	      %% Line 5221
	      N
	  %% Line 5222
	  <{'schema_group',N,_cor48,_cor49,_cor50,_cor51}> when 'true' ->
	      %% Line 5223
	      N
	  %% Line 5224
	  <{'id_constraint',_cor52,_cor53,N,_cor54,_cor55,_cor56,_cor57,_cor58}> when 'true' ->
	      %% Line 5225
	      N
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'object_name',1}}] )
	    -| ['compiler_generated'] )
	end
'is_whitespace'/1 =
    %% Line 5228
    fun (_cor0) ->
	case _cor0 of
	  <{'xmlText',_cor10,_cor11,_cor12,V,_cor13}> when 'true' ->
	      let <_cor7> =
		  %% Line 5229
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor4) ->
				case _cor4 of
				  <[X|_cor2]> when 'true' ->
				      let <_cor3> =
					  apply 'whitespace'/1
					      (X)
				      in  ( case <> of
					      <>
						  when call 'erlang':'=:='
							(_cor3,
							 'false') ->
						  let <_cor5> =
						      apply 'lc$^0'/1
							  (_cor2)
						  in  ( [X|_cor5]
							-| ['compiler_generated'] )
					      ( <> when 'true' ->
						    apply 'lc$^0'/1
							(_cor2)
						-| ['compiler_generated'] )
					    end
					    -| ['list_comprehension'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor4> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor4})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (V)
		    -| ['list_comprehension'] )
	      in  %% Line 5229
		  case _cor7 of
		    %% Line 5230
		    <[]> when 'true' ->
			%% Line 5231
			'true'
		    %% Line 5232
		    <_cor14> when 'true' ->
			'false'
		  end
	  %% Line 5234
	  <_cor15> when 'true' ->
	      %% Line 5235
	      'false'
	end
'fetch'/2 =
    %% Line 5240
    fun (_cor1,_cor0) ->
	let <Split> =
	    %% Line 5241
	    call 'filename':'split'
		(_cor1)
	in  let <_cor5> =
		%% Line 5242
		( fun (_cor3) ->
		      case _cor3 of
			<[]> when 'true' ->
			    []
			<X> when 'true' ->
			    call 'lists':'last'
				(X)
		      end
		  -| [{'id',{0,0,'-fetch/2-fun-0-'}}] )
	    in  let <Filename> =
		    %% Line 5242
		    apply _cor5
			(Split)
		in  let <_cor16> =
			%% Line 5244
			case Split of
			  %% Line 5245
			  <[[102|[105|[108|[101|[58]]]]]|Name]> when 'true' ->
			      %% Line 5247
			      call 'filename':'join'
				  ([[47]|Name])
			  %% Line 5248
			  <[[47]|Rest]>
			      when call 'erlang':'=/='
				    (Rest,
				     []) ->
			      _cor1
			  %% Line 5251
			  <[[104|[116|[116|[112|[58]]]]]|_X_Rest]> when 'true' ->
			      %% Line 5252
			      {'http',_cor1}
			  %% Line 5253
			  <[]> when 'true' ->
			      %% Line 5254
			      []
			  %% Line 5255
			  <_cor23> when 'true' ->
			      %% Line 5256
			      ( case _cor0 of
				  ( <( {'xsd_state',_cor24,_cor25,_cor26,_rec384,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54}
				       -| ['compiler_generated'] )> when 'true' ->
					case _rec384 of
					  %% Line 5257
					  <'true'> when 'true' ->
					      %% Line 5258
					      call 'filename':'join'
						  (_cor27, _cor1)
					  %% Line 5259
					  <'false'> when 'true' ->
					      let <_cor11> =
						  %% Line 5260
						  call 'filename':'basename'
						      (_cor1)
					      in  %% Line 5260
						  call 'filename':'join'
						      (_cor27, _cor11)
					  ( <_cor14> when 'true' ->
						primop 'match_fail'
						    ({'case_clause',_cor14})
					    -| ['compiler_generated'] )
					end
				    -| ['compiler_generated'] )
				  ( <_cor55> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','xsd_state'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			end
		    in  %% Line 5263
			( case _cor0 of
			    ( <( {'xsd_state',_cor120,_cor121,_cor122,_cor123,_cor124,_cor125,_cor126,_cor127,_cor128,_cor129,_cor130,_cor131,_cor132,_cor133,_cor134,_cor135,_cor136,_cor137,_cor138,_cor139,_cor140,_rec387,_cor141,_cor142,_cor143,_cor144,_cor145,_cor146,_cor147,_cor148,_cor149,_cor150}
				 -| ['compiler_generated'] )> when 'true' ->
				  let <Path> =
				      apply 'path_locate'/3
					  (_rec387, Filename, _cor16)
				  in  %% Line 5265
				      {'ok',Path,_cor0}
			      -| ['compiler_generated'] )
			    ( <_cor151> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','xsd_state'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
'path_locate'/3 =
    %% Line 5267
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <_cor8,_cor9,URI = {'http',_cor10}> when 'true' ->
	      %% Line 5268
	      URI
	  %% Line 5269
	  <_cor11,_cor12,[]> when 'true' ->
	      %% Line 5270
	      []
	  %% Line 5271
	  <[Dir|Dirs],FN,FullName> when 'true' ->
	      let <F> =
		  %% Line 5272
		  call 'filename':'join'
		      (Dir, FN)
	      in  %% Line 5273
		  case call 'file':'read_file_info'
			   (F) of
		    %% Line 5274
		    <{'ok',{'file_info',_cor13,'regular',_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24}}> when 'true' ->
			%% Line 5275
			{'file',F}
		    %% Line 5276
		    <_cor25> when 'true' ->
			%% Line 5277
			apply 'path_locate'/3
			    (Dirs, FN, FullName)
		  end
	  %% Line 5279
	  <[],_X_FN,FullName> when 'true' ->
	      %% Line 5280
	      {'file',FullName}
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'path_locate',3}}] )
	    -| ['compiler_generated'] )
	end
'return_error'/1 =
    %% Line 5286
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 5287
	    call 'lists':'reverse'
		(_cor0)
	in  %% Line 5287
	    {'error',_cor1}
'return_schema_error'/1 =
    %% Line 5289
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 5290
	    call 'lists':'reverse'
		(_cor0)
	in  %% Line 5290
	    {'error',{'schema_failure',_cor1}}
'if_atom_to_list'/1 =
    %% Line 5296
    fun (_cor0) ->
	case _cor0 of
	  <A>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      %% Line 5297
	      call 'erlang':'atom_to_list'
		  (A)
	  %% Line 5298
	  <L> when 'true' ->
	      %% Line 5299
	      L
	end
'if_list_to_atom'/1 =
    %% Line 5300
    fun (_cor0) ->
	case _cor0 of
	  <L>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      %% Line 5301
	      call 'erlang':'list_to_atom'
		  (L)
	  %% Line 5302
	  <A> when 'true' ->
	      %% Line 5303
	      A
	end
'list_members'/2 =
    %% Line 5305
    fun (_cor1,_cor0) ->
	let <_cor8> =
	    %% Line 5306
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor5) ->
			  case _cor5 of
			    <[X|_cor3]> when 'true' ->
				let <_cor4> =
				    call 'lists':'member'
					(X, _cor0)
				in  ( case <> of
					<>
					    when call 'erlang':'=:='
						  (_cor4,
						   'false') ->
					    let <_cor6> =
						apply 'lc$^0'/1
						    (_cor3)
					    in  ( [X|_cor6]
						  -| ['compiler_generated'] )
					( <> when 'true' ->
					      apply 'lc$^0'/1
						  (_cor3)
					  -| ['compiler_generated'] )
				      end
				      -| ['list_comprehension'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor5> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor5})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (_cor1)
	      -| ['list_comprehension'] )
	in  %% Line 5306
	    case _cor8 of
	      %% Line 5307
	      <[]> when 'true' ->
		  %% Line 5308
		  'true'
	      %% Line 5309
	      <L> when 'true' ->
		  %% Line 5310
		  {'error',L}
	    end
'whitespace'/1 =
    %% Line 5313
    fun (_cor0) ->
	case _cor0 of
	  <X>
	      when let <_cor1> =
		    call 'erlang':'=='
			(_cor0, 32)
		in  let <_cor2> =
			call 'erlang':'=='
			    (_cor0, 13)
		    in  let <_cor3> =
			    call 'erlang':'=='
				(_cor0, 10)
			in  let <_cor4> =
				call 'erlang':'=='
				    (_cor0, 9)
			    in  let <_cor5> =
				    call 'erlang':'or'
					(_cor3, _cor4)
				in  let <_cor6> =
					call 'erlang':'or'
					    (_cor2, _cor5)
				    in  call 'erlang':'or'
					    (_cor1, _cor6) ->
	      %% Line 5314
	      'true'
	  %% Line 5315
	  <_cor8> when 'true' ->
	      %% Line 5316
	      'false'
	end
'key1search'/3 =
    %% Line 5318
    fun (_cor2,_cor1,_cor0) ->
	%% Line 5319
	case call 'lists':'keysearch'
		 (_cor2, 1, _cor1) of
	  %% Line 5320
	  <{'value',V}> when 'true' ->
	      V
	  %% Line 5321
	  <_cor7> when 'true' ->
	      _cor0
	end
'keyNsearch'/4 =
    %% Line 5324
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 5325
	case call 'lists':'keysearch'
		 (_cor3, _cor2, _cor1) of
	  %% Line 5326
	  <{'value',V}> when 'true' ->
	      V
	  %% Line 5327
	  <_cor9> when 'true' ->
	      _cor0
	end
'key_replace_or_insert'/4 =
    %% Line 5330
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 5331
	case call 'lists':'keyreplace'
		 (_cor3, _cor2, _cor1, _cor0) of
	  %% Line 5332
	  <_cor9>
	      when call 'erlang':'=:='
		    (_cor9,
		     _cor1) ->
	      %% Line 5333
	      [_cor0|_cor1]
	  %% Line 5334
	  <NewList> when 'true' ->
	      %% Line 5335
	      NewList
	end
'keysearch_delete'/4 =
    %% Line 5338
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 5339
	case call 'lists':'keysearch'
		 (_cor3, _cor2, _cor1) of
	  %% Line 5340
	  <{'value',Res}> when 'true' ->
	      let <_cor4> =
		  %% Line 5341
		  call 'lists':'keydelete'
		      (_cor3, _cor2, _cor1)
	      in  %% Line 5341
		  {Res,_cor4}
	  %% Line 5342
	  <_cor10> when 'true' ->
	      %% Line 5343
	      {_cor0,_cor1}
	end
'search_delete_all_el'/3 =
    %% Line 5346
    fun (_cor2,_cor1,_cor0) ->
	%% Line 5347
	case apply 'search_delete_all_el2'/3
		 (_cor2, _cor1, []) of
	  %% Line 5348
	  <'false'> when 'true' ->
	      %% Line 5349
	      case apply 'substitutionGroup_member'/2
		       (_cor2, _cor0) of
		%% Line 5350
		<'false'> when 'true' ->
		    %% Line 5351
		    'false'
		%% Line 5352
		<Head> when 'true' ->
		    %% Line 5353
		    case apply 'search_delete_all_el'/3
			     (Head, _cor1, _cor0) of
		      %% Line 5354
		      <{_cor10,Rest}> when 'true' ->
			  %% Line 5355
			  case _cor2 of
			    <{Name,_cor11,NS}> when 'true' ->
				%% Line 5356
				{{'element',{Name,[],NS}},Rest}
			    ( <_cor3> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor3})
			      -| ['compiler_generated'] )
			  end
		      %% Line 5357
		      <_cor12> when 'true' ->
			  %% Line 5358
			  'false'
		    end
	      end
	  %% Line 5361
	  <Res> when 'true' ->
	      %% Line 5362
	      Res
	end
'search_delete_all_el2'/3 =
    %% Line 5364
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <_X_ElName,[],_X_NoMatch> when 'true' ->
	      %% Line 5365
	      'false'
	  %% Line 5368
	  <{Name,Scope,NS},%% Line 5369
			   [El = {'element',{{_cor10,ScopeCM,_cor11},_cor12}}|Rest],%% Line 5370
										    NoMatch>
	      when let <_cor15> =
		    call 'erlang':'=:='
			(_cor10, %% Line 5369
				 Name)
		in  let <_cor13> =
			call 'erlang':'=:='
			    (_cor11, %% Line 5369
				     NS)
		    in  let <_cor3> =
			    %% Line 5371
			    call 'erlang':'=='
				(Scope, ScopeCM)
			in  let <_cor4> =
				%% Line 5371
				call 'erlang':'=:='
				    (ScopeCM, [])
			    in  let <_cor14> =
				    %% Line 5371
				    call 'erlang':'or'
					(_cor3, _cor4)
				in  let <_cor16> =
					call 'erlang':'and'
					    (_cor13, _cor14)
				    in  call 'erlang':'and'
					    (_cor15, _cor16) ->
	      let <_cor5> =
		  %% Line 5372
		  call 'lists':'reverse'
		      (NoMatch)
	      in  let <_cor6> =
		      %% Line 5372
		      call 'erlang':'++'
			  (_cor5, Rest)
		  in  %% Line 5372
		      {El,_cor6}
	  %% Line 5373
	  <ElName,[H|T],NoMatch> when 'true' ->
	      %% Line 5374
	      apply 'search_delete_all_el2'/3
		  (ElName, T, [H|NoMatch])
	  ( <_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7})
		  -| [{'function_name',{'search_delete_all_el2',3}}] )
	    -| ['compiler_generated'] )
	end
'search_attribute'/3 =
    %% Line 5378
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'true',{Name,_cor22,Namespace},SchemaAtts> when 'true' ->
	      let <_cor9> =
		  %% Line 5379
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor7) ->
				case _cor7 of
				  <[A = {_cor23,{N,_cor24,NS}}|_cor4]>
				      when let <_cor5> =
					    call 'erlang':'=='
						(N, Name)
					in  let <_cor6> =
						call 'erlang':'=='
						    (NS, Namespace)
					    in  call 'erlang':'and'
						    (_cor5, _cor6) ->
				      let <_cor8> =
					  apply 'lc$^0'/1
					      (_cor4)
				      in  ( [A|_cor8]
					    -| ['compiler_generated'] )
				  ( <[_cor3|_cor4]> when 'true' ->
					apply 'lc$^0'/1
					    (_cor4)
				    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor7> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor7})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (SchemaAtts)
		    -| ['list_comprehension'] )
	      in  %% Line 5379
		  case _cor9 of
		    %% Line 5380
		    <[]> when 'true' ->
			%% Line 5381
			{'undefined',SchemaAtts}
		    %% Line 5382
		    <[Attr|[]]> when 'true' ->
			let <_cor10> =
			    %% Line 5383
			    call 'lists':'delete'
				(Attr, SchemaAtts)
			in  %% Line 5383
			    {Attr,_cor10}
		    ( <_cor11> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor11})
		      -| ['compiler_generated'] )
		  end
	  %% Line 5385
	  <_cor25,{Name,_cor26,_cor27},SchemaAtts> when 'true' ->
	      let <_cor16> =
		  %% Line 5386
		  ( letrec
			'lc$^1'/1 =
			    fun (_cor14) ->
				case _cor14 of
				  <[A = {_cor28,{N,_cor29,_cor30}}|_cor13]>
				      when call 'erlang':'=='
					    (N,
					     Name) ->
				      let <_cor15> =
					  apply 'lc$^1'/1
					      (_cor13)
				      in  ( [A|_cor15]
					    -| ['compiler_generated'] )
				  ( <[_cor12|_cor13]> when 'true' ->
					apply 'lc$^1'/1
					    (_cor13)
				    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor14> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor14})
					  -| [{'function_name',{'lc$^1',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^1'/1
			    (SchemaAtts)
		    -| ['list_comprehension'] )
	      in  %% Line 5386
		  case _cor16 of
		    %% Line 5387
		    <[]> when 'true' ->
			%% Line 5388
			{'undefined',SchemaAtts}
		    %% Line 5389
		    <[Attr|[]]> when 'true' ->
			let <_cor17> =
			    %% Line 5390
			    call 'lists':'delete'
				(Attr, SchemaAtts)
			in  %% Line 5390
			    {Attr,_cor17}
		    ( <_cor18> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor18})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor21,_cor20,_cor19> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor21,_cor20,_cor19})
		  -| [{'function_name',{'search_attribute',3}}] )
	    -| ['compiler_generated'] )
	end
'error_msg'/2 =
    %% Line 5393
    fun (_cor1,_cor0) ->
	%% Line 5394
	call 'io':'format'
	    (_cor1, _cor0)
'add_once'/2 =
    %% Line 5397
    fun (_cor1,_cor0) ->
	%% Line 5398
	case call 'lists':'member'
		 (_cor1, _cor0) of
	  %% Line 5399
	  <'true'> when 'true' ->
	      _cor0
	  %% Line 5401
	  <_cor5> when 'true' ->
	      %% Line 5402
	      [_cor1|_cor0]
	end
'add_key_once'/4 =
    %% Line 5405
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 5406
	case call 'lists':'keymember'
		 (_cor3, _cor2, _cor0) of
	  %% Line 5407
	  <'true'> when 'true' ->
	      _cor0
	  %% Line 5409
	  <_cor9> when 'true' ->
	      %% Line 5410
	      [_cor1|_cor0]
	end
'format_error'/1 =
    %% Line 5435
    fun (_cor0) ->
	case _cor0 of
	  <L>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      %% Line 5436
	      ( letrec
		    'lc$^0'/1 =
			fun (_cor3) ->
			    case _cor3 of
			      <[X|_cor2]> when 'true' ->
				  let <_cor4> =
				      apply 'format_error'/1
					  (X)
				  in  let <_cor5> =
					  apply 'lc$^0'/1
					      (_cor2)
				      in  ( [_cor4|_cor5]
					    -| ['compiler_generated'] )
			      <[]> when 'true' ->
				  []
			      ( <_cor3> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_cor3})
				      -| [{'function_name',{'lc$^0',1}}] )
				-| ['compiler_generated'] )
			    end
		in  apply 'lc$^0'/1
			(L)
		-| ['list_comprehension'] )
	  %% Line 5437
	  <{'unexpected_rest',UR}> when 'true' ->
	      %% Line 5438
	      call 'io_lib':'format'
		  ([88|[77|[76|[58|[32|[84|[104|[101|[32|[102|[111|[108|[108|[111|[119|[105|[110|[103|[32|[99|[111|[110|[116|[101|[110|[116|[32|[111|[102|[32|[97|[110|[32|[101|[108|[101|[109|[101|[110|[116|[32|[100|[105|[100|[110|[39|[116|[32|[118|[97|[108|[105|[100|[97|[116|[101|[32|[98|[121|[32|[116|[104|[101|[32|[112|[114|[111|[118|[105|[100|[101|[100|[32|[115|[99|[104|[101|[109|[97|[44|[32|[126|[110|[126|[112|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [UR|[]])
	  %% Line 5439
	  <{'unvalidated_rest',UR}> when 'true' ->
	      %% Line 5440
	      call 'io_lib':'format'
		  ([88|[77|[76|[58|[32|[84|[104|[101|[32|[102|[111|[108|[108|[111|[119|[105|[110|[103|[32|[99|[111|[110|[116|[101|[110|[116|[32|[111|[102|[32|[97|[110|[32|[101|[108|[101|[109|[101|[110|[116|[32|[100|[105|[100|[110|[39|[116|[32|[118|[97|[108|[105|[100|[97|[116|[101|[32|[98|[121|[32|[116|[104|[101|[32|[112|[114|[111|[118|[105|[100|[101|[100|[32|[115|[99|[104|[101|[109|[97|[44|[32|[126|[110|[126|[112|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [UR|[]])
	  %% Line 5441
	  <{'no_schemas_provided'}> when 'true' ->
	      %% Line 5442
	      [83|[99|[104|[101|[109|[97|[58|[32|[86|[97|[108|[105|[100|[97|[116|[111|[114|[32|[102|[111|[117|[110|[100|[32|[110|[111|[32|[115|[99|[104|[101|[109|[97|[46|[32|[65|[32|[115|[99|[104|[101|[109|[97|[32|[109|[117|[115|[116|[32|[98|[101|[32|[112|[114|[111|[118|[105|[100|[101|[100|[32|[102|[111|[114|[32|[118|[97|[108|[105|[100|[97|[116|[105|[111|[110|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 5443
	  <{'internal_error',Reason}> when 'true' ->
	      %% Line 5444
	      call 'io_lib':'format'
		  ([65|[110|[32|[101|[114|[114|[111|[114|[32|[111|[99|[99|[117|[114|[101|[100|[32|[116|[104|[97|[116|[32|[119|[97|[115|[32|[117|[110|[102|[111|[114|[101|[115|[101|[101|[110|[44|[32|[100|[117|[101|[32|[116|[111|[32|[126|[112|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Reason|[]])
	  %% Line 5445
	  <{'internal_error',Reason,Info}> when 'true' ->
	      %% Line 5446
	      call 'io_lib':'format'
		  ([65|[110|[32|[101|[114|[114|[111|[114|[32|[111|[99|[99|[117|[114|[101|[100|[32|[116|[104|[97|[116|[32|[119|[97|[115|[32|[117|[110|[102|[111|[114|[101|[115|[101|[101|[110|[44|[32|[100|[117|[101|[32|[116|[111|[32|[126|[112|[58|[32|[126|[112|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Reason|[Info|[]]])
	  %% Line 5447
	  <{'internal_error',Function,Info1,Info2}> when 'true' ->
	      %% Line 5448
	      call 'io_lib':'format'
		  ([65|[110|[32|[105|[110|[116|[101|[114|[110|[97|[108|[32|[101|[114|[114|[111|[114|[32|[111|[99|[99|[117|[114|[101|[100|[32|[105|[110|[32|[102|[117|[110|[99|[116|[105|[111|[110|[32|[126|[112|[32|[119|[105|[116|[104|[32|[97|[114|[103|[115|[58|[32|[126|[112|[44|[126|[112|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Function|[Info1|[Info2|[]]]])
	  %% Line 5449
	  <{'illegal_content',Reason,Kind}> when 'true' ->
	      %% Line 5450
	      call 'io_lib':'format'
		  ([83|[99|[104|[101|[109|[97|[58|[32|[84|[104|[101|[32|[115|[99|[104|[101|[109|[97|[32|[118|[105|[111|[108|[97|[116|[101|[115|[32|[116|[104|[101|[32|[99|[111|[110|[116|[101|[110|[116|[32|[109|[111|[100|[101|[108|[32|[97|[108|[108|[111|[119|[101|[100|[32|[102|[111|[114|[32|[115|[99|[104|[101|[109|[97|[115|[46|[126|[110|[82|[101|[97|[115|[111|[110|[58|[32|[126|[112|[44|[126|[110|[107|[105|[110|[100|[32|[111|[102|[32|[115|[99|[104|[101|[109|[97|[32|[101|[108|[101|[109|[101|[110|[116|[58|[32|[126|[112|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Reason|[Kind|[]]])
	  %% Line 5451
	  <{'no_match',Kind}> when 'true' ->
	      %% Line 5452
	      call 'io_lib':'format'
		  ([83|[99|[104|[101|[109|[97|[58|[32|[84|[104|[101|[32|[115|[99|[104|[101|[109|[97|[32|[118|[105|[111|[108|[97|[116|[101|[115|[32|[116|[104|[101|[32|[99|[111|[110|[116|[101|[110|[116|[32|[109|[111|[100|[101|[108|[32|[97|[108|[108|[111|[119|[101|[100|[32|[102|[111|[114|[32|[115|[99|[104|[101|[109|[97|[115|[46|[126|[110|[75|[105|[110|[100|[32|[111|[102|[32|[115|[99|[104|[101|[109|[97|[32|[101|[108|[101|[109|[101|[110|[116|[58|[32|[126|[112|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Kind|[]])
	  %% Line 5453
	  <{'bad_match',S4SC,CM}> when 'true' ->
	      %% Line 5454
	      call 'io_lib':'format'
		  ([83|[99|[104|[101|[109|[97|[58|[32|[84|[104|[101|[32|[115|[99|[104|[101|[109|[97|[32|[109|[105|[115|[115|[101|[100|[32|[109|[97|[110|[100|[97|[116|[111|[114|[121|[32|[101|[108|[101|[109|[101|[110|[116|[115|[32|[126|[112|[32|[105|[110|[32|[126|[112|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [S4SC|[CM|[]]])
	  %% Line 5455
	  <{'unmatched_mandatory_object',SequenceEl1,SequenceEl2}> when 'true' ->
	      %% Line 5456
	      call 'io_lib':'format'
		  ([83|[99|[104|[101|[109|[97|[58|[32|[84|[104|[101|[32|[115|[99|[104|[101|[109|[97|[32|[115|[104|[111|[117|[108|[100|[32|[104|[97|[118|[101|[32|[104|[97|[100|[32|[97|[110|[32|[126|[112|[32|[111|[98|[106|[101|[99|[116|[32|[97|[102|[116|[101|[114|[32|[116|[104|[101|[32|[126|[112|[44|[32|[98|[117|[116|[32|[105|[116|[32|[119|[97|[115|[32|[109|[105|[115|[115|[105|[110|[103|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [SequenceEl2|[SequenceEl1|[]]])
	  %% Line 5457
	  <{'parsing_external_schema_failed',File,Reason}> when 'true' ->
	      %% Line 5458
	      call 'io_lib':'format'
		  ([83|[99|[104|[101|[109|[97|[58|[32|[80|[97|[114|[115|[105|[110|[103|[32|[116|[104|[101|[32|[114|[101|[102|[101|[114|[101|[110|[99|[101|[100|[32|[101|[120|[116|[101|[114|[110|[97|[108|[32|[115|[99|[104|[101|[109|[97|[32|[126|[112|[44|[32|[102|[97|[105|[108|[101|[100|[32|[100|[117|[101|[32|[116|[111|[32|[126|[112|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [File|[Reason|[]]])
	  %% Line 5459
	  <{'fetch_fun_failed',Other}> when 'true' ->
	      %% Line 5460
	      call 'io_lib':'format'
		  ([83|[99|[104|[101|[109|[97|[58|[32|[70|[101|[116|[99|[104|[105|[110|[103|[32|[116|[104|[105|[115|[32|[107|[105|[110|[100|[32|[111|[102|[32|[101|[120|[116|[101|[114|[110|[97|[108|[32|[115|[99|[104|[101|[109|[97|[32|[105|[115|[32|[110|[111|[116|[32|[115|[117|[112|[112|[111|[114|[116|[101|[100|[32|[126|[112|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 5461
																																																	    [Other|[]])
	  %% Line 5462
	  <{'element_not_in_schema',[EIIName|[_X_ElQName|[_X_CM|[]]]]}> when 'true' ->
	      %% Line 5463
	      call 'io_lib':'format'
		  ([88|[77|[76|[58|[32|[84|[104|[101|[32|[88|[77|[76|[32|[101|[108|[101|[109|[101|[110|[116|[32|[126|[112|[32|[97|[114|[101|[32|[110|[111|[116|[32|[112|[114|[101|[115|[101|[110|[116|[32|[105|[110|[32|[116|[104|[101|[32|[115|[99|[104|[101|[109|[97|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 5464
																																								  [EIIName|[]])
	  %% Line 5465
	  <{'missing_mandatory_element',CMEl}> when 'true' ->
	      %% Line 5466
	      call 'io_lib':'format'
		  ([88|[77|[76|[58|[32|[84|[104|[101|[32|[88|[77|[76|[32|[102|[105|[108|[101|[32|[109|[105|[115|[115|[101|[100|[32|[109|[97|[110|[100|[97|[116|[111|[114|[121|[32|[101|[108|[101|[109|[101|[110|[116|[40|[115|[41|[32|[126|[112|[32|[100|[101|[102|[105|[110|[101|[100|[32|[105|[110|[32|[115|[99|[104|[101|[109|[97|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [CMEl|[]])
	  %% Line 5467
	  <{'empty_content_not_allowed',C}> when 'true' ->
	      %% Line 5468
	      call 'io_lib':'format'
		  ([88|[77|[76|[58|[32|[84|[104|[101|[32|[88|[77|[76|[32|[102|[105|[108|[101|[32|[109|[105|[115|[115|[101|[100|[32|[109|[97|[110|[100|[97|[116|[111|[114|[121|[32|[101|[108|[101|[109|[101|[110|[116|[40|[115|[41|[58|[32|[126|[112|[32|[100|[101|[102|[105|[110|[101|[100|[32|[105|[110|[32|[115|[99|[104|[101|[109|[97|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [C|[]])
	  %% Line 5469
	  <{'element_not_suitable_with_schema',ElName,_X_S}> when 'true' ->
	      %% Line 5470
	      call 'io_lib':'format'
		  ([88|[77|[76|[58|[32|[84|[104|[101|[32|[88|[77|[76|[32|[101|[108|[101|[109|[101|[110|[116|[58|[32|[126|[112|[32|[118|[105|[111|[108|[97|[116|[101|[115|[32|[116|[104|[101|[32|[115|[99|[104|[101|[109|[97|[44|[32|[112|[114|[111|[98|[97|[98|[108|[121|[32|[116|[111|[32|[109|[97|[110|[121|[32|[111|[102|[32|[115|[97|[109|[101|[32|[101|[108|[101|[109|[101|[110|[116|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [ElName|[]])
	  %% Line 5471
	  <{'element_not_suitable_with_schema',ElName,CMName,_X_CMEl,_X_S}> when 'true' ->
	      %% Line 5472
	      call 'io_lib':'format'
		  ([88|[77|[76|[58|[32|[84|[104|[101|[32|[88|[77|[76|[32|[101|[108|[101|[109|[101|[110|[116|[58|[32|[126|[112|[32|[118|[105|[111|[108|[97|[116|[101|[115|[32|[116|[104|[101|[32|[115|[99|[104|[101|[109|[97|[46|[32|[83|[99|[104|[101|[109|[97|[32|[101|[120|[112|[101|[99|[116|[101|[100|[32|[101|[108|[101|[109|[101|[110|[116|[32|[126|[112|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [ElName|[CMName|[]]])
	  %% Line 5473
	  <{'no_element_expected_in_group',XML}> when 'true' ->
	      %% Line 5474
	      call 'io_lib':'format'
		  ([88|[77|[76|[58|[32|[84|[104|[101|[32|[88|[77|[76|[32|[101|[108|[101|[109|[101|[110|[116|[40|[115|[41|[32|[126|[112|[32|[118|[105|[111|[108|[97|[116|[101|[115|[32|[116|[104|[101|[32|[115|[99|[104|[101|[109|[97|[46|[32|[78|[111|[32|[101|[108|[101|[109|[101|[110|[116|[32|[119|[97|[115|[32|[101|[120|[112|[101|[99|[116|[101|[100|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [XML|[]])
	  %% Line 5475
	  <{'element_bad_match',E,Any,_X_Env}> when 'true' ->
	      %% Line 5476
	      call 'io_lib':'format'
		  ([88|[77|[76|[58|[32|[88|[77|[76|[32|[101|[108|[101|[109|[101|[110|[116|[32|[126|[112|[32|[100|[105|[100|[110|[39|[116|[32|[109|[97|[116|[99|[104|[32|[105|[110|[116|[111|[32|[116|[104|[101|[32|[110|[97|[109|[101|[115|[112|[97|[99|[101|[32|[111|[102|[32|[115|[99|[104|[101|[109|[97|[32|[116|[121|[112|[101|[32|[97|[110|[121|[32|[126|[112|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [E|[Any|[]]])
	  %% Line 5477
	  <{'match_failure',_X_XML,_X_CM,_X_S}> when 'true' ->
	      %% Line 5478
	      [88|[77|[76|[58|[32|[65|[32|[99|[111|[109|[98|[105|[110|[97|[116|[105|[111|[110|[32|[111|[102|[32|[88|[77|[76|[32|[101|[108|[101|[109|[101|[110|[116|[40|[115|[41|[32|[97|[110|[100|[32|[115|[99|[104|[101|[109|[97|[32|[100|[101|[102|[105|[110|[105|[116|[105|[111|[110|[115|[32|[116|[104|[97|[116|[32|[105|[115|[32|[110|[111|[116|[32|[107|[110|[111|[119|[110|[32|[104|[97|[115|[32|[111|[99|[99|[117|[114|[101|[100|[46|[32|[84|[104|[101|[32|[105|[109|[112|[108|[101|[109|[101|[110|[116|[97|[116|[105|[111|[110|[32|[100|[111|[101|[115|[110|[39|[116|[32|[115|[117|[112|[112|[111|[114|[116|[32|[116|[104|[105|[115|[32|[115|[116|[114|[117|[99|[116|[117|[114|[101|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 5479
	  <{'cannot_contain_text',_X_XMLTxt,CMEl}> when 'true' ->
	      %% Line 5480
	      call 'io_lib':'format'
		  ([88|[77|[76|[58|[32|[84|[104|[101|[32|[115|[99|[104|[101|[109|[97|[32|[115|[116|[114|[117|[99|[116|[117|[114|[101|[58|[32|[126|[112|[32|[100|[111|[101|[115|[110|[39|[116|[32|[97|[108|[108|[111|[119|[32|[116|[101|[120|[116]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [CMEl|[]])
	  %% Line 5481
	  <{'missing_mandatory_elements',MandatoryEls}> when 'true' ->
	      %% Line 5482
	      call 'io_lib':'format'
		  ([88|[77|[76|[58|[32|[65|[32|[115|[99|[104|[101|[109|[97|[32|[115|[101|[113|[117|[101|[110|[99|[101|[32|[104|[97|[115|[32|[109|[97|[110|[100|[97|[116|[111|[114|[121|[32|[101|[108|[101|[109|[101|[110|[116|[115|[32|[126|[112|[44|[32|[116|[104|[97|[116|[32|[119|[101|[114|[101|[32|[117|[110|[109|[97|[116|[99|[104|[101|[100|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [MandatoryEls|[]])
	  %% Line 5483
	  <{'choice_missmatch',T,Els}> when 'true' ->
	      %% Line 5484
	      call 'io_lib':'format'
		  ([88|[77|[76|[58|[32|[65|[32|[115|[99|[104|[101|[109|[97|[32|[99|[104|[111|[105|[99|[101|[32|[115|[116|[114|[117|[99|[116|[117|[114|[101|[32|[119|[105|[116|[104|[32|[116|[104|[101|[32|[97|[108|[116|[101|[114|[110|[97|[116|[105|[118|[101|[115|[58|[32|[126|[112|[32|[100|[111|[101|[115|[110|[39|[116|[32|[97|[108|[108|[111|[119|[32|[116|[104|[101|[32|[116|[101|[120|[116|[58|[32|[126|[112|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Els|[T|[]]])
	  %% Line 5485
	  <{'no_element_matching_choice',XML}> when 'true' ->
	      let <_cor6> =
		  %% Line 5486
		  apply 'error_path'/2
		      (XML, 'undefined')
	      in  %% Line 5486
		  call 'io_lib':'format'
		      ([88|[77|[76|[58|[32|[84|[104|[101|[32|[99|[104|[111|[105|[99|[101|[32|[97|[116|[32|[108|[111|[99|[97|[116|[105|[111|[110|[58|[32|[126|[112|[32|[104|[97|[100|[32|[110|[111|[32|[97|[108|[116|[101|[114|[110|[97|[116|[105|[118|[101|[32|[116|[104|[97|[116|[32|[109|[97|[116|[99|[104|[101|[100|[32|[116|[104|[101|[32|[88|[77|[76|[32|[115|[116|[114|[117|[99|[116|[117|[114|[101|[40|[115|[41|[58|[32|[126|[112|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [_cor6|[XML|[]]])
	  %% Line 5487
	  <{'all_missmatch',T,CM}> when 'true' ->
	      let <_cor7> =
		  %% Line 5488
		  apply 'error_path'/2
		      (T, 'undefined')
	      in  %% Line 5488
		  call 'io_lib':'format'
		      ([88|[77|[76|[58|[32|[84|[104|[101|[32|[115|[99|[104|[101|[109|[97|[32|[101|[120|[112|[101|[99|[116|[101|[100|[32|[111|[110|[101|[32|[111|[102|[58|[32|[126|[112|[44|[32|[98|[117|[116|[32|[116|[104|[101|[32|[88|[77|[76|[32|[99|[111|[110|[116|[101|[110|[116|[32|[119|[97|[115|[32|[116|[101|[120|[116|[58|[32|[126|[112|[32|[97|[116|[32|[116|[104|[101|[32|[108|[111|[99|[97|[116|[105|[111|[110|[58|[32|[126|[112|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [CM|[T|[_cor7|[]]]])
	  %% Line 5489
	  <{'element_not_in_all',ElName,E,_X_CM}> when 'true' ->
	      let <_cor8> =
		  %% Line 5490
		  apply 'error_path'/2
		      (E, 'undefined')
	      in  %% Line 5490
		  call 'io_lib':'format'
		      ([88|[77|[76|[58|[32|[84|[104|[101|[32|[101|[108|[101|[109|[101|[110|[116|[32|[126|[112|[32|[97|[116|[32|[108|[111|[99|[97|[116|[105|[111|[110|[32|[126|[112|[32|[105|[110|[32|[116|[104|[101|[32|[88|[77|[76|[32|[102|[105|[108|[101|[32|[119|[97|[115|[32|[110|[111|[116|[32|[97|[108|[108|[111|[119|[101|[100|[32|[97|[99|[99|[111|[114|[100|[105|[110|[103|[32|[116|[111|[32|[116|[104|[101|[32|[115|[99|[104|[101|[109|[97|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [ElName|[_cor8|[]]])
	  %% Line 5491
	  <{'missing_mandatory_elements_in_all',MandatoryEls}> when 'true' ->
	      %% Line 5492
	      call 'io_lib':'format'
		  ([88|[77|[76|[58|[32|[84|[104|[101|[32|[115|[99|[104|[101|[109|[97|[32|[101|[108|[101|[109|[101|[110|[116|[115|[32|[126|[112|[32|[119|[101|[114|[101|[32|[109|[105|[115|[115|[101|[100|[32|[105|[110|[32|[116|[104|[101|[32|[88|[77|[76|[32|[102|[105|[108|[101|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [MandatoryEls|[]])
	  %% Line 5493
	  <{'failed_validating',E,Any}> when 'true' ->
	      %% Line 5494
	      ( case E of
		  ( <( {'xmlElement',_rec388,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_cor11> =
			    apply 'error_path'/2
				(E, 'undefined')
			in  call 'io_lib':'format'
				([88|[77|[76|[58|[32|[84|[104|[101|[32|[101|[108|[101|[109|[101|[110|[116|[32|[126|[112|[32|[97|[116|[32|[108|[111|[99|[97|[116|[105|[111|[110|[32|[126|[112|[32|[102|[97|[105|[108|[101|[100|[32|[118|[97|[108|[105|[100|[97|[116|[105|[111|[110|[46|[32|[73|[116|[32|[115|[104|[111|[117|[108|[100|[32|[104|[97|[118|[32|[98|[101|[101|[110|[32|[109|[97|[116|[99|[104|[101|[100|[32|[98|[121|[32|[97|[110|[32|[97|[110|[121|[32|[115|[99|[104|[101|[109|[97|[32|[101|[108|[101|[109|[101|[110|[116|[32|[126|[112]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [_rec388|[_cor11|[Any|[]]]])
		    -| ['compiler_generated'] )
		  ( <_cor32> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','xmlElement'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 5495
	  <{'schemaLocation_list_failure',Paths}> when 'true' ->
	      %% Line 5496
	      call 'io_lib':'format'
		  ([88|[77|[76|[58|[32|[115|[99|[104|[101|[109|[97|[76|[111|[99|[97|[116|[105|[111|[110|[32|[118|[97|[108|[117|[101|[115|[32|[99|[111|[110|[115|[105|[115|[116|[115|[32|[111|[102|[32|[111|[110|[101|[32|[111|[114|[32|[109|[111|[114|[101|[32|[112|[97|[105|[114|[115|[32|[111|[102|[32|[85|[82|[73|[32|[114|[101|[102|[101|[114|[101|[110|[99|[101|[115|[44|[32|[115|[101|[112|[97|[114|[97|[116|[101|[100|[32|[98|[121|[32|[119|[104|[105|[116|[101|[32|[115|[112|[97|[99|[101|[46|[32|[84|[104|[101|[32|[102|[105|[114|[115|[116|[32|[105|[115|[32|[97|[32|[110|[97|[109|[101|[115|[112|[97|[99|[101|[32|[110|[97|[109|[101|[32|[116|[104|[101|[32|[115|[101|[99|[111|[110|[100|[32|[97|[32|[114|[101|[102|[101|[114|[101|[110|[99|[101|[32|[116|[111|[32|[97|[32|[115|[99|[104|[101|[109|[97|[58|[32|[126|[112|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Paths|[]])
	  %% Line 5497
	  <{'element_content_not_nil',XMLEl}> when 'true' ->
	      %% Line 5498
	      ( case XMLEl of
		  ( <( {'xmlElement',_rec389,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_cor14> =
			    apply 'error_path'/2
				(XMLEl, 'undefined')
			in  call 'io_lib':'format'
				([88|[77|[76|[58|[32|[84|[104|[101|[32|[101|[108|[101|[109|[101|[110|[116|[32|[126|[112|[32|[97|[116|[32|[112|[111|[115|[105|[116|[105|[111|[110|[32|[126|[112|[32|[104|[97|[115|[32|[99|[111|[110|[116|[101|[110|[116|[32|[111|[102|[32|[116|[101|[120|[116|[47|[101|[108|[101|[109|[101|[110|[116|[115|[32|[100|[101|[115|[112|[105|[116|[101|[32|[116|[104|[101|[32|[110|[105|[108|[108|[97|[98|[108|[101|[32|[97|[116|[116|[114|[105|[98|[117|[116|[101|[32|[119|[97|[115|[32|[116|[114|[117|[101|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [_rec389|[_cor14|[]]])
		    -| ['compiler_generated'] )
		  ( <_cor43> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','xmlElement'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 5499
	  <{'attribute_in_simpleType',El,Att}> when 'true' ->
	      %% Line 5500
	      ( case El of
		  ( <( {'xmlElement',_rec390,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_cor17> =
			    apply 'error_path'/2
				(El, 'undefined')
			in  call 'io_lib':'format'
				([88|[77|[76|[58|[32|[84|[104|[101|[32|[101|[108|[101|[109|[101|[110|[116|[32|[126|[112|[32|[97|[116|[32|[108|[111|[99|[97|[116|[105|[111|[110|[32|[126|[112|[32|[109|[117|[115|[116|[32|[110|[111|[116|[32|[104|[97|[118|[101|[32|[97|[116|[116|[114|[105|[98|[117|[116|[101|[115|[32|[108|[105|[107|[101|[58|[32|[126|[112|[32|[115|[105|[110|[99|[101|[32|[105|[116|[32|[97|[99|[99|[111|[114|[100|[105|[110|[103|[32|[116|[111|[32|[116|[104|[101|[32|[115|[99|[104|[101|[109|[97|[32|[104|[97|[115|[32|[115|[105|[109|[112|[108|[101|[84|[121|[112|[101|[32|[116|[121|[112|[101|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [_rec390|[_cor17|[Att|[]]]])
		    -| ['compiler_generated'] )
		  ( <_cor54> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','xmlElement'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 5501
	  <{'required_attribute_missed',El,Name}> when 'true' ->
	      let <_cor18> =
		  %% Line 5502
		  apply 'error_path'/2
		      (El, 'undefined')
	      in  %% Line 5502
		  call 'io_lib':'format'
		      ([88|[77|[76|[58|[32|[84|[104|[101|[32|[115|[99|[104|[101|[109|[97|[32|[114|[101|[113|[117|[105|[114|[101|[100|[32|[97|[110|[32|[97|[116|[116|[114|[105|[98|[117|[116|[101|[32|[126|[112|[32|[105|[110|[32|[101|[108|[101|[109|[101|[110|[116|[32|[97|[116|[32|[108|[111|[99|[97|[116|[105|[111|[110|[32|[126|[112|[32|[116|[104|[97|[116|[32|[119|[97|[115|[32|[109|[105|[115|[115|[105|[110|[103|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Name|[_cor18|[]]])
	  %% Line 5503
	  <{'default_and_fixed_attributes_mutual_exclusive',%% Line 5504
							    Name,%% Line 5504
								 Default,%% Line 5504
									 Fix}> when 'true' ->
	      %% Line 5505
	      call 'io_lib':'format'
		  ([83|[99|[104|[101|[109|[97|[58|[32|[73|[116|[32|[105|[115|[32|[97|[110|[32|[101|[114|[114|[111|[114|[32|[105|[110|[32|[116|[104|[101|[32|[115|[99|[104|[101|[109|[97|[32|[116|[111|[32|[97|[115|[115|[105|[103|[110|[32|[118|[97|[108|[117|[101|[115|[32|[102|[111|[114|[32|[98|[111|[116|[104|[32|[100|[101|[102|[97|[117|[108|[116|[32|[97|[110|[100|[32|[102|[105|[120|[32|[102|[111|[114|[32|[97|[110|[32|[97|[116|[116|[114|[105|[98|[117|[116|[101|[46|[32|[65|[116|[116|[114|[105|[98|[117|[116|[101|[58|[32|[126|[112|[44|[32|[100|[101|[102|[97|[117|[108|[116|[58|[32|[126|[112|[44|[32|[102|[105|[120|[58|[32|[126|[112|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Name|[Default|[Fix|[]]]])
	  %% Line 5506
	  <{'schema_error','unexpected_object',_X_SA,_X_Err}> when 'true' ->
	      %% Line 5507
	      [83|[99|[104|[101|[109|[97|[58|[32|[65|[110|[32|[117|[110|[102|[111|[114|[101|[115|[101|[101|[110|[32|[101|[114|[114|[111|[114|[32|[99|[97|[115|[101|[32|[111|[99|[99|[117|[114|[101|[100|[44|[32|[109|[97|[121|[98|[101|[101|[32|[100|[117|[101|[32|[116|[111|[32|[97|[110|[32|[117|[110|[105|[109|[112|[108|[101|[109|[101|[110|[116|[101|[100|[32|[102|[101|[97|[116|[117|[114|[101|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 5508
	  <{'attribute_not_defined_in_schema',Name}> when 'true' ->
	      %% Line 5509
	      call 'io_lib':'format'
		  ([88|[77|[76|[58|[32|[84|[104|[101|[32|[97|[116|[116|[114|[105|[98|[117|[116|[101|[32|[126|[112|[32|[105|[115|[32|[110|[111|[116|[32|[100|[101|[102|[105|[110|[101|[100|[32|[105|[110|[32|[116|[104|[101|[32|[112|[114|[111|[118|[105|[100|[101|[100|[32|[115|[99|[104|[101|[109|[97|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Name|[]])
	  %% Line 5510
	  <{'disallowed_namespace',Namespace,NS,Name}> when 'true' ->
	      %% Line 5511
	      call 'io_lib':'format'
		  ([88|[77|[76|[58|[32|[84|[104|[101|[32|[97|[116|[116|[114|[105|[98|[117|[116|[101|[32|[126|[112|[32|[105|[115|[32|[110|[111|[116|[32|[118|[97|[108|[105|[100|[32|[98|[101|[99|[97|[117|[115|[101|[32|[116|[104|[101|[32|[110|[97|[109|[101|[115|[112|[97|[99|[101|[32|[126|[112|[32|[105|[115|[32|[102|[111|[114|[98|[105|[100|[100|[101|[110|[32|[98|[121|[32|[126|[112]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Name|[NS|[Namespace|[]]]])
	  %% Line 5512
	  <{'cirkular_attributeGroup_reference',Name}> when 'true' ->
	      %% Line 5513
	      call 'io_lib':'format'
		  ([83|[99|[104|[101|[109|[97|[58|[32|[67|[105|[114|[107|[117|[108|[97|[114|[32|[114|[101|[102|[101|[114|[101|[110|[99|[101|[115|[32|[116|[111|[32|[97|[116|[116|[114|[105|[98|[117|[116|[101|[32|[103|[114|[111|[117|[112|[115|[32|[97|[114|[101|[32|[102|[111|[114|[98|[105|[100|[100|[101|[110|[46|[32|[79|[110|[101|[32|[119|[97|[115|[32|[100|[101|[116|[101|[99|[116|[101|[100|[32|[105|[110|[99|[108|[117|[100|[105|[110|[103|[32|[126|[112|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Name|[]])
	  %% Line 5514
	  <{'could_not_resolve_type',ST}> when 'true' ->
	      %% Line 5515
	      call 'io_lib':'format'
		  ([83|[99|[104|[101|[109|[97|[58|[32|[84|[104|[101|[32|[115|[105|[109|[112|[108|[101|[84|[121|[112|[101|[32|[126|[112|[32|[99|[111|[117|[108|[100|[32|[110|[111|[116|[32|[98|[101|[32|[102|[111|[117|[110|[100|[32|[97|[109|[111|[110|[103|[32|[116|[104|[101|[32|[116|[121|[112|[101|[115|[32|[100|[101|[102|[105|[110|[101|[100|[32|[98|[121|[32|[116|[104|[101|[32|[112|[114|[111|[118|[105|[100|[101|[100|[32|[115|[99|[104|[101|[109|[97|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [ST|[]])
	  %% Line 5516
	  <{'could_not_check_value_for_type',Type}> when 'true' ->
	      %% Line 5517
	      call 'io_lib':'format'
		  ([88|[77|[76|[58|[32|[67|[104|[101|[99|[107|[105|[110|[103|[32|[118|[97|[108|[117|[101|[32|[102|[111|[114|[32|[116|[121|[112|[101|[32|[126|[112|[32|[105|[115|[32|[110|[111|[116|[32|[105|[109|[112|[108|[101|[109|[101|[110|[116|[101|[100|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Type|[]])
	  %% Line 5518
	  <{'unknown_simpleType',BT}> when 'true' ->
	      %% Line 5519
	      call 'io_lib':'format'
		  ([83|[99|[104|[101|[109|[97|[58|[32|[84|[104|[101|[32|[115|[105|[109|[112|[108|[101|[84|[121|[112|[101|[32|[126|[112|[32|[99|[111|[117|[108|[100|[32|[110|[111|[116|[32|[98|[101|[32|[102|[111|[117|[110|[100|[32|[97|[109|[111|[110|[103|[32|[116|[104|[101|[32|[116|[121|[112|[101|[115|[32|[100|[101|[102|[105|[110|[101|[100|[32|[98|[121|[32|[116|[104|[101|[32|[112|[114|[111|[118|[105|[100|[101|[100|[32|[115|[99|[104|[101|[109|[97]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [BT|[]])
	  %% Line 5520
	  <{'abstract_element_instance',ElName}> when 'true' ->
	      %% Line 5521
	      call 'io_lib':'format'
		  ([88|[77|[76|[58|[32|[69|[108|[101|[109|[101|[110|[116|[115|[32|[100|[101|[102|[105|[110|[101|[100|[32|[97|[115|[32|[97|[98|[115|[116|[114|[97|[99|[116|[32|[105|[110|[32|[116|[104|[101|[32|[115|[99|[104|[101|[109|[97|[32|[109|[117|[115|[116|[32|[110|[111|[116|[32|[98|[101|[32|[105|[110|[115|[116|[97|[110|[116|[105|[97|[116|[101|[100|[32|[105|[110|[32|[88|[77|[76|[58|[32|[126|[112|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [ElName|[]])
	  %% Line 5522
	  <{'qualified_name_required',LocalName}> when 'true' ->
	      %% Line 5523
	      call 'io_lib':'format'
		  ([88|[77|[76|[58|[32|[69|[108|[101|[109|[101|[110|[116|[32|[110|[97|[109|[101|[32|[126|[112|[32|[105|[110|[32|[88|[77|[76|[32|[105|[110|[115|[116|[97|[110|[99|[101|[32|[105|[115|[32|[110|[111|[116|[32|[113|[117|[97|[108|[105|[102|[105|[101|[100|[44|[32|[116|[104|[111|[117|[103|[104|[32|[116|[104|[101|[32|[115|[99|[104|[101|[109|[97|[32|[114|[101|[113|[117|[105|[114|[101|[115|[32|[116|[104|[97|[116|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [LocalName|[]])
	  %% Line 5524
	  <{'unqualified_name_required',QualifiedName}> when 'true' ->
	      %% Line 5525
	      call 'io_lib':'format'
		  ([88|[77|[76|[58|[32|[69|[108|[101|[109|[101|[110|[116|[32|[110|[97|[109|[101|[32|[126|[112|[32|[105|[110|[32|[88|[77|[76|[32|[105|[110|[115|[116|[97|[110|[99|[101|[32|[109|[117|[115|[116|[32|[98|[101|[32|[117|[110|[113|[117|[97|[108|[105|[102|[105|[101|[100|[44|[32|[97|[99|[99|[111|[114|[100|[105|[110|[103|[32|[116|[111|[32|[115|[99|[104|[101|[109|[97|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [QualifiedName|[]])
	  %% Line 5526
	  <{'illegal_key_sequence_value',Err}> when 'true' ->
	      %% Line 5527
	      call 'io_lib':'format'
		  ([88|[77|[76|[58|[32|[84|[104|[101|[32|[39|[107|[101|[121|[45|[115|[101|[113|[117|[101|[110|[99|[101|[39|[44|[32|[40|[115|[101|[32|[88|[77|[76|[45|[115|[112|[101|[99|[32|[51|[46|[49|[49|[46|[52|[41|[44|[32|[109|[117|[115|[116|[32|[98|[101|[32|[97|[32|[110|[111|[100|[101|[32|[119|[105|[116|[104|[32|[97|[116|[32|[109|[111|[115|[116|[32|[111|[110|[101|[32|[109|[101|[109|[98|[101|[114|[58|[32|[126|[112]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Err|[]])
	  %% Line 5528
	  <{'qualified_node_set_not_correct_for_key',_X_Err}> when 'true' ->
	      %% Line 5529
	      [83|[99|[104|[101|[109|[97|[58|[32|[84|[104|[101|[32|[39|[116|[97|[114|[103|[101|[116|[32|[110|[111|[100|[101|[32|[115|[101|[116|[39|[32|[97|[110|[100|[32|[39|[113|[117|[97|[108|[105|[102|[105|[101|[100|[32|[110|[111|[100|[101|[32|[115|[101|[116|[39|[32|[40|[115|[101|[32|[88|[77|[76|[45|[115|[112|[101|[99|[32|[51|[46|[49|[49|[46|[52|[46|[50|[46|[49|[41|[32|[109|[117|[115|[116|[32|[98|[101|[32|[101|[113|[117|[97|[108|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 5530
	  <{'key_value_not_unique',KS}> when 'true' ->
	      %% Line 5531
	      call 'io_lib':'format'
		  ([83|[99|[104|[101|[109|[97|[58|[32|[75|[101|[121|[32|[118|[97|[108|[117|[101|[115|[32|[109|[117|[115|[116|[32|[98|[101|[32|[117|[110|[105|[113|[117|[101|[32|[119|[105|[116|[104|[105|[110|[32|[116|[104|[101|[32|[115|[99|[104|[101|[109|[97|[46|[32|[84|[104|[105|[115|[32|[105|[115|[32|[110|[111|[116|[32|[126|[112|[44]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [KS|[]])
	  %% Line 5532
	  <{'keyref_missed_matching_key',Refer}> when 'true' ->
	      %% Line 5533
	      call 'io_lib':'format'
		  ([83|[99|[104|[101|[109|[97|[58|[32|[84|[104|[105|[115|[32|[107|[101|[121|[114|[101|[102|[32|[104|[97|[100|[32|[110|[111|[32|[109|[97|[116|[99|[104|[105|[110|[103|[32|[107|[101|[121|[32|[126|[112|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Refer|[]])
	  %% Line 5534
	  <{'keyref_unexpected_object',_X_Other}> when 'true' ->
	      %% Line 5535
	      [83|[99|[104|[101|[109|[97|[58|[32|[65|[110|[32|[117|[110|[102|[111|[114|[101|[115|[101|[101|[110|[32|[101|[114|[114|[111|[114|[32|[99|[97|[115|[101|[32|[111|[99|[99|[117|[114|[101|[100|[44|[32|[117|[110|[107|[110|[111|[119|[110|[32|[102|[97|[105|[108|[117|[114|[101|[32|[99|[97|[117|[115|[101|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 5536
	  <{'cardinality_of_fields_not_equal',KR,K}> when 'true' ->
	      %% Line 5537
	      call 'io_lib':'format'
		  ([83|[99|[104|[101|[109|[97|[58|[32|[107|[101|[121|[114|[101|[102|[32|[97|[110|[100|[32|[116|[104|[101|[32|[99|[111|[114|[114|[101|[115|[112|[111|[110|[100|[105|[110|[103|[32|[107|[101|[121|[32|[109|[117|[115|[116|[32|[104|[97|[118|[101|[32|[115|[97|[109|[101|[32|[99|[97|[114|[100|[105|[110|[97|[108|[105|[116|[121|[32|[111|[102|[32|[116|[104|[101|[105|[114|[32|[102|[105|[101|[108|[100|[115|[46|[32|[77|[105|[115|[115|[109|[97|[116|[99|[104|[32|[105|[110|[32|[116|[104|[105|[115|[32|[99|[97|[115|[101|[32|[107|[101|[121|[114|[101|[102|[58|[32|[126|[112|[44|[32|[107|[101|[121|[58|[32|[126|[112|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [KR|[K|[]]])
	  %% Line 5538
	  <{'could_not_load_keyref',Name}> when 'true' ->
	      %% Line 5539
	      call 'io_lib':'format'
		  ([83|[99|[104|[101|[109|[97|[58|[32|[84|[104|[101|[32|[115|[99|[104|[101|[109|[97|[32|[100|[105|[100|[110|[39|[116|[32|[100|[101|[102|[105|[110|[101|[32|[97|[32|[107|[101|[121|[114|[101|[102|[32|[119|[105|[116|[104|[32|[116|[104|[101|[32|[110|[97|[109|[101|[32|[126|[112|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Name|[]])
	  %% Line 5540
	  <{'reference_undeclared',Kind,Ref}> when 'true' ->
	      %% Line 5541
	      call 'io_lib':'format'
		  ([83|[99|[104|[101|[109|[97|[58|[32|[84|[104|[101|[32|[115|[99|[104|[101|[109|[97|[32|[100|[105|[100|[110|[39|[116|[32|[100|[101|[102|[105|[110|[101|[32|[97|[110|[32|[126|[112|[32|[119|[105|[116|[104|[32|[116|[104|[101|[32|[110|[97|[109|[101|[32|[126|[112|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Kind|[Ref|[]]])
	  %% Line 5542
	  <{'cyclic_substitutionGroup',SGs}> when 'true' ->
	      %% Line 5543
	      call 'io_lib':'format'
		  ([83|[99|[104|[101|[109|[97|[58|[32|[99|[121|[99|[108|[105|[99|[32|[115|[117|[98|[115|[116|[105|[116|[117|[116|[105|[111|[110|[71|[114|[111|[117|[112|[32|[119|[97|[115|[32|[100|[101|[116|[101|[99|[116|[101|[100|[44|[32|[115|[117|[98|[115|[116|[105|[116|[117|[116|[105|[111|[110|[71|[114|[111|[117|[112|[32|[115|[116|[114|[117|[99|[116|[117|[114|[101|[32|[105|[115|[32|[126|[112|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [SGs|[]])
	  %% Line 5544
	  <{'substitutionGroup_error',Head,SG}> when 'true' ->
	      %% Line 5545
	      call 'io_lib':'format'
		  ([83|[99|[104|[101|[109|[97|[58|[32|[69|[105|[116|[104|[101|[114|[32|[111|[102|[32|[115|[117|[98|[115|[116|[105|[116|[117|[116|[105|[111|[110|[71|[114|[111|[117|[112|[32|[109|[101|[109|[98|[101|[114|[115|[32|[126|[112|[32|[111|[114|[32|[126|[112|[32|[105|[115|[32|[110|[111|[116|[32|[100|[101|[102|[105|[110|[101|[100|[32|[105|[110|[32|[116|[104|[101|[32|[112|[114|[111|[118|[105|[100|[101|[100|[32|[115|[99|[104|[101|[109|[97|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Head|[SG|[]]])
	  %% Line 5546
	  <{'cyclic_definition',CA}> when 'true' ->
	      %% Line 5547
	      call 'io_lib':'format'
		  ([83|[99|[104|[101|[109|[97|[58|[32|[65|[32|[102|[111|[114|[98|[105|[100|[100|[101|[110|[32|[99|[105|[99|[117|[108|[97|[114|[32|[100|[101|[102|[105|[110|[105|[116|[105|[111|[110|[32|[119|[97|[115|[32|[100|[101|[116|[101|[99|[116|[101|[100|[32|[126|[112|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [CA|[]])
	  %% Line 5548
	  <{'type_of_element_not_derived',MemT,HeadT}> when 'true' ->
	      %% Line 5549
	      call 'io_lib':'format'
		  ([83|[99|[104|[101|[109|[97|[58|[32|[84|[121|[112|[101|[32|[105|[110|[32|[115|[117|[98|[115|[116|[105|[116|[117|[116|[105|[111|[110|[71|[114|[111|[117|[112|[32|[109|[101|[109|[98|[101|[114|[115|[32|[115|[104|[111|[117|[108|[100|[32|[98|[101|[32|[115|[105|[109|[112|[108|[101|[84|[121|[112|[101|[32|[111|[114|[32|[99|[111|[109|[112|[108|[101|[120|[84|[121|[112|[101|[46|[32|[73|[110|[32|[116|[104|[105|[115|[32|[99|[97|[115|[101|[32|[126|[112|[32|[97|[110|[100|[32|[126|[112|[32|[119|[101|[114|[101|[32|[102|[111|[117|[110|[100|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [MemT|[HeadT|[]]])
	  %% Line 5550
	  <{'derivation_blocked',BlockTag,Derivation}> when 'true' ->
	      %% Line 5551
	      call 'io_lib':'format'
		  ([68|[101|[114|[105|[118|[97|[116|[105|[111|[110|[32|[98|[121|[32|[126|[112|[32|[105|[115|[32|[98|[108|[111|[99|[107|[101|[100|[32|[98|[121|[32|[116|[104|[101|[32|[98|[108|[111|[99|[107|[105|[110|[103|[32|[116|[97|[103|[32|[126|[112|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Derivation|[BlockTag|[]]])
	  %% Line 5552
	  <{'names_not_equal',QName1,QName2}> when 'true' ->
	      %% Line 5553
	      call 'io_lib':'format'
		  ([84|[104|[101|[32|[116|[121|[112|[101|[32|[126|[112|[32|[115|[101|[101|[109|[115|[32|[116|[111|[32|[98|[101|[32|[100|[101|[114|[105|[118|[101|[100|[32|[102|[114|[111|[109|[32|[97|[110|[111|[116|[104|[101|[114|[32|[116|[121|[112|[101|[32|[116|[104|[97|[110|[32|[116|[104|[101|[32|[98|[97|[115|[101|[32|[116|[121|[112|[101|[32|[126|[112]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [QName2|[QName1|[]]])
	  %% Line 5556
	  <{'illegal_content_in_extension',Ext}> when 'true' ->
	      %% Line 5557
	      call 'io_lib':'format'
		  ([84|[104|[101|[32|[101|[120|[116|[101|[110|[115|[105|[111|[110|[32|[99|[111|[110|[116|[101|[110|[116|[32|[126|[112|[32|[100|[105|[100|[110|[39|[116|[32|[109|[97|[116|[99|[104|[32|[116|[104|[101|[32|[99|[111|[110|[116|[101|[110|[116|[32|[109|[111|[100|[101|[108|[32|[111|[102|[32|[116|[104|[101|[32|[112|[114|[111|[118|[105|[100|[101|[100|[32|[115|[99|[104|[101|[109|[97|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Ext|[]])
	  %% Line 5558
	  <{SeqCho,'expected',Other,'found'}>
	      when let <_cor19> =
		    %% Line 5559
		    call 'erlang':'=:='
			(SeqCho, 'sequence')
		in  let <_cor20> =
			%% Line 5559
			call 'erlang':'=:='
			    (SeqCho, 'choice')
		    in  %% Line 5559
			call 'erlang':'or'
			    (_cor19, _cor20) ->
	      %% Line 5560
	      call 'io_lib':'format'
		  ([83|[99|[104|[101|[109|[97|[58|[32|[84|[104|[101|[32|[114|[101|[115|[116|[114|[105|[99|[116|[105|[111|[110|[32|[99|[111|[110|[116|[101|[110|[116|[32|[126|[112|[32|[100|[105|[100|[110|[39|[116|[32|[109|[97|[116|[99|[104|[32|[116|[104|[101|[32|[99|[111|[110|[116|[101|[110|[116|[32|[109|[111|[100|[101|[108|[32|[111|[102|[32|[116|[104|[101|[32|[112|[114|[111|[118|[105|[100|[101|[100|[32|[115|[99|[104|[101|[109|[97|[44|[32|[126|[112|[32|[119|[97|[115|[32|[101|[120|[112|[101|[99|[116|[101|[100|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [SeqCho|[Other|[]]])
	  %% Line 5561
	  <{'does_not_support',F,'in_restriction'}> when 'true' ->
	      %% Line 5562
	      call 'io_lib':'format'
		  ([83|[99|[104|[101|[109|[97|[58|[32|[84|[104|[101|[32|[115|[116|[114|[117|[99|[116|[117|[114|[101|[32|[126|[112|[32|[105|[115|[32|[110|[111|[116|[32|[115|[117|[112|[112|[111|[114|[116|[101|[100|[32|[105|[110|[32|[116|[104|[101|[32|[105|[109|[112|[108|[101|[109|[101|[110|[116|[97|[116|[105|[111|[110|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [F|[]])
	  %% Line 5563
	  <{'illegal_content_simple_type',CM,TypeName}> when 'true' ->
	      %% Line 5564
	      call 'io_lib':'format'
		  ([83|[99|[104|[101|[109|[97|[58|[32|[126|[112|[32|[99|[111|[110|[116|[101|[110|[116|[32|[105|[115|[32|[110|[111|[116|[32|[97|[108|[108|[111|[119|[101|[100|[32|[105|[110|[32|[97|[32|[115|[105|[109|[112|[108|[101|[84|[121|[112|[101|[44|[32|[97|[115|[32|[105|[110|[32|[126|[112|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [CM|[TypeName|[]]])
	  %% Line 5565
	  <{'illegal_in_restriction_of_simpleType',X}> when 'true' ->
	      %% Line 5566
	      call 'io_lib':'format'
		  ([83|[99|[104|[101|[109|[97|[58|[32|[84|[104|[101|[32|[126|[112|[32|[99|[111|[110|[116|[101|[110|[116|[32|[105|[115|[32|[105|[108|[108|[101|[103|[97|[108|[32|[105|[110|[32|[97|[32|[115|[105|[109|[112|[108|[101|[84|[121|[112|[101|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [X|[]])
	  %% Line 5567
	  <{'element',Name,'not_present_in_restriction'}> when 'true' ->
	      %% Line 5568
	      call 'io_lib':'format'
		  ([83|[99|[104|[101|[109|[97|[58|[32|[73|[110|[32|[97|[32|[114|[101|[115|[116|[114|[105|[99|[116|[105|[111|[110|[32|[97|[108|[108|[32|[101|[108|[101|[109|[101|[110|[116|[32|[110|[97|[109|[101|[115|[32|[111|[102|[32|[116|[104|[101|[32|[114|[101|[115|[116|[114|[105|[99|[116|[105|[111|[110|[32|[109|[117|[115|[116|[32|[98|[101|[32|[111|[110|[101|[32|[111|[102|[32|[116|[104|[101|[32|[101|[108|[101|[109|[101|[110|[116|[115|[32|[111|[102|[32|[116|[104|[101|[32|[98|[97|[115|[101|[32|[116|[121|[112|[101|[46|[32|[126|[112|[32|[105|[115|[32|[110|[111|[116|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Name|[]])
	  %% Line 5569
	  <{'invalid_derivation',EA,BaseAtts}> when 'true' ->
	      %% Line 5570
	      call 'io_lib':'format'
		  ([83|[99|[104|[101|[109|[97|[58|[32|[65|[110|[32|[97|[110|[121|[65|[116|[116|[114|[105|[98|[117|[116|[101|[32|[126|[112|[32|[105|[110|[32|[97|[32|[114|[101|[115|[116|[114|[105|[99|[116|[101|[100|[32|[100|[101|[114|[105|[118|[101|[100|[32|[116|[121|[112|[101|[32|[109|[117|[115|[116|[32|[98|[101|[32|[112|[114|[101|[115|[101|[110|[116|[32|[97|[109|[111|[110|[103|[32|[116|[104|[101|[32|[98|[97|[115|[101|[32|[116|[121|[112|[101|[32|[97|[116|[116|[114|[105|[98|[117|[116|[101|[115|[32|[126|[112|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [EA|[BaseAtts|[]]])
	  %% Line 5571
	  <{'wildcard_namespace',NS,'not_subset_of_base_namespace',BaseNS}> when 'true' ->
	      %% Line 5572
	      call 'io_lib':'format'
		  ([83|[99|[104|[101|[109|[97|[58|[32|[83|[101|[101|[32|[88|[77|[76|[32|[115|[112|[101|[99|[46|[32|[115|[101|[99|[116|[105|[111|[110|[32|[51|[46|[49|[48|[46|[54|[46|[32|[84|[104|[105|[115|[32|[119|[105|[108|[100|[99|[97|[114|[100|[32|[110|[97|[109|[101|[115|[112|[97|[99|[101|[32|[126|[112|[32|[105|[115|[32|[110|[111|[116|[32|[97|[108|[108|[111|[119|[101|[100|[32|[98|[121|[32|[116|[104|[101|[32|[98|[97|[115|[101|[32|[110|[97|[109|[101|[115|[112|[97|[99|[101|[32|[114|[101|[115|[116|[114|[105|[99|[116|[105|[111|[110|[115|[32|[126|[112|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [NS|[BaseNS|[]]])
	  %% Line 5573
	  <{'wildcard_namespace_union_not_expressible',NS1,NS2}> when 'true' ->
	      %% Line 5574
	      call 'io_lib':'format'
		  ([83|[99|[104|[101|[109|[97|[58|[32|[83|[101|[101|[32|[88|[77|[76|[32|[115|[112|[101|[99|[46|[32|[115|[101|[99|[116|[105|[111|[110|[32|[51|[46|[49|[48|[46|[54|[46|[32|[84|[104|[101|[32|[117|[110|[105|[111|[110|[32|[111|[102|[32|[110|[97|[109|[101|[115|[112|[97|[99|[101|[115|[32|[126|[112|[32|[97|[110|[100|[32|[126|[112|[32|[105|[115|[32|[110|[111|[116|[32|[101|[120|[112|[114|[101|[115|[115|[105|[98|[108|[101|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [NS1|[NS2|[]]])
	  %% Line 5575
	  <{'wildcard_namespace_intersection_not_expressible',NS1,NS2}> when 'true' ->
	      %% Line 5576
	      call 'io_lib':'format'
		  ([83|[99|[104|[101|[109|[97|[58|[32|[83|[101|[101|[32|[88|[77|[76|[32|[115|[112|[101|[99|[46|[32|[115|[101|[99|[116|[105|[111|[110|[32|[51|[46|[49|[48|[46|[54|[46|[32|[84|[104|[101|[32|[105|[110|[116|[101|[114|[115|[101|[99|[116|[105|[111|[110|[32|[111|[102|[32|[110|[97|[109|[101|[115|[112|[97|[99|[101|[115|[32|[126|[112|[32|[97|[110|[100|[32|[126|[112|[32|[105|[115|[32|[110|[111|[116|[32|[101|[120|[112|[114|[101|[115|[115|[105|[98|[108|[101|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [NS1|[NS2|[]]])
	  %% Line 5577
	  <{'circular_reference_of_type',TName}> when 'true' ->
	      %% Line 5578
	      call 'io_lib':'format'
		  ([83|[99|[104|[101|[109|[97|[58|[32|[65|[110|[32|[105|[108|[108|[105|[99|[105|[116|[32|[99|[105|[114|[99|[117|[108|[97|[114|[32|[114|[101|[102|[101|[114|[101|[110|[99|[101|[32|[105|[110|[118|[111|[108|[118|[105|[110|[103|[32|[115|[105|[109|[112|[108|[101|[47|[99|[111|[109|[112|[108|[101|[120|[32|[116|[121|[112|[101|[32|[126|[112|[32|[104|[97|[115|[32|[98|[101|[101|[110|[32|[100|[101|[116|[101|[99|[116|[101|[100|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [TName|[]])
	  %% Line 5579
	  <{'type_not_uniquely_defined_in_schema',Name}> when 'true' ->
	      %% Line 5580
	      call 'io_lib':'format'
		  ([83|[99|[104|[101|[109|[97|[58|[32|[83|[101|[101|[32|[88|[77|[76|[32|[115|[112|[101|[99|[46|[32|[115|[101|[99|[116|[105|[111|[110|[32|[51|[46|[52|[46|[49|[46|[32|[84|[121|[112|[101|[32|[110|[97|[109|[101|[115|[32|[119|[104|[101|[116|[104|[101|[114|[32|[115|[105|[109|[112|[108|[101|[32|[111|[114|[32|[99|[111|[109|[112|[108|[101|[120|[32|[109|[117|[115|[116|[32|[98|[101|[32|[117|[110|[105|[113|[117|[101|[32|[119|[105|[116|[104|[105|[110|[32|[116|[104|[101|[32|[115|[99|[104|[101|[109|[97|[46|[32|[126|[112|[32|[105|[115|[32|[110|[111|[116|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Name|[]])
	  %% Line 5581
	  <{'not_uniquely_defined_in_schema',Key}> when 'true' ->
	      %% Line 5582
	      call 'io_lib':'format'
		  ([83|[99|[104|[101|[109|[97|[58|[32|[65|[108|[108|[32|[115|[99|[104|[101|[109|[97|[32|[111|[98|[106|[101|[99|[116|[115|[32|[111|[102|[32|[116|[104|[101|[32|[115|[97|[109|[101|[32|[107|[105|[110|[100|[32|[105|[100|[101|[110|[116|[105|[102|[105|[101|[100|[32|[98|[121|[32|[110|[97|[109|[101|[32|[109|[117|[115|[116|[32|[98|[101|[32|[117|[110|[105|[113|[117|[101|[32|[119|[105|[116|[104|[105|[110|[32|[116|[104|[101|[32|[115|[99|[104|[101|[109|[97|[46|[32|[126|[112|[32|[105|[115|[32|[110|[111|[116|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Key|[]])
	  %% Line 5583
	  <{'illegal_ID_value',ID}> when 'true' ->
	      %% Line 5584
	      call 'io_lib':'format'
		  ([84|[104|[101|[32|[73|[68|[32|[118|[97|[108|[117|[101|[32|[126|[112|[32|[105|[115|[32|[110|[111|[116|[32|[97|[108|[108|[111|[119|[101|[100|[32|[97|[115|[32|[97|[110|[32|[73|[68|[32|[118|[97|[108|[117|[101|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [ID|[]])
	  %% Line 5585
	  <{'incomplete_file',_X_FileName,_X_Other}> when 'true' ->
	      %% Line 5586
	      [83|[99|[104|[101|[109|[97|[58|[32|[84|[104|[101|[32|[102|[105|[108|[101|[32|[99|[111|[110|[116|[97|[105|[110|[105|[110|[103|[32|[97|[32|[115|[99|[104|[101|[109|[97|[32|[115|[116|[97|[116|[101|[32|[109|[117|[115|[116|[32|[98|[101|[32|[112|[114|[111|[100|[117|[99|[101|[100|[32|[98|[121|[32|[120|[109|[101|[114|[108|[95|[120|[115|[100|[58|[115|[116|[97|[116|[101|[50|[102|[105|[108|[101|[47|[91|[49|[44|[50|[93|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 5587
	  <{'unexpected_content_in_any',A}> when 'true' ->
	      %% Line 5588
	      call 'io_lib':'format'
		  ([83|[99|[104|[101|[109|[97|[58|[32|[84|[104|[101|[32|[97|[110|[121|[32|[116|[121|[112|[101|[32|[105|[115|[32|[99|[111|[110|[115|[105|[100|[101|[114|[101|[100|[32|[116|[111|[32|[104|[97|[118|[101|[32|[110|[111|[32|[99|[111|[110|[116|[101|[110|[116|[32|[98|[101|[115|[105|[100|[101|[115|[32|[97|[110|[110|[111|[116|[97|[116|[105|[111|[110|[46|[32|[126|[112|[32|[119|[97|[115|[32|[102|[111|[117|[110|[100|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [A|[]])
	  %% Line 5589
	  <{'erroneous_content_in_identity_constraint',IDC,Err}> when 'true' ->
	      %% Line 5590
	      call 'io_lib':'format'
		  ([83|[99|[104|[101|[109|[97|[58|[32|[65|[110|[32|[126|[112|[32|[105|[100|[101|[110|[116|[105|[116|[121|[32|[99|[111|[110|[115|[116|[114|[97|[105|[110|[116|[32|[109|[117|[115|[116|[32|[104|[97|[118|[101|[32|[111|[110|[101|[32|[115|[101|[108|[101|[99|[116|[111|[114|[32|[97|[110|[100|[32|[111|[110|[101|[32|[111|[114|[32|[109|[111|[114|[101|[32|[102|[105|[101|[108|[100|[32|[105|[110|[32|[99|[111|[110|[116|[101|[110|[116|[46|[32|[84|[104|[105|[115|[32|[99|[97|[115|[101|[32|[126|[112]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [IDC|[Err|[]]])
	  %% Line 5591
	  <{'missing_xpath_attribute',IDCContent}> when 'true' ->
	      %% Line 5592
	      call 'io_lib':'format'
		  ([83|[99|[104|[101|[109|[97|[58|[32|[65|[32|[126|[112|[32|[105|[110|[32|[97|[32|[105|[100|[101|[110|[116|[105|[116|[121|[32|[99|[111|[110|[115|[116|[114|[97|[105|[110|[116|[32|[109|[117|[115|[116|[32|[104|[97|[118|[101|[32|[97|[32|[120|[112|[97|[116|[104|[32|[97|[116|[116|[114|[105|[98|[117|[116|[101|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [IDCContent|[]])
	  %% Line 5593
	  <{'content_in_anyAttribute',Err}> when 'true' ->
	      %% Line 5594
	      call 'io_lib':'format'
		  ([83|[99|[104|[101|[109|[97|[58|[32|[126|[112|[32|[105|[115|[32|[110|[111|[116|[32|[97|[108|[108|[111|[119|[101|[100|[32|[105|[110|[32|[97|[110|[121|[65|[116|[116|[114|[105|[98|[117|[116|[101|[46|[32|[67|[111|[110|[116|[101|[110|[116|[32|[99|[97|[110|[110|[111|[116|[32|[98|[101|[32|[97|[110|[121|[116|[104|[105|[110|[103|[32|[101|[108|[115|[101|[32|[116|[104|[97|[110|[32|[97|[110|[110|[111|[116|[97|[116|[105|[111|[110|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Err|[]])
	  %% Line 5595
	  <{'content_in_simpleContent',Err}> when 'true' ->
	      %% Line 5596
	      call 'io_lib':'format'
		  ([83|[99|[104|[101|[109|[97|[58|[32|[67|[111|[110|[116|[101|[110|[116|[32|[111|[102|[32|[115|[105|[109|[112|[108|[101|[67|[111|[110|[116|[101|[110|[116|[32|[99|[97|[110|[32|[111|[110|[108|[121|[32|[98|[101|[32|[97|[110|[32|[111|[112|[116|[105|[111|[110|[97|[108|[32|[97|[110|[110|[111|[116|[97|[116|[105|[111|[110|[32|[97|[110|[100|[32|[111|[110|[101|[32|[111|[102|[32|[114|[101|[115|[116|[114|[105|[99|[116|[105|[111|[110|[32|[111|[114|[32|[101|[120|[116|[101|[110|[115|[105|[111|[110|[46|[32|[73|[110|[32|[116|[104|[105|[115|[32|[99|[97|[115|[101|[32|[126|[112|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Err|[]])
	  %% Line 5597
	  <{'complexContent_content_failure',Err}> when 'true' ->
	      %% Line 5598
	      call 'io_lib':'format'
		  ([83|[99|[104|[101|[109|[97|[58|[32|[66|[101|[115|[105|[100|[101|[115|[32|[97|[110|[32|[111|[112|[116|[105|[111|[110|[97|[108|[32|[97|[110|[110|[111|[116|[97|[116|[105|[111|[110|[32|[99|[111|[109|[112|[108|[101|[120|[67|[111|[110|[116|[101|[110|[116|[32|[115|[104|[111|[117|[108|[100|[32|[104|[97|[118|[101|[32|[111|[110|[101|[32|[111|[102|[32|[114|[101|[115|[116|[114|[105|[99|[116|[105|[111|[110|[32|[111|[114|[32|[101|[120|[116|[101|[110|[115|[105|[111|[110|[46|[32|[73|[110|[32|[116|[104|[105|[115|[32|[99|[97|[115|[101|[32|[126|[112|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Err|[]])
	  %% Line 5599
	  <{'union_member_type_not_simpleType',IllegalType}> when 'true' ->
	      %% Line 5600
	      call 'io_lib':'format'
		  ([83|[99|[104|[101|[109|[97|[58|[32|[126|[112|[32|[105|[115|[32|[110|[111|[116|[32|[97|[108|[108|[111|[119|[101|[100|[32|[105|[110|[32|[97|[32|[117|[110|[105|[111|[110|[46|[32|[67|[111|[110|[116|[101|[110|[116|[32|[109|[117|[115|[116|[32|[98|[101|[32|[97|[110|[121|[32|[110|[121|[109|[98|[101|[114|[32|[111|[102|[32|[115|[105|[109|[112|[108|[101|[84|[121|[112|[101|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [IllegalType|[]])
	  %% Line 5601
	  <{'missing_base_type','restriction',_X_Other}> when 'true' ->
	      %% Line 5602
	      [83|[99|[104|[101|[109|[97|[58|[32|[65|[32|[114|[101|[115|[116|[114|[105|[99|[116|[105|[111|[110|[32|[109|[117|[115|[116|[32|[104|[97|[118|[101|[32|[97|[32|[98|[97|[115|[101|[32|[116|[121|[112|[101|[44|[32|[101|[105|[116|[104|[101|[114|[32|[97|[115|[115|[105|[103|[110|[101|[100|[32|[98|[121|[32|[116|[104|[101|[32|[39|[98|[97|[115|[101|[39|[32|[97|[116|[116|[114|[105|[98|[117|[116|[101|[32|[111|[114|[32|[97|[115|[32|[97|[32|[115|[105|[109|[112|[108|[101|[84|[121|[112|[101|[32|[100|[101|[102|[105|[110|[101|[100|[32|[105|[110|[32|[99|[111|[110|[116|[101|[110|[116|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 5603
	  <{'content_failure_expected_restriction_or_extension',Kind,_cor55}> when 'true' ->
	      %% Line 5604
	      call 'io_lib':'format'
		  ([83|[99|[104|[101|[109|[97|[58|[32|[65|[32|[126|[112|[32|[104|[97|[100|[32|[110|[111|[32|[114|[101|[115|[116|[114|[105|[99|[116|[105|[111|[110|[32|[111|[114|[32|[101|[120|[116|[101|[110|[115|[105|[111|[110|[32|[105|[110|[32|[99|[111|[110|[116|[101|[110|[116|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Kind|[]])
	  %% Line 5605
	  <{'content_failure_only_one_restriction_or_extension_allowed',Kind,_cor56}> when 'true' ->
	      %% Line 5606
	      call 'io_lib':'format'
		  ([83|[99|[104|[101|[109|[97|[58|[32|[65|[32|[126|[112|[32|[99|[97|[110|[32|[111|[110|[108|[121|[32|[104|[97|[118|[101|[32|[111|[110|[101|[32|[111|[102|[32|[114|[101|[115|[116|[114|[105|[99|[116|[105|[111|[110|[32|[111|[114|[32|[101|[120|[116|[101|[110|[115|[105|[111|[110|[32|[105|[110|[32|[99|[111|[110|[116|[101|[110|[116|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Kind|[]])
	  %% Line 5607
	  <{'mandatory_component_missing',S4SCMRest,Kind}> when 'true' ->
	      %% Line 5608
	      call 'io_lib':'format'
		  ([83|[99|[104|[101|[109|[97|[58|[32|[65|[102|[116|[101|[114|[32|[109|[97|[116|[99|[104|[105|[110|[103|[32|[97|[32|[126|[112|[32|[116|[104|[101|[32|[115|[99|[104|[101|[109|[97|[32|[115|[104|[111|[117|[108|[100|[32|[104|[97|[118|[101|[32|[104|[97|[100|[32|[99|[111|[110|[116|[101|[110|[116|[32|[126|[112|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Kind|[S4SCMRest|[]]])
	  %% Line 5609
	  <Err> when 'true' ->
	      %% Line 5610
	      call 'io_lib':'format'
		  ([126|[112|[126|[110]]]], [Err|[]])
	end
'initial_tab_data'/1 =
    %% Line 5619
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 5621
	    call 'erlang':'binary_to_term'
		(%% Line 5622
		 #{#<131>(8,1,'integer',['unsigned'|['big']]),
		   #<108>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<9>(8,1,'integer',['unsigned'|['big']]),
		   #<104>(8,1,'integer',['unsigned'|['big']]),
		   #<2>(8,1,'integer',['unsigned'|['big']]),
		   #<104>(8,1,'integer',['unsigned'|['big']]),
		   #<2>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<9>(8,1,'integer',['unsigned'|['big']]),
		   #<97>(8,1,'integer',['unsigned'|['big']]),
		   #<116>(8,1,'integer',['unsigned'|['big']]),
		   #<116>(8,1,'integer',['unsigned'|['big']]),
		   #<114>(8,1,'integer',['unsigned'|['big']]),
		   #<105>(8,1,'integer',['unsigned'|['big']]),
		   #<98>(8,1,'integer',['unsigned'|['big']]),
		   #<117>(8,1,'integer',['unsigned'|['big']]),
		   #<116>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<104>(8,1,'integer',['unsigned'|['big']]),
		   #<3>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<5>(8,1,'integer',['unsigned'|['big']]),
		   #<115>(8,1,'integer',['unsigned'|['big']]),
		   #<112>(8,1,'integer',['unsigned'|['big']]),
		   #<97>(8,1,'integer',['unsigned'|['big']]),
		   #<99>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<106>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<36>(8,1,'integer',['unsigned'|['big']]),
		   #<104>(8,1,'integer',['unsigned'|['big']]),
		   #<116>(8,1,'integer',['unsigned'|['big']]),
		   #<116>(8,1,'integer',['unsigned'|['big']]),
		   #<112>(8,1,'integer',['unsigned'|['big']]),
		   #<58>(8,1,'integer',['unsigned'|['big']]),
		   #<47>(8,1,'integer',['unsigned'|['big']]),
		   #<47>(8,1,'integer',['unsigned'|['big']]),
		   #<119>(8,1,'integer',['unsigned'|['big']]),
		   #<119>(8,1,'integer',['unsigned'|['big']]),
		   #<119>(8,1,'integer',['unsigned'|['big']]),
		   #<46>(8,1,'integer',['unsigned'|['big']]),
		   #<119>(8,1,'integer',['unsigned'|['big']]),
		   #<51>(8,1,'integer',['unsigned'|['big']]),
		   #<46>(8,1,'integer',['unsigned'|['big']]),
		   #<111>(8,1,'integer',['unsigned'|['big']]),
		   #<114>(8,1,'integer',['unsigned'|['big']]),
		   #<103>(8,1,'integer',['unsigned'|['big']]),
		   #<47>(8,1,'integer',['unsigned'|['big']]),
		   #<88>(8,1,'integer',['unsigned'|['big']]),
		   #<77>(8,1,'integer',['unsigned'|['big']]),
		   #<76>(8,1,'integer',['unsigned'|['big']]),
		   #<47>(8,1,'integer',['unsigned'|['big']]),
		   #<49>(8,1,'integer',['unsigned'|['big']]),
		   #<57>(8,1,'integer',['unsigned'|['big']]),
		   #<57>(8,1,'integer',['unsigned'|['big']]),
		   #<56>(8,1,'integer',['unsigned'|['big']]),
		   #<47>(8,1,'integer',['unsigned'|['big']]),
		   #<110>(8,1,'integer',['unsigned'|['big']]),
		   #<97>(8,1,'integer',['unsigned'|['big']]),
		   #<109>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<115>(8,1,'integer',['unsigned'|['big']]),
		   #<112>(8,1,'integer',['unsigned'|['big']]),
		   #<97>(8,1,'integer',['unsigned'|['big']]),
		   #<99>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<104>(8,1,'integer',['unsigned'|['big']]),
		   #<9>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<16>(8,1,'integer',['unsigned'|['big']]),
		   #<115>(8,1,'integer',['unsigned'|['big']]),
		   #<99>(8,1,'integer',['unsigned'|['big']]),
		   #<104>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<109>(8,1,'integer',['unsigned'|['big']]),
		   #<97>(8,1,'integer',['unsigned'|['big']]),
		   #<95>(8,1,'integer',['unsigned'|['big']]),
		   #<97>(8,1,'integer',['unsigned'|['big']]),
		   #<116>(8,1,'integer',['unsigned'|['big']]),
		   #<116>(8,1,'integer',['unsigned'|['big']]),
		   #<114>(8,1,'integer',['unsigned'|['big']]),
		   #<105>(8,1,'integer',['unsigned'|['big']]),
		   #<98>(8,1,'integer',['unsigned'|['big']]),
		   #<117>(8,1,'integer',['unsigned'|['big']]),
		   #<116>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<104>(8,1,'integer',['unsigned'|['big']]),
		   #<3>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<5>(8,1,'integer',['unsigned'|['big']]),
		   #<115>(8,1,'integer',['unsigned'|['big']]),
		   #<112>(8,1,'integer',['unsigned'|['big']]),
		   #<97>(8,1,'integer',['unsigned'|['big']]),
		   #<99>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<106>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<36>(8,1,'integer',['unsigned'|['big']]),
		   #<104>(8,1,'integer',['unsigned'|['big']]),
		   #<116>(8,1,'integer',['unsigned'|['big']]),
		   #<116>(8,1,'integer',['unsigned'|['big']]),
		   #<112>(8,1,'integer',['unsigned'|['big']]),
		   #<58>(8,1,'integer',['unsigned'|['big']]),
		   #<47>(8,1,'integer',['unsigned'|['big']]),
		   #<47>(8,1,'integer',['unsigned'|['big']]),
		   #<119>(8,1,'integer',['unsigned'|['big']]),
		   #<119>(8,1,'integer',['unsigned'|['big']]),
		   #<119>(8,1,'integer',['unsigned'|['big']]),
		   #<46>(8,1,'integer',['unsigned'|['big']]),
		   #<119>(8,1,'integer',['unsigned'|['big']]),
		   #<51>(8,1,'integer',['unsigned'|['big']]),
		   #<46>(8,1,'integer',['unsigned'|['big']]),
		   #<111>(8,1,'integer',['unsigned'|['big']]),
		   #<114>(8,1,'integer',['unsigned'|['big']]),
		   #<103>(8,1,'integer',['unsigned'|['big']]),
		   #<47>(8,1,'integer',['unsigned'|['big']]),
		   #<88>(8,1,'integer',['unsigned'|['big']]),
		   #<77>(8,1,'integer',['unsigned'|['big']]),
		   #<76>(8,1,'integer',['unsigned'|['big']]),
		   #<47>(8,1,'integer',['unsigned'|['big']]),
		   #<49>(8,1,'integer',['unsigned'|['big']]),
		   #<57>(8,1,'integer',['unsigned'|['big']]),
		   #<57>(8,1,'integer',['unsigned'|['big']]),
		   #<56>(8,1,'integer',['unsigned'|['big']]),
		   #<47>(8,1,'integer',['unsigned'|['big']]),
		   #<110>(8,1,'integer',['unsigned'|['big']]),
		   #<97>(8,1,'integer',['unsigned'|['big']]),
		   #<109>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<115>(8,1,'integer',['unsigned'|['big']]),
		   #<112>(8,1,'integer',['unsigned'|['big']]),
		   #<97>(8,1,'integer',['unsigned'|['big']]),
		   #<99>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<108>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<1>(8,1,'integer',['unsigned'|['big']]),
		   #<104>(8,1,'integer',['unsigned'|['big']]),
		   #<2>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<10>(8,1,'integer',['unsigned'|['big']]),
		   #<115>(8,1,'integer',['unsigned'|['big']]),
		   #<105>(8,1,'integer',['unsigned'|['big']]),
		   #<109>(8,1,'integer',['unsigned'|['big']]),
		   #<112>(8,1,'integer',['unsigned'|['big']]),
		   #<108>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<84>(8,1,'integer',['unsigned'|['big']]),
		   #<121>(8,1,'integer',['unsigned'|['big']]),
		   #<112>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<104>(8,1,'integer',['unsigned'|['big']]),
		   #<3>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<15>(8,1,'integer',['unsigned'|['big']]),
		   #<95>(8,1,'integer',['unsigned'|['big']]),
		   #<120>(8,1,'integer',['unsigned'|['big']]),
		   #<109>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<114>(8,1,'integer',['unsigned'|['big']]),
		   #<108>(8,1,'integer',['unsigned'|['big']]),
		   #<95>(8,1,'integer',['unsigned'|['big']]),
		   #<110>(8,1,'integer',['unsigned'|['big']]),
		   #<111>(8,1,'integer',['unsigned'|['big']]),
		   #<95>(8,1,'integer',['unsigned'|['big']]),
		   #<110>(8,1,'integer',['unsigned'|['big']]),
		   #<97>(8,1,'integer',['unsigned'|['big']]),
		   #<109>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<95>(8,1,'integer',['unsigned'|['big']]),
		   #<108>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<1>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<5>(8,1,'integer',['unsigned'|['big']]),
		   #<115>(8,1,'integer',['unsigned'|['big']]),
		   #<112>(8,1,'integer',['unsigned'|['big']]),
		   #<97>(8,1,'integer',['unsigned'|['big']]),
		   #<99>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<106>(8,1,'integer',['unsigned'|['big']]),
		   #<106>(8,1,'integer',['unsigned'|['big']]),
		   #<106>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<5>(8,1,'integer',['unsigned'|['big']]),
		   #<102>(8,1,'integer',['unsigned'|['big']]),
		   #<97>(8,1,'integer',['unsigned'|['big']]),
		   #<108>(8,1,'integer',['unsigned'|['big']]),
		   #<115>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<106>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<8>(8,1,'integer',['unsigned'|['big']]),
		   #<111>(8,1,'integer',['unsigned'|['big']]),
		   #<112>(8,1,'integer',['unsigned'|['big']]),
		   #<116>(8,1,'integer',['unsigned'|['big']]),
		   #<105>(8,1,'integer',['unsigned'|['big']]),
		   #<111>(8,1,'integer',['unsigned'|['big']]),
		   #<110>(8,1,'integer',['unsigned'|['big']]),
		   #<97>(8,1,'integer',['unsigned'|['big']]),
		   #<108>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<9>(8,1,'integer',['unsigned'|['big']]),
		   #<117>(8,1,'integer',['unsigned'|['big']]),
		   #<110>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<102>(8,1,'integer',['unsigned'|['big']]),
		   #<105>(8,1,'integer',['unsigned'|['big']]),
		   #<110>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<9>(8,1,'integer',['unsigned'|['big']]),
		   #<117>(8,1,'integer',['unsigned'|['big']]),
		   #<110>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<102>(8,1,'integer',['unsigned'|['big']]),
		   #<105>(8,1,'integer',['unsigned'|['big']]),
		   #<110>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<9>(8,1,'integer',['unsigned'|['big']]),
		   #<117>(8,1,'integer',['unsigned'|['big']]),
		   #<110>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<102>(8,1,'integer',['unsigned'|['big']]),
		   #<105>(8,1,'integer',['unsigned'|['big']]),
		   #<110>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<104>(8,1,'integer',['unsigned'|['big']]),
		   #<2>(8,1,'integer',['unsigned'|['big']]),
		   #<104>(8,1,'integer',['unsigned'|['big']]),
		   #<2>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<6>(8,1,'integer',['unsigned'|['big']]),
		   #<115>(8,1,'integer',['unsigned'|['big']]),
		   #<99>(8,1,'integer',['unsigned'|['big']]),
		   #<104>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<109>(8,1,'integer',['unsigned'|['big']]),
		   #<97>(8,1,'integer',['unsigned'|['big']]),
		   #<107>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<7>(8,1,'integer',['unsigned'|['big']]),
		   #<120>(8,1,'integer',['unsigned'|['big']]),
		   #<109>(8,1,'integer',['unsigned'|['big']]),
		   #<108>(8,1,'integer',['unsigned'|['big']]),
		   #<46>(8,1,'integer',['unsigned'|['big']]),
		   #<120>(8,1,'integer',['unsigned'|['big']]),
		   #<115>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<104>(8,1,'integer',['unsigned'|['big']]),
		   #<7>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<6>(8,1,'integer',['unsigned'|['big']]),
		   #<115>(8,1,'integer',['unsigned'|['big']]),
		   #<99>(8,1,'integer',['unsigned'|['big']]),
		   #<104>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<109>(8,1,'integer',['unsigned'|['big']]),
		   #<97>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<11>(8,1,'integer',['unsigned'|['big']]),
		   #<117>(8,1,'integer',['unsigned'|['big']]),
		   #<110>(8,1,'integer',['unsigned'|['big']]),
		   #<113>(8,1,'integer',['unsigned'|['big']]),
		   #<117>(8,1,'integer',['unsigned'|['big']]),
		   #<97>(8,1,'integer',['unsigned'|['big']]),
		   #<108>(8,1,'integer',['unsigned'|['big']]),
		   #<105>(8,1,'integer',['unsigned'|['big']]),
		   #<102>(8,1,'integer',['unsigned'|['big']]),
		   #<105>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<11>(8,1,'integer',['unsigned'|['big']]),
		   #<117>(8,1,'integer',['unsigned'|['big']]),
		   #<110>(8,1,'integer',['unsigned'|['big']]),
		   #<113>(8,1,'integer',['unsigned'|['big']]),
		   #<117>(8,1,'integer',['unsigned'|['big']]),
		   #<97>(8,1,'integer',['unsigned'|['big']]),
		   #<108>(8,1,'integer',['unsigned'|['big']]),
		   #<105>(8,1,'integer',['unsigned'|['big']]),
		   #<102>(8,1,'integer',['unsigned'|['big']]),
		   #<105>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<36>(8,1,'integer',['unsigned'|['big']]),
		   #<104>(8,1,'integer',['unsigned'|['big']]),
		   #<116>(8,1,'integer',['unsigned'|['big']]),
		   #<116>(8,1,'integer',['unsigned'|['big']]),
		   #<112>(8,1,'integer',['unsigned'|['big']]),
		   #<58>(8,1,'integer',['unsigned'|['big']]),
		   #<47>(8,1,'integer',['unsigned'|['big']]),
		   #<47>(8,1,'integer',['unsigned'|['big']]),
		   #<119>(8,1,'integer',['unsigned'|['big']]),
		   #<119>(8,1,'integer',['unsigned'|['big']]),
		   #<119>(8,1,'integer',['unsigned'|['big']]),
		   #<46>(8,1,'integer',['unsigned'|['big']]),
		   #<119>(8,1,'integer',['unsigned'|['big']]),
		   #<51>(8,1,'integer',['unsigned'|['big']]),
		   #<46>(8,1,'integer',['unsigned'|['big']]),
		   #<111>(8,1,'integer',['unsigned'|['big']]),
		   #<114>(8,1,'integer',['unsigned'|['big']]),
		   #<103>(8,1,'integer',['unsigned'|['big']]),
		   #<47>(8,1,'integer',['unsigned'|['big']]),
		   #<88>(8,1,'integer',['unsigned'|['big']]),
		   #<77>(8,1,'integer',['unsigned'|['big']]),
		   #<76>(8,1,'integer',['unsigned'|['big']]),
		   #<47>(8,1,'integer',['unsigned'|['big']]),
		   #<49>(8,1,'integer',['unsigned'|['big']]),
		   #<57>(8,1,'integer',['unsigned'|['big']]),
		   #<57>(8,1,'integer',['unsigned'|['big']]),
		   #<56>(8,1,'integer',['unsigned'|['big']]),
		   #<47>(8,1,'integer',['unsigned'|['big']]),
		   #<110>(8,1,'integer',['unsigned'|['big']]),
		   #<97>(8,1,'integer',['unsigned'|['big']]),
		   #<109>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<115>(8,1,'integer',['unsigned'|['big']]),
		   #<112>(8,1,'integer',['unsigned'|['big']]),
		   #<97>(8,1,'integer',['unsigned'|['big']]),
		   #<99>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<106>(8,1,'integer',['unsigned'|['big']]),
		   #<106>(8,1,'integer',['unsigned'|['big']]),
		   #<106>(8,1,'integer',['unsigned'|['big']]),
		   #<104>(8,1,'integer',['unsigned'|['big']]),
		   #<2>(8,1,'integer',['unsigned'|['big']]),
		   #<104>(8,1,'integer',['unsigned'|['big']]),
		   #<2>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<9>(8,1,'integer',['unsigned'|['big']]),
		   #<97>(8,1,'integer',['unsigned'|['big']]),
		   #<116>(8,1,'integer',['unsigned'|['big']]),
		   #<116>(8,1,'integer',['unsigned'|['big']]),
		   #<114>(8,1,'integer',['unsigned'|['big']]),
		   #<105>(8,1,'integer',['unsigned'|['big']]),
		   #<98>(8,1,'integer',['unsigned'|['big']]),
		   #<117>(8,1,'integer',['unsigned'|['big']]),
		   #<116>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<104>(8,1,'integer',['unsigned'|['big']]),
		   #<3>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<4>(8,1,'integer',['unsigned'|['big']]),
		   #<98>(8,1,'integer',['unsigned'|['big']]),
		   #<97>(8,1,'integer',['unsigned'|['big']]),
		   #<115>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<106>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<36>(8,1,'integer',['unsigned'|['big']]),
		   #<104>(8,1,'integer',['unsigned'|['big']]),
		   #<116>(8,1,'integer',['unsigned'|['big']]),
		   #<116>(8,1,'integer',['unsigned'|['big']]),
		   #<112>(8,1,'integer',['unsigned'|['big']]),
		   #<58>(8,1,'integer',['unsigned'|['big']]),
		   #<47>(8,1,'integer',['unsigned'|['big']]),
		   #<47>(8,1,'integer',['unsigned'|['big']]),
		   #<119>(8,1,'integer',['unsigned'|['big']]),
		   #<119>(8,1,'integer',['unsigned'|['big']]),
		   #<119>(8,1,'integer',['unsigned'|['big']]),
		   #<46>(8,1,'integer',['unsigned'|['big']]),
		   #<119>(8,1,'integer',['unsigned'|['big']]),
		   #<51>(8,1,'integer',['unsigned'|['big']]),
		   #<46>(8,1,'integer',['unsigned'|['big']]),
		   #<111>(8,1,'integer',['unsigned'|['big']]),
		   #<114>(8,1,'integer',['unsigned'|['big']]),
		   #<103>(8,1,'integer',['unsigned'|['big']]),
		   #<47>(8,1,'integer',['unsigned'|['big']]),
		   #<88>(8,1,'integer',['unsigned'|['big']]),
		   #<77>(8,1,'integer',['unsigned'|['big']]),
		   #<76>(8,1,'integer',['unsigned'|['big']]),
		   #<47>(8,1,'integer',['unsigned'|['big']]),
		   #<49>(8,1,'integer',['unsigned'|['big']]),
		   #<57>(8,1,'integer',['unsigned'|['big']]),
		   #<57>(8,1,'integer',['unsigned'|['big']]),
		   #<56>(8,1,'integer',['unsigned'|['big']]),
		   #<47>(8,1,'integer',['unsigned'|['big']]),
		   #<110>(8,1,'integer',['unsigned'|['big']]),
		   #<97>(8,1,'integer',['unsigned'|['big']]),
		   #<109>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<115>(8,1,'integer',['unsigned'|['big']]),
		   #<112>(8,1,'integer',['unsigned'|['big']]),
		   #<97>(8,1,'integer',['unsigned'|['big']]),
		   #<99>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<104>(8,1,'integer',['unsigned'|['big']]),
		   #<9>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<16>(8,1,'integer',['unsigned'|['big']]),
		   #<115>(8,1,'integer',['unsigned'|['big']]),
		   #<99>(8,1,'integer',['unsigned'|['big']]),
		   #<104>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<109>(8,1,'integer',['unsigned'|['big']]),
		   #<97>(8,1,'integer',['unsigned'|['big']]),
		   #<95>(8,1,'integer',['unsigned'|['big']]),
		   #<97>(8,1,'integer',['unsigned'|['big']]),
		   #<116>(8,1,'integer',['unsigned'|['big']]),
		   #<116>(8,1,'integer',['unsigned'|['big']]),
		   #<114>(8,1,'integer',['unsigned'|['big']]),
		   #<105>(8,1,'integer',['unsigned'|['big']]),
		   #<98>(8,1,'integer',['unsigned'|['big']]),
		   #<117>(8,1,'integer',['unsigned'|['big']]),
		   #<116>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<104>(8,1,'integer',['unsigned'|['big']]),
		   #<3>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<4>(8,1,'integer',['unsigned'|['big']]),
		   #<98>(8,1,'integer',['unsigned'|['big']]),
		   #<97>(8,1,'integer',['unsigned'|['big']]),
		   #<115>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<106>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<36>(8,1,'integer',['unsigned'|['big']]),
		   #<104>(8,1,'integer',['unsigned'|['big']]),
		   #<116>(8,1,'integer',['unsigned'|['big']]),
		   #<116>(8,1,'integer',['unsigned'|['big']]),
		   #<112>(8,1,'integer',['unsigned'|['big']]),
		   #<58>(8,1,'integer',['unsigned'|['big']]),
		   #<47>(8,1,'integer',['unsigned'|['big']]),
		   #<47>(8,1,'integer',['unsigned'|['big']]),
		   #<119>(8,1,'integer',['unsigned'|['big']]),
		   #<119>(8,1,'integer',['unsigned'|['big']]),
		   #<119>(8,1,'integer',['unsigned'|['big']]),
		   #<46>(8,1,'integer',['unsigned'|['big']]),
		   #<119>(8,1,'integer',['unsigned'|['big']]),
		   #<51>(8,1,'integer',['unsigned'|['big']]),
		   #<46>(8,1,'integer',['unsigned'|['big']]),
		   #<111>(8,1,'integer',['unsigned'|['big']]),
		   #<114>(8,1,'integer',['unsigned'|['big']]),
		   #<103>(8,1,'integer',['unsigned'|['big']]),
		   #<47>(8,1,'integer',['unsigned'|['big']]),
		   #<88>(8,1,'integer',['unsigned'|['big']]),
		   #<77>(8,1,'integer',['unsigned'|['big']]),
		   #<76>(8,1,'integer',['unsigned'|['big']]),
		   #<47>(8,1,'integer',['unsigned'|['big']]),
		   #<49>(8,1,'integer',['unsigned'|['big']]),
		   #<57>(8,1,'integer',['unsigned'|['big']]),
		   #<57>(8,1,'integer',['unsigned'|['big']]),
		   #<56>(8,1,'integer',['unsigned'|['big']]),
		   #<47>(8,1,'integer',['unsigned'|['big']]),
		   #<110>(8,1,'integer',['unsigned'|['big']]),
		   #<97>(8,1,'integer',['unsigned'|['big']]),
		   #<109>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<115>(8,1,'integer',['unsigned'|['big']]),
		   #<112>(8,1,'integer',['unsigned'|['big']]),
		   #<97>(8,1,'integer',['unsigned'|['big']]),
		   #<99>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<108>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<1>(8,1,'integer',['unsigned'|['big']]),
		   #<104>(8,1,'integer',['unsigned'|['big']]),
		   #<2>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<10>(8,1,'integer',['unsigned'|['big']]),
		   #<115>(8,1,'integer',['unsigned'|['big']]),
		   #<105>(8,1,'integer',['unsigned'|['big']]),
		   #<109>(8,1,'integer',['unsigned'|['big']]),
		   #<112>(8,1,'integer',['unsigned'|['big']]),
		   #<108>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<84>(8,1,'integer',['unsigned'|['big']]),
		   #<121>(8,1,'integer',['unsigned'|['big']]),
		   #<112>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<104>(8,1,'integer',['unsigned'|['big']]),
		   #<3>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<6>(8,1,'integer',['unsigned'|['big']]),
		   #<97>(8,1,'integer',['unsigned'|['big']]),
		   #<110>(8,1,'integer',['unsigned'|['big']]),
		   #<121>(8,1,'integer',['unsigned'|['big']]),
		   #<85>(8,1,'integer',['unsigned'|['big']]),
		   #<82>(8,1,'integer',['unsigned'|['big']]),
		   #<73>(8,1,'integer',['unsigned'|['big']]),
		   #<106>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<32>(8,1,'integer',['unsigned'|['big']]),
		   #<104>(8,1,'integer',['unsigned'|['big']]),
		   #<116>(8,1,'integer',['unsigned'|['big']]),
		   #<116>(8,1,'integer',['unsigned'|['big']]),
		   #<112>(8,1,'integer',['unsigned'|['big']]),
		   #<58>(8,1,'integer',['unsigned'|['big']]),
		   #<47>(8,1,'integer',['unsigned'|['big']]),
		   #<47>(8,1,'integer',['unsigned'|['big']]),
		   #<119>(8,1,'integer',['unsigned'|['big']]),
		   #<119>(8,1,'integer',['unsigned'|['big']]),
		   #<119>(8,1,'integer',['unsigned'|['big']]),
		   #<46>(8,1,'integer',['unsigned'|['big']]),
		   #<119>(8,1,'integer',['unsigned'|['big']]),
		   #<51>(8,1,'integer',['unsigned'|['big']]),
		   #<46>(8,1,'integer',['unsigned'|['big']]),
		   #<111>(8,1,'integer',['unsigned'|['big']]),
		   #<114>(8,1,'integer',['unsigned'|['big']]),
		   #<103>(8,1,'integer',['unsigned'|['big']]),
		   #<47>(8,1,'integer',['unsigned'|['big']]),
		   #<50>(8,1,'integer',['unsigned'|['big']]),
		   #<48>(8,1,'integer',['unsigned'|['big']]),
		   #<48>(8,1,'integer',['unsigned'|['big']]),
		   #<49>(8,1,'integer',['unsigned'|['big']]),
		   #<47>(8,1,'integer',['unsigned'|['big']]),
		   #<88>(8,1,'integer',['unsigned'|['big']]),
		   #<77>(8,1,'integer',['unsigned'|['big']]),
		   #<76>(8,1,'integer',['unsigned'|['big']]),
		   #<83>(8,1,'integer',['unsigned'|['big']]),
		   #<99>(8,1,'integer',['unsigned'|['big']]),
		   #<104>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<109>(8,1,'integer',['unsigned'|['big']]),
		   #<97>(8,1,'integer',['unsigned'|['big']]),
		   #<106>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<5>(8,1,'integer',['unsigned'|['big']]),
		   #<102>(8,1,'integer',['unsigned'|['big']]),
		   #<97>(8,1,'integer',['unsigned'|['big']]),
		   #<108>(8,1,'integer',['unsigned'|['big']]),
		   #<115>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<106>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<8>(8,1,'integer',['unsigned'|['big']]),
		   #<111>(8,1,'integer',['unsigned'|['big']]),
		   #<112>(8,1,'integer',['unsigned'|['big']]),
		   #<116>(8,1,'integer',['unsigned'|['big']]),
		   #<105>(8,1,'integer',['unsigned'|['big']]),
		   #<111>(8,1,'integer',['unsigned'|['big']]),
		   #<110>(8,1,'integer',['unsigned'|['big']]),
		   #<97>(8,1,'integer',['unsigned'|['big']]),
		   #<108>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<9>(8,1,'integer',['unsigned'|['big']]),
		   #<117>(8,1,'integer',['unsigned'|['big']]),
		   #<110>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<102>(8,1,'integer',['unsigned'|['big']]),
		   #<105>(8,1,'integer',['unsigned'|['big']]),
		   #<110>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<9>(8,1,'integer',['unsigned'|['big']]),
		   #<117>(8,1,'integer',['unsigned'|['big']]),
		   #<110>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<102>(8,1,'integer',['unsigned'|['big']]),
		   #<105>(8,1,'integer',['unsigned'|['big']]),
		   #<110>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<9>(8,1,'integer',['unsigned'|['big']]),
		   #<117>(8,1,'integer',['unsigned'|['big']]),
		   #<110>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<102>(8,1,'integer',['unsigned'|['big']]),
		   #<105>(8,1,'integer',['unsigned'|['big']]),
		   #<110>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<104>(8,1,'integer',['unsigned'|['big']]),
		   #<2>(8,1,'integer',['unsigned'|['big']]),
		   #<104>(8,1,'integer',['unsigned'|['big']]),
		   #<2>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<14>(8,1,'integer',['unsigned'|['big']]),
		   #<97>(8,1,'integer',['unsigned'|['big']]),
		   #<116>(8,1,'integer',['unsigned'|['big']]),
		   #<116>(8,1,'integer',['unsigned'|['big']]),
		   #<114>(8,1,'integer',['unsigned'|['big']]),
		   #<105>(8,1,'integer',['unsigned'|['big']]),
		   #<98>(8,1,'integer',['unsigned'|['big']]),
		   #<117>(8,1,'integer',['unsigned'|['big']]),
		   #<116>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<71>(8,1,'integer',['unsigned'|['big']]),
		   #<114>(8,1,'integer',['unsigned'|['big']]),
		   #<111>(8,1,'integer',['unsigned'|['big']]),
		   #<117>(8,1,'integer',['unsigned'|['big']]),
		   #<112>(8,1,'integer',['unsigned'|['big']]),
		   #<104>(8,1,'integer',['unsigned'|['big']]),
		   #<3>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<12>(8,1,'integer',['unsigned'|['big']]),
		   #<115>(8,1,'integer',['unsigned'|['big']]),
		   #<112>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<99>(8,1,'integer',['unsigned'|['big']]),
		   #<105>(8,1,'integer',['unsigned'|['big']]),
		   #<97>(8,1,'integer',['unsigned'|['big']]),
		   #<108>(8,1,'integer',['unsigned'|['big']]),
		   #<65>(8,1,'integer',['unsigned'|['big']]),
		   #<116>(8,1,'integer',['unsigned'|['big']]),
		   #<116>(8,1,'integer',['unsigned'|['big']]),
		   #<114>(8,1,'integer',['unsigned'|['big']]),
		   #<115>(8,1,'integer',['unsigned'|['big']]),
		   #<106>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<36>(8,1,'integer',['unsigned'|['big']]),
		   #<104>(8,1,'integer',['unsigned'|['big']]),
		   #<116>(8,1,'integer',['unsigned'|['big']]),
		   #<116>(8,1,'integer',['unsigned'|['big']]),
		   #<112>(8,1,'integer',['unsigned'|['big']]),
		   #<58>(8,1,'integer',['unsigned'|['big']]),
		   #<47>(8,1,'integer',['unsigned'|['big']]),
		   #<47>(8,1,'integer',['unsigned'|['big']]),
		   #<119>(8,1,'integer',['unsigned'|['big']]),
		   #<119>(8,1,'integer',['unsigned'|['big']]),
		   #<119>(8,1,'integer',['unsigned'|['big']]),
		   #<46>(8,1,'integer',['unsigned'|['big']]),
		   #<119>(8,1,'integer',['unsigned'|['big']]),
		   #<51>(8,1,'integer',['unsigned'|['big']]),
		   #<46>(8,1,'integer',['unsigned'|['big']]),
		   #<111>(8,1,'integer',['unsigned'|['big']]),
		   #<114>(8,1,'integer',['unsigned'|['big']]),
		   #<103>(8,1,'integer',['unsigned'|['big']]),
		   #<47>(8,1,'integer',['unsigned'|['big']]),
		   #<88>(8,1,'integer',['unsigned'|['big']]),
		   #<77>(8,1,'integer',['unsigned'|['big']]),
		   #<76>(8,1,'integer',['unsigned'|['big']]),
		   #<47>(8,1,'integer',['unsigned'|['big']]),
		   #<49>(8,1,'integer',['unsigned'|['big']]),
		   #<57>(8,1,'integer',['unsigned'|['big']]),
		   #<57>(8,1,'integer',['unsigned'|['big']]),
		   #<56>(8,1,'integer',['unsigned'|['big']]),
		   #<47>(8,1,'integer',['unsigned'|['big']]),
		   #<110>(8,1,'integer',['unsigned'|['big']]),
		   #<97>(8,1,'integer',['unsigned'|['big']]),
		   #<109>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<115>(8,1,'integer',['unsigned'|['big']]),
		   #<112>(8,1,'integer',['unsigned'|['big']]),
		   #<97>(8,1,'integer',['unsigned'|['big']]),
		   #<99>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<104>(8,1,'integer',['unsigned'|['big']]),
		   #<5>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<22>(8,1,'integer',['unsigned'|['big']]),
		   #<115>(8,1,'integer',['unsigned'|['big']]),
		   #<99>(8,1,'integer',['unsigned'|['big']]),
		   #<104>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<109>(8,1,'integer',['unsigned'|['big']]),
		   #<97>(8,1,'integer',['unsigned'|['big']]),
		   #<95>(8,1,'integer',['unsigned'|['big']]),
		   #<97>(8,1,'integer',['unsigned'|['big']]),
		   #<116>(8,1,'integer',['unsigned'|['big']]),
		   #<116>(8,1,'integer',['unsigned'|['big']]),
		   #<114>(8,1,'integer',['unsigned'|['big']]),
		   #<105>(8,1,'integer',['unsigned'|['big']]),
		   #<98>(8,1,'integer',['unsigned'|['big']]),
		   #<117>(8,1,'integer',['unsigned'|['big']]),
		   #<116>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<95>(8,1,'integer',['unsigned'|['big']]),
		   #<103>(8,1,'integer',['unsigned'|['big']]),
		   #<114>(8,1,'integer',['unsigned'|['big']]),
		   #<111>(8,1,'integer',['unsigned'|['big']]),
		   #<117>(8,1,'integer',['unsigned'|['big']]),
		   #<112>(8,1,'integer',['unsigned'|['big']]),
		   #<104>(8,1,'integer',['unsigned'|['big']]),
		   #<3>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<12>(8,1,'integer',['unsigned'|['big']]),
		   #<115>(8,1,'integer',['unsigned'|['big']]),
		   #<112>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<99>(8,1,'integer',['unsigned'|['big']]),
		   #<105>(8,1,'integer',['unsigned'|['big']]),
		   #<97>(8,1,'integer',['unsigned'|['big']]),
		   #<108>(8,1,'integer',['unsigned'|['big']]),
		   #<65>(8,1,'integer',['unsigned'|['big']]),
		   #<116>(8,1,'integer',['unsigned'|['big']]),
		   #<116>(8,1,'integer',['unsigned'|['big']]),
		   #<114>(8,1,'integer',['unsigned'|['big']]),
		   #<115>(8,1,'integer',['unsigned'|['big']]),
		   #<106>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<36>(8,1,'integer',['unsigned'|['big']]),
		   #<104>(8,1,'integer',['unsigned'|['big']]),
		   #<116>(8,1,'integer',['unsigned'|['big']]),
		   #<116>(8,1,'integer',['unsigned'|['big']]),
		   #<112>(8,1,'integer',['unsigned'|['big']]),
		   #<58>(8,1,'integer',['unsigned'|['big']]),
		   #<47>(8,1,'integer',['unsigned'|['big']]),
		   #<47>(8,1,'integer',['unsigned'|['big']]),
		   #<119>(8,1,'integer',['unsigned'|['big']]),
		   #<119>(8,1,'integer',['unsigned'|['big']]),
		   #<119>(8,1,'integer',['unsigned'|['big']]),
		   #<46>(8,1,'integer',['unsigned'|['big']]),
		   #<119>(8,1,'integer',['unsigned'|['big']]),
		   #<51>(8,1,'integer',['unsigned'|['big']]),
		   #<46>(8,1,'integer',['unsigned'|['big']]),
		   #<111>(8,1,'integer',['unsigned'|['big']]),
		   #<114>(8,1,'integer',['unsigned'|['big']]),
		   #<103>(8,1,'integer',['unsigned'|['big']]),
		   #<47>(8,1,'integer',['unsigned'|['big']]),
		   #<88>(8,1,'integer',['unsigned'|['big']]),
		   #<77>(8,1,'integer',['unsigned'|['big']]),
		   #<76>(8,1,'integer',['unsigned'|['big']]),
		   #<47>(8,1,'integer',['unsigned'|['big']]),
		   #<49>(8,1,'integer',['unsigned'|['big']]),
		   #<57>(8,1,'integer',['unsigned'|['big']]),
		   #<57>(8,1,'integer',['unsigned'|['big']]),
		   #<56>(8,1,'integer',['unsigned'|['big']]),
		   #<47>(8,1,'integer',['unsigned'|['big']]),
		   #<110>(8,1,'integer',['unsigned'|['big']]),
		   #<97>(8,1,'integer',['unsigned'|['big']]),
		   #<109>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<115>(8,1,'integer',['unsigned'|['big']]),
		   #<112>(8,1,'integer',['unsigned'|['big']]),
		   #<97>(8,1,'integer',['unsigned'|['big']]),
		   #<99>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<9>(8,1,'integer',['unsigned'|['big']]),
		   #<117>(8,1,'integer',['unsigned'|['big']]),
		   #<110>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<102>(8,1,'integer',['unsigned'|['big']]),
		   #<105>(8,1,'integer',['unsigned'|['big']]),
		   #<110>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<9>(8,1,'integer',['unsigned'|['big']]),
		   #<117>(8,1,'integer',['unsigned'|['big']]),
		   #<110>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<102>(8,1,'integer',['unsigned'|['big']]),
		   #<105>(8,1,'integer',['unsigned'|['big']]),
		   #<110>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<108>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<3>(8,1,'integer',['unsigned'|['big']]),
		   #<104>(8,1,'integer',['unsigned'|['big']]),
		   #<2>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<9>(8,1,'integer',['unsigned'|['big']]),
		   #<97>(8,1,'integer',['unsigned'|['big']]),
		   #<116>(8,1,'integer',['unsigned'|['big']]),
		   #<116>(8,1,'integer',['unsigned'|['big']]),
		   #<114>(8,1,'integer',['unsigned'|['big']]),
		   #<105>(8,1,'integer',['unsigned'|['big']]),
		   #<98>(8,1,'integer',['unsigned'|['big']]),
		   #<117>(8,1,'integer',['unsigned'|['big']]),
		   #<116>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<104>(8,1,'integer',['unsigned'|['big']]),
		   #<3>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<4>(8,1,'integer',['unsigned'|['big']]),
		   #<98>(8,1,'integer',['unsigned'|['big']]),
		   #<97>(8,1,'integer',['unsigned'|['big']]),
		   #<115>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<106>(8,1,'integer',['unsigned'|['big']]),
		   #<106>(8,1,'integer',['unsigned'|['big']]),
		   #<104>(8,1,'integer',['unsigned'|['big']]),
		   #<2>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<9>(8,1,'integer',['unsigned'|['big']]),
		   #<97>(8,1,'integer',['unsigned'|['big']]),
		   #<116>(8,1,'integer',['unsigned'|['big']]),
		   #<116>(8,1,'integer',['unsigned'|['big']]),
		   #<114>(8,1,'integer',['unsigned'|['big']]),
		   #<105>(8,1,'integer',['unsigned'|['big']]),
		   #<98>(8,1,'integer',['unsigned'|['big']]),
		   #<117>(8,1,'integer',['unsigned'|['big']]),
		   #<116>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<104>(8,1,'integer',['unsigned'|['big']]),
		   #<3>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<4>(8,1,'integer',['unsigned'|['big']]),
		   #<108>(8,1,'integer',['unsigned'|['big']]),
		   #<97>(8,1,'integer',['unsigned'|['big']]),
		   #<110>(8,1,'integer',['unsigned'|['big']]),
		   #<103>(8,1,'integer',['unsigned'|['big']]),
		   #<106>(8,1,'integer',['unsigned'|['big']]),
		   #<106>(8,1,'integer',['unsigned'|['big']]),
		   #<104>(8,1,'integer',['unsigned'|['big']]),
		   #<2>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<9>(8,1,'integer',['unsigned'|['big']]),
		   #<97>(8,1,'integer',['unsigned'|['big']]),
		   #<116>(8,1,'integer',['unsigned'|['big']]),
		   #<116>(8,1,'integer',['unsigned'|['big']]),
		   #<114>(8,1,'integer',['unsigned'|['big']]),
		   #<105>(8,1,'integer',['unsigned'|['big']]),
		   #<98>(8,1,'integer',['unsigned'|['big']]),
		   #<117>(8,1,'integer',['unsigned'|['big']]),
		   #<116>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<104>(8,1,'integer',['unsigned'|['big']]),
		   #<3>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<5>(8,1,'integer',['unsigned'|['big']]),
		   #<115>(8,1,'integer',['unsigned'|['big']]),
		   #<112>(8,1,'integer',['unsigned'|['big']]),
		   #<97>(8,1,'integer',['unsigned'|['big']]),
		   #<99>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<106>(8,1,'integer',['unsigned'|['big']]),
		   #<106>(8,1,'integer',['unsigned'|['big']]),
		   #<106>(8,1,'integer',['unsigned'|['big']]),
		   #<104>(8,1,'integer',['unsigned'|['big']]),
		   #<2>(8,1,'integer',['unsigned'|['big']]),
		   #<104>(8,1,'integer',['unsigned'|['big']]),
		   #<2>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<10>(8,1,'integer',['unsigned'|['big']]),
		   #<115>(8,1,'integer',['unsigned'|['big']]),
		   #<105>(8,1,'integer',['unsigned'|['big']]),
		   #<109>(8,1,'integer',['unsigned'|['big']]),
		   #<112>(8,1,'integer',['unsigned'|['big']]),
		   #<108>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<84>(8,1,'integer',['unsigned'|['big']]),
		   #<121>(8,1,'integer',['unsigned'|['big']]),
		   #<112>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<104>(8,1,'integer',['unsigned'|['big']]),
		   #<3>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<15>(8,1,'integer',['unsigned'|['big']]),
		   #<95>(8,1,'integer',['unsigned'|['big']]),
		   #<120>(8,1,'integer',['unsigned'|['big']]),
		   #<109>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<114>(8,1,'integer',['unsigned'|['big']]),
		   #<108>(8,1,'integer',['unsigned'|['big']]),
		   #<95>(8,1,'integer',['unsigned'|['big']]),
		   #<110>(8,1,'integer',['unsigned'|['big']]),
		   #<111>(8,1,'integer',['unsigned'|['big']]),
		   #<95>(8,1,'integer',['unsigned'|['big']]),
		   #<110>(8,1,'integer',['unsigned'|['big']]),
		   #<97>(8,1,'integer',['unsigned'|['big']]),
		   #<109>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<95>(8,1,'integer',['unsigned'|['big']]),
		   #<108>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<1>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<5>(8,1,'integer',['unsigned'|['big']]),
		   #<115>(8,1,'integer',['unsigned'|['big']]),
		   #<112>(8,1,'integer',['unsigned'|['big']]),
		   #<97>(8,1,'integer',['unsigned'|['big']]),
		   #<99>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<106>(8,1,'integer',['unsigned'|['big']]),
		   #<106>(8,1,'integer',['unsigned'|['big']]),
		   #<104>(8,1,'integer',['unsigned'|['big']]),
		   #<9>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<18>(8,1,'integer',['unsigned'|['big']]),
		   #<115>(8,1,'integer',['unsigned'|['big']]),
		   #<99>(8,1,'integer',['unsigned'|['big']]),
		   #<104>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<109>(8,1,'integer',['unsigned'|['big']]),
		   #<97>(8,1,'integer',['unsigned'|['big']]),
		   #<95>(8,1,'integer',['unsigned'|['big']]),
		   #<115>(8,1,'integer',['unsigned'|['big']]),
		   #<105>(8,1,'integer',['unsigned'|['big']]),
		   #<109>(8,1,'integer',['unsigned'|['big']]),
		   #<112>(8,1,'integer',['unsigned'|['big']]),
		   #<108>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<95>(8,1,'integer',['unsigned'|['big']]),
		   #<116>(8,1,'integer',['unsigned'|['big']]),
		   #<121>(8,1,'integer',['unsigned'|['big']]),
		   #<112>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<104>(8,1,'integer',['unsigned'|['big']]),
		   #<3>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<15>(8,1,'integer',['unsigned'|['big']]),
		   #<95>(8,1,'integer',['unsigned'|['big']]),
		   #<120>(8,1,'integer',['unsigned'|['big']]),
		   #<109>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<114>(8,1,'integer',['unsigned'|['big']]),
		   #<108>(8,1,'integer',['unsigned'|['big']]),
		   #<95>(8,1,'integer',['unsigned'|['big']]),
		   #<110>(8,1,'integer',['unsigned'|['big']]),
		   #<111>(8,1,'integer',['unsigned'|['big']]),
		   #<95>(8,1,'integer',['unsigned'|['big']]),
		   #<110>(8,1,'integer',['unsigned'|['big']]),
		   #<97>(8,1,'integer',['unsigned'|['big']]),
		   #<109>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<95>(8,1,'integer',['unsigned'|['big']]),
		   #<108>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<1>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<5>(8,1,'integer',['unsigned'|['big']]),
		   #<115>(8,1,'integer',['unsigned'|['big']]),
		   #<112>(8,1,'integer',['unsigned'|['big']]),
		   #<97>(8,1,'integer',['unsigned'|['big']]),
		   #<99>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<106>(8,1,'integer',['unsigned'|['big']]),
		   #<106>(8,1,'integer',['unsigned'|['big']]),
		   #<108>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<1>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<5>(8,1,'integer',['unsigned'|['big']]),
		   #<115>(8,1,'integer',['unsigned'|['big']]),
		   #<112>(8,1,'integer',['unsigned'|['big']]),
		   #<97>(8,1,'integer',['unsigned'|['big']]),
		   #<99>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<106>(8,1,'integer',['unsigned'|['big']]),
		   #<104>(8,1,'integer',['unsigned'|['big']]),
		   #<3>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<6>(8,1,'integer',['unsigned'|['big']]),
		   #<78>(8,1,'integer',['unsigned'|['big']]),
		   #<67>(8,1,'integer',['unsigned'|['big']]),
		   #<78>(8,1,'integer',['unsigned'|['big']]),
		   #<97>(8,1,'integer',['unsigned'|['big']]),
		   #<109>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<106>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<32>(8,1,'integer',['unsigned'|['big']]),
		   #<104>(8,1,'integer',['unsigned'|['big']]),
		   #<116>(8,1,'integer',['unsigned'|['big']]),
		   #<116>(8,1,'integer',['unsigned'|['big']]),
		   #<112>(8,1,'integer',['unsigned'|['big']]),
		   #<58>(8,1,'integer',['unsigned'|['big']]),
		   #<47>(8,1,'integer',['unsigned'|['big']]),
		   #<47>(8,1,'integer',['unsigned'|['big']]),
		   #<119>(8,1,'integer',['unsigned'|['big']]),
		   #<119>(8,1,'integer',['unsigned'|['big']]),
		   #<119>(8,1,'integer',['unsigned'|['big']]),
		   #<46>(8,1,'integer',['unsigned'|['big']]),
		   #<119>(8,1,'integer',['unsigned'|['big']]),
		   #<51>(8,1,'integer',['unsigned'|['big']]),
		   #<46>(8,1,'integer',['unsigned'|['big']]),
		   #<111>(8,1,'integer',['unsigned'|['big']]),
		   #<114>(8,1,'integer',['unsigned'|['big']]),
		   #<103>(8,1,'integer',['unsigned'|['big']]),
		   #<47>(8,1,'integer',['unsigned'|['big']]),
		   #<50>(8,1,'integer',['unsigned'|['big']]),
		   #<48>(8,1,'integer',['unsigned'|['big']]),
		   #<48>(8,1,'integer',['unsigned'|['big']]),
		   #<49>(8,1,'integer',['unsigned'|['big']]),
		   #<47>(8,1,'integer',['unsigned'|['big']]),
		   #<88>(8,1,'integer',['unsigned'|['big']]),
		   #<77>(8,1,'integer',['unsigned'|['big']]),
		   #<76>(8,1,'integer',['unsigned'|['big']]),
		   #<83>(8,1,'integer',['unsigned'|['big']]),
		   #<99>(8,1,'integer',['unsigned'|['big']]),
		   #<104>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<109>(8,1,'integer',['unsigned'|['big']]),
		   #<97>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<5>(8,1,'integer',['unsigned'|['big']]),
		   #<102>(8,1,'integer',['unsigned'|['big']]),
		   #<97>(8,1,'integer',['unsigned'|['big']]),
		   #<108>(8,1,'integer',['unsigned'|['big']]),
		   #<115>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<106>(8,1,'integer',['unsigned'|['big']]),
		   #<108>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<1>(8,1,'integer',['unsigned'|['big']]),
		   #<104>(8,1,'integer',['unsigned'|['big']]),
		   #<2>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<11>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<110>(8,1,'integer',['unsigned'|['big']]),
		   #<117>(8,1,'integer',['unsigned'|['big']]),
		   #<109>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<114>(8,1,'integer',['unsigned'|['big']]),
		   #<97>(8,1,'integer',['unsigned'|['big']]),
		   #<116>(8,1,'integer',['unsigned'|['big']]),
		   #<105>(8,1,'integer',['unsigned'|['big']]),
		   #<111>(8,1,'integer',['unsigned'|['big']]),
		   #<110>(8,1,'integer',['unsigned'|['big']]),
		   #<108>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<2>(8,1,'integer',['unsigned'|['big']]),
		   #<107>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<7>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<102>(8,1,'integer',['unsigned'|['big']]),
		   #<97>(8,1,'integer',['unsigned'|['big']]),
		   #<117>(8,1,'integer',['unsigned'|['big']]),
		   #<108>(8,1,'integer',['unsigned'|['big']]),
		   #<116>(8,1,'integer',['unsigned'|['big']]),
		   #<107>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<8>(8,1,'integer',['unsigned'|['big']]),
		   #<112>(8,1,'integer',['unsigned'|['big']]),
		   #<114>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<115>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<114>(8,1,'integer',['unsigned'|['big']]),
		   #<118>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<106>(8,1,'integer',['unsigned'|['big']]),
		   #<106>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<6>(8,1,'integer',['unsigned'|['big']]),
		   #<97>(8,1,'integer',['unsigned'|['big']]),
		   #<116>(8,1,'integer',['unsigned'|['big']]),
		   #<111>(8,1,'integer',['unsigned'|['big']]),
		   #<109>(8,1,'integer',['unsigned'|['big']]),
		   #<105>(8,1,'integer',['unsigned'|['big']]),
		   #<99>(8,1,'integer',['unsigned'|['big']]),
		   #<108>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<1>(8,1,'integer',['unsigned'|['big']]),
		   #<104>(8,1,'integer',['unsigned'|['big']]),
		   #<2>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<11>(8,1,'integer',['unsigned'|['big']]),
		   #<114>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<115>(8,1,'integer',['unsigned'|['big']]),
		   #<116>(8,1,'integer',['unsigned'|['big']]),
		   #<114>(8,1,'integer',['unsigned'|['big']]),
		   #<105>(8,1,'integer',['unsigned'|['big']]),
		   #<99>(8,1,'integer',['unsigned'|['big']]),
		   #<116>(8,1,'integer',['unsigned'|['big']]),
		   #<105>(8,1,'integer',['unsigned'|['big']]),
		   #<111>(8,1,'integer',['unsigned'|['big']]),
		   #<110>(8,1,'integer',['unsigned'|['big']]),
		   #<104>(8,1,'integer',['unsigned'|['big']]),
		   #<2>(8,1,'integer',['unsigned'|['big']]),
		   #<104>(8,1,'integer',['unsigned'|['big']]),
		   #<3>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<6>(8,1,'integer',['unsigned'|['big']]),
		   #<78>(8,1,'integer',['unsigned'|['big']]),
		   #<67>(8,1,'integer',['unsigned'|['big']]),
		   #<78>(8,1,'integer',['unsigned'|['big']]),
		   #<97>(8,1,'integer',['unsigned'|['big']]),
		   #<109>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<106>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<32>(8,1,'integer',['unsigned'|['big']]),
		   #<104>(8,1,'integer',['unsigned'|['big']]),
		   #<116>(8,1,'integer',['unsigned'|['big']]),
		   #<116>(8,1,'integer',['unsigned'|['big']]),
		   #<112>(8,1,'integer',['unsigned'|['big']]),
		   #<58>(8,1,'integer',['unsigned'|['big']]),
		   #<47>(8,1,'integer',['unsigned'|['big']]),
		   #<47>(8,1,'integer',['unsigned'|['big']]),
		   #<119>(8,1,'integer',['unsigned'|['big']]),
		   #<119>(8,1,'integer',['unsigned'|['big']]),
		   #<119>(8,1,'integer',['unsigned'|['big']]),
		   #<46>(8,1,'integer',['unsigned'|['big']]),
		   #<119>(8,1,'integer',['unsigned'|['big']]),
		   #<51>(8,1,'integer',['unsigned'|['big']]),
		   #<46>(8,1,'integer',['unsigned'|['big']]),
		   #<111>(8,1,'integer',['unsigned'|['big']]),
		   #<114>(8,1,'integer',['unsigned'|['big']]),
		   #<103>(8,1,'integer',['unsigned'|['big']]),
		   #<47>(8,1,'integer',['unsigned'|['big']]),
		   #<50>(8,1,'integer',['unsigned'|['big']]),
		   #<48>(8,1,'integer',['unsigned'|['big']]),
		   #<48>(8,1,'integer',['unsigned'|['big']]),
		   #<49>(8,1,'integer',['unsigned'|['big']]),
		   #<47>(8,1,'integer',['unsigned'|['big']]),
		   #<88>(8,1,'integer',['unsigned'|['big']]),
		   #<77>(8,1,'integer',['unsigned'|['big']]),
		   #<76>(8,1,'integer',['unsigned'|['big']]),
		   #<83>(8,1,'integer',['unsigned'|['big']]),
		   #<99>(8,1,'integer',['unsigned'|['big']]),
		   #<104>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<109>(8,1,'integer',['unsigned'|['big']]),
		   #<97>(8,1,'integer',['unsigned'|['big']]),
		   #<108>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<2>(8,1,'integer',['unsigned'|['big']]),
		   #<104>(8,1,'integer',['unsigned'|['big']]),
		   #<2>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<11>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<110>(8,1,'integer',['unsigned'|['big']]),
		   #<117>(8,1,'integer',['unsigned'|['big']]),
		   #<109>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<114>(8,1,'integer',['unsigned'|['big']]),
		   #<97>(8,1,'integer',['unsigned'|['big']]),
		   #<116>(8,1,'integer',['unsigned'|['big']]),
		   #<105>(8,1,'integer',['unsigned'|['big']]),
		   #<111>(8,1,'integer',['unsigned'|['big']]),
		   #<110>(8,1,'integer',['unsigned'|['big']]),
		   #<107>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<7>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<102>(8,1,'integer',['unsigned'|['big']]),
		   #<97>(8,1,'integer',['unsigned'|['big']]),
		   #<117>(8,1,'integer',['unsigned'|['big']]),
		   #<108>(8,1,'integer',['unsigned'|['big']]),
		   #<116>(8,1,'integer',['unsigned'|['big']]),
		   #<104>(8,1,'integer',['unsigned'|['big']]),
		   #<2>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<11>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<110>(8,1,'integer',['unsigned'|['big']]),
		   #<117>(8,1,'integer',['unsigned'|['big']]),
		   #<109>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<114>(8,1,'integer',['unsigned'|['big']]),
		   #<97>(8,1,'integer',['unsigned'|['big']]),
		   #<116>(8,1,'integer',['unsigned'|['big']]),
		   #<105>(8,1,'integer',['unsigned'|['big']]),
		   #<111>(8,1,'integer',['unsigned'|['big']]),
		   #<110>(8,1,'integer',['unsigned'|['big']]),
		   #<107>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<8>(8,1,'integer',['unsigned'|['big']]),
		   #<112>(8,1,'integer',['unsigned'|['big']]),
		   #<114>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<115>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<114>(8,1,'integer',['unsigned'|['big']]),
		   #<118>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<106>(8,1,'integer',['unsigned'|['big']]),
		   #<106>(8,1,'integer',['unsigned'|['big']]),
		   #<104>(8,1,'integer',['unsigned'|['big']]),
		   #<2>(8,1,'integer',['unsigned'|['big']]),
		   #<104>(8,1,'integer',['unsigned'|['big']]),
		   #<2>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<10>(8,1,'integer',['unsigned'|['big']]),
		   #<115>(8,1,'integer',['unsigned'|['big']]),
		   #<105>(8,1,'integer',['unsigned'|['big']]),
		   #<109>(8,1,'integer',['unsigned'|['big']]),
		   #<112>(8,1,'integer',['unsigned'|['big']]),
		   #<108>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<84>(8,1,'integer',['unsigned'|['big']]),
		   #<121>(8,1,'integer',['unsigned'|['big']]),
		   #<112>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<104>(8,1,'integer',['unsigned'|['big']]),
		   #<3>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<15>(8,1,'integer',['unsigned'|['big']]),
		   #<95>(8,1,'integer',['unsigned'|['big']]),
		   #<120>(8,1,'integer',['unsigned'|['big']]),
		   #<109>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<114>(8,1,'integer',['unsigned'|['big']]),
		   #<108>(8,1,'integer',['unsigned'|['big']]),
		   #<95>(8,1,'integer',['unsigned'|['big']]),
		   #<110>(8,1,'integer',['unsigned'|['big']]),
		   #<111>(8,1,'integer',['unsigned'|['big']]),
		   #<95>(8,1,'integer',['unsigned'|['big']]),
		   #<110>(8,1,'integer',['unsigned'|['big']]),
		   #<97>(8,1,'integer',['unsigned'|['big']]),
		   #<109>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<95>(8,1,'integer',['unsigned'|['big']]),
		   #<108>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<1>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<4>(8,1,'integer',['unsigned'|['big']]),
		   #<108>(8,1,'integer',['unsigned'|['big']]),
		   #<97>(8,1,'integer',['unsigned'|['big']]),
		   #<110>(8,1,'integer',['unsigned'|['big']]),
		   #<103>(8,1,'integer',['unsigned'|['big']]),
		   #<106>(8,1,'integer',['unsigned'|['big']]),
		   #<106>(8,1,'integer',['unsigned'|['big']]),
		   #<104>(8,1,'integer',['unsigned'|['big']]),
		   #<9>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<18>(8,1,'integer',['unsigned'|['big']]),
		   #<115>(8,1,'integer',['unsigned'|['big']]),
		   #<99>(8,1,'integer',['unsigned'|['big']]),
		   #<104>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<109>(8,1,'integer',['unsigned'|['big']]),
		   #<97>(8,1,'integer',['unsigned'|['big']]),
		   #<95>(8,1,'integer',['unsigned'|['big']]),
		   #<115>(8,1,'integer',['unsigned'|['big']]),
		   #<105>(8,1,'integer',['unsigned'|['big']]),
		   #<109>(8,1,'integer',['unsigned'|['big']]),
		   #<112>(8,1,'integer',['unsigned'|['big']]),
		   #<108>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<95>(8,1,'integer',['unsigned'|['big']]),
		   #<116>(8,1,'integer',['unsigned'|['big']]),
		   #<121>(8,1,'integer',['unsigned'|['big']]),
		   #<112>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<104>(8,1,'integer',['unsigned'|['big']]),
		   #<3>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<15>(8,1,'integer',['unsigned'|['big']]),
		   #<95>(8,1,'integer',['unsigned'|['big']]),
		   #<120>(8,1,'integer',['unsigned'|['big']]),
		   #<109>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<114>(8,1,'integer',['unsigned'|['big']]),
		   #<108>(8,1,'integer',['unsigned'|['big']]),
		   #<95>(8,1,'integer',['unsigned'|['big']]),
		   #<110>(8,1,'integer',['unsigned'|['big']]),
		   #<111>(8,1,'integer',['unsigned'|['big']]),
		   #<95>(8,1,'integer',['unsigned'|['big']]),
		   #<110>(8,1,'integer',['unsigned'|['big']]),
		   #<97>(8,1,'integer',['unsigned'|['big']]),
		   #<109>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<95>(8,1,'integer',['unsigned'|['big']]),
		   #<108>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<1>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<4>(8,1,'integer',['unsigned'|['big']]),
		   #<108>(8,1,'integer',['unsigned'|['big']]),
		   #<97>(8,1,'integer',['unsigned'|['big']]),
		   #<110>(8,1,'integer',['unsigned'|['big']]),
		   #<103>(8,1,'integer',['unsigned'|['big']]),
		   #<106>(8,1,'integer',['unsigned'|['big']]),
		   #<106>(8,1,'integer',['unsigned'|['big']]),
		   #<108>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<1>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<4>(8,1,'integer',['unsigned'|['big']]),
		   #<108>(8,1,'integer',['unsigned'|['big']]),
		   #<97>(8,1,'integer',['unsigned'|['big']]),
		   #<110>(8,1,'integer',['unsigned'|['big']]),
		   #<103>(8,1,'integer',['unsigned'|['big']]),
		   #<106>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<9>(8,1,'integer',['unsigned'|['big']]),
		   #<117>(8,1,'integer',['unsigned'|['big']]),
		   #<110>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<102>(8,1,'integer',['unsigned'|['big']]),
		   #<105>(8,1,'integer',['unsigned'|['big']]),
		   #<110>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<5>(8,1,'integer',['unsigned'|['big']]),
		   #<102>(8,1,'integer',['unsigned'|['big']]),
		   #<97>(8,1,'integer',['unsigned'|['big']]),
		   #<108>(8,1,'integer',['unsigned'|['big']]),
		   #<115>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<106>(8,1,'integer',['unsigned'|['big']]),
		   #<106>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<6>(8,1,'integer',['unsigned'|['big']]),
		   #<97>(8,1,'integer',['unsigned'|['big']]),
		   #<116>(8,1,'integer',['unsigned'|['big']]),
		   #<111>(8,1,'integer',['unsigned'|['big']]),
		   #<109>(8,1,'integer',['unsigned'|['big']]),
		   #<105>(8,1,'integer',['unsigned'|['big']]),
		   #<99>(8,1,'integer',['unsigned'|['big']]),
		   #<108>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<1>(8,1,'integer',['unsigned'|['big']]),
		   #<104>(8,1,'integer',['unsigned'|['big']]),
		   #<2>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<5>(8,1,'integer',['unsigned'|['big']]),
		   #<117>(8,1,'integer',['unsigned'|['big']]),
		   #<110>(8,1,'integer',['unsigned'|['big']]),
		   #<105>(8,1,'integer',['unsigned'|['big']]),
		   #<111>(8,1,'integer',['unsigned'|['big']]),
		   #<110>(8,1,'integer',['unsigned'|['big']]),
		   #<108>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<2>(8,1,'integer',['unsigned'|['big']]),
		   #<104>(8,1,'integer',['unsigned'|['big']]),
		   #<2>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<10>(8,1,'integer',['unsigned'|['big']]),
		   #<115>(8,1,'integer',['unsigned'|['big']]),
		   #<105>(8,1,'integer',['unsigned'|['big']]),
		   #<109>(8,1,'integer',['unsigned'|['big']]),
		   #<112>(8,1,'integer',['unsigned'|['big']]),
		   #<108>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<84>(8,1,'integer',['unsigned'|['big']]),
		   #<121>(8,1,'integer',['unsigned'|['big']]),
		   #<112>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<104>(8,1,'integer',['unsigned'|['big']]),
		   #<3>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<8>(8,1,'integer',['unsigned'|['big']]),
		   #<108>(8,1,'integer',['unsigned'|['big']]),
		   #<97>(8,1,'integer',['unsigned'|['big']]),
		   #<110>(8,1,'integer',['unsigned'|['big']]),
		   #<103>(8,1,'integer',['unsigned'|['big']]),
		   #<117>(8,1,'integer',['unsigned'|['big']]),
		   #<97>(8,1,'integer',['unsigned'|['big']]),
		   #<103>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<106>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<32>(8,1,'integer',['unsigned'|['big']]),
		   #<104>(8,1,'integer',['unsigned'|['big']]),
		   #<116>(8,1,'integer',['unsigned'|['big']]),
		   #<116>(8,1,'integer',['unsigned'|['big']]),
		   #<112>(8,1,'integer',['unsigned'|['big']]),
		   #<58>(8,1,'integer',['unsigned'|['big']]),
		   #<47>(8,1,'integer',['unsigned'|['big']]),
		   #<47>(8,1,'integer',['unsigned'|['big']]),
		   #<119>(8,1,'integer',['unsigned'|['big']]),
		   #<119>(8,1,'integer',['unsigned'|['big']]),
		   #<119>(8,1,'integer',['unsigned'|['big']]),
		   #<46>(8,1,'integer',['unsigned'|['big']]),
		   #<119>(8,1,'integer',['unsigned'|['big']]),
		   #<51>(8,1,'integer',['unsigned'|['big']]),
		   #<46>(8,1,'integer',['unsigned'|['big']]),
		   #<111>(8,1,'integer',['unsigned'|['big']]),
		   #<114>(8,1,'integer',['unsigned'|['big']]),
		   #<103>(8,1,'integer',['unsigned'|['big']]),
		   #<47>(8,1,'integer',['unsigned'|['big']]),
		   #<50>(8,1,'integer',['unsigned'|['big']]),
		   #<48>(8,1,'integer',['unsigned'|['big']]),
		   #<48>(8,1,'integer',['unsigned'|['big']]),
		   #<49>(8,1,'integer',['unsigned'|['big']]),
		   #<47>(8,1,'integer',['unsigned'|['big']]),
		   #<88>(8,1,'integer',['unsigned'|['big']]),
		   #<77>(8,1,'integer',['unsigned'|['big']]),
		   #<76>(8,1,'integer',['unsigned'|['big']]),
		   #<83>(8,1,'integer',['unsigned'|['big']]),
		   #<99>(8,1,'integer',['unsigned'|['big']]),
		   #<104>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<109>(8,1,'integer',['unsigned'|['big']]),
		   #<97>(8,1,'integer',['unsigned'|['big']]),
		   #<104>(8,1,'integer',['unsigned'|['big']]),
		   #<2>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<10>(8,1,'integer',['unsigned'|['big']]),
		   #<115>(8,1,'integer',['unsigned'|['big']]),
		   #<105>(8,1,'integer',['unsigned'|['big']]),
		   #<109>(8,1,'integer',['unsigned'|['big']]),
		   #<112>(8,1,'integer',['unsigned'|['big']]),
		   #<108>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<84>(8,1,'integer',['unsigned'|['big']]),
		   #<121>(8,1,'integer',['unsigned'|['big']]),
		   #<112>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<104>(8,1,'integer',['unsigned'|['big']]),
		   #<3>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<15>(8,1,'integer',['unsigned'|['big']]),
		   #<95>(8,1,'integer',['unsigned'|['big']]),
		   #<120>(8,1,'integer',['unsigned'|['big']]),
		   #<109>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<114>(8,1,'integer',['unsigned'|['big']]),
		   #<108>(8,1,'integer',['unsigned'|['big']]),
		   #<95>(8,1,'integer',['unsigned'|['big']]),
		   #<110>(8,1,'integer',['unsigned'|['big']]),
		   #<111>(8,1,'integer',['unsigned'|['big']]),
		   #<95>(8,1,'integer',['unsigned'|['big']]),
		   #<110>(8,1,'integer',['unsigned'|['big']]),
		   #<97>(8,1,'integer',['unsigned'|['big']]),
		   #<109>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<95>(8,1,'integer',['unsigned'|['big']]),
		   #<108>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<2>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<15>(8,1,'integer',['unsigned'|['big']]),
		   #<95>(8,1,'integer',['unsigned'|['big']]),
		   #<120>(8,1,'integer',['unsigned'|['big']]),
		   #<109>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<114>(8,1,'integer',['unsigned'|['big']]),
		   #<108>(8,1,'integer',['unsigned'|['big']]),
		   #<95>(8,1,'integer',['unsigned'|['big']]),
		   #<110>(8,1,'integer',['unsigned'|['big']]),
		   #<111>(8,1,'integer',['unsigned'|['big']]),
		   #<95>(8,1,'integer',['unsigned'|['big']]),
		   #<110>(8,1,'integer',['unsigned'|['big']]),
		   #<97>(8,1,'integer',['unsigned'|['big']]),
		   #<109>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<95>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<4>(8,1,'integer',['unsigned'|['big']]),
		   #<108>(8,1,'integer',['unsigned'|['big']]),
		   #<97>(8,1,'integer',['unsigned'|['big']]),
		   #<110>(8,1,'integer',['unsigned'|['big']]),
		   #<103>(8,1,'integer',['unsigned'|['big']]),
		   #<106>(8,1,'integer',['unsigned'|['big']]),
		   #<106>(8,1,'integer',['unsigned'|['big']]),
		   #<106>(8,1,'integer',['unsigned'|['big']]),
		   #<106>(8,1,'integer',['unsigned'|['big']]),
		   #<104>(8,1,'integer',['unsigned'|['big']]),
		   #<2>(8,1,'integer',['unsigned'|['big']]),
		   #<104>(8,1,'integer',['unsigned'|['big']]),
		   #<2>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<9>(8,1,'integer',['unsigned'|['big']]),
		   #<97>(8,1,'integer',['unsigned'|['big']]),
		   #<116>(8,1,'integer',['unsigned'|['big']]),
		   #<116>(8,1,'integer',['unsigned'|['big']]),
		   #<114>(8,1,'integer',['unsigned'|['big']]),
		   #<105>(8,1,'integer',['unsigned'|['big']]),
		   #<98>(8,1,'integer',['unsigned'|['big']]),
		   #<117>(8,1,'integer',['unsigned'|['big']]),
		   #<116>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<104>(8,1,'integer',['unsigned'|['big']]),
		   #<3>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<2>(8,1,'integer',['unsigned'|['big']]),
		   #<105>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<106>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<36>(8,1,'integer',['unsigned'|['big']]),
		   #<104>(8,1,'integer',['unsigned'|['big']]),
		   #<116>(8,1,'integer',['unsigned'|['big']]),
		   #<116>(8,1,'integer',['unsigned'|['big']]),
		   #<112>(8,1,'integer',['unsigned'|['big']]),
		   #<58>(8,1,'integer',['unsigned'|['big']]),
		   #<47>(8,1,'integer',['unsigned'|['big']]),
		   #<47>(8,1,'integer',['unsigned'|['big']]),
		   #<119>(8,1,'integer',['unsigned'|['big']]),
		   #<119>(8,1,'integer',['unsigned'|['big']]),
		   #<119>(8,1,'integer',['unsigned'|['big']]),
		   #<46>(8,1,'integer',['unsigned'|['big']]),
		   #<119>(8,1,'integer',['unsigned'|['big']]),
		   #<51>(8,1,'integer',['unsigned'|['big']]),
		   #<46>(8,1,'integer',['unsigned'|['big']]),
		   #<111>(8,1,'integer',['unsigned'|['big']]),
		   #<114>(8,1,'integer',['unsigned'|['big']]),
		   #<103>(8,1,'integer',['unsigned'|['big']]),
		   #<47>(8,1,'integer',['unsigned'|['big']]),
		   #<88>(8,1,'integer',['unsigned'|['big']]),
		   #<77>(8,1,'integer',['unsigned'|['big']]),
		   #<76>(8,1,'integer',['unsigned'|['big']]),
		   #<47>(8,1,'integer',['unsigned'|['big']]),
		   #<49>(8,1,'integer',['unsigned'|['big']]),
		   #<57>(8,1,'integer',['unsigned'|['big']]),
		   #<57>(8,1,'integer',['unsigned'|['big']]),
		   #<56>(8,1,'integer',['unsigned'|['big']]),
		   #<47>(8,1,'integer',['unsigned'|['big']]),
		   #<110>(8,1,'integer',['unsigned'|['big']]),
		   #<97>(8,1,'integer',['unsigned'|['big']]),
		   #<109>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<115>(8,1,'integer',['unsigned'|['big']]),
		   #<112>(8,1,'integer',['unsigned'|['big']]),
		   #<97>(8,1,'integer',['unsigned'|['big']]),
		   #<99>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<104>(8,1,'integer',['unsigned'|['big']]),
		   #<9>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<16>(8,1,'integer',['unsigned'|['big']]),
		   #<115>(8,1,'integer',['unsigned'|['big']]),
		   #<99>(8,1,'integer',['unsigned'|['big']]),
		   #<104>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<109>(8,1,'integer',['unsigned'|['big']]),
		   #<97>(8,1,'integer',['unsigned'|['big']]),
		   #<95>(8,1,'integer',['unsigned'|['big']]),
		   #<97>(8,1,'integer',['unsigned'|['big']]),
		   #<116>(8,1,'integer',['unsigned'|['big']]),
		   #<116>(8,1,'integer',['unsigned'|['big']]),
		   #<114>(8,1,'integer',['unsigned'|['big']]),
		   #<105>(8,1,'integer',['unsigned'|['big']]),
		   #<98>(8,1,'integer',['unsigned'|['big']]),
		   #<117>(8,1,'integer',['unsigned'|['big']]),
		   #<116>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<104>(8,1,'integer',['unsigned'|['big']]),
		   #<3>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<2>(8,1,'integer',['unsigned'|['big']]),
		   #<105>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<106>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<36>(8,1,'integer',['unsigned'|['big']]),
		   #<104>(8,1,'integer',['unsigned'|['big']]),
		   #<116>(8,1,'integer',['unsigned'|['big']]),
		   #<116>(8,1,'integer',['unsigned'|['big']]),
		   #<112>(8,1,'integer',['unsigned'|['big']]),
		   #<58>(8,1,'integer',['unsigned'|['big']]),
		   #<47>(8,1,'integer',['unsigned'|['big']]),
		   #<47>(8,1,'integer',['unsigned'|['big']]),
		   #<119>(8,1,'integer',['unsigned'|['big']]),
		   #<119>(8,1,'integer',['unsigned'|['big']]),
		   #<119>(8,1,'integer',['unsigned'|['big']]),
		   #<46>(8,1,'integer',['unsigned'|['big']]),
		   #<119>(8,1,'integer',['unsigned'|['big']]),
		   #<51>(8,1,'integer',['unsigned'|['big']]),
		   #<46>(8,1,'integer',['unsigned'|['big']]),
		   #<111>(8,1,'integer',['unsigned'|['big']]),
		   #<114>(8,1,'integer',['unsigned'|['big']]),
		   #<103>(8,1,'integer',['unsigned'|['big']]),
		   #<47>(8,1,'integer',['unsigned'|['big']]),
		   #<88>(8,1,'integer',['unsigned'|['big']]),
		   #<77>(8,1,'integer',['unsigned'|['big']]),
		   #<76>(8,1,'integer',['unsigned'|['big']]),
		   #<47>(8,1,'integer',['unsigned'|['big']]),
		   #<49>(8,1,'integer',['unsigned'|['big']]),
		   #<57>(8,1,'integer',['unsigned'|['big']]),
		   #<57>(8,1,'integer',['unsigned'|['big']]),
		   #<56>(8,1,'integer',['unsigned'|['big']]),
		   #<47>(8,1,'integer',['unsigned'|['big']]),
		   #<110>(8,1,'integer',['unsigned'|['big']]),
		   #<97>(8,1,'integer',['unsigned'|['big']]),
		   #<109>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<115>(8,1,'integer',['unsigned'|['big']]),
		   #<112>(8,1,'integer',['unsigned'|['big']]),
		   #<97>(8,1,'integer',['unsigned'|['big']]),
		   #<99>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<108>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<1>(8,1,'integer',['unsigned'|['big']]),
		   #<104>(8,1,'integer',['unsigned'|['big']]),
		   #<2>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<10>(8,1,'integer',['unsigned'|['big']]),
		   #<115>(8,1,'integer',['unsigned'|['big']]),
		   #<105>(8,1,'integer',['unsigned'|['big']]),
		   #<109>(8,1,'integer',['unsigned'|['big']]),
		   #<112>(8,1,'integer',['unsigned'|['big']]),
		   #<108>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<84>(8,1,'integer',['unsigned'|['big']]),
		   #<121>(8,1,'integer',['unsigned'|['big']]),
		   #<112>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<104>(8,1,'integer',['unsigned'|['big']]),
		   #<3>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<2>(8,1,'integer',['unsigned'|['big']]),
		   #<73>(8,1,'integer',['unsigned'|['big']]),
		   #<68>(8,1,'integer',['unsigned'|['big']]),
		   #<106>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<32>(8,1,'integer',['unsigned'|['big']]),
		   #<104>(8,1,'integer',['unsigned'|['big']]),
		   #<116>(8,1,'integer',['unsigned'|['big']]),
		   #<116>(8,1,'integer',['unsigned'|['big']]),
		   #<112>(8,1,'integer',['unsigned'|['big']]),
		   #<58>(8,1,'integer',['unsigned'|['big']]),
		   #<47>(8,1,'integer',['unsigned'|['big']]),
		   #<47>(8,1,'integer',['unsigned'|['big']]),
		   #<119>(8,1,'integer',['unsigned'|['big']]),
		   #<119>(8,1,'integer',['unsigned'|['big']]),
		   #<119>(8,1,'integer',['unsigned'|['big']]),
		   #<46>(8,1,'integer',['unsigned'|['big']]),
		   #<119>(8,1,'integer',['unsigned'|['big']]),
		   #<51>(8,1,'integer',['unsigned'|['big']]),
		   #<46>(8,1,'integer',['unsigned'|['big']]),
		   #<111>(8,1,'integer',['unsigned'|['big']]),
		   #<114>(8,1,'integer',['unsigned'|['big']]),
		   #<103>(8,1,'integer',['unsigned'|['big']]),
		   #<47>(8,1,'integer',['unsigned'|['big']]),
		   #<50>(8,1,'integer',['unsigned'|['big']]),
		   #<48>(8,1,'integer',['unsigned'|['big']]),
		   #<48>(8,1,'integer',['unsigned'|['big']]),
		   #<49>(8,1,'integer',['unsigned'|['big']]),
		   #<47>(8,1,'integer',['unsigned'|['big']]),
		   #<88>(8,1,'integer',['unsigned'|['big']]),
		   #<77>(8,1,'integer',['unsigned'|['big']]),
		   #<76>(8,1,'integer',['unsigned'|['big']]),
		   #<83>(8,1,'integer',['unsigned'|['big']]),
		   #<99>(8,1,'integer',['unsigned'|['big']]),
		   #<104>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<109>(8,1,'integer',['unsigned'|['big']]),
		   #<97>(8,1,'integer',['unsigned'|['big']]),
		   #<106>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<5>(8,1,'integer',['unsigned'|['big']]),
		   #<102>(8,1,'integer',['unsigned'|['big']]),
		   #<97>(8,1,'integer',['unsigned'|['big']]),
		   #<108>(8,1,'integer',['unsigned'|['big']]),
		   #<115>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<106>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<8>(8,1,'integer',['unsigned'|['big']]),
		   #<111>(8,1,'integer',['unsigned'|['big']]),
		   #<112>(8,1,'integer',['unsigned'|['big']]),
		   #<116>(8,1,'integer',['unsigned'|['big']]),
		   #<105>(8,1,'integer',['unsigned'|['big']]),
		   #<111>(8,1,'integer',['unsigned'|['big']]),
		   #<110>(8,1,'integer',['unsigned'|['big']]),
		   #<97>(8,1,'integer',['unsigned'|['big']]),
		   #<108>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<9>(8,1,'integer',['unsigned'|['big']]),
		   #<117>(8,1,'integer',['unsigned'|['big']]),
		   #<110>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<102>(8,1,'integer',['unsigned'|['big']]),
		   #<105>(8,1,'integer',['unsigned'|['big']]),
		   #<110>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<9>(8,1,'integer',['unsigned'|['big']]),
		   #<117>(8,1,'integer',['unsigned'|['big']]),
		   #<110>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<102>(8,1,'integer',['unsigned'|['big']]),
		   #<105>(8,1,'integer',['unsigned'|['big']]),
		   #<110>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<9>(8,1,'integer',['unsigned'|['big']]),
		   #<117>(8,1,'integer',['unsigned'|['big']]),
		   #<110>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<102>(8,1,'integer',['unsigned'|['big']]),
		   #<105>(8,1,'integer',['unsigned'|['big']]),
		   #<110>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<104>(8,1,'integer',['unsigned'|['big']]),
		   #<2>(8,1,'integer',['unsigned'|['big']]),
		   #<104>(8,1,'integer',['unsigned'|['big']]),
		   #<2>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<9>(8,1,'integer',['unsigned'|['big']]),
		   #<97>(8,1,'integer',['unsigned'|['big']]),
		   #<116>(8,1,'integer',['unsigned'|['big']]),
		   #<116>(8,1,'integer',['unsigned'|['big']]),
		   #<114>(8,1,'integer',['unsigned'|['big']]),
		   #<105>(8,1,'integer',['unsigned'|['big']]),
		   #<98>(8,1,'integer',['unsigned'|['big']]),
		   #<117>(8,1,'integer',['unsigned'|['big']]),
		   #<116>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<104>(8,1,'integer',['unsigned'|['big']]),
		   #<3>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<4>(8,1,'integer',['unsigned'|['big']]),
		   #<108>(8,1,'integer',['unsigned'|['big']]),
		   #<97>(8,1,'integer',['unsigned'|['big']]),
		   #<110>(8,1,'integer',['unsigned'|['big']]),
		   #<103>(8,1,'integer',['unsigned'|['big']]),
		   #<106>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<36>(8,1,'integer',['unsigned'|['big']]),
		   #<104>(8,1,'integer',['unsigned'|['big']]),
		   #<116>(8,1,'integer',['unsigned'|['big']]),
		   #<116>(8,1,'integer',['unsigned'|['big']]),
		   #<112>(8,1,'integer',['unsigned'|['big']]),
		   #<58>(8,1,'integer',['unsigned'|['big']]),
		   #<47>(8,1,'integer',['unsigned'|['big']]),
		   #<47>(8,1,'integer',['unsigned'|['big']]),
		   #<119>(8,1,'integer',['unsigned'|['big']]),
		   #<119>(8,1,'integer',['unsigned'|['big']]),
		   #<119>(8,1,'integer',['unsigned'|['big']]),
		   #<46>(8,1,'integer',['unsigned'|['big']]),
		   #<119>(8,1,'integer',['unsigned'|['big']]),
		   #<51>(8,1,'integer',['unsigned'|['big']]),
		   #<46>(8,1,'integer',['unsigned'|['big']]),
		   #<111>(8,1,'integer',['unsigned'|['big']]),
		   #<114>(8,1,'integer',['unsigned'|['big']]),
		   #<103>(8,1,'integer',['unsigned'|['big']]),
		   #<47>(8,1,'integer',['unsigned'|['big']]),
		   #<88>(8,1,'integer',['unsigned'|['big']]),
		   #<77>(8,1,'integer',['unsigned'|['big']]),
		   #<76>(8,1,'integer',['unsigned'|['big']]),
		   #<47>(8,1,'integer',['unsigned'|['big']]),
		   #<49>(8,1,'integer',['unsigned'|['big']]),
		   #<57>(8,1,'integer',['unsigned'|['big']]),
		   #<57>(8,1,'integer',['unsigned'|['big']]),
		   #<56>(8,1,'integer',['unsigned'|['big']]),
		   #<47>(8,1,'integer',['unsigned'|['big']]),
		   #<110>(8,1,'integer',['unsigned'|['big']]),
		   #<97>(8,1,'integer',['unsigned'|['big']]),
		   #<109>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<115>(8,1,'integer',['unsigned'|['big']]),
		   #<112>(8,1,'integer',['unsigned'|['big']]),
		   #<97>(8,1,'integer',['unsigned'|['big']]),
		   #<99>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<104>(8,1,'integer',['unsigned'|['big']]),
		   #<9>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<16>(8,1,'integer',['unsigned'|['big']]),
		   #<115>(8,1,'integer',['unsigned'|['big']]),
		   #<99>(8,1,'integer',['unsigned'|['big']]),
		   #<104>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<109>(8,1,'integer',['unsigned'|['big']]),
		   #<97>(8,1,'integer',['unsigned'|['big']]),
		   #<95>(8,1,'integer',['unsigned'|['big']]),
		   #<97>(8,1,'integer',['unsigned'|['big']]),
		   #<116>(8,1,'integer',['unsigned'|['big']]),
		   #<116>(8,1,'integer',['unsigned'|['big']]),
		   #<114>(8,1,'integer',['unsigned'|['big']]),
		   #<105>(8,1,'integer',['unsigned'|['big']]),
		   #<98>(8,1,'integer',['unsigned'|['big']]),
		   #<117>(8,1,'integer',['unsigned'|['big']]),
		   #<116>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<104>(8,1,'integer',['unsigned'|['big']]),
		   #<3>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<4>(8,1,'integer',['unsigned'|['big']]),
		   #<108>(8,1,'integer',['unsigned'|['big']]),
		   #<97>(8,1,'integer',['unsigned'|['big']]),
		   #<110>(8,1,'integer',['unsigned'|['big']]),
		   #<103>(8,1,'integer',['unsigned'|['big']]),
		   #<106>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<36>(8,1,'integer',['unsigned'|['big']]),
		   #<104>(8,1,'integer',['unsigned'|['big']]),
		   #<116>(8,1,'integer',['unsigned'|['big']]),
		   #<116>(8,1,'integer',['unsigned'|['big']]),
		   #<112>(8,1,'integer',['unsigned'|['big']]),
		   #<58>(8,1,'integer',['unsigned'|['big']]),
		   #<47>(8,1,'integer',['unsigned'|['big']]),
		   #<47>(8,1,'integer',['unsigned'|['big']]),
		   #<119>(8,1,'integer',['unsigned'|['big']]),
		   #<119>(8,1,'integer',['unsigned'|['big']]),
		   #<119>(8,1,'integer',['unsigned'|['big']]),
		   #<46>(8,1,'integer',['unsigned'|['big']]),
		   #<119>(8,1,'integer',['unsigned'|['big']]),
		   #<51>(8,1,'integer',['unsigned'|['big']]),
		   #<46>(8,1,'integer',['unsigned'|['big']]),
		   #<111>(8,1,'integer',['unsigned'|['big']]),
		   #<114>(8,1,'integer',['unsigned'|['big']]),
		   #<103>(8,1,'integer',['unsigned'|['big']]),
		   #<47>(8,1,'integer',['unsigned'|['big']]),
		   #<88>(8,1,'integer',['unsigned'|['big']]),
		   #<77>(8,1,'integer',['unsigned'|['big']]),
		   #<76>(8,1,'integer',['unsigned'|['big']]),
		   #<47>(8,1,'integer',['unsigned'|['big']]),
		   #<49>(8,1,'integer',['unsigned'|['big']]),
		   #<57>(8,1,'integer',['unsigned'|['big']]),
		   #<57>(8,1,'integer',['unsigned'|['big']]),
		   #<56>(8,1,'integer',['unsigned'|['big']]),
		   #<47>(8,1,'integer',['unsigned'|['big']]),
		   #<110>(8,1,'integer',['unsigned'|['big']]),
		   #<97>(8,1,'integer',['unsigned'|['big']]),
		   #<109>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<115>(8,1,'integer',['unsigned'|['big']]),
		   #<112>(8,1,'integer',['unsigned'|['big']]),
		   #<97>(8,1,'integer',['unsigned'|['big']]),
		   #<99>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<108>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<1>(8,1,'integer',['unsigned'|['big']]),
		   #<104>(8,1,'integer',['unsigned'|['big']]),
		   #<2>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<10>(8,1,'integer',['unsigned'|['big']]),
		   #<115>(8,1,'integer',['unsigned'|['big']]),
		   #<105>(8,1,'integer',['unsigned'|['big']]),
		   #<109>(8,1,'integer',['unsigned'|['big']]),
		   #<112>(8,1,'integer',['unsigned'|['big']]),
		   #<108>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<84>(8,1,'integer',['unsigned'|['big']]),
		   #<121>(8,1,'integer',['unsigned'|['big']]),
		   #<112>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<104>(8,1,'integer',['unsigned'|['big']]),
		   #<3>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<15>(8,1,'integer',['unsigned'|['big']]),
		   #<95>(8,1,'integer',['unsigned'|['big']]),
		   #<120>(8,1,'integer',['unsigned'|['big']]),
		   #<109>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<114>(8,1,'integer',['unsigned'|['big']]),
		   #<108>(8,1,'integer',['unsigned'|['big']]),
		   #<95>(8,1,'integer',['unsigned'|['big']]),
		   #<110>(8,1,'integer',['unsigned'|['big']]),
		   #<111>(8,1,'integer',['unsigned'|['big']]),
		   #<95>(8,1,'integer',['unsigned'|['big']]),
		   #<110>(8,1,'integer',['unsigned'|['big']]),
		   #<97>(8,1,'integer',['unsigned'|['big']]),
		   #<109>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<95>(8,1,'integer',['unsigned'|['big']]),
		   #<108>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<1>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<4>(8,1,'integer',['unsigned'|['big']]),
		   #<108>(8,1,'integer',['unsigned'|['big']]),
		   #<97>(8,1,'integer',['unsigned'|['big']]),
		   #<110>(8,1,'integer',['unsigned'|['big']]),
		   #<103>(8,1,'integer',['unsigned'|['big']]),
		   #<106>(8,1,'integer',['unsigned'|['big']]),
		   #<106>(8,1,'integer',['unsigned'|['big']]),
		   #<106>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<5>(8,1,'integer',['unsigned'|['big']]),
		   #<102>(8,1,'integer',['unsigned'|['big']]),
		   #<97>(8,1,'integer',['unsigned'|['big']]),
		   #<108>(8,1,'integer',['unsigned'|['big']]),
		   #<115>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<106>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<8>(8,1,'integer',['unsigned'|['big']]),
		   #<111>(8,1,'integer',['unsigned'|['big']]),
		   #<112>(8,1,'integer',['unsigned'|['big']]),
		   #<116>(8,1,'integer',['unsigned'|['big']]),
		   #<105>(8,1,'integer',['unsigned'|['big']]),
		   #<111>(8,1,'integer',['unsigned'|['big']]),
		   #<110>(8,1,'integer',['unsigned'|['big']]),
		   #<97>(8,1,'integer',['unsigned'|['big']]),
		   #<108>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<9>(8,1,'integer',['unsigned'|['big']]),
		   #<117>(8,1,'integer',['unsigned'|['big']]),
		   #<110>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<102>(8,1,'integer',['unsigned'|['big']]),
		   #<105>(8,1,'integer',['unsigned'|['big']]),
		   #<110>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<9>(8,1,'integer',['unsigned'|['big']]),
		   #<117>(8,1,'integer',['unsigned'|['big']]),
		   #<110>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<102>(8,1,'integer',['unsigned'|['big']]),
		   #<105>(8,1,'integer',['unsigned'|['big']]),
		   #<110>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<9>(8,1,'integer',['unsigned'|['big']]),
		   #<117>(8,1,'integer',['unsigned'|['big']]),
		   #<110>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<102>(8,1,'integer',['unsigned'|['big']]),
		   #<105>(8,1,'integer',['unsigned'|['big']]),
		   #<110>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<104>(8,1,'integer',['unsigned'|['big']]),
		   #<2>(8,1,'integer',['unsigned'|['big']]),
		   #<104>(8,1,'integer',['unsigned'|['big']]),
		   #<2>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<10>(8,1,'integer',['unsigned'|['big']]),
		   #<115>(8,1,'integer',['unsigned'|['big']]),
		   #<105>(8,1,'integer',['unsigned'|['big']]),
		   #<109>(8,1,'integer',['unsigned'|['big']]),
		   #<112>(8,1,'integer',['unsigned'|['big']]),
		   #<108>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<84>(8,1,'integer',['unsigned'|['big']]),
		   #<121>(8,1,'integer',['unsigned'|['big']]),
		   #<112>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<104>(8,1,'integer',['unsigned'|['big']]),
		   #<3>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<15>(8,1,'integer',['unsigned'|['big']]),
		   #<95>(8,1,'integer',['unsigned'|['big']]),
		   #<120>(8,1,'integer',['unsigned'|['big']]),
		   #<109>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<114>(8,1,'integer',['unsigned'|['big']]),
		   #<108>(8,1,'integer',['unsigned'|['big']]),
		   #<95>(8,1,'integer',['unsigned'|['big']]),
		   #<110>(8,1,'integer',['unsigned'|['big']]),
		   #<111>(8,1,'integer',['unsigned'|['big']]),
		   #<95>(8,1,'integer',['unsigned'|['big']]),
		   #<110>(8,1,'integer',['unsigned'|['big']]),
		   #<97>(8,1,'integer',['unsigned'|['big']]),
		   #<109>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<95>(8,1,'integer',['unsigned'|['big']]),
		   #<108>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<2>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<15>(8,1,'integer',['unsigned'|['big']]),
		   #<95>(8,1,'integer',['unsigned'|['big']]),
		   #<120>(8,1,'integer',['unsigned'|['big']]),
		   #<109>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<114>(8,1,'integer',['unsigned'|['big']]),
		   #<108>(8,1,'integer',['unsigned'|['big']]),
		   #<95>(8,1,'integer',['unsigned'|['big']]),
		   #<110>(8,1,'integer',['unsigned'|['big']]),
		   #<111>(8,1,'integer',['unsigned'|['big']]),
		   #<95>(8,1,'integer',['unsigned'|['big']]),
		   #<110>(8,1,'integer',['unsigned'|['big']]),
		   #<97>(8,1,'integer',['unsigned'|['big']]),
		   #<109>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<95>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<4>(8,1,'integer',['unsigned'|['big']]),
		   #<108>(8,1,'integer',['unsigned'|['big']]),
		   #<97>(8,1,'integer',['unsigned'|['big']]),
		   #<110>(8,1,'integer',['unsigned'|['big']]),
		   #<103>(8,1,'integer',['unsigned'|['big']]),
		   #<106>(8,1,'integer',['unsigned'|['big']]),
		   #<106>(8,1,'integer',['unsigned'|['big']]),
		   #<104>(8,1,'integer',['unsigned'|['big']]),
		   #<9>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<18>(8,1,'integer',['unsigned'|['big']]),
		   #<115>(8,1,'integer',['unsigned'|['big']]),
		   #<99>(8,1,'integer',['unsigned'|['big']]),
		   #<104>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<109>(8,1,'integer',['unsigned'|['big']]),
		   #<97>(8,1,'integer',['unsigned'|['big']]),
		   #<95>(8,1,'integer',['unsigned'|['big']]),
		   #<115>(8,1,'integer',['unsigned'|['big']]),
		   #<105>(8,1,'integer',['unsigned'|['big']]),
		   #<109>(8,1,'integer',['unsigned'|['big']]),
		   #<112>(8,1,'integer',['unsigned'|['big']]),
		   #<108>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<95>(8,1,'integer',['unsigned'|['big']]),
		   #<116>(8,1,'integer',['unsigned'|['big']]),
		   #<121>(8,1,'integer',['unsigned'|['big']]),
		   #<112>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<104>(8,1,'integer',['unsigned'|['big']]),
		   #<3>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<15>(8,1,'integer',['unsigned'|['big']]),
		   #<95>(8,1,'integer',['unsigned'|['big']]),
		   #<120>(8,1,'integer',['unsigned'|['big']]),
		   #<109>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<114>(8,1,'integer',['unsigned'|['big']]),
		   #<108>(8,1,'integer',['unsigned'|['big']]),
		   #<95>(8,1,'integer',['unsigned'|['big']]),
		   #<110>(8,1,'integer',['unsigned'|['big']]),
		   #<111>(8,1,'integer',['unsigned'|['big']]),
		   #<95>(8,1,'integer',['unsigned'|['big']]),
		   #<110>(8,1,'integer',['unsigned'|['big']]),
		   #<97>(8,1,'integer',['unsigned'|['big']]),
		   #<109>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<95>(8,1,'integer',['unsigned'|['big']]),
		   #<108>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<2>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<15>(8,1,'integer',['unsigned'|['big']]),
		   #<95>(8,1,'integer',['unsigned'|['big']]),
		   #<120>(8,1,'integer',['unsigned'|['big']]),
		   #<109>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<114>(8,1,'integer',['unsigned'|['big']]),
		   #<108>(8,1,'integer',['unsigned'|['big']]),
		   #<95>(8,1,'integer',['unsigned'|['big']]),
		   #<110>(8,1,'integer',['unsigned'|['big']]),
		   #<111>(8,1,'integer',['unsigned'|['big']]),
		   #<95>(8,1,'integer',['unsigned'|['big']]),
		   #<110>(8,1,'integer',['unsigned'|['big']]),
		   #<97>(8,1,'integer',['unsigned'|['big']]),
		   #<109>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<95>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<4>(8,1,'integer',['unsigned'|['big']]),
		   #<108>(8,1,'integer',['unsigned'|['big']]),
		   #<97>(8,1,'integer',['unsigned'|['big']]),
		   #<110>(8,1,'integer',['unsigned'|['big']]),
		   #<103>(8,1,'integer',['unsigned'|['big']]),
		   #<106>(8,1,'integer',['unsigned'|['big']]),
		   #<106>(8,1,'integer',['unsigned'|['big']]),
		   #<108>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<2>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<15>(8,1,'integer',['unsigned'|['big']]),
		   #<95>(8,1,'integer',['unsigned'|['big']]),
		   #<120>(8,1,'integer',['unsigned'|['big']]),
		   #<109>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<114>(8,1,'integer',['unsigned'|['big']]),
		   #<108>(8,1,'integer',['unsigned'|['big']]),
		   #<95>(8,1,'integer',['unsigned'|['big']]),
		   #<110>(8,1,'integer',['unsigned'|['big']]),
		   #<111>(8,1,'integer',['unsigned'|['big']]),
		   #<95>(8,1,'integer',['unsigned'|['big']]),
		   #<110>(8,1,'integer',['unsigned'|['big']]),
		   #<97>(8,1,'integer',['unsigned'|['big']]),
		   #<109>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<95>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<4>(8,1,'integer',['unsigned'|['big']]),
		   #<108>(8,1,'integer',['unsigned'|['big']]),
		   #<97>(8,1,'integer',['unsigned'|['big']]),
		   #<110>(8,1,'integer',['unsigned'|['big']]),
		   #<103>(8,1,'integer',['unsigned'|['big']]),
		   #<106>(8,1,'integer',['unsigned'|['big']]),
		   #<104>(8,1,'integer',['unsigned'|['big']]),
		   #<3>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<6>(8,1,'integer',['unsigned'|['big']]),
		   #<115>(8,1,'integer',['unsigned'|['big']]),
		   #<116>(8,1,'integer',['unsigned'|['big']]),
		   #<114>(8,1,'integer',['unsigned'|['big']]),
		   #<105>(8,1,'integer',['unsigned'|['big']]),
		   #<110>(8,1,'integer',['unsigned'|['big']]),
		   #<103>(8,1,'integer',['unsigned'|['big']]),
		   #<106>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<32>(8,1,'integer',['unsigned'|['big']]),
		   #<104>(8,1,'integer',['unsigned'|['big']]),
		   #<116>(8,1,'integer',['unsigned'|['big']]),
		   #<116>(8,1,'integer',['unsigned'|['big']]),
		   #<112>(8,1,'integer',['unsigned'|['big']]),
		   #<58>(8,1,'integer',['unsigned'|['big']]),
		   #<47>(8,1,'integer',['unsigned'|['big']]),
		   #<47>(8,1,'integer',['unsigned'|['big']]),
		   #<119>(8,1,'integer',['unsigned'|['big']]),
		   #<119>(8,1,'integer',['unsigned'|['big']]),
		   #<119>(8,1,'integer',['unsigned'|['big']]),
		   #<46>(8,1,'integer',['unsigned'|['big']]),
		   #<119>(8,1,'integer',['unsigned'|['big']]),
		   #<51>(8,1,'integer',['unsigned'|['big']]),
		   #<46>(8,1,'integer',['unsigned'|['big']]),
		   #<111>(8,1,'integer',['unsigned'|['big']]),
		   #<114>(8,1,'integer',['unsigned'|['big']]),
		   #<103>(8,1,'integer',['unsigned'|['big']]),
		   #<47>(8,1,'integer',['unsigned'|['big']]),
		   #<50>(8,1,'integer',['unsigned'|['big']]),
		   #<48>(8,1,'integer',['unsigned'|['big']]),
		   #<48>(8,1,'integer',['unsigned'|['big']]),
		   #<49>(8,1,'integer',['unsigned'|['big']]),
		   #<47>(8,1,'integer',['unsigned'|['big']]),
		   #<88>(8,1,'integer',['unsigned'|['big']]),
		   #<77>(8,1,'integer',['unsigned'|['big']]),
		   #<76>(8,1,'integer',['unsigned'|['big']]),
		   #<83>(8,1,'integer',['unsigned'|['big']]),
		   #<99>(8,1,'integer',['unsigned'|['big']]),
		   #<104>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<109>(8,1,'integer',['unsigned'|['big']]),
		   #<97>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<5>(8,1,'integer',['unsigned'|['big']]),
		   #<102>(8,1,'integer',['unsigned'|['big']]),
		   #<97>(8,1,'integer',['unsigned'|['big']]),
		   #<108>(8,1,'integer',['unsigned'|['big']]),
		   #<115>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<106>(8,1,'integer',['unsigned'|['big']]),
		   #<108>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<1>(8,1,'integer',['unsigned'|['big']]),
		   #<104>(8,1,'integer',['unsigned'|['big']]),
		   #<2>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<11>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<110>(8,1,'integer',['unsigned'|['big']]),
		   #<117>(8,1,'integer',['unsigned'|['big']]),
		   #<109>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<114>(8,1,'integer',['unsigned'|['big']]),
		   #<97>(8,1,'integer',['unsigned'|['big']]),
		   #<116>(8,1,'integer',['unsigned'|['big']]),
		   #<105>(8,1,'integer',['unsigned'|['big']]),
		   #<111>(8,1,'integer',['unsigned'|['big']]),
		   #<110>(8,1,'integer',['unsigned'|['big']]),
		   #<108>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<1>(8,1,'integer',['unsigned'|['big']]),
		   #<106>(8,1,'integer',['unsigned'|['big']]),
		   #<106>(8,1,'integer',['unsigned'|['big']]),
		   #<106>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<6>(8,1,'integer',['unsigned'|['big']]),
		   #<97>(8,1,'integer',['unsigned'|['big']]),
		   #<116>(8,1,'integer',['unsigned'|['big']]),
		   #<111>(8,1,'integer',['unsigned'|['big']]),
		   #<109>(8,1,'integer',['unsigned'|['big']]),
		   #<105>(8,1,'integer',['unsigned'|['big']]),
		   #<99>(8,1,'integer',['unsigned'|['big']]),
		   #<108>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<1>(8,1,'integer',['unsigned'|['big']]),
		   #<104>(8,1,'integer',['unsigned'|['big']]),
		   #<2>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<11>(8,1,'integer',['unsigned'|['big']]),
		   #<114>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<115>(8,1,'integer',['unsigned'|['big']]),
		   #<116>(8,1,'integer',['unsigned'|['big']]),
		   #<114>(8,1,'integer',['unsigned'|['big']]),
		   #<105>(8,1,'integer',['unsigned'|['big']]),
		   #<99>(8,1,'integer',['unsigned'|['big']]),
		   #<116>(8,1,'integer',['unsigned'|['big']]),
		   #<105>(8,1,'integer',['unsigned'|['big']]),
		   #<111>(8,1,'integer',['unsigned'|['big']]),
		   #<110>(8,1,'integer',['unsigned'|['big']]),
		   #<104>(8,1,'integer',['unsigned'|['big']]),
		   #<2>(8,1,'integer',['unsigned'|['big']]),
		   #<104>(8,1,'integer',['unsigned'|['big']]),
		   #<3>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<6>(8,1,'integer',['unsigned'|['big']]),
		   #<115>(8,1,'integer',['unsigned'|['big']]),
		   #<116>(8,1,'integer',['unsigned'|['big']]),
		   #<114>(8,1,'integer',['unsigned'|['big']]),
		   #<105>(8,1,'integer',['unsigned'|['big']]),
		   #<110>(8,1,'integer',['unsigned'|['big']]),
		   #<103>(8,1,'integer',['unsigned'|['big']]),
		   #<106>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<32>(8,1,'integer',['unsigned'|['big']]),
		   #<104>(8,1,'integer',['unsigned'|['big']]),
		   #<116>(8,1,'integer',['unsigned'|['big']]),
		   #<116>(8,1,'integer',['unsigned'|['big']]),
		   #<112>(8,1,'integer',['unsigned'|['big']]),
		   #<58>(8,1,'integer',['unsigned'|['big']]),
		   #<47>(8,1,'integer',['unsigned'|['big']]),
		   #<47>(8,1,'integer',['unsigned'|['big']]),
		   #<119>(8,1,'integer',['unsigned'|['big']]),
		   #<119>(8,1,'integer',['unsigned'|['big']]),
		   #<119>(8,1,'integer',['unsigned'|['big']]),
		   #<46>(8,1,'integer',['unsigned'|['big']]),
		   #<119>(8,1,'integer',['unsigned'|['big']]),
		   #<51>(8,1,'integer',['unsigned'|['big']]),
		   #<46>(8,1,'integer',['unsigned'|['big']]),
		   #<111>(8,1,'integer',['unsigned'|['big']]),
		   #<114>(8,1,'integer',['unsigned'|['big']]),
		   #<103>(8,1,'integer',['unsigned'|['big']]),
		   #<47>(8,1,'integer',['unsigned'|['big']]),
		   #<50>(8,1,'integer',['unsigned'|['big']]),
		   #<48>(8,1,'integer',['unsigned'|['big']]),
		   #<48>(8,1,'integer',['unsigned'|['big']]),
		   #<49>(8,1,'integer',['unsigned'|['big']]),
		   #<47>(8,1,'integer',['unsigned'|['big']]),
		   #<88>(8,1,'integer',['unsigned'|['big']]),
		   #<77>(8,1,'integer',['unsigned'|['big']]),
		   #<76>(8,1,'integer',['unsigned'|['big']]),
		   #<83>(8,1,'integer',['unsigned'|['big']]),
		   #<99>(8,1,'integer',['unsigned'|['big']]),
		   #<104>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<109>(8,1,'integer',['unsigned'|['big']]),
		   #<97>(8,1,'integer',['unsigned'|['big']]),
		   #<108>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<1>(8,1,'integer',['unsigned'|['big']]),
		   #<104>(8,1,'integer',['unsigned'|['big']]),
		   #<2>(8,1,'integer',['unsigned'|['big']]),
		   #<100>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<11>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<110>(8,1,'integer',['unsigned'|['big']]),
		   #<117>(8,1,'integer',['unsigned'|['big']]),
		   #<109>(8,1,'integer',['unsigned'|['big']]),
		   #<101>(8,1,'integer',['unsigned'|['big']]),
		   #<114>(8,1,'integer',['unsigned'|['big']]),
		   #<97>(8,1,'integer',['unsigned'|['big']]),
		   #<116>(8,1,'integer',['unsigned'|['big']]),
		   #<105>(8,1,'integer',['unsigned'|['big']]),
		   #<111>(8,1,'integer',['unsigned'|['big']]),
		   #<110>(8,1,'integer',['unsigned'|['big']]),
		   #<106>(8,1,'integer',['unsigned'|['big']]),
		   #<106>(8,1,'integer',['unsigned'|['big']]),
		   #<106>(8,1,'integer',['unsigned'|['big']]),
		   #<106>(8,1,'integer',['unsigned'|['big']])}#)
	in  %% Line 5620
	    call 'ets':'insert'
		(_cor0, _cor1)
'default_namespace_by_convention'/0 =
    %% Line 5745
    fun () ->
	%% Line 5746
	[{'xml','http://www.w3.org/XML/1998/namespace'}]
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('xmerl_xsd')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('xmerl_xsd', _cor0)
end