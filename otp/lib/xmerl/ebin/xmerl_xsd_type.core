module 'xmerl_xsd_type' ['add_duration2dateTime'/2,
			 'check_simpleType'/3,
			 'collapse_ws'/1,
			 'compare_dateTime'/2,
			 'compare_durations'/2,
			 'compare_floats'/2,
			 'dateTime_atoms'/1,
			 'duration_atoms'/1,
			 'fQuotient'/2,
			 'fQuotient'/3,
			 'facet_fun'/2,
			 'maximumDayInMonthFor'/2,
			 'module_info'/0,
			 'module_info'/1,
			 'modulo'/2,
			 'modulo'/3,
			 'normalize_dateTime'/1,
			 'replace_ws'/2]
    attributes []
'check_simpleType'/3 =
    %% Line 48
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Name,Value,S>
	      when call 'erlang':'is_list'
		    (Name) ->
	      let <_cor3> =
		  %% Line 50
		  call 'erlang':'list_to_atom'
		      (Name)
	      in  %% Line 50
		  apply 'check_simpleType'/3
		      (_cor3, Value, S)
	  %% Line 51
	  <'string',Value,_X_S> when 'true' ->
	      let <_cor9> =
		  %% Line 52
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor6) ->
				case _cor6 of
				  <[X|_cor5]> when 'true' ->
				      %% Line 53
				      ( case call 'xmerl_lib':'is_char'
						 (X) of
					  <'true'> when 'true' ->
					      let <_cor7> =
						  apply 'lc$^0'/1
						      (_cor5)
					      in  ( [X|_cor7]
						    -| ['compiler_generated'] )
					  ( <'false'> when 'true' ->
						apply 'lc$^0'/1
						    (_cor5)
					    -| ['compiler_generated'] )
					  ( <_cor8> when 'true' ->
						primop 'match_fail'
						    ({'case_clause',_cor8})
					    -| ['compiler_generated'] )
					end
					-| ['list_comprehension'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor6> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor6})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (Value)
		    -| ['list_comprehension'] )
	      in  %% Line 52
		  case _cor9 of
		    %% Line 54
		    <_cor124>
			when call 'erlang':'=:='
			      (_cor9,
			       Value) ->
			%% Line 55
			{'ok',Value}
		    %% Line 56
		    <_cor125> when 'true' ->
			%% Line 57
			{'error',{'value_not_string',Value}}
		  end
	  %% Line 59
	  <'normalizedString',Value,_X_S> when 'true' ->
	      let <_cor18> =
		  %% Line 60
		  ( letrec
			'lc$^1'/1 =
			    fun (_cor14) ->
				case _cor14 of
				  <[X|_cor12]> when 'true' ->
				      ( case call 'xmerl_lib':'is_char'
						 (X) of
					  <'true'> when 'true' ->
					      let <_cor13> =
						  %% Line 61
						  apply 'ns_whitespace'/1
						      (X)
					      in  %% Line 61
						  ( case <> of
						      <>
							  when call 'erlang':'=:='
								(_cor13,
								 'false') ->
							  let <_cor15> =
							      apply 'lc$^1'/1
								  (_cor12)
							  in  ( [X|_cor15]
								-| ['compiler_generated'] )
						      ( <> when 'true' ->
							    apply 'lc$^1'/1
								(_cor12)
							-| ['compiler_generated'] )
						    end
						    -| ['list_comprehension'] )
					  ( <'false'> when 'true' ->
						apply 'lc$^1'/1
						    (_cor12)
					    -| ['compiler_generated'] )
					  ( <_cor17> when 'true' ->
						primop 'match_fail'
						    ({'case_clause',_cor17})
					    -| ['compiler_generated'] )
					end
					-| ['list_comprehension'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor14> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor14})
					  -| [{'function_name',{'lc$^1',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^1'/1
			    (Value)
		    -| ['list_comprehension'] )
	      in  %% Line 60
		  case _cor18 of
		    %% Line 62
		    <_cor126>
			when call 'erlang':'=:='
			      (_cor18,
			       Value) ->
			%% Line 63
			{'ok',Value}
		    %% Line 64
		    <_cor127> when 'true' ->
			%% Line 65
			{'error',{'value_not_normalizedString',Value}}
		  end
	  %% Line 67
	  <'boolean',[116|[114|[117|[101]]]],_X_S> when 'true' ->
	      {'ok',[116|[114|[117|[101]]]]}
	  %% Line 68
	  <'boolean',[102|[97|[108|[115|[101]]]]],_X_S> when 'true' ->
	      {'ok',[102|[97|[108|[115|[101]]]]]}
	  %% Line 69
	  <'boolean',[49],_X_S> when 'true' ->
	      {'ok',[49]}
	  %% Line 70
	  <'boolean',[48],_X_S> when 'true' ->
	      {'ok',[48]}
	  %% Line 71
	  <'boolean',Other,_X_S> when 'true' ->
	      {'error',{'value_not_boolean',Other}}
	  %% Line 72
	  <'decimal',Value,_X_S> when 'true' ->
	      let <_cor20> =
		  catch
		      %% Line 73
		      apply 'check_decimal'/1
			  (Value)
	      in  %% Line 73
		  case _cor20 of
		    <{'EXIT',_cor128}> when 'true' ->
			{'error',{'type','invalid_decimal',Value}}
		    <{'error',_cor129}> when 'true' ->
			{'error',{'invalid_decimal',Value}}
		    <_cor130> when 'true' ->
			{'ok',Value}
		  end
	  %% Line 74
	  <'integer',Value,_X_S> when 'true' ->
	      let <_cor22> =
		  catch
		      %% Line 75
		      apply 'check_integer'/1
			  (Value)
	      in  %% Line 75
		  case _cor22 of
		    <{'EXIT',_cor131}> when 'true' ->
			{'error',{'type','invalid_integer',Value}}
		    <{'error',_cor132}> when 'true' ->
			{'error',{'invalid_integer',Value}}
		    <_cor133> when 'true' ->
			{'ok',Value}
		  end
	  %% Line 79
	  <'float',Value,_X_S> when 'true' ->
	      let <_cor24> =
		  catch
		      %% Line 80
		      apply 'check_float'/1
			  (Value)
	      in  %% Line 80
		  case _cor24 of
		    <{'EXIT',_cor134}> when 'true' ->
			{'error',{'type','invalid_float',Value}}
		    <{'error',_cor135}> when 'true' ->
			{'error',{'invalid_float',Value}}
		    <_cor136> when 'true' ->
			{'ok',Value}
		  end
	  %% Line 84
	  <'double',Value,_X_S> when 'true' ->
	      let <_cor26> =
		  catch
		      %% Line 85
		      apply 'check_double'/1
			  (Value)
	      in  %% Line 85
		  case _cor26 of
		    <{'EXIT',_cor137}> when 'true' ->
			{'error',{'type','invalid_double',Value}}
		    <{'error',_cor138}> when 'true' ->
			{'error',{'invalid_double',Value}}
		    <_cor139> when 'true' ->
			{'ok',Value}
		  end
	  %% Line 88
	  <'duration',Value,_X_S> when 'true' ->
	      let <_cor28> =
		  catch
		      %% Line 89
		      apply 'check_duration'/1
			  (Value)
	      in  %% Line 89
		  case _cor28 of
		    <{'EXIT',_cor140}> when 'true' ->
			{'error',{'type','invalid_duration',Value}}
		    <{'error',_cor141}> when 'true' ->
			{'error',{'invalid_duration',Value}}
		    <_cor142> when 'true' ->
			{'ok',Value}
		  end
	  %% Line 90
	  <'dateTime',Value,_X_S> when 'true' ->
	      let <_cor30> =
		  catch
		      %% Line 91
		      apply 'check_dateTime'/1
			  (Value)
	      in  %% Line 91
		  case _cor30 of
		    <{'EXIT',_cor143}> when 'true' ->
			{'error',{'type','invalid_dateTime',Value}}
		    <{'error',_cor144}> when 'true' ->
			{'error',{'invalid_dateTime',Value}}
		    <_cor145> when 'true' ->
			{'ok',Value}
		  end
	  %% Line 92
	  <'time',Value,_X_S> when 'true' ->
	      let <_cor32> =
		  catch
		      %% Line 93
		      apply 'check_time'/1
			  (Value)
	      in  %% Line 93
		  case _cor32 of
		    <{'EXIT',_cor146}> when 'true' ->
			{'error',{'type','invalid_time',Value}}
		    <{'error',_cor147}> when 'true' ->
			{'error',{'invalid_time',Value}}
		    <_cor148> when 'true' ->
			{'ok',Value}
		  end
	  %% Line 94
	  <'date',Value,_X_S> when 'true' ->
	      let <_cor34> =
		  catch
		      %% Line 95
		      apply 'check_date'/1
			  (Value)
	      in  %% Line 95
		  case _cor34 of
		    <{'EXIT',_cor149}> when 'true' ->
			{'error',{'type','invalid_date',Value}}
		    <{'error',_cor150}> when 'true' ->
			{'error',{'invalid_date',Value}}
		    <_cor151> when 'true' ->
			{'ok',Value}
		  end
	  %% Line 96
	  <'gYearMonth',Value,_X_S> when 'true' ->
	      let <_cor36> =
		  catch
		      %% Line 97
		      apply 'check_gYearMonth'/1
			  (Value)
	      in  %% Line 97
		  case _cor36 of
		    <{'EXIT',_cor152}> when 'true' ->
			{'error',{'type','invalid_gYearMonth',Value}}
		    <{'error',_cor153}> when 'true' ->
			{'error',{'invalid_gYearMonth',Value}}
		    <_cor154> when 'true' ->
			{'ok',Value}
		  end
	  %% Line 98
	  <'gYear',Value,_X_S> when 'true' ->
	      let <_cor38> =
		  catch
		      %% Line 99
		      apply 'check_gYear'/1
			  (Value)
	      in  %% Line 99
		  case _cor38 of
		    <{'EXIT',_cor155}> when 'true' ->
			{'error',{'type','invalid_gYear',Value}}
		    <{'error',_cor156}> when 'true' ->
			{'error',{'invalid_gYear',Value}}
		    <_cor157> when 'true' ->
			{'ok',Value}
		  end
	  %% Line 100
	  <'gMonthDay',Value,_X_S> when 'true' ->
	      let <_cor40> =
		  catch
		      %% Line 101
		      apply 'check_gMonthDay'/1
			  (Value)
	      in  %% Line 101
		  case _cor40 of
		    <{'EXIT',_cor158}> when 'true' ->
			{'error',{'type','invalid_gMonthDay',Value}}
		    <{'error',_cor159}> when 'true' ->
			{'error',{'invalid_gMonthDay',Value}}
		    <_cor160> when 'true' ->
			{'ok',Value}
		  end
	  %% Line 102
	  <'gDay',Value,_X_S> when 'true' ->
	      let <_cor42> =
		  catch
		      %% Line 103
		      apply 'check_gDay'/1
			  (Value)
	      in  %% Line 103
		  case _cor42 of
		    <{'EXIT',_cor161}> when 'true' ->
			{'error',{'type','invalid_gDay',Value}}
		    <{'error',_cor162}> when 'true' ->
			{'error',{'invalid_gDay',Value}}
		    <_cor163> when 'true' ->
			{'ok',Value}
		  end
	  %% Line 104
	  <'gMonth',Value,_X_S> when 'true' ->
	      let <_cor44> =
		  catch
		      %% Line 105
		      apply 'check_gMonth'/1
			  (Value)
	      in  %% Line 105
		  case _cor44 of
		    <{'EXIT',_cor164}> when 'true' ->
			{'error',{'type','invalid_gMonth',Value}}
		    <{'error',_cor165}> when 'true' ->
			{'error',{'invalid_gMonth',Value}}
		    <_cor166> when 'true' ->
			{'ok',Value}
		  end
	  %% Line 106
	  <'hexBinary',Value,_X_S> when 'true' ->
	      let <IsEven> =
		  %% Line 107
		  ( fun (_cor47) ->
			%% Line 108
			case call 'erlang':'rem'
				 (_cor47, 2) of
			  %% Line 109
			  <0> when 'true' ->
			      'true'
			  %% Line 110
			  <_cor167> when 'true' ->
			      'false'
			end
		    -| [{'id',{0,0,'-check_simpleType/3-fun-0-'}}] )
	      in  let <IsHex> =
		      %% Line 113
		      ( fun (_cor56) ->
			    case _cor56 of
			      <X>
				  when let <_cor50> =
					call 'erlang':'>='
					    (_cor56, 65)
				    in  let <_cor51> =
					    call 'erlang':'=<'
						(_cor56, 70)
					in  call 'erlang':'and'
						(_cor50, _cor51) ->
				  'true'
			      %% Line 114
			      <X>
				  when let <_cor52> =
					call 'erlang':'>='
					    (_cor56, 97)
				    in  let <_cor53> =
					    call 'erlang':'=<'
						(_cor56, 102)
					in  call 'erlang':'and'
						(_cor52, _cor53) ->
				  'true'
			      %% Line 115
			      <X>
				  when let <_cor54> =
					call 'erlang':'>='
					    (_cor56, 48)
				    in  let <_cor55> =
					    call 'erlang':'=<'
						(_cor56, 57)
					in  call 'erlang':'and'
						(_cor54, _cor55) ->
				  'true'
			      %% Line 116
			      <_cor168> when 'true' ->
				  'false'
			    end
			-| [{'id',{0,0,'-check_simpleType/3-fun-1-'}}] )
		  in  let <_cor66> =
			  %% Line 118
			  ( letrec
				'lc$^2'/1 =
				    fun (_cor62) ->
					case _cor62 of
					  <[X|_cor60]> when 'true' ->
					      let <_cor61> =
						  %% Line 119
						  call 'erlang':'length'
						      (Value)
					      in  %% Line 119
						  ( case apply IsEven
							     (_cor61) of
						      <'true'> when 'true' ->
							  %% Line 120
							  ( case apply IsHex
								     (X) of
							      <'true'> when 'true' ->
								  let <_cor63> =
								      apply 'lc$^2'/1
									  (_cor60)
								  in  ( [X|_cor63]
									-| ['compiler_generated'] )
							      ( <'false'> when 'true' ->
								    apply 'lc$^2'/1
									(_cor60)
								-| ['compiler_generated'] )
							      ( <_cor64> when 'true' ->
								    primop 'match_fail'
									({'case_clause',_cor64})
								-| ['compiler_generated'] )
							    end
							    -| ['list_comprehension'] )
						      ( <'false'> when 'true' ->
							    apply 'lc$^2'/1
								(_cor60)
							-| ['compiler_generated'] )
						      ( <_cor65> when 'true' ->
							    primop 'match_fail'
								({'case_clause',_cor65})
							-| ['compiler_generated'] )
						    end
						    -| ['list_comprehension'] )
					  <[]> when 'true' ->
					      []
					  ( <_cor62> when 'true' ->
						( primop 'match_fail'
						      ({'function_clause',_cor62})
						  -| [{'function_name',{'lc$^2',1}}] )
					    -| ['compiler_generated'] )
					end
			    in  apply 'lc$^2'/1
				    (Value)
			    -| ['list_comprehension'] )
		      in  %% Line 118
			  case _cor66 of
			    %% Line 121
			    <_cor169>
				when call 'erlang':'=:='
				      (_cor66,
				       Value) ->
				%% Line 122
				{'ok',Value}
			    %% Line 123
			    <_cor170> when 'true' ->
				{'error',{'value_not_hexBinary',Value}}
			  end
	  %% Line 125
	  <'base64Binary',Value,_X_S> when 'true' ->
	      %% Line 126
	      apply 'check_base64Binary'/1
		  (Value)
	  %% Line 127
	  <'anyURI',Value,S> when 'true' ->
	      %% Line 128
	      case call 'xmerl_uri':'parse'
		       (Value) of
		%% Line 129
		<{'error',_cor171}> when 'true' ->
		    let <_cor71> =
			catch
			    %% Line 131
			    ( case S of
				( <( {'xsd_state',_cor172,_cor173,_cor174,_cor175,_rec0,_cor176,_cor177,_cor178,_cor179,_cor180,_cor181,_cor182,_cor183,_cor184,_cor185,_cor186,_cor187,_cor188,_cor189,_cor190,_cor191,_cor192,_cor193,_cor194,_cor195,_cor196,_cor197,_cor198,_cor199,_cor200,_cor201,_cor202}
				     -| ['compiler_generated'] )> when 'true' ->
				      let <_cor70> =
					  call 'filename':'join'
					      (_rec0, Value)
				      in  call 'file':'read_file_info'
					      (_cor70)
				  -| ['compiler_generated'] )
				( <_cor203> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {'badrecord','xsd_state'}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
		    in  %% Line 131
			case _cor71 of
			  %% Line 132
			  <{'ok',_cor204}> when 'true' ->
			      %% Line 133
			      {'ok',Value}
			  %% Line 134
			  <_cor205> when 'true' ->
			      %% Line 135
			      {'error',{'value_not_anyURI',Value}}
			end
		%% Line 137
		<_cor206> when 'true' ->
		    %% Line 138
		    {'ok',Value}
	      end
	  %% Line 140
	  <'QName',Value,_X_S> when 'true' ->
	      %% Line 141
	      case call 'xmerl_lib':'is_name'
		       (Value) of
		%% Line 142
		<'true'> when 'true' ->
		    %% Line 143
		    {'ok',Value}
		%% Line 144
		<_cor207> when 'true' ->
		    %% Line 145
		    {'error',{'value_not_QName',Value}}
	      end
	  %% Line 147
	  <'NOTATION',Value,_X_S> when 'true' ->
	      %% Line 148
	      {'ok',Value}
	  %% Line 149
	  <'token',Value,_X_S> when 'true' ->
	      let <_cor75> =
		  catch
		      %% Line 150
		      apply 'check_token'/1
			  (Value)
	      in  %% Line 150
		  case _cor75 of
		    <{'EXIT',_cor208}> when 'true' ->
			{'error',{'type','invalid_token',Value}}
		    <{'error',_cor209}> when 'true' ->
			{'error',{'invalid_token',Value}}
		    <_cor210> when 'true' ->
			{'ok',Value}
		  end
	  %% Line 152
	  <'language',Value,_X_S> when 'true' ->
	      let <_cor77> =
		  catch
		      %% Line 153
		      apply 'check_language'/1
			  (Value)
	      in  %% Line 153
		  case _cor77 of
		    <{'EXIT',_cor211}> when 'true' ->
			{'error',{'type','illegal_language',Value}}
		    <{'error',_cor212}> when 'true' ->
			{'error',{'illegal_language',Value}}
		    <_cor213> when 'true' ->
			{'ok',Value}
		  end
	  %% Line 154
	  <'NMTOKEN',Value,_X_S> when 'true' ->
	      let <_cor79> =
		  catch
		      %% Line 155
		      apply 'check_NMTOKEN'/1
			  (Value)
	      in  %% Line 155
		  case _cor79 of
		    <{'EXIT',_cor214}> when 'true' ->
			{'error',{'type','illegal_NMTOKEN',Value}}
		    <{'error',_cor215}> when 'true' ->
			{'error',{'illegal_NMTOKEN',Value}}
		    <_cor216> when 'true' ->
			{'ok',Value}
		  end
	  %% Line 156
	  <'NMTOKENS',Value,_X_S> when 'true' ->
	      let <_cor81> =
		  catch
		      %% Line 157
		      apply 'check_NMTOKENS'/1
			  (Value)
	      in  %% Line 157
		  case _cor81 of
		    <{'EXIT',_cor217}> when 'true' ->
			{'error',{'type','illegal_NMTOKENS',Value}}
		    <{'error',_cor218}> when 'true' ->
			{'error',{'illegal_NMTOKENS',Value}}
		    <_cor219> when 'true' ->
			{'ok',Value}
		  end
	  %% Line 158
	  <'Name',Value,_X_S> when 'true' ->
	      let <_cor83> =
		  catch
		      %% Line 159
		      apply 'check_Name'/1
			  (Value)
	      in  %% Line 159
		  case _cor83 of
		    <{'EXIT',_cor220}> when 'true' ->
			{'error',{'type','illegal_name',Value}}
		    <{'error',_cor221}> when 'true' ->
			{'error',{'illegal_name',Value}}
		    <_cor222> when 'true' ->
			{'ok',Value}
		  end
	  %% Line 160
	  <'NCName',Value,_X_S> when 'true' ->
	      let <_cor85> =
		  catch
		      %% Line 161
		      apply 'check_NCName'/1
			  (Value)
	      in  %% Line 161
		  case _cor85 of
		    <{'EXIT',_cor223}> when 'true' ->
			{'error',{'type','illegal_name',Value}}
		    <{'error',_cor224}> when 'true' ->
			{'error',{'illegal_name',Value}}
		    <_cor225> when 'true' ->
			{'ok',Value}
		  end
	  %% Line 162
	  <'ID',Value,_X_S> when 'true' ->
	      let <_cor87> =
		  catch
		      %% Line 163
		      apply 'check_ID'/1
			  (Value)
	      in  %% Line 163
		  case _cor87 of
		    <{'EXIT',_cor226}> when 'true' ->
			{'error',{'type','illegal_ID',Value}}
		    <{'error',_cor227}> when 'true' ->
			{'error',{'illegal_ID',Value}}
		    <_cor228> when 'true' ->
			{'ok',Value}
		  end
	  %% Line 164
	  <'IDREF',Value,_X_S> when 'true' ->
	      let <_cor89> =
		  catch
		      %% Line 165
		      apply 'check_IDREF'/1
			  (Value)
	      in  %% Line 165
		  case _cor89 of
		    <{'EXIT',_cor229}> when 'true' ->
			{'error',{'type','illegal_IDREF',Value}}
		    <{'error',_cor230}> when 'true' ->
			{'error',{'illegal_IDREF',Value}}
		    <_cor231> when 'true' ->
			{'ok',Value}
		  end
	  %% Line 166
	  <'IDREFS',Value,_X_S> when 'true' ->
	      let <_cor91> =
		  catch
		      %% Line 167
		      apply 'check_IDREFS'/1
			  (Value)
	      in  %% Line 167
		  case _cor91 of
		    <{'EXIT',_cor232}> when 'true' ->
			{'error',{'type','illegal_IDREFS',Value}}
		    <{'error',_cor233}> when 'true' ->
			{'error',{'illegal_IDREFS',Value}}
		    <_cor234> when 'true' ->
			{'ok',Value}
		  end
	  %% Line 168
	  <'ENTITY',Value,_X_S> when 'true' ->
	      let <_cor93> =
		  catch
		      %% Line 169
		      apply 'check_ENTITY'/1
			  (Value)
	      in  %% Line 169
		  case _cor93 of
		    <{'EXIT',_cor235}> when 'true' ->
			{'error',{'type','illegal_ENTITY',Value}}
		    <{'error',_cor236}> when 'true' ->
			{'error',{'illegal_ENTITY',Value}}
		    <_cor237> when 'true' ->
			{'ok',Value}
		  end
	  %% Line 170
	  <'ENTITIES',Value,_X_S> when 'true' ->
	      let <_cor95> =
		  catch
		      %% Line 171
		      apply 'check_ENTITIES'/1
			  (Value)
	      in  %% Line 171
		  case _cor95 of
		    <{'EXIT',_cor238}> when 'true' ->
			{'error',{'type','illegal_ENTITIES',Value}}
		    <{'error',_cor239}> when 'true' ->
			{'error',{'illegal_ENTITIES',Value}}
		    <_cor240> when 'true' ->
			{'ok',Value}
		  end
	  %% Line 172
	  <'nonPositiveInteger',Value,_X_S> when 'true' ->
	      let <_cor97> =
		  catch
		      %% Line 173
		      apply 'check_nonPositiveInteger'/1
			  (Value)
	      in  %% Line 173
		  case _cor97 of
		    <{'EXIT',_cor241}> when 'true' ->
			{'error',{'type',%% Line 174
					 'illegal_nonPositiveInteger',Value}}
		    <{'error',_cor242}> when 'true' ->
			{'error',{%% Line 174
				  'illegal_nonPositiveInteger',Value}}
		    <_cor243> when 'true' ->
			{'ok',Value}
		  end
	  %% Line 175
	  <'negativeInteger',Value,_X_S> when 'true' ->
	      let <_cor99> =
		  catch
		      %% Line 176
		      apply 'check_negativeInteger'/1
			  (Value)
	      in  %% Line 176
		  case _cor99 of
		    <{'EXIT',_cor244}> when 'true' ->
			{'error',{'type',%% Line 177
					 'illegal_negativeInteger',Value}}
		    <{'error',_cor245}> when 'true' ->
			{'error',{%% Line 177
				  'illegal_negativeInteger',Value}}
		    <_cor246> when 'true' ->
			{'ok',Value}
		  end
	  %% Line 178
	  <'long',Value,_X_S> when 'true' ->
	      let <_cor101> =
		  catch
		      %% Line 179
		      apply 'check_long'/1
			  (Value)
	      in  %% Line 179
		  case _cor101 of
		    <{'EXIT',_cor247}> when 'true' ->
			{'error',{'type','illegal_long',Value}}
		    <{'error',_cor248}> when 'true' ->
			{'error',{'illegal_long',Value}}
		    <_cor249> when 'true' ->
			{'ok',Value}
		  end
	  %% Line 180
	  <'int',Value,_X_S> when 'true' ->
	      let <_cor103> =
		  catch
		      %% Line 181
		      apply 'check_int'/1
			  (Value)
	      in  %% Line 181
		  case _cor103 of
		    <{'EXIT',_cor250}> when 'true' ->
			{'error',{'type','illegal_int',Value}}
		    <{'error',_cor251}> when 'true' ->
			{'error',{'illegal_int',Value}}
		    <_cor252> when 'true' ->
			{'ok',Value}
		  end
	  %% Line 182
	  <'short',Value,_X_S> when 'true' ->
	      let <_cor105> =
		  catch
		      %% Line 183
		      apply 'check_short'/1
			  (Value)
	      in  %% Line 183
		  case _cor105 of
		    <{'EXIT',_cor253}> when 'true' ->
			{'error',{'type','illegal_short',Value}}
		    <{'error',_cor254}> when 'true' ->
			{'error',{'illegal_short',Value}}
		    <_cor255> when 'true' ->
			{'ok',Value}
		  end
	  %% Line 184
	  <'byte',Value,_X_S> when 'true' ->
	      let <_cor107> =
		  catch
		      %% Line 185
		      apply 'check_byte'/1
			  (Value)
	      in  %% Line 185
		  case _cor107 of
		    <{'EXIT',_cor256}> when 'true' ->
			{'error',{'type','illegal_byte',Value}}
		    <{'error',_cor257}> when 'true' ->
			{'error',{'illegal_byte',Value}}
		    <_cor258> when 'true' ->
			{'ok',Value}
		  end
	  %% Line 186
	  <'nonNegativeInteger',Value,_X_S> when 'true' ->
	      let <_cor109> =
		  catch
		      %% Line 187
		      apply 'check_nonNegativeInteger'/1
			  (Value)
	      in  %% Line 187
		  case _cor109 of
		    <{'EXIT',_cor259}> when 'true' ->
			{'error',{'type',%% Line 188
					 'illegal_nonNegativeInteger',Value}}
		    <{'error',_cor260}> when 'true' ->
			{'error',{%% Line 188
				  'illegal_nonNegativeInteger',Value}}
		    <_cor261> when 'true' ->
			{'ok',Value}
		  end
	  %% Line 189
	  <'unsignedLong',Value,_X_S> when 'true' ->
	      let <_cor111> =
		  catch
		      %% Line 190
		      apply 'check_unsignedLong'/1
			  (Value)
	      in  %% Line 190
		  case _cor111 of
		    <{'EXIT',_cor262}> when 'true' ->
			{'error',{'type','illegal_unsignedLong',Value}}
		    <{'error',_cor263}> when 'true' ->
			{'error',{'illegal_unsignedLong',Value}}
		    <_cor264> when 'true' ->
			{'ok',Value}
		  end
	  %% Line 191
	  <'unsignedInt',Value,_X_S> when 'true' ->
	      let <_cor113> =
		  catch
		      %% Line 192
		      apply 'check_unsignedInt'/1
			  (Value)
	      in  %% Line 192
		  case _cor113 of
		    <{'EXIT',_cor265}> when 'true' ->
			{'error',{'type','illegal_unsignedInt',Value}}
		    <{'error',_cor266}> when 'true' ->
			{'error',{'illegal_unsignedInt',Value}}
		    <_cor267> when 'true' ->
			{'ok',Value}
		  end
	  %% Line 193
	  <'unsignedShort',Value,_X_S> when 'true' ->
	      let <_cor115> =
		  catch
		      %% Line 194
		      apply 'check_unsignedShort'/1
			  (Value)
	      in  %% Line 194
		  case _cor115 of
		    <{'EXIT',_cor268}> when 'true' ->
			{'error',{'type','illegal_unsignedShort',Value}}
		    <{'error',_cor269}> when 'true' ->
			{'error',{'illegal_unsignedShort',Value}}
		    <_cor270> when 'true' ->
			{'ok',Value}
		  end
	  %% Line 195
	  <'unsignedByte',Value,_X_S> when 'true' ->
	      let <_cor117> =
		  catch
		      %% Line 196
		      apply 'check_unsignedByte'/1
			  (Value)
	      in  %% Line 196
		  case _cor117 of
		    <{'EXIT',_cor271}> when 'true' ->
			{'error',{'type','illegal_unsignedByte',Value}}
		    <{'error',_cor272}> when 'true' ->
			{'error',{'illegal_unsignedByte',Value}}
		    <_cor273> when 'true' ->
			{'ok',Value}
		  end
	  %% Line 197
	  <'positiveInteger',Value,_X_S> when 'true' ->
	      let <_cor119> =
		  catch
		      %% Line 198
		      apply 'check_positiveInteger'/1
			  (Value)
	      in  %% Line 198
		  case _cor119 of
		    <{'EXIT',_cor274}> when 'true' ->
			{'error',{'type','illegal_positiveInteger',Value}}
		    <{'error',_cor275}> when 'true' ->
			{'error',{'illegal_positiveInteger',Value}}
		    <_cor276> when 'true' ->
			{'ok',Value}
		  end
	  %% Line 199
	  <Unknown,Value,_X_S> when 'true' ->
	      %% Line 200
	      {'error',{'unknown_type',Unknown,Value}}
	end
'check_decimal'/1 =
    %% Line 202
    fun (_cor0) ->
	%% Line 203
	case call 'string':'tokens'
		 (_cor0, [46]) of
	  %% Line 204
	  <L>
	      when let <_cor2> =
		    try
			let <_cor1> =
			    call 'erlang':'length'
				(L)
			in  call 'erlang':'=='
				(_cor1, 1)
		    of <Try> ->
			Try
		    catch <T,R> ->
			'false'
		in  let <_cor4> =
			try
			    let <_cor3> =
				call 'erlang':'length'
				    (L)
			    in  call 'erlang':'=='
				    (_cor3, 2)
			of <Try> ->
			    Try
			catch <T,R> ->
			    'false'
		    in  call 'erlang':'or'
			    (_cor2, _cor4) ->
	      let <_cor10> =
		  %% Line 205
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor7) ->
				case _cor7 of
				  <[X|_cor6]> when 'true' ->
				      let <_cor8> =
					  ( call 'erlang':'list_to_integer'
						(X)
					    -| ['result_not_wanted'] )
				      in  let <_cor9> =
					      apply 'lc$^0'/1
						  (_cor6)
					  in  ( [_cor8|_cor9]
						-| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor7> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor7})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (L)
		    -| ['list_comprehension'] )
	      in  %% Line 206
		  {'ok',_cor0}
	  %% Line 207
	  <_cor14> when 'true' ->
	      %% Line 208
	      {'error',{'value_not_decimal',_cor0}}
	end
'check_float'/1 =
    %% Line 219
    fun (_cor0) ->
	case _cor0 of
	  <V = [45|[73|[78|[70]]]]> when 'true' ->
	      %% Line 220
	      {'ok',V}
	  %% Line 221
	  <V = [73|[78|[70]]]> when 'true' ->
	      %% Line 222
	      {'ok',V}
	  %% Line 223
	  <V = [78|[97|[78]]]> when 'true' ->
	      %% Line 224
	      {'ok',V}
	  %% Line 225
	  <Value> when 'true' ->
	      do  %% Line 229
		  case call 'string':'tokens'
			   (Value, [101|[69]]) of
		    %% Line 230
		    <[Mantissa|[Exponent|[]]]> when 'true' ->
			%% Line 231
			case apply 'check_decimal'/1
				 (Mantissa) of
			  <{'ok',_cor5}> when 'true' ->
			      %% Line 232
			      case apply 'check_integer'/1
				       (Exponent) of
				<{'ok',_cor7}> when 'true' ->
				    'ok'
				( <_cor2> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor2})
				  -| ['compiler_generated'] )
			      end
			  ( <_cor1> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor1})
			    -| ['compiler_generated'] )
			end
		    %% Line 233
		    <[Mantissa|[]]> when 'true' ->
			%% Line 234
			apply 'check_decimal'/1
			    (Mantissa)
		    ( <_cor3> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor3})
		      -| ['compiler_generated'] )
		  end
		  %% Line 236
		  {'ok',Value}
	end
'check_double'/1 =
    %% Line 245
    fun (_cor0) ->
	%% Line 246
	apply 'check_float'/1
	    (_cor0)
'check_duration'/1 =
    %% Line 253
    fun (_cor0) ->
	case _cor0 of
	  <[45|Value]> when 'true' ->
	      %% Line 254
	      apply 'check_duration'/1
		  (Value)
	  %% Line 255
	  <[80|Value]> when 'true' ->
	      let <_cor3> =
		  %% Line 256
		  ( fun (_cor1) ->
			case _cor1 of
			  <84> when 'true' ->
			      'false'
			  <_cor8> when 'true' ->
			      'true'
			end
		    -| [{'id',{0,0,'-check_duration/1-fun-0-'}}] )
	      in  %% Line 256
		  case call 'lists':'splitwith'
			   (_cor3, Value) of
		    <{Date,Time}> when 'true' ->
			%% Line 257
			case apply 'check_duration_date'/2
				 (Date, [[89]|[[77]|[[68]]]]) of
			  <{'ok',_cor9}> when 'true' ->
			      let <_cor10> =
				  %% Line 258
				  apply 'check_duration_time'/2
				      (Time, [[84]|[[72]|[[77]|[[83]]]]])
			      in  %% Line 258
				  case _cor10 of
				    <{'ok',_cor11}> when 'true' ->
					( _cor10
					  -| ['compiler_generated'] )
				    ( <_cor6> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor6})
				      -| ['compiler_generated'] )
				  end
			  ( <_cor5> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor5})
			    -| ['compiler_generated'] )
			end
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor4})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7})
		  -| [{'function_name',{'check_duration',1}}] )
	    -| ['compiler_generated'] )
	end
'check_duration_date'/2 =
    %% Line 260
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],_cor7> when 'true' ->
	      %% Line 261
	      {'ok',[]}
	  %% Line 262
	  <Date,[H|T]> when 'true' ->
	      %% Line 263
	      case call 'string':'tokens'
		       (Date, H) of
		%% Line 264
		<[_cor8|[]]>
		    when call 'erlang':'=:='
			  (_cor8,
			   Date) ->
		    %% Line 265
		    apply 'check_duration_date'/2
			(Date, T)
		%% Line 266
		<[DateItem|[]]> when 'true' ->
		    let <_cor9> =
			%% Line 267
			apply 'check_positive_integer'/1
			    (DateItem)
		    in  %% Line 267
			case _cor9 of
			  <{'ok',_cor10}> when 'true' ->
			      ( _cor9
				-| ['compiler_generated'] )
			  ( <_cor2> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor2})
			    -| ['compiler_generated'] )
			end
		%% Line 268
		<[DateItem|[Rest|[]]]> when 'true' ->
		    %% Line 269
		    case apply 'check_positive_integer'/1
			     (DateItem) of
		      <{'ok',_cor11}> when 'true' ->
			  %% Line 270
			  apply 'check_duration_date'/2
			      (Rest, T)
		      ( <_cor3> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor3})
			-| ['compiler_generated'] )
		    end
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'check_duration_date',2}}] )
	    -| ['compiler_generated'] )
	end
'check_duration_time'/2 =
    %% Line 275
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],[_X_H|_X_T]> when 'true' ->
	      %% Line 276
	      {'ok',[]}
	  %% Line 277
	  <Time,[S|[]]> when 'true' ->
	      %% Line 278
	      case call 'string':'tokens'
		       (Time, S) of
		<[Sec|[]]> when 'true' ->
		    let <_cor11> =
			%% Line 279
			apply 'check_decimal'/1
			    (Sec)
		    in  %% Line 279
			case _cor11 of
			  <{'ok',_cor12}> when 'true' ->
			      ( _cor11
				-| ['compiler_generated'] )
			  ( <_cor3> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor3})
			    -| ['compiler_generated'] )
			end
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 280
	  <[84|Time],TTokens> when 'true' ->
	      %% Line 281
	      case Time of
		<[_X_H|_cor13]> when 'true' ->
		    let <_cor5> =
			%% Line 282
			call 'erlang':'tl'
			    (TTokens)
		    in  %% Line 282
			apply 'check_duration_time'/2
			    (Time, _cor5)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 283
	  <Time,[H|T]> when 'true' ->
	      %% Line 284
	      case call 'string':'tokens'
		       (Time, H) of
		%% Line 285
		<[_cor14|[]]>
		    when call 'erlang':'=:='
			  (_cor14,
			   Time) ->
		    %% Line 286
		    apply 'check_duration_time'/2
			(Time, T)
		%% Line 287
		<[TimeItem|[]]> when 'true' ->
		    let <_cor15> =
			%% Line 288
			apply 'check_positive_integer'/1
			    (TimeItem)
		    in  %% Line 288
			case _cor15 of
			  <{'ok',_cor16}> when 'true' ->
			      ( _cor15
				-| ['compiler_generated'] )
			  ( <_cor6> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor6})
			    -| ['compiler_generated'] )
			end
		%% Line 289
		<[TimeItem|[Rest|[]]]> when 'true' ->
		    %% Line 290
		    case apply 'check_positive_integer'/1
			     (TimeItem) of
		      <{'ok',_cor17}> when 'true' ->
			  %% Line 291
			  apply 'check_duration_time'/2
			      (Rest, T)
		      ( <_cor7> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor7})
			-| ['compiler_generated'] )
		    end
		( <_cor8> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor8})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9})
		  -| [{'function_name',{'check_duration_time',2}}] )
	    -| ['compiler_generated'] )
	end
'check_positive_integer'/1 =
    %% Line 294
    fun (_cor0) ->
	let <_cor1> =
	    catch
		%% Line 295
		call 'erlang':'list_to_integer'
		    (_cor0)
	in  %% Line 295
	    case _cor1 of
	      %% Line 296
	      <Int>
		  when let <_cor2> =
			call 'erlang':'is_integer'
			    (_cor1)
		    in  let <_cor3> =
			    call 'erlang':'>='
				(_cor1, 0)
			in  call 'erlang':'and'
				(_cor2, _cor3) ->
		  %% Line 297
		  {'ok',Int}
	      %% Line 298
	      <_cor6> when 'true' ->
		  %% Line 299
		  {'error',{'value_not_integer',_cor0}}
	    end
'check_integer'/1 =
    %% Line 304
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 305
	    call 'erlang':'list_to_integer'
		(_cor0)
	in  %% Line 305
	    {'ok',_cor1}
'check_nonPositiveInteger'/1 =
    %% Line 307
    fun (_cor0) ->
	%% Line 308
	apply 'check_constr_int'/4
	    (_cor0, 'undefined', 0, 'illegal_nonPositiveInteger')
'check_negativeInteger'/1 =
    %% Line 310
    fun (_cor0) ->
	%% Line 311
	apply 'check_constr_int'/4
	    (_cor0, 'undefined', -1, 'illegal_negativeInteger')
'check_long'/1 =
    %% Line 313
    fun (_cor0) ->
	%% Line 314
	apply 'check_constr_int'/4
	    (_cor0, -9223372036854775808, %% Line 315
					  9223372036854775807, %% Line 315
							       'illegal_long')
'check_int'/1 =
    %% Line 317
    fun (_cor0) ->
	%% Line 318
	apply 'check_constr_int'/4
	    (_cor0, -2147483648, 2147483647, 'illegal_int')
'check_short'/1 =
    %% Line 320
    fun (_cor0) ->
	%% Line 321
	apply 'check_constr_int'/4
	    (_cor0, -32768, 32767, 'illegal_short')
'check_byte'/1 =
    %% Line 323
    fun (_cor0) ->
	%% Line 324
	apply 'check_constr_int'/4
	    (_cor0, -128, 127, 'illegal_byte')
'check_nonNegativeInteger'/1 =
    %% Line 326
    fun (_cor0) ->
	%% Line 327
	apply 'check_constr_int'/4
	    (_cor0, 0, 'undefined', 'illegal_nonNegativeInteger')
'check_unsignedLong'/1 =
    %% Line 329
    fun (_cor0) ->
	%% Line 330
	apply 'check_constr_int'/4
	    (_cor0, 0, 18446744073709551615, 'illegal_unsignedLong')
'check_unsignedInt'/1 =
    %% Line 332
    fun (_cor0) ->
	%% Line 333
	apply 'check_constr_int'/4
	    (_cor0, 0, 4294967295, 'illegal_unsignedInt')
'check_unsignedShort'/1 =
    %% Line 335
    fun (_cor0) ->
	%% Line 336
	apply 'check_constr_int'/4
	    (_cor0, 0, 65535, 'illegal_unsignedShort')
'check_unsignedByte'/1 =
    %% Line 338
    fun (_cor0) ->
	%% Line 339
	apply 'check_constr_int'/4
	    (_cor0, 0, 255, 'illegal_unsignedByte')
'check_positiveInteger'/1 =
    %% Line 341
    fun (_cor0) ->
	%% Line 342
	apply 'check_constr_int'/4
	    (_cor0, 1, 'undefined', 'illegal_positiveInteger')
'check_constr_int'/4 =
    %% Line 344
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Value,'undefined',Max,ErrMsg> when 'true' ->
	      %% Line 345
	      case apply 'check_integer'/1
		       (Value) of
		%% Line 346
		<{'ok',Int}>
		    when call 'erlang':'=<'
			  (Int,
			   Max) ->
		    %% Line 347
		    {'ok',Int}
		%% Line 348
		<_cor12> when 'true' ->
		    %% Line 349
		    {'error',{ErrMsg}}
	      end
	  %% Line 351
	  <Value,Min,Max,ErrMsg> when 'true' ->
	      %% Line 352
	      case apply 'check_integer'/1
		       (Value) of
		%% Line 353
		<{'ok',Int}>
		    when let <_cor5> =
			  call 'erlang':'>='
			      (Int, Min)
		      in  let <_cor6> =
			      call 'erlang':'=<'
				  (Int, Max)
			  in  call 'erlang':'and'
				  (_cor5, _cor6) ->
		    %% Line 354
		    {'ok',Int}
		%% Line 355
		<_cor13> when 'true' ->
		    %% Line 356
		    {'error',{ErrMsg}}
	      end
	end
'check_dateTime'/1 =
    %% Line 361
    fun (_cor0) ->
	case _cor0 of
	  <[45|DateTime]> when 'true' ->
	      %% Line 362
	      apply 'check_dateTime'/1
		  (DateTime)
	  %% Line 363
	  <[43|_X_DateTime]> when 'true' ->
	      %% Line 364
	      {'error',{'invalid_dateTime','plus_sign'}}
	  %% Line 365
	  <DateTime> when 'true' ->
	      %% Line 366
	      case call 'string':'tokens'
		       (DateTime, [84]) of
		<[Date|[Time|[]]]> when 'true' ->
		    %% Line 367
		    case call 'string':'tokens'
			     (Date, [45]) of
		      <[Y|[M|[D|[]]]]> when 'true' ->
			  do  %% Line 368
			      apply 'check_year'/1
				  (Y)
			      %% Line 369
			      case apply 'check_positive_integer'/1
				       (M) of
				<{'ok',_cor6}> when 'true' ->
				    %% Line 370
				    case apply 'check_positive_integer'/1
					     (D) of
				      <{'ok',_cor7}> when 'true' ->
					  %% Line 371
					  apply 'check_time'/1
					      (Time)
				      ( <_cor4> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_cor4})
					-| ['compiler_generated'] )
				    end
				( <_cor3> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor3})
				  -| ['compiler_generated'] )
			      end
		      ( <_cor2> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor2})
			-| ['compiler_generated'] )
		    end
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	end
'check_year'/1 =
    %% Line 373
    fun (_cor0) ->
	case _cor0 of
	  <Y>
	      when try
		    let <_cor1> =
			call 'erlang':'length'
			    (_cor0)
		    in  call 'erlang':'>'
			    (_cor1, 4)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 374
	      case call 'string':'strip'
		       (Y, 'left', 48) of
		<_cor6>
		    when call 'erlang':'=:='
			  (_cor6,
			   Y) ->
		    let <_cor3> =
			%% Line 375
			call 'erlang':'list_to_integer'
			    (Y)
		    in  %% Line 375
			{'ok',_cor3}
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 376
	  <Y> when 'true' ->
	      %% Line 377
	      case call 'erlang':'list_to_integer'
		       (Y) of
		%% Line 378
		<Year>
		    when call 'erlang':'=/='
			  (Year,
			   0) ->
		    %% Line 379
		    {'ok',Year}
		%% Line 380
		<_cor7> when 'true' ->
		    %% Line 381
		    {'error',{'invalid_year',Y}}
	      end
	end
'check_month'/1 =
    %% Line 384
    fun (_cor0) ->
	%% Line 385
	case apply 'check_positive_integer'/1
		 (_cor0) of
	  %% Line 386
	  <{'ok',Int}>
	      when let <_cor1> =
		    call 'erlang':'>='
			(Int, 1)
		in  let <_cor2> =
			call 'erlang':'=<'
			    (Int, 12)
		    in  call 'erlang':'and'
			    (_cor1, _cor2) ->
	      %% Line 387
	      {'ok',Int}
	  %% Line 388
	  <_cor5> when 'true' ->
	      %% Line 389
	      {'error',{'invalid_month',_cor0}}
	end
'check_day'/1 =
    %% Line 391
    fun (_cor0) ->
	%% Line 392
	case apply 'check_positive_integer'/1
		 (_cor0) of
	  %% Line 393
	  <{'ok',Int}>
	      when let <_cor1> =
		    call 'erlang':'>='
			(Int, 1)
		in  let <_cor2> =
			call 'erlang':'=<'
			    (Int, 31)
		    in  call 'erlang':'and'
			    (_cor1, _cor2) ->
	      %% Line 394
	      {'ok',Int}
	  %% Line 395
	  <_cor5> when 'true' ->
	      %% Line 396
	      {'error',{'invalid_day',_cor0}}
	end
'check_time'/1 =
    %% Line 400
    fun (_cor0) ->
	let <HMS,TZ> =
	    %% Line 403
	    case call 'lists':'split'
		     (8, _cor0) of
	      %% Line 404
	      <{T,[46|SecFractionsTZ]}> when 'true' ->
		  let <OnlyDigits> =
		      %% Line 405
		      ( fun (_cor3) ->
			    case _cor3 of
			      <X>
				  when let <_cor1> =
					call 'erlang':'>='
					    (_cor3, 48)
				    in  let <_cor2> =
					    call 'erlang':'=<'
						(_cor3, 57)
					in  call 'erlang':'and'
						(_cor1, _cor2) ->
				  'true'
			      <_cor17> when 'true' ->
				  'false'
			    end
			-| [{'id',{0,0,'-check_time/1-fun-0-'}}] )
		  in  %% Line 406
		      case call 'lists':'splitwith'
			       (OnlyDigits, SecFractionsTZ) of
			<{SecFrac,TZone}> when 'true' ->
			    %% Line 407
			    case apply 'check_positive_integer'/1
				     (SecFrac) of
			      <{'ok',_cor18}> when 'true' ->
				  %% Line 408
				  <T,TZone>
			      ( <_cor7> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor7})
				-| ['compiler_generated'] )
			    end
			( <_cor6> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor6})
			  -| ['compiler_generated'] )
		      end
	      %% Line 409
	      <{T,TZone}> when 'true' ->
		  %% Line 410
		  <T,TZone>
	      ( <_cor8> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor8})
		-| ['compiler_generated'] )
	    end
	in  %% Line 412
	    case call 'string':'tokens'
		     (HMS, [58]) of
	      <[H|[M|[S|[]]]]> when 'true' ->
		  %% Line 413
		  case apply 'check_hour'/1
			   (H) of
		    <{'ok',_cor19}> when 'true' ->
			%% Line 414
			case apply 'check_minute'/1
				 (M) of
			  <{'ok',_cor20}> when 'true' ->
			      %% Line 415
			      case apply 'check_second'/1
				       (S) of
				<{'ok',_cor21}> when 'true' ->
				    %% Line 416
				    case TZ of
				      %% Line 417
				      <[]> when 'true' ->
					  %% Line 418
					  {'ok',_cor0}
				      %% Line 419
				      <_cor22> when 'true' ->
					  %% Line 420
					  apply 'check_timezone'/1
					      (TZ)
				    end
				( <_cor14> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor14})
				  -| ['compiler_generated'] )
			      end
			  ( <_cor13> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor13})
			    -| ['compiler_generated'] )
			end
		    ( <_cor12> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor12})
		      -| ['compiler_generated'] )
		  end
	      ( <_cor11> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor11})
		-| ['compiler_generated'] )
	    end
'check_hour'/1 =
    %% Line 423
    fun (_cor0) ->
	%% Line 424
	case apply 'check_positive_integer'/1
		 (_cor0) of
	  %% Line 425
	  <{'ok',H}>
	      when let <_cor1> =
		    call 'erlang':'>='
			(H, 0)
		in  let <_cor2> =
			call 'erlang':'=<'
			    (H, 24)
		    in  call 'erlang':'and'
			    (_cor1, _cor2) ->
	      %% Line 426
	      {'ok',H}
	  %% Line 427
	  <_cor5> when 'true' ->
	      %% Line 428
	      {'error',{'invalid_hour',_cor0}}
	end
'check_minute'/1 =
    %% Line 430
    fun (_cor0) ->
	%% Line 431
	case apply 'check_positive_integer'/1
		 (_cor0) of
	  %% Line 432
	  <{'ok',H}>
	      when let <_cor1> =
		    call 'erlang':'>='
			(H, 0)
		in  let <_cor2> =
			call 'erlang':'=<'
			    (H, 60)
		    in  call 'erlang':'and'
			    (_cor1, _cor2) ->
	      %% Line 433
	      {'ok',H}
	  %% Line 434
	  <_cor5> when 'true' ->
	      %% Line 435
	      {'error',{'invalid_minute',_cor0}}
	end
'check_second'/1 =
    %% Line 437
    fun (_cor0) ->
	%% Line 438
	case apply 'check_positive_integer'/1
		 (_cor0) of
	  %% Line 439
	  <{'ok',H}>
	      when let <_cor1> =
		    call 'erlang':'>='
			(H, 0)
		in  let <_cor2> =
			call 'erlang':'=<'
			    (H, 60)
		    in  call 'erlang':'and'
			    (_cor1, _cor2) ->
	      %% Line 440
	      {'ok',H}
	  %% Line 441
	  <_cor5> when 'true' ->
	      %% Line 442
	      {'error',{'invalid_second',_cor0}}
	end
'check_timezone'/1 =
    %% Line 445
    fun (_cor0) ->
	case _cor0 of
	  <[90]> when 'true' ->
	      %% Line 446
	      {'ok',[90]}
	  %% Line 447
	  <TZ> when 'true' ->
	      %% Line 448
	      case call 'string':'tokens'
		       (TZ, [58]) of
		<[H|[M|[]]]> when 'true' ->
		    %% Line 449
		    case apply 'check_integer'/1
			     (H) of
		      %% Line 450
		      <{'ok',H2}>
			  when let <_cor3> =
				call 'erlang':'>='
				    (H2, -13)
			    in  let <_cor4> =
				    call 'erlang':'=<'
					(H2, 13)
				in  call 'erlang':'and'
					(_cor3, _cor4) ->
			  %% Line 451
			  case apply 'check_positive_integer'/1
				   (M) of
			    %% Line 452
			    <{'ok',M2}>
				when let <_cor5> =
				      call 'erlang':'>='
					  (M2, 0)
				  in  let <_cor6> =
					  call 'erlang':'=<'
					      (M2, 59)
				      in  call 'erlang':'and'
					      (_cor5, _cor6) ->
				%% Line 453
				{'ok',{H2,M2}}
			    %% Line 454
			    <_cor14> when 'true' ->
				%% Line 455
				{'error',{'invalid_timezone',TZ,M}}
			  end
		      %% Line 457
		      <{'ok',H2}>
			  when let <_cor8> =
				call 'erlang':'=='
				    (H2, 14)
			    in  let <_cor10> =
				    call 'erlang':'=='
					(H2, -14)
				in  call 'erlang':'or'
					(_cor8, _cor10) ->
			  %% Line 458
			  case apply 'check_positive_integer'/1
				   (M) of
			    %% Line 459
			    <{'ok',0}> when 'true' ->
				%% Line 460
				{'ok',{H2,0}}
			    %% Line 461
			    <_cor15> when 'true' ->
				%% Line 462
				{'error',{'invalid_timezone',TZ}}
			  end
		      %% Line 464
		      <_cor16> when 'true' ->
			  %% Line 465
			  {'error',{'invalid_timezone',TZ}}
		    end
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	end
'check_date'/1 =
    %% Line 470
    fun (_cor0) ->
	case _cor0 of
	  <[45|Date]> when 'true' ->
	      %% Line 471
	      apply 'check_date'/1
		  (Date)
	  %% Line 472
	  <[43|_X_Date]> when 'true' ->
	      %% Line 473
	      {'error',{'invalid_date','plus_sign'}}
	  %% Line 474
	  <Date> when 'true' ->
	      let <Year,Month,Day> =
		  %% Line 476
		  case call 'string':'tokens'
			   (Date, [45|[43|[90]]]) of
		    %% Line 477
		    <[Y|[M|[D|[TZ|[]]]]]> when 'true' ->
			%% Line 478
			case apply 'check_timezone'/1
				 (TZ) of
			  <{'ok',_cor9}> when 'true' ->
			      %% Line 479
			      <Y,M,D>
			  ( <_cor1> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor1})
			    -| ['compiler_generated'] )
			end
		    %% Line 480
		    <[Y|[M|[D|[]]]]> when 'true' ->
			%% Line 481
			<Y,M,D>
		    ( <_cor2> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor2})
		      -| ['compiler_generated'] )
		  end
	      in  %% Line 483
		  case apply 'check_year'/1
			   (Year) of
		    <{'ok',_cor10}> when 'true' ->
			%% Line 484
			case apply 'check_month'/1
				 (Month) of
			  <{'ok',_cor11}> when 'true' ->
			      let <_cor12> =
				  %% Line 485
				  apply 'check_day'/1
				      (Day)
			      in  %% Line 485
				  case _cor12 of
				    <{'ok',_cor13}> when 'true' ->
					( _cor12
					  -| ['compiler_generated'] )
				    ( <_cor7> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor7})
				      -| ['compiler_generated'] )
				  end
			  ( <_cor6> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor6})
			    -| ['compiler_generated'] )
			end
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor5})
		      -| ['compiler_generated'] )
		  end
	end
'check_gYearMonth'/1 =
    %% Line 488
    fun (_cor0) ->
	case _cor0 of
	  <[45|Value]> when 'true' ->
	      %% Line 489
	      apply 'check_gYearMonth'/1
		  (Value)
	  %% Line 490
	  <[43|_X_Value]> when 'true' ->
	      %% Line 491
	      {'error',{'invalid_gYearMonth','plus_sign'}}
	  %% Line 492
	  <Value> when 'true' ->
	      let <Year,Month> =
		  %% Line 494
		  case call 'string':'tokens'
			   (Value, [45|[43|[90]]]) of
		    %% Line 495
		    <[Y|[M|[TZ|[]]]]> when 'true' ->
			%% Line 496
			case apply 'check_timezone'/1
				 (TZ) of
			  <{'ok',_cor8}> when 'true' ->
			      %% Line 497
			      <Y,M>
			  ( <_cor1> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor1})
			    -| ['compiler_generated'] )
			end
		    %% Line 498
		    <[Y|[M|[]]]> when 'true' ->
			%% Line 499
			<Y,M>
		    ( <_cor2> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor2})
		      -| ['compiler_generated'] )
		  end
	      in  %% Line 501
		  case apply 'check_year'/1
			   (Year) of
		    <{'ok',_cor9}> when 'true' ->
			let <_cor10> =
			    %% Line 502
			    apply 'check_month'/1
				(Month)
			in  %% Line 502
			    case _cor10 of
			      <{'ok',_cor11}> when 'true' ->
				  ( _cor10
				    -| ['compiler_generated'] )
			      ( <_cor6> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor6})
				-| ['compiler_generated'] )
			    end
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor5})
		      -| ['compiler_generated'] )
		  end
	end
'check_gYear'/1 =
    %% Line 505
    fun (_cor0) ->
	case _cor0 of
	  <[45|Value]> when 'true' ->
	      %% Line 506
	      apply 'check_gYear'/1
		  (Value)
	  %% Line 507
	  <[43|_X_Value]> when 'true' ->
	      %% Line 508
	      {'error',{'invalid_gYear','plus_sign'}}
	  %% Line 509
	  <Value> when 'true' ->
	      let <_cor3> =
		  %% Line 511
		  case call 'string':'tokens'
			   (Value, [45|[43|[90]]]) of
		    %% Line 512
		    <[Y|[TZ|[]]]> when 'true' ->
			%% Line 513
			case apply 'check_timezone'/1
				 (TZ) of
			  <{'ok',_cor7}> when 'true' ->
			      %% Line 514
			      Y
			  ( <_cor1> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor1})
			    -| ['compiler_generated'] )
			end
		    %% Line 515
		    <[Y|[]]> when 'true' ->
			%% Line 516
			Y
		    ( <_cor2> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor2})
		      -| ['compiler_generated'] )
		  end
	      in  let <_cor8> =
		      %% Line 518
		      apply 'check_year'/1
			  (_cor3)
		  in  %% Line 518
		      case _cor8 of
			<{'ok',_cor9}> when 'true' ->
			    ( _cor8
			      -| ['compiler_generated'] )
			( <_cor5> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor5})
			  -| ['compiler_generated'] )
		      end
	end
'check_gMonthDay'/1 =
    %% Line 521
    fun (_cor0) ->
	case _cor0 of
	  <[45|[45|Value]]> when 'true' ->
	      %% Line 522
	      case call 'lists':'split'
		       (2, Value) of
		<{M,[45|DTZ]}> when 'true' ->
		    %% Line 523
		    case apply 'check_month'/1
			     (M) of
		      <{'ok',_cor5}> when 'true' ->
			  let <_cor6> =
			      %% Line 524
			      apply 'check_gDay2'/1
				  (DTZ)
			  in  %% Line 524
			      case _cor6 of
				<{'ok',_cor7}> when 'true' ->
				    ( _cor6
				      -| ['compiler_generated'] )
				( <_cor3> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor3})
				  -| ['compiler_generated'] )
			      end
		      ( <_cor2> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor2})
			-| ['compiler_generated'] )
		    end
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'check_gMonthDay',1}}] )
	    -| ['compiler_generated'] )
	end
'check_gDay'/1 =
    %% Line 527
    fun (_cor0) ->
	case _cor0 of
	  <[45|[45|[45|Value]]]> when 'true' ->
	      %% Line 528
	      apply 'check_gDay2'/1
		  (Value)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'check_gDay',1}}] )
	    -| ['compiler_generated'] )
	end
'check_gDay2'/1 =
    %% Line 529
    fun (_cor0) ->
	%% Line 530
	case call 'lists':'split'
		 (2, _cor0) of
	  <{D,TZ}> when 'true' ->
	      %% Line 531
	      case apply 'check_day'/1
		       (D) of
		<{'ok',_cor6}> when 'true' ->
		    %% Line 532
		    case TZ of
		      %% Line 533
		      <[]> when 'true' ->
			  %% Line 534
			  {'ok',_cor0}
		      %% Line 535
		      <_cor7> when 'true' ->
			  let <_cor8> =
			      %% Line 536
			      apply 'check_timezone'/1
				  (TZ)
			  in  %% Line 536
			      case _cor8 of
				<{'ok',_cor9}> when 'true' ->
				    ( _cor8
				      -| ['compiler_generated'] )
				( <_cor3> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor3})
				  -| ['compiler_generated'] )
			      end
		    end
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'check_gMonth'/1 =
    %% Line 539
    fun (_cor0) ->
	case _cor0 of
	  <[45|[45|Value]]> when 'true' ->
	      %% Line 540
	      case call 'lists':'split'
		       (2, Value) of
		<{M,TZ}> when 'true' ->
		    %% Line 541
		    case apply 'check_month'/1
			     (M) of
		      <{'ok',_cor6}> when 'true' ->
			  %% Line 542
			  case TZ of
			    %% Line 543
			    <[]> when 'true' ->
				%% Line 544
				{'ok',Value}
			    %% Line 545
			    <_cor7> when 'true' ->
				let <_cor8> =
				    %% Line 546
				    apply 'check_timezone'/1
					(TZ)
				in  %% Line 546
				    case _cor8 of
				      <{'ok',_cor9}> when 'true' ->
					  ( _cor8
					    -| ['compiler_generated'] )
				      ( <_cor3> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_cor3})
					-| ['compiler_generated'] )
				    end
			  end
		      ( <_cor2> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor2})
			-| ['compiler_generated'] )
		    end
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5})
		  -| [{'function_name',{'check_gMonth',1}}] )
	    -| ['compiler_generated'] )
	end
'check_base64Binary'/1 =
    %% Line 549
    fun (_cor0) ->
	let <_cor2> =
	    catch
		let <_cor1> =
		    %% Line 550
		    call 'xmerl_b64Bin_scan':'scan'
			(_cor0)
		in  %% Line 550
		    call 'xmerl_b64Bin':'parse'
			(_cor1)
	in  %% Line 550
	    case _cor2 of
	      %% Line 551
	      <{'ok',_cor5}> when 'true' ->
		  %% Line 552
		  {'ok',_cor0}
	      %% Line 553
	      <Err = {'error',_cor6}> when 'true' ->
		  %% Line 554
		  Err
	      %% Line 555
	      <{'EXIT',{'error',Reason}}> when 'true' ->
		  %% Line 556
		  {'error',Reason}
	      %% Line 557
	      <{'EXIT',Reason}> when 'true' ->
		  %% Line 558
		  {'error',{'internal_error',Reason}}
	      ( <_cor3> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor3})
		-| ['compiler_generated'] )
	    end
'check_token'/1 =
    %% Line 564
    fun (_cor0) ->
	case _cor0 of
	  <V = [32|_cor2]> when 'true' ->
	      %% Line 565
	      {'error',{'invalid_token','leading_space',V}}
	  %% Line 566
	  <Value> when 'true' ->
	      %% Line 567
	      apply 'check_token'/2
		  (Value, Value)
	end
'check_token'/2 =
    %% Line 568
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],Value> when 'true' ->
	      %% Line 569
	      {'ok',Value}
	  %% Line 570
	  <[32],V> when 'true' ->
	      %% Line 571
	      {'error',{'invalid_token','trailing_space',V}}
	  %% Line 572
	  <[9|_X_T],V> when 'true' ->
	      %% Line 573
	      {'error',{'invalid_token','tab',V}}
	  %% Line 574
	  <[10|_X_T],V> when 'true' ->
	      %% Line 575
	      {'error',{'invalid_token','line_feed',V}}
	  %% Line 576
	  <[13|_X_T],V> when 'true' ->
	      %% Line 577
	      {'error',{'invalid_token','carriage_return',V}}
	  %% Line 578
	  <[32|[32|_X_T]],V> when 'true' ->
	      %% Line 579
	      {'error',{'invalid_token','double_space',V}}
	  %% Line 580
	  <[_X_H|T],V> when 'true' ->
	      %% Line 581
	      apply 'check_token'/2
		  (T, V)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'check_token',2}}] )
	    -| ['compiler_generated'] )
	end
'check_language'/1 =
    %% Line 584
    fun (_cor0) ->
	%% Line 585
	apply 'check_language'/2
	    (_cor0, 0)
'check_language'/2 =
    %% Line 586
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[H|T],N>
	      when let <_cor2> =
		    call 'erlang':'>='
			(H, 65)
		in  let <_cor3> =
			call 'erlang':'=<'
			    (H, 90)
		    in  call 'erlang':'and'
			    (_cor2, _cor3) ->
	      let <_cor4> =
		  %% Line 587
		  call 'erlang':'+'
		      (N, 1)
	      in  %% Line 587
		  apply 'check_language'/2
		      (T, _cor4)
	  %% Line 588
	  <[H|T],N>
	      when let <_cor5> =
		    call 'erlang':'>='
			(H, 97)
		in  let <_cor6> =
			call 'erlang':'=<'
			    (H, 122)
		    in  call 'erlang':'and'
			    (_cor5, _cor6) ->
	      let <_cor7> =
		  %% Line 589
		  call 'erlang':'+'
		      (N, 1)
	      in  %% Line 589
		  apply 'check_language'/2
		      (T, _cor7)
	  %% Line 590
	  <[45|T],N>
	      when let <_cor8> =
		    call 'erlang':'>='
			(N, 1)
		in  let <_cor9> =
			call 'erlang':'=<'
			    (N, 8)
		    in  call 'erlang':'and'
			    (_cor8, _cor9) ->
	      %% Line 591
	      apply 'check_language2'/2
		  (T, 0)
	  %% Line 592
	  <[],N>
	      when let <_cor10> =
		    call 'erlang':'>='
			(N, 1)
		in  let <_cor11> =
			call 'erlang':'=<'
			    (N, 8)
		    in  call 'erlang':'and'
			    (_cor10, _cor11) ->
	      %% Line 593
	      {'ok',[]}
	  ( <_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12})
		  -| [{'function_name',{'check_language',2}}] )
	    -| ['compiler_generated'] )
	end
'check_language2'/2 =
    %% Line 594
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[H|T],N>
	      when let <_cor2> =
		    call 'erlang':'>='
			(H, 65)
		in  let <_cor3> =
			call 'erlang':'=<'
			    (H, 90)
		    in  call 'erlang':'and'
			    (_cor2, _cor3) ->
	      let <_cor4> =
		  %% Line 595
		  call 'erlang':'+'
		      (N, 1)
	      in  %% Line 595
		  apply 'check_language2'/2
		      (T, _cor4)
	  %% Line 596
	  <[H|T],N>
	      when let <_cor5> =
		    call 'erlang':'>='
			(H, 97)
		in  let <_cor6> =
			call 'erlang':'=<'
			    (H, 122)
		    in  call 'erlang':'and'
			    (_cor5, _cor6) ->
	      let <_cor7> =
		  %% Line 597
		  call 'erlang':'+'
		      (N, 1)
	      in  %% Line 597
		  apply 'check_language2'/2
		      (T, _cor7)
	  %% Line 598
	  <[H|T],N>
	      when let <_cor8> =
		    call 'erlang':'>='
			(H, 48)
		in  let <_cor9> =
			call 'erlang':'=<'
			    (H, 57)
		    in  call 'erlang':'and'
			    (_cor8, _cor9) ->
	      let <_cor10> =
		  %% Line 599
		  call 'erlang':'+'
		      (N, 1)
	      in  %% Line 599
		  apply 'check_language2'/2
		      (T, _cor10)
	  %% Line 600
	  <[45|T],N>
	      when let <_cor11> =
		    call 'erlang':'>='
			(N, 1)
		in  let <_cor12> =
			call 'erlang':'=<'
			    (N, 8)
		    in  call 'erlang':'and'
			    (_cor11, _cor12) ->
	      %% Line 601
	      apply 'check_language2'/2
		  (T, 0)
	  %% Line 602
	  <[],N>
	      when let <_cor13> =
		    call 'erlang':'>='
			(N, 1)
		in  let <_cor14> =
			call 'erlang':'=<'
			    (N, 8)
		    in  call 'erlang':'and'
			    (_cor13, _cor14) ->
	      %% Line 603
	      {'ok',[]}
	  ( <_cor16,_cor15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15})
		  -| [{'function_name',{'check_language2',2}}] )
	    -| ['compiler_generated'] )
	end
'check_NMTOKEN'/1 =
    %% Line 605
    fun (_cor0) ->
	case _cor0 of
	  <[H|T]> when 'true' ->
	      %% Line 606
	      case call 'xmerl_lib':'is_namechar'
		       (H) of
		<'true'> when 'true' ->
		    %% Line 607
		    apply 'check_NMTOKEN2'/1
			(T)
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'check_NMTOKEN',1}}] )
	    -| ['compiler_generated'] )
	end
'check_NMTOKEN2'/1 =
    %% Line 608
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      %% Line 609
	      {'ok',[]}
	  %% Line 610
	  <[H|T]> when 'true' ->
	      %% Line 611
	      case call 'xmerl_lib':'is_namechar'
		       (H) of
		<'true'> when 'true' ->
		    %% Line 612
		    apply 'check_NMTOKEN2'/1
			(T)
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'check_NMTOKEN2',1}}] )
	    -| ['compiler_generated'] )
	end
'check_NMTOKENS'/1 =
    %% Line 614
    fun (_cor0) ->
	let <TokList> =
	    %% Line 615
	    call 'string':'tokens'
		(_cor0, [32|[10|[9|[13]]]])
	in  do  %% Line 616
		call 'lists':'foreach'
		    (( 'check_NMTOKEN'/1
		       -| [{'id',{0,0,'-check_NMTOKENS/1-fun-0-'}}] ), TokList)
		%% Line 617
		{'ok',_cor0}
'check_Name'/1 =
    %% Line 619
    fun (_cor0) ->
	%% Line 620
	case call 'xmerl_lib':'is_name'
		 (_cor0) of
	  <'true'> when 'true' ->
	      %% Line 621
	      {'ok',_cor0}
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'check_NCName'/1 =
    %% Line 623
    fun (_cor0) ->
	%% Line 624
	case call 'xmerl_lib':'is_ncname'
		 (_cor0) of
	  <'true'> when 'true' ->
	      %% Line 625
	      {'ok',_cor0}
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'check_ID'/1 =
    %% Line 627
    fun (_cor0) ->
	%% Line 630
	case call 'xmerl_lib':'is_ncname'
		 (_cor0) of
	  <'true'> when 'true' ->
	      %% Line 631
	      {'ok',_cor0}
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'check_IDREF'/1 =
    %% Line 633
    fun (_cor0) ->
	%% Line 634
	case call 'xmerl_lib':'is_name'
		 (_cor0) of
	  <'true'> when 'true' ->
	      %% Line 635
	      {'ok',_cor0}
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'check_IDREFS'/1 =
    %% Line 637
    fun (_cor0) ->
	%% Line 638
	apply 'check_list_type'/2
	    (_cor0, ( 'check_IDREF'/1
		      -| [{'id',{0,0,'-check_IDREFS/1-fun-0-'}}] ))
'check_ENTITY'/1 =
    %% Line 640
    fun (_cor0) ->
	%% Line 641
	case call 'xmerl_lib':'is_ncname'
		 (_cor0) of
	  <'true'> when 'true' ->
	      %% Line 642
	      {'ok',_cor0}
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'check_ENTITIES'/1 =
    %% Line 644
    fun (_cor0) ->
	%% Line 645
	apply 'check_list_type'/2
	    (_cor0, ( 'check_ENTITY'/1
		      -| [{'id',{0,0,'-check_ENTITIES/1-fun-0-'}}] ))
'check_list_type'/2 =
    %% Line 647
    fun (_cor1,_cor0) ->
	let <Tokens> =
	    %% Line 648
	    call 'string':'tokens'
		(_cor1, [32|[10|[9|[13]]]])
	in  do  %% Line 649
		call 'lists':'foreach'
		    (_cor0, Tokens)
		%% Line 650
		{'ok',_cor1}
'ns_whitespace'/1 =
    %% Line 652
    fun (_cor0) ->
	case _cor0 of
	  <WS>
	      when let <_cor1> =
		    call 'erlang':'=='
			(_cor0, 9)
		in  let <_cor2> =
			call 'erlang':'=='
			    (_cor0, 10)
		    in  let <_cor3> =
			    call 'erlang':'=='
				(_cor0, 13)
			in  let <_cor4> =
				call 'erlang':'or'
				    (_cor2, _cor3)
			    in  call 'erlang':'or'
				    (_cor1, _cor4) ->
	      %% Line 653
	      'true'
	  %% Line 654
	  <_cor6> when 'true' ->
	      %% Line 655
	      'false'
	end
'facet_fun'/2 =
    %% Line 661
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Type,{'length',V}> when 'true' ->
	      let <_cor2> =
		  %% Line 662
		  call 'erlang':'list_to_integer'
		      (V)
	      in  %% Line 662
		  apply 'length_fun'/2
		      (Type, _cor2)
	  %% Line 663
	  <Type,{'minLength',V}> when 'true' ->
	      let <_cor3> =
		  %% Line 664
		  call 'erlang':'list_to_integer'
		      (V)
	      in  %% Line 664
		  apply 'minLength_fun'/2
		      (Type, _cor3)
	  %% Line 665
	  <Type,{'maxLength',V}> when 'true' ->
	      let <_cor4> =
		  %% Line 666
		  call 'erlang':'list_to_integer'
		      (V)
	      in  %% Line 666
		  apply 'maxLength_fun'/2
		      (Type, _cor4)
	  %% Line 667
	  <Type,{'pattern',V}> when 'true' ->
	      %% Line 671
	      apply 'pattern_fun'/2
		  (Type, V)
	  %% Line 672
	  <Type,{'enumeration',V}> when 'true' ->
	      %% Line 673
	      apply 'enumeration_fun'/2
		  (Type, V)
	  %% Line 674
	  <Type,{'whiteSpace',V}> when 'true' ->
	      %% Line 675
	      apply 'whiteSpace_fun'/2
		  (Type, V)
	  %% Line 676
	  <Type,{'maxInclusive',V}> when 'true' ->
	      %% Line 677
	      apply 'maxInclusive_fun'/2
		  (Type, V)
	  %% Line 678
	  <Type,{'maxExclusive',V}> when 'true' ->
	      %% Line 679
	      apply 'maxExclusive_fun'/2
		  (Type, V)
	  %% Line 680
	  <Type,{'minExclusive',V}> when 'true' ->
	      %% Line 681
	      apply 'minExclusive_fun'/2
		  (Type, V)
	  %% Line 682
	  <Type,{'minInclusive',V}> when 'true' ->
	      %% Line 683
	      apply 'minInclusive_fun'/2
		  (Type, V)
	  %% Line 684
	  <Type,{'totalDigits',V}> when 'true' ->
	      let <_cor5> =
		  %% Line 685
		  call 'erlang':'list_to_integer'
		      (V)
	      in  %% Line 685
		  apply 'totalDigits_fun'/2
		      (Type, _cor5)
	  %% Line 686
	  <Type,{'fractionDigits',V}> when 'true' ->
	      let <_cor6> =
		  %% Line 687
		  call 'erlang':'list_to_integer'
		      (V)
	      in  %% Line 687
		  apply 'fractionDigits_fun'/2
		      (Type, _cor6)
	  %% Line 688
	  <Type,F> when 'true' ->
	      %% Line 689
	      ( fun (_cor7) ->
		    %% Line 690
		    call 'io':'format'
			([87|[97|[114|[110|[105|[110|[103|[58|[32|[110|[111|[116|[32|[118|[97|[108|[105|[100|[32|[102|[97|[99|[101|[116|[32|[111|[110|[32|[126|[112|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Type|[F|[]]])
		-| [{'id',{0,0,'-facet_fun/2-fun-0-'}}] )
	end
'length_fun'/2 =
    %% Line 694
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <T,V>
	      when let <_cor2> =
		    %% Line 695
		    call 'erlang':'=:='
			(T, 'string')
		in  let <_cor3> =
			%% Line 695
			call 'erlang':'=:='
			    (T, 'normalizedString')
		    in  let <_cor4> =
			    %% Line 695
			    call 'erlang':'=:='
				(T, 'token')
			in  let <_cor5> =
				%% Line 696
				call 'erlang':'=:='
				    (T, 'Name')
			    in  let <_cor6> =
				    %% Line 696
				    call 'erlang':'=:='
					(T, 'NCName')
				in  let <_cor7> =
					%% Line 696
					call 'erlang':'=:='
					    (T, 'language')
				    in  let <_cor8> =
					    %% Line 696
					    call 'erlang':'=:='
						(T, 'ID')
					in  let <_cor9> =
						%% Line 697
						call 'erlang':'=:='
						    (T, 'IDREF')
					    in  let <_cor10> =
						    %% Line 697
						    call 'erlang':'=:='
							(T, 'IDREFS')
						in  let <_cor11> =
							%% Line 697
							call 'erlang':'=:='
							    (T, 'ENTITY')
						    in  let <_cor12> =
							    %% Line 697
							    call 'erlang':'=:='
								(T, 'ENTITIES')
							in  let <_cor13> =
								%% Line 698
								call 'erlang':'=:='
								    (T, 'NMTOKEN')
							    in  let <_cor14> =
								    %% Line 698
								    call 'erlang':'=:='
									(T, 'NMTOKENS')
								in  let <_cor15> =
									%% Line 698
									call 'erlang':'=:='
									    (T, 'anyURI')
								    in  let <_cor16> =
									    %% Line 698
									    call 'erlang':'or'
										(_cor14, _cor15)
									in  let <_cor17> =
										%% Line 698
										call 'erlang':'or'
										    (_cor13, _cor16)
									    in  let <_cor18> =
										    %% Line 697
										    call 'erlang':'or'
											(_cor12, _cor17)
										in  let <_cor19> =
											%% Line 697
											call 'erlang':'or'
											    (_cor11, _cor18)
										    in  let <_cor20> =
											    %% Line 697
											    call 'erlang':'or'
												(_cor10, _cor19)
											in  let <_cor21> =
												%% Line 697
												call 'erlang':'or'
												    (_cor9, _cor20)
											    in  let <_cor22> =
												    %% Line 696
												    call 'erlang':'or'
													(_cor8, _cor21)
												in  let <_cor23> =
													%% Line 696
													call 'erlang':'or'
													    (_cor7, _cor22)
												    in  let <_cor24> =
													    %% Line 696
													    call 'erlang':'or'
														(_cor6, _cor23)
													in  let <_cor25> =
														%% Line 696
														call 'erlang':'or'
														    (_cor5, _cor24)
													    in  let <_cor26> =
														    %% Line 695
														    call 'erlang':'or'
															(_cor4, _cor25)
														in  let <_cor27> =
															%% Line 695
															call 'erlang':'or'
															    (_cor3, _cor26)
														    in  %% Line 695
															call 'erlang':'or'
															    (_cor2, _cor27) ->
	      %% Line 699
	      ( fun (_cor31) ->
		    let <_cor28> =
			%% Line 700
			call 'string':'len'
			    (_cor31)
		    in  %% Line 700
			case <> of
			  %% Line 701
			  <>
			      when call 'erlang':'=='
				    (_cor28,
				     V) ->
			      {'ok',_cor31}
			  %% Line 702
			  <> when 'true' ->
			      let <_cor29> =
				  call 'string':'len'
				      (_cor31)
			      in  {'error',{'length',_cor29,'should_be',V}}
			end
		-| [{'id',{0,0,'-length_fun/2-fun-0-'}}] )
	  %% Line 705
	  <T,_X_V>
	      when let <_cor33> =
		    call 'erlang':'=:='
			(T, 'NOTATION')
		in  let <_cor34> =
			call 'erlang':'=:='
			    (T, 'QName')
		    in  call 'erlang':'or'
			    (_cor33, _cor34) ->
	      %% Line 706
	      ( fun (_cor35) ->
		    %% Line 707
		    {'ok',_cor35}
		-| [{'id',{0,0,'-length_fun/2-fun-1-'}}] )
	  %% Line 709
	  <T,V>
	      when let <_cor37> =
		    call 'erlang':'=:='
			(T, 'base64Binary')
		in  let <_cor38> =
			call 'erlang':'=:='
			    (T, 'hexBinary')
		    in  call 'erlang':'or'
			    (_cor37, _cor38) ->
	      %% Line 710
	      ( fun (_cor42) ->
		    let <_cor39> =
			%% Line 711
			call 'erlang':'length'
			    (_cor42)
		    in  %% Line 711
			case <> of
			  %% Line 712
			  <>
			      when call 'erlang':'=='
				    (_cor39,
				     V) ->
			      {'ok',_cor42}
			  %% Line 713
			  <> when 'true' ->
			      let <_cor40> =
				  call 'erlang':'length'
				      (_cor42)
			      in  {'error',{'length',_cor40,'xhould_be',V}}
			end
		-| [{'id',{0,0,'-length_fun/2-fun-2-'}}] )
	  %% Line 716
	  <T,_X_V> when 'true' ->
	      %% Line 717
	      ( fun (_cor44) ->
		    %% Line 718
		    {'error',{'length_not_applicable_on',T}}
		-| [{'id',{0,0,'-length_fun/2-fun-3-'}}] )
	end
'minLength_fun'/2 =
    %% Line 721
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <T,V>
	      when let <_cor2> =
		    %% Line 722
		    call 'erlang':'=:='
			(T, 'string')
		in  let <_cor3> =
			%% Line 722
			call 'erlang':'=:='
			    (T, 'normalizedString')
		    in  let <_cor4> =
			    %% Line 722
			    call 'erlang':'=:='
				(T, 'token')
			in  let <_cor5> =
				%% Line 723
				call 'erlang':'=:='
				    (T, 'Name')
			    in  let <_cor6> =
				    %% Line 723
				    call 'erlang':'=:='
					(T, 'NCName')
				in  let <_cor7> =
					%% Line 723
					call 'erlang':'=:='
					    (T, 'language')
				    in  let <_cor8> =
					    %% Line 723
					    call 'erlang':'=:='
						(T, 'ID')
					in  let <_cor9> =
						%% Line 724
						call 'erlang':'=:='
						    (T, 'IDREF')
					    in  let <_cor10> =
						    %% Line 724
						    call 'erlang':'=:='
							(T, 'IDREFS')
						in  let <_cor11> =
							%% Line 724
							call 'erlang':'=:='
							    (T, 'ENTITY')
						    in  let <_cor12> =
							    %% Line 724
							    call 'erlang':'=:='
								(T, 'ENTITIES')
							in  let <_cor13> =
								%% Line 725
								call 'erlang':'=:='
								    (T, 'NMTOKEN')
							    in  let <_cor14> =
								    %% Line 725
								    call 'erlang':'=:='
									(T, 'NMTOKENS')
								in  let <_cor15> =
									%% Line 725
									call 'erlang':'=:='
									    (T, 'anyURI')
								    in  let <_cor16> =
									    %% Line 725
									    call 'erlang':'or'
										(_cor14, _cor15)
									in  let <_cor17> =
										%% Line 725
										call 'erlang':'or'
										    (_cor13, _cor16)
									    in  let <_cor18> =
										    %% Line 724
										    call 'erlang':'or'
											(_cor12, _cor17)
										in  let <_cor19> =
											%% Line 724
											call 'erlang':'or'
											    (_cor11, _cor18)
										    in  let <_cor20> =
											    %% Line 724
											    call 'erlang':'or'
												(_cor10, _cor19)
											in  let <_cor21> =
												%% Line 724
												call 'erlang':'or'
												    (_cor9, _cor20)
											    in  let <_cor22> =
												    %% Line 723
												    call 'erlang':'or'
													(_cor8, _cor21)
												in  let <_cor23> =
													%% Line 723
													call 'erlang':'or'
													    (_cor7, _cor22)
												    in  let <_cor24> =
													    %% Line 723
													    call 'erlang':'or'
														(_cor6, _cor23)
													in  let <_cor25> =
														%% Line 723
														call 'erlang':'or'
														    (_cor5, _cor24)
													    in  let <_cor26> =
														    %% Line 722
														    call 'erlang':'or'
															(_cor4, _cor25)
														in  let <_cor27> =
															%% Line 722
															call 'erlang':'or'
															    (_cor3, _cor26)
														    in  %% Line 722
															call 'erlang':'or'
															    (_cor2, _cor27) ->
	      %% Line 726
	      ( fun (_cor31) ->
		    let <_cor28> =
			%% Line 727
			call 'string':'len'
			    (_cor31)
		    in  %% Line 727
			case <> of
			  %% Line 728
			  <>
			      when call 'erlang':'>='
				    (_cor28,
				     V) ->
			      {'ok',_cor31}
			  %% Line 729
			  <> when 'true' ->
			      let <_cor29> =
				  call 'string':'len'
				      (_cor31)
			      in  {'error',{'minLength',_cor29,'should_at_least_be',V}}
			end
		-| [{'id',{0,0,'-minLength_fun/2-fun-0-'}}] )
	  %% Line 732
	  <T,_X_V>
	      when let <_cor33> =
		    call 'erlang':'=:='
			(T, 'NOTATION')
		in  let <_cor34> =
			call 'erlang':'=:='
			    (T, 'QName')
		    in  call 'erlang':'or'
			    (_cor33, _cor34) ->
	      %% Line 733
	      ( fun (_cor35) ->
		    %% Line 734
		    {'ok',_cor35}
		-| [{'id',{0,0,'-minLength_fun/2-fun-1-'}}] )
	  %% Line 736
	  <T,V>
	      when let <_cor37> =
		    call 'erlang':'=:='
			(T, 'base64Binary')
		in  let <_cor38> =
			call 'erlang':'=:='
			    (T, 'hexBinary')
		    in  call 'erlang':'or'
			    (_cor37, _cor38) ->
	      %% Line 737
	      ( fun (_cor42) ->
		    let <_cor39> =
			%% Line 738
			call 'erlang':'length'
			    (_cor42)
		    in  %% Line 738
			case <> of
			  %% Line 739
			  <>
			      when call 'erlang':'>='
				    (_cor39,
				     V) ->
			      {'ok',_cor42}
			  %% Line 740
			  <> when 'true' ->
			      let <_cor40> =
				  call 'erlang':'length'
				      (_cor42)
			      in  {'error',{'minLength',_cor40,'should_at_least_be',V}}
			end
		-| [{'id',{0,0,'-minLength_fun/2-fun-2-'}}] )
	  %% Line 743
	  <T,_X_V> when 'true' ->
	      %% Line 744
	      ( fun (_cor44) ->
		    %% Line 745
		    {'error',{'minLength_not_applicable_on',T}}
		-| [{'id',{0,0,'-minLength_fun/2-fun-3-'}}] )
	end
'maxLength_fun'/2 =
    %% Line 748
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <T,V>
	      when let <_cor2> =
		    %% Line 749
		    call 'erlang':'=:='
			(T, 'string')
		in  let <_cor3> =
			%% Line 749
			call 'erlang':'=:='
			    (T, 'normalizedString')
		    in  let <_cor4> =
			    %% Line 749
			    call 'erlang':'=:='
				(T, 'token')
			in  let <_cor5> =
				%% Line 750
				call 'erlang':'=:='
				    (T, 'Name')
			    in  let <_cor6> =
				    %% Line 750
				    call 'erlang':'=:='
					(T, 'NCName')
				in  let <_cor7> =
					%% Line 750
					call 'erlang':'=:='
					    (T, 'language')
				    in  let <_cor8> =
					    %% Line 750
					    call 'erlang':'=:='
						(T, 'ID')
					in  let <_cor9> =
						%% Line 751
						call 'erlang':'=:='
						    (T, 'IDREF')
					    in  let <_cor10> =
						    %% Line 751
						    call 'erlang':'=:='
							(T, 'IDREFS')
						in  let <_cor11> =
							%% Line 751
							call 'erlang':'=:='
							    (T, 'ENTITY')
						    in  let <_cor12> =
							    %% Line 751
							    call 'erlang':'=:='
								(T, 'ENTITIES')
							in  let <_cor13> =
								%% Line 752
								call 'erlang':'=:='
								    (T, 'NMTOKEN')
							    in  let <_cor14> =
								    %% Line 752
								    call 'erlang':'=:='
									(T, 'NMTOKENS')
								in  let <_cor15> =
									%% Line 752
									call 'erlang':'=:='
									    (T, 'anyURI')
								    in  let <_cor16> =
									    %% Line 752
									    call 'erlang':'or'
										(_cor14, _cor15)
									in  let <_cor17> =
										%% Line 752
										call 'erlang':'or'
										    (_cor13, _cor16)
									    in  let <_cor18> =
										    %% Line 751
										    call 'erlang':'or'
											(_cor12, _cor17)
										in  let <_cor19> =
											%% Line 751
											call 'erlang':'or'
											    (_cor11, _cor18)
										    in  let <_cor20> =
											    %% Line 751
											    call 'erlang':'or'
												(_cor10, _cor19)
											in  let <_cor21> =
												%% Line 751
												call 'erlang':'or'
												    (_cor9, _cor20)
											    in  let <_cor22> =
												    %% Line 750
												    call 'erlang':'or'
													(_cor8, _cor21)
												in  let <_cor23> =
													%% Line 750
													call 'erlang':'or'
													    (_cor7, _cor22)
												    in  let <_cor24> =
													    %% Line 750
													    call 'erlang':'or'
														(_cor6, _cor23)
													in  let <_cor25> =
														%% Line 750
														call 'erlang':'or'
														    (_cor5, _cor24)
													    in  let <_cor26> =
														    %% Line 749
														    call 'erlang':'or'
															(_cor4, _cor25)
														in  let <_cor27> =
															%% Line 749
															call 'erlang':'or'
															    (_cor3, _cor26)
														    in  %% Line 749
															call 'erlang':'or'
															    (_cor2, _cor27) ->
	      %% Line 753
	      ( fun (_cor30) ->
		    %% Line 754
		    case call 'erlang':'length'
			     (_cor30) of
		      %% Line 755
		      <Len>
			  when call 'erlang':'=<'
				(Len,
				 V) ->
			  {'ok',_cor30}
		      %% Line 756
		      <_cor47> when 'true' ->
			  let <_cor28> =
			      call 'string':'len'
				  (_cor30)
			  in  {'error',{'maxLength',_cor28,'should_not_be_more_than',V}}
		    end
		-| [{'id',{0,0,'-maxLength_fun/2-fun-0-'}}] )
	  %% Line 759
	  <T,_X_V>
	      when let <_cor32> =
		    call 'erlang':'=:='
			(T, 'NOTATION')
		in  let <_cor33> =
			call 'erlang':'=:='
			    (T, 'QName')
		    in  call 'erlang':'or'
			    (_cor32, _cor33) ->
	      %% Line 760
	      ( fun (_cor34) ->
		    %% Line 761
		    {'ok',_cor34}
		-| [{'id',{0,0,'-maxLength_fun/2-fun-1-'}}] )
	  %% Line 763
	  <T,V>
	      when let <_cor36> =
		    call 'erlang':'=:='
			(T, 'base64Binary')
		in  let <_cor37> =
			call 'erlang':'=:='
			    (T, 'hexBinary')
		    in  call 'erlang':'or'
			    (_cor36, _cor37) ->
	      %% Line 764
	      ( fun (_cor41) ->
		    let <_cor38> =
			%% Line 765
			call 'erlang':'length'
			    (_cor41)
		    in  %% Line 765
			case <> of
			  %% Line 766
			  <>
			      when call 'erlang':'=<'
				    (_cor38,
				     V) ->
			      {'ok',_cor41}
			  %% Line 767
			  <> when 'true' ->
			      let <_cor39> =
				  call 'erlang':'length'
				      (_cor41)
			      in  {'error',{'maxLength',_cor39,'should_not_be_more_than',V}}
			end
		-| [{'id',{0,0,'-maxLength_fun/2-fun-2-'}}] )
	  %% Line 770
	  <T,_X_V> when 'true' ->
	      %% Line 771
	      ( fun (_cor43) ->
		    %% Line 772
		    {'error',{'maxLength_not_applicable_on',T}}
		-| [{'id',{0,0,'-maxLength_fun/2-fun-3-'}}] )
	end
'pattern_fun'/2 =
    %% Line 775
    fun (_cor1,_cor0) ->
	%% Line 776
	case call 'xmerl_regexp':'setup'
		 (_cor0) of
	  %% Line 777
	  <{'ok',RE}> when 'true' ->
	      %% Line 778
	      ( fun (_cor3) ->
		    %% Line 779
		    case call 'xmerl_regexp':'first_match'
			     (_cor3, RE) of
		      %% Line 780
		      <{'match',_cor10,_cor11}> when 'true' ->
			  {'ok',_cor3}
		      %% Line 781
		      <_cor12> when 'true' ->
			  {'error',{'pattern_mismatch',_cor3,_cor0}}
		    end
		-| [{'id',{0,0,'-pattern_fun/2-fun-0-'}}] )
	  %% Line 784
	  <_cor13> when 'true' ->
	      %% Line 785
	      ( fun (_cor5) ->
		    %% Line 786
		    {'error',{'unsupported_pattern',_cor5,_cor0}}
		-| [{'id',{0,0,'-pattern_fun/2-fun-1-'}}] )
	end
'enumeration_fun'/2 =
    %% Line 790
    fun (_cor1,_cor0) ->
	%% Line 791
	( fun (_cor3) ->
	      %% Line 792
	      case call 'lists':'member'
		       (_cor3, _cor0) of
		%% Line 793
		<'true'> when 'true' ->
		    {'ok',_cor3}
		%% Line 794
		<'false'> when 'true' ->
		    {'error',{'enumeration',_cor3,'should_be_one_of',_cor0}}
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor2})
		  -| ['compiler_generated'] )
	      end
	  -| [{'id',{0,0,'-enumeration_fun/2-fun-0-'}}] )
'whiteSpace_fun'/2 =
    %% Line 798
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <_X_Type,[112|[114|[101|[115|[101|[114|[118|[101]]]]]]]]> when 'true' ->
	      %% Line 799
	      ( fun (_cor2) ->
		    %% Line 800
		    {'ok',_cor2}
		-| [{'id',{0,0,'-whiteSpace_fun/2-fun-0-'}}] )
	  %% Line 802
	  <_X_Type,[114|[101|[112|[108|[97|[99|[101]]]]]]]> when 'true' ->
	      %% Line 803
	      ( fun (_cor5) ->
		    let <_cor4> =
			%% Line 804
			call 'xmerl_xsd_type':'replace_ws'
			    (_cor5, [])
		    in  %% Line 804
			{'ok',_cor4}
		-| [{'id',{0,0,'-whiteSpace_fun/2-fun-1-'}}] )
	  %% Line 806
	  <_X_Type,[99|[111|[108|[108|[97|[112|[115|[101]]]]]]]]> when 'true' ->
	      %% Line 807
	      ( fun (_cor8) ->
		    let <_cor7> =
			%% Line 808
			call 'xmerl_xsd_type':'collapse_ws'
			    (_cor8)
		    in  %% Line 808
			{'ok',_cor7}
		-| [{'id',{0,0,'-whiteSpace_fun/2-fun-2-'}}] )
	  ( <_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10})
		  -| [{'function_name',{'whiteSpace_fun',2}}] )
	    -| ['compiler_generated'] )
	end
'replace_ws'/2 =
    %% Line 811
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[9|T],Acc> when 'true' ->
	      %% Line 812
	      apply 'replace_ws'/2
		  (T, [32|Acc])
	  %% Line 813
	  <[10|T],Acc> when 'true' ->
	      %% Line 814
	      apply 'replace_ws'/2
		  (T, [32|Acc])
	  %% Line 815
	  <[13|T],Acc> when 'true' ->
	      %% Line 816
	      apply 'replace_ws'/2
		  (T, [32|Acc])
	  %% Line 817
	  <[H|T],Acc> when 'true' ->
	      %% Line 818
	      apply 'replace_ws'/2
		  (T, [H|Acc])
	  %% Line 819
	  <[],Acc> when 'true' ->
	      %% Line 820
	      call 'lists':'reverse'
		  (Acc)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'replace_ws',2}}] )
	    -| ['compiler_generated'] )
	end
'collapse_ws'/1 =
    %% Line 822
    fun (_cor0) ->
	let <_cor10> =
	    %% Line 823
	    ( fun (_cor8) ->
		  case _cor8 of
		    <WS>
			when let <_cor2> =
			      call 'erlang':'=='
				  (_cor8, 32)
			  in  let <_cor3> =
				  call 'erlang':'=='
				      (_cor8, 9)
			      in  let <_cor4> =
				      call 'erlang':'=='
					  (_cor8, 10)
				  in  let <_cor5> =
					  call 'erlang':'=='
					      (_cor8, 13)
				      in  let <_cor6> =
					      call 'erlang':'or'
						  (_cor4, _cor5)
					  in  let <_cor7> =
						  call 'erlang':'or'
						      (_cor3, _cor6)
					      in  call 'erlang':'or'
						      (_cor2, _cor7) ->
			'true'
		    <_cor13> when 'true' ->
			'false'
		  end
	      -| [{'id',{0,0,'-collapse_ws/1-fun-0-'}}] )
	in  let <_cor1> =
		%% Line 824
		apply 'replace_ws'/2
		    (_cor0, [])
	    in  let <_cor11> =
		    %% Line 823
		    call 'lists':'dropwhile'
			(_cor10, _cor1)
		in  %% Line 823
		    apply 'collapse_ws'/2
			(_cor11, %% Line 824
				 [])
'collapse_ws'/2 =
    %% Line 825
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[32|[32|T]],Acc> when 'true' ->
	      %% Line 826
	      apply 'collapse_ws'/2
		  ([32|T], Acc)
	  %% Line 827
	  <[H|T],Acc> when 'true' ->
	      %% Line 828
	      apply 'collapse_ws'/2
		  (T, [H|Acc])
	  %% Line 829
	  <[],Acc> when 'true' ->
	      let <_cor4> =
		  %% Line 830
		  ( fun (_cor2) ->
			case _cor2 of
			  <32> when 'true' ->
			      'true'
			  <_cor8> when 'true' ->
			      'false'
			end
		    -| [{'id',{0,0,'-collapse_ws/2-fun-0-'}}] )
	      in  let <_cor5> =
		      %% Line 830
		      call 'lists':'dropwhile'
			  (_cor4, Acc)
		  in  %% Line 830
		      call 'lists':'reverse'
			  (_cor5)
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6})
		  -| [{'function_name',{'collapse_ws',2}}] )
	    -| ['compiler_generated'] )
	end
'maxInclusive_fun'/2 =
    %% Line 832
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <T,V>
	      when let <_cor2> =
		    %% Line 833
		    call 'erlang':'=:='
			(T, 'integer')
		in  let <_cor3> =
			%% Line 833
			call 'erlang':'=:='
			    (T, 'positiveInteger')
		    in  let <_cor4> =
			    %% Line 833
			    call 'erlang':'=:='
				(T, 'negativeInteger')
			in  let <_cor5> =
				%% Line 834
				call 'erlang':'=:='
				    (T, 'nonNegativeInteger')
			    in  let <_cor6> =
				    %% Line 834
				    call 'erlang':'=:='
					(T, 'nonPositiveInteger')
				in  let <_cor7> =
					%% Line 834
					call 'erlang':'=:='
					    (T, 'long')
				    in  let <_cor8> =
					    %% Line 835
					    call 'erlang':'=:='
						(T, 'unsignedLong')
					in  let <_cor9> =
						%% Line 835
						call 'erlang':'=:='
						    (T, 'int')
					    in  let <_cor10> =
						    %% Line 835
						    call 'erlang':'=:='
							(T, 'unsignedInt')
						in  let <_cor11> =
							%% Line 835
							call 'erlang':'=:='
							    (T, 'short')
						    in  let <_cor12> =
							    %% Line 836
							    call 'erlang':'=:='
								(T, 'unsignedShort')
							in  let <_cor13> =
								%% Line 836
								call 'erlang':'=:='
								    (T, 'byte')
							    in  let <_cor14> =
								    %% Line 836
								    call 'erlang':'=:='
									(T, 'unsignedByte')
								in  let <_cor15> =
									%% Line 836
									call 'erlang':'or'
									    (_cor13, _cor14)
								    in  let <_cor16> =
									    %% Line 836
									    call 'erlang':'or'
										(_cor12, _cor15)
									in  let <_cor17> =
										%% Line 835
										call 'erlang':'or'
										    (_cor11, _cor16)
									    in  let <_cor18> =
										    %% Line 835
										    call 'erlang':'or'
											(_cor10, _cor17)
										in  let <_cor19> =
											%% Line 835
											call 'erlang':'or'
											    (_cor9, _cor18)
										    in  let <_cor20> =
											    %% Line 835
											    call 'erlang':'or'
												(_cor8, _cor19)
											in  let <_cor21> =
												%% Line 834
												call 'erlang':'or'
												    (_cor7, _cor20)
											    in  let <_cor22> =
												    %% Line 834
												    call 'erlang':'or'
													(_cor6, _cor21)
												in  let <_cor23> =
													%% Line 834
													call 'erlang':'or'
													    (_cor5, _cor22)
												    in  let <_cor24> =
													    %% Line 833
													    call 'erlang':'or'
														(_cor4, _cor23)
													in  let <_cor25> =
														%% Line 833
														call 'erlang':'or'
														    (_cor3, _cor24)
													    in  %% Line 833
														call 'erlang':'or'
														    (_cor2, _cor25) ->
	      %% Line 837
	      ( fun (_cor30) ->
		    let <_cor28> =
			catch
			    let <_cor27> =
				%% Line 838
				call 'erlang':'list_to_integer'
				    (_cor30)
			    in  let <_cor26> =
				    %% Line 838
				    call 'erlang':'list_to_integer'
					(V)
				in  %% Line 838
				    call 'erlang':'=<'
					(_cor27, _cor26)
		    in  %% Line 838
			case _cor28 of
			  %% Line 839
			  <'true'> when 'true' ->
			      %% Line 840
			      {'ok',_cor30}
			  %% Line 841
			  <_cor53> when 'true' ->
			      %% Line 842
			      {'error',{'maxInclusive',_cor30,'should_be_less_than_or_equal_with',V}}
			end
		-| [{'id',{0,0,'-maxInclusive_fun/2-fun-0-'}}] )
	  %% Line 845
	  <T,V>
	      when let <_cor32> =
		    call 'erlang':'=:='
			(T, 'decimal')
		in  let <_cor33> =
			call 'erlang':'=:='
			    (T, 'float')
		    in  let <_cor34> =
			    call 'erlang':'=:='
				(T, 'double')
			in  let <_cor35> =
				call 'erlang':'or'
				    (_cor33, _cor34)
			    in  call 'erlang':'or'
				    (_cor32, _cor35) ->
	      %% Line 846
	      ( fun (_cor37) ->
		    %% Line 847
		    case call 'xmerl_xsd_type':'compare_floats'
			     (_cor37, V) of
		      %% Line 848
		      <'gt'> when 'true' ->
			  %% Line 849
			  {'error',{'maxInclusive',_cor37,'should_be_less_than_or_equal_with',V}}
		      %% Line 850
		      <Err = {'error',_cor54}> when 'true' ->
			  Err
		      %% Line 851
		      <_cor55> when 'true' ->
			  %% Line 852
			  {'ok',_cor37}
		    end
		-| [{'id',{0,0,'-maxInclusive_fun/2-fun-1-'}}] )
	  %% Line 855
	  <T,V>
	      when call 'erlang':'=:='
		    (T,
		     'duration') ->
	      %% Line 856
	      ( fun (_cor42) ->
		    %% Line 857
		    case call 'xmerl_xsd_type':'compare_durations'
			     (_cor42, V) of
		      %% Line 858
		      <GT>
			  when let <_cor39> =
				call 'erlang':'=:='
				    (GT, 'gt')
			    in  let <_cor40> =
				    call 'erlang':'=:='
					(GT, 'indefinite')
				in  call 'erlang':'or'
					(_cor39, _cor40) ->
			  %% Line 859
			  {'error',{'maxInclusive',_cor42,'should_be_less_than_or_equal_with',V}}
		      %% Line 860
		      <_cor56> when 'true' ->
			  %% Line 861
			  {'ok',_cor42}
		    end
		-| [{'id',{0,0,'-maxInclusive_fun/2-fun-2-'}}] )
	  %% Line 864
	  <T,V>
	      when call 'erlang':'=:='
		    (T,
		     'dateTime') ->
	      %% Line 865
	      ( fun (_cor47) ->
		    %% Line 866
		    case call 'xmerl_xsd_type':'compare_dateTime'
			     (_cor47, V) of
		      %% Line 867
		      <GT>
			  when let <_cor44> =
				call 'erlang':'=:='
				    (GT, 'gt')
			    in  let <_cor45> =
				    call 'erlang':'=:='
					(GT, 'indefinite')
				in  call 'erlang':'or'
					(_cor44, _cor45) ->
			  %% Line 868
			  {'error',{'maxInclusive',_cor47,'should_be_less_than_or_equal_with',V}}
		      %% Line 869
		      <_cor57> when 'true' ->
			  %% Line 870
			  {'ok',_cor47}
		    end
		-| [{'id',{0,0,'-maxInclusive_fun/2-fun-3-'}}] )
	  %% Line 873
	  <T,_X_V> when 'true' ->
	      %% Line 876
	      ( fun (_cor49) ->
		    {'error',{'maxInclusive','not_implemented_for',T}}
		-| [{'id',{0,0,'-maxInclusive_fun/2-fun-4-'}}] )
	end
'maxExclusive_fun'/2 =
    %% Line 878
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <T,V>
	      when let <_cor2> =
		    %% Line 879
		    call 'erlang':'=:='
			(T, 'integer')
		in  let <_cor3> =
			%% Line 879
			call 'erlang':'=:='
			    (T, 'positiveInteger')
		    in  let <_cor4> =
			    %% Line 879
			    call 'erlang':'=:='
				(T, 'negativeInteger')
			in  let <_cor5> =
				%% Line 880
				call 'erlang':'=:='
				    (T, 'nonNegativeInteger')
			    in  let <_cor6> =
				    %% Line 880
				    call 'erlang':'=:='
					(T, 'nonPositiveInteger')
				in  let <_cor7> =
					%% Line 880
					call 'erlang':'=:='
					    (T, 'long')
				    in  let <_cor8> =
					    %% Line 881
					    call 'erlang':'=:='
						(T, 'unsignedLong')
					in  let <_cor9> =
						%% Line 881
						call 'erlang':'=:='
						    (T, 'int')
					    in  let <_cor10> =
						    %% Line 881
						    call 'erlang':'=:='
							(T, 'unsignedInt')
						in  let <_cor11> =
							%% Line 881
							call 'erlang':'=:='
							    (T, 'short')
						    in  let <_cor12> =
							    %% Line 882
							    call 'erlang':'=:='
								(T, 'unsignedShort')
							in  let <_cor13> =
								%% Line 882
								call 'erlang':'=:='
								    (T, 'byte')
							    in  let <_cor14> =
								    %% Line 882
								    call 'erlang':'=:='
									(T, 'unsignedByte')
								in  let <_cor15> =
									%% Line 882
									call 'erlang':'or'
									    (_cor13, _cor14)
								    in  let <_cor16> =
									    %% Line 882
									    call 'erlang':'or'
										(_cor12, _cor15)
									in  let <_cor17> =
										%% Line 881
										call 'erlang':'or'
										    (_cor11, _cor16)
									    in  let <_cor18> =
										    %% Line 881
										    call 'erlang':'or'
											(_cor10, _cor17)
										in  let <_cor19> =
											%% Line 881
											call 'erlang':'or'
											    (_cor9, _cor18)
										    in  let <_cor20> =
											    %% Line 881
											    call 'erlang':'or'
												(_cor8, _cor19)
											in  let <_cor21> =
												%% Line 880
												call 'erlang':'or'
												    (_cor7, _cor20)
											    in  let <_cor22> =
												    %% Line 880
												    call 'erlang':'or'
													(_cor6, _cor21)
												in  let <_cor23> =
													%% Line 880
													call 'erlang':'or'
													    (_cor5, _cor22)
												    in  let <_cor24> =
													    %% Line 879
													    call 'erlang':'or'
														(_cor4, _cor23)
													in  let <_cor25> =
														%% Line 879
														call 'erlang':'or'
														    (_cor3, _cor24)
													    in  %% Line 879
														call 'erlang':'or'
														    (_cor2, _cor25) ->
	      %% Line 883
	      ( fun (_cor30) ->
		    let <_cor28> =
			catch
			    let <_cor27> =
				%% Line 884
				call 'erlang':'list_to_integer'
				    (_cor30)
			    in  let <_cor26> =
				    %% Line 884
				    call 'erlang':'list_to_integer'
					(V)
				in  %% Line 884
				    call 'erlang':'<'
					(_cor27, _cor26)
		    in  %% Line 884
			case _cor28 of
			  %% Line 885
			  <'true'> when 'true' ->
			      %% Line 886
			      {'ok',_cor30}
			  %% Line 887
			  <_cor49> when 'true' ->
			      %% Line 888
			      {'error',{'maxExclusive',_cor30,'not_less_than',V}}
			end
		-| [{'id',{0,0,'-maxExclusive_fun/2-fun-0-'}}] )
	  %% Line 891
	  <T,V>
	      when let <_cor32> =
		    call 'erlang':'=:='
			(T, 'decimal')
		in  let <_cor33> =
			call 'erlang':'=:='
			    (T, 'float')
		    in  let <_cor34> =
			    call 'erlang':'=:='
				(T, 'double')
			in  let <_cor35> =
				call 'erlang':'or'
				    (_cor33, _cor34)
			    in  call 'erlang':'or'
				    (_cor32, _cor35) ->
	      %% Line 892
	      ( fun (_cor37) ->
		    %% Line 893
		    case call 'xmerl_xsd_type':'compare_floats'
			     (_cor37, V) of
		      %% Line 894
		      <'lt'> when 'true' ->
			  %% Line 895
			  {'ok',_cor37}
		      %% Line 896
		      <Err = {'error',_cor50}> when 'true' ->
			  Err
		      %% Line 897
		      <_cor51> when 'true' ->
			  %% Line 898
			  {'error',{'maxExclusive',_cor37,'not_less_than',V}}
		    end
		-| [{'id',{0,0,'-maxExclusive_fun/2-fun-1-'}}] )
	  %% Line 901
	  <T,V>
	      when call 'erlang':'=:='
		    (T,
		     'duration') ->
	      %% Line 902
	      ( fun (_cor40) ->
		    %% Line 903
		    case call 'xmerl_xsd_type':'compare_durations'
			     (_cor40, V) of
		      %% Line 904
		      <'lt'> when 'true' ->
			  %% Line 905
			  {'ok',_cor40}
		      %% Line 906
		      <_cor52> when 'true' ->
			  %% Line 907
			  {'error',{'maxExclusive',_cor40,'not_less_than',V}}
		    end
		-| [{'id',{0,0,'-maxExclusive_fun/2-fun-2-'}}] )
	  %% Line 910
	  <T,V>
	      when call 'erlang':'=:='
		    (T,
		     'dateTime') ->
	      %% Line 911
	      ( fun (_cor43) ->
		    %% Line 912
		    case call 'xmerl_xsd_type':'compare_dateTime'
			     (_cor43, V) of
		      %% Line 913
		      <'lt'> when 'true' ->
			  %% Line 914
			  {'ok',_cor43}
		      %% Line 915
		      <_cor53> when 'true' ->
			  %% Line 916
			  {'error',{'maxExclusive',_cor43,'not_less_than',V}}
		    end
		-| [{'id',{0,0,'-maxExclusive_fun/2-fun-3-'}}] )
	  %% Line 919
	  <T,_X_V> when 'true' ->
	      %% Line 920
	      ( fun (_cor45) ->
		    {'error',{'maxExclusive','not_implemented_for',T}}
		-| [{'id',{0,0,'-maxExclusive_fun/2-fun-4-'}}] )
	end
'minExclusive_fun'/2 =
    %% Line 922
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <T,V>
	      when let <_cor2> =
		    %% Line 923
		    call 'erlang':'=:='
			(T, 'integer')
		in  let <_cor3> =
			%% Line 923
			call 'erlang':'=:='
			    (T, 'positiveInteger')
		    in  let <_cor4> =
			    %% Line 923
			    call 'erlang':'=:='
				(T, 'negativeInteger')
			in  let <_cor5> =
				%% Line 924
				call 'erlang':'=:='
				    (T, 'nonNegativeInteger')
			    in  let <_cor6> =
				    %% Line 924
				    call 'erlang':'=:='
					(T, 'nonPositiveInteger')
				in  let <_cor7> =
					%% Line 924
					call 'erlang':'=:='
					    (T, 'long')
				    in  let <_cor8> =
					    %% Line 925
					    call 'erlang':'=:='
						(T, 'unsignedLong')
					in  let <_cor9> =
						%% Line 925
						call 'erlang':'=:='
						    (T, 'int')
					    in  let <_cor10> =
						    %% Line 925
						    call 'erlang':'=:='
							(T, 'unsignedInt')
						in  let <_cor11> =
							%% Line 925
							call 'erlang':'=:='
							    (T, 'short')
						    in  let <_cor12> =
							    %% Line 926
							    call 'erlang':'=:='
								(T, 'unsignedShort')
							in  let <_cor13> =
								%% Line 926
								call 'erlang':'=:='
								    (T, 'byte')
							    in  let <_cor14> =
								    %% Line 926
								    call 'erlang':'=:='
									(T, 'unsignedByte')
								in  let <_cor15> =
									%% Line 926
									call 'erlang':'or'
									    (_cor13, _cor14)
								    in  let <_cor16> =
									    %% Line 926
									    call 'erlang':'or'
										(_cor12, _cor15)
									in  let <_cor17> =
										%% Line 925
										call 'erlang':'or'
										    (_cor11, _cor16)
									    in  let <_cor18> =
										    %% Line 925
										    call 'erlang':'or'
											(_cor10, _cor17)
										in  let <_cor19> =
											%% Line 925
											call 'erlang':'or'
											    (_cor9, _cor18)
										    in  let <_cor20> =
											    %% Line 925
											    call 'erlang':'or'
												(_cor8, _cor19)
											in  let <_cor21> =
												%% Line 924
												call 'erlang':'or'
												    (_cor7, _cor20)
											    in  let <_cor22> =
												    %% Line 924
												    call 'erlang':'or'
													(_cor6, _cor21)
												in  let <_cor23> =
													%% Line 924
													call 'erlang':'or'
													    (_cor5, _cor22)
												    in  let <_cor24> =
													    %% Line 923
													    call 'erlang':'or'
														(_cor4, _cor23)
													in  let <_cor25> =
														%% Line 923
														call 'erlang':'or'
														    (_cor3, _cor24)
													    in  %% Line 923
														call 'erlang':'or'
														    (_cor2, _cor25) ->
	      %% Line 927
	      ( fun (_cor30) ->
		    let <_cor28> =
			catch
			    let <_cor27> =
				%% Line 928
				call 'erlang':'list_to_integer'
				    (_cor30)
			    in  let <_cor26> =
				    %% Line 928
				    call 'erlang':'list_to_integer'
					(V)
				in  %% Line 928
				    call 'erlang':'>'
					(_cor27, _cor26)
		    in  %% Line 928
			case _cor28 of
			  %% Line 929
			  <'true'> when 'true' ->
			      %% Line 930
			      {'ok',_cor30}
			  %% Line 931
			  <_cor49> when 'true' ->
			      %% Line 932
			      {'error',{'minExclusive',_cor30,'not_greater_than',V}}
			end
		-| [{'id',{0,0,'-minExclusive_fun/2-fun-0-'}}] )
	  %% Line 935
	  <T,V>
	      when let <_cor32> =
		    call 'erlang':'=:='
			(T, 'decimal')
		in  let <_cor33> =
			call 'erlang':'=:='
			    (T, 'float')
		    in  let <_cor34> =
			    call 'erlang':'=:='
				(T, 'double')
			in  let <_cor35> =
				call 'erlang':'or'
				    (_cor33, _cor34)
			    in  call 'erlang':'or'
				    (_cor32, _cor35) ->
	      %% Line 936
	      ( fun (_cor37) ->
		    %% Line 937
		    case call 'xmerl_xsd_type':'compare_floats'
			     (_cor37, V) of
		      %% Line 938
		      <'gt'> when 'true' ->
			  %% Line 939
			  {'ok',_cor37}
		      %% Line 940
		      <Err = {'error',_cor50}> when 'true' ->
			  Err
		      %% Line 941
		      <_cor51> when 'true' ->
			  %% Line 942
			  {'error',{'minExclusive',_cor37,'not_greater_than',V}}
		    end
		-| [{'id',{0,0,'-minExclusive_fun/2-fun-1-'}}] )
	  %% Line 945
	  <T,V>
	      when call 'erlang':'=:='
		    (T,
		     'duration') ->
	      %% Line 946
	      ( fun (_cor40) ->
		    %% Line 947
		    case call 'xmerl_xsd_type':'compare_durations'
			     (_cor40, V) of
		      %% Line 948
		      <'gt'> when 'true' ->
			  %% Line 949
			  {'ok',_cor40}
		      %% Line 950
		      <_cor52> when 'true' ->
			  %% Line 951
			  {'error',{'minExclusive',_cor40,'not_greater_than',V}}
		    end
		-| [{'id',{0,0,'-minExclusive_fun/2-fun-2-'}}] )
	  %% Line 954
	  <T,V>
	      when call 'erlang':'=:='
		    (T,
		     'dateTime') ->
	      %% Line 955
	      ( fun (_cor43) ->
		    %% Line 956
		    case call 'xmerl_xsd_type':'compare_dateTime'
			     (_cor43, V) of
		      %% Line 957
		      <'gt'> when 'true' ->
			  %% Line 958
			  {'ok',_cor43}
		      %% Line 959
		      <_cor53> when 'true' ->
			  %% Line 960
			  {'error',{'minExclusive',_cor43,'not_greater_than',V}}
		    end
		-| [{'id',{0,0,'-minExclusive_fun/2-fun-3-'}}] )
	  %% Line 963
	  <T,_X_V> when 'true' ->
	      %% Line 964
	      ( fun (_cor45) ->
		    {'error',{'minExclusive','not_implemented_for',T}}
		-| [{'id',{0,0,'-minExclusive_fun/2-fun-4-'}}] )
	end
'minInclusive_fun'/2 =
    %% Line 966
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <T,V>
	      when let <_cor2> =
		    %% Line 967
		    call 'erlang':'=:='
			(T, 'integer')
		in  let <_cor3> =
			%% Line 967
			call 'erlang':'=:='
			    (T, 'positiveInteger')
		    in  let <_cor4> =
			    %% Line 967
			    call 'erlang':'=:='
				(T, 'negativeInteger')
			in  let <_cor5> =
				%% Line 968
				call 'erlang':'=:='
				    (T, 'nonNegativeInteger')
			    in  let <_cor6> =
				    %% Line 968
				    call 'erlang':'=:='
					(T, 'nonPositiveInteger')
				in  let <_cor7> =
					%% Line 968
					call 'erlang':'=:='
					    (T, 'long')
				    in  let <_cor8> =
					    %% Line 969
					    call 'erlang':'=:='
						(T, 'unsignedLong')
					in  let <_cor9> =
						%% Line 969
						call 'erlang':'=:='
						    (T, 'int')
					    in  let <_cor10> =
						    %% Line 969
						    call 'erlang':'=:='
							(T, 'unsignedInt')
						in  let <_cor11> =
							%% Line 969
							call 'erlang':'=:='
							    (T, 'short')
						    in  let <_cor12> =
							    %% Line 970
							    call 'erlang':'=:='
								(T, 'unsignedShort')
							in  let <_cor13> =
								%% Line 970
								call 'erlang':'=:='
								    (T, 'byte')
							    in  let <_cor14> =
								    %% Line 970
								    call 'erlang':'=:='
									(T, 'unsignedByte')
								in  let <_cor15> =
									%% Line 970
									call 'erlang':'or'
									    (_cor13, _cor14)
								    in  let <_cor16> =
									    %% Line 970
									    call 'erlang':'or'
										(_cor12, _cor15)
									in  let <_cor17> =
										%% Line 969
										call 'erlang':'or'
										    (_cor11, _cor16)
									    in  let <_cor18> =
										    %% Line 969
										    call 'erlang':'or'
											(_cor10, _cor17)
										in  let <_cor19> =
											%% Line 969
											call 'erlang':'or'
											    (_cor9, _cor18)
										    in  let <_cor20> =
											    %% Line 969
											    call 'erlang':'or'
												(_cor8, _cor19)
											in  let <_cor21> =
												%% Line 968
												call 'erlang':'or'
												    (_cor7, _cor20)
											    in  let <_cor22> =
												    %% Line 968
												    call 'erlang':'or'
													(_cor6, _cor21)
												in  let <_cor23> =
													%% Line 968
													call 'erlang':'or'
													    (_cor5, _cor22)
												    in  let <_cor24> =
													    %% Line 967
													    call 'erlang':'or'
														(_cor4, _cor23)
													in  let <_cor25> =
														%% Line 967
														call 'erlang':'or'
														    (_cor3, _cor24)
													    in  %% Line 967
														call 'erlang':'or'
														    (_cor2, _cor25) ->
	      %% Line 971
	      ( fun (_cor30) ->
		    let <_cor28> =
			catch
			    let <_cor27> =
				%% Line 972
				call 'erlang':'list_to_integer'
				    (_cor30)
			    in  let <_cor26> =
				    %% Line 972
				    call 'erlang':'list_to_integer'
					(V)
				in  %% Line 972
				    call 'erlang':'>='
					(_cor27, _cor26)
		    in  %% Line 972
			case _cor28 of
			  %% Line 973
			  <'true'> when 'true' ->
			      %% Line 974
			      {'ok',_cor30}
			  %% Line 975
			  <_cor49> when 'true' ->
			      %% Line 976
			      {'error',{'minInclusive',_cor30,'not_greater_than_or_equal_with',V}}
			end
		-| [{'id',{0,0,'-minInclusive_fun/2-fun-0-'}}] )
	  %% Line 979
	  <T,V>
	      when let <_cor32> =
		    call 'erlang':'=:='
			(T, 'decimal')
		in  let <_cor33> =
			call 'erlang':'=:='
			    (T, 'float')
		    in  let <_cor34> =
			    call 'erlang':'=:='
				(T, 'double')
			in  let <_cor35> =
				call 'erlang':'or'
				    (_cor33, _cor34)
			    in  call 'erlang':'or'
				    (_cor32, _cor35) ->
	      %% Line 980
	      ( fun (_cor37) ->
		    %% Line 981
		    case call 'xmerl_xsd_type':'compare_floats'
			     (_cor37, V) of
		      %% Line 982
		      <'lt'> when 'true' ->
			  %% Line 983
			  {'error',{'minInclusive',_cor37,'not_greater_than_or_equal_with',V}}
		      %% Line 984
		      <Err = {'error',_cor50}> when 'true' ->
			  Err
		      %% Line 985
		      <_cor51> when 'true' ->
			  %% Line 986
			  {'ok',_cor37}
		    end
		-| [{'id',{0,0,'-minInclusive_fun/2-fun-1-'}}] )
	  %% Line 989
	  <T,V>
	      when call 'erlang':'=:='
		    (T,
		     'duration') ->
	      %% Line 990
	      ( fun (_cor40) ->
		    %% Line 991
		    case call 'xmerl_xsd_type':'compare_durations'
			     (_cor40, V) of
		      %% Line 992
		      <'lt'> when 'true' ->
			  %% Line 993
			  {'error',{'minInclusive',_cor40,'not_greater_than_or_equal_with',V}}
		      %% Line 994
		      <_cor52> when 'true' ->
			  %% Line 995
			  {'ok',_cor40}
		    end
		-| [{'id',{0,0,'-minInclusive_fun/2-fun-2-'}}] )
	  %% Line 998
	  <T,V>
	      when call 'erlang':'=:='
		    (T,
		     'dateTime') ->
	      %% Line 999
	      ( fun (_cor43) ->
		    %% Line 1000
		    case call 'xmerl_xsd_type':'compare_dateTime'
			     (_cor43, V) of
		      %% Line 1001
		      <'lt'> when 'true' ->
			  %% Line 1002
			  {'error',{'minInclusive',_cor43,'not_greater_than_or_equal_with',V}}
		      %% Line 1003
		      <_cor53> when 'true' ->
			  %% Line 1004
			  {'ok',_cor43}
		    end
		-| [{'id',{0,0,'-minInclusive_fun/2-fun-3-'}}] )
	  %% Line 1007
	  <T,_X_V> when 'true' ->
	      %% Line 1008
	      ( fun (_cor45) ->
		    {'error',{'minInclusive','not_implemented_for',T}}
		-| [{'id',{0,0,'-minInclusive_fun/2-fun-4-'}}] )
	end
'totalDigits_fun'/2 =
    %% Line 1010
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <T,V>
	      when let <_cor2> =
		    %% Line 1011
		    call 'erlang':'=:='
			(T, 'integer')
		in  let <_cor3> =
			%% Line 1011
			call 'erlang':'=:='
			    (T, 'positiveInteger')
		    in  let <_cor4> =
			    %% Line 1011
			    call 'erlang':'=:='
				(T, 'negativeInteger')
			in  let <_cor5> =
				%% Line 1011
				call 'erlang':'=:='
				    (T, 'nonNegativeInteger')
			    in  let <_cor6> =
				    %% Line 1012
				    call 'erlang':'=:='
					(T, 'nonPositiveInteger')
				in  let <_cor7> =
					%% Line 1012
					call 'erlang':'=:='
					    (T, 'long')
				    in  let <_cor8> =
					    %% Line 1012
					    call 'erlang':'=:='
						(T, 'unsignedLong')
					in  let <_cor9> =
						%% Line 1012
						call 'erlang':'=:='
						    (T, 'int')
					    in  let <_cor10> =
						    %% Line 1012
						    call 'erlang':'=:='
							(T, 'unsignedInt')
						in  let <_cor11> =
							%% Line 1013
							call 'erlang':'=:='
							    (T, 'short')
						    in  let <_cor12> =
							    %% Line 1013
							    call 'erlang':'=:='
								(T, 'unsignedShort')
							in  let <_cor13> =
								%% Line 1013
								call 'erlang':'=:='
								    (T, 'byte')
							    in  let <_cor14> =
								    %% Line 1013
								    call 'erlang':'=:='
									(T, 'unsignedByte')
								in  let <_cor15> =
									%% Line 1013
									call 'erlang':'=:='
									    (T, 'decimal')
								    in  let <_cor16> =
									    %% Line 1013
									    call 'erlang':'or'
										(_cor14, _cor15)
									in  let <_cor17> =
										%% Line 1013
										call 'erlang':'or'
										    (_cor13, _cor16)
									    in  let <_cor18> =
										    %% Line 1013
										    call 'erlang':'or'
											(_cor12, _cor17)
										in  let <_cor19> =
											%% Line 1013
											call 'erlang':'or'
											    (_cor11, _cor18)
										    in  let <_cor20> =
											    %% Line 1012
											    call 'erlang':'or'
												(_cor10, _cor19)
											in  let <_cor21> =
												%% Line 1012
												call 'erlang':'or'
												    (_cor9, _cor20)
											    in  let <_cor22> =
												    %% Line 1012
												    call 'erlang':'or'
													(_cor8, _cor21)
												in  let <_cor23> =
													%% Line 1012
													call 'erlang':'or'
													    (_cor7, _cor22)
												    in  let <_cor24> =
													    %% Line 1012
													    call 'erlang':'or'
														(_cor6, _cor23)
													in  let <_cor25> =
														%% Line 1011
														call 'erlang':'or'
														    (_cor5, _cor24)
													    in  let <_cor26> =
														    %% Line 1011
														    call 'erlang':'or'
															(_cor4, _cor25)
														in  let <_cor27> =
															%% Line 1011
															call 'erlang':'or'
															    (_cor3, _cor26)
														    in  %% Line 1011
															call 'erlang':'or'
															    (_cor2, _cor27) ->
	      %% Line 1016
	      ( fun (_cor38) ->
		    let <Pred> =
			%% Line 1017
			( fun (_cor28) ->
			      case _cor28 of
				<48> when 'true' ->
				    'true'
				%% Line 1018
				<_cor44> when 'true' ->
				    'false'
			      end
			  -| [{'id',{0,0,'-totalDigits_fun/2-fun-0-'}}] )
		    in  let <Val2> =
			    %% Line 1020
			    call 'lists':'dropwhile'
				(Pred, _cor38)
			in  let <_cor36> =
				%% Line 1022
				case call 'lists':'member'
					 (46, Val2) of
				  %% Line 1023
				  <'true'> when 'true' ->
				      let <_cor32> =
					  %% Line 1024
					  call 'lists':'reverse'
					      (Val2)
				      in  let <_cor33> =
					      %% Line 1024
					      call 'lists':'dropwhile'
						  (Pred, _cor32)
					  in  let <_cor34> =
						  %% Line 1024
						  call 'erlang':'length'
						      (_cor33)
					      in  %% Line 1024
						  call 'erlang':'-'
						      (_cor34, 1)
				  %% Line 1025
				  <_cor45> when 'true' ->
				      %% Line 1026
				      call 'erlang':'length'
					  (Val2)
				end
			    in  %% Line 1028
				case <> of
				  %% Line 1029
				  <>
				      when call 'erlang':'=<'
					    (_cor36,
					     V) ->
				      %% Line 1030
				      {'ok',_cor38}
				  %% Line 1031
				  <> when 'true' ->
				      %% Line 1032
				      {'error',{'totalDigits',_cor36,'to_many_digits'}}
				end
		-| [{'id',{0,0,'-totalDigits_fun/2-fun-1-'}}] )
	  %% Line 1035
	  <T,_X_V> when 'true' ->
	      %% Line 1036
	      ( fun (_cor40) ->
		    {'error',{'totalDigits','not_applicable',T}}
		-| [{'id',{0,0,'-totalDigits_fun/2-fun-2-'}}] )
	end
'fractionDigits_fun'/2 =
    %% Line 1038
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <T,V>
	      when let <_cor2> =
		    %% Line 1039
		    call 'erlang':'=:='
			(T, 'integer')
		in  let <_cor3> =
			%% Line 1039
			call 'erlang':'=:='
			    (T, 'positiveInteger')
		    in  let <_cor4> =
			    %% Line 1039
			    call 'erlang':'=:='
				(T, 'negativeInteger')
			in  let <_cor5> =
				%% Line 1039
				call 'erlang':'=:='
				    (T, 'nonNegativeInteger')
			    in  let <_cor6> =
				    %% Line 1040
				    call 'erlang':'=:='
					(T, 'nonPositiveInteger')
				in  let <_cor7> =
					%% Line 1040
					call 'erlang':'=:='
					    (T, 'long')
				    in  let <_cor8> =
					    %% Line 1040
					    call 'erlang':'=:='
						(T, 'unsignedLong')
					in  let <_cor9> =
						%% Line 1040
						call 'erlang':'=:='
						    (T, 'int')
					    in  let <_cor10> =
						    %% Line 1040
						    call 'erlang':'=:='
							(T, 'unsignedInt')
						in  let <_cor11> =
							%% Line 1041
							call 'erlang':'=:='
							    (T, 'short')
						    in  let <_cor12> =
							    %% Line 1041
							    call 'erlang':'=:='
								(T, 'unsignedShort')
							in  let <_cor13> =
								%% Line 1041
								call 'erlang':'=:='
								    (T, 'byte')
							    in  let <_cor14> =
								    %% Line 1041
								    call 'erlang':'=:='
									(T, 'unsignedByte')
								in  let <_cor15> =
									%% Line 1041
									call 'erlang':'=:='
									    (T, 'decimal')
								    in  let <_cor16> =
									    %% Line 1041
									    call 'erlang':'or'
										(_cor14, _cor15)
									in  let <_cor17> =
										%% Line 1041
										call 'erlang':'or'
										    (_cor13, _cor16)
									    in  let <_cor18> =
										    %% Line 1041
										    call 'erlang':'or'
											(_cor12, _cor17)
										in  let <_cor19> =
											%% Line 1041
											call 'erlang':'or'
											    (_cor11, _cor18)
										    in  let <_cor20> =
											    %% Line 1040
											    call 'erlang':'or'
												(_cor10, _cor19)
											in  let <_cor21> =
												%% Line 1040
												call 'erlang':'or'
												    (_cor9, _cor20)
											    in  let <_cor22> =
												    %% Line 1040
												    call 'erlang':'or'
													(_cor8, _cor21)
												in  let <_cor23> =
													%% Line 1040
													call 'erlang':'or'
													    (_cor7, _cor22)
												    in  let <_cor24> =
													    %% Line 1040
													    call 'erlang':'or'
														(_cor6, _cor23)
													in  let <_cor25> =
														%% Line 1039
														call 'erlang':'or'
														    (_cor5, _cor24)
													    in  let <_cor26> =
														    %% Line 1039
														    call 'erlang':'or'
															(_cor4, _cor25)
														in  let <_cor27> =
															%% Line 1039
															call 'erlang':'or'
															    (_cor3, _cor26)
														    in  %% Line 1039
															call 'erlang':'or'
															    (_cor2, _cor27) ->
	      %% Line 1042
	      ( fun (_cor36) ->
		    let <_cor34> =
			%% Line 1044
			case call 'string':'tokens'
				 (_cor36, [46]) of
			  %% Line 1045
			  <[_X_I|[Frc|[]]]>
			      when call 'erlang':'=:='
				    (T,
				     'decimal') ->
			      let <Pred> =
				  %% Line 1046
				  ( fun (_cor28) ->
					case _cor28 of
					  <48> when 'true' ->
					      'true'
					  %% Line 1047
					  <_cor42> when 'true' ->
					      'false'
					end
				    -| [{'id',{0,0,'-fractionDigits_fun/2-fun-0-'}}] )
			      in  let <_cor31> =
				      %% Line 1049
				      call 'lists':'reverse'
					  (Frc)
				  in  let <_cor32> =
					  %% Line 1049
					  call 'lists':'dropwhile'
					      (Pred, _cor31)
				      in  %% Line 1049
					  call 'erlang':'length'
					      (_cor32)
			  %% Line 1050
			  <_cor43> when 'true' ->
			      %% Line 1051
			      0
			end
		    in  %% Line 1053
			case <> of
			  %% Line 1054
			  <>
			      when call 'erlang':'=<'
				    (_cor34,
				     V) ->
			      %% Line 1055
			      {'ok',_cor36}
			  %% Line 1056
			  <> when 'true' ->
			      %% Line 1057
			      {'error',{'fractionDigits',_cor34,'to_many_digits_in',_cor36}}
			end
		-| [{'id',{0,0,'-fractionDigits_fun/2-fun-1-'}}] )
	  %% Line 1060
	  <T,_X_V> when 'true' ->
	      %% Line 1061
	      ( fun (_cor38) ->
		    {'error',{'fractionDigits','not_applicable',T}}
		-| [{'id',{0,0,'-fractionDigits_fun/2-fun-2-'}}] )
	end
'compare_floats'/2 =
    %% Line 1067
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <F1,F2>
	      when let <_cor2> =
		    call 'erlang':'=='
			(F1, [78|[97|[78]]])
		in  let <_cor3> =
			call 'erlang':'=='
			    (F2, [78|[97|[78]]])
		    in  call 'erlang':'or'
			    (_cor2, _cor3) ->
	      %% Line 1068
	      {'error',{'not_comparable'}}
	  %% Line 1069
	  <F1,_cor16>
	      when call 'erlang':'=:='
		    (_cor16,
		     F1) ->
	      %% Line 1070
	      'eq'
	  %% Line 1071
	  <F1,F2>
	      when let <_cor4> =
		    call 'erlang':'=='
			(F1, [73|[78|[70]]])
		in  let <_cor5> =
			call 'erlang':'=='
			    (F2, [45|[73|[78|[70]]]])
		    in  call 'erlang':'or'
			    (_cor4, _cor5) ->
	      %% Line 1072
	      'gt'
	  %% Line 1073
	  <F1,F2>
	      when let <_cor6> =
		    call 'erlang':'=='
			(F1, [45|[73|[78|[70]]]])
		in  let <_cor7> =
			call 'erlang':'=='
			    (F2, [73|[78|[70]]])
		    in  call 'erlang':'or'
			    (_cor6, _cor7) ->
	      %% Line 1074
	      'lt'
	  %% Line 1075
	  <Str1,Str2> when 'true' ->
	      %% Line 1076
	      case apply 'str_to_float'/1
		       (Str1) of
		<F1 = {S1,_X_B1,_X_D1,_X_E1}> when 'true' ->
		    %% Line 1077
		    case apply 'str_to_float'/1
			     (Str2) of
		      <F2 = {S2,_X_B2,_X_D2,_X_E2}> when 'true' ->
			  %% Line 1079
			  case <> of
			    %% Line 1080
			    <>
				when let <_cor10> =
				      call 'erlang':'=:='
					  (S1, '-')
				  in  let <_cor11> =
					  call 'erlang':'=:='
					      (S2, '+')
				      in  call 'erlang':'and'
					      (_cor10, _cor11) ->
				'lt'
			    %% Line 1081
			    <>
				when let <_cor12> =
				      call 'erlang':'=:='
					  (S1, '+')
				  in  let <_cor13> =
					  call 'erlang':'=:='
					      (S2, '-')
				      in  call 'erlang':'and'
					      (_cor12, _cor13) ->
				'gt'
			    %% Line 1083
			    <> when 'true' ->
				apply 'compare_floats2'/2
				    (F1, F2)
			  end
		      ( <_cor9> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor9})
			-| ['compiler_generated'] )
		    end
		( <_cor8> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor8})
		  -| ['compiler_generated'] )
	      end
	end
'compare_floats2'/2 =
    %% Line 1085
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{S1,B1,D1,E1},{_X_S2,B2,D2,E2}>
	      when let <_cor2> =
		    call 'erlang':'=='
			(B1, 0)
		in  let <_cor3> =
			call 'erlang':'=='
			    (B2, 0)
		    in  call 'erlang':'or'
			    (_cor2, _cor3) ->
	      let <I1> =
		  %% Line 1086
		  apply 'pow'/3
		      (B1, D1, E1)
	      in  let <I2> =
		      %% Line 1087
		      apply 'pow'/3
			  (B2, D2, E2)
		  in  %% Line 1088
		      case <> of
			<>
			    when call 'erlang':'>'
				  (I1,
				   I2) ->
			    %% Line 1089
			    apply 'sign'/2
				(S1, 'gt')
			%% Line 1090
			<>
			    when call 'erlang':'<'
				  (I1,
				   I2) ->
			    %% Line 1091
			    apply 'sign'/2
				(S1, 'lt')
			%% Line 1092
			<> when 'true' ->
			    %% Line 1093
			    'eq'
		      end
	  %% Line 1095
	  <{S1,B1,D1,E1},{_X_S2,B2,D2,E2}> when 'true' ->
	      let <I1> =
		  %% Line 1097
		  apply 'pow'/2
		      (B1, E1)
	      in  let <I2> =
		      %% Line 1098
		      apply 'pow'/2
			  (B2, E2)
		  in  %% Line 1099
		      case <> of
			%% Line 1100
			<>
			    when call 'erlang':'>'
				  (I1,
				   I2) ->
			    apply 'sign'/2
				(S1, 'gt')
			%% Line 1101
			<>
			    when call 'erlang':'<'
				  (I1,
				   I2) ->
			    apply 'sign'/2
				(S1, 'lt')
			%% Line 1102
			<> when 'true' ->
			    %% Line 1104
			    case <> of
			      %% Line 1105
			      <>
				  when call 'erlang':'=='
					(D1,
					 D2) ->
				  'eq'
			      %% Line 1106
			      <>
				  when call 'erlang':'<'
					(D1,
					 D2) ->
				  apply 'sign'/2
				      (S1, 'lt')
			      %% Line 1107
			      <>
				  when call 'erlang':'>'
					(D1,
					 D2) ->
				  apply 'sign'/2
				      (S1, 'gt')
			      ( <> when 'true' ->
				    primop 'match_fail'
					('if_clause')
				-| ['compiler_generated'] )
			    end
		      end
	  ( <_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8})
		  -| [{'function_name',{'compare_floats2',2}}] )
	    -| ['compiler_generated'] )
	end
'str_to_float'/1 =
    %% Line 1111
    fun (_cor0) ->
	let <Sign,Str> =
	    %% Line 1113
	    case _cor0 of
	      %% Line 1114
	      <[45|Str1]> when 'true' ->
		  <'-',Str1>
	      %% Line 1115
	      <_cor16> when 'true' ->
		  <'+',_cor0>
	    end
	in  %% Line 1117
	    case call 'string':'tokens'
		     (Str, [46]) of
	      %% Line 1118
	      <[B|[DE|[]]]> when 'true' ->
		  %% Line 1119
		  case call 'string':'tokens'
			   (DE, [69|[101]]) of
		    %% Line 1120
		    <[D|[E|[]]]> when 'true' ->
			let <_cor6> =
			    %% Line 1122
			    call 'erlang':'list_to_integer'
				(B)
			in  let <_cor5> =
				%% Line 1123
				apply 'remove_trailing_zeros'/1
				    (D)
			    in  let <_cor4> =
				    %% Line 1124
				    call 'erlang':'list_to_integer'
					(E)
				in  %% Line 1122
				    {Sign,_cor6,_cor5,_cor4}
		    %% Line 1125
		    <[D|[]]> when 'true' ->
			let <_cor8> =
			    %% Line 1126
			    call 'erlang':'list_to_integer'
				(B)
			in  let <_cor7> =
				%% Line 1127
				apply 'remove_trailing_zeros'/1
				    (D)
			    in  %% Line 1126
				{Sign,_cor8,_cor7,%% Line 1127
						  0}
		    ( <_cor9> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor9})
		      -| ['compiler_generated'] )
		  end
	      %% Line 1129
	      <[B|[]]> when 'true' ->
		  %% Line 1130
		  case call 'string':'tokens'
			   (Str, [69|[101]]) of
		    %% Line 1131
		    <[I|[E|[]]]> when 'true' ->
			let <_cor11> =
			    %% Line 1132
			    call 'erlang':'list_to_integer'
				(I)
			in  let <_cor10> =
				%% Line 1132
				call 'erlang':'list_to_integer'
				    (E)
			    in  %% Line 1132
				{Sign,_cor11,[48],_cor10}
		    %% Line 1133
		    <_cor17> when 'true' ->
			let <_cor12> =
			    %% Line 1134
			    call 'erlang':'list_to_integer'
				(B)
			in  %% Line 1134
			    {Sign,_cor12,[48],0}
		  end
	      ( <_cor14> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor14})
		-| ['compiler_generated'] )
	    end
'pow'/2 =
    %% Line 1138
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 1139
	    call 'math':'pow'
		(10, _cor0)
	in  %% Line 1139
	    case call 'erlang':'*'
		     (_cor1, _cor2) of
	      %% Line 1140
	      <I>
		  when call 'erlang':'<'
			(I,
			 1) ->
		  %% Line 1141
		  I
	      %% Line 1142
	      <I> when 'true' ->
		  call 'erlang':'round'
		      (I)
	    end
'pow'/3 =
    %% Line 1145
    fun (_cor2,_cor1,_cor0) ->
	let <_cor8> =
	    %% Line 1146
	    call 'math':'pow'
		(10, _cor0)
	in  let <_cor9> =
		%% Line 1146
		call 'erlang':'*'
		    (_cor2, _cor8)
	    in  let <_cor6> =
		    %% Line 1147
		    call 'erlang':'list_to_integer'
			(_cor1)
		in  let <_cor3> =
			%% Line 1147
			call 'erlang':'length'
			    (_cor1)
		    in  let <_cor4> =
			    %% Line 1147
			    call 'erlang':'-'
				(_cor0, _cor3)
			in  let <_cor5> =
				%% Line 1147
				call 'math':'pow'
				    (10, _cor4)
			    in  let <_cor7> =
				    %% Line 1147
				    call 'erlang':'*'
					(_cor6, _cor5)
				in  %% Line 1146
				    call 'erlang':'+'
					(_cor9, _cor7)
'sign'/2 =
    %% Line 1149
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'-','gt'> when 'true' ->
	      %% Line 1150
	      'lt'
	  %% Line 1151
	  <'-','lt'> when 'true' ->
	      %% Line 1152
	      'gt'
	  %% Line 1153
	  <_cor4,Rel> when 'true' ->
	      %% Line 1154
	      Rel
	end
'remove_trailing_zeros'/1 =
    %% Line 1156
    fun (_cor0) ->
	let <Pred> =
	    %% Line 1157
	    ( fun (_cor1) ->
		  case _cor1 of
		    <48> when 'true' ->
			'true'
		    <_cor8> when 'true' ->
			'false'
		  end
	      -| [{'id',{0,0,'-remove_trailing_zeros/1-fun-0-'}}] )
	in  let <_cor4> =
		%% Line 1158
		call 'lists':'reverse'
		    (_cor0)
	    in  let <_cor5> =
		    %% Line 1158
		    call 'lists':'dropwhile'
			(Pred, _cor4)
		in  %% Line 1158
		    case call 'lists':'reverse'
			     (_cor5) of
		      %% Line 1159
		      <[]> when 'true' ->
			  %% Line 1160
			  [48]
		      %% Line 1161
		      <Fr> when 'true' ->
			  Fr
		    end
'compare_durations'/2 =
    %% Line 1181
    fun (_cor1,_cor0) ->
	let <_cor8> =
	    %% Line 1190
	    apply 'add_duration2dateTime'/2
		({1696,9,1,0,0,0,{'pos',0,0}}, _cor1)
	in  let <_cor9> =
		%% Line 1190
		apply 'normalize_dateTime'/1
		    (_cor8)
	    in  let <_cor6> =
		    %% Line 1191
		    apply 'add_duration2dateTime'/2
			({1696,9,1,0,0,0,{'pos',0,0}}, _cor0)
		in  let <_cor7> =
			%% Line 1191
			apply 'normalize_dateTime'/1
			    (_cor6)
		    in  let <CmpRes1> =
			    %% Line 1190
			    apply 'compare_dateTime'/2
				(_cor9, _cor7)
			in  let <_cor13> =
				%% Line 1192
				apply 'add_duration2dateTime'/2
				    ({1697,2,1,0,0,0,{'pos',0,0}}, _cor1)
			    in  let <_cor14> =
				    %% Line 1192
				    apply 'normalize_dateTime'/1
					(_cor13)
				in  let <_cor11> =
					%% Line 1193
					apply 'add_duration2dateTime'/2
					    ({1697,2,1,0,0,0,{'pos',0,0}}, _cor0)
				    in  let <_cor12> =
					    %% Line 1193
					    apply 'normalize_dateTime'/1
						(_cor11)
					in  let <CmpRes2> =
						%% Line 1192
						apply 'compare_dateTime'/2
						    (_cor14, _cor12)
					    in  let <_cor18> =
						    %% Line 1194
						    apply 'add_duration2dateTime'/2
							({1903,3,1,0,0,0,{'pos',0,0}}, _cor1)
						in  let <_cor19> =
							%% Line 1194
							apply 'normalize_dateTime'/1
							    (_cor18)
						    in  let <_cor16> =
							    %% Line 1195
							    apply 'add_duration2dateTime'/2
								({1903,3,1,0,0,0,{'pos',0,0}}, _cor0)
							in  let <_cor17> =
								%% Line 1195
								apply 'normalize_dateTime'/1
								    (_cor16)
							    in  let <CmpRes3> =
								    %% Line 1194
								    apply 'compare_dateTime'/2
									(_cor19, _cor17)
								in  let <_cor23> =
									%% Line 1196
									apply 'add_duration2dateTime'/2
									    ({1903,7,1,0,0,0,{'pos',0,0}}, _cor1)
								    in  let <_cor24> =
									    %% Line 1196
									    apply 'normalize_dateTime'/1
										(_cor23)
									in  let <_cor21> =
										%% Line 1197
										apply 'add_duration2dateTime'/2
										    ({1903,7,1,0,0,0,{'pos',0,0}}, _cor0)
									    in  let <_cor22> =
										    %% Line 1197
										    apply 'normalize_dateTime'/1
											(_cor21)
										in  let <CmpRes4> =
											%% Line 1196
											apply 'compare_dateTime'/2
											    (_cor24, _cor22)
										    in  %% Line 1198
											case <> of
											  %% Line 1199
											  <>
											      when try
												    let <_cor26> =
													call 'erlang':'=='
													    (CmpRes1, CmpRes2)
												    in  let <_cor27> =
													    %% Line 1200
													    call 'erlang':'=='
														(CmpRes1, CmpRes3)
													in  let <_cor28> =
														%% Line 1201
														call 'erlang':'=='
														    (CmpRes1, CmpRes4)
													    in  let <_cor29> =
														    call 'erlang':'and'
															(_cor27, _cor28)
														in  call 'erlang':'and'
															(_cor26, _cor29)
												of <Try> ->
												    Try
												catch <T,R> ->
												    'false' ->
											      %% Line 1202
											      CmpRes1
											  %% Line 1203
											  <> when 'true' ->
											      'indefinite'
											end
'compare_dateTime'/2 =
    %% Line 1207
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <DT1 = {_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,Z},DT2 = {_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30}>
	      when call 'erlang':'=:='
		    (_cor30,
		     Z) ->
	      %% Line 1208
	      case call 'erlang':'<'
		       (DT1, DT2) of
		%% Line 1209
		<'true'> when 'true' ->
		    'lt'
		%% Line 1210
		<_cor31> when 'true' ->
		    %% Line 1211
		    case call 'erlang':'>'
			     (DT1, DT2) of
		      %% Line 1212
		      <'true'> when 'true' ->
			  %% Line 1213
			  'gt'
		      %% Line 1214
		      <_cor32> when 'true' ->
			  'eq'
		    end
	      end
	  %% Line 1222
	  <P = {_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,{_cor39,_cor40,_cor41}},_X_Q = {Y,M,D,H,Min,S,'none'}> when 'true' ->
	      let <_cor4> =
		  %% Line 1223
		  apply 'normalize_dateTime'/1
		      ({Y,M,D,H,Min,S,{'pos',14,0}})
	      in  %% Line 1223
		  case apply 'compare_dateTime'/2
			   (P, _cor4) of
		    %% Line 1224
		    <'lt'> when 'true' ->
			%% Line 1225
			'lt'
		    %% Line 1226
		    <_cor42> when 'true' ->
			let <_cor5> =
			    %% Line 1227
			    apply 'normalize_dateTime'/1
				({Y,M,D,H,Min,S,{'neg',14,0}})
			in  %% Line 1227
			    case apply 'compare_dateTime'/2
				     (P, _cor5) of
			      %% Line 1228
			      <'gt'> when 'true' ->
				  %% Line 1229
				  'gt'
			      %% Line 1230
			      <_cor43> when 'true' ->
				  %% Line 1231
				  'indefinite'
			    end
		  end
	  %% Line 1239
	  <_X_P = {Y,M,D,H,Min,S,'none'},Q = {_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,{_cor50,_cor51,_cor52}}> when 'true' ->
	      let <_cor8> =
		  %% Line 1240
		  apply 'normalize_dateTime'/1
		      ({Y,M,D,H,Min,S,{'neg',14,0}})
	      in  %% Line 1240
		  case apply 'compare_dateTime'/2
			   (_cor8, Q) of
		    %% Line 1241
		    <'lt'> when 'true' ->
			%% Line 1242
			'lt'
		    %% Line 1243
		    <_cor53> when 'true' ->
			let <_cor9> =
			    %% Line 1244
			    apply 'normalize_dateTime'/1
				({Y,M,D,H,Min,S,{'pos',14,0}})
			in  %% Line 1244
			    case apply 'compare_dateTime'/2
				     (_cor9, Q) of
			      %% Line 1245
			      <'gt'> when 'true' ->
				  %% Line 1246
				  'gt'
			      %% Line 1247
			      <_cor54> when 'true' ->
				  %% Line 1248
				  'indefinite'
			    end
		  end
	  %% Line 1251
	  <P,Q>
	      when call 'erlang':'is_list'
		    (P) ->
	      let <_cor12> =
		  %% Line 1252
		  apply 'dateTime_atoms'/1
		      (P)
	      in  let <_cor13> =
		      %% Line 1252
		      apply 'normalize_dateTime'/1
			  (_cor12)
		  in  %% Line 1252
		      apply 'compare_dateTime'/2
			  (_cor13, Q)
	  %% Line 1253
	  <P,Q>
	      when call 'erlang':'is_list'
		    (Q) ->
	      let <_cor14> =
		  %% Line 1254
		  apply 'dateTime_atoms'/1
		      (Q)
	      in  let <_cor15> =
		      %% Line 1254
		      apply 'normalize_dateTime'/1
			  (_cor14)
		  in  %% Line 1254
		      apply 'compare_dateTime'/2
			  (P, _cor15)
	  %% Line 1255
	  <_X_P,_X_Q> when 'true' ->
	      %% Line 1256
	      'indefinite'
	end
'fQuotient'/2 =
    %% Line 1258
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <A,B>
	      when call 'erlang':'is_float'
		    (A) ->
	      let <_cor2> =
		  %% Line 1259
		  apply 'floor'/1
		      (A)
	      in  %% Line 1259
		  apply 'fQuotient'/2
		      (_cor2, B)
	  %% Line 1260
	  <A,B>
	      when call 'erlang':'is_float'
		    (B) ->
	      let <_cor3> =
		  %% Line 1261
		  apply 'floor'/1
		      (B)
	      in  %% Line 1261
		  apply 'fQuotient'/2
		      (A, _cor3)
	  %% Line 1262
	  <A,B>
	      when let <_cor4> =
		    call 'erlang':'>='
			(A, 0)
		in  let <_cor5> =
			call 'erlang':'>='
			    (B, 0)
		    in  call 'erlang':'and'
			    (_cor4, _cor5) ->
	      %% Line 1263
	      call 'erlang':'div'
		  (A, B)
	  %% Line 1264
	  <A,B>
	      when let <_cor6> =
		    call 'erlang':'<'
			(A, 0)
		in  let <_cor7> =
			call 'erlang':'<'
			    (B, 0)
		    in  call 'erlang':'and'
			    (_cor6, _cor7) ->
	      %% Line 1265
	      call 'erlang':'div'
		  (A, B)
	  %% Line 1266
	  <A,B> when 'true' ->
	      %% Line 1267
	      case call 'erlang':'rem'
		       (A, B) of
		%% Line 1268
		<0> when 'true' ->
		    %% Line 1269
		    call 'erlang':'div'
			(A, B)
		%% Line 1270
		<_cor12> when 'true' ->
		    let <_cor8> =
			%% Line 1271
			call 'erlang':'div'
			    (A, B)
		    in  %% Line 1271
			call 'erlang':'-'
			    (_cor8, 1)
	      end
	end
'fQuotient'/3 =
    %% Line 1274
    fun (_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 1275
	    call 'erlang':'-'
		(_cor2, _cor1)
	in  let <_cor3> =
		%% Line 1275
		call 'erlang':'-'
		    (_cor0, _cor1)
	    in  %% Line 1275
		apply 'fQuotient'/2
		    (_cor4, _cor3)
'floor'/1 =
    %% Line 1277
    fun (_cor0) ->
	%% Line 1278
	case call 'erlang':'round'
		 (_cor0) of
	  %% Line 1279
	  <I>
	      when call 'erlang':'>'
		    (I,
		     _cor0) ->
	      %% Line 1280
	      call 'erlang':'-'
		  (I, 1)
	  %% Line 1281
	  <I> when 'true' ->
	      I
	end
'modulo'/2 =
    %% Line 1284
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 1285
	    apply 'fQuotient'/2
		(_cor1, _cor0)
	in  let <_cor3> =
		%% Line 1285
		call 'erlang':'*'
		    (_cor2, _cor0)
	    in  %% Line 1285
		call 'erlang':'-'
		    (_cor1, _cor3)
'modulo'/3 =
    %% Line 1287
    fun (_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 1288
	    call 'erlang':'-'
		(_cor2, _cor1)
	in  let <_cor3> =
		%% Line 1288
		call 'erlang':'-'
		    (_cor0, _cor1)
	    in  let <_cor5> =
		    %% Line 1288
		    apply 'modulo'/2
			(_cor4, _cor3)
		in  %% Line 1288
		    call 'erlang':'+'
			(_cor5, _cor1)
'maximumDayInMonthFor'/2 =
    %% Line 1290
    fun (_cor1,_cor0) ->
	let <M> =
	    %% Line 1291
	    apply 'modulo'/3
		(_cor0, 1, 13)
	in  let <_cor3> =
		%% Line 1292
		apply 'fQuotient'/3
		    (_cor0, 1, 13)
	    in  let <Y> =
		    %% Line 1292
		    call 'erlang':'+'
			(_cor1, _cor3)
		in  %% Line 1293
		    apply 'monthValue'/2
			(M, Y)
'monthValue'/2 =
    %% Line 1295
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <M,_X_Y>
	      when let <_cor2> =
		    call 'erlang':'=='
			(M, 1)
		in  let <_cor3> =
			call 'erlang':'=='
			    (M, 3)
		    in  let <_cor4> =
			    call 'erlang':'=='
				(M, 5)
			in  let <_cor5> =
				call 'erlang':'=='
				    (M, 7)
			    in  let <_cor6> =
				    call 'erlang':'=='
					(M, 8)
				in  let <_cor7> =
					call 'erlang':'=='
					    (M, 10)
				    in  let <_cor8> =
					    call 'erlang':'=='
						(M, 12)
					in  let <_cor9> =
						call 'erlang':'or'
						    (_cor7, _cor8)
					    in  let <_cor10> =
						    call 'erlang':'or'
							(_cor6, _cor9)
						in  let <_cor11> =
							call 'erlang':'or'
							    (_cor5, _cor10)
						    in  let <_cor12> =
							    call 'erlang':'or'
								(_cor4, _cor11)
							in  let <_cor13> =
								call 'erlang':'or'
								    (_cor3, _cor12)
							    in  call 'erlang':'or'
								    (_cor2, _cor13) ->
	      %% Line 1296
	      31
	  %% Line 1297
	  <M,_X_Y>
	      when let <_cor14> =
		    call 'erlang':'=='
			(M, 4)
		in  let <_cor15> =
			call 'erlang':'=='
			    (M, 6)
		    in  let <_cor16> =
			    call 'erlang':'=='
				(M, 9)
			in  let <_cor17> =
				call 'erlang':'=='
				    (M, 11)
			    in  let <_cor18> =
				    call 'erlang':'or'
					(_cor16, _cor17)
				in  let <_cor19> =
					call 'erlang':'or'
					    (_cor15, _cor18)
				    in  call 'erlang':'or'
					    (_cor14, _cor19) ->
	      %% Line 1298
	      30
	  %% Line 1299
	  <_X_M,Y> when 'true' ->
	      %% Line 1300
	      case apply 'modulo'/2
		       (Y, 400) of
		%% Line 1301
		<0> when 'true' ->
		    %% Line 1302
		    29
		%% Line 1303
		<_cor27> when 'true' ->
		    let <_cor21> =
			%% Line 1304
			apply 'modulo'/2
			    (Y, 100)
		    in  let <_cor22> =
			    %% Line 1304
			    call 'erlang':'/='
				(_cor21, 0)
			in  let <_cor20> =
				%% Line 1304
				apply 'modulo'/2
				    (Y, 4)
			    in  %% Line 1304
				case <_cor22,_cor20> of
				  %% Line 1305
				  <'true',0> when 'true' ->
				      %% Line 1306
				      29
				  %% Line 1307
				  <_fol104,_fol105> when 'true' ->
				      %% Line 1308
				      28
				end
	      end
	end
'add_duration2dateTime'/2 =
    %% Line 1315
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <S,D>
	      when let <_cor2> =
		    call 'erlang':'is_list'
			(S)
		in  let <_cor3> =
			call 'erlang':'is_list'
			    (D)
		    in  call 'erlang':'and'
			    (_cor2, _cor3) ->
	      let <Satoms> =
		  %% Line 1316
		  apply 'dateTime_atoms'/1
		      (S)
	      in  %% Line 1317
		  case apply 'duration_atoms'/1
			   (D) of
		    %% Line 1318
		    <Datoms = {_cor9,_cor10,_cor11,_cor12,_cor13,_cor14}> when 'true' ->
			%% Line 1319
			apply 'add_duration2dateTime2'/2
			    (Satoms, Datoms)
		    %% Line 1320
		    <Err> when 'true' ->
			%% Line 1321
			{'error',Err}
		  end
	  %% Line 1323
	  <S = {_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21},D> when 'true' ->
	      %% Line 1324
	      case apply 'duration_atoms'/1
		       (D) of
		%% Line 1325
		<Datoms = {_cor22,_cor23,_cor24,_cor25,_cor26,_cor27}> when 'true' ->
		    %% Line 1326
		    apply 'add_duration2dateTime2'/2
			(S, Datoms)
		%% Line 1327
		<Err> when 'true' ->
		    %% Line 1328
		    {'error',Err}
	      end
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'add_duration2dateTime',2}}] )
	    -| ['compiler_generated'] )
	end
'add_duration2dateTime2'/2 =
    %% Line 1331
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{Syear,Smonth,Sday,Shour,Sminute,Ssec,Szone},%% Line 1332
							{Dyears,Dmonths,Ddays,Dhours,Dminutes,Dsecs}> when 'true' ->
	      let <Temp1> =
		  %% Line 1335
		  call 'erlang':'+'
		      (Smonth, Dmonths)
	      in  let <Emonth> =
		      %% Line 1336
		      apply 'modulo'/3
			  (Temp1, 1, 13)
		  in  let <Carry1> =
			  %% Line 1337
			  apply 'fQuotient'/3
			      (Temp1, 1, 13)
		      in  let <_cor5> =
			      %% Line 1340
			      call 'erlang':'+'
				  (Syear, Dyears)
			  in  let <Eyear> =
				  %% Line 1340
				  call 'erlang':'+'
				      (_cor5, Carry1)
			      in  let <Temp2> =
				      %% Line 1343
				      call 'erlang':'+'
					  (Ssec, Dsecs)
				  in  let <Esecs> =
					  %% Line 1344
					  apply 'modulo'/2
					      (Temp2, 60)
				      in  let <Carry2> =
					      %% Line 1345
					      apply 'fQuotient'/2
						  (Temp2, 60)
					  in  let <_cor10> =
						  %% Line 1348
						  call 'erlang':'+'
						      (Sminute, Dminutes)
					      in  let <Temp3> =
						      %% Line 1348
						      call 'erlang':'+'
							  (_cor10, Carry2)
						  in  let <Eminute> =
							  %% Line 1349
							  apply 'modulo'/2
							      (Temp3, 60)
						      in  let <Carry3> =
							      %% Line 1350
							      apply 'fQuotient'/2
								  (Temp3, 60)
							  in  let <_cor14> =
								  %% Line 1353
								  call 'erlang':'+'
								      (Shour, Dhours)
							      in  let <Temp4> =
								      %% Line 1353
								      call 'erlang':'+'
									  (_cor14, Carry3)
								  in  let <Ehour> =
									  %% Line 1354
									  apply 'modulo'/2
									      (Temp4, 24)
								      in  let <Carry4> =
									      %% Line 1355
									      apply 'fQuotient'/2
										  (Temp4, 24)
									  in  let <_cor20> =
										  %% Line 1359
										  case apply 'maximumDayInMonthFor'/2
											   (Eyear, Emonth) of
										    %% Line 1360
										    <MaxDay>
											when call 'erlang':'>'
											      (Sday,
											       MaxDay) ->
											%% Line 1361
											MaxDay
										    %% Line 1362
										    <_cor27> when 'true' ->
											%% Line 1363
											case call 'erlang':'<'
												 (Sday, 1) of
											  %% Line 1364
											  <'true'> when 'true' ->
											      %% Line 1365
											      1
											  %% Line 1366
											  <_cor28> when 'true' ->
											      %% Line 1367
											      Sday
											end
										  end
									      in  let <_cor22> =
										      %% Line 1371
										      call 'erlang':'+'
											  (_cor20, Ddays)
										  in  let <_cor23> =
											  %% Line 1371
											  call 'erlang':'+'
											      (_cor22, Carry4)
										      in  %% Line 1370
											  case %% Line 1371
											       apply 'carry_loop'/3
												   (_cor23, Emonth, Eyear) of
											    <{Eyear2,Emonth2,Eday}> when 'true' ->
												%% Line 1372
												{Eyear2,Emonth2,Eday,Ehour,Eminute,Esecs,Szone}
											    ( <_cor24> when 'true' ->
												  primop 'match_fail'
												      ({'badmatch',_cor24})
											      -| ['compiler_generated'] )
											  end
	  ( <_cor26,_cor25> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor26,_cor25})
		  -| [{'function_name',{'add_duration2dateTime2',2}}] )
	    -| ['compiler_generated'] )
	end
'carry_loop'/3 =
    %% Line 1374
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Eday,Emonth,Eyear>
	      when call 'erlang':'<'
		    (Eday,
		     1) ->
	      let <_cor8> =
		  %% Line 1375
		  call 'erlang':'-'
		      (Emonth, 1)
	      in  let <_cor9> =
		      %% Line 1375
		      apply 'maximumDayInMonthFor'/2
			  (Eyear, _cor8)
		  in  let <_cor10> =
			  %% Line 1375
			  call 'erlang':'+'
			      (Eday, _cor9)
		      in  let <_cor6> =
			      %% Line 1376
			      call 'erlang':'-'
				  (Emonth, 1)
			  in  let <_cor7> =
				  %% Line 1376
				  apply 'modulo'/3
				      (_cor6, 1, 13)
			      in  let <_cor3> =
				      %% Line 1377
				      call 'erlang':'-'
					  (Emonth, 1)
				  in  let <_cor4> =
					  %% Line 1377
					  apply 'fQuotient'/3
					      (_cor3, 1, 13)
				      in  let <_cor5> =
					      %% Line 1377
					      call 'erlang':'+'
						  (Eyear, _cor4)
					  in  %% Line 1375
					      apply 'carry_loop'/3
						  (_cor10, _cor7, _cor5)
	  %% Line 1378
	  <Eday,Emonth,Eyear> when 'true' ->
	      %% Line 1379
	      case apply 'maximumDayInMonthFor'/2
		       (Eyear, Emonth) of
		%% Line 1380
		<MaxD>
		    when call 'erlang':'>'
			  (Eday,
			   MaxD) ->
		    let <_cor16> =
			%% Line 1381
			apply 'maximumDayInMonthFor'/2
			    (Eyear, Emonth)
		    in  let <_cor17> =
			    %% Line 1381
			    call 'erlang':'-'
				(Eday, _cor16)
			in  let <_cor14> =
				%% Line 1382
				call 'erlang':'+'
				    (Emonth, 1)
			    in  let <_cor15> =
				    %% Line 1382
				    apply 'modulo'/3
					(_cor14, 1, 13)
				in  let <_cor11> =
					%% Line 1383
					call 'erlang':'+'
					    (Emonth, 1)
				    in  let <_cor12> =
					    %% Line 1383
					    apply 'fQuotient'/3
						(_cor11, 1, 13)
					in  let <_cor13> =
						%% Line 1383
						call 'erlang':'+'
						    (Eyear, _cor12)
					    in  %% Line 1381
						apply 'carry_loop'/3
						    (_cor17, _cor15, _cor13)
		%% Line 1384
		<_cor22> when 'true' ->
		    %% Line 1385
		    {Eyear,Emonth,Eday}
	      end
	end
'dateTime_atoms'/1 =
    %% Line 1389
    fun (_cor0) ->
	case _cor0 of
	  <[45|DT]> when 'true' ->
	      %% Line 1390
	      apply 'dateTime_atoms'/2
		  (DT, 'neg')
	  %% Line 1391
	  <DT> when 'true' ->
	      %% Line 1392
	      apply 'dateTime_atoms'/2
		  (DT, 'pos')
	end
'dateTime_atoms'/2 =
    %% Line 1393
    fun (_cor1,_cor0) ->
	%% Line 1394
	case call 'string':'tokens'
		 (_cor1, [84]) of
	  <[Date|[TimeZone|[]]]> when 'true' ->
	      %% Line 1395
	      case call 'string':'tokens'
		       (Date, [45]) of
		<[YY|[MM|[DD|[]]]]> when 'true' ->
		    let <_cor10> =
			%% Line 1397
			case call 'lists':'reverse'
				 (TimeZone) of
			  %% Line 1398
			  <[90|_cor21]> when 'true' ->
			      let <_cor4> =
				  %% Line 1399
				  call 'string':'tokens'
				      (TimeZone, [90|[58]])
			      in  %% Line 1399
				  {[90],'pos',_cor4}
			  %% Line 1400
			  <_cor22> when 'true' ->
			      let <ZS> =
				  %% Line 1401
				  apply 'zone_sign'/1
				      (TimeZone)
			      in  %% Line 1402
				  case call 'string':'tokens'
					   (TimeZone, [45|[43]]) of
				    %% Line 1403
				    <[Time|[Z|[]]]> when 'true' ->
					let <_cor6> =
					    %% Line 1404
					    call 'string':'tokens'
						(Time, [58])
					in  %% Line 1404
					    {Z,ZS,_cor6}
				    %% Line 1405
				    <[Time|[]]> when 'true' ->
					let <_cor7> =
					    %% Line 1406
					    call 'string':'tokens'
						(Time, [58])
					in  %% Line 1406
					    {'none',ZS,_cor7}
				    ( <_cor8> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_cor8})
				      -| ['compiler_generated'] )
				  end
			end
		    in  %% Line 1396
			case _cor10 of
			  <{Zone,ZoneSign,[Hour|[Min|[Sec|[]]]]}> when 'true' ->
			      let <_cor18> =
				  %% Line 1409
				  apply 'set_sign'/2
				      (_cor0, YY)
			      in  let <_cor17> =
				      %% Line 1409
				      call 'erlang':'list_to_integer'
					  (MM)
				  in  let <_cor16> =
					  %% Line 1409
					  call 'erlang':'list_to_integer'
					      (DD)
				      in  let <_cor15> =
					      %% Line 1410
					      call 'erlang':'list_to_integer'
						  (Hour)
					  in  let <_cor14> =
						  %% Line 1410
						  call 'erlang':'list_to_integer'
						      (Min)
					      in  let <_cor13> =
						      %% Line 1410
						      apply 'sign_sec'/2
							  ('pos', Sec)
						  in  let <_cor12> =
							  %% Line 1411
							  apply 'zone_atoms'/2
							      (ZoneSign, Zone)
						      in  %% Line 1409
							  {_cor18,_cor17,_cor16,_cor15,_cor14,_cor13,_cor12}
			  ( <_cor11> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor11})
			    -| ['compiler_generated'] )
			end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'zone_sign'/1 =
    %% Line 1413
    fun (_cor0) ->
	%% Line 1414
	case call 'lists':'member'
		 (45, _cor0) of
	  %% Line 1415
	  <'true'> when 'true' ->
	      %% Line 1416
	      'neg'
	  %% Line 1417
	  <_cor3> when 'true' ->
	      %% Line 1418
	      'pos'
	end
'zone_atoms'/2 =
    %% Line 1421
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <_X_Sign,[90]> when 'true' ->
	      %% Line 1422
	      {'pos',0,0}
	  %% Line 1423
	  <Sign,Zone>
	      when call 'erlang':'is_list'
		    (Zone) ->
	      %% Line 1424
	      case call 'string':'tokens'
		       (Zone, [58]) of
		%% Line 1425
		<[H|[M|[]]]> when 'true' ->
		    let <_cor3> =
			%% Line 1426
			call 'erlang':'list_to_integer'
			    (H)
		    in  let <_cor2> =
			    %% Line 1426
			    call 'erlang':'list_to_integer'
				(M)
			in  %% Line 1426
			    {Sign,_cor3,_cor2}
		%% Line 1427
		<_cor7> when 'true' ->
		    'none'
	      end
	  %% Line 1429
	  <_X_Sign,Zone> when 'true' ->
	      %% Line 1430
	      Zone
	end
'duration_atoms'/1 =
    %% Line 1434
    fun (_cor0) ->
	case _cor0 of
	  <[45|[80|Dur]]> when 'true' ->
	      %% Line 1435
	      apply 'duration_atoms2'/2
		  (Dur, 'neg')
	  %% Line 1436
	  <[80|Dur]> when 'true' ->
	      %% Line 1437
	      apply 'duration_atoms2'/2
		  (Dur, 'pos')
	  %% Line 1438
	  <Dur> when 'true' ->
	      %% Line 1439
	      {'illegal_duration',Dur}
	end
'duration_atoms2'/2 =
    %% Line 1440
    fun (_cor1,_cor0) ->
	%% Line 1441
	case call 'lists':'member'
		 (84, _cor1) of
	  %% Line 1442
	  <'true'> when 'true' ->
	      %% Line 1443
	      case call 'string':'tokens'
		       (_cor1, [84]) of
		%% Line 1444
		<[Date|[Time|[]]]> when 'true' ->
		    %% Line 1445
		    case apply 'duration_atoms_date'/1
			     (Date) of
		      %% Line 1446
		      <{Y,M,D}> when 'true' ->
			  %% Line 1447
			  case apply 'duration_atoms_time'/1
				   (Time) of
			    %% Line 1448
			    <{Hour,Min,Sec}> when 'true' ->
				let <_cor7> =
				    %% Line 1449
				    apply 'set_sign'/2
					(_cor0, Y)
				in  let <_cor6> =
					%% Line 1449
					apply 'set_sign'/2
					    (_cor0, M)
				    in  let <_cor5> =
					    %% Line 1450
					    apply 'set_sign'/2
						(_cor0, D)
					in  let <_cor4> =
						%% Line 1450
						apply 'set_sign'/2
						    (_cor0, Hour)
					    in  let <_cor3> =
						    %% Line 1451
						    apply 'set_sign'/2
							(_cor0, Min)
						in  let <_cor2> =
							%% Line 1451
							apply 'sign_sec'/2
							    (_cor0, Sec)
						    in  %% Line 1449
							{_cor7,_cor6,_cor5,_cor4,_cor3,_cor2}
			    %% Line 1452
			    <Err> when 'true' ->
				%% Line 1453
				Err
			  end
		      %% Line 1455
		      <Err> when 'true' ->
			  %% Line 1456
			  Err
		    end
		%% Line 1458
		<[Time|[]]> when 'true' ->
		    %% Line 1459
		    case apply 'duration_atoms_time'/1
			     (Time) of
		      %% Line 1460
		      <{Hour,Min,Sec}> when 'true' ->
			  let <_cor12> =
			      %% Line 1461
			      apply 'set_sign'/2
				  (_cor0, Hour)
			  in  let <_cor11> =
				  %% Line 1461
				  apply 'set_sign'/2
				      (_cor0, Min)
			      in  let <_cor10> =
				      %% Line 1462
				      apply 'sign_sec'/2
					  (_cor0, Sec)
				  in  %% Line 1461
				      {0,0,0,_cor12,_cor11,_cor10}
		      %% Line 1463
		      <Err> when 'true' ->
			  %% Line 1464
			  Err
		    end
		%% Line 1466
		<Err> when 'true' ->
		    %% Line 1467
		    {'illegal_duration',Err}
	      end
	  %% Line 1469
	  <_cor22> when 'true' ->
	      %% Line 1470
	      case apply 'duration_atoms_date'/1
		       (_cor1) of
		<{Y,M,D}> when 'true' ->
		    let <_cor18> =
			%% Line 1471
			apply 'set_sign'/2
			    (_cor0, Y)
		    in  let <_cor17> =
			    %% Line 1471
			    apply 'set_sign'/2
				(_cor0, M)
			in  let <_cor16> =
				%% Line 1471
				apply 'set_sign'/2
				    (_cor0, D)
			    in  %% Line 1471
				{_cor18,_cor17,_cor16,0,0,0}
		( <_cor15> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor15})
		  -| ['compiler_generated'] )
	      end
	end
'duration_atoms_date'/1 =
    %% Line 1474
    fun (_cor0) ->
	%% Line 1475
	case apply 'get_digit'/2
		 (_cor0, 89) of
	  <{Y,Date2}> when 'true' ->
	      %% Line 1476
	      case apply 'get_digit'/2
		       (Date2, 77) of
		<{M,Date3}> when 'true' ->
		    %% Line 1477
		    case apply 'get_digit'/2
			     (Date3, 68) of
		      <{D,Rest}> when 'true' ->
			  %% Line 1478
			  case Rest of
			    %% Line 1479
			    <[]> when 'true' ->
				{Y,M,D}
			    %% Line 1480
			    <Err> when 'true' ->
				{'illegal_duration',Err}
			  end
		      ( <_cor3> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor3})
			-| ['compiler_generated'] )
		    end
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'duration_atoms_time'/1 =
    %% Line 1482
    fun (_cor0) ->
	%% Line 1483
	case apply 'get_digit'/2
		 (_cor0, 72) of
	  <{H,Time2}> when 'true' ->
	      %% Line 1484
	      case apply 'get_digit'/2
		       (Time2, 77) of
		<{M,Time3}> when 'true' ->
		    %% Line 1485
		    case apply 'get_sec'/1
			     (Time3) of
		      <{S,Rest}> when 'true' ->
			  %% Line 1486
			  case Rest of
			    %% Line 1487
			    <[]> when 'true' ->
				%% Line 1488
				{H,M,S}
			    %% Line 1489
			    <Err> when 'true' ->
				%% Line 1490
				{'illegal_duration',Err}
			  end
		      ( <_cor3> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor3})
			-| ['compiler_generated'] )
		    end
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'get_digit'/2 =
    %% Line 1493
    fun (_cor1,_cor0) ->
	%% Line 1494
	apply 'get_digit'/4
	    (_cor1, _cor0, [], _cor1)
'get_digit'/4 =
    %% Line 1495
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[Delim|T],_cor11,Acc,_X_Str>
	      when call 'erlang':'=:='
		    (_cor11,
		     Delim) ->
	      let <_cor4> =
		  %% Line 1496
		  call 'lists':'reverse'
		      (Acc)
	      in  %% Line 1496
		  {_cor4,T}
	  %% Line 1497
	  <[H|T],Delim,Acc,Str>
	      when let <_cor5> =
		    call 'erlang':'>='
			(H, 48)
		in  let <_cor6> =
			call 'erlang':'=<'
			    (H, 57)
		    in  call 'erlang':'and'
			    (_cor5, _cor6) ->
	      %% Line 1498
	      apply 'get_digit'/4
		  (T, Delim, [H|Acc], Str)
	  %% Line 1499
	  <[],_cor12,[],_X_Str> when 'true' ->
	      %% Line 1500
	      {[48],[]}
	  %% Line 1501
	  <[],_cor13,_cor14,Str> when 'true' ->
	      %% Line 1502
	      {[48],Str}
	  %% Line 1503
	  <_cor15,_cor16,_cor17,Str> when 'true' ->
	      %% Line 1506
	      {[48],Str}
	end
'get_sec'/1 =
    %% Line 1508
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      %% Line 1509
	      {[48],[]}
	  %% Line 1510
	  <Str> when 'true' ->
	      %% Line 1511
	      apply 'get_sec'/3
		  (Str, [], Str)
	end
'get_sec'/3 =
    %% Line 1512
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[H|T],Acc,Str>
	      when let <_cor3> =
		    call 'erlang':'>='
			(H, 48)
		in  let <_cor4> =
			call 'erlang':'=<'
			    (H, 57)
		    in  call 'erlang':'and'
			    (_cor3, _cor4) ->
	      %% Line 1513
	      apply 'get_sec'/3
		  (T, [H|Acc], Str)
	  %% Line 1514
	  <[46|T],Acc,Str> when 'true' ->
	      %% Line 1515
	      apply 'get_sec'/3
		  (T, [46|Acc], Str)
	  %% Line 1516
	  <[83|T],Acc,_cor9> when 'true' ->
	      let <_cor5> =
		  %% Line 1517
		  call 'lists':'reverse'
		      (Acc)
	      in  %% Line 1517
		  {_cor5,T}
	  %% Line 1518
	  <_cor10,_cor11,Str> when 'true' ->
	      %% Line 1519
	      {[48],Str}
	end
'set_sign'/2 =
    %% Line 1522
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'pos',Istr> when 'true' ->
	      %% Line 1523
	      call 'erlang':'list_to_integer'
		  (Istr)
	  %% Line 1524
	  <_cor5,Istr> when 'true' ->
	      let <_cor2> =
		  %% Line 1525
		  [45|Istr]
	      in  %% Line 1525
		  call 'erlang':'list_to_integer'
		      (_cor2)
	end
'sign_sec'/2 =
    %% Line 1526
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'pos',Sec> when 'true' ->
	      %% Line 1527
	      case call 'lists':'member'
		       (46, Sec) of
		%% Line 1528
		<'true'> when 'true' ->
		    %% Line 1529
		    call 'erlang':'list_to_float'
			(Sec)
		%% Line 1530
		<_cor6> when 'true' ->
		    %% Line 1531
		    call 'erlang':'list_to_integer'
			(Sec)
	      end
	  %% Line 1533
	  <_cor7,Sec> when 'true' ->
	      let <_cor3> =
		  %% Line 1534
		  [45|Sec]
	      in  %% Line 1534
		  apply 'sign_sec'/2
		      ('pos', _cor3)
	end
'invert_sign'/1 =
    %% Line 1536
    fun (_cor0) ->
	case _cor0 of
	  <'pos'> when 'true' ->
	      %% Line 1537
	      'neg'
	  %% Line 1538
	  <'neg'> when 'true' ->
	      %% Line 1539
	      'pos'
	  %% Line 1540
	  <S> when 'true' ->
	      %% Line 1541
	      S
	end
'normalize_dateTime'/1 =
    %% Line 1543
    fun (_cor0) ->
	case _cor0 of
	  <{Y,M,D,Hour,Min,Sec,{Sign,ZH,ZM}}> when 'true' ->
	      let <_cor2> =
		  %% Line 1545
		  apply 'invert_sign'/1
		      (Sign)
	      in  let <_cor1> =
		      %% Line 1545
		      call 'erlang':'integer_to_list'
			  (ZM)
		  in  let <_cor3> =
			  %% Line 1545
			  apply 'set_sign'/2
			      (_cor2, _cor1)
		      in  let <TmpMin> =
			      %% Line 1545
			      call 'erlang':'+'
				  (Min, _cor3)
			  in  let <NMin> =
				  %% Line 1546
				  apply 'modulo'/2
				      (TmpMin, 60)
			      in  let <Carry1> =
				      %% Line 1547
				      apply 'fQuotient'/2
					  (TmpMin, 60)
				  in  let <_cor8> =
					  %% Line 1550
					  apply 'invert_sign'/1
					      (Sign)
				      in  let <_cor7> =
					      %% Line 1550
					      call 'erlang':'integer_to_list'
						  (ZH)
					  in  let <_cor9> =
						  %% Line 1550
						  apply 'set_sign'/2
						      (_cor8, _cor7)
					      in  let <_cor10> =
						      %% Line 1550
						      call 'erlang':'+'
							  (Hour, _cor9)
						  in  let <TmpHour> =
							  %% Line 1550
							  call 'erlang':'+'
							      (_cor10, Carry1)
						      in  let <NHour> =
							      %% Line 1551
							      apply 'modulo'/2
								  (TmpHour, 24)
							  in  let <Carry2> =
								  %% Line 1552
								  apply 'fQuotient'/2
								      (TmpHour, 24)
							      in  let <_cor14> =
								      %% Line 1555
								      call 'erlang':'+'
									  (D, Carry2)
								  in  %% Line 1554
								      case %% Line 1555
									   apply 'carry_loop'/3
									       (_cor14, M, Y) of
									<{NY,NM,ND}> when 'true' ->
									    %% Line 1556
									    {NY,NM,ND,NHour,NMin,Sec,{'pos',0,0}}
									( <_cor15> when 'true' ->
									      primop 'match_fail'
										  ({'badmatch',_cor15})
									  -| ['compiler_generated'] )
								      end
	  %% Line 1557
	  <DT> when 'true' ->
	      %% Line 1558
	      DT
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('xmerl_xsd_type')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('xmerl_xsd_type', _cor0)
end