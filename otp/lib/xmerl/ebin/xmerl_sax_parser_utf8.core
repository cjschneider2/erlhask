module 'xmerl_sax_parser_utf8' ['cf'/3,
				'cf'/4,
				'cf'/5,
				'is_name_char'/1,
				'is_name_start'/1,
				'module_info'/0,
				'module_info'/1,
				'parse'/2,
				'parse_dtd'/2]
    attributes []
'parse'/2 =
    %% Line 110
    fun (_cor1,_cor0) ->
	let <RefTable> =
	    %% Line 111
	    call 'ets':'new'
		('xmerl_sax_entity_refs', ['private'])
	in  let <State1> =
		%% Line 113
		apply 'event_callback'/2
		    ('startDocument', _cor0)
	    in  let <_cor7> =
		    catch
			%% Line 115
			case State1 of
			  <{'xmerl_sax_parser_state',_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33}> when 'true' ->
			      let <_cor6> =
				  call 'erlang':'setelement'
				      (12, State1, RefTable)
			      in  apply 'parse_document'/2
				      (_cor1, _cor6)
			  ( <_cor34> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','xmerl_sax_parser_state'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
		in  %% Line 115
		    case _cor7 of
		      %% Line 116
		      <{'ok',Rest,State2}> when 'true' ->
			  let <State3> =
			      %% Line 117
			      apply 'event_callback'/2
				  ('endDocument', State2)
			  in  do  %% Line 118
				  call 'ets':'delete'
				      (RefTable)
				  %% Line 119
				  ( case State3 of
				      ( <( {'xmerl_sax_parser_state',_rec1,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50}
					   -| ['compiler_generated'] )> when 'true' ->
					    {'ok',_rec1,Rest}
					-| ['compiler_generated'] )
				      ( <_cor51> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','xmerl_sax_parser_state'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
		      %% Line 120
		      <{'fatal_error',{State2,Reason}}> when 'true' ->
			  let <State3> =
			      %% Line 121
			      apply 'event_callback'/2
				  ('endDocument', State2)
			  in  do  %% Line 122
				  call 'ets':'delete'
				      (RefTable)
				  %% Line 123
				  apply 'format_error'/3
				      ('fatal_error', State3, Reason)
		      %% Line 124
		      <{'event_receiver_error',State2,{Tag,Reason}}> when 'true' ->
			  let <State3> =
			      %% Line 125
			      apply 'event_callback'/2
				  ('endDocument', State2)
			  in  do  %% Line 126
				  call 'ets':'delete'
				      (RefTable)
				  %% Line 127
				  apply 'format_error'/3
				      (Tag, State3, Reason)
		      %% Line 128
		      <Other> when 'true' ->
			  let <_X_State2> =
			      %% Line 129
			      apply 'event_callback'/2
				  ('endDocument', State1)
			  in  do  %% Line 130
				  call 'ets':'delete'
				      (RefTable)
				  %% Line 131
				  call 'erlang':'throw'
				      (Other)
		    end
'parse_dtd'/2 =
    %% Line 142
    fun (_cor1,_cor0) ->
	let <RefTable> =
	    %% Line 143
	    call 'ets':'new'
		('xmerl_sax_entity_refs', ['private'])
	in  let <State1> =
		%% Line 145
		apply 'event_callback'/2
		    ('startDocument', _cor0)
	    in  let <_cor7> =
		    catch
			%% Line 147
			case State1 of
			  <{'xmerl_sax_parser_state',_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36}> when 'true' ->
			      let <_cor6> =
				  call 'erlang':'setelement'
				      (12, State1, RefTable)
			      in  apply 'parse_external_entity_1'/2
				      (_cor1, _cor6)
			  ( <_cor37> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','xmerl_sax_parser_state'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
		in  %% Line 147
		    case _cor7 of
		      %% Line 148
		      <{'fatal_error',{State2,Reason}}> when 'true' ->
			  let <State3> =
			      %% Line 149
			      apply 'event_callback'/2
				  ('endDocument', State2)
			  in  do  %% Line 150
				  call 'ets':'delete'
				      (RefTable)
				  %% Line 151
				  apply 'format_error'/3
				      ('fatal_error', State3, Reason)
		      %% Line 152
		      <{'event_receiver_error',State2,{Tag,Reason}}> when 'true' ->
			  let <State3> =
			      %% Line 153
			      apply 'event_callback'/2
				  ('endDocument', State2)
			  in  %% Line 154
			      apply 'format_error'/3
				  (Tag, State3, Reason)
		      %% Line 155
		      <{Rest,State2 = {'xmerl_sax_parser_state',_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54}}> when ( 'true'
																								 -| ['compiler_generated'] ) ->
			  let <State3> =
			      %% Line 156
			      apply 'event_callback'/2
				  ('endDocument', State2)
			  in  do  %% Line 157
				  call 'ets':'delete'
				      (RefTable)
				  %% Line 158
				  ( case State3 of
				      ( <( {'xmerl_sax_parser_state',_rec3,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,_cor69,_cor70}
					   -| ['compiler_generated'] )> when 'true' ->
					    {'ok',_rec3,Rest}
					-| ['compiler_generated'] )
				      ( <_cor71> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','xmerl_sax_parser_state'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
		      %% Line 159
		      <{'endDocument',Rest,State2 = {'xmerl_sax_parser_state',_cor72,_cor73,_cor74,_cor75,_cor76,_cor77,_cor78,_cor79,_cor80,_cor81,_cor82,_cor83,_cor84,_cor85,_cor86,_cor87,_cor88}}> when ( 'true'
																									       -| ['compiler_generated'] ) ->
			  let <State3> =
			      %% Line 160
			      apply 'event_callback'/2
				  ('endDocument', State2)
			  in  do  %% Line 161
				  call 'ets':'delete'
				      (RefTable)
				  %% Line 162
				  ( case State3 of
				      ( <( {'xmerl_sax_parser_state',_rec4,_cor89,_cor90,_cor91,_cor92,_cor93,_cor94,_cor95,_cor96,_cor97,_cor98,_cor99,_cor100,_cor101,_cor102,_cor103,_cor104}
					   -| ['compiler_generated'] )> when 'true' ->
					    {'ok',_rec4,Rest}
					-| ['compiler_generated'] )
				      ( <_cor105> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','xmerl_sax_parser_state'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
		      %% Line 163
		      <Other> when 'true' ->
			  let <_X_State2> =
			      %% Line 164
			      apply 'event_callback'/2
				  ('endDocument', State1)
			  in  do  %% Line 165
				  call 'ets':'delete'
				      (RefTable)
				  %% Line 166
				  call 'erlang':'throw'
				      (Other)
		    end
'parse_document'/2 =
    %% Line 182
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Rest,State = {'xmerl_sax_parser_state',_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22}> when ( 'true'
																					      -| ['compiler_generated'] ) ->
	      %% Line 183
	      case apply 'parse_xml_decl'/2
		       (Rest, State) of
		<{Rest1,State1}> when 'true' ->
		    %% Line 184
		    case apply 'parse_misc'/3
			     (Rest1, State1, 'true') of
		      <{Rest2,State2}> when 'true' ->
			  %% Line 185
			  {'ok',Rest2,State2}
		      ( <_cor3> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor3})
			-| ['compiler_generated'] )
		    end
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'parse_document',2}}] )
	    -| ['compiler_generated'] )
	end
'parse_xml_decl'/2 =
    %% Line 197
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <#{}#,State> when 'true' ->
	      %% Line 198
	      apply 'cf'/3
		  (#{}#, State, ( 'parse_xml_decl'/2
				  -| [{'id',{0,0,'-parse_xml_decl/2-fun-0-'}}] ))
	  %% Line 199
	  <#{#<239>(8,1,'integer',['unsigned'|['big']])}#,State> when 'true' ->
	      %% Line 200
	      apply 'cf'/3
		  (#{#<239>(8,1,'integer',['unsigned'|['big']])}#, State, ( 'parse_xml_decl'/2
									    -| [{'id',{0,0,'-parse_xml_decl/2-fun-1-'}}] ))
	  %% Line 201
	  <#{#<239>(8,1,'integer',['unsigned'|['big']]),
	     #<187>(8,1,'integer',['unsigned'|['big']])}#,State> when 'true' ->
	      %% Line 202
	      apply 'cf'/3
		  (#{#<239>(8,1,'integer',['unsigned'|['big']]),
		     #<187>(8,1,'integer',['unsigned'|['big']])}#, State, ( 'parse_xml_decl'/2
									    -| [{'id',{0,0,'-parse_xml_decl/2-fun-2-'}}] ))
	  %% Line 203
	  <#{#<239>(8,1,'integer',['unsigned'|['big']]),
	     #<187>(8,1,'integer',['unsigned'|['big']]),
	     #<191>(8,1,'integer',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State> when 'true' ->
	      %% Line 204
	      apply 'cf'/3
		  (Rest, State, ( 'parse_xml_decl'/2
				  -| [{'id',{0,0,'-parse_xml_decl/2-fun-3-'}}] ))
	  %% Line 205
	  <Bytes = #{#<60>('undefined','undefined','utf8',['unsigned'|['big']])}#,State> when 'true' ->
	      %% Line 206
	      apply 'cf'/3
		  (Bytes, State, ( 'parse_xml_decl'/2
				   -| [{'id',{0,0,'-parse_xml_decl/2-fun-4-'}}] ))
	  %% Line 207
	  <Bytes = #{#<60>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<63>('undefined','undefined','utf8',['unsigned'|['big']])}#,State> when 'true' ->
	      %% Line 208
	      apply 'cf'/3
		  (Bytes, State, ( 'parse_xml_decl'/2
				   -| [{'id',{0,0,'-parse_xml_decl/2-fun-5-'}}] ))
	  %% Line 209
	  <Bytes = #{#<60>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<63>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<120>('undefined','undefined','utf8',['unsigned'|['big']])}#,State> when 'true' ->
	      %% Line 210
	      apply 'cf'/3
		  (Bytes, State, ( 'parse_xml_decl'/2
				   -| [{'id',{0,0,'-parse_xml_decl/2-fun-6-'}}] ))
	  %% Line 211
	  <Bytes = #{#<60>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<63>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<120>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<109>('undefined','undefined','utf8',['unsigned'|['big']])}#,State> when 'true' ->
	      %% Line 212
	      apply 'cf'/3
		  (Bytes, State, ( 'parse_xml_decl'/2
				   -| [{'id',{0,0,'-parse_xml_decl/2-fun-7-'}}] ))
	  %% Line 213
	  <Bytes = #{#<60>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<63>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<120>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<109>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<108>('undefined','undefined','utf8',['unsigned'|['big']])}#,State> when 'true' ->
	      %% Line 214
	      apply 'cf'/3
		  (Bytes, State, ( 'parse_xml_decl'/2
				   -| [{'id',{0,0,'-parse_xml_decl/2-fun-8-'}}] ))
	  %% Line 215
	  <#{#<60>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<63>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<120>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<109>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<108>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest1>('all',8,'binary',['unsigned'|['big']])}#,State> when 'true' ->
	      %% Line 216
	      apply 'parse_xml_decl_1'/2
		  (Rest1, State)
	  %% Line 217
	  <Bytes,State = {'xmerl_sax_parser_state',_cor7,_cor8,_cor9,_cor10,Enc,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22}>
	      when call 'erlang':'is_binary'
		    (Bytes) ->
	      %% Line 218
	      case call 'unicode':'characters_to_list'
		       (Bytes, Enc) of
		%% Line 219
		<{'incomplete',_cor23,_cor24}> when 'true' ->
		    %% Line 220
		    apply 'cf'/3
			(Bytes, State, ( 'parse_xml_decl'/2
					 -| [{'id',{0,0,'-parse_xml_decl/2-fun-9-'}}] ))
		%% Line 221
		<{'error',_X_Encoded,_X_Rest}> when 'true' ->
		    let <_cor2> =
			%% Line 222
			call 'io_lib':'format'
			    ([66|[97|[100|[32|[99|[104|[97|[114|[97|[99|[116|[101|[114|[44|[32|[110|[111|[116|[32|[105|[110|[32|[126|[112|[10]]]]]]]]]]]]]]]]]]]]]]]]], [Enc|[]])
		    in  let <_cor3> =
			    %% Line 222
			    call 'lists':'flatten'
				(_cor2)
			in  %% Line 222
			    call 'erlang':'throw'
				({'fatal_error',{State,_cor3}})
		%% Line 223
		<_cor25> when 'true' ->
		    %% Line 224
		    apply 'parse_prolog'/2
			(Bytes, State)
	      end
	  %% Line 226
	  <Bytes,State> when 'true' ->
	      %% Line 227
	      apply 'parse_prolog'/2
		  (Bytes, State)
	end
'parse_xml_decl_1'/2 =
    %% Line 230
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Bytes = #{#<C>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State> when 'true' ->
	      %% Line 231
	      case <> of
		%% Line 232
		<>
		    when let <_cor2> =
			  call 'erlang':'=:='
			      (C, 32)
		      in  let <_cor3> =
			      call 'erlang':'=:='
				  (C, 13)
			  in  let <_cor4> =
				  call 'erlang':'=:='
				      (C, 10)
			      in  let <_cor5> =
				      call 'erlang':'=:='
					  (C, 9)
				  in  let <_cor6> =
					  call 'erlang':'or'
					      (_cor4, _cor5)
				      in  let <_cor7> =
					      call 'erlang':'or'
						  (_cor3, _cor6)
					  in  call 'erlang':'or'
						  (_cor2, _cor7) ->
		    %% Line 233
		    case apply 'parse_version_info'/3
			     (Rest, State, []) of
		      <{_X_XmlAttributes,Rest1,State1}> when 'true' ->
			  %% Line 235
			  apply 'parse_prolog'/2
			      (Rest1, State1)
		      ( <_cor8> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor8})
			-| ['compiler_generated'] )
		    end
		%% Line 236
		<> when 'true' ->
		    let <_cor9> =
			%% Line 237
			#{#<60>(8,1,'integer',['unsigned'|['big']]),
			  #<63>(8,1,'integer',['unsigned'|['big']]),
			  #<120>(8,1,'integer',['unsigned'|['big']]),
			  #<109>(8,1,'integer',['unsigned'|['big']]),
			  #<108>(8,1,'integer',['unsigned'|['big']]),
			  #<Bytes>('all',8,'binary',['unsigned'|['big']])}#
		    in  %% Line 237
			apply 'parse_prolog'/2
			    (_cor9, State)
	      end
	  %% Line 239
	  <Bytes,State> when 'true' ->
	      %% Line 240
	      apply 'unicode_incomplete_check'/2
		  ([Bytes|[State|[( 'parse_xml_decl_1'/2
				    -| [{'id',{0,0,'-parse_xml_decl_1/2-fun-0-'}}] )|[]]]], 'undefined')
	end
'parse_prolog'/2 =
    %% Line 252
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <#{}#,State> when 'true' ->
	      %% Line 253
	      apply 'cf'/3
		  (#{}#, State, ( 'parse_prolog'/2
				  -| [{'id',{0,0,'-parse_prolog/2-fun-0-'}}] ))
	  %% Line 254
	  <Bytes = #{#<60>('undefined','undefined','utf8',['unsigned'|['big']])}#,State> when 'true' ->
	      %% Line 255
	      apply 'cf'/3
		  (Bytes, State, ( 'parse_prolog'/2
				   -| [{'id',{0,0,'-parse_prolog/2-fun-1-'}}] ))
	  %% Line 256
	  <#{#<60>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<63>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State> when 'true' ->
	      %% Line 257
	      case apply 'parse_pi'/2
		       (Rest, State) of
		%% Line 258
		<{Rest1,State1}> when 'true' ->
		    %% Line 259
		    apply 'parse_prolog'/2
			(Rest1, State1)
		%% Line 260
		<{'endDocument',Rest1,State1}> when 'true' ->
		    %% Line 261
		    apply 'parse_prolog'/2
			(Rest1, State1)
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 265
	  <#{#<60>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<33>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State> when 'true' ->
	      %% Line 266
	      apply 'parse_prolog_1'/2
		  (Rest, State)
	  %% Line 267
	  <#{#<60>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State> when 'true' ->
	      %% Line 268
	      apply 'parse_stag'/2
		  (Rest, State)
	  %% Line 269
	  <Rest = #{#<C>('undefined','undefined','utf8',['unsigned'|['big']]),
		    #<_cor12>('all',8,'binary',['unsigned'|['big']])}#,State>
	      when let <_cor3> =
		    call 'erlang':'=:='
			(C, 32)
		in  let <_cor4> =
			call 'erlang':'=:='
			    (C, 13)
		    in  let <_cor5> =
			    call 'erlang':'=:='
				(C, 10)
			in  let <_cor6> =
				call 'erlang':'=:='
				    (C, 9)
			    in  let <_cor7> =
				    call 'erlang':'or'
					(_cor5, _cor6)
				in  let <_cor8> =
					call 'erlang':'or'
					    (_cor4, _cor7)
				    in  call 'erlang':'or'
					    (_cor3, _cor8) ->
	      %% Line 270
	      case apply 'whitespace'/3
		       (Rest, State, []) of
		<{_X_WS,Rest1,State1}> when 'true' ->
		    %% Line 271
		    apply 'parse_prolog'/2
			(Rest1, State1)
		( <_cor9> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor9})
		  -| ['compiler_generated'] )
	      end
	  %% Line 272
	  <Bytes,State> when 'true' ->
	      %% Line 273
	      apply 'unicode_incomplete_check'/2
		  ([Bytes|[State|[( 'parse_prolog'/2
				    -| [{'id',{0,0,'-parse_prolog/2-fun-2-'}}] )|[]]]], %% Line 274
											[101|[120|[112|[101|[99|[116|[105|[110|[103|[32|[60|[32|[111|[114|[32|[119|[104|[105|[116|[101|[115|[112|[97|[99|[101]]]]]]]]]]]]]]]]]]]]]]]]])
	end
'parse_prolog_1'/2 =
    %% Line 277
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <#{}#,State> when 'true' ->
	      %% Line 278
	      apply 'cf'/3
		  (#{}#, State, ( 'parse_prolog_1'/2
				  -| [{'id',{0,0,'-parse_prolog_1/2-fun-0-'}}] ))
	  %% Line 279
	  <Bytes = #{#<68>('undefined','undefined','utf8',['unsigned'|['big']])}#,State> when 'true' ->
	      %% Line 280
	      apply 'cf'/3
		  (Bytes, State, ( 'parse_prolog_1'/2
				   -| [{'id',{0,0,'-parse_prolog_1/2-fun-1-'}}] ))
	  %% Line 281
	  <Bytes = #{#<68>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<79>('undefined','undefined','utf8',['unsigned'|['big']])}#,State> when 'true' ->
	      %% Line 282
	      apply 'cf'/3
		  (Bytes, State, ( 'parse_prolog_1'/2
				   -| [{'id',{0,0,'-parse_prolog_1/2-fun-2-'}}] ))
	  %% Line 283
	  <Bytes = #{#<68>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<79>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<67>('undefined','undefined','utf8',['unsigned'|['big']])}#,State> when 'true' ->
	      %% Line 284
	      apply 'cf'/3
		  (Bytes, State, ( 'parse_prolog_1'/2
				   -| [{'id',{0,0,'-parse_prolog_1/2-fun-3-'}}] ))
	  %% Line 285
	  <Bytes = #{#<68>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<79>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<67>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<84>('undefined','undefined','utf8',['unsigned'|['big']])}#,State> when 'true' ->
	      %% Line 286
	      apply 'cf'/3
		  (Bytes, State, ( 'parse_prolog_1'/2
				   -| [{'id',{0,0,'-parse_prolog_1/2-fun-4-'}}] ))
	  %% Line 287
	  <Bytes = #{#<68>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<79>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<67>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<84>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<89>('undefined','undefined','utf8',['unsigned'|['big']])}#,State> when 'true' ->
	      %% Line 288
	      apply 'cf'/3
		  (Bytes, State, ( 'parse_prolog_1'/2
				   -| [{'id',{0,0,'-parse_prolog_1/2-fun-5-'}}] ))
	  %% Line 289
	  <Bytes = #{#<68>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<79>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<67>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<84>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<89>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<80>('undefined','undefined','utf8',['unsigned'|['big']])}#,State> when 'true' ->
	      %% Line 290
	      apply 'cf'/3
		  (Bytes, State, ( 'parse_prolog_1'/2
				   -| [{'id',{0,0,'-parse_prolog_1/2-fun-6-'}}] ))
	  %% Line 291
	  <#{#<68>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<79>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<67>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<84>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<89>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<80>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<69>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State> when 'true' ->
	      %% Line 292
	      case apply 'parse_doctype'/2
		       (Rest, State) of
		<{Rest1,State1}> when 'true' ->
		    let <State2> =
			%% Line 293
			apply 'event_callback'/2
			    ('endDTD', State1)
		    in  %% Line 294
			apply 'parse_prolog'/2
			    (Rest1, State2)
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 295
	  <#{#<45>('undefined','undefined','utf8',['unsigned'|['big']])}#,State> when 'true' ->
	      %% Line 296
	      apply 'cf'/3
		  (#{#<45>(8,1,'integer',['unsigned'|['big']])}#, State, ( 'parse_prolog_1'/2
									   -| [{'id',{0,0,'-parse_prolog_1/2-fun-7-'}}] ))
	  %% Line 297
	  <#{#<45>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<45>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State> when 'true' ->
	      %% Line 298
	      case apply 'parse_comment'/3
		       (Rest, State, []) of
		<{Rest1,State1}> when 'true' ->
		    %% Line 299
		    apply 'parse_prolog'/2
			(Rest1, State1)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 300
	  <Bytes,State> when 'true' ->
	      %% Line 301
	      apply 'unicode_incomplete_check'/2
		  ([Bytes|[State|[( 'parse_prolog_1'/2
				    -| [{'id',{0,0,'-parse_prolog_1/2-fun-8-'}}] )|[]]]], %% Line 302
											  [101|[120|[112|[101|[99|[116|[105|[110|[103|[32|[99|[111|[109|[109|[101|[110|[116|[32|[111|[114|[32|[68|[79|[67|[84|[89|[80|[69]]]]]]]]]]]]]]]]]]]]]]]]]]]])
	end
'parse_version_info'/3 =
    %% Line 317
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <#{}#,State,Acc> when 'true' ->
	      %% Line 318
	      apply 'cf'/4
		  (#{}#, State, Acc, ( 'parse_version_info'/3
				       -| [{'id',{0,0,'-parse_version_info/3-fun-0-'}}] ))
	  %% Line 319
	  <Rest = #{#<C>('undefined','undefined','utf8',['unsigned'|['big']]),
		    #<_cor17>('all',8,'binary',['unsigned'|['big']])}#,State,Acc>
	      when let <_cor3> =
		    call 'erlang':'=:='
			(C, 32)
		in  let <_cor4> =
			call 'erlang':'=:='
			    (C, 13)
		    in  let <_cor5> =
			    call 'erlang':'=:='
				(C, 10)
			in  let <_cor6> =
				call 'erlang':'=:='
				    (C, 9)
			    in  let <_cor7> =
				    call 'erlang':'or'
					(_cor5, _cor6)
				in  let <_cor8> =
					call 'erlang':'or'
					    (_cor4, _cor7)
				    in  call 'erlang':'or'
					    (_cor3, _cor8) ->
	      %% Line 320
	      case apply 'whitespace'/3
		       (Rest, State, []) of
		<{_X_WS,Rest1,State1}> when 'true' ->
		    %% Line 321
		    apply 'parse_version_info'/3
			(Rest1, State1, Acc)
		( <_cor9> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor9})
		  -| ['compiler_generated'] )
	      end
	  %% Line 322
	  <#{#<C>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State,Acc> when 'true' ->
	      %% Line 323
	      case apply 'is_name_start'/1
		       (C) of
		%% Line 324
		<'true'> when 'true' ->
		    %% Line 325
		    case apply 'parse_name'/3
			     (Rest, State, [C|[]]) of
		      %% Line 326
		      <{[118|[101|[114|[115|[105|[111|[110]]]]]]],Rest1,State1}> when 'true' ->
			  %% Line 327
			  case apply 'parse_eq'/2
				   (Rest1, State1) of
			    <{Rest2,State2}> when 'true' ->
				%% Line 328
				case apply 'parse_att_value'/2
					 (Rest2, State2) of
				  <{Version,Rest3,State3}> when 'true' ->
				      %% Line 329
				      apply 'parse_xml_decl_rest'/3
					  (Rest3, State3, [{[118|[101|[114|[115|[105|[111|[110]]]]]]],Version}|Acc])
				  ( <_cor11> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor11})
				    -| ['compiler_generated'] )
				end
			    ( <_cor10> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor10})
			      -| ['compiler_generated'] )
			  end
		      %% Line 330
		      <{_cor18,_cor19,State1}> when 'true' ->
			  %% Line 331
			  call 'erlang':'throw'
			      ({'fatal_error',{State1,[101|[120|[112|[101|[99|[116|[105|[110|[103|[32|[97|[116|[116|[114|[105|[98|[117|[116|[101|[32|[118|[101|[114|[115|[105|[111|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]}})
		      ( <_cor12> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor12})
			-| ['compiler_generated'] )
		    end
		%% Line 333
		<'false'> when 'true' ->
		    %% Line 334
		    call 'erlang':'throw'
			({'fatal_error',{State,[101|[120|[112|[101|[99|[116|[105|[110|[103|[32|[97|[116|[116|[114|[105|[98|[117|[116|[101|[32|[118|[101|[114|[115|[105|[111|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]}})
		( <_cor13> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor13})
		  -| ['compiler_generated'] )
	      end
	  %% Line 336
	  <Bytes,State,Acc> when 'true' ->
	      %% Line 337
	      apply 'unicode_incomplete_check'/2
		  ([Bytes|[State|[Acc|[( 'parse_version_info'/3
					 -| [{'id',{0,0,'-parse_version_info/3-fun-1-'}}] )|[]]]]], %% Line 338
												    'undefined')
	end
'parse_xml_decl_rest'/3 =
    %% Line 352
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <#{}#,State,Acc> when 'true' ->
	      %% Line 353
	      apply 'cf'/4
		  (#{}#, State, Acc, ( 'parse_xml_decl_rest'/3
				       -| [{'id',{0,0,'-parse_xml_decl_rest/3-fun-0-'}}] ))
	  %% Line 354
	  <Rest = #{#<63>('undefined','undefined','utf8',['unsigned'|['big']])}#,State,Acc> when 'true' ->
	      %% Line 355
	      apply 'cf'/4
		  (Rest, State, Acc, ( 'parse_xml_decl_rest'/3
				       -| [{'id',{0,0,'-parse_xml_decl_rest/3-fun-1-'}}] ))
	  %% Line 356
	  <#{#<63>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<62>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State,Acc> when 'true' ->
	      let <_cor3> =
		  %% Line 357
		  call 'lists':'reverse'
		      (Acc)
	      in  %% Line 357
		  {_cor3,Rest,State}
	  %% Line 358
	  <Rest = #{#<C>('undefined','undefined','utf8',['unsigned'|['big']]),
		    #<_cor14>('all',8,'binary',['unsigned'|['big']])}#,State,Acc>
	      when let <_cor4> =
		    call 'erlang':'=:='
			(C, 32)
		in  let <_cor5> =
			call 'erlang':'=:='
			    (C, 13)
		    in  let <_cor6> =
			    call 'erlang':'=:='
				(C, 10)
			in  let <_cor7> =
				call 'erlang':'=:='
				    (C, 9)
			    in  let <_cor8> =
				    call 'erlang':'or'
					(_cor6, _cor7)
				in  let <_cor9> =
					call 'erlang':'or'
					    (_cor5, _cor8)
				    in  call 'erlang':'or'
					    (_cor4, _cor9) ->
	      %% Line 359
	      case apply 'whitespace'/3
		       (Rest, State, []) of
		<{_X_WS,Rest1,State1}> when 'true' ->
		    %% Line 360
		    apply 'parse_xml_decl_encoding'/3
			(Rest1, State1, Acc)
		( <_cor10> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor10})
		  -| ['compiler_generated'] )
	      end
	  %% Line 361
	  <Bytes,State,Acc> when 'true' ->
	      %% Line 362
	      apply 'unicode_incomplete_check'/2
		  ([Bytes|[State|[Acc|[( 'parse_xml_decl_rest'/3
					 -| [{'id',{0,0,'-parse_xml_decl_rest/3-fun-2-'}}] )|[]]]]], %% Line 363
												     [101|[120|[112|[101|[99|[116|[105|[110|[103|[32|[101|[110|[99|[111|[100|[105|[110|[103|[44|[32|[115|[116|[97|[110|[100|[97|[108|[111|[110|[101|[44|[32|[119|[104|[105|[116|[101|[115|[112|[97|[99|[101|[32|[111|[114|[32|[63|[62]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
	end
'parse_xml_decl_encoding'/3 =
    %% Line 378
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <#{}#,State,Acc> when 'true' ->
	      %% Line 379
	      apply 'cf'/4
		  (#{}#, State, Acc, ( 'parse_xml_decl_encoding'/3
				       -| [{'id',{0,0,'-parse_xml_decl_encoding/3-fun-0-'}}] ))
	  %% Line 380
	  <#{#<101>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State,Acc> when 'true' ->
	      %% Line 381
	      case apply 'parse_name'/3
		       (Rest, State, [101]) of
		%% Line 382
		<{[101|[110|[99|[111|[100|[105|[110|[103]]]]]]]],Rest1,State1}> when 'true' ->
		    %% Line 383
		    case apply 'parse_eq'/2
			     (Rest1, State1) of
		      <{Rest2,State2}> when 'true' ->
			  %% Line 384
			  case apply 'parse_att_value'/2
				   (Rest2, State2) of
			    <{Enc,Rest3,State3}> when 'true' ->
				%% Line 385
				apply 'parse_xml_decl_encoding_1'/3
				    (Rest3, State3, [{[101|[110|[99|[111|[100|[105|[110|[103]]]]]]]],Enc}|Acc])
			    ( <_cor4> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor4})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor3> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor3})
			-| ['compiler_generated'] )
		    end
		%% Line 386
		<{Name,_X_Rest1,State1}> when 'true' ->
		    let <_cor5> =
			%% Line 387
			call 'erlang':'++'
			    (Name, %% Line 388
				   [32|[110|[111|[116|[32|[97|[108|[108|[111|[119|[101|[100|[32|[105|[110|[32|[120|[109|[108|[32|[100|[101|[99|[108|[97|[114|[97|[116|[105|[111|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
		    in  let <_cor6> =
			    %% Line 387
			    call 'erlang':'++'
				([65|[116|[116|[114|[105|[98|[117|[116|[101|[32]]]]]]]]]], _cor5)
			in  %% Line 387
			    call 'erlang':'throw'
				({'fatal_error',{State1,_cor6}})
		( <_cor7> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor7})
		  -| ['compiler_generated'] )
	      end
	  %% Line 390
	  <Bytes = #{#<_X_C>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<_cor11>('all',8,'binary',['unsigned'|['big']])}#,State,Acc> when 'true' ->
	      %% Line 391
	      apply 'parse_xml_decl_standalone'/3
		  (Bytes, State, Acc)
	  %% Line 392
	  <Bytes,State,Acc> when 'true' ->
	      %% Line 393
	      apply 'unicode_incomplete_check'/2
		  ([Bytes|[State|[Acc|[( 'parse_xml_decl_encoding'/3
					 -| [{'id',{0,0,'-parse_xml_decl_encoding/3-fun-1-'}}] )|[]]]]], %% Line 394
													 'undefined')
	end
'parse_xml_decl_encoding_1'/3 =
    %% Line 397
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Bytes = #{#<C>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<_cor13>('all',8,'binary',['unsigned'|['big']])}#,State,Acc>
	      when let <_cor3> =
		    call 'erlang':'=:='
			(C, 32)
		in  let <_cor4> =
			call 'erlang':'=:='
			    (C, 13)
		    in  let <_cor5> =
			    call 'erlang':'=:='
				(C, 10)
			in  let <_cor6> =
				call 'erlang':'=:='
				    (C, 9)
			    in  let <_cor7> =
				    call 'erlang':'or'
					(_cor5, _cor6)
				in  let <_cor8> =
					call 'erlang':'or'
					    (_cor4, _cor7)
				    in  call 'erlang':'or'
					    (_cor3, _cor8) ->
	      %% Line 398
	      case apply 'whitespace'/3
		       (Bytes, State, []) of
		<{_X_WS,Rest1,State1}> when 'true' ->
		    %% Line 399
		    apply 'parse_xml_decl_standalone'/3
			(Rest1, State1, Acc)
		( <_cor9> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor9})
		  -| ['compiler_generated'] )
	      end
	  %% Line 400
	  <Bytes = #{#<_X_C>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<_cor14>('all',8,'binary',['unsigned'|['big']])}#,State,Acc> when 'true' ->
	      %% Line 401
	      apply 'parse_xml_decl_rest'/3
		  (Bytes, State, Acc)
	  %% Line 402
	  <Bytes,State,Acc> when 'true' ->
	      %% Line 403
	      apply 'unicode_incomplete_check'/2
		  ([Bytes|[State|[Acc|[( 'parse_xml_decl_encoding_1'/3
					 -| [{'id',{0,0,'-parse_xml_decl_encoding_1/3-fun-0-'}}] )|[]]]]], %% Line 404
													   'undefined')
	end
'parse_xml_decl_standalone'/3 =
    %% Line 419
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <#{}#,State,Acc> when 'true' ->
	      %% Line 420
	      apply 'cf'/4
		  (#{}#, State, Acc, ( 'parse_xml_decl_standalone'/3
				       -| [{'id',{0,0,'-parse_xml_decl_standalone/3-fun-0-'}}] ))
	  %% Line 421
	  <#{#<115>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State,Acc> when 'true' ->
	      %% Line 422
	      case apply 'parse_name'/3
		       (Rest, State, [115]) of
		%% Line 423
		<{[115|[116|[97|[110|[100|[97|[108|[111|[110|[101]]]]]]]]]],Rest1,State1}> when 'true' ->
		    %% Line 424
		    case apply 'parse_eq'/2
			     (Rest1, State1) of
		      <{Rest2,State2}> when 'true' ->
			  %% Line 425
			  case apply 'parse_att_value'/2
				   (Rest2, State2) of
			    <{Standalone,Rest3,State3}> when 'true' ->
				do  %% Line 426
				    case Standalone of
				      %% Line 427
				      <[121|[101|[115]]]> when 'true' ->
					  'ok'
				      %% Line 428
				      <[110|[111]]> when 'true' ->
					  'ok'
				      %% Line 429
				      <_cor17> when 'true' ->
					  %% Line 430
					  call 'erlang':'throw'
					      ({'fatal_error',{State3,[87|[114|[111|[110|[103|[32|[118|[97|[108|[117|[101|[32|[111|[102|[32|[97|[116|[116|[114|[105|[98|[117|[116|[101|[32|[115|[116|[97|[110|[100|[97|[108|[111|[110|[101|[32|[105|[110|[32|[120|[109|[108|[32|[100|[101|[99|[108|[97|[114|[97|[116|[105|[111|[110|[44|[32|[109|[117|[115|[116|[32|[98|[101|[32|[121|[101|[115|[32|[111|[114|[32|[110|[111]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}})
				    end
				    %% Line 432
				    case apply 'whitespace'/3
					     (Rest3, State3, []) of
				      <{_X_WS,Rest4,State4}> when 'true' ->
					  let <_rec5> =
					      %% Line 433
					      call 'erlang':'list_to_atom'
						  (Standalone)
					  in  %% Line 433
					      case State4 of
						<{'xmerl_sax_parser_state',_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34}> when 'true' ->
						    let <_cor10> =
							call 'erlang':'setelement'
							    (13, State4, _rec5)
						    in  apply 'parse_xml_decl_rest'/3
							    (Rest4, _cor10, %% Line 434
									    [{[115|[116|[97|[110|[100|[97|[108|[111|[110|[101]]]]]]]]]],Standalone}|Acc])
						( <_cor35> when 'true' ->
						      ( call ( 'erlang'
							       -| ['compiler_generated'] ):( 'error'
											     -| ['compiler_generated'] )
							    (( {'badrecord','xmerl_sax_parser_state'}
							       -| ['compiler_generated'] ))
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					      end
				      ( <_cor6> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_cor6})
					-| ['compiler_generated'] )
				    end
			    ( <_cor4> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor4})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor3> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor3})
			-| ['compiler_generated'] )
		    end
		%% Line 435
		<{Name,_X_Rest1,State1}> when 'true' ->
		    let <_cor11> =
			%% Line 436
			call 'erlang':'++'
			    (Name, %% Line 437
				   [32|[110|[111|[116|[32|[97|[108|[108|[111|[119|[101|[100|[32|[105|[110|[32|[120|[109|[108|[32|[100|[101|[99|[108|[97|[114|[97|[116|[105|[111|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
		    in  let <_cor12> =
			    %% Line 436
			    call 'erlang':'++'
				([65|[116|[116|[114|[105|[98|[117|[116|[101|[32]]]]]]]]]], _cor11)
			in  %% Line 436
			    call 'erlang':'throw'
				({'fatal_error',{State1,_cor12}})
		( <_cor13> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor13})
		  -| ['compiler_generated'] )
	      end
	  %% Line 439
	  <Bytes = #{#<_X_C>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<_cor36>('all',8,'binary',['unsigned'|['big']])}#,State,Acc> when 'true' ->
	      %% Line 440
	      apply 'parse_xml_decl_rest'/3
		  (Bytes, State, Acc)
	  %% Line 441
	  <Bytes,State,Acc> when 'true' ->
	      %% Line 442
	      apply 'unicode_incomplete_check'/2
		  ([Bytes|[State|[Acc|[( 'parse_xml_decl_standalone'/3
					 -| [{'id',{0,0,'-parse_xml_decl_standalone/3-fun-1-'}}] )|[]]]]], %% Line 443
													   'undefined')
	end
'parse_pi'/2 =
    %% Line 456
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <#{}#,State> when 'true' ->
	      %% Line 457
	      apply 'cf'/3
		  (#{}#, State, ( 'parse_pi'/2
				  -| [{'id',{0,0,'-parse_pi/2-fun-0-'}}] ))
	  %% Line 458
	  <Bytes = #{#<C>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State> when 'true' ->
	      %% Line 459
	      case apply 'is_name_start'/1
		       (C) of
		%% Line 460
		<'true'> when 'true' ->
		    %% Line 461
		    case %% Line 462
			 apply 'parse_name'/3
			     (Rest, State, [C|[]]) of
		      <{PiTarget,Rest1,State1}> when 'true' ->
			  %% Line 463
			  case call 'string':'to_lower'
				   (PiTarget) of
			    %% Line 464
			    <[120|[109|[108]]]> when 'true' ->
				%% Line 465
				( case State of
				    ( <( {'xmerl_sax_parser_state',_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_rec7}
					 -| ['compiler_generated'] )> when 'true' ->
					  case apply 'check_if_new_doc_allowed'/2
						   (_rec7, _cor22) of
					    %% Line 467
					    <'true'> when 'true' ->
						%% Line 468
						{'endDocument',Bytes,State}
					    %% Line 469
					    <'false'> when 'true' ->
						%% Line 470
						call 'erlang':'throw'
						    ({'fatal_error',{State1,[60|[63|[120|[109|[108|[32|[32|[46|[46|[46|[63|[62|[32|[110|[111|[116|[32|[102|[105|[114|[115|[116|[32|[105|[110|[32|[100|[111|[99|[117|[109|[101|[110|[116]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}})
					    ( <_cor7> when 'true' ->
						  primop 'match_fail'
						      ({'case_clause',_cor7})
					      -| ['compiler_generated'] )
					  end
				      -| ['compiler_generated'] )
				    ( <_cor30> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {'badrecord','xmerl_sax_parser_state'}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
			    %% Line 472
			    <_cor48> when 'true' ->
				%% Line 473
				case apply 'parse_pi_1'/2
					 (Rest1, State1) of
				  <{PiData,Rest2,State2}> when 'true' ->
				      let <State3> =
					  %% Line 474
					  apply 'event_callback'/2
					      ({'processingInstruction',PiTarget,PiData}, State2)
				      in  %% Line 475
					  {Rest2,State3}
				  ( <_cor8> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor8})
				    -| ['compiler_generated'] )
				end
			  end
		      ( <_cor2> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor2})
			-| ['compiler_generated'] )
		    end
		%% Line 477
		<'false'> when 'true' ->
		    %% Line 478
		    call 'erlang':'throw'
			({'fatal_error',{State,[101|[120|[112|[101|[99|[116|[105|[110|[103|[32|[110|[97|[109|[101]]]]]]]]]]]]]]}})
		( <_cor11> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor11})
		  -| ['compiler_generated'] )
	      end
	  %% Line 480
	  <Bytes,State> when 'true' ->
	      %% Line 481
	      apply 'unicode_incomplete_check'/2
		  ([Bytes|[State|[( 'parse_pi'/2
				    -| [{'id',{0,0,'-parse_pi/2-fun-1-'}}] )|[]]]], 'undefined')
	end
'check_if_new_doc_allowed'/2 =
    %% Line 483
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'stream',[]> when 'true' ->
	      %% Line 484
	      'true'
	  %% Line 485
	  <_cor4,_cor5> when 'true' ->
	      %% Line 486
	      'false'
	end
'parse_pi_1'/2 =
    %% Line 495
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <#{}#,State> when 'true' ->
	      %% Line 496
	      apply 'cf'/3
		  (#{}#, State, ( 'parse_pi_1'/2
				  -| [{'id',{0,0,'-parse_pi_1/2-fun-0-'}}] ))
	  %% Line 497
	  <Rest = #{#<C>('undefined','undefined','utf8',['unsigned'|['big']]),
		    #<_cor11>('all',8,'binary',['unsigned'|['big']])}#,State>
	      when let <_cor2> =
		    call 'erlang':'=:='
			(C, 32)
		in  let <_cor3> =
			call 'erlang':'=:='
			    (C, 13)
		    in  let <_cor4> =
			    call 'erlang':'=:='
				(C, 10)
			in  let <_cor5> =
				call 'erlang':'=:='
				    (C, 9)
			    in  let <_cor6> =
				    call 'erlang':'or'
					(_cor4, _cor5)
				in  let <_cor7> =
					call 'erlang':'or'
					    (_cor3, _cor6)
				    in  call 'erlang':'or'
					    (_cor2, _cor7) ->
	      %% Line 498
	      case %% Line 499
		   apply 'whitespace'/3
		       (Rest, State, []) of
		<{_X_WS,Rest1,State1}> when 'true' ->
		    %% Line 500
		    apply 'parse_pi_data'/3
			(Rest1, State1, [])
		( <_cor8> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor8})
		  -| ['compiler_generated'] )
	      end
	  %% Line 501
	  <#{#<63>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<62>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State> when 'true' ->
	      %% Line 502
	      {[],Rest,State}
	  %% Line 503
	  <Bytes,State> when 'true' ->
	      %% Line 504
	      apply 'unicode_incomplete_check'/2
		  ([Bytes|[State|[( 'parse_pi'/2
				    -| [{'id',{0,0,'-parse_pi_1/2-fun-1-'}}] )|[]]]], %% Line 505
										      [101|[120|[112|[101|[99|[116|[105|[110|[103|[32|[119|[104|[105|[116|[101|[115|[112|[97|[99|[101|[32|[111|[114|[32|[39|[63|[62|[39]]]]]]]]]]]]]]]]]]]]]]]]]]]])
	end
'parse_name'/3 =
    %% Line 519
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <#{}#,State,Acc> when 'true' ->
	      %% Line 520
	      apply 'cf'/4
		  (#{}#, State, Acc, ( 'parse_name'/3
				       -| [{'id',{0,0,'-parse_name/3-fun-0-'}}] ))
	  %% Line 521
	  <Bytes = #{#<C>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State,Acc> when 'true' ->
	      %% Line 522
	      case apply 'is_name_char'/1
		       (C) of
		%% Line 523
		<'true'> when 'true' ->
		    %% Line 524
		    apply 'parse_name'/3
			(Rest, State, [C|Acc])
		%% Line 525
		<'false'> when 'true' ->
		    let <_cor3> =
			%% Line 526
			call 'lists':'reverse'
			    (Acc)
		    in  %% Line 526
			{_cor3,Bytes,State}
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 528
	  <Bytes,State,Acc> when 'true' ->
	      %% Line 529
	      apply 'unicode_incomplete_check'/2
		  ([Bytes|[State|[Acc|[( 'parse_name'/3
					 -| [{'id',{0,0,'-parse_name/3-fun-1-'}}] )|[]]]]], 'undefined')
	end
'parse_ns_name'/4 =
    %% Line 546
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <#{}#,State,Prefix,Name> when 'true' ->
	      %% Line 547
	      apply 'cf'/5
		  (#{}#, State, Prefix, Name, ( 'parse_ns_name'/4
						-| [{'id',{0,0,'-parse_ns_name/4-fun-0-'}}] ))
	  %% Line 548
	  <#{#<58>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State,[],Name> when 'true' ->
	      let <_cor4> =
		  %% Line 549
		  call 'lists':'reverse'
		      (Name)
	      in  %% Line 549
		  apply 'parse_ns_name'/4
		      (Rest, State, _cor4, [])
	  %% Line 550
	  <Bytes = #{#<C>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State,Prefix,Name> when 'true' ->
	      %% Line 551
	      case apply 'is_name_char'/1
		       (C) of
		%% Line 552
		<'true'> when 'true' ->
		    %% Line 553
		    apply 'parse_ns_name'/4
			(Rest, State, Prefix, [C|Name])
		%% Line 554
		<'false'> when 'true' ->
		    let <_cor5> =
			%% Line 555
			call 'lists':'reverse'
			    (Name)
		    in  %% Line 555
			{{Prefix,_cor5},Bytes,State}
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor6})
		  -| ['compiler_generated'] )
	      end
	  %% Line 557
	  <Bytes,State,Prefix,Name> when 'true' ->
	      %% Line 558
	      apply 'unicode_incomplete_check'/2
		  ([Bytes|[State|[Prefix|[Name|[( 'parse_ns_name'/4
						  -| [{'id',{0,0,'-parse_ns_name/4-fun-1-'}}] )|[]]]]]], %% Line 559
													 'undefined')
	end
'parse_pi_data'/3 =
    %% Line 572
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <#{}#,State,Acc> when 'true' ->
	      %% Line 573
	      apply 'cf'/4
		  (#{}#, State, Acc, ( 'parse_pi_data'/3
				       -| [{'id',{0,0,'-parse_pi_data/3-fun-0-'}}] ))
	  %% Line 574
	  <Bytes = #{#<63>('undefined','undefined','utf8',['unsigned'|['big']])}#,State,Acc> when 'true' ->
	      %% Line 575
	      apply 'cf'/4
		  (Bytes, State, Acc, ( 'parse_pi_data'/3
					-| [{'id',{0,0,'-parse_pi_data/3-fun-1-'}}] ))
	  %% Line 576
	  <Bytes = #{#<13>('undefined','undefined','utf8',['unsigned'|['big']])}#,State,Acc> when 'true' ->
	      %% Line 577
	      apply 'cf'/4
		  (Bytes, State, Acc, ( 'parse_pi_data'/3
					-| [{'id',{0,0,'-parse_pi_data/3-fun-2-'}}] ))
	  %% Line 578
	  <#{#<63>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<62>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State,Acc> when 'true' ->
	      let <_cor3> =
		  %% Line 579
		  call 'lists':'reverse'
		      (Acc)
	      in  %% Line 579
		  {_cor3,Rest,State}
	  %% Line 580
	  <#{#<10>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State = {'xmerl_sax_parser_state',_cor35,_cor36,_cor37,_cor38,_cor39,N,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50},Acc> when 'true' ->
	      let <_rec9> =
		  %% Line 581
		  call 'erlang':'+'
		      (N, 1)
	      in  let <_cor7> =
		      %% Line 581
		      call 'erlang':'setelement'
			  (7, State, _rec9)
		  in  %% Line 581
		      apply 'parse_pi_data'/3
			  (Rest, _cor7, [10|Acc])
	  %% Line 582
	  <#{#<13>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<10>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State = {'xmerl_sax_parser_state',_cor69,_cor70,_cor71,_cor72,_cor73,N,_cor74,_cor75,_cor76,_cor77,_cor78,_cor79,_cor80,_cor81,_cor82,_cor83,_cor84},Acc> when 'true' ->
	      let <_rec11> =
		  %% Line 583
		  call 'erlang':'+'
		      (N, 1)
	      in  let <_cor11> =
		      %% Line 583
		      call 'erlang':'setelement'
			  (7, State, _rec11)
		  in  %% Line 583
		      apply 'parse_pi_data'/3
			  (Rest, _cor11, [10|Acc])
	  %% Line 584
	  <#{#<13>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State = {'xmerl_sax_parser_state',_cor103,_cor104,_cor105,_cor106,_cor107,N,_cor108,_cor109,_cor110,_cor111,_cor112,_cor113,_cor114,_cor115,_cor116,_cor117,_cor118},Acc> when 'true' ->
	      let <_rec13> =
		  %% Line 585
		  call 'erlang':'+'
		      (N, 1)
	      in  let <_cor15> =
		      %% Line 585
		      call 'erlang':'setelement'
			  (7, State, _rec13)
		  in  %% Line 585
		      apply 'parse_pi_data'/3
			  (Rest, _cor15, [10|Acc])
	  %% Line 586
	  <#{#<C>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State,Acc>
	      when let <_cor18> =
		    let <_cor16> =
			call 'erlang':'=<'
			    (32, C)
		    in  let <_cor17> =
			    call 'erlang':'=<'
				(C, 55295)
			in  call 'erlang':'and'
				(_cor16, _cor17)
		in  let <_cor19> =
			call 'erlang':'=:='
			    (C, 13)
		    in  let <_cor20> =
			    call 'erlang':'=:='
				(C, 10)
			in  let <_cor21> =
				call 'erlang':'=:='
				    (C, 9)
			    in  let <_cor24> =
				    let <_cor22> =
					call 'erlang':'=<'
					    (57344, C)
				    in  let <_cor23> =
					    call 'erlang':'=<'
						(C, 65533)
					in  call 'erlang':'and'
						(_cor22, _cor23)
				in  let <_cor27> =
					let <_cor25> =
					    call 'erlang':'=<'
						(65536, C)
					in  let <_cor26> =
						call 'erlang':'=<'
						    (C, 1114111)
					    in  call 'erlang':'and'
						    (_cor25, _cor26)
				    in  let <_cor28> =
					    call 'erlang':'or'
						(_cor24, _cor27)
					in  let <_cor29> =
						call 'erlang':'or'
						    (_cor21, _cor28)
					    in  let <_cor30> =
						    call 'erlang':'or'
							(_cor20, _cor29)
						in  let <_cor31> =
							call 'erlang':'or'
							    (_cor19, _cor30)
						    in  call 'erlang':'or'
							    (_cor18, _cor31) ->
	      %% Line 587
	      apply 'parse_pi_data'/3
		  (Rest, State, [C|Acc])
	  %% Line 588
	  <Bytes,State,Acc> when 'true' ->
	      %% Line 589
	      apply 'unicode_incomplete_check'/2
		  ([Bytes|[State|[Acc|[( 'parse_pi_data'/3
					 -| [{'id',{0,0,'-parse_pi_data/3-fun-3-'}}] )|[]]]]], %% Line 590
											       [110|[111|[116|[32|[97|[110|[32|[99|[104|[97|[114|[97|[99|[116|[101|[114]]]]]]]]]]]]]]]])
	end
'parse_cdata'/2 =
    %% Line 604
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <#{}#,State> when 'true' ->
	      %% Line 605
	      apply 'cf'/3
		  (#{}#, State, ( 'parse_cdata'/2
				  -| [{'id',{0,0,'-parse_cdata/2-fun-0-'}}] ))
	  %% Line 606
	  <Bytes = #{#<91>('undefined','undefined','utf8',['unsigned'|['big']])}#,State> when 'true' ->
	      %% Line 607
	      apply 'cf'/3
		  (Bytes, State, ( 'parse_cdata'/2
				   -| [{'id',{0,0,'-parse_cdata/2-fun-1-'}}] ))
	  %% Line 608
	  <Bytes = #{#<91>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<67>('undefined','undefined','utf8',['unsigned'|['big']])}#,State> when 'true' ->
	      %% Line 609
	      apply 'cf'/3
		  (Bytes, State, ( 'parse_cdata'/2
				   -| [{'id',{0,0,'-parse_cdata/2-fun-2-'}}] ))
	  %% Line 610
	  <Bytes = #{#<91>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<67>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<68>('undefined','undefined','utf8',['unsigned'|['big']])}#,State> when 'true' ->
	      %% Line 611
	      apply 'cf'/3
		  (Bytes, State, ( 'parse_cdata'/2
				   -| [{'id',{0,0,'-parse_cdata/2-fun-3-'}}] ))
	  %% Line 612
	  <Bytes = #{#<91>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<67>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<68>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<65>('undefined','undefined','utf8',['unsigned'|['big']])}#,State> when 'true' ->
	      %% Line 613
	      apply 'cf'/3
		  (Bytes, State, ( 'parse_cdata'/2
				   -| [{'id',{0,0,'-parse_cdata/2-fun-4-'}}] ))
	  %% Line 614
	  <Bytes = #{#<91>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<67>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<68>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<65>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<84>('undefined','undefined','utf8',['unsigned'|['big']])}#,State> when 'true' ->
	      %% Line 615
	      apply 'cf'/3
		  (Bytes, State, ( 'parse_cdata'/2
				   -| [{'id',{0,0,'-parse_cdata/2-fun-5-'}}] ))
	  %% Line 616
	  <Bytes = #{#<91>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<67>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<68>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<65>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<84>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<65>('undefined','undefined','utf8',['unsigned'|['big']])}#,State> when 'true' ->
	      %% Line 617
	      apply 'cf'/3
		  (Bytes, State, ( 'parse_cdata'/2
				   -| [{'id',{0,0,'-parse_cdata/2-fun-6-'}}] ))
	  %% Line 618
	  <#{#<91>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<67>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<68>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<65>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<84>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<65>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<91>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State> when 'true' ->
	      let <State1> =
		  %% Line 619
		  apply 'event_callback'/2
		      ('startCDATA', State)
	      in  %% Line 620
		  apply 'parse_cdata'/3
		      (Rest, State1, [])
	  %% Line 621
	  <Bytes,State> when 'true' ->
	      %% Line 622
	      apply 'unicode_incomplete_check'/2
		  ([Bytes|[State|[( 'parse_cdata'/2
				    -| [{'id',{0,0,'-parse_cdata/2-fun-7-'}}] )|[]]]], %% Line 623
										       [101|[120|[112|[101|[99|[116|[105|[110|[103|[32|[99|[111|[109|[109|[101|[110|[116|[32|[111|[114|[32|[67|[68|[65|[84|[65]]]]]]]]]]]]]]]]]]]]]]]]]])
	end
'parse_cdata'/3 =
    %% Line 634
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <#{}#,State,Acc> when 'true' ->
	      %% Line 635
	      apply 'cf'/4
		  (#{}#, State, Acc, ( 'parse_cdata'/3
				       -| [{'id',{0,0,'-parse_cdata/3-fun-0-'}}] ))
	  %% Line 636
	  <Bytes = #{#<13>('undefined','undefined','utf8',['unsigned'|['big']])}#,State,Acc> when 'true' ->
	      %% Line 637
	      apply 'cf'/4
		  (Bytes, State, Acc, ( 'parse_cdata'/3
					-| [{'id',{0,0,'-parse_cdata/3-fun-1-'}}] ))
	  %% Line 638
	  <Bytes = #{#<93>('undefined','undefined','utf8',['unsigned'|['big']])}#,State,Acc> when 'true' ->
	      %% Line 639
	      apply 'cf'/4
		  (Bytes, State, Acc, ( 'parse_cdata'/3
					-| [{'id',{0,0,'-parse_cdata/3-fun-2-'}}] ))
	  %% Line 640
	  <Bytes = #{#<93>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<93>('undefined','undefined','utf8',['unsigned'|['big']])}#,State,Acc> when 'true' ->
	      %% Line 641
	      apply 'cf'/4
		  (Bytes, State, Acc, ( 'parse_cdata'/3
					-| [{'id',{0,0,'-parse_cdata/3-fun-3-'}}] ))
	  %% Line 642
	  <#{#<93>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<93>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<62>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State,Acc> when 'true' ->
	      let <_cor3> =
		  %% Line 643
		  call 'lists':'reverse'
		      (Acc)
	      in  let <State1> =
		      %% Line 643
		      apply 'event_callback'/2
			  ({'characters',_cor3}, State)
		  in  let <State2> =
			  %% Line 644
			  apply 'event_callback'/2
			      ('endCDATA', State1)
		      in  %% Line 645
			  apply 'parse_content'/4
			      (Rest, State2, [], 'true')
	  %% Line 646
	  <#{#<10>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State = {'xmerl_sax_parser_state',_cor38,_cor39,_cor40,_cor41,_cor42,N,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53},Acc> when 'true' ->
	      let <_rec15> =
		  %% Line 647
		  call 'erlang':'+'
		      (N, 1)
	      in  let <_cor9> =
		      %% Line 647
		      call 'erlang':'setelement'
			  (7, State, _rec15)
		  in  %% Line 647
		      apply 'parse_cdata'/3
			  (Rest, _cor9, [10|Acc])
	  %% Line 648
	  <#{#<13>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<10>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State = {'xmerl_sax_parser_state',_cor72,_cor73,_cor74,_cor75,_cor76,N,_cor77,_cor78,_cor79,_cor80,_cor81,_cor82,_cor83,_cor84,_cor85,_cor86,_cor87},Acc> when 'true' ->
	      let <_rec17> =
		  %% Line 649
		  call 'erlang':'+'
		      (N, 1)
	      in  let <_cor13> =
		      %% Line 649
		      call 'erlang':'setelement'
			  (7, State, _rec17)
		  in  %% Line 649
		      apply 'parse_cdata'/3
			  (Rest, _cor13, [10|Acc])
	  %% Line 650
	  <#{#<13>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State = {'xmerl_sax_parser_state',_cor106,_cor107,_cor108,_cor109,_cor110,N,_cor111,_cor112,_cor113,_cor114,_cor115,_cor116,_cor117,_cor118,_cor119,_cor120,_cor121},Acc> when 'true' ->
	      let <_rec19> =
		  %% Line 651
		  call 'erlang':'+'
		      (N, 1)
	      in  let <_cor17> =
		      %% Line 651
		      call 'erlang':'setelement'
			  (7, State, _rec19)
		  in  %% Line 651
		      apply 'parse_cdata'/3
			  (Rest, _cor17, [10|Acc])
	  %% Line 652
	  <#{#<C>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State,Acc>
	      when let <_cor20> =
		    let <_cor18> =
			call 'erlang':'=<'
			    (32, C)
		    in  let <_cor19> =
			    call 'erlang':'=<'
				(C, 55295)
			in  call 'erlang':'and'
				(_cor18, _cor19)
		in  let <_cor21> =
			call 'erlang':'=:='
			    (C, 13)
		    in  let <_cor22> =
			    call 'erlang':'=:='
				(C, 10)
			in  let <_cor23> =
				call 'erlang':'=:='
				    (C, 9)
			    in  let <_cor26> =
				    let <_cor24> =
					call 'erlang':'=<'
					    (57344, C)
				    in  let <_cor25> =
					    call 'erlang':'=<'
						(C, 65533)
					in  call 'erlang':'and'
						(_cor24, _cor25)
				in  let <_cor29> =
					let <_cor27> =
					    call 'erlang':'=<'
						(65536, C)
					in  let <_cor28> =
						call 'erlang':'=<'
						    (C, 1114111)
					    in  call 'erlang':'and'
						    (_cor27, _cor28)
				    in  let <_cor30> =
					    call 'erlang':'or'
						(_cor26, _cor29)
					in  let <_cor31> =
						call 'erlang':'or'
						    (_cor23, _cor30)
					    in  let <_cor32> =
						    call 'erlang':'or'
							(_cor22, _cor31)
						in  let <_cor33> =
							call 'erlang':'or'
							    (_cor21, _cor32)
						    in  call 'erlang':'or'
							    (_cor20, _cor33) ->
	      %% Line 653
	      apply 'parse_cdata'/3
		  (Rest, State, [C|Acc])
	  %% Line 654
	  <#{#<C>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<_cor140>('all',8,'binary',['unsigned'|['big']])}#,State,_cor141> when 'true' ->
	      let <_cor34> =
		  %% Line 655
		  call 'erlang':'++'
		      ([67|[68|[65|[84|[65|[32|[99|[111|[110|[116|[97|[105|[110|[115|[32|[98|[97|[100|[32|[99|[104|[97|[114|[97|[99|[116|[101|[114|[32|[118|[97|[108|[117|[101|[58|[32]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [C|[]])
	      in  %% Line 655
		  call 'erlang':'throw'
		      ({'fatal_error',{State,_cor34}})
	  %% Line 656
	  <Bytes,State,Acc> when 'true' ->
	      %% Line 657
	      apply 'unicode_incomplete_check'/2
		  ([Bytes|[State|[Acc|[( 'parse_cdata'/3
					 -| [{'id',{0,0,'-parse_cdata/3-fun-4-'}}] )|[]]]]], %% Line 658
											     'undefined')
	end
'parse_comment'/3 =
    %% Line 670
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <#{}#,State,Acc> when 'true' ->
	      %% Line 671
	      apply 'cf'/4
		  (#{}#, State, Acc, ( 'parse_comment'/3
				       -| [{'id',{0,0,'-parse_comment/3-fun-0-'}}] ))
	  %% Line 672
	  <Bytes = #{#<13>('undefined','undefined','utf8',['unsigned'|['big']])}#,State,Acc> when 'true' ->
	      %% Line 673
	      apply 'cf'/4
		  (Bytes, State, Acc, ( 'parse_comment'/3
					-| [{'id',{0,0,'-parse_comment/3-fun-1-'}}] ))
	  %% Line 674
	  <Bytes = #{#<45>('undefined','undefined','utf8',['unsigned'|['big']])}#,State,Acc> when 'true' ->
	      %% Line 675
	      apply 'cf'/4
		  (Bytes, State, Acc, ( 'parse_comment'/3
					-| [{'id',{0,0,'-parse_comment/3-fun-2-'}}] ))
	  %% Line 676
	  <Bytes = #{#<45>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<45>('undefined','undefined','utf8',['unsigned'|['big']])}#,State,Acc> when 'true' ->
	      %% Line 677
	      apply 'cf'/4
		  (Bytes, State, Acc, ( 'parse_comment'/3
					-| [{'id',{0,0,'-parse_comment/3-fun-3-'}}] ))
	  %% Line 678
	  <#{#<45>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<45>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<62>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State,Acc> when 'true' ->
	      let <_cor3> =
		  %% Line 679
		  call 'lists':'reverse'
		      (Acc)
	      in  let <State1> =
		      %% Line 679
		      apply 'event_callback'/2
			  ({'comment',_cor3}, State)
		  in  %% Line 680
		      {Rest,State1}
	  %% Line 681
	  <#{#<45>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<45>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<_cor37>('all',8,'binary',['unsigned'|['big']])}#,State,_cor38> when 'true' ->
	      %% Line 682
	      call 'erlang':'throw'
		  ({'fatal_error',{State,[99|[111|[109|[109|[101|[110|[116|[32|[99|[111|[110|[116|[97|[105|[110|[115|[32|[39|[45|[45|[39]]]]]]]]]]]]]]]]]]]]]}})
	  %% Line 683
	  <#{#<10>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State = {'xmerl_sax_parser_state',_cor39,_cor40,_cor41,_cor42,_cor43,N,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54},Acc> when 'true' ->
	      let <_rec21> =
		  %% Line 684
		  call 'erlang':'+'
		      (N, 1)
	      in  let <_cor8> =
		      %% Line 684
		      call 'erlang':'setelement'
			  (7, State, _rec21)
		  in  %% Line 684
		      apply 'parse_comment'/3
			  (Rest, _cor8, [10|Acc])
	  %% Line 685
	  <#{#<13>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<10>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State = {'xmerl_sax_parser_state',_cor73,_cor74,_cor75,_cor76,_cor77,N,_cor78,_cor79,_cor80,_cor81,_cor82,_cor83,_cor84,_cor85,_cor86,_cor87,_cor88},Acc> when 'true' ->
	      let <_rec23> =
		  %% Line 686
		  call 'erlang':'+'
		      (N, 1)
	      in  let <_cor12> =
		      %% Line 686
		      call 'erlang':'setelement'
			  (7, State, _rec23)
		  in  %% Line 686
		      apply 'parse_comment'/3
			  (Rest, _cor12, [10|Acc])
	  %% Line 687
	  <#{#<13>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State = {'xmerl_sax_parser_state',_cor107,_cor108,_cor109,_cor110,_cor111,N,_cor112,_cor113,_cor114,_cor115,_cor116,_cor117,_cor118,_cor119,_cor120,_cor121,_cor122},Acc> when 'true' ->
	      let <_rec25> =
		  %% Line 688
		  call 'erlang':'+'
		      (N, 1)
	      in  let <_cor16> =
		      %% Line 688
		      call 'erlang':'setelement'
			  (7, State, _rec25)
		  in  %% Line 688
		      apply 'parse_comment'/3
			  (Rest, _cor16, [10|Acc])
	  %% Line 689
	  <#{#<C>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State,Acc> when 'true' ->
	      %% Line 690
	      case <> of
		%% Line 691
		<>
		    when let <_cor19> =
			  let <_cor17> =
			      call 'erlang':'=<'
				  (32, C)
			  in  let <_cor18> =
				  call 'erlang':'=<'
				      (C, 55295)
			      in  call 'erlang':'and'
				      (_cor17, _cor18)
		      in  let <_cor20> =
			      call 'erlang':'=:='
				  (C, 13)
			  in  let <_cor21> =
				  call 'erlang':'=:='
				      (C, 10)
			      in  let <_cor22> =
				      call 'erlang':'=:='
					  (C, 9)
				  in  let <_cor25> =
					  let <_cor23> =
					      call 'erlang':'=<'
						  (57344, C)
					  in  let <_cor24> =
						  call 'erlang':'=<'
						      (C, 65533)
					      in  call 'erlang':'and'
						      (_cor23, _cor24)
				      in  let <_cor28> =
					      let <_cor26> =
						  call 'erlang':'=<'
						      (65536, C)
					      in  let <_cor27> =
						      call 'erlang':'=<'
							  (C, 1114111)
						  in  call 'erlang':'and'
							  (_cor26, _cor27)
					  in  let <_cor29> =
						  call 'erlang':'or'
						      (_cor25, _cor28)
					      in  let <_cor30> =
						      call 'erlang':'or'
							  (_cor22, _cor29)
						  in  let <_cor31> =
							  call 'erlang':'or'
							      (_cor21, _cor30)
						      in  let <_cor32> =
							      call 'erlang':'or'
								  (_cor20, _cor31)
							  in  call 'erlang':'or'
								  (_cor19, _cor32) ->
		    %% Line 692
		    apply 'parse_comment'/3
			(Rest, State, [C|Acc])
		%% Line 693
		<> when 'true' ->
		    let <_cor33> =
			%% Line 694
			call 'erlang':'++'
			    ([66|[97|[100|[32|[99|[104|[97|[114|[97|[99|[116|[101|[114|[32|[105|[110|[32|[99|[111|[109|[109|[101|[110|[116|[58|[32]]]]]]]]]]]]]]]]]]]]]]]]]], C)
		    in  %% Line 694
			call 'erlang':'throw'
			    ({'fatal_error',{State,_cor33}})
	      end
	  %% Line 696
	  <Bytes,State,Acc> when 'true' ->
	      %% Line 697
	      apply 'unicode_incomplete_check'/2
		  ([Bytes|[State|[Acc|[( 'parse_comment'/3
					 -| [{'id',{0,0,'-parse_comment/3-fun-4-'}}] )|[]]]]], %% Line 698
											       'undefined')
	end
'parse_misc'/3 =
    %% Line 712
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <#{}#,State,'true'> when 'true' ->
	      %% Line 713
	      {#{}#,State}
	  %% Line 714
	  <#{}#,State,Eod> when 'true' ->
	      %% Line 715
	      apply 'cf'/4
		  (#{}#, State, Eod, ( 'parse_misc'/3
				       -| [{'id',{0,0,'-parse_misc/3-fun-0-'}}] ))
	  %% Line 716
	  <Rest = #{#<60>('undefined','undefined','utf8',['unsigned'|['big']])}#,State,Eod> when 'true' ->
	      %% Line 717
	      apply 'cf'/4
		  (Rest, State, Eod, ( 'parse_misc'/3
				       -| [{'id',{0,0,'-parse_misc/3-fun-1-'}}] ))
	  %% Line 718
	  <#{#<60>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<63>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State,Eod> when 'true' ->
	      %% Line 719
	      case apply 'parse_pi'/2
		       (Rest, State) of
		%% Line 720
		<{Rest1,State1}> when 'true' ->
		    %% Line 721
		    apply 'parse_misc'/3
			(Rest1, State1, Eod)
		%% Line 722
		<{'endDocument',_X_Rest1,State1}> when 'true' ->
		    let <IValue> =
			%% Line 723
			call 'unicode':'characters_to_binary'
			    ([60|[63]], 'unicode', 'utf8')
		    in  let <_cor4> =
			    %% Line 724
			    #{#<IValue>('all',8,'binary',['unsigned'|['big']]),
			      #<Rest>('all',8,'binary',['unsigned'|['big']])}#
			in  %% Line 724
			    {_cor4,State1}
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 726
	  <Rest = #{#<60>('undefined','undefined','utf8',['unsigned'|['big']]),
		    #<33>('undefined','undefined','utf8',['unsigned'|['big']])}#,State,Eod> when 'true' ->
	      %% Line 727
	      apply 'cf'/4
		  (Rest, State, Eod, ( 'parse_misc'/3
				       -| [{'id',{0,0,'-parse_misc/3-fun-2-'}}] ))
	  %% Line 728
	  <Rest = #{#<60>('undefined','undefined','utf8',['unsigned'|['big']]),
		    #<33>('undefined','undefined','utf8',['unsigned'|['big']]),
		    #<45>('undefined','undefined','utf8',['unsigned'|['big']])}#,State,Eod> when 'true' ->
	      %% Line 729
	      apply 'cf'/4
		  (Rest, State, Eod, ( 'parse_misc'/3
				       -| [{'id',{0,0,'-parse_misc/3-fun-3-'}}] ))
	  %% Line 730
	  <#{#<60>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<33>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<45>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<45>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State,Eod> when 'true' ->
	      %% Line 731
	      case apply 'parse_comment'/3
		       (Rest, State, []) of
		<{Rest1,State1}> when 'true' ->
		    %% Line 732
		    apply 'parse_misc'/3
			(Rest1, State1, Eod)
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor6})
		  -| ['compiler_generated'] )
	      end
	  %% Line 733
	  <Rest = #{#<C>('undefined','undefined','utf8',['unsigned'|['big']]),
		    #<_cor17>('all',8,'binary',['unsigned'|['big']])}#,State,Eod>
	      when let <_cor7> =
		    call 'erlang':'=:='
			(C, 32)
		in  let <_cor8> =
			call 'erlang':'=:='
			    (C, 13)
		    in  let <_cor9> =
			    call 'erlang':'=:='
				(C, 10)
			in  let <_cor10> =
				call 'erlang':'=:='
				    (C, 9)
			    in  let <_cor11> =
				    call 'erlang':'or'
					(_cor9, _cor10)
				in  let <_cor12> =
					call 'erlang':'or'
					    (_cor8, _cor11)
				    in  call 'erlang':'or'
					    (_cor7, _cor12) ->
	      %% Line 734
	      case apply 'whitespace'/3
		       (Rest, State, []) of
		<{_X_WS,Rest1,State1}> when 'true' ->
		    %% Line 735
		    apply 'parse_misc'/3
			(Rest1, State1, Eod)
		( <_cor13> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor13})
		  -| ['compiler_generated'] )
	      end
	  %% Line 736
	  <Rest,State,_X_Eod> when 'true' ->
	      %% Line 737
	      {Rest,State}
	end
'parse_stag'/2 =
    %% Line 749
    fun (_cor1,_cor0) ->
	case <( _cor1
		-| ['reuse_for_context'] ),_cor0> of
	  <#{}#,State> when 'true' ->
	      %% Line 750
	      apply 'cf'/3
		  (#{}#, State, ( 'parse_stag'/2
				  -| [{'id',{0,0,'-parse_stag/2-fun-0-'}}] ))
	  %% Line 751
	  <#{#<C>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State> when 'true' ->
	      %% Line 752
	      case apply 'is_name_start'/1
		       (C) of
		%% Line 753
		<'true'> when 'true' ->
		    %% Line 754
		    case %% Line 755
			 apply 'parse_ns_name'/4
			     (Rest, State, [], [C|[]]) of
		      <{TagName,Rest1,State1}> when 'true' ->
			  %% Line 756
			  apply 'parse_attributes'/3
			      (Rest1, State1, {TagName,[],[]})
		      ( <_cor2> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor2})
			-| ['compiler_generated'] )
		    end
		%% Line 757
		<'false'> when 'true' ->
		    %% Line 758
		    call 'erlang':'throw'
			({'fatal_error',{State,[101|[120|[112|[101|[99|[116|[105|[110|[103|[32|[110|[97|[109|[101]]]]]]]]]]]]]]}})
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 760
	  <Bytes,State> when 'true' ->
	      do  primop 'bs_context_to_binary'
		      (Bytes)
		  %% Line 761
		  apply 'unicode_incomplete_check'/2
		      ([Bytes|[State|[( 'parse_stag'/2
					-| [{'id',{0,0,'-parse_stag/2-fun-1-'}}] )|[]]]], %% Line 762
											  'undefined')
	end
'parse_attributes'/3 =
    %% Line 778
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <#{}#,State,CurrentTag> when 'true' ->
	      %% Line 779
	      apply 'cf'/4
		  (#{}#, State, CurrentTag, ( 'parse_attributes'/3
					      -| [{'id',{0,0,'-parse_attributes/3-fun-0-'}}] ))
	  %% Line 780
	  <Bytes = #{#<47>('undefined','undefined','utf8',['unsigned'|['big']])}#,State,CurrentTag> when 'true' ->
	      %% Line 781
	      apply 'cf'/4
		  (Bytes, State, CurrentTag, ( 'parse_attributes'/3
					       -| [{'id',{0,0,'-parse_attributes/3-fun-1-'}}] ))
	  %% Line 782
	  <#{#<47>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<62>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State,{Tag,AttList,NewNsList}> when 'true' ->
	      %% Line 783
	      ( case State of
		  ( <( {'xmerl_sax_parser_state',_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_rec27,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59}
		       -| ['compiler_generated'] )> when 'true' ->
			let <CompleteNsList> =
			    call 'erlang':'++'
				(NewNsList, _rec27)
			in  %% Line 784
			    case apply 'fix_ns'/3
				     (Tag, AttList, CompleteNsList) of
			      <{Uri,LocalName,QName,Attributes}> when 'true' ->
				  let <_cor7> =
				      %% Line 785
				      call 'lists':'reverse'
					  (NewNsList)
				  in  let <State1> =
					  %% Line 785
					  apply 'send_start_prefix_mapping_event'/2
					      (_cor7, State)
				      in  let <State2> =
					      %% Line 786
					      apply 'event_callback'/2
						  ({'startElement',Uri,LocalName,QName,Attributes}, State1)
					  in  let <State3> =
						  %% Line 787
						  apply 'event_callback'/2
						      ({'endElement',Uri,LocalName,QName}, State2)
					      in  let <State4> =
						      %% Line 788
						      apply 'send_end_prefix_mapping_event'/2
							  (NewNsList, State3)
						  in  %% Line 789
						      apply 'parse_content'/4
							  (Rest, State4, [], 'true')
			      ( <_cor6> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor6})
				-| ['compiler_generated'] )
			    end
		    -| ['compiler_generated'] )
		  ( <_cor60> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','xmerl_sax_parser_state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 790
	  <#{#<62>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State = {'xmerl_sax_parser_state',_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,OldNsList,_cor67,ETags,_cor68,_cor69,_cor70,_cor71,_cor72,_cor73,_cor74,_cor75},%% Line 791
																											  {Tag,AttList,NewNsList}> when 'true' ->
	      let <CompleteNsList> =
		  %% Line 792
		  call 'erlang':'++'
		      (NewNsList, OldNsList)
	      in  %% Line 793
		  case apply 'fix_ns'/3
			   (Tag, AttList, CompleteNsList) of
		    <{Uri,LocalName,QName,Attributes}> when 'true' ->
			let <_cor14> =
			    %% Line 794
			    call 'lists':'reverse'
				(NewNsList)
			in  let <State1> =
				%% Line 794
				apply 'send_start_prefix_mapping_event'/2
				    (_cor14, State)
			    in  let <State2> =
				    %% Line 795
				    apply 'event_callback'/2
					({'startElement',Uri,LocalName,QName,Attributes}, State1)
				in  let <_rec28> =
					%% Line 796
					[{Tag,Uri,LocalName,QName,%% Line 797
								  OldNsList,%% Line 797
									    NewNsList}|%% Line 797
										       ETags]
				    in  %% Line 798
					case State2 of
					  <{'xmerl_sax_parser_state',_cor76,_cor77,_cor78,_cor79,_cor80,_cor81,_cor82,_cor83,_cor84,_cor85,_cor86,_cor87,_cor88,_cor89,_cor90,_cor91,_cor92}> when 'true' ->
					      let <_cor19> =
						  call 'erlang':'setelement'
						      (10, State2, _rec28)
					      in  let <_cor21> =
						      call 'erlang':'setelement'
							  (8, _cor19, CompleteNsList)
						  in  apply 'parse_content'/4
							  (Rest, _cor21, %% Line 799
									 [], %% Line 799
									     'true')
					  ( <_cor93> when 'true' ->
						( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'error'
										       -| ['compiler_generated'] )
						      (( {'badrecord','xmerl_sax_parser_state'}
							 -| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					end
		    ( <_cor13> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor13})
		      -| ['compiler_generated'] )
		  end
	  %% Line 800
	  <Rest = #{#<C>('undefined','undefined','utf8',['unsigned'|['big']]),
		    #<_cor94>('all',8,'binary',['unsigned'|['big']])}#,State,CurrentTag>
	      when let <_cor22> =
		    call 'erlang':'=:='
			(C, 32)
		in  let <_cor23> =
			call 'erlang':'=:='
			    (C, 13)
		    in  let <_cor24> =
			    call 'erlang':'=:='
				(C, 10)
			in  let <_cor25> =
				call 'erlang':'=:='
				    (C, 9)
			    in  let <_cor26> =
				    call 'erlang':'or'
					(_cor24, _cor25)
				in  let <_cor27> =
					call 'erlang':'or'
					    (_cor23, _cor26)
				    in  call 'erlang':'or'
					    (_cor22, _cor27) ->
	      %% Line 801
	      case apply 'whitespace'/3
		       (Rest, State, []) of
		<{_X_WS,Rest1,State1}> when 'true' ->
		    %% Line 802
		    apply 'parse_attributes'/3
			(Rest1, State1, CurrentTag)
		( <_cor28> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor28})
		  -| ['compiler_generated'] )
	      end
	  %% Line 803
	  <#{#<C>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State,{Tag,AttList,NsList}> when 'true' ->
	      %% Line 804
	      case apply 'is_name_start'/1
		       (C) of
		%% Line 805
		<'true'> when 'true' ->
		    %% Line 806
		    case %% Line 807
			 apply 'parse_ns_name'/4
			     (Rest, State, [], [C|[]]) of
		      <{AttrName,Rest1,State1}> when 'true' ->
			  %% Line 808
			  case apply 'parse_eq'/2
				   (Rest1, State1) of
			    <{Rest2,State2}> when 'true' ->
				%% Line 809
				case apply 'parse_att_value'/2
					 (Rest2, State2) of
				  <{AttValue,Rest3,State3}> when 'true' ->
				      %% Line 810
				      case AttrName of
					%% Line 811
					<{[120|[109|[108|[110|[115]]]]],NsName}> when 'true' ->
					    %% Line 812
					    apply 'parse_attributes'/3
						(Rest3, State3, {Tag,AttList,[{NsName,AttValue}|NsList]})
					%% Line 813
					<{[],[120|[109|[108|[110|[115]]]]]}> when 'true' ->
					    %% Line 814
					    apply 'parse_attributes'/3
						(Rest3, State3, {Tag,AttList,[{[],AttValue}|NsList]})
					%% Line 815
					<{_X_Prefix,_X_LocalName}> when 'true' ->
					    %% Line 816
					    case call 'lists':'keyfind'
						     (AttrName, 1, AttList) of
					      %% Line 817
					      <'false'> when 'true' ->
						  %% Line 818
						  apply 'parse_attributes'/3
						      (Rest3, State3, {Tag,[{AttrName,AttValue}|AttList],NsList})
					      %% Line 819
					      <_cor95> when 'true' ->
						  let <_cor34> =
						      %% Line 821
						      case Tag of
							%% Line 822
							<{[],N}> when 'true' ->
							    N
							%% Line 823
							<{Ns,N}> when 'true' ->
							    let <_cor32> =
								[58|N]
							    in  call 'erlang':'++'
								    (Ns, _cor32)
							( <_cor33> when 'true' ->
							      primop 'match_fail'
								  ({'case_clause',_cor33})
							  -| ['compiler_generated'] )
						      end
						  in  let <_cor36> =
							  %% Line 825
							  call 'erlang':'++'
							      ([65|[116|[116|[114|[105|[98|[117|[116|[101|[32|[101|[120|[105|[115|[116|[32|[109|[111|[114|[101|[32|[116|[104|[97|[110|[32|[111|[110|[99|[101|[32|[105|[110|[32|[101|[108|[101|[109|[101|[110|[116|[58|[32]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], _cor34)
						      in  %% Line 825
							  call 'erlang':'throw'
							      ({'fatal_error',{State,_cor36}})
					    end
					( <_cor38> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_cor38})
					  -| ['compiler_generated'] )
				      end
				  ( <_cor31> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor31})
				    -| ['compiler_generated'] )
				end
			    ( <_cor30> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor30})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor29> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor29})
			-| ['compiler_generated'] )
		    end
		%% Line 828
		<'false'> when 'true' ->
		    let <_cor39> =
			%% Line 829
			call 'erlang':'++'
			    ([73|[110|[118|[97|[108|[105|[100|[32|[115|[116|[97|[114|[116|[32|[99|[104|[97|[114|[97|[99|[116|[101|[114|[32|[105|[110|[32|[97|[116|[116|[114|[105|[98|[117|[116|[101|[32|[110|[97|[109|[101|[58|[32]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [C|[]])
		    in  %% Line 829
			call 'erlang':'throw'
			    ({'fatal_error',{State,_cor39}})
		( <_cor40> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor40})
		  -| ['compiler_generated'] )
	      end
	  %% Line 831
	  <Bytes,State,CurrentTag> when 'true' ->
	      %% Line 832
	      apply 'unicode_incomplete_check'/2
		  ([Bytes|[State|[CurrentTag|[( 'parse_attributes'/3
						-| [{'id',{0,0,'-parse_attributes/3-fun-2-'}}] )|[]]]]], %% Line 833
													 [101|[120|[112|[101|[99|[116|[105|[110|[103|[32|[110|[97|[109|[101|[44|[32|[119|[104|[105|[116|[101|[115|[112|[97|[99|[101|[44|[32|[47|[62|[32|[111|[114|[32|[62]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
	end
'fix_ns'/3 =
    %% Line 851
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{Prefix,Name},Attributes,Ns> when 'true' ->
	      let <_cor4> =
		  %% Line 853
		  case call 'lists':'keysearch'
			   (Prefix, 1, Ns) of
		    %% Line 854
		    <{'value',{_cor10,U}}>
			when call 'erlang':'=:='
			      (_cor10,
			       Prefix) ->
			%% Line 855
			U
		    %% Line 856
		    <'false'> when 'true' ->
			%% Line 857
			[]
		    ( <_cor3> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor3})
		      -| ['compiler_generated'] )
		  end
	      in  let <Attributes2> =
		      %% Line 859
		      apply 'fix_attributes_ns'/3
			  (Attributes, Ns, [])
		  in  %% Line 861
		      {_cor4,Name,{Prefix,Name},Attributes2}
	  ( <_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7})
		  -| [{'function_name',{'fix_ns',3}}] )
	    -| ['compiler_generated'] )
	end
'fix_attributes_ns'/3 =
    %% Line 874
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],_cor9,Acc> when 'true' ->
	      %% Line 875
	      Acc
	  %% Line 876
	  <[{{[],Name},AttrValue}|Attrs],Ns,Acc> when 'true' ->
	      %% Line 877
	      apply 'fix_attributes_ns'/3
		  (Attrs, Ns, [{[],[],Name,AttrValue}|Acc])
	  %% Line 878
	  <[{{Prefix,Name},AttrValue}|Attrs],Ns,Acc> when 'true' ->
	      let <_cor4> =
		  %% Line 880
		  case call 'lists':'keysearch'
			   (Prefix, 1, Ns) of
		    %% Line 881
		    <{'value',{_cor10,U}}>
			when call 'erlang':'=:='
			      (_cor10,
			       Prefix) ->
			%% Line 882
			U
		    %% Line 883
		    <'false'> when 'true' ->
			%% Line 884
			[]
		    ( <_cor3> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor3})
		      -| ['compiler_generated'] )
		  end
	      in  %% Line 886
		  apply 'fix_attributes_ns'/3
		      (Attrs, Ns, [{_cor4,Prefix,Name,AttrValue}|Acc])
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'fix_attributes_ns',3}}] )
	    -| ['compiler_generated'] )
	end
'send_start_prefix_mapping_event'/2 =
    %% Line 898
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],State> when 'true' ->
	      %% Line 899
	      State
	  %% Line 900
	  <[{Prefix,Uri}|Ns],State> when 'true' ->
	      let <State1> =
		  %% Line 901
		  apply 'event_callback'/2
		      ({'startPrefixMapping',Prefix,Uri}, State)
	      in  %% Line 902
		  apply 'send_start_prefix_mapping_event'/2
		      (Ns, State1)
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'send_start_prefix_mapping_event',2}}] )
	    -| ['compiler_generated'] )
	end
'send_end_prefix_mapping_event'/2 =
    %% Line 914
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],State> when 'true' ->
	      %% Line 915
	      State
	  %% Line 916
	  <[{Prefix,_X_Uri}|Ns],State> when 'true' ->
	      let <State1> =
		  %% Line 917
		  apply 'event_callback'/2
		      ({'endPrefixMapping',Prefix}, State)
	      in  %% Line 918
		  apply 'send_end_prefix_mapping_event'/2
		      (Ns, State1)
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'send_end_prefix_mapping_event',2}}] )
	    -| ['compiler_generated'] )
	end
'parse_eq'/2 =
    %% Line 929
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <#{}#,State> when 'true' ->
	      %% Line 930
	      apply 'cf'/3
		  (#{}#, State, ( 'parse_eq'/2
				  -| [{'id',{0,0,'-parse_eq/2-fun-0-'}}] ))
	  %% Line 931
	  <#{#<61>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State> when 'true' ->
	      %% Line 932
	      {Rest,State}
	  %% Line 933
	  <Bytes = #{#<C>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<_cor11>('all',8,'binary',['unsigned'|['big']])}#,State>
	      when let <_cor2> =
		    call 'erlang':'=:='
			(C, 32)
		in  let <_cor3> =
			call 'erlang':'=:='
			    (C, 13)
		    in  let <_cor4> =
			    call 'erlang':'=:='
				(C, 10)
			in  let <_cor5> =
				call 'erlang':'=:='
				    (C, 9)
			    in  let <_cor6> =
				    call 'erlang':'or'
					(_cor4, _cor5)
				in  let <_cor7> =
					call 'erlang':'or'
					    (_cor3, _cor6)
				    in  call 'erlang':'or'
					    (_cor2, _cor7) ->
	      %% Line 934
	      case %% Line 935
		   apply 'whitespace'/3
		       (Bytes, State, []) of
		<{_X_WS,Rest,State1}> when 'true' ->
		    %% Line 936
		    apply 'parse_eq'/2
			(Rest, State1)
		( <_cor8> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor8})
		  -| ['compiler_generated'] )
	      end
	  %% Line 937
	  <Bytes,State> when 'true' ->
	      %% Line 938
	      apply 'unicode_incomplete_check'/2
		  ([Bytes|[State|[( 'parse_eq'/2
				    -| [{'id',{0,0,'-parse_eq/2-fun-1-'}}] )|[]]]], %% Line 939
										    [101|[120|[112|[101|[99|[116|[105|[110|[103|[32|[61|[32|[111|[114|[32|[119|[104|[105|[116|[101|[115|[112|[97|[99|[101]]]]]]]]]]]]]]]]]]]]]]]]])
	end
'parse_att_value'/2 =
    %% Line 951
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <#{}#,State> when 'true' ->
	      %% Line 952
	      apply 'cf'/3
		  (#{}#, State, ( 'parse_att_value'/2
				  -| [{'id',{0,0,'-parse_att_value/2-fun-0-'}}] ))
	  %% Line 953
	  <#{#<C>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State>
	      when let <_cor2> =
		    call 'erlang':'=='
			(C, 39)
		in  let <_cor3> =
			call 'erlang':'=='
			    (C, 34)
		    in  call 'erlang':'or'
			    (_cor2, _cor3) ->
	      %% Line 954
	      apply 'parse_att_value'/4
		  (Rest, State, C, [])
	  %% Line 955
	  <Bytes = #{#<C>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<_cor13>('all',8,'binary',['unsigned'|['big']])}#,State>
	      when let <_cor4> =
		    call 'erlang':'=:='
			(C, 32)
		in  let <_cor5> =
			call 'erlang':'=:='
			    (C, 13)
		    in  let <_cor6> =
			    call 'erlang':'=:='
				(C, 10)
			in  let <_cor7> =
				call 'erlang':'=:='
				    (C, 9)
			    in  let <_cor8> =
				    call 'erlang':'or'
					(_cor6, _cor7)
				in  let <_cor9> =
					call 'erlang':'or'
					    (_cor5, _cor8)
				    in  call 'erlang':'or'
					    (_cor4, _cor9) ->
	      %% Line 956
	      case %% Line 957
		   apply 'whitespace'/3
		       (Bytes, State, []) of
		<{_X_WS,Rest,State1}> when 'true' ->
		    %% Line 958
		    apply 'parse_att_value'/2
			(Rest, State1)
		( <_cor10> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor10})
		  -| ['compiler_generated'] )
	      end
	  %% Line 959
	  <Bytes,State> when 'true' ->
	      %% Line 960
	      apply 'unicode_incomplete_check'/2
		  ([Bytes|[State|[( 'parse_att_value'/2
				    -| [{'id',{0,0,'-parse_att_value/2-fun-1-'}}] )|[]]]], %% Line 961
											   [39|[44|[32|[34|[32|[111|[114|[32|[119|[104|[105|[116|[101|[115|[112|[97|[99|[101|[32|[101|[120|[112|[101|[99|[116|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]]]])
	end
'parse_att_value'/4 =
    %% Line 974
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <#{}#,State,'undefined',Acc> when 'true' ->
	      %% Line 975
	      {Acc,[],State}
	  %% Line 976
	  <#{}#,State,Stop,Acc> when 'true' ->
	      %% Line 977
	      apply 'cf'/5
		  (#{}#, State, Stop, Acc, ( 'parse_att_value'/4
					     -| [{'id',{0,0,'-parse_att_value/4-fun-0-'}}] ))
	  %% Line 978
	  <Bytes = #{#<13>('undefined','undefined','utf8',['unsigned'|['big']])}#,State,Stop,Acc> when 'true' ->
	      %% Line 979
	      apply 'cf'/5
		  (Bytes, State, Stop, Acc, ( 'parse_att_value'/4
					      -| [{'id',{0,0,'-parse_att_value/4-fun-1-'}}] ))
	  %% Line 980
	  <#{#<10>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State = {'xmerl_sax_parser_state',_cor59,_cor60,_cor61,_cor62,_cor63,N,_cor64,_cor65,_cor66,_cor67,_cor68,_cor69,_cor70,_cor71,_cor72,_cor73,_cor74},Stop,Acc> when 'true' ->
	      let <_rec30> =
		  %% Line 982
		  call 'erlang':'+'
		      (N, 1)
	      in  let <_cor7> =
		      %% Line 982
		      call 'erlang':'setelement'
			  (7, State, _rec30)
		  in  %% Line 981
		      apply 'parse_att_value'/4
			  (Rest, _cor7, %% Line 982
					Stop, %% Line 982
					      [32|Acc])
	  %% Line 983
	  <#{#<13>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<10>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State = {'xmerl_sax_parser_state',_cor93,_cor94,_cor95,_cor96,_cor97,N,_cor98,_cor99,_cor100,_cor101,_cor102,_cor103,_cor104,_cor105,_cor106,_cor107,_cor108},Stop,Acc> when 'true' ->
	      let <_rec32> =
		  %% Line 985
		  call 'erlang':'+'
		      (N, 1)
	      in  let <_cor11> =
		      %% Line 985
		      call 'erlang':'setelement'
			  (7, State, _rec32)
		  in  %% Line 984
		      apply 'parse_att_value'/4
			  (Rest, _cor11, %% Line 985
					 Stop, %% Line 985
					       [32|Acc])
	  %% Line 986
	  <#{#<13>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State = {'xmerl_sax_parser_state',_cor127,_cor128,_cor129,_cor130,_cor131,N,_cor132,_cor133,_cor134,_cor135,_cor136,_cor137,_cor138,_cor139,_cor140,_cor141,_cor142},Stop,Acc> when 'true' ->
	      let <_rec34> =
		  %% Line 988
		  call 'erlang':'+'
		      (N, 1)
	      in  let <_cor15> =
		      %% Line 988
		      call 'erlang':'setelement'
			  (7, State, _rec34)
		  in  %% Line 987
		      apply 'parse_att_value'/4
			  (Rest, _cor15, %% Line 988
					 Stop, %% Line 988
					       [32|Acc])
	  %% Line 989
	  <#{#<9>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State = {'xmerl_sax_parser_state',_cor161,_cor162,_cor163,_cor164,_cor165,N,_cor166,_cor167,_cor168,_cor169,_cor170,_cor171,_cor172,_cor173,_cor174,_cor175,_cor176},Stop,Acc> when 'true' ->
	      let <_rec36> =
		  %% Line 991
		  call 'erlang':'+'
		      (N, 1)
	      in  let <_cor19> =
		      %% Line 991
		      call 'erlang':'setelement'
			  (7, State, _rec36)
		  in  %% Line 990
		      apply 'parse_att_value'/4
			  (Rest, _cor19, %% Line 991
					 Stop, %% Line 991
					       [32|Acc])
	  %% Line 992
	  <#{#<38>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State,Stop,Acc> when 'true' ->
	      %% Line 993
	      case apply 'parse_reference'/3
		       (Rest, State, 'true') of
		<{Ref,Rest1,State1}> when 'true' ->
		    %% Line 994
		    case Ref of
		      %% Line 995
		      <{'character',_cor195,CharValue}> when 'true' ->
			  %% Line 996
			  apply 'parse_att_value'/4
			      (Rest1, State1, Stop, [CharValue|Acc])
		      %% Line 997
		      <{'internal_general','true',_cor196,Value}> when 'true' ->
			  let <_cor21> =
			      %% Line 998
			      call 'erlang':'++'
				  (Value, Acc)
			  in  %% Line 998
			      apply 'parse_att_value'/4
				  (Rest1, State1, Stop, _cor21)
		      %% Line 999
		      <{'internal_general','false',_cor197,Value}> when 'true' ->
			  let <_cor22> =
			      %% Line 1000
			      call 'unicode':'characters_to_binary'
				  (Value, 'unicode', 'utf8')
			  in  %% Line 1000
			      case apply 'parse_att_value'/4
				       (_cor22, State1, 'undefined', []) of
				<{ParsedValue,[],State2}> when 'true' ->
				    let <_cor24> =
					%% Line 1001
					call 'erlang':'++'
					    (ParsedValue, Acc)
				    in  %% Line 1001
					apply 'parse_att_value'/4
					    (Rest1, State2, Stop, _cor24)
				( <_cor23> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor23})
				  -| ['compiler_generated'] )
			      end
		      %% Line 1002
		      <{'external_general',Name,_cor198}> when 'true' ->
			  let <_cor25> =
			      %% Line 1003
			      call 'erlang':'++'
				  ([69|[120|[116|[101|[114|[110|[97|[108|[32|[112|[97|[114|[115|[101|[100|[32|[101|[110|[116|[105|[116|[121|[32|[114|[101|[102|[101|[114|[101|[110|[99|[101|[32|[105|[110|[32|[97|[116|[116|[114|[105|[98|[117|[116|[101|[32|[118|[97|[108|[117|[101|[58|[32]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], Name)
			  in  %% Line 1003
			      call 'erlang':'throw'
				  ({'fatal_error',{State1,_cor25}})
		      %% Line 1004
		      <{'not_found',Name}> when 'true' ->
			  %% Line 1005
			  ( case State of
			      ( <( {'xmerl_sax_parser_state',_cor199,_cor200,_cor201,_cor202,_cor203,_cor204,_cor205,_cor206,_cor207,_cor208,_cor209,_cor210,_cor211,_cor212,_cor213,_rec38,_cor214}
				   -| ['compiler_generated'] )> when 'true' ->
				    case _rec38 of
				      %% Line 1006
				      <'false'> when 'true' ->
					  let <_cor28> =
					      %% Line 1007
					      call 'erlang':'++'
						  ([69|[110|[116|[105|[116|[121|[32|[110|[111|[116|[32|[100|[101|[99|[108|[97|[114|[101|[100|[58|[32]]]]]]]]]]]]]]]]]]]]], Name)
					  in  %% Line 1007
					      call 'erlang':'throw'
						  ({'fatal_error',{State1,_cor28}})
				      %% Line 1008
				      <'true'> when 'true' ->
					  let <_cor30> =
					      %% Line 1009
					      call 'lists':'reverse'
						  (Name)
					  in  let <_cor29> =
						  %% Line 1009
						  [38|Acc]
					      in  let <_cor31> =
						      %% Line 1009
						      call 'erlang':'++'
							  (_cor30, _cor29)
						  in  let <_cor32> =
							  %% Line 1009
							  [59|_cor31]
						      in  %% Line 1009
							  apply 'parse_att_value'/4
							      (Rest1, State1, Stop, _cor32)
				      ( <_cor33> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_cor33})
					-| ['compiler_generated'] )
				    end
				-| ['compiler_generated'] )
			      ( <_cor215> when 'true' ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {'badrecord','xmerl_sax_parser_state'}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
		      %% Line 1011
		      <{'unparsed',Name,_cor216}> when 'true' ->
			  let <_cor34> =
			      %% Line 1012
			      call 'erlang':'++'
				  ([85|[110|[112|[97|[114|[115|[101|[100|[32|[101|[110|[116|[105|[116|[121|[32|[114|[101|[102|[101|[114|[101|[110|[99|[101|[32|[105|[110|[32|[32|[97|[116|[116|[114|[105|[98|[117|[116|[101|[32|[118|[97|[108|[117|[101|[58|[32]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], Name)
			  in  %% Line 1012
			      call 'erlang':'throw'
				  ({'fatal_error',{State1,_cor34}})
		      ( <_cor35> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor35})
			-| ['compiler_generated'] )
		    end
		( <_cor20> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor20})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1014
	  <#{#<Stop>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State,_cor217,Acc>
	      when call 'erlang':'=:='
		    (_cor217,
		     Stop) ->
	      let <_cor36> =
		  %% Line 1015
		  call 'lists':'reverse'
		      (Acc)
	      in  %% Line 1015
		  {_cor36,Rest,State}
	  %% Line 1016
	  <#{#<60>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<_X_Rest>('all',8,'binary',['unsigned'|['big']])}#,State,_X_Stop,_X_Acc> when 'true' ->
	      %% Line 1017
	      call 'erlang':'throw'
		  ({'fatal_error',{State,[60|[32|[110|[111|[116|[32|[97|[108|[108|[111|[119|[101|[100|[32|[105|[110|[32|[97|[116|[116|[114|[105|[98|[117|[116|[101|[32|[118|[97|[108|[117|[101]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}})
	  %% Line 1018
	  <#{#<C>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State,Stop,Acc> when 'true' ->
	      %% Line 1019
	      case <> of
		%% Line 1020
		<>
		    when let <_cor39> =
			  let <_cor37> =
			      call 'erlang':'=<'
				  (32, C)
			  in  let <_cor38> =
				  call 'erlang':'=<'
				      (C, 55295)
			      in  call 'erlang':'and'
				      (_cor37, _cor38)
		      in  let <_cor40> =
			      call 'erlang':'=:='
				  (C, 13)
			  in  let <_cor41> =
				  call 'erlang':'=:='
				      (C, 10)
			      in  let <_cor42> =
				      call 'erlang':'=:='
					  (C, 9)
				  in  let <_cor45> =
					  let <_cor43> =
					      call 'erlang':'=<'
						  (57344, C)
					  in  let <_cor44> =
						  call 'erlang':'=<'
						      (C, 65533)
					      in  call 'erlang':'and'
						      (_cor43, _cor44)
				      in  let <_cor48> =
					      let <_cor46> =
						  call 'erlang':'=<'
						      (65536, C)
					      in  let <_cor47> =
						      call 'erlang':'=<'
							  (C, 1114111)
						  in  call 'erlang':'and'
							  (_cor46, _cor47)
					  in  let <_cor49> =
						  call 'erlang':'or'
						      (_cor45, _cor48)
					      in  let <_cor50> =
						      call 'erlang':'or'
							  (_cor42, _cor49)
						  in  let <_cor51> =
							  call 'erlang':'or'
							      (_cor41, _cor50)
						      in  let <_cor52> =
							      call 'erlang':'or'
								  (_cor40, _cor51)
							  in  call 'erlang':'or'
								  (_cor39, _cor52) ->
		    %% Line 1021
		    apply 'parse_att_value'/4
			(Rest, State, Stop, [C|Acc])
		%% Line 1022
		<> when 'true' ->
		    let <_cor53> =
			%% Line 1023
			call 'io_lib':'format'
			    ([66|[97|[100|[32|[99|[104|[97|[114|[97|[99|[116|[101|[114|[32|[105|[110|[32|[97|[116|[116|[114|[105|[98|[117|[116|[101|[32|[118|[97|[108|[117|[101|[58|[32|[126|[112]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [C|[]])
		    in  let <_cor54> =
			    %% Line 1023
			    call 'lists':'flatten'
				(_cor53)
			in  %% Line 1023
			    call 'erlang':'throw'
				({'fatal_error',{State,_cor54}})
	      end
	  %% Line 1025
	  <Bytes,State,Stop,Acc> when 'true' ->
	      %% Line 1026
	      apply 'unicode_incomplete_check'/2
		  ([Bytes|[State|[Stop|[Acc|[( 'parse_att_value'/4
					       -| [{'id',{0,0,'-parse_att_value/4-fun-2-'}}] )|[]]]]]], %% Line 1027
													'undefined')
	end
'parse_etag'/2 =
    %% Line 1038
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <#{}#,State> when 'true' ->
	      %% Line 1039
	      apply 'cf'/3
		  (#{}#, State, ( 'parse_etag'/2
				  -| [{'id',{0,0,'-parse_etag/2-fun-0-'}}] ))
	  %% Line 1040
	  <#{#<C>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State = %% Line 1041
								      {'xmerl_sax_parser_state',_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,[{ETag,_X_Uri,_X_LocalName,_X_QName,_X_OldNsList,_X_NewNsList}|%% Line 1042
																										       _X_RestOfETags],_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32}> when 'true' ->
	      %% Line 1043
	      case apply 'is_name_start'/1
		       (C) of
		%% Line 1044
		<'true'> when 'true' ->
		    %% Line 1045
		    case apply 'parse_ns_name'/4
			     (Rest, State, [], [C|[]]) of
		      <{Tag,Rest1,State1}> when 'true' ->
			  %% Line 1046
			  case <> of
			    %% Line 1047
			    <>
				when call 'erlang':'=='
				      (Tag,
				       ETag) ->
				%% Line 1048
				case apply 'whitespace'/3
					 (Rest1, State1, []) of
				  <{_X_WS,Rest2,State2}> when 'true' ->
				      %% Line 1049
				      apply 'parse_etag_1'/3
					  (Rest2, State2, Tag)
				  ( <_cor3> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor3})
				    -| ['compiler_generated'] )
				end
			    %% Line 1050
			    <> when 'true' ->
				%% Line 1051
				( case State1 of
				    ( <( {'xmerl_sax_parser_state',_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_rec39,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48}
					 -| ['compiler_generated'] )> when 'true' ->
					  case _rec39 of
					    %% Line 1052
					    <'true'> when 'true' ->
						%% Line 1053
						case Tag of
						  <{P,TN}> when 'true' ->
						      let <_cor7> =
							  %% Line 1054
							  call 'erlang':'++'
							      (TN, %% Line 1055
								   [44|[32|[100|[111|[101|[115|[32|[110|[111|[116|[32|[109|[97|[116|[99|[104|[32|[83|[116|[97|[114|[116|[84|[97|[103]]]]]]]]]]]]]]]]]]]]]]]]])
						      in  let <_cor8> =
							      %% Line 1054
							      [58|_cor7]
							  in  let <_cor9> =
								  %% Line 1054
								  call 'erlang':'++'
								      (P, _cor8)
							      in  let <_cor10> =
								      %% Line 1054
								      call 'erlang':'++'
									  ([69|[110|[100|[84|[97|[103|[58|[32]]]]]]]], _cor9)
								  in  %% Line 1054
								      call 'erlang':'throw'
									  ({'fatal_error',{State1,_cor10}})
						  ( <_cor6> when 'true' ->
							primop 'match_fail'
							    ({'badmatch',_cor6})
						    -| ['compiler_generated'] )
						end
					    %% Line 1056
					    <'false'> when 'true' ->
						%% Line 1057
						case apply 'whitespace'/3
							 (Rest1, State1, []) of
						  <{_X_WS,Rest2,State2}> when 'true' ->
						      %% Line 1058
						      apply 'parse_etag_1'/3
							  (Rest2, State2, Tag)
						  ( <_cor11> when 'true' ->
							primop 'match_fail'
							    ({'badmatch',_cor11})
						    -| ['compiler_generated'] )
						end
					    ( <_cor12> when 'true' ->
						  primop 'match_fail'
						      ({'case_clause',_cor12})
					      -| ['compiler_generated'] )
					  end
				      -| ['compiler_generated'] )
				    ( <_cor49> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {'badrecord','xmerl_sax_parser_state'}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
			  end
		      ( <_cor2> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor2})
			-| ['compiler_generated'] )
		    end
		%% Line 1061
		<'false'> when 'true' ->
		    %% Line 1062
		    call 'erlang':'throw'
			({'fatal_error',{State,[78|[97|[109|[101|[32|[101|[120|[112|[101|[99|[116|[101|[100]]]]]]]]]]]]]}})
		( <_cor14> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor14})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1064
	  <Rest = #{#<_X_C>('undefined','undefined','utf8',['unsigned'|['big']]),
		    #<_cor50>('all',8,'binary',['unsigned'|['big']])}#,State = {'xmerl_sax_parser_state',_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,[],_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66}> when 'true' ->
	      %% Line 1065
	      {Rest,State}
	  %% Line 1066
	  <Bytes,State> when 'true' ->
	      %% Line 1067
	      apply 'unicode_incomplete_check'/2
		  ([Bytes|[State|[( 'parse_etag'/2
				    -| [{'id',{0,0,'-parse_etag/2-fun-1-'}}] )|[]]]], %% Line 1068
										      'undefined')
	end
'parse_etag_1'/3 =
    %% Line 1071
    fun (_cor2,_cor1,_cor0) ->
	case <( _cor2
		-| ['reuse_for_context'] ),_cor1,_cor0> of
	  <#{#<62>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State = %% Line 1072
								      {'xmerl_sax_parser_state',_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,[{_X_ETag,Uri,LocalName,QName,OldNsList,NewNsList}|%% Line 1073
																									   RestOfETags],_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31},%% Line 1073
																																		 _X_Tag> when 'true' ->
	      let <State1> =
		  %% Line 1074
		  apply 'event_callback'/2
		      ({'endElement',Uri,LocalName,QName}, State)
	      in  let <State2> =
		      %% Line 1075
		      apply 'send_end_prefix_mapping_event'/2
			  (NewNsList, State1)
		  in  %% Line 1078
		      case State2 of
			<{'xmerl_sax_parser_state',_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48}> when 'true' ->
			    let <_cor6> =
				call 'erlang':'setelement'
				    (10, State2, RestOfETags)
			    in  let <_cor8> =
				    call 'erlang':'setelement'
					(8, _cor6, OldNsList)
				in  apply 'parse_content'/4
					(Rest, _cor8, %% Line 1079
						      [], %% Line 1079
							  'true')
			( <_cor49> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','xmerl_sax_parser_state'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
	  %% Line 1080
	  <#{#<_X_C>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<_cor50>('all',8,'binary',['unsigned'|['big']])}#,State,Tag> when 'true' ->
	      %% Line 1081
	      case Tag of
		<{P,TN}> when 'true' ->
		    let <_cor10> =
			%% Line 1082
			[58|TN]
		    in  let <_cor11> =
			    %% Line 1082
			    call 'erlang':'++'
				(P, _cor10)
			in  let <_cor12> =
				%% Line 1082
				call 'erlang':'++'
				    ([66|[97|[100|[32|[69|[110|[100|[84|[97|[103|[58|[32]]]]]]]]]]]], _cor11)
			    in  %% Line 1082
				call 'erlang':'throw'
				    ({'fatal_error',{State,_cor12}})
		( <_cor9> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor9})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1083
	  <Bytes,State,Tag> when 'true' ->
	      do  primop 'bs_context_to_binary'
		      (Bytes)
		  %% Line 1084
		  apply 'unicode_incomplete_check'/2
		      ([Bytes|[State|[Tag|[( 'parse_etag_1'/3
					     -| [{'id',{0,0,'-parse_etag_1/3-fun-0-'}}] )|[]]]]], %% Line 1085
												  'undefined')
	end
'parse_content'/4 =
    %% Line 1098
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <#{}#,State,Acc,IgnorableWS> when 'true' ->
	      let <_cor4> =
		  catch
		      %% Line 1099
		      apply 'cf'/5
			  (#{}#, State, Acc, IgnorableWS, ( 'parse_content'/4
							    -| [{'id',{0,0,'-parse_content/4-fun-0-'}}] ))
	      in  %% Line 1099
		  case _cor4 of
		    %% Line 1100
		    <{Rest,State1 = {'xmerl_sax_parser_state',_cor89,_cor90,_cor91,_cor92,_cor93,_cor94,_cor95,_cor96,_cor97,_cor98,_cor99,_cor100,_cor101,_cor102,_cor103,_cor104,_cor105}}> when ( 'true'
																								     -| ['compiler_generated'] ) ->
			%% Line 1101
			{Rest,State1}
		    %% Line 1102
		    <{'fatal_error',{State1,Msg}}> when 'true' ->
			%% Line 1103
			case apply 'check_if_document_complete'/2
				 (State1, Msg) of
			  %% Line 1104
			  <'true'> when 'true' ->
			      let <_cor6> =
				  %% Line 1105
				  call 'erlang':'length'
				      (Acc)
			      in  let <_cor5> =
				      %% Line 1105
				      call 'lists':'reverse'
					  (Acc)
				  in  let <State2> =
					  %% Line 1105
					  apply 'send_character_event'/4
					      (_cor6, IgnorableWS, _cor5, State1)
				      in  %% Line 1106
					  {#{}#,State2}
			  %% Line 1107
			  <'false'> when 'true' ->
			      %% Line 1108
			      call 'erlang':'throw'
				  ({'fatal_error',{State1,Msg}})
			  ( <_cor8> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor8})
			    -| ['compiler_generated'] )
			end
		    %% Line 1110
		    <Other> when 'true' ->
			%% Line 1111
			call 'erlang':'throw'
			    (Other)
		  end
	  %% Line 1113
	  <Bytes = #{#<13>('undefined','undefined','utf8',['unsigned'|['big']])}#,State,Acc,IgnorableWS> when 'true' ->
	      %% Line 1114
	      apply 'cf'/5
		  (Bytes, State, Acc, IgnorableWS, ( 'parse_content'/4
						     -| [{'id',{0,0,'-parse_content/4-fun-1-'}}] ))
	  %% Line 1115
	  <Bytes = #{#<60>('undefined','undefined','utf8',['unsigned'|['big']])}#,State,Acc,IgnorableWS> when 'true' ->
	      %% Line 1116
	      apply 'cf'/5
		  (Bytes, State, Acc, IgnorableWS, ( 'parse_content'/4
						     -| [{'id',{0,0,'-parse_content/4-fun-2-'}}] ))
	  %% Line 1117
	  <#{#<60>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<47>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State,Acc,IgnorableWS> when 'true' ->
	      let <_cor11> =
		  %% Line 1118
		  call 'erlang':'length'
		      (Acc)
	      in  let <_cor10> =
		      %% Line 1118
		      call 'lists':'reverse'
			  (Acc)
		  in  let <State1> =
			  %% Line 1118
			  apply 'send_character_event'/4
			      (_cor11, IgnorableWS, _cor10, State)
		      in  %% Line 1119
			  apply 'parse_etag'/2
			      (Rest, State1)
	  %% Line 1120
	  <Bytes = #{#<60>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<33>('undefined','undefined','utf8',['unsigned'|['big']])}#,State,_X_Acc,IgnorableWS> when 'true' ->
	      %% Line 1121
	      apply 'cf'/5
		  (Bytes, State, [], IgnorableWS, ( 'parse_content'/4
						    -| [{'id',{0,0,'-parse_content/4-fun-3-'}}] ))
	  %% Line 1122
	  <Bytes = #{#<60>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<33>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<45>('undefined','undefined','utf8',['unsigned'|['big']])}#,State,_X_Acc,IgnorableWS> when 'true' ->
	      %% Line 1123
	      apply 'cf'/5
		  (Bytes, State, [], IgnorableWS, ( 'parse_content'/4
						    -| [{'id',{0,0,'-parse_content/4-fun-4-'}}] ))
	  %% Line 1124
	  <#{#<60>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<33>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<45>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<45>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State,Acc,IgnorableWS> when 'true' ->
	      let <_cor14> =
		  %% Line 1125
		  call 'erlang':'length'
		      (Acc)
	      in  let <_cor13> =
		      %% Line 1125
		      call 'lists':'reverse'
			  (Acc)
		  in  let <State1> =
			  %% Line 1125
			  apply 'send_character_event'/4
			      (_cor14, IgnorableWS, _cor13, State)
		      in  %% Line 1126
			  case apply 'parse_comment'/3
				   (Rest, State1, []) of
			    <{Rest1,State2}> when 'true' ->
				%% Line 1127
				apply 'parse_content'/4
				    (Rest1, State2, [], 'true')
			    ( <_cor16> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor16})
			      -| ['compiler_generated'] )
			  end
	  %% Line 1128
	  <#{#<60>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<63>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State,Acc,IgnorableWS> when 'true' ->
	      let <_cor18> =
		  %% Line 1129
		  call 'erlang':'length'
		      (Acc)
	      in  let <_cor17> =
		      %% Line 1129
		      call 'lists':'reverse'
			  (Acc)
		  in  let <State1> =
			  %% Line 1129
			  apply 'send_character_event'/4
			      (_cor18, IgnorableWS, _cor17, State)
		      in  %% Line 1130
			  case apply 'parse_pi'/2
				   (Rest, State1) of
			    %% Line 1131
			    <{Rest1,State2}> when 'true' ->
				%% Line 1132
				apply 'parse_content'/4
				    (Rest1, State2, [], 'true')
			    %% Line 1133
			    <{'endDocument',_X_Rest1,State2}> when 'true' ->
				let <IValue> =
				    %% Line 1134
				    call 'unicode':'characters_to_binary'
					([60|[63]], 'unicode', 'utf8')
				in  let <_cor21> =
					%% Line 1135
					#{#<IValue>('all',8,'binary',['unsigned'|['big']]),
					  #<Rest>('all',8,'binary',['unsigned'|['big']])}#
				    in  %% Line 1135
					{_cor21,State2}
			    ( <_cor22> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor22})
			      -| ['compiler_generated'] )
			  end
	  %% Line 1137
	  <Rest = #{#<60>('undefined','undefined','utf8',['unsigned'|['big']]),
		    #<33>('undefined','undefined','utf8',['unsigned'|['big']]),
		    #<Rest1>('all',8,'binary',['unsigned'|['big']])}#,State = {'xmerl_sax_parser_state',_cor106,_cor107,_cor108,_cor109,_cor110,_cor111,_cor112,_cor113,ET,_cor114,_cor115,_cor116,_cor117,_cor118,_cor119,_cor120,_cor121},Acc,IgnorableWS> when 'true' ->
	      %% Line 1138
	      case ET of
		%% Line 1139
		<[]> when 'true' ->
		    %% Line 1140
		    {Rest,State}
		%% Line 1141
		<_cor122> when 'true' ->
		    let <_cor24> =
			%% Line 1142
			call 'erlang':'length'
			    (Acc)
		    in  let <_cor23> =
			    %% Line 1142
			    call 'lists':'reverse'
				(Acc)
			in  let <State1> =
				%% Line 1142
				apply 'send_character_event'/4
				    (_cor24, IgnorableWS, _cor23, State)
			    in  %% Line 1143
				apply 'parse_cdata'/2
				    (Rest1, State1)
	      end
	  %% Line 1145
	  <Rest = #{#<60>('undefined','undefined','utf8',['unsigned'|['big']]),
		    #<Rest1>('all',8,'binary',['unsigned'|['big']])}#,State = {'xmerl_sax_parser_state',_cor123,_cor124,_cor125,_cor126,_cor127,_cor128,_cor129,_cor130,ET,_cor131,_cor132,_cor133,_cor134,_cor135,_cor136,_cor137,_cor138},Acc,IgnorableWS> when 'true' ->
	      %% Line 1146
	      case ET of
		%% Line 1147
		<[]> when 'true' ->
		    %% Line 1148
		    {Rest,State}
		%% Line 1149
		<_cor139> when 'true' ->
		    let <_cor28> =
			%% Line 1150
			call 'erlang':'length'
			    (Acc)
		    in  let <_cor27> =
			    %% Line 1150
			    call 'lists':'reverse'
				(Acc)
			in  let <State1> =
				%% Line 1150
				apply 'send_character_event'/4
				    (_cor28, IgnorableWS, _cor27, State)
			    in  %% Line 1151
				apply 'parse_stag'/2
				    (Rest1, State1)
	      end
	  %% Line 1153
	  <#{#<10>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State,Acc,IgnorableWS> when 'true' ->
	      %% Line 1154
	      ( case State of
		  ( <( {'xmerl_sax_parser_state',_cor140,_cor141,_cor142,_cor143,_cor144,_rec41,_cor145,_cor146,_cor147,_cor148,_cor149,_cor150,_cor151,_cor152,_cor153,_cor154,_cor155}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_rec42> =
			    %% Line 1155
			    call 'erlang':'+'
				(_rec41, 1)
			in  let <_cor37> =
				%% Line 1155
				call 'erlang':'setelement'
				    (7, State, _rec42)
			    in  %% Line 1155
				apply 'parse_content'/4
				    (Rest, _cor37, [10|Acc], IgnorableWS)
		    -| ['compiler_generated'] )
		  ( <_cor156> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','xmerl_sax_parser_state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1156
	  <#{#<13>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<10>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State,Acc,IgnorableWS> when 'true' ->
	      %% Line 1157
	      ( case State of
		  ( <( {'xmerl_sax_parser_state',_cor175,_cor176,_cor177,_cor178,_cor179,_rec44,_cor180,_cor181,_cor182,_cor183,_cor184,_cor185,_cor186,_cor187,_cor188,_cor189,_cor190}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_rec45> =
			    %% Line 1158
			    call 'erlang':'+'
				(_rec44, 1)
			in  let <_cor44> =
				%% Line 1158
				call 'erlang':'setelement'
				    (7, State, _rec45)
			    in  %% Line 1158
				apply 'parse_content'/4
				    (Rest, _cor44, [10|Acc], IgnorableWS)
		    -| ['compiler_generated'] )
		  ( <_cor191> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','xmerl_sax_parser_state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1159
	  <#{#<13>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State,Acc,IgnorableWS> when 'true' ->
	      %% Line 1160
	      ( case State of
		  ( <( {'xmerl_sax_parser_state',_cor210,_cor211,_cor212,_cor213,_cor214,_rec47,_cor215,_cor216,_cor217,_cor218,_cor219,_cor220,_cor221,_cor222,_cor223,_cor224,_cor225}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_rec48> =
			    %% Line 1161
			    call 'erlang':'+'
				(_rec47, 1)
			in  let <_cor51> =
				%% Line 1161
				call 'erlang':'setelement'
				    (7, State, _rec48)
			    in  %% Line 1161
				apply 'parse_content'/4
				    (Rest, _cor51, [10|Acc], IgnorableWS)
		    -| ['compiler_generated'] )
		  ( <_cor226> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','xmerl_sax_parser_state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1162
	  <#{#<32>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State,Acc,IgnorableWS> when 'true' ->
	      %% Line 1163
	      apply 'parse_content'/4
		  (Rest, State, [32|Acc], IgnorableWS)
	  %% Line 1164
	  <#{#<9>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State,Acc,IgnorableWS> when 'true' ->
	      %% Line 1165
	      apply 'parse_content'/4
		  (Rest, State, [9|Acc], IgnorableWS)
	  %% Line 1166
	  <#{#<93>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<93>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<62>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<_X_Rest>('all',8,'binary',['unsigned'|['big']])}#,State,_X_Acc,_X_IgnorableWS> when 'true' ->
	      %% Line 1167
	      call 'erlang':'throw'
		  ({'fatal_error',{State,[34|[93|[93|[62|[34|[32|[105|[115|[32|[110|[111|[116|[32|[97|[108|[108|[111|[119|[101|[100|[32|[105|[110|[32|[99|[111|[110|[116|[101|[110|[116]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}})
	  %% Line 1168
	  <Rest = #{#<_X_C>('undefined','undefined','utf8',['unsigned'|['big']]),
		    #<_cor245>('all',8,'binary',['unsigned'|['big']])}#,State = %% Line 1169
										{'xmerl_sax_parser_state',_cor246,_cor247,_cor248,_cor249,_cor250,_cor251,_cor252,_cor253,[],_cor254,_cor255,_cor256,_cor257,_cor258,_cor259,_cor260,_cor261},%% Line 1170
																													      _X_Acc,%% Line 1170
																														     _X_IgnorableWS> when 'true' ->
	      %% Line 1171
	      {Rest,State}
	  %% Line 1172
	  <#{#<38>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State,Acc,_X_IgnorableWS> when 'true' ->
	      %% Line 1173
	      case apply 'parse_reference'/3
		       (Rest, State, 'true') of
		<{Ref,Rest1,State1}> when 'true' ->
		    %% Line 1174
		    case Ref of
		      %% Line 1175
		      <{'character',_cor262,CharValue}> when 'true' ->
			  %% Line 1176
			  apply 'parse_content'/4
			      (Rest1, State1, [CharValue|Acc], 'false')
		      %% Line 1177
		      <{'internal_general','true',_cor263,Value}> when 'true' ->
			  let <_cor53> =
			      %% Line 1178
			      call 'erlang':'++'
				  (Value, Acc)
			  in  %% Line 1178
			      apply 'parse_content'/4
				  (Rest1, State1, _cor53, 'false')
		      %% Line 1179
		      <{'internal_general','false',_cor264,Value}> when 'true' ->
			  let <IValue> =
			      %% Line 1180
			      call 'unicode':'characters_to_binary'
				  (Value, 'unicode', 'utf8')
			  in  let <_cor55> =
				  %% Line 1181
				  #{#<IValue>('all',8,'binary',['unsigned'|['big']]),
				    #<Rest1>('all',8,'binary',['unsigned'|['big']])}#
			      in  %% Line 1181
				  apply 'parse_content'/4
				      (_cor55, State1, Acc, 'false')
		      %% Line 1182
		      <{'external_general',_cor265,{PubId,SysId}}> when 'true' ->
			  let <State2> =
			      %% Line 1183
			      apply 'parse_external_entity'/3
				  (State1, PubId, SysId)
			  in  %% Line 1184
			      apply 'parse_content'/4
				  (Rest1, State2, Acc, 'false')
		      %% Line 1185
		      <{'not_found',Name}> when 'true' ->
			  %% Line 1186
			  ( case State of
			      ( <( {'xmerl_sax_parser_state',_cor266,_cor267,_cor268,_cor269,_cor270,_cor271,_cor272,_cor273,_cor274,_cor275,_cor276,_cor277,_cor278,_cor279,_cor280,_rec50,_cor281}
				   -| ['compiler_generated'] )> when 'true' ->
				    case _rec50 of
				      %% Line 1187
				      <'false'> when 'true' ->
					  let <_cor59> =
					      %% Line 1188
					      call 'erlang':'++'
						  ([69|[110|[116|[105|[116|[121|[32|[110|[111|[116|[32|[100|[101|[99|[108|[97|[114|[101|[100|[58|[32]]]]]]]]]]]]]]]]]]]]], Name)
					  in  %% Line 1188
					      call 'erlang':'throw'
						  ({'fatal_error',{State1,_cor59}})
				      %% Line 1189
				      <'true'> when 'true' ->
					  let <_cor61> =
					      %% Line 1190
					      call 'lists':'reverse'
						  (Name)
					  in  let <_cor60> =
						  %% Line 1190
						  [38|Acc]
					      in  let <_cor62> =
						      %% Line 1190
						      call 'erlang':'++'
							  (_cor61, _cor60)
						  in  let <_cor63> =
							  %% Line 1190
							  [59|_cor62]
						      in  %% Line 1190
							  apply 'parse_content'/4
							      (Rest1, State1, _cor63, 'false')
				      ( <_cor64> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_cor64})
					-| ['compiler_generated'] )
				    end
				-| ['compiler_generated'] )
			      ( <_cor282> when 'true' ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {'badrecord','xmerl_sax_parser_state'}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
		      %% Line 1192
		      <{'unparsed',Name,_cor283}> when 'true' ->
			  let <_cor65> =
			      %% Line 1193
			      call 'erlang':'++'
				  ([85|[110|[112|[97|[114|[115|[101|[100|[32|[101|[110|[116|[105|[116|[121|[32|[114|[101|[102|[101|[114|[101|[110|[99|[101|[32|[105|[110|[32|[99|[111|[110|[116|[101|[110|[116|[58|[32]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], Name)
			  in  %% Line 1193
			      call 'erlang':'throw'
				  ({'fatal_error',{State1,_cor65}})
		      ( <_cor66> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor66})
			-| ['compiler_generated'] )
		    end
		( <_cor52> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor52})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1195
	  <#{#<C>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State,Acc,_X_IgnorableWS> when 'true' ->
	      %% Line 1196
	      case <> of
		%% Line 1197
		<>
		    when let <_cor69> =
			  let <_cor67> =
			      call 'erlang':'=<'
				  (32, C)
			  in  let <_cor68> =
				  call 'erlang':'=<'
				      (C, 55295)
			      in  call 'erlang':'and'
				      (_cor67, _cor68)
		      in  let <_cor70> =
			      call 'erlang':'=:='
				  (C, 13)
			  in  let <_cor71> =
				  call 'erlang':'=:='
				      (C, 10)
			      in  let <_cor72> =
				      call 'erlang':'=:='
					  (C, 9)
				  in  let <_cor75> =
					  let <_cor73> =
					      call 'erlang':'=<'
						  (57344, C)
					  in  let <_cor74> =
						  call 'erlang':'=<'
						      (C, 65533)
					      in  call 'erlang':'and'
						      (_cor73, _cor74)
				      in  let <_cor78> =
					      let <_cor76> =
						  call 'erlang':'=<'
						      (65536, C)
					      in  let <_cor77> =
						      call 'erlang':'=<'
							  (C, 1114111)
						  in  call 'erlang':'and'
							  (_cor76, _cor77)
					  in  let <_cor79> =
						  call 'erlang':'or'
						      (_cor75, _cor78)
					      in  let <_cor80> =
						      call 'erlang':'or'
							  (_cor72, _cor79)
						  in  let <_cor81> =
							  call 'erlang':'or'
							      (_cor71, _cor80)
						      in  let <_cor82> =
							      call 'erlang':'or'
								  (_cor70, _cor81)
							  in  call 'erlang':'or'
								  (_cor69, _cor82) ->
		    %% Line 1198
		    apply 'parse_content'/4
			(Rest, State, [C|Acc], 'false')
		%% Line 1199
		<> when 'true' ->
		    let <_cor83> =
			%% Line 1200
			call 'io_lib':'format'
			    ([66|[97|[100|[32|[99|[104|[97|[114|[97|[99|[116|[101|[114|[32|[105|[110|[32|[99|[111|[110|[116|[101|[110|[116|[58|[32|[126|[112]]]]]]]]]]]]]]]]]]]]]]]]]]]], [C|[]])
		    in  let <_cor84> =
			    %% Line 1200
			    call 'lists':'flatten'
				(_cor83)
			in  %% Line 1200
			    call 'erlang':'throw'
				({'fatal_error',{State,_cor84}})
	      end
	  %% Line 1202
	  <Bytes,State,Acc,IgnorableWS> when 'true' ->
	      %% Line 1203
	      apply 'unicode_incomplete_check'/2
		  ([Bytes|[State|[Acc|[IgnorableWS|[( 'parse_content'/4
						      -| [{'id',{0,0,'-parse_content/4-fun-5-'}}] )|[]]]]]], %% Line 1204
													     'undefined')
	end
'check_if_document_complete'/2 =
    %% Line 1214
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'xmerl_sax_parser_state',_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,[],_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19},%% Line 1215
																		   [78|[111|[32|[109|[111|[114|[101|[32|[98|[121|[116|[101|[115]]]]]]]]]]]]]> when 'true' ->
	      %% Line 1216
	      'true'
	  %% Line 1217
	  <{'xmerl_sax_parser_state',_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,[],_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35},%% Line 1218
																			 [67|[111|[110|[116|[105|[110|[117|[97|[116|[105|[111|[110|[32|[102|[117|[110|[99|[116|[105|[111|[110|[32|[117|[110|[100|[101|[102|[105|[110|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]> when 'true' ->
	      %% Line 1219
	      'true'
	  %% Line 1220
	  <_cor36,_cor37> when 'true' ->
	      %% Line 1221
	      'false'
	end
'send_character_event'/4 =
    %% Line 1233
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <0,_cor8,_cor9,State> when 'true' ->
	      %% Line 1234
	      State
	  %% Line 1235
	  <_cor10,'false',String,State> when 'true' ->
	      %% Line 1236
	      apply 'event_callback'/2
		  ({'characters',String}, State)
	  %% Line 1237
	  <_cor11,'true',String,State> when 'true' ->
	      %% Line 1238
	      apply 'event_callback'/2
		  ({'ignorableWhitespace',String}, State)
	  ( <_cor7,_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5,_cor4})
		  -| [{'function_name',{'send_character_event',4}}] )
	    -| ['compiler_generated'] )
	end
'whitespace'/3 =
    %% Line 1250
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <#{}#,State,Acc> when 'true' ->
	      %% Line 1251
	      case apply 'cf'/4
		       (#{}#, State, Acc, ( 'whitespace'/3
					    -| [{'id',{0,0,'-whitespace/3-fun-0-'}}] )) of
		%% Line 1252
		<{#{}#,_cor41}>
		    when call 'erlang':'=:='
			  (_cor41,
			   State) ->
		    let <_cor3> =
			%% Line 1253
			call 'lists':'reverse'
			    (Acc)
		    in  %% Line 1253
			{_cor3,#{}#,State}
		%% Line 1254
		<Ret> when 'true' ->
		    %% Line 1255
		    Ret
	      end
	  %% Line 1257
	  <Bytes = #{#<13>('undefined','undefined','utf8',['unsigned'|['big']])}#,State,Acc> when 'true' ->
	      %% Line 1258
	      case apply 'cf'/4
		       (Bytes, State, Acc, ( 'whitespace'/3
					     -| [{'id',{0,0,'-whitespace/3-fun-1-'}}] )) of
		%% Line 1259
		<{_cor42 = #{#<13>('undefined','undefined','utf8',['unsigned'|['big']])}#,_cor43}>
		    when let <_cor44> =
			  call 'erlang':'=:='
			      (_cor42, Bytes)
		      in  let <_cor45> =
			      call 'erlang':'=:='
				  (_cor43, State)
			  in  call 'erlang':'and'
				  (_cor44, _cor45) ->
		    let <_cor5> =
			%% Line 1260
			call 'lists':'reverse'
			    (Acc)
		    in  %% Line 1260
			{_cor5,Bytes,State}
		%% Line 1261
		<Ret> when 'true' ->
		    %% Line 1262
		    Ret
	      end
	  %% Line 1264
	  <#{#<10>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State,Acc> when 'true' ->
	      %% Line 1265
	      ( case State of
		  ( <( {'xmerl_sax_parser_state',_cor46,_cor47,_cor48,_cor49,_cor50,_rec51,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_rec52> =
			    %% Line 1266
			    call 'erlang':'+'
				(_rec51, 1)
			in  let <_cor13> =
				%% Line 1266
				call 'erlang':'setelement'
				    (7, State, _rec52)
			    in  %% Line 1266
				apply 'whitespace'/3
				    (Rest, _cor13, [10|Acc])
		    -| ['compiler_generated'] )
		  ( <_cor62> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','xmerl_sax_parser_state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1267
	  <#{#<13>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<10>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State,Acc> when 'true' ->
	      %% Line 1268
	      ( case State of
		  ( <( {'xmerl_sax_parser_state',_cor81,_cor82,_cor83,_cor84,_cor85,_rec54,_cor86,_cor87,_cor88,_cor89,_cor90,_cor91,_cor92,_cor93,_cor94,_cor95,_cor96}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_rec55> =
			    %% Line 1269
			    call 'erlang':'+'
				(_rec54, 1)
			in  let <_cor20> =
				%% Line 1269
				call 'erlang':'setelement'
				    (7, State, _rec55)
			    in  %% Line 1269
				apply 'whitespace'/3
				    (Rest, _cor20, [10|Acc])
		    -| ['compiler_generated'] )
		  ( <_cor97> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','xmerl_sax_parser_state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1270
	  <#{#<13>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State,Acc> when 'true' ->
	      %% Line 1271
	      ( case State of
		  ( <( {'xmerl_sax_parser_state',_cor116,_cor117,_cor118,_cor119,_cor120,_rec57,_cor121,_cor122,_cor123,_cor124,_cor125,_cor126,_cor127,_cor128,_cor129,_cor130,_cor131}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_rec58> =
			    %% Line 1272
			    call 'erlang':'+'
				(_rec57, 1)
			in  let <_cor27> =
				%% Line 1272
				call 'erlang':'setelement'
				    (7, State, _rec58)
			    in  %% Line 1272
				apply 'whitespace'/3
				    (Rest, _cor27, [10|Acc])
		    -| ['compiler_generated'] )
		  ( <_cor132> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','xmerl_sax_parser_state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1273
	  <#{#<C>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State,Acc>
	      when let <_cor28> =
		    call 'erlang':'=:='
			(C, 32)
		in  let <_cor29> =
			call 'erlang':'=:='
			    (C, 13)
		    in  let <_cor30> =
			    call 'erlang':'=:='
				(C, 10)
			in  let <_cor31> =
				call 'erlang':'=:='
				    (C, 9)
			    in  let <_cor32> =
				    call 'erlang':'or'
					(_cor30, _cor31)
				in  let <_cor33> =
					call 'erlang':'or'
					    (_cor29, _cor32)
				    in  call 'erlang':'or'
					    (_cor28, _cor33) ->
	      %% Line 1274
	      apply 'whitespace'/3
		  (Rest, State, [C|Acc])
	  %% Line 1275
	  <Bytes = #{#<_X_C>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<_cor151>('all',8,'binary',['unsigned'|['big']])}#,State,Acc> when 'true' ->
	      let <_cor34> =
		  %% Line 1276
		  call 'lists':'reverse'
		      (Acc)
	      in  %% Line 1276
		  {_cor34,Bytes,State}
	  %% Line 1277
	  <Bytes,State = {'xmerl_sax_parser_state',_cor152,_cor153,_cor154,_cor155,Enc,_cor156,_cor157,_cor158,_cor159,_cor160,_cor161,_cor162,_cor163,_cor164,_cor165,_cor166,_cor167},Acc>
	      when call 'erlang':'is_binary'
		    (Bytes) ->
	      %% Line 1278
	      case call 'unicode':'characters_to_list'
		       (Bytes, Enc) of
		%% Line 1279
		<{'incomplete',_cor168,_cor169}> when 'true' ->
		    %% Line 1280
		    apply 'cf'/4
			(Bytes, State, Acc, ( 'whitespace'/3
					      -| [{'id',{0,0,'-whitespace/3-fun-2-'}}] ))
		%% Line 1281
		<{'error',_X_Encoded,_X_Rest}> when 'true' ->
		    let <_cor35> =
			%% Line 1282
			call 'io_lib':'format'
			    ([66|[97|[100|[32|[99|[104|[97|[114|[97|[99|[116|[101|[114|[44|[32|[110|[111|[116|[32|[105|[110|[32|[126|[112|[10]]]]]]]]]]]]]]]]]]]]]]]]], [Enc|[]])
		    in  let <_cor36> =
			    %% Line 1282
			    call 'lists':'flatten'
				(_cor35)
			in  %% Line 1282
			    call 'erlang':'throw'
				({'fatal_error',{State,_cor36}})
		( <_cor37> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor37})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor40,_cor39,_cor38> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor40,_cor39,_cor38})
		  -| [{'function_name',{'whitespace',3}}] )
	    -| ['compiler_generated'] )
	end
'parse_reference'/3 =
    %% Line 1297
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <#{}#,State,HaveToExist> when 'true' ->
	      %% Line 1298
	      apply 'cf'/4
		  (#{}#, State, HaveToExist, ( 'parse_reference'/3
					       -| [{'id',{0,0,'-parse_reference/3-fun-0-'}}] ))
	  %% Line 1299
	  <Bytes = #{#<35>('undefined','undefined','utf8',['unsigned'|['big']])}#,State,HaveToExist> when 'true' ->
	      %% Line 1300
	      apply 'cf'/4
		  (Bytes, State, HaveToExist, ( 'parse_reference'/3
						-| [{'id',{0,0,'-parse_reference/3-fun-1-'}}] ))
	  %% Line 1301
	  <#{#<35>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<120>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State,_X_HaveToExist> when 'true' ->
	      %% Line 1302
	      case apply 'parse_hex'/3
		       (Rest, State, []) of
		<{CharValue,RefString,Rest1,State1}> when 'true' ->
		    %% Line 1303
		    case <> of
		      %% Line 1304
		      <>
			  when let <_cor6> =
				let <_cor4> =
				    call 'erlang':'=<'
					(32, CharValue)
				in  let <_cor5> =
					call 'erlang':'=<'
					    (CharValue, 55295)
				    in  call 'erlang':'and'
					    (_cor4, _cor5)
			    in  let <_cor7> =
				    call 'erlang':'=:='
					(CharValue, 13)
				in  let <_cor8> =
					call 'erlang':'=:='
					    (CharValue, 10)
				    in  let <_cor9> =
					    call 'erlang':'=:='
						(CharValue, 9)
					in  let <_cor12> =
						let <_cor10> =
						    call 'erlang':'=<'
							(57344, CharValue)
						in  let <_cor11> =
							call 'erlang':'=<'
							    (CharValue, 65533)
						    in  call 'erlang':'and'
							    (_cor10, _cor11)
					    in  let <_cor15> =
						    let <_cor13> =
							call 'erlang':'=<'
							    (65536, CharValue)
						    in  let <_cor14> =
							    call 'erlang':'=<'
								(CharValue, 1114111)
							in  call 'erlang':'and'
								(_cor13, _cor14)
						in  let <_cor16> =
							call 'erlang':'or'
							    (_cor12, _cor15)
						    in  let <_cor17> =
							    call 'erlang':'or'
								(_cor9, _cor16)
							in  let <_cor18> =
								call 'erlang':'or'
								    (_cor8, _cor17)
							    in  let <_cor19> =
								    call 'erlang':'or'
									(_cor7, _cor18)
								in  call 'erlang':'or'
									(_cor6, _cor19) ->
			  let <_cor20> =
			      %% Line 1305
			      apply 'is_delimiter'/1
				  (CharValue)
			  in  %% Line 1305
			      {{'character',_cor20,CharValue},%% Line 1306
							      Rest1,%% Line 1306
								    State1}
		      %% Line 1307
		      <> when 'true' ->
			  let <_cor21> =
			      %% Line 1308
			      call 'erlang':'++'
				  ([78|[111|[116|[32|[97|[32|[108|[101|[103|[97|[108|[32|[99|[104|[97|[114|[97|[99|[116|[101|[114|[58|[32|[35|[120]]]]]]]]]]]]]]]]]]]]]]]]], RefString)
			  in  %% Line 1308
			      call 'erlang':'throw'
				  ({'fatal_error',{State1,_cor21}})
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1310
	  <#{#<35>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State,_X_HaveToExist> when 'true' ->
	      %% Line 1311
	      case apply 'parse_digit'/3
		       (Rest, State, []) of
		<{CharValue,RefString,Rest1,State1}> when 'true' ->
		    %% Line 1312
		    case <> of
		      %% Line 1313
		      <>
			  when let <_cor25> =
				let <_cor23> =
				    call 'erlang':'=<'
					(32, CharValue)
				in  let <_cor24> =
					call 'erlang':'=<'
					    (CharValue, 55295)
				    in  call 'erlang':'and'
					    (_cor23, _cor24)
			    in  let <_cor26> =
				    call 'erlang':'=:='
					(CharValue, 13)
				in  let <_cor27> =
					call 'erlang':'=:='
					    (CharValue, 10)
				    in  let <_cor28> =
					    call 'erlang':'=:='
						(CharValue, 9)
					in  let <_cor31> =
						let <_cor29> =
						    call 'erlang':'=<'
							(57344, CharValue)
						in  let <_cor30> =
							call 'erlang':'=<'
							    (CharValue, 65533)
						    in  call 'erlang':'and'
							    (_cor29, _cor30)
					    in  let <_cor34> =
						    let <_cor32> =
							call 'erlang':'=<'
							    (65536, CharValue)
						    in  let <_cor33> =
							    call 'erlang':'=<'
								(CharValue, 1114111)
							in  call 'erlang':'and'
								(_cor32, _cor33)
						in  let <_cor35> =
							call 'erlang':'or'
							    (_cor31, _cor34)
						    in  let <_cor36> =
							    call 'erlang':'or'
								(_cor28, _cor35)
							in  let <_cor37> =
								call 'erlang':'or'
								    (_cor27, _cor36)
							    in  let <_cor38> =
								    call 'erlang':'or'
									(_cor26, _cor37)
								in  call 'erlang':'or'
									(_cor25, _cor38) ->
			  let <_cor39> =
			      %% Line 1314
			      apply 'is_delimiter'/1
				  (CharValue)
			  in  %% Line 1314
			      {{'character',_cor39,CharValue},%% Line 1315
							      Rest1,%% Line 1315
								    State1}
		      %% Line 1316
		      <> when 'true' ->
			  let <_cor40> =
			      %% Line 1317
			      call 'erlang':'++'
				  ([78|[111|[116|[32|[97|[32|[108|[101|[103|[97|[108|[32|[99|[104|[97|[114|[97|[99|[116|[101|[114|[58|[32|[35]]]]]]]]]]]]]]]]]]]]]]]], RefString)
			  in  %% Line 1317
			      call 'erlang':'throw'
				  ({'fatal_error',{State1,_cor40}})
		    end
		( <_cor22> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor22})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1319
	  <#{#<C>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State,HaveToExist> when 'true' ->
	      %% Line 1320
	      case apply 'is_name_start'/1
		       (C) of
		%% Line 1321
		<'true'> when 'true' ->
		    %% Line 1322
		    case apply 'parse_name'/3
			     (Rest, State, [C|[]]) of
		      <{Name,Rest1,State1}> when 'true' ->
			  %% Line 1323
			  apply 'parse_reference_1'/4
			      (Rest1, State1, HaveToExist, Name)
		      ( <_cor41> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor41})
			-| ['compiler_generated'] )
		    end
		%% Line 1324
		<'false'> when 'true' ->
		    %% Line 1325
		    call 'erlang':'throw'
			({'fatal_error',{State,[110|[97|[109|[101|[32|[101|[120|[112|[101|[99|[116|[101|[100]]]]]]]]]]]]]}})
		( <_cor42> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor42})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1327
	  <Bytes,State,HaveToExist> when 'true' ->
	      %% Line 1328
	      apply 'unicode_incomplete_check'/2
		  ([Bytes|[State|[HaveToExist|[( 'parse_reference'/3
						 -| [{'id',{0,0,'-parse_reference/3-fun-2-'}}] )|[]]]]], %% Line 1329
													 'underfined')
	end
'parse_reference_1'/4 =
    %% Line 1332
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <( _cor3
		-| ['reuse_for_context'] ),_cor2,_cor1,_cor0> of
	  <#{#<59>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State,HaveToExist,Name> when 'true' ->
	      %% Line 1333
	      case apply 'look_up_reference'/3
		       (Name, HaveToExist, State) of
		%% Line 1334
		<{'internal_general',_cor11,RefValue}>
		    when call 'erlang':'=:='
			  (_cor11,
			   Name) ->
		    let <_cor4> =
			%% Line 1335
			apply 'is_delimiter'/1
			    (RefValue)
		    in  %% Line 1335
			{{'internal_general',_cor4,Name,RefValue},%% Line 1336
								  Rest,%% Line 1336
								       State}
		%% Line 1337
		<Result> when 'true' ->
		    %% Line 1338
		    {Result,Rest,State}
	      end
	  %% Line 1340
	  <Bytes,State,HaveToExist,Name> when 'true' ->
	      do  primop 'bs_context_to_binary'
		      (Bytes)
		  let <_cor6> =
		      %% Line 1342
		      call 'erlang':'++'
			  ([77|[105|[115|[115|[105|[110|[103|[32|[115|[101|[109|[105|[99|[111|[108|[111|[110|[32|[97|[102|[116|[101|[114|[32|[114|[101|[102|[101|[114|[101|[110|[99|[101|[58|[32]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], Name)
		  in  %% Line 1341
		      apply 'unicode_incomplete_check'/2
			  ([Bytes|[State|[HaveToExist|[Name|[( 'parse_reference_1'/4
							       -| [{'id',{0,0,'-parse_reference_1/4-fun-0-'}}] )|[]]]]]], _cor6)
	end
'is_delimiter'/1 =
    %% Line 1351
    fun (_cor0) ->
	case _cor0 of
	  <38> when 'true' ->
	      %% Line 1352
	      'true'
	  %% Line 1353
	  <60> when 'true' ->
	      %% Line 1354
	      'true'
	  %% Line 1355
	  <62> when 'true' ->
	      %% Line 1356
	      'true'
	  %% Line 1357
	  <39> when 'true' ->
	      %% Line 1358
	      'true'
	  %% Line 1359
	  <34> when 'true' ->
	      %% Line 1360
	      'true'
	  %% Line 1361
	  <[38]> when 'true' ->
	      %% Line 1362
	      'true'
	  %% Line 1363
	  <[60]> when 'true' ->
	      %% Line 1364
	      'true'
	  %% Line 1365
	  <[62]> when 'true' ->
	      %% Line 1366
	      'true'
	  %% Line 1367
	  <[39]> when 'true' ->
	      %% Line 1368
	      'true'
	  %% Line 1369
	  <[34]> when 'true' ->
	      %% Line 1370
	      'true'
	  %% Line 1371
	  <_cor2> when 'true' ->
	      %% Line 1372
	      'false'
	end
'parse_pe_reference'/2 =
    %% Line 1383
    fun (_cor1,_cor0) ->
	case <( _cor1
		-| ['reuse_for_context'] ),_cor0> of
	  <#{}#,State> when 'true' ->
	      %% Line 1384
	      apply 'cf'/3
		  (#{}#, State, ( 'parse_pe_reference'/2
				  -| [{'id',{0,0,'-parse_pe_reference/2-fun-0-'}}] ))
	  %% Line 1385
	  <#{#<C>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State> when 'true' ->
	      %% Line 1386
	      case apply 'is_name_start'/1
		       (C) of
		%% Line 1387
		<'true'> when 'true' ->
		    %% Line 1388
		    case apply 'parse_name'/3
			     (Rest, State, [C|[]]) of
		      <{Name,Rest1,State1}> when 'true' ->
			  %% Line 1389
			  apply 'parse_pe_reference_1'/3
			      (Rest1, State1, Name)
		      ( <_cor2> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor2})
			-| ['compiler_generated'] )
		    end
		%% Line 1390
		<'false'> when 'true' ->
		    %% Line 1391
		    call 'erlang':'throw'
			({'fatal_error',{State,[78|[97|[109|[101|[32|[101|[120|[112|[101|[99|[116|[101|[100]]]]]]]]]]]]]}})
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1393
	  <Bytes,State> when 'true' ->
	      do  primop 'bs_context_to_binary'
		      (Bytes)
		  %% Line 1394
		  apply 'unicode_incomplete_check'/2
		      ([Bytes|[State|[( 'parse_pe_reference'/2
					-| [{'id',{0,0,'-parse_pe_reference/2-fun-1-'}}] )|[]]]], %% Line 1395
												  'underfined')
	end
'parse_pe_reference_1'/3 =
    %% Line 1398
    fun (_cor2,_cor1,_cor0) ->
	case <( _cor2
		-| ['reuse_for_context'] ),_cor1,_cor0> of
	  <#{#<59>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State,Name> when 'true' ->
	      let <Name1> =
		  %% Line 1399
		  [37|Name]
	      in  let <Result> =
		      %% Line 1400
		      apply 'look_up_reference'/3
			  (Name1, 'true', State)
		  in  %% Line 1401
		      {Result,Rest,State}
	  %% Line 1402
	  <Bytes,State,Name> when 'true' ->
	      do  primop 'bs_context_to_binary'
		      (Bytes)
		  let <_cor5> =
		      %% Line 1404
		      call 'erlang':'++'
			  ([109|[105|[115|[115|[105|[110|[103|[32|[59|[32|[97|[102|[116|[101|[114|[32|[114|[101|[102|[101|[114|[101|[110|[99|[101|[32]]]]]]]]]]]]]]]]]]]]]]]]]], Name)
		  in  %% Line 1403
		      apply 'unicode_incomplete_check'/2
			  ([Bytes|[State|[Name|[( 'parse_pe_reference_1'/3
						  -| [{'id',{0,0,'-parse_pe_reference_1/3-fun-0-'}}] )|[]]]]], _cor5)
	end
'insert_reference'/2 =
    %% Line 1414
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{Name,Type,Value},Table> when 'true' ->
	      %% Line 1415
	      case call 'ets':'lookup'
		       (Table, Name) of
		%% Line 1416
		<[{_cor5,_cor6,_cor7}|[]]>
		    when call 'erlang':'=:='
			  (_cor5,
			   Name) ->
		    %% Line 1417
		    'ok'
		%% Line 1418
		<_cor8> when 'true' ->
		    %% Line 1419
		    call 'ets':'insert'
			(Table, {Name,Type,Value})
	      end
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'insert_reference',2}}] )
	    -| ['compiler_generated'] )
	end
'look_up_reference'/3 =
    %% Line 1430
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[97|[109|[112]]],_cor14,_cor15> when 'true' ->
	      %% Line 1431
	      {'internal_general',[97|[109|[112]]],[38]}
	  %% Line 1432
	  <[108|[116]],_cor16,_cor17> when 'true' ->
	      %% Line 1433
	      {'internal_general',[108|[116]],[60]}
	  %% Line 1434
	  <[103|[116]],_cor18,_cor19> when 'true' ->
	      %% Line 1435
	      {'internal_general',[103|[116]],[62]}
	  %% Line 1436
	  <[97|[112|[111|[115]]]],_cor20,_cor21> when 'true' ->
	      %% Line 1437
	      {'internal_general',[97|[112|[111|[115]]]],[39]}
	  %% Line 1438
	  <[113|[117|[111|[116]]]],_cor22,_cor23> when 'true' ->
	      %% Line 1439
	      {'internal_general',[113|[117|[111|[116]]]],[34]}
	  %% Line 1440
	  <Name,HaveToExist,State> when 'true' ->
	      %% Line 1441
	      ( case State of
		  ( <( {'xmerl_sax_parser_state',_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_rec60,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39}
		       -| ['compiler_generated'] )> when 'true' ->
			case call 'ets':'lookup'
				 (_rec60, Name) of
			  %% Line 1442
			  <[{_cor41,Type,Value}|[]]>
			      when call 'erlang':'=:='
				    (_cor41,
				     Name) ->
			      %% Line 1443
			      {Type,Name,Value}
			  %% Line 1444
			  <_cor42> when 'true' ->
			      %% Line 1445
			      case HaveToExist of
				%% Line 1446
				<'true'> when 'true' ->
				    %% Line 1447
				    case _cor34 of
				      %% Line 1448
				      <'yes'> when 'true' ->
					  let <_cor7> =
					      %% Line 1449
					      call 'erlang':'++'
						  ([69|[110|[116|[105|[116|[121|[32|[110|[111|[116|[32|[100|[101|[99|[108|[97|[114|[101|[100|[58|[32]]]]]]]]]]]]]]]]]]]]], Name)
					  in  %% Line 1449
					      call 'erlang':'throw'
						  ({'fatal_error',{State,_cor7}})
				      %% Line 1450
				      <'no'> when 'true' ->
					  %% Line 1451
					  {'not_found',Name}
				      ( <_cor8> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_cor8})
					-| ['compiler_generated'] )
				    end
				%% Line 1453
				<'false'> when 'true' ->
				    %% Line 1454
				    {'not_found',Name}
				( <_cor9> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor9})
				  -| ['compiler_generated'] )
			      end
			end
		    -| ['compiler_generated'] )
		  ( <_cor40> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','xmerl_sax_parser_state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'parse_hex'/3 =
    %% Line 1469
    fun (_cor2,_cor1,_cor0) ->
	case <( _cor2
		-| ['reuse_for_context'] ),_cor1,_cor0> of
	  <#{}#,State,Acc> when 'true' ->
	      %% Line 1470
	      apply 'cf'/4
		  (#{}#, State, Acc, ( 'parse_hex'/3
				       -| [{'id',{0,0,'-parse_hex/3-fun-0-'}}] ))
	  %% Line 1471
	  <#{#<59>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State,Acc> when 'true' ->
	      let <RefString> =
		  %% Line 1472
		  call 'lists':'reverse'
		      (Acc)
	      in  let <_cor4> =
		      %% Line 1473
		      call 'erlang':'list_to_integer'
			  (RefString, 16)
		  in  %% Line 1473
		      {_cor4,RefString,Rest,State}
	  %% Line 1474
	  <#{#<C>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State,Acc>
	      when let <_cor7> =
		    let <_cor5> =
			call 'erlang':'=<'
			    (48, C)
		    in  let <_cor6> =
			    call 'erlang':'=<'
				(C, 57)
			in  call 'erlang':'and'
				(_cor5, _cor6)
		in  let <_cor10> =
			let <_cor8> =
			    call 'erlang':'=<'
				(97, C)
			in  let <_cor9> =
				call 'erlang':'=<'
				    (C, 102)
			    in  call 'erlang':'and'
				    (_cor8, _cor9)
		    in  let <_cor13> =
			    let <_cor11> =
				call 'erlang':'=<'
				    (65, C)
			    in  let <_cor12> =
				    call 'erlang':'=<'
					(C, 70)
				in  call 'erlang':'and'
					(_cor11, _cor12)
			in  let <_cor14> =
				call 'erlang':'or'
				    (_cor10, _cor13)
			    in  call 'erlang':'or'
				    (_cor7, _cor14) ->
	      %% Line 1475
	      apply 'parse_hex'/3
		  (Rest, State, [C|Acc])
	  %% Line 1476
	  <Bytes,State,Acc> when 'true' ->
	      do  primop 'bs_context_to_binary'
		      (Bytes)
		  %% Line 1477
		  apply 'unicode_incomplete_check'/2
		      ([Bytes|[State|[Acc|[( 'parse_hex'/3
					     -| [{'id',{0,0,'-parse_hex/3-fun-1-'}}] )|[]]]]], %% Line 1478
											       [66|[97|[100|[32|[104|[101|[120|[32|[118|[97|[108|[117|[101|[32|[105|[110|[32|[114|[101|[102|[101|[114|[101|[110|[99|[101|[58|[32]]]]]]]]]]]]]]]]]]]]]]]]]]]])
	end
'parse_digit'/3 =
    %% Line 1491
    fun (_cor2,_cor1,_cor0) ->
	case <( _cor2
		-| ['reuse_for_context'] ),_cor1,_cor0> of
	  <#{}#,State,Acc> when 'true' ->
	      %% Line 1492
	      apply 'cf'/4
		  (#{}#, State, Acc, ( 'parse_digit'/3
				       -| [{'id',{0,0,'-parse_digit/3-fun-0-'}}] ))
	  %% Line 1493
	  <#{#<59>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State,Acc> when 'true' ->
	      let <RefString> =
		  %% Line 1494
		  call 'lists':'reverse'
		      (Acc)
	      in  let <_cor4> =
		      %% Line 1495
		      call 'erlang':'list_to_integer'
			  (RefString)
		  in  %% Line 1495
		      {_cor4,RefString,Rest,State}
	  %% Line 1496
	  <#{#<C>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State,Acc> when 'true' ->
	      %% Line 1497
	      case apply 'is_digit'/1
		       (C) of
		%% Line 1498
		<'true'> when 'true' ->
		    %% Line 1499
		    apply 'parse_digit'/3
			(Rest, State, [C|Acc])
		%% Line 1500
		<'false'> when 'true' ->
		    let <_cor5> =
			%% Line 1501
			call 'erlang':'++'
			    ([67|[104|[97|[114|[97|[99|[116|[101|[114|[32|[105|[110|[32|[114|[101|[102|[101|[114|[101|[110|[99|[101|[32|[110|[111|[116|[32|[97|[32|[100|[105|[103|[105|[116|[58|[32]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [C|[]])
		    in  %% Line 1501
			call 'erlang':'throw'
			    ({'fatal_error',{State,_cor5}})
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor6})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1503
	  <Bytes,State,Acc> when 'true' ->
	      do  primop 'bs_context_to_binary'
		      (Bytes)
		  %% Line 1504
		  apply 'unicode_incomplete_check'/2
		      ([Bytes|[State|[Acc|[( 'parse_digit'/3
					     -| [{'id',{0,0,'-parse_digit/3-fun-1-'}}] )|[]]]]], %% Line 1505
												 'undefined')
	end
'parse_system_litteral'/4 =
    %% Line 1519
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <( _cor3
		-| ['reuse_for_context'] ),_cor2,_cor1,_cor0> of
	  <#{}#,State,Stop,Acc> when 'true' ->
	      %% Line 1520
	      apply 'cf'/5
		  (#{}#, State, Stop, Acc, ( 'parse_system_litteral'/4
					     -| [{'id',{0,0,'-parse_system_litteral/4-fun-0-'}}] ))
	  %% Line 1521
	  <#{#<Stop>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State,_cor9,Acc>
	      when call 'erlang':'=:='
		    (_cor9,
		     Stop) ->
	      let <_cor4> =
		  %% Line 1522
		  call 'lists':'reverse'
		      (Acc)
	      in  %% Line 1522
		  {_cor4,Rest,State}
	  %% Line 1523
	  <#{#<C>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State,Stop,Acc> when 'true' ->
	      %% Line 1524
	      apply 'parse_system_litteral'/4
		  (Rest, State, Stop, [C|Acc])
	  %% Line 1525
	  <Bytes,State,Stop,Acc> when 'true' ->
	      do  primop 'bs_context_to_binary'
		      (Bytes)
		  %% Line 1526
		  apply 'unicode_incomplete_check'/2
		      ([Bytes|[State|[Stop|[Acc|[( 'parse_system_litteral'/4
						   -| [{'id',{0,0,'-parse_system_litteral/4-fun-1-'}}] )|[]]]]]], %% Line 1527
														  'undefined')
	end
'parse_pubid_litteral'/4 =
    %% Line 1541
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <( _cor3
		-| ['reuse_for_context'] ),_cor2,_cor1,_cor0> of
	  <#{}#,State,Stop,Acc> when 'true' ->
	      %% Line 1542
	      apply 'cf'/5
		  (#{}#, State, Stop, Acc, ( 'parse_pubid_litteral'/4
					     -| [{'id',{0,0,'-parse_pubid_litteral/4-fun-0-'}}] ))
	  %% Line 1543
	  <#{#<Stop>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State,_cor11,Acc>
	      when call 'erlang':'=:='
		    (_cor11,
		     Stop) ->
	      let <_cor4> =
		  %% Line 1544
		  call 'lists':'reverse'
		      (Acc)
	      in  %% Line 1544
		  {_cor4,Rest,State}
	  %% Line 1545
	  <#{#<C>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State,Stop,Acc> when 'true' ->
	      %% Line 1546
	      case apply 'is_pubid_char'/1
		       (C) of
		%% Line 1547
		<'true'> when 'true' ->
		    %% Line 1548
		    apply 'parse_pubid_litteral'/4
			(Rest, State, Stop, [C|Acc])
		%% Line 1549
		<'false'> when 'true' ->
		    let <_cor5> =
			%% Line 1550
			call 'erlang':'++'
			    ([67|[104|[97|[114|[97|[99|[116|[101|[114|[32|[110|[111|[116|[32|[97|[108|[108|[111|[119|[101|[100|[32|[105|[110|[32|[112|[117|[98|[105|[100|[32|[108|[105|[116|[116|[101|[114|[97|[108|[58|[32]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [C|[]])
		    in  %% Line 1550
			call 'erlang':'throw'
			    ({'fatal_error',{State,_cor5}})
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor6})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1552
	  <Bytes,State,Stop,Acc> when 'true' ->
	      do  primop 'bs_context_to_binary'
		      (Bytes)
		  %% Line 1553
		  apply 'unicode_incomplete_check'/2
		      ([Bytes|[State|[Stop|[Acc|[( 'parse_pubid_litteral'/4
						   -| [{'id',{0,0,'-parse_pubid_litteral/4-fun-1-'}}] )|[]]]]]], %% Line 1554
														 'undefined')
	end
'parse_doctype'/2 =
    %% Line 1605
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <#{}#,State> when 'true' ->
	      %% Line 1606
	      apply 'cf'/3
		  (#{}#, State, ( 'parse_doctype'/2
				  -| [{'id',{0,0,'-parse_doctype/2-fun-0-'}}] ))
	  %% Line 1607
	  <Bytes = #{#<C>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<_cor13>('all',8,'binary',['unsigned'|['big']])}#,State>
	      when let <_cor2> =
		    call 'erlang':'=:='
			(C, 32)
		in  let <_cor3> =
			call 'erlang':'=:='
			    (C, 13)
		    in  let <_cor4> =
			    call 'erlang':'=:='
				(C, 10)
			in  let <_cor5> =
				call 'erlang':'=:='
				    (C, 9)
			    in  let <_cor6> =
				    call 'erlang':'or'
					(_cor4, _cor5)
				in  let <_cor7> =
					call 'erlang':'or'
					    (_cor3, _cor6)
				    in  call 'erlang':'or'
					    (_cor2, _cor7) ->
	      %% Line 1608
	      case apply 'whitespace'/3
		       (Bytes, State, []) of
		<{_X_WS,Rest,State1}> when 'true' ->
		    %% Line 1609
		    apply 'parse_doctype'/2
			(Rest, State1)
		( <_cor8> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor8})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1610
	  <#{#<C>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State> when 'true' ->
	      %% Line 1611
	      case apply 'is_name_start'/1
		       (C) of
		%% Line 1612
		<'true'> when 'true' ->
		    %% Line 1613
		    case apply 'parse_name'/3
			     (Rest, State, [C|[]]) of
		      <{Name,Rest1,State1}> when 'true' ->
			  %% Line 1614
			  apply 'parse_doctype_1'/4
			      (Rest1, State1, Name, 'false')
		      ( <_cor9> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor9})
			-| ['compiler_generated'] )
		    end
		%% Line 1615
		<'false'> when 'true' ->
		    %% Line 1616
		    call 'erlang':'throw'
			({'fatal_error',{State,[101|[120|[112|[101|[99|[116|[105|[110|[103|[32|[110|[97|[109|[101|[32|[111|[114|[32|[119|[104|[105|[116|[101|[115|[112|[97|[99|[101]]]]]]]]]]]]]]]]]]]]]]]]]]]]}})
		( <_cor10> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor10})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1618
	  <Bytes,State> when 'true' ->
	      %% Line 1619
	      apply 'unicode_incomplete_check'/2
		  ([Bytes|[State|[( 'parse_doctype'/2
				    -| [{'id',{0,0,'-parse_doctype/2-fun-1-'}}] )|[]]]], %% Line 1620
											 'undefined')
	end
'parse_doctype_1'/4 =
    %% Line 1633
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <#{}#,State,Name,Definition> when 'true' ->
	      %% Line 1634
	      apply 'cf'/5
		  (#{}#, State, Name, Definition, ( 'parse_doctype_1'/4
						    -| [{'id',{0,0,'-parse_doctype_1/4-fun-0-'}}] ))
	  %% Line 1635
	  <#{#<62>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State,_cor32,_cor33> when 'true' ->
	      %% Line 1636
	      {Rest,State}
	  %% Line 1637
	  <#{#<91>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State,Name,Definition> when 'true' ->
	      let <_cor5> =
		  %% Line 1639
		  case Definition of
		    %% Line 1640
		    <'false'> when 'true' ->
			%% Line 1641
			apply 'event_callback'/2
			    ({'startDTD',Name,[],[]}, State)
		    %% Line 1642
		    <'true'> when 'true' ->
			%% Line 1643
			State
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor4})
		      -| ['compiler_generated'] )
		  end
	      in  %% Line 1645
		  case apply 'parse_doctype_decl'/2
			   (Rest, _cor5) of
		    <{Rest1,State2}> when 'true' ->
			%% Line 1646
			case apply 'whitespace'/3
				 (Rest1, State2, []) of
			  <{_X_WS,Rest2,State3}> when 'true' ->
			      %% Line 1647
			      apply 'parse_doctype_2'/2
				  (Rest2, State3)
			  ( <_cor8> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor8})
			    -| ['compiler_generated'] )
			end
		    ( <_cor7> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor7})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1648
	  <Rest = #{#<C>('undefined','undefined','utf8',['unsigned'|['big']]),
		    #<_cor34>('all',8,'binary',['unsigned'|['big']])}#,State,Name,Definition>
	      when let <_cor9> =
		    call 'erlang':'=:='
			(C, 32)
		in  let <_cor10> =
			call 'erlang':'=:='
			    (C, 13)
		    in  let <_cor11> =
			    call 'erlang':'=:='
				(C, 10)
			in  let <_cor12> =
				call 'erlang':'=:='
				    (C, 9)
			    in  let <_cor13> =
				    call 'erlang':'or'
					(_cor11, _cor12)
				in  let <_cor14> =
					call 'erlang':'or'
					    (_cor10, _cor13)
				    in  call 'erlang':'or'
					    (_cor9, _cor14) ->
	      %% Line 1649
	      case apply 'whitespace'/3
		       (Rest, State, []) of
		<{_X_WS,Rest1,State1}> when 'true' ->
		    %% Line 1650
		    apply 'parse_doctype_1'/4
			(Rest1, State1, Name, Definition)
		( <_cor15> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor15})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1651
	  <Rest = #{#<C>('undefined','undefined','utf8',['unsigned'|['big']]),
		    #<_cor35>('all',8,'binary',['unsigned'|['big']])}#,State,Name,_X_Definition>
	      when let <_cor16> =
		    call 'erlang':'=='
			(C, 83)
		in  let <_cor17> =
			call 'erlang':'=='
			    (C, 80)
		    in  call 'erlang':'or'
			    (_cor16, _cor17) ->
	      %% Line 1652
	      case apply 'parse_external_id'/3
		       (Rest, State, 'false') of
		<{PubId,SysId,Rest1,State1}> when 'true' ->
		    let <State2> =
			%% Line 1653
			apply 'event_callback'/2
			    ({'startDTD',Name,PubId,SysId}, State1)
		    in  %% Line 1655
			( case State2 of
			    ( <( {'xmerl_sax_parser_state',_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_rec62,_cor51}
				 -| ['compiler_generated'] )> when 'true' ->
				  let <_cor26> =
				      case _rec62 of
					%% Line 1656
					<'false'> when 'true' ->
					    let <_cor24> =
						%% Line 1657
						call 'erlang':'setelement'
						    (14, State2, 'dtd')
					    in  %% Line 1657
						apply 'parse_external_entity'/3
						    (_cor24, PubId, SysId)
					%% Line 1658
					<'true'> when 'true' ->
					    %% Line 1659
					    State2
					( <_cor25> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_cor25})
					  -| ['compiler_generated'] )
				      end
				  in  %% Line 1661
				      apply 'parse_doctype_1'/4
					  (Rest1, _cor26, Name, 'true')
			      -| ['compiler_generated'] )
			    ( <_cor52> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','xmerl_sax_parser_state'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		( <_cor18> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor18})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1662
	  <Bytes,State,Name,Definition> when 'true' ->
	      %% Line 1663
	      apply 'unicode_incomplete_check'/2
		  ([Bytes|[State|[Name|[Definition|[( 'parse_doctype_1'/4
						      -| [{'id',{0,0,'-parse_doctype_1/4-fun-1-'}}] )|[]]]]]], %% Line 1664
													       [101|[120|[112|[101|[99|[116|[105|[110|[103|[32|[62|[44|[32|[101|[120|[116|[101|[114|[110|[97|[108|[32|[105|[100|[32|[111|[114|[32|[100|[101|[99|[108|[97|[114|[97|[116|[105|[111|[110|[32|[112|[97|[114|[116]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
	end
'parse_doctype_2'/2 =
    %% Line 1667
    fun (_cor1,_cor0) ->
	case <( _cor1
		-| ['reuse_for_context'] ),_cor0> of
	  <#{#<62>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State> when 'true' ->
	      %% Line 1668
	      {Rest,State}
	  %% Line 1669
	  <Bytes,State> when 'true' ->
	      do  primop 'bs_context_to_binary'
		      (Bytes)
		  %% Line 1670
		  apply 'unicode_incomplete_check'/2
		      ([Bytes|[State|[( 'parse_doctype_2'/2
					-| [{'id',{0,0,'-parse_doctype_2/2-fun-0-'}}] )|[]]]], %% Line 1671
											       [101|[120|[112|[101|[99|[116|[105|[110|[103|[32|[62]]]]]]]]]]])
	end
'parse_external_entity'/3 =
    %% Line 1684
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1686
	( case _cor2 of
	    ( <( {'xmerl_sax_parser_state',_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_rec64,_cor38,_cor39,_cor40}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <ExtRef> =
		      apply 'check_uri'/2
			  (_cor0, _rec64)
		  in  let <SaveState> =
			  %% Line 1688
			  apply 'event_callback'/2
			      ({'startEntity',_cor0}, _cor2)
		      in  let <_rec65> =
			      %% Line 1692
			      call 'erlang':'make_fun'
				  ('xmerl_sax_parser', 'default_continuation_cb', 1)
			  in  let <_cor9> =
				  %% Line 1693
				  call 'erlang':'setelement'
				      (10, _cor2, [])
			      in  let <_cor10> =
				      %% Line 1690
				      call 'erlang':'setelement'
					  (7, _cor9, 1)
				  in  let <_cor11> =
					  %% Line 1692
					  call 'erlang':'setelement'
					      (5, _cor10, _rec65)
				      in  let <_cor13> =
					      %% Line 1691
					      call 'erlang':'setelement'
						  (4, _cor11, 'undefined')
					  in  let <EventState> =
						  %% Line 1696
						  apply 'handle_external_entity'/2
						      (ExtRef, _cor13)
					      in  %% Line 1698
						  case SaveState of
						    <{'xmerl_sax_parser_state',_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,_cor69,_cor70,_cor71,_cor72,_cor73,_cor74,_cor75,_cor76}> when 'true' ->
							let <_cor18> =
							    call 'erlang':'setelement'
								(2, SaveState, EventState)
							in  let <NewState> =
								apply 'event_callback'/2
								    ({'endEntity',_cor0}, _cor18)
							    in  %% Line 1699
								case NewState of
								  <{'xmerl_sax_parser_state',_cor78,_cor79,_cor80,_cor81,_cor82,_cor83,_cor84,_cor85,_cor86,_cor87,_cor88,_cor89,_cor90,_cor91,_cor92,_cor93,_cor94}> when 'true' ->
								      call 'erlang':'setelement'
									  (14, NewState, 'normal')
								  ( <_cor95> when 'true' ->
									( call ( 'erlang'
										 -| ['compiler_generated'] ):( 'error'
													       -| ['compiler_generated'] )
									      (( {'badrecord','xmerl_sax_parser_state'}
										 -| ['compiler_generated'] ))
									  -| ['compiler_generated'] )
								    -| ['compiler_generated'] )
								end
						    ( <_cor77> when 'true' ->
							  ( call ( 'erlang'
								   -| ['compiler_generated'] ):( 'error'
												 -| ['compiler_generated'] )
								(( {'badrecord','xmerl_sax_parser_state'}
								   -| ['compiler_generated'] ))
							    -| ['compiler_generated'] )
						      -| ['compiler_generated'] )
						  end
	      -| ['compiler_generated'] )
	    ( <_cor41> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','xmerl_sax_parser_state'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'handle_external_entity'/2 =
    %% Line 1711
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'file',FileToOpen},State> when 'true' ->
	      %% Line 1713
	      case call 'file':'open'
		       (FileToOpen, ['raw'|['read'|['binary']]]) of
		%% Line 1714
		<{'error',Reason}> when 'true' ->
		    let <_cor2> =
			%% Line 1716
			call 'file':'format_error'
			    (Reason)
		    in  let <_cor3> =
			    %% Line 1716
			    [32|[58|[32|_cor2]]]
			in  let <_cor4> =
				%% Line 1715
				call 'erlang':'++'
				    (FileToOpen, _cor3)
			    in  let <_cor5> =
				    %% Line 1715
				    call 'erlang':'++'
					([67|[111|[117|[108|[100|[110|[39|[116|[32|[111|[112|[101|[110|[32|[101|[120|[116|[101|[114|[110|[97|[108|[32|[101|[110|[116|[105|[116|[121|[32]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], _cor4)
				in  %% Line 1715
				    call 'erlang':'throw'
					({'fatal_error',{State,_cor5}})
		%% Line 1717
		<{'ok',FD}> when 'true' ->
		    let <_rec69> =
			%% Line 1721
			call 'filename':'dirname'
			    (FileToOpen)
		    in  let <_rec70> =
			    %% Line 1722
			    call 'filename':'basename'
				(FileToOpen)
			in  %% Line 1720
			    case State of
			      <{'xmerl_sax_parser_state',_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58}> when 'true' ->
				  let <_cor9> =
				      %% Line 1723
				      call 'erlang':'setelement'
					  (18, State, 'file')
				  in  let <_cor10> =
					  %% Line 1722
					  call 'erlang':'setelement'
					      (16, _cor9, _rec70)
				      in  let <_cor11> =
					      %% Line 1721
					      call 'erlang':'setelement'
						  (15, _cor10, _rec69)
					  in  let <_cor13> =
						  call 'erlang':'setelement'
						      (4, _cor11, FD)
					      in  case apply 'parse_external_entity_1'/2
							   (#{}#, _cor13) of
						    <{#{}#,EntityState}> when 'true' ->
							do  %% Line 1724
							    call 'file':'close'
								(FD)
							    %% Line 1725
							    ( case EntityState of
								( <( {'xmerl_sax_parser_state',_rec72,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,_cor69,_cor70,_cor71,_cor72,_cor73,_cor74,_cor75}
								     -| ['compiler_generated'] )> when 'true' ->
								      _rec72
								  -| ['compiler_generated'] )
								( <_cor76> when 'true' ->
								      ( call ( 'erlang'
									       -| ['compiler_generated'] ):( 'error'
													     -| ['compiler_generated'] )
									    (( {'badrecord','xmerl_sax_parser_state'}
									       -| ['compiler_generated'] ))
									-| ['compiler_generated'] )
								  -| ['compiler_generated'] )
							      end
							      -| ['compiler_generated'] )
						    ( <_cor14> when 'true' ->
							  primop 'match_fail'
							      ({'badmatch',_cor14})
						      -| ['compiler_generated'] )
						  end
			      ( <_cor59> when 'true' ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {'badrecord','xmerl_sax_parser_state'}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
		( <_cor16> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor16})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1727
	  <{'http',Url},State> when 'true' ->
	      %% Line 1729
	      try
		  %% Line 1730
		  case apply 'http'/1
			   (Url) of
		    <{Host,Port,Key}> when 'true' ->
			let <TmpFile> =
			    %% Line 1731
			    apply 'http_get_file'/3
				(Host, Port, Key)
			in  %% Line 1732
			    case call 'file':'open'
				     (TmpFile, ['raw'|['read'|['binary']]]) of
			      %% Line 1733
			      <{'error',Reason}> when 'true' ->
				  let <_cor19> =
				      %% Line 1735
				      call 'file':'format_error'
					  (Reason)
				  in  let <_cor20> =
					  %% Line 1735
					  [32|[58|[32|_cor19]]]
				      in  let <_cor21> =
					      %% Line 1734
					      call 'erlang':'++'
						  (TmpFile, _cor20)
					  in  let <_cor22> =
						  %% Line 1734
						  call 'erlang':'++'
						      ([67|[111|[117|[108|[100|[110|[39|[116|[32|[111|[112|[101|[110|[32|[116|[101|[109|[112|[111|[114|[97|[114|[121|[32|[102|[105|[108|[101|[32]]]]]]]]]]]]]]]]]]]]]]]]]]]]], _cor21)
					      in  %% Line 1734
						  call 'erlang':'throw'
						      ({'fatal_error',{State,_cor22}})
			      %% Line 1736
			      <{'ok',FD}> when 'true' ->
				  let <_rec73> =
				      %% Line 1740
				      call 'filename':'dirname'
					  (Url)
				  in  let <_rec74> =
					  %% Line 1741
					  call 'filename':'basename'
					      (Url)
				      in  %% Line 1739
					  case State of
					    <{'xmerl_sax_parser_state',_cor77,_cor78,_cor79,_cor80,_cor81,_cor82,_cor83,_cor84,_cor85,_cor86,_cor87,_cor88,_cor89,_cor90,_cor91,_cor92,_cor93}> when 'true' ->
						let <_cor26> =
						    %% Line 1742
						    call 'erlang':'setelement'
							(18, State, 'file')
						in  let <_cor27> =
							%% Line 1741
							call 'erlang':'setelement'
							    (16, _cor26, _rec74)
						    in  let <_cor28> =
							    %% Line 1740
							    call 'erlang':'setelement'
								(15, _cor27, _rec73)
							in  let <_cor30> =
								call 'erlang':'setelement'
								    (4, _cor28, FD)
							    in  case apply 'parse_external_entity_1'/2
									 (#{}#, _cor30) of
								  <{#{}#,EntityState}> when 'true' ->
								      do  %% Line 1743
									  call 'file':'close'
									      (FD)
									  do  %% Line 1744
									      call 'file':'delete'
										  (TmpFile)
									      %% Line 1745
									      ( case EntityState of
										  ( <( {'xmerl_sax_parser_state',_rec76,_cor95,_cor96,_cor97,_cor98,_cor99,_cor100,_cor101,_cor102,_cor103,_cor104,_cor105,_cor106,_cor107,_cor108,_cor109,_cor110}
										       -| ['compiler_generated'] )> when 'true' ->
											_rec76
										    -| ['compiler_generated'] )
										  ( <_cor111> when 'true' ->
											( call ( 'erlang'
												 -| ['compiler_generated'] ):( 'error'
															       -| ['compiler_generated'] )
											      (( {'badrecord','xmerl_sax_parser_state'}
												 -| ['compiler_generated'] ))
											  -| ['compiler_generated'] )
										    -| ['compiler_generated'] )
										end
										-| ['compiler_generated'] )
								  ( <_cor31> when 'true' ->
									primop 'match_fail'
									    ({'badmatch',_cor31})
								    -| ['compiler_generated'] )
								end
					    ( <_cor94> when 'true' ->
						  ( call ( 'erlang'
							   -| ['compiler_generated'] ):( 'error'
											 -| ['compiler_generated'] )
							(( {'badrecord','xmerl_sax_parser_state'}
							   -| ['compiler_generated'] ))
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					  end
			      ( <_cor33> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor33})
				-| ['compiler_generated'] )
			    end
		    ( <_cor17> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor17})
		      -| ['compiler_generated'] )
		  end
	      of <_cor34> ->
		  _cor34
	      catch <_cor37,_cor36,_cor35> ->
		  case <_cor37,_cor36,_cor35> of
		    %% Line 1748
		    <'throw',{'error',Error},_cor112> when 'true' ->
			%% Line 1749
			call 'erlang':'throw'
			    ({'fatal_error',{State,Error}})
		    ( <_cor37,_cor36,_cor35> when 'true' ->
			  primop 'raise'
			      (_cor35, _cor36)
		      -| ['compiler_generated'] )
		  end
	  %% Line 1751
	  <{Tag,_X_Url},State> when 'true' ->
	      let <_cor38> =
		  %% Line 1752
		  call 'erlang':'atom_to_list'
		      (Tag)
	      in  let <_cor39> =
		      %% Line 1752
		      call 'erlang':'++'
			  ([85|[110|[115|[117|[112|[112|[111|[114|[116|[101|[100|[32|[85|[82|[73|[32|[116|[121|[112|[101|[58|[32]]]]]]]]]]]]]]]]]]]]]], _cor38)
		  in  %% Line 1752
		      call 'erlang':'throw'
			  ({'fatal_error',{State,_cor39}})
	  ( <_cor41,_cor40> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor41,_cor40})
		  -| [{'function_name',{'handle_external_entity',2}}] )
	    -| ['compiler_generated'] )
	end
'parse_external_entity_1'/2 =
    %% Line 1761
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <#{}#,State = {'xmerl_sax_parser_state',_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,Type,_cor28,_cor29,_cor30,_cor31}> when 'true' ->
	      let <_cor2> =
		  catch
		      %% Line 1762
		      apply 'cf'/3
			  (#{}#, State, ( 'parse_external_entity_1'/2
					  -| [{'id',{0,0,'-parse_external_entity_1/2-fun-0-'}}] ))
	      in  %% Line 1762
		  case _cor2 of
		    %% Line 1763
		    <{Rest,State1 = {'xmerl_sax_parser_state',_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48}}> when ( 'true'
																							       -| ['compiler_generated'] ) ->
			%% Line 1764
			{Rest,State}
		    %% Line 1765
		    <{'fatal_error',{State1,[78|[111|[32|[109|[111|[114|[101|[32|[98|[121|[116|[101|[115]]]]]]]]]]]]]}}>
			when let <_cor3> =
			      call 'erlang':'=:='
				  (Type, 'dtd')
			  in  let <_cor4> =
				  call 'erlang':'=:='
				      (Type, 'entity')
			      in  call 'erlang':'or'
				      (_cor3, _cor4) ->
			%% Line 1766
			{#{}#,State1}
		    %% Line 1767
		    <Other> when 'true' ->
			%% Line 1768
			call 'erlang':'throw'
			    (Other)
		  end
	  %% Line 1770
	  <#{#<239>(8,1,'integer',['unsigned'|['big']])}#,State> when 'true' ->
	      %% Line 1771
	      apply 'cf'/3
		  (#{#<239>(8,1,'integer',['unsigned'|['big']])}#, State, ( 'parse_external_entity_1'/2
									    -| [{'id',{0,0,'-parse_external_entity_1/2-fun-1-'}}] ))
	  %% Line 1772
	  <#{#<239>(8,1,'integer',['unsigned'|['big']]),
	     #<187>(8,1,'integer',['unsigned'|['big']])}#,State> when 'true' ->
	      %% Line 1773
	      apply 'cf'/3
		  (#{#<239>(8,1,'integer',['unsigned'|['big']]),
		     #<187>(8,1,'integer',['unsigned'|['big']])}#, State, ( 'parse_external_entity_1'/2
									    -| [{'id',{0,0,'-parse_external_entity_1/2-fun-2-'}}] ))
	  %% Line 1774
	  <#{#<239>(8,1,'integer',['unsigned'|['big']]),
	     #<187>(8,1,'integer',['unsigned'|['big']]),
	     #<191>(8,1,'integer',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State> when 'true' ->
	      %% Line 1775
	      apply 'parse_external_entity_1'/2
		  (Rest, State)
	  %% Line 1776
	  <Bytes = #{#<60>('undefined','undefined','utf8',['unsigned'|['big']])}#,State> when 'true' ->
	      %% Line 1777
	      apply 'cf'/3
		  (Bytes, State, ( 'parse_external_entity_1'/2
				   -| [{'id',{0,0,'-parse_external_entity_1/2-fun-3-'}}] ))
	  %% Line 1778
	  <Bytes = #{#<60>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<63>('undefined','undefined','utf8',['unsigned'|['big']])}#,State> when 'true' ->
	      %% Line 1779
	      apply 'cf'/3
		  (Bytes, State, ( 'parse_external_entity_1'/2
				   -| [{'id',{0,0,'-parse_external_entity_1/2-fun-4-'}}] ))
	  %% Line 1780
	  <Bytes = #{#<60>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<63>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<120>('undefined','undefined','utf8',['unsigned'|['big']])}#,State> when 'true' ->
	      %% Line 1781
	      apply 'cf'/3
		  (Bytes, State, ( 'parse_external_entity_1'/2
				   -| [{'id',{0,0,'-parse_external_entity_1/2-fun-5-'}}] ))
	  %% Line 1782
	  <Bytes = #{#<60>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<63>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<120>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<109>('undefined','undefined','utf8',['unsigned'|['big']])}#,State> when 'true' ->
	      %% Line 1783
	      apply 'cf'/3
		  (Bytes, State, ( 'parse_external_entity_1'/2
				   -| [{'id',{0,0,'-parse_external_entity_1/2-fun-6-'}}] ))
	  %% Line 1784
	  <Bytes = #{#<60>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<63>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<120>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<109>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<108>('undefined','undefined','utf8',['unsigned'|['big']])}#,State> when 'true' ->
	      %% Line 1785
	      apply 'cf'/3
		  (Bytes, State, ( 'parse_external_entity_1'/2
				   -| [{'id',{0,0,'-parse_external_entity_1/2-fun-7-'}}] ))
	  %% Line 1786
	  <Bytes = #{#<60>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<63>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<120>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<109>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<108>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State = %% Line 1787
									      {'xmerl_sax_parser_state',_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,Type,_cor61,_cor62,_cor63,_cor64}> when 'true' ->
	      let <Rest1,State1> =
		  %% Line 1789
		  case apply 'is_next_char_whitespace'/2
			   (Rest, State) of
		    %% Line 1790
		    <'false'> when 'true' ->
			%% Line 1791
			<Bytes,State>
		    %% Line 1792
		    <'true'> when 'true' ->
			%% Line 1793
			case apply 'parse_version_info'/3
				 (Rest, State, []) of
			  <{_X_XmlAttributes,R,S}> when 'true' ->
			      %% Line 1795
			      <R,S>
			  ( <_cor6> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor6})
			    -| ['compiler_generated'] )
			end
		    ( <_cor7> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor7})
		      -| ['compiler_generated'] )
		  end
	      in  %% Line 1797
		  case Type of
		    %% Line 1798
		    <'dtd'> when 'true' ->
			let <_cor10> =
			    catch
				%% Line 1799
				apply 'parse_doctype_decl'/2
				    (Rest1, State1)
			in  %% Line 1799
			    case _cor10 of
			      %% Line 1800
			      <{Rest2,State2 = {'xmerl_sax_parser_state',_cor65,_cor66,_cor67,_cor68,_cor69,_cor70,_cor71,_cor72,_cor73,_cor74,_cor75,_cor76,_cor77,_cor78,_cor79,_cor80,_cor81}}> when ( 'true'
																									  -| ['compiler_generated'] ) ->
				  %% Line 1801
				  {Rest2,State2}
			      %% Line 1802
			      <{'fatal_error',{State2,[78|[111|[32|[109|[111|[114|[101|[32|[98|[121|[116|[101|[115]]]]]]]]]]]]]}}> when 'true' ->
				  %% Line 1803
				  {#{}#,State2}
			      %% Line 1804
			      <Other> when 'true' ->
				  %% Line 1805
				  call 'erlang':'throw'
				      (Other)
			    end
		    %% Line 1808
		    <_cor82> when 'true' ->
			%% Line 1809
			apply 'parse_content'/4
			    (Rest1, State1, [], 'true')
		  end
	  %% Line 1811
	  <Bytes = #{#<_X_C>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<_cor83>('all',8,'binary',['unsigned'|['big']])}#,State = %% Line 1812
										{'xmerl_sax_parser_state',_cor84,_cor85,_cor86,_cor87,_cor88,_cor89,_cor90,_cor91,_cor92,_cor93,_cor94,_cor95,Type,_cor96,_cor97,_cor98,_cor99}> when 'true' ->
	      %% Line 1813
	      case Type of
		%% Line 1814
		<'normal'> when 'true' ->
		    %% Line 1815
		    apply 'parse_content'/4
			(Bytes, State, [], 'true')
		%% Line 1816
		<'dtd'> when 'true' ->
		    %% Line 1817
		    apply 'parse_doctype_decl'/2
			(Bytes, State)
		%% Line 1818
		<'entity'> when 'true' ->
		    %% Line 1819
		    apply 'parse_doctype_decl'/2
			(Bytes, State)
		( <_cor13> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor13})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1820
	  <Bytes,State> when 'true' ->
	      %% Line 1821
	      apply 'unicode_incomplete_check'/2
		  ([Bytes|[State|[( 'parse_external_entity_1'/2
				    -| [{'id',{0,0,'-parse_external_entity_1/2-fun-8-'}}] )|[]]]], %% Line 1822
												   'undefined')
	end
'is_next_char_whitespace'/2 =
    %% Line 1831
    fun (_cor1,_cor0) ->
	case <( _cor1
		-| ['reuse_for_context'] ),_cor0> of
	  <#{#<C>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<_cor10>('all',8,'binary',['unsigned'|['big']])}#,_cor11>
	      when let <_cor2> =
		    call 'erlang':'=:='
			(C, 32)
		in  let <_cor3> =
			call 'erlang':'=:='
			    (C, 13)
		    in  let <_cor4> =
			    call 'erlang':'=:='
				(C, 10)
			in  let <_cor5> =
				call 'erlang':'=:='
				    (C, 9)
			    in  let <_cor6> =
				    call 'erlang':'or'
					(_cor4, _cor5)
				in  let <_cor7> =
					call 'erlang':'or'
					    (_cor3, _cor6)
				    in  call 'erlang':'or'
					    (_cor2, _cor7) ->
	      %% Line 1832
	      'true'
	  %% Line 1833
	  <#{#<_X_C>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<_cor12>('all',8,'binary',['unsigned'|['big']])}#,_cor13> when 'true' ->
	      %% Line 1834
	      'false'
	  %% Line 1835
	  <Bytes,State> when 'true' ->
	      do  primop 'bs_context_to_binary'
		      (Bytes)
		  %% Line 1836
		  apply 'unicode_incomplete_check'/2
		      ([Bytes|[State|[( 'is_next_char_whitespace'/2
					-| [{'id',{0,0,'-is_next_char_whitespace/2-fun-0-'}}] )|[]]]], %% Line 1837
												       'undefined')
	end
'parse_external_id'/3 =
    %% Line 1853
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <#{}#,State,OptionalSystemId> when 'true' ->
	      %% Line 1854
	      apply 'cf'/4
		  (#{}#, State, OptionalSystemId, ( 'parse_external_id'/3
						    -| [{'id',{0,0,'-parse_external_id/3-fun-0-'}}] ))
	  %% Line 1855
	  <Bytes = #{#<83>('undefined','undefined','utf8',['unsigned'|['big']])}#,State,OptionalSystemId> when 'true' ->
	      %% Line 1856
	      apply 'cf'/4
		  (Bytes, State, OptionalSystemId, ( 'parse_external_id'/3
						     -| [{'id',{0,0,'-parse_external_id/3-fun-1-'}}] ))
	  %% Line 1857
	  <Bytes = #{#<83>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<89>('undefined','undefined','utf8',['unsigned'|['big']])}#,State,OptionalSystemId> when 'true' ->
	      %% Line 1858
	      apply 'cf'/4
		  (Bytes, State, OptionalSystemId, ( 'parse_external_id'/3
						     -| [{'id',{0,0,'-parse_external_id/3-fun-2-'}}] ))
	  %% Line 1859
	  <Bytes = #{#<83>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<89>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<83>('undefined','undefined','utf8',['unsigned'|['big']])}#,State,OptionalSystemId> when 'true' ->
	      %% Line 1860
	      apply 'cf'/4
		  (Bytes, State, OptionalSystemId, ( 'parse_external_id'/3
						     -| [{'id',{0,0,'-parse_external_id/3-fun-3-'}}] ))
	  %% Line 1861
	  <Bytes = #{#<83>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<89>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<83>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<84>('undefined','undefined','utf8',['unsigned'|['big']])}#,State,OptionalSystemId> when 'true' ->
	      %% Line 1862
	      apply 'cf'/4
		  (Bytes, State, OptionalSystemId, ( 'parse_external_id'/3
						     -| [{'id',{0,0,'-parse_external_id/3-fun-4-'}}] ))
	  %% Line 1863
	  <Bytes = #{#<83>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<89>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<83>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<84>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<69>('undefined','undefined','utf8',['unsigned'|['big']])}#,State,OptionalSystemId> when 'true' ->
	      %% Line 1864
	      apply 'cf'/4
		  (Bytes, State, OptionalSystemId, ( 'parse_external_id'/3
						     -| [{'id',{0,0,'-parse_external_id/3-fun-5-'}}] ))
	  %% Line 1865
	  <#{#<83>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<89>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<83>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<84>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<69>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<77>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State,_cor7> when 'true' ->
	      %% Line 1866
	      case apply 'parse_system_id'/3
		       (Rest, State, 'false') of
		<{SysId,Rest1,State1}> when 'true' ->
		    %% Line 1867
		    {[],SysId,Rest1,State1}
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1868
	  <Bytes = #{#<80>('undefined','undefined','utf8',['unsigned'|['big']])}#,State,OptionalSystemId> when 'true' ->
	      %% Line 1869
	      apply 'cf'/4
		  (Bytes, State, OptionalSystemId, ( 'parse_external_id'/3
						     -| [{'id',{0,0,'-parse_external_id/3-fun-6-'}}] ))
	  %% Line 1870
	  <Bytes = #{#<80>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<85>('undefined','undefined','utf8',['unsigned'|['big']])}#,State,OptionalSystemId> when 'true' ->
	      %% Line 1871
	      apply 'cf'/4
		  (Bytes, State, OptionalSystemId, ( 'parse_external_id'/3
						     -| [{'id',{0,0,'-parse_external_id/3-fun-7-'}}] ))
	  %% Line 1872
	  <Bytes = #{#<80>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<85>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<66>('undefined','undefined','utf8',['unsigned'|['big']])}#,State,OptionalSystemId> when 'true' ->
	      %% Line 1873
	      apply 'cf'/4
		  (Bytes, State, OptionalSystemId, ( 'parse_external_id'/3
						     -| [{'id',{0,0,'-parse_external_id/3-fun-8-'}}] ))
	  %% Line 1874
	  <Bytes = #{#<80>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<85>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<66>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<76>('undefined','undefined','utf8',['unsigned'|['big']])}#,State,OptionalSystemId> when 'true' ->
	      %% Line 1875
	      apply 'cf'/4
		  (Bytes, State, OptionalSystemId, ( 'parse_external_id'/3
						     -| [{'id',{0,0,'-parse_external_id/3-fun-9-'}}] ))
	  %% Line 1876
	  <Bytes = #{#<80>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<85>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<66>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<76>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<73>('undefined','undefined','utf8',['unsigned'|['big']])}#,State,OptionalSystemId> when 'true' ->
	      %% Line 1877
	      apply 'cf'/4
		  (Bytes, State, OptionalSystemId, ( 'parse_external_id'/3
						     -| [{'id',{0,0,'-parse_external_id/3-fun-10-'}}] ))
	  %% Line 1878
	  <#{#<80>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<85>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<66>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<76>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<73>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<67>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State,OptionalSystemId> when 'true' ->
	      %% Line 1879
	      apply 'parse_public_id'/3
		  (Rest, State, OptionalSystemId)
	  %% Line 1880
	  <Bytes,State,OptionalSystemId> when 'true' ->
	      %% Line 1881
	      apply 'unicode_incomplete_check'/2
		  ([Bytes|[State|[OptionalSystemId|[( 'parse_external_id'/3
						      -| [{'id',{0,0,'-parse_external_id/3-fun-11-'}}] )|[]]]]], %% Line 1882
														 [101|[120|[112|[101|[99|[116|[105|[110|[103|[32|[83|[89|[83|[84|[69|[77|[32|[111|[114|[32|[80|[85|[66|[76|[73|[67]]]]]]]]]]]]]]]]]]]]]]]]]])
	end
'parse_system_id'/3 =
    %% Line 1895
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Bytes = #{#<C>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<_cor13>('all',8,'binary',['unsigned'|['big']])}#,State,OptionalSystemId>
	      when let <_cor3> =
		    call 'erlang':'=:='
			(C, 32)
		in  let <_cor4> =
			call 'erlang':'=:='
			    (C, 13)
		    in  let <_cor5> =
			    call 'erlang':'=:='
				(C, 10)
			in  let <_cor6> =
				call 'erlang':'=:='
				    (C, 9)
			    in  let <_cor7> =
				    call 'erlang':'or'
					(_cor5, _cor6)
				in  let <_cor8> =
					call 'erlang':'or'
					    (_cor4, _cor7)
				    in  call 'erlang':'or'
					    (_cor3, _cor8) ->
	      %% Line 1896
	      case apply 'whitespace'/3
		       (Bytes, State, []) of
		<{_X_WS,Rest,State1}> when 'true' ->
		    %% Line 1897
		    apply 'check_system_litteral'/3
			(Rest, State1, OptionalSystemId)
		( <_cor9> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor9})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1898
	  <Bytes = #{#<_X_C>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<_cor14>('all',8,'binary',['unsigned'|['big']])}#,State,'true'> when 'true' ->
	      %% Line 1899
	      {[],Bytes,State}
	  %% Line 1900
	  <Bytes,State,OptionalSystemId> when 'true' ->
	      %% Line 1901
	      apply 'unicode_incomplete_check'/2
		  ([Bytes|[State|[OptionalSystemId|[( 'parse_system_id'/3
						      -| [{'id',{0,0,'-parse_system_id/3-fun-0-'}}] )|[]]]]], %% Line 1902
													      [119|[104|[105|[116|[101|[115|[112|[97|[99|[101|[32|[101|[120|[112|[101|[99|[116|[101|[100]]]]]]]]]]]]]]]]]]])
	end
'check_system_litteral'/3 =
    %% Line 1904
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <#{#<C>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State,_X_OptionalSystemId>
	      when let <_cor3> =
		    call 'erlang':'=='
			(C, 39)
		in  let <_cor4> =
			call 'erlang':'=='
			    (C, 34)
		    in  call 'erlang':'or'
			    (_cor3, _cor4) ->
	      %% Line 1905
	      apply 'parse_system_litteral'/4
		  (Rest, State, C, [])
	  %% Line 1906
	  <Bytes = #{#<_X_C>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<_cor8>('all',8,'binary',['unsigned'|['big']])}#,State,'true'> when 'true' ->
	      %% Line 1907
	      {[],Bytes,State}
	  %% Line 1908
	  <Bytes,State,OptionalSystemId> when 'true' ->
	      %% Line 1909
	      apply 'unicode_incomplete_check'/2
		  ([Bytes|[State|[OptionalSystemId|[( 'check_system_litteral'/3
						      -| [{'id',{0,0,'-check_system_litteral/3-fun-0-'}}] )|[]]]]], %% Line 1910
														    [34|[32|[111|[114|[32|[39|[32|[101|[120|[112|[101|[99|[116|[101|[100]]]]]]]]]]]]]]])
	end
'parse_public_id'/3 =
    %% Line 1924
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Bytes = #{#<C>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<_cor13>('all',8,'binary',['unsigned'|['big']])}#,State,OptionalSystemId>
	      when let <_cor3> =
		    call 'erlang':'=:='
			(C, 32)
		in  let <_cor4> =
			call 'erlang':'=:='
			    (C, 13)
		    in  let <_cor5> =
			    call 'erlang':'=:='
				(C, 10)
			in  let <_cor6> =
				call 'erlang':'=:='
				    (C, 9)
			    in  let <_cor7> =
				    call 'erlang':'or'
					(_cor5, _cor6)
				in  let <_cor8> =
					call 'erlang':'or'
					    (_cor4, _cor7)
				    in  call 'erlang':'or'
					    (_cor3, _cor8) ->
	      %% Line 1925
	      case apply 'whitespace'/3
		       (Bytes, State, []) of
		<{_X_WS,Rest,State1}> when 'true' ->
		    %% Line 1926
		    apply 'check_public_litteral'/3
			(Rest, State1, OptionalSystemId)
		( <_cor9> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor9})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1927
	  <Bytes,State,OptionalSystemId> when 'true' ->
	      %% Line 1928
	      apply 'unicode_incomplete_check'/2
		  ([Bytes|[State|[OptionalSystemId|[( 'parse_public_id'/3
						      -| [{'id',{0,0,'-parse_public_id/3-fun-0-'}}] )|[]]]]], %% Line 1929
													      [119|[104|[105|[116|[101|[115|[112|[97|[99|[101|[32|[101|[120|[112|[101|[99|[116|[101|[100]]]]]]]]]]]]]]]]]]])
	end
'check_public_litteral'/3 =
    %% Line 1932
    fun (_cor2,_cor1,_cor0) ->
	case <( _cor2
		-| ['reuse_for_context'] ),_cor1,_cor0> of
	  <#{#<C>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State,OptionalSystemId>
	      when let <_cor3> =
		    call 'erlang':'=='
			(C, 39)
		in  let <_cor4> =
			call 'erlang':'=='
			    (C, 34)
		    in  call 'erlang':'or'
			    (_cor3, _cor4) ->
	      %% Line 1933
	      case apply 'parse_pubid_litteral'/4
		       (Rest, State, C, []) of
		<{PubId,Rest1,State1}> when 'true' ->
		    %% Line 1934
		    case apply 'parse_system_id'/3
			     (Rest1, State1, OptionalSystemId) of
		      <{SysId,Rest2,State2}> when 'true' ->
			  %% Line 1935
			  {PubId,SysId,Rest2,State2}
		      ( <_cor6> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor6})
			-| ['compiler_generated'] )
		    end
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1936
	  <Bytes,State,OptionalSystemId> when 'true' ->
	      do  primop 'bs_context_to_binary'
		      (Bytes)
		  %% Line 1937
		  apply 'unicode_incomplete_check'/2
		      ([Bytes|[State|[OptionalSystemId|[( 'check_public_litteral'/3
							  -| [{'id',{0,0,'-check_public_litteral/3-fun-0-'}}] )|[]]]]], %% Line 1938
															[34|[32|[111|[114|[32|[39|[32|[101|[120|[112|[101|[99|[116|[101|[100]]]]]]]]]]]]]]])
	end
'parse_doctype_decl'/2 =
    %% Line 1950
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <#{}#,State> when 'true' ->
	      %% Line 1951
	      apply 'cf'/3
		  (#{}#, State, ( 'parse_doctype_decl'/2
				  -| [{'id',{0,0,'-parse_doctype_decl/2-fun-0-'}}] ))
	  %% Line 1952
	  <#{#<60>('undefined','undefined','utf8',['unsigned'|['big']])}#,State> when 'true' ->
	      %% Line 1953
	      apply 'cf'/3
		  (#{#<60>(8,1,'integer',['unsigned'|['big']])}#, State, ( 'parse_doctype_decl'/2
									   -| [{'id',{0,0,'-parse_doctype_decl/2-fun-1-'}}] ))
	  %% Line 1954
	  <#{#<60>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<63>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State> when 'true' ->
	      %% Line 1955
	      case apply 'parse_pi'/2
		       (Rest, State) of
		%% Line 1956
		<{Rest1,State1}> when 'true' ->
		    %% Line 1957
		    apply 'parse_doctype_decl'/2
			(Rest1, State1)
		%% Line 1958
		<{'endDocument',_X_Rest1,State1}> when 'true' ->
		    let <IValue> =
			%% Line 1959
			call 'unicode':'characters_to_binary'
			    ([60|[63]], 'unicode', 'utf8')
		    in  let <_cor3> =
			    %% Line 1960
			    #{#<IValue>('all',8,'binary',['unsigned'|['big']]),
			      #<Rest>('all',8,'binary',['unsigned'|['big']])}#
			in  %% Line 1960
			    {_cor3,State1}
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1962
	  <#{#<37>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State> when 'true' ->
	      %% Line 1963
	      case apply 'parse_pe_reference'/2
		       (Rest, State) of
		<{Ref,Rest1,State1}> when 'true' ->
		    %% Line 1964
		    case Ref of
		      %% Line 1965
		      <{'internal_parameter',_cor28,RefValue}> when 'true' ->
			  let <_cor6> =
			      %% Line 1966
			      call 'erlang':'++'
				  (RefValue, [32])
			  in  let <_cor7> =
				  %% Line 1966
				  [32|_cor6]
			      in  let <IValue> =
				      %% Line 1966
				      call 'unicode':'characters_to_binary'
					  (_cor7, 'unicode', 'utf8')
				  in  let <_cor9> =
					  %% Line 1967
					  #{#<IValue>('all',8,'binary',['unsigned'|['big']]),
					    #<Rest1>('all',8,'binary',['unsigned'|['big']])}#
				      in  %% Line 1967
					  apply 'parse_doctype_decl'/2
					      (_cor9, State1)
		      %% Line 1968
		      <{'external_parameter',_cor29,{PubId,SysId}}> when 'true' ->
			  %% Line 1969
			  case State1 of
			    <{'xmerl_sax_parser_state',_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46}> when 'true' ->
				let <_cor12> =
				    call 'erlang':'setelement'
					(14, State1, 'entity')
				in  let <State2> =
					apply 'parse_external_entity'/3
					    (_cor12, PubId, SysId)
				    in  %% Line 1970
					apply 'parse_doctype_decl'/2
					    (Rest1, State2)
			    ( <_cor47> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','xmerl_sax_parser_state'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
		      %% Line 1971
		      <{'not_found',Name}> when 'true' ->
			  %% Line 1972
			  ( case State of
			      ( <( {'xmerl_sax_parser_state',_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_rec78,_cor63}
				   -| ['compiler_generated'] )> when 'true' ->
				    case _rec78 of
				      %% Line 1973
				      <'false'> when 'true' ->
					  let <_cor16> =
					      %% Line 1974
					      call 'erlang':'++'
						  ([69|[110|[116|[105|[116|[121|[32|[110|[111|[116|[32|[100|[101|[99|[108|[97|[114|[101|[100|[58|[32]]]]]]]]]]]]]]]]]]]]], Name)
					  in  %% Line 1974
					      call 'erlang':'throw'
						  ({'fatal_error',{State1,_cor16}})
				      %% Line 1975
				      <'true'> when 'true' ->
					  %% Line 1976
					  apply 'parse_doctype_decl'/2
					      (Rest1, State1)
				      ( <_cor17> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_cor17})
					-| ['compiler_generated'] )
				    end
				-| ['compiler_generated'] )
			      ( <_cor64> when 'true' ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {'badrecord','xmerl_sax_parser_state'}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
		      ( <_cor18> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor18})
			-| ['compiler_generated'] )
		    end
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1979
	  <#{#<60>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<33>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest1>('all',8,'binary',['unsigned'|['big']])}#,State> when 'true' ->
	      %% Line 1980
	      apply 'parse_doctype_decl_1'/2
		  (Rest1, State)
	  %% Line 1981
	  <#{#<93>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State> when 'true' ->
	      %% Line 1982
	      {Rest,State}
	  %% Line 1983
	  <Bytes = #{#<C>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<_cor65>('all',8,'binary',['unsigned'|['big']])}#,State>
	      when let <_cor19> =
		    call 'erlang':'=:='
			(C, 32)
		in  let <_cor20> =
			call 'erlang':'=:='
			    (C, 13)
		    in  let <_cor21> =
			    call 'erlang':'=:='
				(C, 10)
			in  let <_cor22> =
				call 'erlang':'=:='
				    (C, 9)
			    in  let <_cor23> =
				    call 'erlang':'or'
					(_cor21, _cor22)
				in  let <_cor24> =
					call 'erlang':'or'
					    (_cor20, _cor23)
				    in  call 'erlang':'or'
					    (_cor19, _cor24) ->
	      %% Line 1984
	      case apply 'whitespace'/3
		       (Bytes, State, []) of
		<{_X_WS,Rest,State1}> when 'true' ->
		    %% Line 1985
		    apply 'parse_doctype_decl'/2
			(Rest, State1)
		( <_cor25> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor25})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1986
	  <Bytes,State> when 'true' ->
	      %% Line 1987
	      apply 'unicode_incomplete_check'/2
		  ([Bytes|[State|[( 'parse_doctype_decl'/2
				    -| [{'id',{0,0,'-parse_doctype_decl/2-fun-2-'}}] )|[]]]], %% Line 1988
											      [101|[120|[112|[101|[99|[116|[105|[110|[103|[32|[69|[76|[69|[77|[69|[78|[84|[44|[32|[65|[84|[84|[76|[73|[83|[84|[44|[32|[69|[78|[84|[73|[84|[89|[44|[32|[78|[79|[84|[65|[84|[73|[79|[78|[32|[111|[114|[32|[99|[111|[109|[109|[101|[110|[116]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
	end
'parse_doctype_decl_1'/2 =
    %% Line 1999
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <#{}#,State> when 'true' ->
	      %% Line 2000
	      apply 'cf'/3
		  (#{}#, State, ( 'parse_doctype_decl_1'/2
				  -| [{'id',{0,0,'-parse_doctype_decl_1/2-fun-0-'}}] ))
	  %% Line 2002
	  <Bytes = #{#<69>('undefined','undefined','utf8',['unsigned'|['big']])}#,State> when 'true' ->
	      %% Line 2003
	      apply 'cf'/3
		  (Bytes, State, ( 'parse_doctype_decl_1'/2
				   -| [{'id',{0,0,'-parse_doctype_decl_1/2-fun-1-'}}] ))
	  %% Line 2004
	  <Bytes = #{#<69>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<76>('undefined','undefined','utf8',['unsigned'|['big']])}#,State> when 'true' ->
	      %% Line 2005
	      apply 'cf'/3
		  (Bytes, State, ( 'parse_doctype_decl_1'/2
				   -| [{'id',{0,0,'-parse_doctype_decl_1/2-fun-2-'}}] ))
	  %% Line 2006
	  <Bytes = #{#<69>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<76>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<69>('undefined','undefined','utf8',['unsigned'|['big']])}#,State> when 'true' ->
	      %% Line 2007
	      apply 'cf'/3
		  (Bytes, State, ( 'parse_doctype_decl_1'/2
				   -| [{'id',{0,0,'-parse_doctype_decl_1/2-fun-3-'}}] ))
	  %% Line 2008
	  <Bytes = #{#<69>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<76>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<69>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<77>('undefined','undefined','utf8',['unsigned'|['big']])}#,State> when 'true' ->
	      %% Line 2009
	      apply 'cf'/3
		  (Bytes, State, ( 'parse_doctype_decl_1'/2
				   -| [{'id',{0,0,'-parse_doctype_decl_1/2-fun-4-'}}] ))
	  %% Line 2010
	  <Bytes = #{#<69>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<76>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<69>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<77>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<69>('undefined','undefined','utf8',['unsigned'|['big']])}#,State> when 'true' ->
	      %% Line 2011
	      apply 'cf'/3
		  (Bytes, State, ( 'parse_doctype_decl_1'/2
				   -| [{'id',{0,0,'-parse_doctype_decl_1/2-fun-5-'}}] ))
	  %% Line 2012
	  <Bytes = #{#<69>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<76>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<69>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<77>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<69>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<78>('undefined','undefined','utf8',['unsigned'|['big']])}#,State> when 'true' ->
	      %% Line 2013
	      apply 'cf'/3
		  (Bytes, State, ( 'parse_doctype_decl_1'/2
				   -| [{'id',{0,0,'-parse_doctype_decl_1/2-fun-6-'}}] ))
	  %% Line 2014
	  <#{#<69>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<76>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<69>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<77>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<69>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<78>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<84>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State> when 'true' ->
	      %% Line 2015
	      case apply 'parse_element_decl'/2
		       (Rest, State) of
		<{Rest1,State1}> when 'true' ->
		    %% Line 2016
		    apply 'parse_doctype_decl'/2
			(Rest1, State1)
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2018
	  <Bytes = #{#<65>('undefined','undefined','utf8',['unsigned'|['big']])}#,State> when 'true' ->
	      %% Line 2019
	      apply 'cf'/3
		  (Bytes, State, ( 'parse_doctype_decl_1'/2
				   -| [{'id',{0,0,'-parse_doctype_decl_1/2-fun-7-'}}] ))
	  %% Line 2020
	  <Bytes = #{#<65>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<84>('undefined','undefined','utf8',['unsigned'|['big']])}#,State> when 'true' ->
	      %% Line 2021
	      apply 'cf'/3
		  (Bytes, State, ( 'parse_doctype_decl_1'/2
				   -| [{'id',{0,0,'-parse_doctype_decl_1/2-fun-8-'}}] ))
	  %% Line 2022
	  <Bytes = #{#<65>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<84>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<84>('undefined','undefined','utf8',['unsigned'|['big']])}#,State> when 'true' ->
	      %% Line 2023
	      apply 'cf'/3
		  (Bytes, State, ( 'parse_doctype_decl_1'/2
				   -| [{'id',{0,0,'-parse_doctype_decl_1/2-fun-9-'}}] ))
	  %% Line 2024
	  <Bytes = #{#<65>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<84>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<84>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<76>('undefined','undefined','utf8',['unsigned'|['big']])}#,State> when 'true' ->
	      %% Line 2025
	      apply 'cf'/3
		  (Bytes, State, ( 'parse_doctype_decl_1'/2
				   -| [{'id',{0,0,'-parse_doctype_decl_1/2-fun-10-'}}] ))
	  %% Line 2026
	  <Bytes = #{#<65>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<84>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<84>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<76>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<73>('undefined','undefined','utf8',['unsigned'|['big']])}#,State> when 'true' ->
	      %% Line 2027
	      apply 'cf'/3
		  (Bytes, State, ( 'parse_doctype_decl_1'/2
				   -| [{'id',{0,0,'-parse_doctype_decl_1/2-fun-11-'}}] ))
	  %% Line 2028
	  <Bytes = #{#<65>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<84>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<84>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<76>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<73>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<83>('undefined','undefined','utf8',['unsigned'|['big']])}#,State> when 'true' ->
	      %% Line 2029
	      apply 'cf'/3
		  (Bytes, State, ( 'parse_doctype_decl_1'/2
				   -| [{'id',{0,0,'-parse_doctype_decl_1/2-fun-12-'}}] ))
	  %% Line 2030
	  <#{#<65>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<84>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<84>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<76>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<73>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<83>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<84>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State> when 'true' ->
	      %% Line 2031
	      case apply 'parse_att_list_decl'/2
		       (Rest, State) of
		<{Rest1,State1}> when 'true' ->
		    %% Line 2032
		    apply 'parse_doctype_decl'/2
			(Rest1, State1)
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2035
	  <Bytes = #{#<69>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<78>('undefined','undefined','utf8',['unsigned'|['big']])}#,State> when 'true' ->
	      %% Line 2036
	      apply 'cf'/3
		  (Bytes, State, ( 'parse_doctype_decl_1'/2
				   -| [{'id',{0,0,'-parse_doctype_decl_1/2-fun-13-'}}] ))
	  %% Line 2037
	  <Bytes = #{#<69>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<78>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<84>('undefined','undefined','utf8',['unsigned'|['big']])}#,State> when 'true' ->
	      %% Line 2038
	      apply 'cf'/3
		  (Bytes, State, ( 'parse_doctype_decl_1'/2
				   -| [{'id',{0,0,'-parse_doctype_decl_1/2-fun-14-'}}] ))
	  %% Line 2039
	  <Bytes = #{#<69>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<78>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<84>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<73>('undefined','undefined','utf8',['unsigned'|['big']])}#,State> when 'true' ->
	      %% Line 2040
	      apply 'cf'/3
		  (Bytes, State, ( 'parse_doctype_decl_1'/2
				   -| [{'id',{0,0,'-parse_doctype_decl_1/2-fun-15-'}}] ))
	  %% Line 2041
	  <Bytes = #{#<69>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<78>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<84>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<73>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<84>('undefined','undefined','utf8',['unsigned'|['big']])}#,State> when 'true' ->
	      %% Line 2042
	      apply 'cf'/3
		  (Bytes, State, ( 'parse_doctype_decl_1'/2
				   -| [{'id',{0,0,'-parse_doctype_decl_1/2-fun-16-'}}] ))
	  %% Line 2043
	  <#{#<69>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<78>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<84>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<73>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<84>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<89>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State> when 'true' ->
	      %% Line 2044
	      case apply 'parse_entity_decl'/2
		       (Rest, State) of
		<{Rest1,State1}> when 'true' ->
		    %% Line 2045
		    apply 'parse_doctype_decl'/2
			(Rest1, State1)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2047
	  <Bytes = #{#<78>('undefined','undefined','utf8',['unsigned'|['big']])}#,State> when 'true' ->
	      %% Line 2048
	      apply 'cf'/3
		  (Bytes, State, ( 'parse_doctype_decl_1'/2
				   -| [{'id',{0,0,'-parse_doctype_decl_1/2-fun-17-'}}] ))
	  %% Line 2049
	  <Bytes = #{#<78>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<79>('undefined','undefined','utf8',['unsigned'|['big']])}#,State> when 'true' ->
	      %% Line 2050
	      apply 'cf'/3
		  (Bytes, State, ( 'parse_doctype_decl_1'/2
				   -| [{'id',{0,0,'-parse_doctype_decl_1/2-fun-18-'}}] ))
	  %% Line 2051
	  <Bytes = #{#<78>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<79>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<84>('undefined','undefined','utf8',['unsigned'|['big']])}#,State> when 'true' ->
	      %% Line 2052
	      apply 'cf'/3
		  (Bytes, State, ( 'parse_doctype_decl_1'/2
				   -| [{'id',{0,0,'-parse_doctype_decl_1/2-fun-19-'}}] ))
	  %% Line 2053
	  <Bytes = #{#<78>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<79>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<84>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<65>('undefined','undefined','utf8',['unsigned'|['big']])}#,State> when 'true' ->
	      %% Line 2054
	      apply 'cf'/3
		  (Bytes, State, ( 'parse_doctype_decl_1'/2
				   -| [{'id',{0,0,'-parse_doctype_decl_1/2-fun-20-'}}] ))
	  %% Line 2055
	  <Bytes = #{#<78>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<79>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<84>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<65>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<84>('undefined','undefined','utf8',['unsigned'|['big']])}#,State> when 'true' ->
	      %% Line 2056
	      apply 'cf'/3
		  (Bytes, State, ( 'parse_doctype_decl_1'/2
				   -| [{'id',{0,0,'-parse_doctype_decl_1/2-fun-21-'}}] ))
	  %% Line 2057
	  <Bytes = #{#<78>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<79>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<84>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<65>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<84>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<73>('undefined','undefined','utf8',['unsigned'|['big']])}#,State> when 'true' ->
	      %% Line 2058
	      apply 'cf'/3
		  (Bytes, State, ( 'parse_doctype_decl_1'/2
				   -| [{'id',{0,0,'-parse_doctype_decl_1/2-fun-22-'}}] ))
	  %% Line 2059
	  <Bytes = #{#<78>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<79>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<84>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<65>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<84>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<73>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<79>('undefined','undefined','utf8',['unsigned'|['big']])}#,State> when 'true' ->
	      %% Line 2060
	      apply 'cf'/3
		  (Bytes, State, ( 'parse_doctype_decl_1'/2
				   -| [{'id',{0,0,'-parse_doctype_decl_1/2-fun-23-'}}] ))
	  %% Line 2061
	  <#{#<78>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<79>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<84>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<65>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<84>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<73>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<79>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<78>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State> when 'true' ->
	      %% Line 2062
	      case apply 'parse_notation_decl'/2
		       (Rest, State) of
		<{Rest1,State1}> when 'true' ->
		    %% Line 2063
		    apply 'parse_doctype_decl'/2
			(Rest1, State1)
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2064
	  <Bytes = #{#<45>('undefined','undefined','utf8',['unsigned'|['big']])}#,State> when 'true' ->
	      %% Line 2065
	      apply 'cf'/3
		  (Bytes, State, ( 'parse_doctype_decl_1'/2
				   -| [{'id',{0,0,'-parse_doctype_decl_1/2-fun-24-'}}] ))
	  %% Line 2066
	  <#{#<45>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<45>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State> when 'true' ->
	      %% Line 2067
	      case apply 'parse_comment'/3
		       (Rest, State, []) of
		<{Rest1,State1}> when 'true' ->
		    %% Line 2068
		    apply 'parse_doctype_decl'/2
			(Rest1, State1)
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor6})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2069
	  <Bytes,State> when 'true' ->
	      %% Line 2070
	      apply 'unicode_incomplete_check'/2
		  ([Bytes|[State|[( 'parse_doctype_decl_1'/2
				    -| [{'id',{0,0,'-parse_doctype_decl_1/2-fun-25-'}}] )|[]]]], %% Line 2071
												 [101|[120|[112|[101|[99|[116|[105|[110|[103|[32|[69|[76|[69|[77|[69|[78|[84|[44|[32|[65|[84|[84|[76|[73|[83|[84|[44|[32|[69|[78|[84|[73|[84|[89|[44|[32|[78|[79|[84|[65|[84|[73|[79|[78|[32|[111|[114|[32|[99|[111|[109|[109|[101|[110|[116]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
	end
'parse_element_decl'/2 =
    %% Line 2082
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <#{}#,State> when 'true' ->
	      %% Line 2083
	      apply 'cf'/3
		  (#{}#, State, ( 'parse_element_decl'/2
				  -| [{'id',{0,0,'-parse_element_decl/2-fun-0-'}}] ))
	  %% Line 2084
	  <Bytes = #{#<C>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<_cor11>('all',8,'binary',['unsigned'|['big']])}#,State>
	      when let <_cor2> =
		    call 'erlang':'=:='
			(C, 32)
		in  let <_cor3> =
			call 'erlang':'=:='
			    (C, 13)
		    in  let <_cor4> =
			    call 'erlang':'=:='
				(C, 10)
			in  let <_cor5> =
				call 'erlang':'=:='
				    (C, 9)
			    in  let <_cor6> =
				    call 'erlang':'or'
					(_cor4, _cor5)
				in  let <_cor7> =
					call 'erlang':'or'
					    (_cor3, _cor6)
				    in  call 'erlang':'or'
					    (_cor2, _cor7) ->
	      %% Line 2085
	      case apply 'whitespace'/3
		       (Bytes, State, []) of
		<{_X_WS,Rest,State1}> when 'true' ->
		    %% Line 2086
		    apply 'parse_element_decl_1'/2
			(Rest, State1)
		( <_cor8> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor8})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2087
	  <Bytes,State> when 'true' ->
	      %% Line 2088
	      apply 'unicode_incomplete_check'/2
		  ([Bytes|[State|[( 'parse_element_decl'/2
				    -| [{'id',{0,0,'-parse_element_decl/2-fun-1-'}}] )|[]]]], %% Line 2089
											      [119|[104|[105|[116|[101|[115|[112|[97|[99|[101|[32|[101|[120|[112|[101|[99|[116|[101|[100]]]]]]]]]]]]]]]]]]])
	end
'parse_element_decl_1'/2 =
    %% Line 2091
    fun (_cor1,_cor0) ->
	case <( _cor1
		-| ['reuse_for_context'] ),_cor0> of
	  <#{#<C>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State> when 'true' ->
	      %% Line 2092
	      case apply 'is_name_start'/1
		       (C) of
		%% Line 2093
		<'true'> when 'true' ->
		    %% Line 2094
		    case apply 'parse_name'/3
			     (Rest, State, [C|[]]) of
		      <{Name,Rest1,State1}> when 'true' ->
			  %% Line 2095
			  case apply 'parse_element_content'/2
				   (Rest1, State1) of
			    <{Model,Rest2,State2}> when 'true' ->
				let <State3> =
				    %% Line 2096
				    apply 'event_callback'/2
					({'elementDecl',Name,Model}, State2)
				in  %% Line 2097
				    {Rest2,State3}
			    ( <_cor3> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor3})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor2> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor2})
			-| ['compiler_generated'] )
		    end
		%% Line 2098
		<'false'> when 'true' ->
		    %% Line 2099
		    call 'erlang':'throw'
			({'fatal_error',{State,[110|[97|[109|[101|[32|[101|[120|[112|[101|[99|[116|[101|[100]]]]]]]]]]]]]}})
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2101
	  <Bytes,State> when 'true' ->
	      do  primop 'bs_context_to_binary'
		      (Bytes)
		  %% Line 2102
		  apply 'unicode_incomplete_check'/2
		      ([Bytes|[State|[( 'parse_element_decl_1'/2
					-| [{'id',{0,0,'-parse_element_decl_1/2-fun-0-'}}] )|[]]]], %% Line 2103
												    'undefined')
	end
'parse_element_content'/2 =
    %% Line 2114
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <#{}#,State> when 'true' ->
	      %% Line 2115
	      apply 'cf'/3
		  (#{}#, State, ( 'parse_element_content'/2
				  -| [{'id',{0,0,'-parse_element_content/2-fun-0-'}}] ))
	  %% Line 2116
	  <Bytes = #{#<C>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<_cor11>('all',8,'binary',['unsigned'|['big']])}#,State>
	      when let <_cor2> =
		    call 'erlang':'=:='
			(C, 32)
		in  let <_cor3> =
			call 'erlang':'=:='
			    (C, 13)
		    in  let <_cor4> =
			    call 'erlang':'=:='
				(C, 10)
			in  let <_cor5> =
				call 'erlang':'=:='
				    (C, 9)
			    in  let <_cor6> =
				    call 'erlang':'or'
					(_cor4, _cor5)
				in  let <_cor7> =
					call 'erlang':'or'
					    (_cor3, _cor6)
				    in  call 'erlang':'or'
					    (_cor2, _cor7) ->
	      %% Line 2117
	      case apply 'whitespace'/3
		       (Bytes, State, []) of
		<{_X_WS,Rest,State1}> when 'true' ->
		    %% Line 2118
		    apply 'parse_element_content_1'/3
			(Rest, State1, [])
		( <_cor8> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor8})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2119
	  <Bytes,State> when 'true' ->
	      %% Line 2120
	      apply 'unicode_incomplete_check'/2
		  ([Bytes|[State|[( 'parse_element_content'/2
				    -| [{'id',{0,0,'-parse_element_content/2-fun-1-'}}] )|[]]]], %% Line 2121
												 [119|[104|[105|[116|[101|[115|[112|[97|[99|[101|[32|[101|[120|[112|[101|[99|[116|[101|[100]]]]]]]]]]]]]]]]]]])
	end
'parse_element_content_1'/3 =
    %% Line 2133
    fun (_cor2,_cor1,_cor0) ->
	case <( _cor2
		-| ['reuse_for_context'] ),_cor1,_cor0> of
	  <#{}#,State,Acc> when 'true' ->
	      %% Line 2134
	      apply 'cf'/4
		  (#{}#, State, Acc, ( 'parse_element_content_1'/3
				       -| [{'id',{0,0,'-parse_element_content_1/3-fun-0-'}}] ))
	  %% Line 2135
	  <#{#<62>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State,Acc> when 'true' ->
	      let <_cor3> =
		  %% Line 2136
		  apply 'delete_leading_whitespace'/1
		      (Acc)
	      in  let <_cor4> =
		      %% Line 2136
		      call 'lists':'reverse'
			  (_cor3)
		  in  %% Line 2136
		      {_cor4,Rest,State}
	  %% Line 2137
	  <#{#<C>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State,Acc> when 'true' ->
	      %% Line 2138
	      apply 'parse_element_content_1'/3
		  (Rest, State, [C|Acc])
	  %% Line 2139
	  <Bytes,State,Acc> when 'true' ->
	      do  primop 'bs_context_to_binary'
		      (Bytes)
		  %% Line 2140
		  apply 'unicode_incomplete_check'/2
		      ([Bytes|[State|[Acc|[( 'parse_element_content_1'/3
					     -| [{'id',{0,0,'-parse_element_content_1/3-fun-1-'}}] )|[]]]]], %% Line 2141
													     'undefined')
	end
'delete_leading_whitespace'/1 =
    %% Line 2143
    fun (_cor0) ->
	case _cor0 of
	  <[C|Acc]>
	      when let <_cor1> =
		    call 'erlang':'=:='
			(C, 32)
		in  let <_cor2> =
			call 'erlang':'=:='
			    (C, 13)
		    in  let <_cor3> =
			    call 'erlang':'=:='
				(C, 10)
			in  let <_cor4> =
				call 'erlang':'=:='
				    (C, 9)
			    in  let <_cor5> =
				    call 'erlang':'or'
					(_cor3, _cor4)
				in  let <_cor6> =
					call 'erlang':'or'
					    (_cor2, _cor5)
				    in  call 'erlang':'or'
					    (_cor1, _cor6) ->
	      %% Line 2144
	      apply 'delete_leading_whitespace'/1
		  (Acc)
	  %% Line 2145
	  <Acc> when 'true' ->
	      %% Line 2146
	      Acc
	end
'parse_att_list_decl'/2 =
    %% Line 2156
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <#{}#,State> when 'true' ->
	      %% Line 2157
	      apply 'cf'/3
		  (#{}#, State, ( 'parse_att_list_decl'/2
				  -| [{'id',{0,0,'-parse_att_list_decl/2-fun-0-'}}] ))
	  %% Line 2158
	  <Bytes = #{#<C>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<_cor11>('all',8,'binary',['unsigned'|['big']])}#,State>
	      when let <_cor2> =
		    call 'erlang':'=:='
			(C, 32)
		in  let <_cor3> =
			call 'erlang':'=:='
			    (C, 13)
		    in  let <_cor4> =
			    call 'erlang':'=:='
				(C, 10)
			in  let <_cor5> =
				call 'erlang':'=:='
				    (C, 9)
			    in  let <_cor6> =
				    call 'erlang':'or'
					(_cor4, _cor5)
				in  let <_cor7> =
					call 'erlang':'or'
					    (_cor3, _cor6)
				    in  call 'erlang':'or'
					    (_cor2, _cor7) ->
	      %% Line 2159
	      case apply 'whitespace'/3
		       (Bytes, State, []) of
		<{_X_WS,Rest,State1}> when 'true' ->
		    %% Line 2160
		    apply 'parse_att_list_decl_1'/2
			(Rest, State1)
		( <_cor8> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor8})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2161
	  <Bytes,State> when 'true' ->
	      %% Line 2162
	      apply 'unicode_incomplete_check'/2
		  ([Bytes|[State|[( 'parse_att_list_decl'/2
				    -| [{'id',{0,0,'-parse_att_list_decl/2-fun-1-'}}] )|[]]]], %% Line 2163
											       [119|[104|[105|[116|[101|[115|[112|[97|[99|[101|[32|[101|[120|[112|[101|[99|[116|[101|[100]]]]]]]]]]]]]]]]]]])
	end
'parse_att_list_decl_1'/2 =
    %% Line 2166
    fun (_cor1,_cor0) ->
	case <( _cor1
		-| ['reuse_for_context'] ),_cor0> of
	  <#{#<C>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State> when 'true' ->
	      %% Line 2167
	      case apply 'is_name_start'/1
		       (C) of
		%% Line 2168
		<'true'> when 'true' ->
		    %% Line 2169
		    case apply 'parse_name'/3
			     (Rest, State, [C|[]]) of
		      <{ElementName,Rest1,State1}> when 'true' ->
			  %% Line 2170
			  apply 'parse_att_defs'/3
			      (Rest1, State1, ElementName)
		      ( <_cor2> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor2})
			-| ['compiler_generated'] )
		    end
		%% Line 2171
		<'false'> when 'true' ->
		    %% Line 2172
		    call 'erlang':'throw'
			({'fatal_error',{State,[110|[97|[109|[101|[32|[101|[120|[112|[101|[99|[116|[101|[100]]]]]]]]]]]]]}})
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2174
	  <Bytes,State> when 'true' ->
	      do  primop 'bs_context_to_binary'
		      (Bytes)
		  %% Line 2175
		  apply 'unicode_incomplete_check'/2
		      ([Bytes|[State|[( 'parse_att_list_decl_1'/2
					-| [{'id',{0,0,'-parse_att_list_decl_1/2-fun-0-'}}] )|[]]]], %% Line 2176
												     'undefined')
	end
'parse_att_defs'/3 =
    %% Line 2188
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <#{}#,State,ElementName> when 'true' ->
	      %% Line 2189
	      apply 'cf'/4
		  (#{}#, State, ElementName, ( 'parse_att_defs'/3
					       -| [{'id',{0,0,'-parse_att_defs/3-fun-0-'}}] ))
	  %% Line 2190
	  <#{#<62>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State,_X_ElementName> when 'true' ->
	      %% Line 2191
	      {Rest,State}
	  %% Line 2192
	  <Rest = #{#<C>('undefined','undefined','utf8',['unsigned'|['big']]),
		    #<_cor18>('all',8,'binary',['unsigned'|['big']])}#,State,ElementName>
	      when let <_cor3> =
		    call 'erlang':'=:='
			(C, 32)
		in  let <_cor4> =
			call 'erlang':'=:='
			    (C, 13)
		    in  let <_cor5> =
			    call 'erlang':'=:='
				(C, 10)
			in  let <_cor6> =
				call 'erlang':'=:='
				    (C, 9)
			    in  let <_cor7> =
				    call 'erlang':'or'
					(_cor5, _cor6)
				in  let <_cor8> =
					call 'erlang':'or'
					    (_cor4, _cor7)
				    in  call 'erlang':'or'
					    (_cor3, _cor8) ->
	      %% Line 2193
	      case apply 'whitespace'/3
		       (Rest, State, []) of
		<{_X_WS,Rest1,State1}> when 'true' ->
		    %% Line 2194
		    apply 'parse_att_defs'/3
			(Rest1, State1, ElementName)
		( <_cor9> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor9})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2195
	  <#{#<C>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State,ElementName> when 'true' ->
	      %% Line 2196
	      case apply 'is_name_start'/1
		       (C) of
		%% Line 2197
		<'true'> when 'true' ->
		    %% Line 2198
		    case apply 'parse_name'/3
			     (Rest, State, [C|[]]) of
		      <{AttrName,Rest1,State1}> when 'true' ->
			  %% Line 2199
			  case apply 'parse_att_type'/2
				   (Rest1, State1) of
			    <{Type,Rest2,State2}> when 'true' ->
				%% Line 2200
				case apply 'parse_default_decl'/2
					 (Rest2, State2) of
				  <{Mode,Value,Rest3,State3}> when 'true' ->
				      let <State4> =
					  %% Line 2201
					  apply 'event_callback'/2
					      ({'attributeDecl',ElementName,AttrName,Type,Mode,Value}, State3)
				      in  %% Line 2202
					  apply 'parse_att_defs'/3
					      (Rest3, State4, ElementName)
				  ( <_cor12> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor12})
				    -| ['compiler_generated'] )
				end
			    ( <_cor11> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor11})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor10> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor10})
			-| ['compiler_generated'] )
		    end
		%% Line 2203
		<'false'> when 'true' ->
		    %% Line 2204
		    call 'erlang':'throw'
			({'fatal_error',{State,[119|[104|[105|[116|[101|[115|[112|[97|[99|[101|[32|[111|[114|[32|[110|[97|[109|[101|[32|[101|[120|[112|[101|[99|[116|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]}})
		( <_cor14> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor14})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2206
	  <Bytes,State,ElementName> when 'true' ->
	      %% Line 2207
	      apply 'unicode_incomplete_check'/2
		  ([Bytes|[State|[ElementName|[( 'parse_att_defs'/3
						 -| [{'id',{0,0,'-parse_att_defs/3-fun-1-'}}] )|[]]]]], %% Line 2208
													'undefined')
	end
'parse_att_type'/2 =
    %% Line 2226
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <#{}#,State> when 'true' ->
	      %% Line 2227
	      apply 'cf'/3
		  (#{}#, State, ( 'parse_att_type'/2
				  -| [{'id',{0,0,'-parse_att_type/2-fun-0-'}}] ))
	  %% Line 2228
	  <Bytes = #{#<C>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<_cor17>('all',8,'binary',['unsigned'|['big']])}#,State>
	      when let <_cor2> =
		    call 'erlang':'=:='
			(C, 32)
		in  let <_cor3> =
			call 'erlang':'=:='
			    (C, 13)
		    in  let <_cor4> =
			    call 'erlang':'=:='
				(C, 10)
			in  let <_cor5> =
				call 'erlang':'=:='
				    (C, 9)
			    in  let <_cor6> =
				    call 'erlang':'or'
					(_cor4, _cor5)
				in  let <_cor7> =
					call 'erlang':'or'
					    (_cor3, _cor6)
				    in  call 'erlang':'or'
					    (_cor2, _cor7) ->
	      %% Line 2229
	      case apply 'whitespace'/3
		       (Bytes, State, []) of
		<{_X_WS,Rest,State1}> when 'true' ->
		    %% Line 2230
		    case apply 'parse_att_type_1'/3
			     (Rest, State1, []) of
		      %% Line 2231
		      <{Type,Rest1,State2}>
			  when let <_cor9> =
				call 'erlang':'=='
				    (Type, [40])
			    in  let <_cor10> =
				    call 'erlang':'=='
					(Type, [78|[79|[84|[65|[84|[73|[79|[78]]]]]]]])
				in  call 'erlang':'or'
					(_cor9, _cor10) ->
			  %% Line 2232
			  case apply 'parse_until_right_paren'/3
				   (Rest1, State2, []) of
			    <{T,Rest2,State3}> when 'true' ->
				let <_cor12> =
				    %% Line 2233
				    call 'erlang':'++'
					(Type, T)
				in  %% Line 2233
				    {_cor12,Rest2,State3}
			    ( <_cor11> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor11})
			      -| ['compiler_generated'] )
			  end
		      %% Line 2234
		      <{Type,Rest1,State2}> when 'true' ->
			  %% Line 2235
			  case apply 'check_att_type'/1
				   (Type) of
			    %% Line 2236
			    <'true'> when 'true' ->
				%% Line 2237
				{Type,Rest1,State2}
			    %% Line 2238
			    <'false'> when 'true' ->
				%% Line 2239
				call 'erlang':'throw'
				    ({'fatal_error',{State2,[119|[114|[111|[110|[103|[32|[97|[116|[116|[114|[105|[98|[117|[116|[101|[32|[116|[121|[112|[101]]]]]]]]]]]]]]]]]]]]}})
			    ( <_cor13> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor13})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor14> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor14})
			-| ['compiler_generated'] )
		    end
		( <_cor8> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor8})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2242
	  <Bytes,State> when 'true' ->
	      %% Line 2243
	      apply 'unicode_incomplete_check'/2
		  ([Bytes|[State|[( 'parse_att_type'/2
				    -| [{'id',{0,0,'-parse_att_type/2-fun-1-'}}] )|[]]]], %% Line 2244
											  [119|[104|[105|[116|[101|[115|[112|[97|[99|[101|[32|[101|[120|[112|[101|[99|[116|[101|[100]]]]]]]]]]]]]]]]]]])
	end
'parse_att_type_1'/3 =
    %% Line 2256
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <#{}#,State,Acc> when 'true' ->
	      %% Line 2257
	      apply 'cf'/4
		  (#{}#, State, Acc, ( 'parse_att_type_1'/3
				       -| [{'id',{0,0,'-parse_att_type_1/3-fun-0-'}}] ))
	  %% Line 2258
	  <Bytes = #{#<C>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<_cor13>('all',8,'binary',['unsigned'|['big']])}#,State,Acc>
	      when let <_cor3> =
		    call 'erlang':'=:='
			(C, 32)
		in  let <_cor4> =
			call 'erlang':'=:='
			    (C, 13)
		    in  let <_cor5> =
			    call 'erlang':'=:='
				(C, 10)
			in  let <_cor6> =
				call 'erlang':'=:='
				    (C, 9)
			    in  let <_cor7> =
				    call 'erlang':'or'
					(_cor5, _cor6)
				in  let <_cor8> =
					call 'erlang':'or'
					    (_cor4, _cor7)
				    in  call 'erlang':'or'
					    (_cor3, _cor8) ->
	      let <_cor9> =
		  %% Line 2259
		  call 'lists':'reverse'
		      (Acc)
	      in  %% Line 2259
		  {_cor9,Bytes,State}
	  %% Line 2260
	  <#{#<40>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State,[]> when 'true' ->
	      %% Line 2261
	      {[40],Rest,State}
	  %% Line 2262
	  <#{#<C>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State,Acc> when 'true' ->
	      %% Line 2263
	      apply 'parse_att_type_1'/3
		  (Rest, State, [C|Acc])
	  %% Line 2264
	  <Bytes,State,Acc> when 'true' ->
	      %% Line 2265
	      apply 'unicode_incomplete_check'/2
		  ([Bytes|[State|[Acc|[( 'parse_att_type_1'/3
					 -| [{'id',{0,0,'-parse_att_type_1/3-fun-1-'}}] )|[]]]]], %% Line 2266
												  'undefined')
	end
'check_att_type'/1 =
    %% Line 2274
    fun (_cor0) ->
	case _cor0 of
	  <[67|[68|[65|[84|[65]]]]]> when 'true' ->
	      %% Line 2275
	      'true'
	  %% Line 2276
	  <[73|[68]]> when 'true' ->
	      %% Line 2277
	      'true'
	  %% Line 2278
	  <[73|[68|[82|[69|[70]]]]]> when 'true' ->
	      %% Line 2279
	      'true'
	  %% Line 2280
	  <[73|[68|[82|[69|[70|[83]]]]]]> when 'true' ->
	      %% Line 2281
	      'true'
	  %% Line 2282
	  <[69|[78|[84|[73|[84|[89]]]]]]> when 'true' ->
	      %% Line 2283
	      'true'
	  %% Line 2284
	  <[69|[78|[84|[73|[84|[73|[69|[83]]]]]]]]> when 'true' ->
	      %% Line 2285
	      'true'
	  %% Line 2286
	  <[78|[77|[84|[79|[75|[69|[78]]]]]]]> when 'true' ->
	      %% Line 2287
	      'true'
	  %% Line 2288
	  <[78|[77|[84|[79|[75|[69|[78|[83]]]]]]]]> when 'true' ->
	      %% Line 2289
	      'true'
	  %% Line 2290
	  <_cor2> when 'true' ->
	      %% Line 2291
	      'false'
	end
'parse_until_right_paren'/3 =
    %% Line 2303
    fun (_cor2,_cor1,_cor0) ->
	case <( _cor2
		-| ['reuse_for_context'] ),_cor1,_cor0> of
	  <#{}#,State,Acc> when 'true' ->
	      %% Line 2304
	      apply 'cf'/4
		  (#{}#, State, Acc, ( 'parse_until_right_paren'/3
				       -| [{'id',{0,0,'-parse_until_right_paren/3-fun-0-'}}] ))
	  %% Line 2305
	  <#{#<41>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State,Acc> when 'true' ->
	      let <_cor3> =
		  %% Line 2306
		  [41|Acc]
	      in  let <_cor4> =
		      %% Line 2306
		      call 'lists':'reverse'
			  (_cor3)
		  in  %% Line 2306
		      {_cor4,Rest,State}
	  %% Line 2307
	  <#{#<C>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State,Acc> when 'true' ->
	      %% Line 2308
	      apply 'parse_until_right_paren'/3
		  (Rest, State, [C|Acc])
	  %% Line 2309
	  <Bytes,State,Acc> when 'true' ->
	      do  primop 'bs_context_to_binary'
		      (Bytes)
		  %% Line 2310
		  apply 'unicode_incomplete_check'/2
		      ([Bytes|[State|[Acc|[( 'parse_until_right_paren'/3
					     -| [{'id',{0,0,'-parse_until_right_paren/3-fun-1-'}}] )|[]]]]], %% Line 2311
													     'undefined')
	end
'parse_default_decl'/2 =
    %% Line 2323
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <#{}#,State> when 'true' ->
	      %% Line 2324
	      apply 'cf'/3
		  (#{}#, State, ( 'parse_default_decl'/2
				  -| [{'id',{0,0,'-parse_default_decl/2-fun-0-'}}] ))
	  %% Line 2325
	  <Bytes = #{#<C>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<_cor11>('all',8,'binary',['unsigned'|['big']])}#,State>
	      when let <_cor2> =
		    call 'erlang':'=:='
			(C, 32)
		in  let <_cor3> =
			call 'erlang':'=:='
			    (C, 13)
		    in  let <_cor4> =
			    call 'erlang':'=:='
				(C, 10)
			in  let <_cor5> =
				call 'erlang':'=:='
				    (C, 9)
			    in  let <_cor6> =
				    call 'erlang':'or'
					(_cor4, _cor5)
				in  let <_cor7> =
					call 'erlang':'or'
					    (_cor3, _cor6)
				    in  call 'erlang':'or'
					    (_cor2, _cor7) ->
	      %% Line 2326
	      case apply 'whitespace'/3
		       (Bytes, State, []) of
		<{_X_WS,Rest,State1}> when 'true' ->
		    %% Line 2327
		    apply 'parse_default_decl_1'/2
			(Rest, State1)
		( <_cor8> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor8})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2328
	  <Bytes,State> when 'true' ->
	      %% Line 2329
	      apply 'unicode_incomplete_check'/2
		  ([Bytes|[State|[( 'parse_default_decl'/2
				    -| [{'id',{0,0,'-parse_default_decl/2-fun-1-'}}] )|[]]]], %% Line 2330
											      [119|[104|[105|[116|[101|[115|[112|[97|[99|[101|[32|[101|[120|[112|[101|[99|[116|[101|[100]]]]]]]]]]]]]]]]]]])
	end
'parse_default_decl_1'/2 =
    %% Line 2341
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <#{}#,State> when 'true' ->
	      %% Line 2342
	      apply 'cf'/3
		  (#{}#, State, ( 'parse_default_decl_1'/2
				  -| [{'id',{0,0,'-parse_default_decl_1/2-fun-0-'}}] ))
	  %% Line 2343
	  <Bytes = #{#<35>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<_X_Rest>('all',8,'binary',['unsigned'|['big']])}#,State> when 'true' ->
	      %% Line 2344
	      case Bytes of
		%% Line 2345
		<#{#<35>('undefined','undefined','utf8',['unsigned'|['big']]),
		   #<82>('undefined','undefined','utf8',['unsigned'|['big']])}#> when 'true' ->
		    %% Line 2346
		    apply 'cf'/3
			(Bytes, State, ( 'parse_default_decl_1'/2
					 -| [{'id',{0,0,'-parse_default_decl_1/2-fun-1-'}}] ))
		%% Line 2347
		<#{#<35>('undefined','undefined','utf8',['unsigned'|['big']]),
		   #<82>('undefined','undefined','utf8',['unsigned'|['big']]),
		   #<69>('undefined','undefined','utf8',['unsigned'|['big']])}#> when 'true' ->
		    %% Line 2348
		    apply 'cf'/3
			(Bytes, State, ( 'parse_default_decl_1'/2
					 -| [{'id',{0,0,'-parse_default_decl_1/2-fun-2-'}}] ))
		%% Line 2349
		<#{#<35>('undefined','undefined','utf8',['unsigned'|['big']]),
		   #<82>('undefined','undefined','utf8',['unsigned'|['big']]),
		   #<69>('undefined','undefined','utf8',['unsigned'|['big']]),
		   #<81>('undefined','undefined','utf8',['unsigned'|['big']])}#> when 'true' ->
		    %% Line 2350
		    apply 'cf'/3
			(Bytes, State, ( 'parse_default_decl_1'/2
					 -| [{'id',{0,0,'-parse_default_decl_1/2-fun-3-'}}] ))
		%% Line 2351
		<#{#<35>('undefined','undefined','utf8',['unsigned'|['big']]),
		   #<82>('undefined','undefined','utf8',['unsigned'|['big']]),
		   #<69>('undefined','undefined','utf8',['unsigned'|['big']]),
		   #<81>('undefined','undefined','utf8',['unsigned'|['big']]),
		   #<85>('undefined','undefined','utf8',['unsigned'|['big']])}#> when 'true' ->
		    %% Line 2352
		    apply 'cf'/3
			(Bytes, State, ( 'parse_default_decl_1'/2
					 -| [{'id',{0,0,'-parse_default_decl_1/2-fun-4-'}}] ))
		%% Line 2353
		<#{#<35>('undefined','undefined','utf8',['unsigned'|['big']]),
		   #<82>('undefined','undefined','utf8',['unsigned'|['big']]),
		   #<69>('undefined','undefined','utf8',['unsigned'|['big']]),
		   #<81>('undefined','undefined','utf8',['unsigned'|['big']]),
		   #<85>('undefined','undefined','utf8',['unsigned'|['big']]),
		   #<73>('undefined','undefined','utf8',['unsigned'|['big']])}#> when 'true' ->
		    %% Line 2354
		    apply 'cf'/3
			(Bytes, State, ( 'parse_default_decl_1'/2
					 -| [{'id',{0,0,'-parse_default_decl_1/2-fun-5-'}}] ))
		%% Line 2355
		<#{#<35>('undefined','undefined','utf8',['unsigned'|['big']]),
		   #<82>('undefined','undefined','utf8',['unsigned'|['big']]),
		   #<69>('undefined','undefined','utf8',['unsigned'|['big']]),
		   #<81>('undefined','undefined','utf8',['unsigned'|['big']]),
		   #<85>('undefined','undefined','utf8',['unsigned'|['big']]),
		   #<73>('undefined','undefined','utf8',['unsigned'|['big']]),
		   #<82>('undefined','undefined','utf8',['unsigned'|['big']])}#> when 'true' ->
		    %% Line 2356
		    apply 'cf'/3
			(Bytes, State, ( 'parse_default_decl_1'/2
					 -| [{'id',{0,0,'-parse_default_decl_1/2-fun-6-'}}] ))
		%% Line 2357
		<#{#<35>('undefined','undefined','utf8',['unsigned'|['big']]),
		   #<82>('undefined','undefined','utf8',['unsigned'|['big']]),
		   #<69>('undefined','undefined','utf8',['unsigned'|['big']]),
		   #<81>('undefined','undefined','utf8',['unsigned'|['big']]),
		   #<85>('undefined','undefined','utf8',['unsigned'|['big']]),
		   #<73>('undefined','undefined','utf8',['unsigned'|['big']]),
		   #<82>('undefined','undefined','utf8',['unsigned'|['big']]),
		   #<69>('undefined','undefined','utf8',['unsigned'|['big']])}#> when 'true' ->
		    %% Line 2358
		    apply 'cf'/3
			(Bytes, State, ( 'parse_default_decl_1'/2
					 -| [{'id',{0,0,'-parse_default_decl_1/2-fun-7-'}}] ))
		%% Line 2359
		<#{#<35>('undefined','undefined','utf8',['unsigned'|['big']]),
		   #<82>('undefined','undefined','utf8',['unsigned'|['big']]),
		   #<69>('undefined','undefined','utf8',['unsigned'|['big']]),
		   #<81>('undefined','undefined','utf8',['unsigned'|['big']]),
		   #<85>('undefined','undefined','utf8',['unsigned'|['big']]),
		   #<73>('undefined','undefined','utf8',['unsigned'|['big']]),
		   #<82>('undefined','undefined','utf8',['unsigned'|['big']]),
		   #<69>('undefined','undefined','utf8',['unsigned'|['big']]),
		   #<68>('undefined','undefined','utf8',['unsigned'|['big']]),
		   #<Rest1>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
		    %% Line 2360
		    {[35|[82|[69|[81|[85|[73|[82|[69|[68]]]]]]]]],'undefined',Rest1,State}
		%% Line 2362
		<#{#<35>('undefined','undefined','utf8',['unsigned'|['big']]),
		   #<73>('undefined','undefined','utf8',['unsigned'|['big']])}#> when 'true' ->
		    %% Line 2363
		    apply 'cf'/3
			(Bytes, State, ( 'parse_default_decl_1'/2
					 -| [{'id',{0,0,'-parse_default_decl_1/2-fun-8-'}}] ))
		%% Line 2364
		<#{#<35>('undefined','undefined','utf8',['unsigned'|['big']]),
		   #<73>('undefined','undefined','utf8',['unsigned'|['big']]),
		   #<77>('undefined','undefined','utf8',['unsigned'|['big']])}#> when 'true' ->
		    %% Line 2365
		    apply 'cf'/3
			(Bytes, State, ( 'parse_default_decl_1'/2
					 -| [{'id',{0,0,'-parse_default_decl_1/2-fun-9-'}}] ))
		%% Line 2366
		<#{#<35>('undefined','undefined','utf8',['unsigned'|['big']]),
		   #<73>('undefined','undefined','utf8',['unsigned'|['big']]),
		   #<77>('undefined','undefined','utf8',['unsigned'|['big']]),
		   #<80>('undefined','undefined','utf8',['unsigned'|['big']])}#> when 'true' ->
		    %% Line 2367
		    apply 'cf'/3
			(Bytes, State, ( 'parse_default_decl_1'/2
					 -| [{'id',{0,0,'-parse_default_decl_1/2-fun-10-'}}] ))
		%% Line 2368
		<#{#<35>('undefined','undefined','utf8',['unsigned'|['big']]),
		   #<73>('undefined','undefined','utf8',['unsigned'|['big']]),
		   #<77>('undefined','undefined','utf8',['unsigned'|['big']]),
		   #<80>('undefined','undefined','utf8',['unsigned'|['big']]),
		   #<76>('undefined','undefined','utf8',['unsigned'|['big']])}#> when 'true' ->
		    %% Line 2369
		    apply 'cf'/3
			(Bytes, State, ( 'parse_default_decl_1'/2
					 -| [{'id',{0,0,'-parse_default_decl_1/2-fun-11-'}}] ))
		%% Line 2370
		<#{#<35>('undefined','undefined','utf8',['unsigned'|['big']]),
		   #<73>('undefined','undefined','utf8',['unsigned'|['big']]),
		   #<77>('undefined','undefined','utf8',['unsigned'|['big']]),
		   #<80>('undefined','undefined','utf8',['unsigned'|['big']]),
		   #<76>('undefined','undefined','utf8',['unsigned'|['big']]),
		   #<73>('undefined','undefined','utf8',['unsigned'|['big']])}#> when 'true' ->
		    %% Line 2371
		    apply 'cf'/3
			(Bytes, State, ( 'parse_default_decl_1'/2
					 -| [{'id',{0,0,'-parse_default_decl_1/2-fun-12-'}}] ))
		%% Line 2372
		<#{#<35>('undefined','undefined','utf8',['unsigned'|['big']]),
		   #<73>('undefined','undefined','utf8',['unsigned'|['big']]),
		   #<77>('undefined','undefined','utf8',['unsigned'|['big']]),
		   #<80>('undefined','undefined','utf8',['unsigned'|['big']]),
		   #<76>('undefined','undefined','utf8',['unsigned'|['big']]),
		   #<73>('undefined','undefined','utf8',['unsigned'|['big']]),
		   #<69>('undefined','undefined','utf8',['unsigned'|['big']])}#> when 'true' ->
		    %% Line 2373
		    apply 'cf'/3
			(Bytes, State, ( 'parse_default_decl_1'/2
					 -| [{'id',{0,0,'-parse_default_decl_1/2-fun-13-'}}] ))
		%% Line 2374
		<#{#<35>('undefined','undefined','utf8',['unsigned'|['big']]),
		   #<73>('undefined','undefined','utf8',['unsigned'|['big']]),
		   #<77>('undefined','undefined','utf8',['unsigned'|['big']]),
		   #<80>('undefined','undefined','utf8',['unsigned'|['big']]),
		   #<76>('undefined','undefined','utf8',['unsigned'|['big']]),
		   #<73>('undefined','undefined','utf8',['unsigned'|['big']]),
		   #<69>('undefined','undefined','utf8',['unsigned'|['big']]),
		   #<68>('undefined','undefined','utf8',['unsigned'|['big']]),
		   #<Rest1>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
		    %% Line 2375
		    {[35|[73|[77|[80|[76|[73|[69|[68]]]]]]]],'undefined',Rest1,State}
		%% Line 2377
		<#{#<35>('undefined','undefined','utf8',['unsigned'|['big']]),
		   #<70>('undefined','undefined','utf8',['unsigned'|['big']])}#> when 'true' ->
		    %% Line 2378
		    apply 'cf'/3
			(Bytes, State, ( 'parse_default_decl_1'/2
					 -| [{'id',{0,0,'-parse_default_decl_1/2-fun-14-'}}] ))
		%% Line 2379
		<#{#<35>('undefined','undefined','utf8',['unsigned'|['big']]),
		   #<70>('undefined','undefined','utf8',['unsigned'|['big']]),
		   #<73>('undefined','undefined','utf8',['unsigned'|['big']])}#> when 'true' ->
		    %% Line 2380
		    apply 'cf'/3
			(Bytes, State, ( 'parse_default_decl_1'/2
					 -| [{'id',{0,0,'-parse_default_decl_1/2-fun-15-'}}] ))
		%% Line 2381
		<#{#<35>('undefined','undefined','utf8',['unsigned'|['big']]),
		   #<70>('undefined','undefined','utf8',['unsigned'|['big']]),
		   #<73>('undefined','undefined','utf8',['unsigned'|['big']]),
		   #<88>('undefined','undefined','utf8',['unsigned'|['big']])}#> when 'true' ->
		    %% Line 2382
		    apply 'cf'/3
			(Bytes, State, ( 'parse_default_decl_1'/2
					 -| [{'id',{0,0,'-parse_default_decl_1/2-fun-16-'}}] ))
		%% Line 2383
		<#{#<35>('undefined','undefined','utf8',['unsigned'|['big']]),
		   #<70>('undefined','undefined','utf8',['unsigned'|['big']]),
		   #<73>('undefined','undefined','utf8',['unsigned'|['big']]),
		   #<88>('undefined','undefined','utf8',['unsigned'|['big']]),
		   #<69>('undefined','undefined','utf8',['unsigned'|['big']])}#> when 'true' ->
		    %% Line 2384
		    apply 'cf'/3
			(Bytes, State, ( 'parse_default_decl_1'/2
					 -| [{'id',{0,0,'-parse_default_decl_1/2-fun-17-'}}] ))
		%% Line 2385
		<#{#<35>('undefined','undefined','utf8',['unsigned'|['big']]),
		   #<70>('undefined','undefined','utf8',['unsigned'|['big']]),
		   #<73>('undefined','undefined','utf8',['unsigned'|['big']]),
		   #<88>('undefined','undefined','utf8',['unsigned'|['big']]),
		   #<69>('undefined','undefined','utf8',['unsigned'|['big']]),
		   #<68>('undefined','undefined','utf8',['unsigned'|['big']]),
		   #<Rest1>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
		    %% Line 2386
		    apply 'parse_fixed'/2
			(Rest1, State)
		%% Line 2387
		<_cor8> when 'true' ->
		    %% Line 2388
		    call 'erlang':'throw'
			({'fatal_error',{State,[82|[69|[81|[85|[73|[82|[69|[68|[44|[32|[73|[77|[80|[76|[73|[69|[68|[32|[111|[114|[32|[70|[73|[88|[69|[68|[32|[101|[120|[112|[101|[99|[116|[101|[100|[32|[97|[102|[116|[101|[114|[32|[35]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}})
	      end
	  %% Line 2390
	  <#{#<C>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State>
	      when let <_cor3> =
		    call 'erlang':'=='
			(C, 39)
		in  let <_cor4> =
			call 'erlang':'=='
			    (C, 34)
		    in  call 'erlang':'or'
			    (_cor3, _cor4) ->
	      %% Line 2391
	      case apply 'parse_att_value'/4
		       (Rest, State, C, []) of
		<{DefaultValue,Rest1,State1}> when 'true' ->
		    %% Line 2392
		    {[],DefaultValue,Rest1,State1}
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2393
	  <Bytes,State> when 'true' ->
	      %% Line 2394
	      apply 'unicode_incomplete_check'/2
		  ([Bytes|[State|[( 'parse_default_decl_1'/2
				    -| [{'id',{0,0,'-parse_default_decl_1/2-fun-18-'}}] )|[]]]], %% Line 2395
												 [98|[97|[100|[32|[100|[101|[102|[97|[117|[108|[116|[32|[100|[101|[99|[108|[97|[114|[97|[116|[105|[111|[110]]]]]]]]]]]]]]]]]]]]]]])
	end
'parse_fixed'/2 =
    %% Line 2398
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Bytes = #{#<C>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<_cor11>('all',8,'binary',['unsigned'|['big']])}#,State>
	      when let <_cor2> =
		    call 'erlang':'=:='
			(C, 32)
		in  let <_cor3> =
			call 'erlang':'=:='
			    (C, 13)
		    in  let <_cor4> =
			    call 'erlang':'=:='
				(C, 10)
			in  let <_cor5> =
				call 'erlang':'=:='
				    (C, 9)
			    in  let <_cor6> =
				    call 'erlang':'or'
					(_cor4, _cor5)
				in  let <_cor7> =
					call 'erlang':'or'
					    (_cor3, _cor6)
				    in  call 'erlang':'or'
					    (_cor2, _cor7) ->
	      %% Line 2399
	      case apply 'parse_att_value'/2
		       (Bytes, State) of
		<{DefaultValue,Rest,State1}> when 'true' ->
		    %% Line 2400
		    {[35|[70|[73|[88|[69|[68]]]]]],DefaultValue,Rest,State1}
		( <_cor8> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor8})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2401
	  <Bytes,State> when 'true' ->
	      %% Line 2402
	      apply 'unicode_incomplete_check'/2
		  ([Bytes|[State|[( 'parse_fixed'/2
				    -| [{'id',{0,0,'-parse_fixed/2-fun-0-'}}] )|[]]]], %% Line 2403
										       [119|[104|[105|[116|[101|[115|[112|[97|[99|[101|[32|[101|[120|[112|[101|[99|[116|[101|[100]]]]]]]]]]]]]]]]]]])
	end
'parse_entity_decl'/2 =
    %% Line 2415
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <#{}#,State> when 'true' ->
	      %% Line 2416
	      apply 'cf'/3
		  (#{}#, State, ( 'parse_entity_decl'/2
				  -| [{'id',{0,0,'-parse_entity_decl/2-fun-0-'}}] ))
	  %% Line 2417
	  <Bytes = #{#<C>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<_cor11>('all',8,'binary',['unsigned'|['big']])}#,State>
	      when let <_cor2> =
		    call 'erlang':'=:='
			(C, 32)
		in  let <_cor3> =
			call 'erlang':'=:='
			    (C, 13)
		    in  let <_cor4> =
			    call 'erlang':'=:='
				(C, 10)
			in  let <_cor5> =
				call 'erlang':'=:='
				    (C, 9)
			    in  let <_cor6> =
				    call 'erlang':'or'
					(_cor4, _cor5)
				in  let <_cor7> =
					call 'erlang':'or'
					    (_cor3, _cor6)
				    in  call 'erlang':'or'
					    (_cor2, _cor7) ->
	      %% Line 2418
	      case apply 'whitespace'/3
		       (Bytes, State, []) of
		<{_X_WS,Rest,State1}> when 'true' ->
		    %% Line 2419
		    apply 'parse_entity_decl_1'/2
			(Rest, State1)
		( <_cor8> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor8})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2420
	  <Bytes,State> when 'true' ->
	      %% Line 2421
	      apply 'unicode_incomplete_check'/2
		  ([Bytes|[State|[( 'parse_entity_decl'/2
				    -| [{'id',{0,0,'-parse_entity_decl/2-fun-1-'}}] )|[]]]], %% Line 2422
											     [119|[104|[105|[116|[101|[115|[112|[97|[99|[101|[32|[101|[120|[112|[101|[99|[116|[101|[100]]]]]]]]]]]]]]]]]]])
	end
'parse_entity_decl_1'/2 =
    %% Line 2432
    fun (_cor1,_cor0) ->
	case <( _cor1
		-| ['reuse_for_context'] ),_cor0> of
	  <#{}#,State> when 'true' ->
	      %% Line 2433
	      apply 'cf'/3
		  (#{}#, State, ( 'parse_entity_decl_1'/2
				  -| [{'id',{0,0,'-parse_entity_decl_1/2-fun-0-'}}] ))
	  %% Line 2434
	  <#{#<37>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State> when 'true' ->
	      %% Line 2435
	      case apply 'is_next_char_whitespace'/2
		       (Rest, State) of
		%% Line 2436
		<'true'> when 'true' ->
		    %% Line 2437
		    case apply 'whitespace'/3
			     (Rest, State, []) of
		      <{_X_WS,Rest1,State1}> when 'true' ->
			  %% Line 2438
			  apply 'parse_pe_name'/2
			      (Rest1, State1)
		      ( <_cor2> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor2})
			-| ['compiler_generated'] )
		    end
		%% Line 2439
		<'false'> when 'true' ->
		    %% Line 2440
		    call 'erlang':'throw'
			({'fatal_error',{State,[119|[104|[105|[116|[101|[115|[112|[97|[99|[101|[32|[101|[120|[112|[101|[99|[116|[101|[100]]]]]]]]]]]]]]]]]]]}})
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2442
	  <#{#<C>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State> when 'true' ->
	      %% Line 2443
	      case apply 'is_name_start'/1
		       (C) of
		%% Line 2444
		<'true'> when 'true' ->
		    %% Line 2445
		    case apply 'parse_name'/3
			     (Rest, State, [C|[]]) of
		      <{Name,Rest1,State1}> when 'true' ->
			  %% Line 2446
			  case apply 'is_next_char_whitespace'/2
				   (Rest1, State1) of
			    %% Line 2447
			    <'true'> when 'true' ->
				%% Line 2448
				case apply 'whitespace'/3
					 (Rest1, State1, []) of
				  <{_X_WS,Rest2,State2}> when 'true' ->
				      %% Line 2449
				      apply 'parse_entity_def'/3
					  (Rest2, State2, Name)
				  ( <_cor5> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor5})
				    -| ['compiler_generated'] )
				end
			    %% Line 2450
			    <'false'> when 'true' ->
				%% Line 2451
				call 'erlang':'throw'
				    ({'fatal_error',{State1,[119|[104|[105|[116|[101|[115|[112|[97|[99|[101|[32|[101|[120|[112|[101|[99|[116|[101|[100]]]]]]]]]]]]]]]]]]]}})
			    ( <_cor6> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor6})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
		%% Line 2453
		<'false'> when 'true' ->
		    %% Line 2454
		    call 'erlang':'throw'
			({'fatal_error',{State,[110|[97|[109|[101|[32|[111|[114|[32|[37|[32|[101|[120|[112|[101|[99|[116|[101|[100]]]]]]]]]]]]]]]]]]}})
		( <_cor7> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor7})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2456
	  <Bytes,State> when 'true' ->
	      do  primop 'bs_context_to_binary'
		      (Bytes)
		  %% Line 2457
		  apply 'unicode_incomplete_check'/2
		      ([Bytes|[State|[( 'parse_entity_decl_1'/2
					-| [{'id',{0,0,'-parse_entity_decl_1/2-fun-1-'}}] )|[]]]], %% Line 2458
												   'undefined')
	end
'parse_pe_name'/2 =
    %% Line 2463
    fun (_cor1,_cor0) ->
	case <( _cor1
		-| ['reuse_for_context'] ),_cor0> of
	  <#{#<C>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State> when 'true' ->
	      %% Line 2464
	      case apply 'is_name_start'/1
		       (C) of
		%% Line 2465
		<'true'> when 'true' ->
		    %% Line 2466
		    case apply 'parse_name'/3
			     (Rest, State, [C|[]]) of
		      <{Name,Rest1,State1}> when 'true' ->
			  %% Line 2467
			  case apply 'is_next_char_whitespace'/2
				   (Rest1, State1) of
			    %% Line 2468
			    <'true'> when 'true' ->
				%% Line 2469
				case apply 'whitespace'/3
					 (Rest1, State1, []) of
				  <{_X_WS,Rest2,State2}> when 'true' ->
				      %% Line 2470
				      apply 'parse_pe_def'/3
					  (Rest2, State2, Name)
				  ( <_cor3> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor3})
				    -| ['compiler_generated'] )
				end
			    %% Line 2471
			    <'false'> when 'true' ->
				%% Line 2472
				call 'erlang':'throw'
				    ({'fatal_error',{State1,[119|[104|[105|[116|[101|[115|[112|[97|[99|[101|[32|[101|[120|[112|[101|[99|[116|[101|[100]]]]]]]]]]]]]]]]]]]}})
			    ( <_cor4> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor4})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor2> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor2})
			-| ['compiler_generated'] )
		    end
		%% Line 2474
		<'false'> when 'true' ->
		    %% Line 2475
		    call 'erlang':'throw'
			({'fatal_error',{State,[110|[97|[109|[101|[32|[101|[120|[112|[101|[99|[116|[101|[100]]]]]]]]]]]]]}})
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2477
	  <Bytes,State> when 'true' ->
	      do  primop 'bs_context_to_binary'
		      (Bytes)
		  %% Line 2478
		  apply 'unicode_incomplete_check'/2
		      ([Bytes|[State|[( 'parse_pe_name'/2
					-| [{'id',{0,0,'-parse_pe_name/2-fun-0-'}}] )|[]]]], %% Line 2479
											     'undefined')
	end
'parse_entity_def'/3 =
    %% Line 2492
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <#{}#,State,Name> when 'true' ->
	      %% Line 2493
	      apply 'cf'/4
		  (#{}#, State, Name, ( 'parse_entity_def'/3
					-| [{'id',{0,0,'-parse_entity_def/3-fun-0-'}}] ))
	  %% Line 2494
	  <#{#<C>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State,Name>
	      when let <_cor3> =
		    call 'erlang':'=='
			(C, 39)
		in  let <_cor4> =
			call 'erlang':'=='
			    (C, 34)
		    in  call 'erlang':'or'
			    (_cor3, _cor4) ->
	      %% Line 2495
	      case apply 'parse_entity_value'/4
		       (Rest, State, C, []) of
		<{Value,Rest1,State1}> when 'true' ->
		    %% Line 2496
		    ( case State1 of
			( <( {'xmerl_sax_parser_state',_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_rec79,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39}
			     -| ['compiler_generated'] )> when 'true' ->
			      do  apply 'insert_reference'/2
				      ({Name,'internal_general',Value}, _rec79)
				  let <State2> =
				      %% Line 2497
				      apply 'event_callback'/2
					  ({'internalEntityDecl',Name,Value}, State1)
				  in  %% Line 2498
				      case apply 'whitespace'/3
					       (Rest1, State2, []) of
					<{_X_WS,Rest2,State3}> when 'true' ->
					    %% Line 2499
					    apply 'parse_def_end'/2
						(Rest2, State3)
					( <_cor9> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_cor9})
					  -| ['compiler_generated'] )
				      end
			  -| ['compiler_generated'] )
			( <_cor40> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','xmerl_sax_parser_state'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2500
	  <Rest = #{#<C>('undefined','undefined','utf8',['unsigned'|['big']]),
		    #<_cor41>('all',8,'binary',['unsigned'|['big']])}#,State,Name>
	      when let <_cor10> =
		    call 'erlang':'=='
			(C, 83)
		in  let <_cor11> =
			call 'erlang':'=='
			    (C, 80)
		    in  call 'erlang':'or'
			    (_cor10, _cor11) ->
	      %% Line 2501
	      case apply 'parse_external_id'/3
		       (Rest, State, 'false') of
		<{PubId,SysId,Rest1,State1}> when 'true' ->
		    %% Line 2502
		    case apply 'parse_ndata'/2
			     (Rest1, State1) of
		      <{Ndata,Rest2,State2}> when 'true' ->
			  %% Line 2503
			  case Ndata of
			    %% Line 2504
			    <'undefined'> when 'true' ->
				%% Line 2506
				( case State2 of
				    ( <( {'xmerl_sax_parser_state',_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_rec80,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57}
					 -| ['compiler_generated'] )> when 'true' ->
					  do  apply 'insert_reference'/2
						  ({Name,'external_general',{PubId,SysId}}, _rec80)
					      let <State3> =
						  %% Line 2507
						  apply 'event_callback'/2
						      ({'externalEntityDecl',Name,PubId,SysId}, State2)
					      in  %% Line 2508
						  {Rest2,State3}
				      -| ['compiler_generated'] )
				    ( <_cor58> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {'badrecord','xmerl_sax_parser_state'}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
			    %% Line 2509
			    <_cor59> when 'true' ->
				%% Line 2511
				( case State2 of
				    ( <( {'xmerl_sax_parser_state',_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,_cor69,_rec81,_cor70,_cor71,_cor72,_cor73,_cor74,_cor75}
					 -| ['compiler_generated'] )> when 'true' ->
					  do  apply 'insert_reference'/2
						  ({Name,'unparsed',{PubId,SysId,Ndata}}, _rec81)
					      let <State3> =
						  %% Line 2512
						  apply 'event_callback'/2
						      ({'unparsedEntityDecl',Name,PubId,SysId,Ndata}, State2)
					      in  %% Line 2513
						  {Rest2,State3}
				      -| ['compiler_generated'] )
				    ( <_cor76> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {'badrecord','xmerl_sax_parser_state'}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
			  end
		      ( <_cor13> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor13})
			-| ['compiler_generated'] )
		    end
		( <_cor12> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor12})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2515
	  <Bytes,State,Name> when 'true' ->
	      %% Line 2516
	      apply 'unicode_incomplete_check'/2
		  ([Bytes|[State|[Name|[( 'parse_entity_def'/3
					  -| [{'id',{0,0,'-parse_entity_def/3-fun-1-'}}] )|[]]]]], %% Line 2517
												   [34|[44|[32|[39|[44|[32|[83|[89|[83|[84|[69|[77|[32|[111|[114|[32|[80|[85|[66|[76|[73|[67|[32|[101|[120|[112|[101|[99|[116|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
	end
'parse_def_end'/2 =
    %% Line 2520
    fun (_cor1,_cor0) ->
	case <( _cor1
		-| ['reuse_for_context'] ),_cor0> of
	  <#{#<62>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State> when 'true' ->
	      %% Line 2521
	      {Rest,State}
	  %% Line 2522
	  <Bytes,State> when 'true' ->
	      do  primop 'bs_context_to_binary'
		      (Bytes)
		  %% Line 2523
		  apply 'unicode_incomplete_check'/2
		      ([Bytes|[State|[( 'parse_def_end'/2
					-| [{'id',{0,0,'-parse_def_end/2-fun-0-'}}] )|[]]]], %% Line 2524
											     [62|[32|[101|[120|[112|[101|[99|[116|[101|[100]]]]]]]]]])
	end
'parse_ndata'/2 =
    %% Line 2536
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <#{}#,State> when 'true' ->
	      %% Line 2537
	      apply 'cf'/3
		  (#{}#, State, ( 'parse_ndata'/2
				  -| [{'id',{0,0,'-parse_ndata/2-fun-0-'}}] ))
	  %% Line 2538
	  <#{#<62>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State> when 'true' ->
	      %% Line 2539
	      {'undefined',Rest,State}
	  %% Line 2540
	  <Bytes = #{#<C>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<_cor11>('all',8,'binary',['unsigned'|['big']])}#,State>
	      when let <_cor2> =
		    call 'erlang':'=:='
			(C, 32)
		in  let <_cor3> =
			call 'erlang':'=:='
			    (C, 13)
		    in  let <_cor4> =
			    call 'erlang':'=:='
				(C, 10)
			in  let <_cor5> =
				call 'erlang':'=:='
				    (C, 9)
			    in  let <_cor6> =
				    call 'erlang':'or'
					(_cor4, _cor5)
				in  let <_cor7> =
					call 'erlang':'or'
					    (_cor3, _cor6)
				    in  call 'erlang':'or'
					    (_cor2, _cor7) ->
	      %% Line 2541
	      case apply 'whitespace'/3
		       (Bytes, State, []) of
		<{_X_WS,Rest1,State1}> when 'true' ->
		    %% Line 2542
		    apply 'parse_ndata_decl'/2
			(Rest1, State1)
		( <_cor8> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor8})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2543
	  <Bytes,State> when 'true' ->
	      %% Line 2544
	      apply 'unicode_incomplete_check'/2
		  ([Bytes|[State|[( 'parse_ndata'/2
				    -| [{'id',{0,0,'-parse_ndata/2-fun-1-'}}] )|[]]]], %% Line 2545
										       [83|[112|[97|[99|[101|[32|[98|[101|[102|[111|[114|[101|[32|[78|[68|[65|[84|[65|[32|[111|[114|[32|[62|[32|[101|[120|[112|[101|[99|[116|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
	end
'parse_entity_value'/4 =
    %% Line 2557
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <( _cor3
		-| ['reuse_for_context'] ),_cor2,_cor1,_cor0> of
	  <#{}#,State,'undefined',Acc> when 'true' ->
	      %% Line 2558
	      {Acc,[],State}
	  %% Line 2559
	  <#{}#,State,Stop,Acc> when 'true' ->
	      %% Line 2560
	      apply 'cf'/5
		  (#{}#, State, Stop, Acc, ( 'parse_entity_value'/4
					     -| [{'id',{0,0,'-parse_entity_value/4-fun-0-'}}] ))
	  %% Line 2561
	  <#{#<13>('undefined','undefined','utf8',['unsigned'|['big']])}#,State,Stop,Acc> when 'true' ->
	      %% Line 2562
	      apply 'cf'/5
		  (#{#<13>(8,1,'integer',['unsigned'|['big']])}#, State, Stop, Acc, ( 'parse_entity_value'/4
										      -| [{'id',{0,0,'-parse_entity_value/4-fun-1-'}}] ))
	  %% Line 2563
	  <#{#<10>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State = {'xmerl_sax_parser_state',_cor75,_cor76,_cor77,_cor78,_cor79,N,_cor80,_cor81,_cor82,_cor83,_cor84,_cor85,_cor86,_cor87,_cor88,_cor89,_cor90},Stop,Acc> when 'true' ->
	      let <_rec82> =
		  %% Line 2565
		  call 'erlang':'+'
		      (N, 1)
	      in  let <_cor7> =
		      %% Line 2565
		      call 'erlang':'setelement'
			  (7, State, _rec82)
		  in  %% Line 2564
		      apply 'parse_entity_value'/4
			  (Rest, _cor7, %% Line 2565
					Stop, %% Line 2565
					      [32|Acc])
	  %% Line 2566
	  <#{#<13>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<10>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State = {'xmerl_sax_parser_state',_cor109,_cor110,_cor111,_cor112,_cor113,N,_cor114,_cor115,_cor116,_cor117,_cor118,_cor119,_cor120,_cor121,_cor122,_cor123,_cor124},Stop,Acc> when 'true' ->
	      let <_rec84> =
		  %% Line 2568
		  call 'erlang':'+'
		      (N, 1)
	      in  let <_cor11> =
		      %% Line 2568
		      call 'erlang':'setelement'
			  (7, State, _rec84)
		  in  %% Line 2567
		      apply 'parse_entity_value'/4
			  (Rest, _cor11, %% Line 2568
					 Stop, %% Line 2568
					       [32|Acc])
	  %% Line 2569
	  <#{#<13>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State = {'xmerl_sax_parser_state',_cor143,_cor144,_cor145,_cor146,_cor147,N,_cor148,_cor149,_cor150,_cor151,_cor152,_cor153,_cor154,_cor155,_cor156,_cor157,_cor158},Stop,Acc> when 'true' ->
	      let <_rec86> =
		  %% Line 2571
		  call 'erlang':'+'
		      (N, 1)
	      in  let <_cor15> =
		      %% Line 2571
		      call 'erlang':'setelement'
			  (7, State, _rec86)
		  in  %% Line 2570
		      apply 'parse_entity_value'/4
			  (Rest, _cor15, %% Line 2571
					 Stop, %% Line 2571
					       [32|Acc])
	  %% Line 2572
	  <#{#<9>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State = {'xmerl_sax_parser_state',_cor177,_cor178,_cor179,_cor180,_cor181,N,_cor182,_cor183,_cor184,_cor185,_cor186,_cor187,_cor188,_cor189,_cor190,_cor191,_cor192},Stop,Acc> when 'true' ->
	      let <_rec88> =
		  %% Line 2574
		  call 'erlang':'+'
		      (N, 1)
	      in  let <_cor19> =
		      %% Line 2574
		      call 'erlang':'setelement'
			  (7, State, _rec88)
		  in  %% Line 2573
		      apply 'parse_entity_value'/4
			  (Rest, _cor19, %% Line 2574
					 Stop, %% Line 2574
					       [32|Acc])
	  %% Line 2575
	  <#{#<38>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State,Stop,Acc> when 'true' ->
	      %% Line 2576
	      case apply 'parse_reference'/3
		       (Rest, State, 'false') of
		<{Ref,Rest1,State1}> when 'true' ->
		    %% Line 2577
		    case Ref of
		      %% Line 2578
		      <{'character',_cor211,CharValue}> when 'true' ->
			  %% Line 2579
			  apply 'parse_entity_value'/4
			      (Rest1, State1, Stop, [CharValue|Acc])
		      %% Line 2580
		      <{'internal_general',_cor212,Name,_cor213}> when 'true' ->
			  let <_cor22> =
			      %% Line 2581
			      call 'lists':'reverse'
				  (Name)
			  in  let <_cor21> =
				  %% Line 2581
				  [38|Acc]
			      in  let <_cor23> =
				      %% Line 2581
				      call 'erlang':'++'
					  (_cor22, _cor21)
				  in  let <_cor24> =
					  %% Line 2581
					  [59|_cor23]
				      in  %% Line 2581
					  apply 'parse_entity_value'/4
					      (Rest1, State1, Stop, _cor24)
		      %% Line 2582
		      <{'external_general',Name,_cor214}> when 'true' ->
			  let <_cor26> =
			      %% Line 2583
			      call 'lists':'reverse'
				  (Name)
			  in  let <_cor25> =
				  %% Line 2583
				  [38|Acc]
			      in  let <_cor27> =
				      %% Line 2583
				      call 'erlang':'++'
					  (_cor26, _cor25)
				  in  let <_cor28> =
					  %% Line 2583
					  [59|_cor27]
				      in  %% Line 2583
					  apply 'parse_entity_value'/4
					      (Rest1, State1, Stop, _cor28)
		      %% Line 2584
		      <{'not_found',Name}> when 'true' ->
			  let <_cor30> =
			      %% Line 2585
			      call 'lists':'reverse'
				  (Name)
			  in  let <_cor29> =
				  %% Line 2585
				  [38|Acc]
			      in  let <_cor31> =
				      %% Line 2585
				      call 'erlang':'++'
					  (_cor30, _cor29)
				  in  let <_cor32> =
					  %% Line 2585
					  [59|_cor31]
				      in  %% Line 2585
					  apply 'parse_entity_value'/4
					      (Rest1, State1, Stop, _cor32)
		      %% Line 2586
		      <{'unparsed',Name,_cor215}> when 'true' ->
			  let <_cor33> =
			      %% Line 2587
			      call 'erlang':'++'
				  ([85|[110|[112|[97|[114|[115|[101|[100|[32|[101|[110|[116|[105|[116|[121|[32|[114|[101|[102|[101|[114|[101|[110|[99|[101|[32|[105|[110|[32|[101|[110|[116|[105|[116|[121|[32|[118|[97|[108|[117|[101|[58|[32]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], Name)
			  in  %% Line 2587
			      call 'erlang':'throw'
				  ({'fatal_error',{State1,_cor33}})
		      ( <_cor34> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor34})
			-| ['compiler_generated'] )
		    end
		( <_cor20> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor20})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2589
	  <#{#<37>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State = {'xmerl_sax_parser_state',_cor216,_cor217,_cor218,_cor219,_cor220,_cor221,_cor222,_cor223,_cor224,_cor225,_cor226,_cor227,Type,_cor228,_cor229,_cor230,_cor231},Stop,Acc> when 'true' ->
	      %% Line 2590
	      case apply 'parse_pe_reference'/2
		       (Rest, State) of
		<{Ref,Rest1,State1}> when 'true' ->
		    %% Line 2591
		    case Type of
		      %% Line 2592
		      <'normal'> when 'true' ->
			  %% Line 2593
			  case Ref of
			    <{_cor232,Name,_cor233}> when 'true' ->
				let <_cor37> =
				    %% Line 2595
				    call 'erlang':'++'
					([65|[32|[112|[97|[114|[97|[109|[101|[116|[101|[114|[32|[114|[101|[102|[101|[114|[101|[110|[99|[101|[32|[109|[97|[121|[32|[110|[111|[116|[32|[111|[99|[99|[117|[114|[32|[110|[111|[116|[32|[119|[105|[116|[104|[105|[110|[32|[109|[97|[114|[107|[117|[112|[32|[100|[101|[99|[108|[97|[114|[97|[116|[105|[111|[110|[115|[32|[105|[110|[32|[116|[104|[101|[32|[105|[110|[116|[101|[114|[110|[97|[108|[32|[68|[84|[68|[32|[115|[117|[98|[115|[101|[116|[58|[32]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], Name)
				in  %% Line 2594
				    call 'erlang':'throw'
					({'fatal_error',{State1,_cor37}})
			    ( <_cor36> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor36})
			      -| ['compiler_generated'] )
			  end
		      %% Line 2596
		      <_cor234> when 'true' ->
			  %% Line 2597
			  case Ref of
			    %% Line 2598
			    <{'internal_parameter',_cor235,RefValue}> when 'true' ->
				let <_cor38> =
				    %% Line 2599
				    call 'erlang':'++'
					(RefValue, [32])
				in  let <_cor39> =
					%% Line 2599
					[32|_cor38]
				    in  let <IValue> =
					    %% Line 2599
					    call 'unicode':'characters_to_binary'
						(_cor39, 'unicode', 'utf8')
					in  let <_cor41> =
						%% Line 2600
						#{#<IValue>('all',8,'binary',['unsigned'|['big']]),
						  #<Rest1>('all',8,'binary',['unsigned'|['big']])}#
					    in  %% Line 2600
						apply 'parse_entity_value'/4
						    (_cor41, State1, Stop, Acc)
			    %% Line 2601
			    <{'external_parameter',_cor236,{_X_PubId,_X_SysId}}> when 'true' ->
				%% Line 2602
				call 'erlang':'throw'
				    ({'fatal_error',{State1,[80|[97|[114|[97|[109|[101|[116|[101|[114|[32|[114|[101|[102|[101|[114|[101|[110|[99|[101|[115|[32|[105|[110|[32|[101|[110|[116|[105|[116|[121|[32|[118|[97|[108|[117|[101|[32|[110|[111|[116|[32|[115|[117|[112|[112|[111|[114|[116|[101|[100|[32|[121|[101|[116|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}})
			    %% Line 2603
			    <{'not_found',Name}> when 'true' ->
				%% Line 2604
				case _cor230 of
				  %% Line 2605
				  <'false'> when 'true' ->
				      let <_cor44> =
					  %% Line 2606
					  call 'erlang':'++'
					      ([69|[110|[116|[105|[116|[121|[32|[110|[111|[116|[32|[100|[101|[99|[108|[97|[114|[101|[100|[58|[32]]]]]]]]]]]]]]]]]]]]], Name)
				      in  %% Line 2606
					  call 'erlang':'throw'
					      ({'fatal_error',{State1,_cor44}})
				  %% Line 2607
				  <'true'> when 'true' ->
				      let <_cor46> =
					  %% Line 2608
					  call 'lists':'reverse'
					      (Name)
				      in  let <_cor45> =
					      %% Line 2608
					      [38|Acc]
					  in  let <_cor47> =
						  %% Line 2608
						  call 'erlang':'++'
						      (_cor46, _cor45)
					      in  let <_cor48> =
						      %% Line 2608
						      [59|_cor47]
						  in  %% Line 2608
						      apply 'parse_entity_value'/4
							  (Rest1, State1, Stop, _cor48)
				  ( <_cor49> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor49})
				    -| ['compiler_generated'] )
				end
			    ( <_cor50> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor50})
			      -| ['compiler_generated'] )
			  end
		    end
		( <_cor35> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor35})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2613
	  <#{#<Stop>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State,_cor254,Acc>
	      when call 'erlang':'=:='
		    (_cor254,
		     Stop) ->
	      let <_cor52> =
		  %% Line 2614
		  call 'lists':'reverse'
		      (Acc)
	      in  %% Line 2614
		  {_cor52,Rest,State}
	  %% Line 2615
	  <#{#<C>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State,Stop,Acc> when 'true' ->
	      %% Line 2616
	      case <> of
		%% Line 2617
		<>
		    when let <_cor55> =
			  let <_cor53> =
			      call 'erlang':'=<'
				  (32, C)
			  in  let <_cor54> =
				  call 'erlang':'=<'
				      (C, 55295)
			      in  call 'erlang':'and'
				      (_cor53, _cor54)
		      in  let <_cor56> =
			      call 'erlang':'=:='
				  (C, 13)
			  in  let <_cor57> =
				  call 'erlang':'=:='
				      (C, 10)
			      in  let <_cor58> =
				      call 'erlang':'=:='
					  (C, 9)
				  in  let <_cor61> =
					  let <_cor59> =
					      call 'erlang':'=<'
						  (57344, C)
					  in  let <_cor60> =
						  call 'erlang':'=<'
						      (C, 65533)
					      in  call 'erlang':'and'
						      (_cor59, _cor60)
				      in  let <_cor64> =
					      let <_cor62> =
						  call 'erlang':'=<'
						      (65536, C)
					      in  let <_cor63> =
						      call 'erlang':'=<'
							  (C, 1114111)
						  in  call 'erlang':'and'
							  (_cor62, _cor63)
					  in  let <_cor65> =
						  call 'erlang':'or'
						      (_cor61, _cor64)
					      in  let <_cor66> =
						      call 'erlang':'or'
							  (_cor58, _cor65)
						  in  let <_cor67> =
							  call 'erlang':'or'
							      (_cor57, _cor66)
						      in  let <_cor68> =
							      call 'erlang':'or'
								  (_cor56, _cor67)
							  in  call 'erlang':'or'
								  (_cor55, _cor68) ->
		    %% Line 2618
		    apply 'parse_entity_value'/4
			(Rest, State, Stop, [C|Acc])
		%% Line 2619
		<> when 'true' ->
		    let <_cor69> =
			%% Line 2620
			call 'io_lib':'format'
			    ([66|[97|[100|[32|[99|[104|[97|[114|[97|[99|[116|[101|[114|[32|[105|[110|[32|[101|[110|[116|[105|[116|[121|[32|[118|[97|[108|[117|[101|[58|[32|[126|[112]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [C|[]])
		    in  let <_cor70> =
			    %% Line 2620
			    call 'lists':'flatten'
				(_cor69)
			in  %% Line 2620
			    call 'erlang':'throw'
				({'fatal_error',{State,_cor70}})
	      end
	  %% Line 2622
	  <Bytes,State,Stop,Acc> when 'true' ->
	      do  primop 'bs_context_to_binary'
		      (Bytes)
		  %% Line 2623
		  apply 'unicode_incomplete_check'/2
		      ([Bytes|[State|[Stop|[Acc|[( 'parse_entity_value'/4
						   -| [{'id',{0,0,'-parse_entity_value/4-fun-2-'}}] )|[]]]]]], %% Line 2624
													       'undefined')
	end
'parse_ndata_decl'/2 =
    %% Line 2635
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <#{}#,State> when 'true' ->
	      %% Line 2636
	      apply 'cf'/3
		  (#{}#, State, ( 'parse_ndata_decl'/2
				  -| [{'id',{0,0,'-parse_ndata_decl/2-fun-0-'}}] ))
	  %% Line 2637
	  <#{#<62>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State> when 'true' ->
	      %% Line 2638
	      {'undefined',Rest,State}
	  %% Line 2639
	  <Bytes = #{#<78>('undefined','undefined','utf8',['unsigned'|['big']])}#,State> when 'true' ->
	      %% Line 2640
	      apply 'cf'/3
		  (Bytes, State, ( 'parse_ndata_decl'/2
				   -| [{'id',{0,0,'-parse_ndata_decl/2-fun-1-'}}] ))
	  %% Line 2641
	  <Bytes = #{#<78>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<68>('undefined','undefined','utf8',['unsigned'|['big']])}#,State> when 'true' ->
	      %% Line 2642
	      apply 'cf'/3
		  (Bytes, State, ( 'parse_ndata_decl'/2
				   -| [{'id',{0,0,'-parse_ndata_decl/2-fun-2-'}}] ))
	  %% Line 2643
	  <Bytes = #{#<78>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<68>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<65>('undefined','undefined','utf8',['unsigned'|['big']])}#,State> when 'true' ->
	      %% Line 2644
	      apply 'cf'/3
		  (Bytes, State, ( 'parse_ndata_decl'/2
				   -| [{'id',{0,0,'-parse_ndata_decl/2-fun-3-'}}] ))
	  %% Line 2645
	  <Bytes = #{#<78>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<68>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<65>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<84>('undefined','undefined','utf8',['unsigned'|['big']])}#,State> when 'true' ->
	      %% Line 2646
	      apply 'cf'/3
		  (Bytes, State, ( 'parse_ndata_decl'/2
				   -| [{'id',{0,0,'-parse_ndata_decl/2-fun-4-'}}] ))
	  %% Line 2647
	  <#{#<78>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<68>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<65>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<84>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<65>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State> when 'true' ->
	      %% Line 2648
	      apply 'parse_ndata_decl_1'/2
		  (Rest, State)
	  %% Line 2649
	  <Bytes,State> when 'true' ->
	      %% Line 2650
	      apply 'unicode_incomplete_check'/2
		  ([Bytes|[State|[( 'parse_ndata_decl'/2
				    -| [{'id',{0,0,'-parse_ndata_decl/2-fun-5-'}}] )|[]]]], %% Line 2651
											    [78|[68|[65|[84|[65|[32|[111|[114|[32|[62|[32|[101|[120|[112|[101|[99|[116|[101|[100]]]]]]]]]]]]]]]]]]])
	end
'parse_ndata_decl_1'/2 =
    %% Line 2654
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Bytes = #{#<C>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<_cor11>('all',8,'binary',['unsigned'|['big']])}#,State>
	      when let <_cor2> =
		    call 'erlang':'=:='
			(C, 32)
		in  let <_cor3> =
			call 'erlang':'=:='
			    (C, 13)
		    in  let <_cor4> =
			    call 'erlang':'=:='
				(C, 10)
			in  let <_cor5> =
				call 'erlang':'=:='
				    (C, 9)
			    in  let <_cor6> =
				    call 'erlang':'or'
					(_cor4, _cor5)
				in  let <_cor7> =
					call 'erlang':'or'
					    (_cor3, _cor6)
				    in  call 'erlang':'or'
					    (_cor2, _cor7) ->
	      %% Line 2655
	      case apply 'whitespace'/3
		       (Bytes, State, []) of
		<{_X_WS,Rest,State1}> when 'true' ->
		    %% Line 2656
		    apply 'parse_ndecl_name'/2
			(Rest, State1)
		( <_cor8> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor8})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2657
	  <Bytes,State> when 'true' ->
	      %% Line 2658
	      apply 'unicode_incomplete_check'/2
		  ([Bytes|[State|[( 'parse_ndata_decl'/2
				    -| [{'id',{0,0,'-parse_ndata_decl_1/2-fun-0-'}}] )|[]]]], %% Line 2659
											      [119|[104|[105|[116|[101|[115|[112|[97|[99|[101|[32|[101|[120|[112|[101|[99|[116|[101|[100]]]]]]]]]]]]]]]]]]])
	end
'parse_ndecl_name'/2 =
    %% Line 2662
    fun (_cor1,_cor0) ->
	case <( _cor1
		-| ['reuse_for_context'] ),_cor0> of
	  <#{#<C>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State> when 'true' ->
	      %% Line 2663
	      case apply 'is_name_start'/1
		       (C) of
		%% Line 2664
		<'true'> when 'true' ->
		    %% Line 2665
		    case apply 'parse_name'/3
			     (Rest, State, [C|[]]) of
		      <{Name,Rest1,State1}> when 'true' ->
			  %% Line 2666
			  case apply 'whitespace'/3
				   (Rest1, State1, []) of
			    <{_X_WS,Rest2,State2}> when 'true' ->
				%% Line 2667
				case apply 'parse_def_end'/2
					 (Rest2, State2) of
				  <{Rest3,State3}> when 'true' ->
				      %% Line 2668
				      {Name,Rest3,State3}
				  ( <_cor4> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor4})
				    -| ['compiler_generated'] )
				end
			    ( <_cor3> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor3})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor2> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor2})
			-| ['compiler_generated'] )
		    end
		%% Line 2669
		<'false'> when 'true' ->
		    %% Line 2670
		    call 'erlang':'throw'
			({'fatal_error',{State,[110|[97|[109|[101|[32|[101|[120|[112|[101|[99|[116|[101|[100]]]]]]]]]]]]]}})
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2672
	  <Bytes,State> when 'true' ->
	      do  primop 'bs_context_to_binary'
		      (Bytes)
		  %% Line 2673
		  apply 'unicode_incomplete_check'/2
		      ([Bytes|[State|[( 'parse_ndecl_name'/2
					-| [{'id',{0,0,'-parse_ndecl_name/2-fun-0-'}}] )|[]]]], %% Line 2674
												'undefined')
	end
'parse_pe_def'/3 =
    %% Line 2685
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <#{}#,State,Name> when 'true' ->
	      %% Line 2686
	      apply 'cf'/4
		  (#{}#, State, Name, ( 'parse_pe_def'/3
					-| [{'id',{0,0,'-parse_pe_def/3-fun-0-'}}] ))
	  %% Line 2687
	  <#{#<C>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State,Name>
	      when let <_cor3> =
		    call 'erlang':'=='
			(C, 39)
		in  let <_cor4> =
			call 'erlang':'=='
			    (C, 34)
		    in  call 'erlang':'or'
			    (_cor3, _cor4) ->
	      %% Line 2688
	      case apply 'parse_entity_value'/4
		       (Rest, State, C, []) of
		<{Value,Rest1,State1}> when 'true' ->
		    let <Name1> =
			%% Line 2689
			[37|Name]
		    in  %% Line 2691
			( case State1 of
			    ( <( {'xmerl_sax_parser_state',_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_rec91,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37}
				 -| ['compiler_generated'] )> when 'true' ->
				  do  apply 'insert_reference'/2
					  ({Name1,'internal_parameter',Value}, _rec91)
				      let <State2> =
					  %% Line 2692
					  apply 'event_callback'/2
					      ({'internalEntityDecl',Name1,Value}, State1)
				      in  %% Line 2693
					  case apply 'whitespace'/3
						   (Rest1, State2, []) of
					    <{_X_WS,Rest2,State3}> when 'true' ->
						%% Line 2694
						apply 'parse_def_end'/2
						    (Rest2, State3)
					    ( <_cor10> when 'true' ->
						  primop 'match_fail'
						      ({'badmatch',_cor10})
					      -| ['compiler_generated'] )
					  end
			      -| ['compiler_generated'] )
			    ( <_cor38> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','xmerl_sax_parser_state'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2695
	  <Bytes = #{#<C>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<_cor39>('all',8,'binary',['unsigned'|['big']])}#,State,Name>
	      when let <_cor11> =
		    call 'erlang':'=='
			(C, 83)
		in  let <_cor12> =
			call 'erlang':'=='
			    (C, 80)
		    in  call 'erlang':'or'
			    (_cor11, _cor12) ->
	      %% Line 2696
	      case apply 'parse_external_id'/3
		       (Bytes, State, 'false') of
		<{PubId,SysId,Rest1,State1}> when 'true' ->
		    let <Name1> =
			%% Line 2697
			[37|Name]
		    in  %% Line 2699
			( case State1 of
			    ( <( {'xmerl_sax_parser_state',_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_rec92,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55}
				 -| ['compiler_generated'] )> when 'true' ->
				  do  apply 'insert_reference'/2
					  ({Name1,'external_parameter',{PubId,SysId}}, _rec92)
				      let <State2> =
					  %% Line 2700
					  apply 'event_callback'/2
					      ({'externalEntityDecl',Name1,PubId,SysId}, State1)
				      in  %% Line 2701
					  case apply 'whitespace'/3
						   (Rest1, State2, []) of
					    <{_X_WS,Rest2,State3}> when 'true' ->
						%% Line 2702
						apply 'parse_def_end'/2
						    (Rest2, State3)
					    ( <_cor18> when 'true' ->
						  primop 'match_fail'
						      ({'badmatch',_cor18})
					      -| ['compiler_generated'] )
					  end
			      -| ['compiler_generated'] )
			    ( <_cor56> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','xmerl_sax_parser_state'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		( <_cor13> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor13})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2703
	  <Bytes,State,Name> when 'true' ->
	      %% Line 2704
	      apply 'unicode_incomplete_check'/2
		  ([Bytes|[State|[Name|[( 'parse_pe_def'/3
					  -| [{'id',{0,0,'-parse_pe_def/3-fun-1-'}}] )|[]]]]], %% Line 2705
											       [34|[44|[32|[39|[44|[32|[83|[89|[83|[84|[69|[77|[32|[111|[114|[32|[80|[85|[66|[76|[73|[67|[32|[101|[120|[112|[101|[99|[116|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
	end
'parse_notation_decl'/2 =
    %% Line 2716
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <#{}#,State> when 'true' ->
	      %% Line 2717
	      apply 'cf'/3
		  (#{}#, State, ( 'parse_notation_decl'/2
				  -| [{'id',{0,0,'-parse_notation_decl/2-fun-0-'}}] ))
	  %% Line 2718
	  <Bytes = #{#<C>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<_cor11>('all',8,'binary',['unsigned'|['big']])}#,State>
	      when let <_cor2> =
		    call 'erlang':'=:='
			(C, 32)
		in  let <_cor3> =
			call 'erlang':'=:='
			    (C, 13)
		    in  let <_cor4> =
			    call 'erlang':'=:='
				(C, 10)
			in  let <_cor5> =
				call 'erlang':'=:='
				    (C, 9)
			    in  let <_cor6> =
				    call 'erlang':'or'
					(_cor4, _cor5)
				in  let <_cor7> =
					call 'erlang':'or'
					    (_cor3, _cor6)
				    in  call 'erlang':'or'
					    (_cor2, _cor7) ->
	      %% Line 2719
	      case apply 'whitespace'/3
		       (Bytes, State, []) of
		<{_X_WS,Rest,State1}> when 'true' ->
		    %% Line 2720
		    apply 'parse_notation_decl_1'/2
			(Rest, State1)
		( <_cor8> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor8})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2721
	  <Bytes,State> when 'true' ->
	      %% Line 2722
	      apply 'unicode_incomplete_check'/2
		  ([Bytes|[State|[( 'parse_notation_decl'/2
				    -| [{'id',{0,0,'-parse_notation_decl/2-fun-1-'}}] )|[]]]], %% Line 2723
											       [119|[104|[105|[116|[101|[115|[112|[97|[99|[101|[32|[101|[120|[112|[101|[99|[116|[101|[100]]]]]]]]]]]]]]]]]]])
	end
'parse_notation_decl_1'/2 =
    %% Line 2726
    fun (_cor1,_cor0) ->
	case <( _cor1
		-| ['reuse_for_context'] ),_cor0> of
	  <#{#<C>('undefined','undefined','utf8',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,State> when 'true' ->
	      %% Line 2727
	      case apply 'is_name_start'/1
		       (C) of
		%% Line 2728
		<'true'> when 'true' ->
		    %% Line 2729
		    case apply 'parse_name'/3
			     (Rest, State, [C|[]]) of
		      <{Name,Rest1,State1}> when 'true' ->
			  %% Line 2730
			  case apply 'parse_notation_id'/2
				   (Rest1, State1) of
			    <{PubId,SysId,Rest2,State2}> when 'true' ->
				let <State3> =
				    %% Line 2731
				    apply 'event_callback'/2
					({'notationDecl',Name,PubId,SysId}, State2)
				in  %% Line 2732
				    {Rest2,State3}
			    ( <_cor3> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor3})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor2> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor2})
			-| ['compiler_generated'] )
		    end
		%% Line 2733
		<'false'> when 'true' ->
		    %% Line 2734
		    call 'erlang':'throw'
			({'fatal_error',{State,[110|[97|[109|[101|[32|[101|[120|[112|[101|[99|[116|[101|[100]]]]]]]]]]]]]}})
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2736
	  <Bytes,State> when 'true' ->
	      do  primop 'bs_context_to_binary'
		      (Bytes)
		  %% Line 2737
		  apply 'unicode_incomplete_check'/2
		      ([Bytes|[State|[( 'parse_notation_decl_1'/2
					-| [{'id',{0,0,'-parse_notation_decl_1/2-fun-0-'}}] )|[]]]], %% Line 2738
												     'undefined')
	end
'parse_notation_id'/2 =
    %% Line 2753
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <#{}#,State> when 'true' ->
	      %% Line 2754
	      apply 'cf'/3
		  (#{}#, State, ( 'parse_notation_id'/2
				  -| [{'id',{0,0,'-parse_notation_id/2-fun-0-'}}] ))
	  %% Line 2757
	  <Bytes = #{#<C>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<_cor11>('all',8,'binary',['unsigned'|['big']])}#,State>
	      when let <_cor2> =
		    call 'erlang':'=:='
			(C, 32)
		in  let <_cor3> =
			call 'erlang':'=:='
			    (C, 13)
		    in  let <_cor4> =
			    call 'erlang':'=:='
				(C, 10)
			in  let <_cor5> =
				call 'erlang':'=:='
				    (C, 9)
			    in  let <_cor6> =
				    call 'erlang':'or'
					(_cor4, _cor5)
				in  let <_cor7> =
					call 'erlang':'or'
					    (_cor3, _cor6)
				    in  call 'erlang':'or'
					    (_cor2, _cor7) ->
	      %% Line 2758
	      case apply 'whitespace'/3
		       (Bytes, State, []) of
		<{_X_WS,Rest,State1}> when 'true' ->
		    %% Line 2759
		    apply 'parse_notation_id_1'/2
			(Rest, State1)
		( <_cor8> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor8})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2760
	  <Bytes,State> when 'true' ->
	      %% Line 2761
	      apply 'unicode_incomplete_check'/2
		  ([Bytes|[State|[( 'parse_notation_id'/2
				    -| [{'id',{0,0,'-parse_notation_id/2-fun-1-'}}] )|[]]]], %% Line 2762
											     [119|[104|[105|[116|[101|[115|[112|[97|[99|[101|[32|[101|[120|[112|[101|[99|[116|[101|[100]]]]]]]]]]]]]]]]]]])
	end
'parse_notation_id_1'/2 =
    %% Line 2773
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <#{}#,State> when 'true' ->
	      %% Line 2774
	      apply 'cf'/3
		  (#{}#, State, ( 'parse_notation_id_1'/2
				  -| [{'id',{0,0,'-parse_notation_id_1/2-fun-0-'}}] ))
	  %% Line 2775
	  <Bytes = #{#<C>('undefined','undefined','utf8',['unsigned'|['big']]),
		     #<_cor9>('all',8,'binary',['unsigned'|['big']])}#,State>
	      when let <_cor2> =
		    call 'erlang':'=='
			(C, 83)
		in  let <_cor3> =
			call 'erlang':'=='
			    (C, 80)
		    in  call 'erlang':'or'
			    (_cor2, _cor3) ->
	      %% Line 2776
	      case apply 'parse_external_id'/3
		       (Bytes, State, 'true') of
		<{PubId,SysId,Rest1,State1}> when 'true' ->
		    %% Line 2777
		    case apply 'whitespace'/3
			     (Rest1, State1, []) of
		      <{_X_WS,Rest2,State2}> when 'true' ->
			  %% Line 2778
			  case apply 'parse_def_end'/2
				   (Rest2, State2) of
			    <{Rest3,State3}> when 'true' ->
				%% Line 2779
				{PubId,SysId,Rest3,State3}
			    ( <_cor6> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor6})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor5> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor5})
			-| ['compiler_generated'] )
		    end
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2782
	  <Bytes,State> when 'true' ->
	      %% Line 2783
	      apply 'unicode_incomplete_check'/2
		  ([Bytes|[State|[( 'parse_notation_id_1'/2
				    -| [{'id',{0,0,'-parse_notation_id_1/2-fun-1-'}}] )|[]]]], %% Line 2784
											       [101|[120|[116|[101|[114|[110|[97|[108|[32|[105|[100|[32|[111|[114|[32|[112|[117|[98|[108|[105|[99|[32|[105|[100|[32|[101|[120|[112|[101|[99|[116|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
	end
'is_name_start'/1 =
    %% Line 2816
    fun (_cor0) ->
	case _cor0 of
	  <95> when 'true' ->
	      %% Line 2817
	      'true'
	  %% Line 2818
	  <58> when 'true' ->
	      %% Line 2819
	      'true'
	  %% Line 2820
	  <C> when 'true' ->
	      %% Line 2821
	      apply 'is_letter'/1
		  (C)
	end
'is_name_char'/1 =
    %% Line 2832
    fun (_cor0) ->
	%% Line 2833
	try
	    let <_cor1> =
		call 'erlang':'element'
		    (_cor0, {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,0,2,2,2,2,2,2,2,2,2,2,3,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,3,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1})
	    in  call 'erlang':'>'
		    (_cor1, 0)
	of <_cor2> ->
	    _cor2
	catch <_cor5,_cor4,_cor3> ->
	    %% Line 2835
	    case apply 'is_letter'/1
		     (_cor0) of
	      %% Line 2836
	      <'true'> when 'true' ->
		  %% Line 2837
		  'true'
	      %% Line 2838
	      <'false'> when 'true' ->
		  %% Line 2839
		  case apply 'is_digit'/1
			   (_cor0) of
		    %% Line 2840
		    <'true'> when 'true' ->
			'true'
		    %% Line 2841
		    <'false'> when 'true' ->
			%% Line 2842
			case apply 'is_combining_char'/1
				 (_cor0) of
			  %% Line 2843
			  <'true'> when 'true' ->
			      'true'
			  %% Line 2844
			  <'false'> when 'true' ->
			      %% Line 2845
			      apply 'is_extender'/1
				  (_cor0)
			  ( <_cor6> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor6})
			    -| ['compiler_generated'] )
			end
		    ( <_cor7> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor7})
		      -| ['compiler_generated'] )
		  end
	      ( <_cor8> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor8})
		-| ['compiler_generated'] )
	    end
'is_pubid_char'/1 =
    %% Line 2860
    fun (_cor0) ->
	case _cor0 of
	  <32> when 'true' ->
	      %% Line 2861
	      'true'
	  %% Line 2862
	  <13> when 'true' ->
	      %% Line 2863
	      'true'
	  %% Line 2864
	  <10> when 'true' ->
	      %% Line 2865
	      'true'
	  %% Line 2866
	  <33> when 'true' ->
	      %% Line 2867
	      'true'
	  %% Line 2868
	  <58> when 'true' ->
	      %% Line 2869
	      'true'
	  %% Line 2870
	  <59> when 'true' ->
	      %% Line 2871
	      'true'
	  %% Line 2872
	  <61> when 'true' ->
	      %% Line 2873
	      'true'
	  %% Line 2874
	  <64> when 'true' ->
	      %% Line 2875
	      'true'
	  %% Line 2876
	  <95> when 'true' ->
	      %% Line 2877
	      'true'
	  %% Line 2878
	  <C>
	      when let <_cor1> =
		    call 'erlang':'=<'
			(35, _cor0)
		in  let <_cor2> =
			call 'erlang':'=<'
			    (_cor0, 37)
		    in  call 'erlang':'and'
			    (_cor1, _cor2) ->
	      %% Line 2879
	      'true'
	  %% Line 2880
	  <C>
	      when let <_cor3> =
		    call 'erlang':'=<'
			(39, _cor0)
		in  let <_cor4> =
			call 'erlang':'=<'
			    (_cor0, 47)
		    in  call 'erlang':'and'
			    (_cor3, _cor4) ->
	      %% Line 2881
	      'true'
	  %% Line 2882
	  <C> when 'true' ->
	      %% Line 2883
	      case apply 'is_letter'/1
		       (C) of
		%% Line 2884
		<'true'> when 'true' ->
		    %% Line 2885
		    'true'
		%% Line 2886
		<'false'> when 'true' ->
		    %% Line 2887
		    apply 'is_digit'/1
			(C)
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor5})
		  -| ['compiler_generated'] )
	      end
	end
'is_letter'/1 =
    %% Line 2898
    fun (_cor0) ->
	%% Line 2899
	try
	    let <_cor1> =
		call 'erlang':'element'
		    (_cor0, {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,0,2,2,2,2,2,2,2,2,2,2,3,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,3,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1})
	    in  call 'erlang':'=:='
		    (_cor1, 1)
	of <_cor2> ->
	    _cor2
	catch <_cor5,_cor4,_cor3> ->
	    %% Line 2901
	    case apply 'is_base_char'/1
		     (_cor0) of
	      %% Line 2902
	      <'false'> when 'true' ->
		  %% Line 2903
		  apply 'is_ideographic'/1
		      (_cor0)
	      %% Line 2904
	      <'true'> when 'true' ->
		  %% Line 2905
		  'true'
	      ( <_cor6> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor6})
		-| ['compiler_generated'] )
	    end
'is_base_char'/1 =
    %% Line 2917
    fun (_cor0) ->
	case _cor0 of
	  <C>
	      when let <_cor1> =
		    call 'erlang':'>='
			(_cor0, 65)
		in  let <_cor2> =
			call 'erlang':'=<'
			    (_cor0, 90)
		    in  call 'erlang':'and'
			    (_cor1, _cor2) ->
	      'true'
	  %% Line 2918
	  <C>
	      when let <_cor3> =
		    call 'erlang':'>='
			(_cor0, 97)
		in  let <_cor4> =
			call 'erlang':'=<'
			    (_cor0, 122)
		    in  call 'erlang':'and'
			    (_cor3, _cor4) ->
	      'true'
	  %% Line 2919
	  <C>
	      when let <_cor5> =
		    call 'erlang':'>='
			(_cor0, 192)
		in  let <_cor6> =
			call 'erlang':'=<'
			    (_cor0, 214)
		    in  call 'erlang':'and'
			    (_cor5, _cor6) ->
	      'true'
	  %% Line 2920
	  <C>
	      when let <_cor7> =
		    call 'erlang':'>='
			(_cor0, 216)
		in  let <_cor8> =
			call 'erlang':'=<'
			    (_cor0, 246)
		    in  call 'erlang':'and'
			    (_cor7, _cor8) ->
	      'true'
	  %% Line 2921
	  <C>
	      when let <_cor9> =
		    call 'erlang':'>='
			(_cor0, 248)
		in  let <_cor10> =
			call 'erlang':'=<'
			    (_cor0, 255)
		    in  call 'erlang':'and'
			    (_cor9, _cor10) ->
	      'true'
	  %% Line 2922
	  <C>
	      when let <_cor11> =
		    call 'erlang':'>='
			(_cor0, 256)
		in  let <_cor12> =
			call 'erlang':'=<'
			    (_cor0, 305)
		    in  call 'erlang':'and'
			    (_cor11, _cor12) ->
	      'true'
	  %% Line 2923
	  <C>
	      when let <_cor13> =
		    call 'erlang':'>='
			(_cor0, 308)
		in  let <_cor14> =
			call 'erlang':'=<'
			    (_cor0, 318)
		    in  call 'erlang':'and'
			    (_cor13, _cor14) ->
	      'true'
	  %% Line 2924
	  <C>
	      when let <_cor15> =
		    call 'erlang':'>='
			(_cor0, 321)
		in  let <_cor16> =
			call 'erlang':'=<'
			    (_cor0, 328)
		    in  call 'erlang':'and'
			    (_cor15, _cor16) ->
	      'true'
	  %% Line 2925
	  <C>
	      when let <_cor17> =
		    call 'erlang':'>='
			(_cor0, 330)
		in  let <_cor18> =
			call 'erlang':'=<'
			    (_cor0, 382)
		    in  call 'erlang':'and'
			    (_cor17, _cor18) ->
	      'true'
	  %% Line 2926
	  <C>
	      when let <_cor19> =
		    call 'erlang':'>='
			(_cor0, 384)
		in  let <_cor20> =
			call 'erlang':'=<'
			    (_cor0, 451)
		    in  call 'erlang':'and'
			    (_cor19, _cor20) ->
	      'true'
	  %% Line 2927
	  <C>
	      when let <_cor21> =
		    call 'erlang':'>='
			(_cor0, 461)
		in  let <_cor22> =
			call 'erlang':'=<'
			    (_cor0, 496)
		    in  call 'erlang':'and'
			    (_cor21, _cor22) ->
	      'true'
	  %% Line 2928
	  <C>
	      when let <_cor23> =
		    call 'erlang':'>='
			(_cor0, 500)
		in  let <_cor24> =
			call 'erlang':'=<'
			    (_cor0, 501)
		    in  call 'erlang':'and'
			    (_cor23, _cor24) ->
	      'true'
	  %% Line 2929
	  <C>
	      when let <_cor25> =
		    call 'erlang':'>='
			(_cor0, 506)
		in  let <_cor26> =
			call 'erlang':'=<'
			    (_cor0, 535)
		    in  call 'erlang':'and'
			    (_cor25, _cor26) ->
	      'true'
	  %% Line 2930
	  <C>
	      when let <_cor27> =
		    call 'erlang':'>='
			(_cor0, 592)
		in  let <_cor28> =
			call 'erlang':'=<'
			    (_cor0, 680)
		    in  call 'erlang':'and'
			    (_cor27, _cor28) ->
	      'true'
	  %% Line 2931
	  <C>
	      when let <_cor29> =
		    call 'erlang':'>='
			(_cor0, 699)
		in  let <_cor30> =
			call 'erlang':'=<'
			    (_cor0, 705)
		    in  call 'erlang':'and'
			    (_cor29, _cor30) ->
	      'true'
	  %% Line 2932
	  <902> when 'true' ->
	      'true'
	  %% Line 2933
	  <C>
	      when let <_cor31> =
		    call 'erlang':'>='
			(_cor0, 904)
		in  let <_cor32> =
			call 'erlang':'=<'
			    (_cor0, 906)
		    in  call 'erlang':'and'
			    (_cor31, _cor32) ->
	      'true'
	  %% Line 2934
	  <908> when 'true' ->
	      'true'
	  %% Line 2935
	  <C>
	      when let <_cor33> =
		    call 'erlang':'>='
			(_cor0, 910)
		in  let <_cor34> =
			call 'erlang':'=<'
			    (_cor0, 929)
		    in  call 'erlang':'and'
			    (_cor33, _cor34) ->
	      'true'
	  %% Line 2936
	  <C>
	      when let <_cor35> =
		    call 'erlang':'>='
			(_cor0, 931)
		in  let <_cor36> =
			call 'erlang':'=<'
			    (_cor0, 974)
		    in  call 'erlang':'and'
			    (_cor35, _cor36) ->
	      'true'
	  %% Line 2937
	  <C>
	      when let <_cor37> =
		    call 'erlang':'>='
			(_cor0, 976)
		in  let <_cor38> =
			call 'erlang':'=<'
			    (_cor0, 982)
		    in  call 'erlang':'and'
			    (_cor37, _cor38) ->
	      'true'
	  %% Line 2938
	  <986> when 'true' ->
	      'true'
	  %% Line 2939
	  <988> when 'true' ->
	      'true'
	  %% Line 2940
	  <990> when 'true' ->
	      'true'
	  %% Line 2941
	  <992> when 'true' ->
	      'true'
	  %% Line 2942
	  <C>
	      when let <_cor39> =
		    call 'erlang':'>='
			(_cor0, 994)
		in  let <_cor40> =
			call 'erlang':'=<'
			    (_cor0, 1011)
		    in  call 'erlang':'and'
			    (_cor39, _cor40) ->
	      'true'
	  %% Line 2943
	  <C>
	      when let <_cor41> =
		    call 'erlang':'>='
			(_cor0, 1025)
		in  let <_cor42> =
			call 'erlang':'=<'
			    (_cor0, 1036)
		    in  call 'erlang':'and'
			    (_cor41, _cor42) ->
	      'true'
	  %% Line 2944
	  <C>
	      when let <_cor43> =
		    call 'erlang':'>='
			(_cor0, 1038)
		in  let <_cor44> =
			call 'erlang':'=<'
			    (_cor0, 1103)
		    in  call 'erlang':'and'
			    (_cor43, _cor44) ->
	      'true'
	  %% Line 2945
	  <C>
	      when let <_cor45> =
		    call 'erlang':'>='
			(_cor0, 1105)
		in  let <_cor46> =
			call 'erlang':'=<'
			    (_cor0, 1116)
		    in  call 'erlang':'and'
			    (_cor45, _cor46) ->
	      'true'
	  %% Line 2946
	  <C>
	      when let <_cor47> =
		    call 'erlang':'>='
			(_cor0, 1118)
		in  let <_cor48> =
			call 'erlang':'=<'
			    (_cor0, 1153)
		    in  call 'erlang':'and'
			    (_cor47, _cor48) ->
	      'true'
	  %% Line 2947
	  <C>
	      when let <_cor49> =
		    call 'erlang':'>='
			(_cor0, 1168)
		in  let <_cor50> =
			call 'erlang':'=<'
			    (_cor0, 1220)
		    in  call 'erlang':'and'
			    (_cor49, _cor50) ->
	      'true'
	  %% Line 2948
	  <C>
	      when let <_cor51> =
		    call 'erlang':'>='
			(_cor0, 1223)
		in  let <_cor52> =
			call 'erlang':'=<'
			    (_cor0, 1224)
		    in  call 'erlang':'and'
			    (_cor51, _cor52) ->
	      'true'
	  %% Line 2949
	  <C>
	      when let <_cor53> =
		    call 'erlang':'>='
			(_cor0, 1227)
		in  let <_cor54> =
			call 'erlang':'=<'
			    (_cor0, 1228)
		    in  call 'erlang':'and'
			    (_cor53, _cor54) ->
	      'true'
	  %% Line 2950
	  <C>
	      when let <_cor55> =
		    call 'erlang':'>='
			(_cor0, 1232)
		in  let <_cor56> =
			call 'erlang':'=<'
			    (_cor0, 1259)
		    in  call 'erlang':'and'
			    (_cor55, _cor56) ->
	      'true'
	  %% Line 2951
	  <C>
	      when let <_cor57> =
		    call 'erlang':'>='
			(_cor0, 1262)
		in  let <_cor58> =
			call 'erlang':'=<'
			    (_cor0, 1269)
		    in  call 'erlang':'and'
			    (_cor57, _cor58) ->
	      'true'
	  %% Line 2952
	  <C>
	      when let <_cor59> =
		    call 'erlang':'>='
			(_cor0, 1272)
		in  let <_cor60> =
			call 'erlang':'=<'
			    (_cor0, 1273)
		    in  call 'erlang':'and'
			    (_cor59, _cor60) ->
	      'true'
	  %% Line 2953
	  <C>
	      when let <_cor61> =
		    call 'erlang':'>='
			(_cor0, 1329)
		in  let <_cor62> =
			call 'erlang':'=<'
			    (_cor0, 1366)
		    in  call 'erlang':'and'
			    (_cor61, _cor62) ->
	      'true'
	  %% Line 2954
	  <1369> when 'true' ->
	      'true'
	  %% Line 2955
	  <C>
	      when let <_cor63> =
		    call 'erlang':'>='
			(_cor0, 1377)
		in  let <_cor64> =
			call 'erlang':'=<'
			    (_cor0, 1414)
		    in  call 'erlang':'and'
			    (_cor63, _cor64) ->
	      'true'
	  %% Line 2956
	  <C>
	      when let <_cor65> =
		    call 'erlang':'>='
			(_cor0, 1488)
		in  let <_cor66> =
			call 'erlang':'=<'
			    (_cor0, 1514)
		    in  call 'erlang':'and'
			    (_cor65, _cor66) ->
	      'true'
	  %% Line 2957
	  <C>
	      when let <_cor67> =
		    call 'erlang':'>='
			(_cor0, 1520)
		in  let <_cor68> =
			call 'erlang':'=<'
			    (_cor0, 1522)
		    in  call 'erlang':'and'
			    (_cor67, _cor68) ->
	      'true'
	  %% Line 2958
	  <C>
	      when let <_cor69> =
		    call 'erlang':'>='
			(_cor0, 1569)
		in  let <_cor70> =
			call 'erlang':'=<'
			    (_cor0, 1594)
		    in  call 'erlang':'and'
			    (_cor69, _cor70) ->
	      'true'
	  %% Line 2959
	  <C>
	      when let <_cor71> =
		    call 'erlang':'>='
			(_cor0, 1601)
		in  let <_cor72> =
			call 'erlang':'=<'
			    (_cor0, 1610)
		    in  call 'erlang':'and'
			    (_cor71, _cor72) ->
	      'true'
	  %% Line 2960
	  <C>
	      when let <_cor73> =
		    call 'erlang':'>='
			(_cor0, 1649)
		in  let <_cor74> =
			call 'erlang':'=<'
			    (_cor0, 1719)
		    in  call 'erlang':'and'
			    (_cor73, _cor74) ->
	      'true'
	  %% Line 2961
	  <C>
	      when let <_cor75> =
		    call 'erlang':'>='
			(_cor0, 1722)
		in  let <_cor76> =
			call 'erlang':'=<'
			    (_cor0, 1726)
		    in  call 'erlang':'and'
			    (_cor75, _cor76) ->
	      'true'
	  %% Line 2962
	  <C>
	      when let <_cor77> =
		    call 'erlang':'>='
			(_cor0, 1728)
		in  let <_cor78> =
			call 'erlang':'=<'
			    (_cor0, 1742)
		    in  call 'erlang':'and'
			    (_cor77, _cor78) ->
	      'true'
	  %% Line 2963
	  <C>
	      when let <_cor79> =
		    call 'erlang':'>='
			(_cor0, 1744)
		in  let <_cor80> =
			call 'erlang':'=<'
			    (_cor0, 1747)
		    in  call 'erlang':'and'
			    (_cor79, _cor80) ->
	      'true'
	  %% Line 2964
	  <1749> when 'true' ->
	      'true'
	  %% Line 2965
	  <C>
	      when let <_cor81> =
		    call 'erlang':'>='
			(_cor0, 1765)
		in  let <_cor82> =
			call 'erlang':'=<'
			    (_cor0, 1766)
		    in  call 'erlang':'and'
			    (_cor81, _cor82) ->
	      'true'
	  %% Line 2966
	  <C>
	      when let <_cor83> =
		    call 'erlang':'>='
			(_cor0, 2309)
		in  let <_cor84> =
			call 'erlang':'=<'
			    (_cor0, 2361)
		    in  call 'erlang':'and'
			    (_cor83, _cor84) ->
	      'true'
	  %% Line 2967
	  <2365> when 'true' ->
	      'true'
	  %% Line 2968
	  <C>
	      when let <_cor85> =
		    call 'erlang':'>='
			(_cor0, 2392)
		in  let <_cor86> =
			call 'erlang':'=<'
			    (_cor0, 2401)
		    in  call 'erlang':'and'
			    (_cor85, _cor86) ->
	      'true'
	  %% Line 2969
	  <C>
	      when let <_cor87> =
		    call 'erlang':'>='
			(_cor0, 2437)
		in  let <_cor88> =
			call 'erlang':'=<'
			    (_cor0, 2444)
		    in  call 'erlang':'and'
			    (_cor87, _cor88) ->
	      'true'
	  %% Line 2970
	  <C>
	      when let <_cor89> =
		    call 'erlang':'>='
			(_cor0, 2447)
		in  let <_cor90> =
			call 'erlang':'=<'
			    (_cor0, 2448)
		    in  call 'erlang':'and'
			    (_cor89, _cor90) ->
	      'true'
	  %% Line 2971
	  <C>
	      when let <_cor91> =
		    call 'erlang':'>='
			(_cor0, 2451)
		in  let <_cor92> =
			call 'erlang':'=<'
			    (_cor0, 2472)
		    in  call 'erlang':'and'
			    (_cor91, _cor92) ->
	      'true'
	  %% Line 2972
	  <C>
	      when let <_cor93> =
		    call 'erlang':'>='
			(_cor0, 2474)
		in  let <_cor94> =
			call 'erlang':'=<'
			    (_cor0, 2480)
		    in  call 'erlang':'and'
			    (_cor93, _cor94) ->
	      'true'
	  %% Line 2973
	  <2482> when 'true' ->
	      'true'
	  %% Line 2974
	  <C>
	      when let <_cor95> =
		    call 'erlang':'>='
			(_cor0, 2486)
		in  let <_cor96> =
			call 'erlang':'=<'
			    (_cor0, 2489)
		    in  call 'erlang':'and'
			    (_cor95, _cor96) ->
	      'true'
	  %% Line 2975
	  <C>
	      when let <_cor97> =
		    call 'erlang':'>='
			(_cor0, 2524)
		in  let <_cor98> =
			call 'erlang':'=<'
			    (_cor0, 2525)
		    in  call 'erlang':'and'
			    (_cor97, _cor98) ->
	      'true'
	  %% Line 2976
	  <C>
	      when let <_cor99> =
		    call 'erlang':'>='
			(_cor0, 2527)
		in  let <_cor100> =
			call 'erlang':'=<'
			    (_cor0, 2529)
		    in  call 'erlang':'and'
			    (_cor99, _cor100) ->
	      'true'
	  %% Line 2977
	  <C>
	      when let <_cor101> =
		    call 'erlang':'>='
			(_cor0, 2544)
		in  let <_cor102> =
			call 'erlang':'=<'
			    (_cor0, 2545)
		    in  call 'erlang':'and'
			    (_cor101, _cor102) ->
	      'true'
	  %% Line 2978
	  <C>
	      when let <_cor103> =
		    call 'erlang':'>='
			(_cor0, 2565)
		in  let <_cor104> =
			call 'erlang':'=<'
			    (_cor0, 2570)
		    in  call 'erlang':'and'
			    (_cor103, _cor104) ->
	      'true'
	  %% Line 2979
	  <C>
	      when let <_cor105> =
		    call 'erlang':'>='
			(_cor0, 2575)
		in  let <_cor106> =
			call 'erlang':'=<'
			    (_cor0, 2576)
		    in  call 'erlang':'and'
			    (_cor105, _cor106) ->
	      'true'
	  %% Line 2980
	  <C>
	      when let <_cor107> =
		    call 'erlang':'>='
			(_cor0, 2579)
		in  let <_cor108> =
			call 'erlang':'=<'
			    (_cor0, 2600)
		    in  call 'erlang':'and'
			    (_cor107, _cor108) ->
	      'true'
	  %% Line 2981
	  <C>
	      when let <_cor109> =
		    call 'erlang':'>='
			(_cor0, 2602)
		in  let <_cor110> =
			call 'erlang':'=<'
			    (_cor0, 2608)
		    in  call 'erlang':'and'
			    (_cor109, _cor110) ->
	      'true'
	  %% Line 2982
	  <C>
	      when let <_cor111> =
		    call 'erlang':'>='
			(_cor0, 2610)
		in  let <_cor112> =
			call 'erlang':'=<'
			    (_cor0, 2611)
		    in  call 'erlang':'and'
			    (_cor111, _cor112) ->
	      'true'
	  %% Line 2983
	  <C>
	      when let <_cor113> =
		    call 'erlang':'>='
			(_cor0, 2613)
		in  let <_cor114> =
			call 'erlang':'=<'
			    (_cor0, 2614)
		    in  call 'erlang':'and'
			    (_cor113, _cor114) ->
	      'true'
	  %% Line 2984
	  <C>
	      when let <_cor115> =
		    call 'erlang':'>='
			(_cor0, 2616)
		in  let <_cor116> =
			call 'erlang':'=<'
			    (_cor0, 2617)
		    in  call 'erlang':'and'
			    (_cor115, _cor116) ->
	      'true'
	  %% Line 2985
	  <C>
	      when let <_cor117> =
		    call 'erlang':'>='
			(_cor0, 2649)
		in  let <_cor118> =
			call 'erlang':'=<'
			    (_cor0, 2652)
		    in  call 'erlang':'and'
			    (_cor117, _cor118) ->
	      'true'
	  %% Line 2986
	  <2654> when 'true' ->
	      'true'
	  %% Line 2987
	  <C>
	      when let <_cor119> =
		    call 'erlang':'>='
			(_cor0, 2674)
		in  let <_cor120> =
			call 'erlang':'=<'
			    (_cor0, 2676)
		    in  call 'erlang':'and'
			    (_cor119, _cor120) ->
	      'true'
	  %% Line 2988
	  <C>
	      when let <_cor121> =
		    call 'erlang':'>='
			(_cor0, 2693)
		in  let <_cor122> =
			call 'erlang':'=<'
			    (_cor0, 2699)
		    in  call 'erlang':'and'
			    (_cor121, _cor122) ->
	      'true'
	  %% Line 2989
	  <2701> when 'true' ->
	      'true'
	  %% Line 2990
	  <C>
	      when let <_cor123> =
		    call 'erlang':'>='
			(_cor0, 2703)
		in  let <_cor124> =
			call 'erlang':'=<'
			    (_cor0, 2705)
		    in  call 'erlang':'and'
			    (_cor123, _cor124) ->
	      'true'
	  %% Line 2991
	  <C>
	      when let <_cor125> =
		    call 'erlang':'>='
			(_cor0, 2707)
		in  let <_cor126> =
			call 'erlang':'=<'
			    (_cor0, 2728)
		    in  call 'erlang':'and'
			    (_cor125, _cor126) ->
	      'true'
	  %% Line 2992
	  <C>
	      when let <_cor127> =
		    call 'erlang':'>='
			(_cor0, 2730)
		in  let <_cor128> =
			call 'erlang':'=<'
			    (_cor0, 2736)
		    in  call 'erlang':'and'
			    (_cor127, _cor128) ->
	      'true'
	  %% Line 2993
	  <C>
	      when let <_cor129> =
		    call 'erlang':'>='
			(_cor0, 2738)
		in  let <_cor130> =
			call 'erlang':'=<'
			    (_cor0, 2739)
		    in  call 'erlang':'and'
			    (_cor129, _cor130) ->
	      'true'
	  %% Line 2994
	  <C>
	      when let <_cor131> =
		    call 'erlang':'>='
			(_cor0, 2741)
		in  let <_cor132> =
			call 'erlang':'=<'
			    (_cor0, 2745)
		    in  call 'erlang':'and'
			    (_cor131, _cor132) ->
	      'true'
	  %% Line 2995
	  <2749> when 'true' ->
	      'true'
	  %% Line 2996
	  <2784> when 'true' ->
	      'true'
	  %% Line 2997
	  <C>
	      when let <_cor133> =
		    call 'erlang':'>='
			(_cor0, 2821)
		in  let <_cor134> =
			call 'erlang':'=<'
			    (_cor0, 2828)
		    in  call 'erlang':'and'
			    (_cor133, _cor134) ->
	      'true'
	  %% Line 2998
	  <C>
	      when let <_cor135> =
		    call 'erlang':'>='
			(_cor0, 2831)
		in  let <_cor136> =
			call 'erlang':'=<'
			    (_cor0, 2832)
		    in  call 'erlang':'and'
			    (_cor135, _cor136) ->
	      'true'
	  %% Line 2999
	  <C>
	      when let <_cor137> =
		    call 'erlang':'>='
			(_cor0, 2835)
		in  let <_cor138> =
			call 'erlang':'=<'
			    (_cor0, 2856)
		    in  call 'erlang':'and'
			    (_cor137, _cor138) ->
	      'true'
	  %% Line 3000
	  <C>
	      when let <_cor139> =
		    call 'erlang':'>='
			(_cor0, 2858)
		in  let <_cor140> =
			call 'erlang':'=<'
			    (_cor0, 2864)
		    in  call 'erlang':'and'
			    (_cor139, _cor140) ->
	      'true'
	  %% Line 3001
	  <C>
	      when let <_cor141> =
		    call 'erlang':'>='
			(_cor0, 2866)
		in  let <_cor142> =
			call 'erlang':'=<'
			    (_cor0, 2867)
		    in  call 'erlang':'and'
			    (_cor141, _cor142) ->
	      'true'
	  %% Line 3002
	  <C>
	      when let <_cor143> =
		    call 'erlang':'>='
			(_cor0, 2870)
		in  let <_cor144> =
			call 'erlang':'=<'
			    (_cor0, 2873)
		    in  call 'erlang':'and'
			    (_cor143, _cor144) ->
	      'true'
	  %% Line 3003
	  <2877> when 'true' ->
	      'true'
	  %% Line 3004
	  <C>
	      when let <_cor145> =
		    call 'erlang':'>='
			(_cor0, 2908)
		in  let <_cor146> =
			call 'erlang':'=<'
			    (_cor0, 2909)
		    in  call 'erlang':'and'
			    (_cor145, _cor146) ->
	      'true'
	  %% Line 3005
	  <C>
	      when let <_cor147> =
		    call 'erlang':'>='
			(_cor0, 2911)
		in  let <_cor148> =
			call 'erlang':'=<'
			    (_cor0, 2913)
		    in  call 'erlang':'and'
			    (_cor147, _cor148) ->
	      'true'
	  %% Line 3006
	  <C>
	      when let <_cor149> =
		    call 'erlang':'>='
			(_cor0, 2949)
		in  let <_cor150> =
			call 'erlang':'=<'
			    (_cor0, 2954)
		    in  call 'erlang':'and'
			    (_cor149, _cor150) ->
	      'true'
	  %% Line 3007
	  <C>
	      when let <_cor151> =
		    call 'erlang':'>='
			(_cor0, 2958)
		in  let <_cor152> =
			call 'erlang':'=<'
			    (_cor0, 2960)
		    in  call 'erlang':'and'
			    (_cor151, _cor152) ->
	      'true'
	  %% Line 3008
	  <C>
	      when let <_cor153> =
		    call 'erlang':'>='
			(_cor0, 2962)
		in  let <_cor154> =
			call 'erlang':'=<'
			    (_cor0, 2965)
		    in  call 'erlang':'and'
			    (_cor153, _cor154) ->
	      'true'
	  %% Line 3009
	  <C>
	      when let <_cor155> =
		    call 'erlang':'>='
			(_cor0, 2969)
		in  let <_cor156> =
			call 'erlang':'=<'
			    (_cor0, 2970)
		    in  call 'erlang':'and'
			    (_cor155, _cor156) ->
	      'true'
	  %% Line 3010
	  <2972> when 'true' ->
	      'true'
	  %% Line 3011
	  <C>
	      when let <_cor157> =
		    call 'erlang':'>='
			(_cor0, 2974)
		in  let <_cor158> =
			call 'erlang':'=<'
			    (_cor0, 2975)
		    in  call 'erlang':'and'
			    (_cor157, _cor158) ->
	      'true'
	  %% Line 3012
	  <C>
	      when let <_cor159> =
		    call 'erlang':'>='
			(_cor0, 2979)
		in  let <_cor160> =
			call 'erlang':'=<'
			    (_cor0, 2980)
		    in  call 'erlang':'and'
			    (_cor159, _cor160) ->
	      'true'
	  %% Line 3013
	  <C>
	      when let <_cor161> =
		    call 'erlang':'>='
			(_cor0, 2984)
		in  let <_cor162> =
			call 'erlang':'=<'
			    (_cor0, 2986)
		    in  call 'erlang':'and'
			    (_cor161, _cor162) ->
	      'true'
	  %% Line 3014
	  <C>
	      when let <_cor163> =
		    call 'erlang':'>='
			(_cor0, 2990)
		in  let <_cor164> =
			call 'erlang':'=<'
			    (_cor0, 2997)
		    in  call 'erlang':'and'
			    (_cor163, _cor164) ->
	      'true'
	  %% Line 3015
	  <C>
	      when let <_cor165> =
		    call 'erlang':'>='
			(_cor0, 2999)
		in  let <_cor166> =
			call 'erlang':'=<'
			    (_cor0, 3001)
		    in  call 'erlang':'and'
			    (_cor165, _cor166) ->
	      'true'
	  %% Line 3016
	  <C>
	      when let <_cor167> =
		    call 'erlang':'>='
			(_cor0, 3077)
		in  let <_cor168> =
			call 'erlang':'=<'
			    (_cor0, 3084)
		    in  call 'erlang':'and'
			    (_cor167, _cor168) ->
	      'true'
	  %% Line 3017
	  <C>
	      when let <_cor169> =
		    call 'erlang':'>='
			(_cor0, 3086)
		in  let <_cor170> =
			call 'erlang':'=<'
			    (_cor0, 3088)
		    in  call 'erlang':'and'
			    (_cor169, _cor170) ->
	      'true'
	  %% Line 3018
	  <C>
	      when let <_cor171> =
		    call 'erlang':'>='
			(_cor0, 3090)
		in  let <_cor172> =
			call 'erlang':'=<'
			    (_cor0, 3112)
		    in  call 'erlang':'and'
			    (_cor171, _cor172) ->
	      'true'
	  %% Line 3019
	  <C>
	      when let <_cor173> =
		    call 'erlang':'>='
			(_cor0, 3114)
		in  let <_cor174> =
			call 'erlang':'=<'
			    (_cor0, 3123)
		    in  call 'erlang':'and'
			    (_cor173, _cor174) ->
	      'true'
	  %% Line 3020
	  <C>
	      when let <_cor175> =
		    call 'erlang':'>='
			(_cor0, 3125)
		in  let <_cor176> =
			call 'erlang':'=<'
			    (_cor0, 3129)
		    in  call 'erlang':'and'
			    (_cor175, _cor176) ->
	      'true'
	  %% Line 3021
	  <C>
	      when let <_cor177> =
		    call 'erlang':'>='
			(_cor0, 3168)
		in  let <_cor178> =
			call 'erlang':'=<'
			    (_cor0, 3169)
		    in  call 'erlang':'and'
			    (_cor177, _cor178) ->
	      'true'
	  %% Line 3022
	  <C>
	      when let <_cor179> =
		    call 'erlang':'>='
			(_cor0, 3205)
		in  let <_cor180> =
			call 'erlang':'=<'
			    (_cor0, 3212)
		    in  call 'erlang':'and'
			    (_cor179, _cor180) ->
	      'true'
	  %% Line 3023
	  <C>
	      when let <_cor181> =
		    call 'erlang':'>='
			(_cor0, 3214)
		in  let <_cor182> =
			call 'erlang':'=<'
			    (_cor0, 3216)
		    in  call 'erlang':'and'
			    (_cor181, _cor182) ->
	      'true'
	  %% Line 3024
	  <C>
	      when let <_cor183> =
		    call 'erlang':'>='
			(_cor0, 3218)
		in  let <_cor184> =
			call 'erlang':'=<'
			    (_cor0, 3240)
		    in  call 'erlang':'and'
			    (_cor183, _cor184) ->
	      'true'
	  %% Line 3025
	  <C>
	      when let <_cor185> =
		    call 'erlang':'>='
			(_cor0, 3242)
		in  let <_cor186> =
			call 'erlang':'=<'
			    (_cor0, 3251)
		    in  call 'erlang':'and'
			    (_cor185, _cor186) ->
	      'true'
	  %% Line 3026
	  <C>
	      when let <_cor187> =
		    call 'erlang':'>='
			(_cor0, 3253)
		in  let <_cor188> =
			call 'erlang':'=<'
			    (_cor0, 3257)
		    in  call 'erlang':'and'
			    (_cor187, _cor188) ->
	      'true'
	  %% Line 3027
	  <3294> when 'true' ->
	      'true'
	  %% Line 3028
	  <C>
	      when let <_cor189> =
		    call 'erlang':'>='
			(_cor0, 3296)
		in  let <_cor190> =
			call 'erlang':'=<'
			    (_cor0, 3297)
		    in  call 'erlang':'and'
			    (_cor189, _cor190) ->
	      'true'
	  %% Line 3029
	  <C>
	      when let <_cor191> =
		    call 'erlang':'>='
			(_cor0, 3333)
		in  let <_cor192> =
			call 'erlang':'=<'
			    (_cor0, 3340)
		    in  call 'erlang':'and'
			    (_cor191, _cor192) ->
	      'true'
	  %% Line 3030
	  <C>
	      when let <_cor193> =
		    call 'erlang':'>='
			(_cor0, 3342)
		in  let <_cor194> =
			call 'erlang':'=<'
			    (_cor0, 3344)
		    in  call 'erlang':'and'
			    (_cor193, _cor194) ->
	      'true'
	  %% Line 3031
	  <C>
	      when let <_cor195> =
		    call 'erlang':'>='
			(_cor0, 3346)
		in  let <_cor196> =
			call 'erlang':'=<'
			    (_cor0, 3368)
		    in  call 'erlang':'and'
			    (_cor195, _cor196) ->
	      'true'
	  %% Line 3032
	  <C>
	      when let <_cor197> =
		    call 'erlang':'>='
			(_cor0, 3370)
		in  let <_cor198> =
			call 'erlang':'=<'
			    (_cor0, 3385)
		    in  call 'erlang':'and'
			    (_cor197, _cor198) ->
	      'true'
	  %% Line 3033
	  <C>
	      when let <_cor199> =
		    call 'erlang':'>='
			(_cor0, 3424)
		in  let <_cor200> =
			call 'erlang':'=<'
			    (_cor0, 3425)
		    in  call 'erlang':'and'
			    (_cor199, _cor200) ->
	      'true'
	  %% Line 3034
	  <C>
	      when let <_cor201> =
		    call 'erlang':'>='
			(_cor0, 3585)
		in  let <_cor202> =
			call 'erlang':'=<'
			    (_cor0, 3630)
		    in  call 'erlang':'and'
			    (_cor201, _cor202) ->
	      'true'
	  %% Line 3035
	  <3632> when 'true' ->
	      'true'
	  %% Line 3036
	  <C>
	      when let <_cor203> =
		    call 'erlang':'>='
			(_cor0, 3634)
		in  let <_cor204> =
			call 'erlang':'=<'
			    (_cor0, 3635)
		    in  call 'erlang':'and'
			    (_cor203, _cor204) ->
	      'true'
	  %% Line 3037
	  <C>
	      when let <_cor205> =
		    call 'erlang':'>='
			(_cor0, 3648)
		in  let <_cor206> =
			call 'erlang':'=<'
			    (_cor0, 3653)
		    in  call 'erlang':'and'
			    (_cor205, _cor206) ->
	      'true'
	  %% Line 3038
	  <C>
	      when let <_cor207> =
		    call 'erlang':'>='
			(_cor0, 3713)
		in  let <_cor208> =
			call 'erlang':'=<'
			    (_cor0, 3714)
		    in  call 'erlang':'and'
			    (_cor207, _cor208) ->
	      'true'
	  %% Line 3039
	  <3716> when 'true' ->
	      'true'
	  %% Line 3040
	  <C>
	      when let <_cor209> =
		    call 'erlang':'>='
			(_cor0, 3719)
		in  let <_cor210> =
			call 'erlang':'=<'
			    (_cor0, 3720)
		    in  call 'erlang':'and'
			    (_cor209, _cor210) ->
	      'true'
	  %% Line 3041
	  <3722> when 'true' ->
	      'true'
	  %% Line 3042
	  <3725> when 'true' ->
	      'true'
	  %% Line 3043
	  <C>
	      when let <_cor211> =
		    call 'erlang':'>='
			(_cor0, 3732)
		in  let <_cor212> =
			call 'erlang':'=<'
			    (_cor0, 3735)
		    in  call 'erlang':'and'
			    (_cor211, _cor212) ->
	      'true'
	  %% Line 3044
	  <C>
	      when let <_cor213> =
		    call 'erlang':'>='
			(_cor0, 3737)
		in  let <_cor214> =
			call 'erlang':'=<'
			    (_cor0, 3743)
		    in  call 'erlang':'and'
			    (_cor213, _cor214) ->
	      'true'
	  %% Line 3045
	  <C>
	      when let <_cor215> =
		    call 'erlang':'>='
			(_cor0, 3745)
		in  let <_cor216> =
			call 'erlang':'=<'
			    (_cor0, 3747)
		    in  call 'erlang':'and'
			    (_cor215, _cor216) ->
	      'true'
	  %% Line 3046
	  <3749> when 'true' ->
	      'true'
	  %% Line 3047
	  <3751> when 'true' ->
	      'true'
	  %% Line 3048
	  <C>
	      when let <_cor217> =
		    call 'erlang':'>='
			(_cor0, 3754)
		in  let <_cor218> =
			call 'erlang':'=<'
			    (_cor0, 3755)
		    in  call 'erlang':'and'
			    (_cor217, _cor218) ->
	      'true'
	  %% Line 3049
	  <C>
	      when let <_cor219> =
		    call 'erlang':'>='
			(_cor0, 3757)
		in  let <_cor220> =
			call 'erlang':'=<'
			    (_cor0, 3758)
		    in  call 'erlang':'and'
			    (_cor219, _cor220) ->
	      'true'
	  %% Line 3050
	  <3760> when 'true' ->
	      'true'
	  %% Line 3051
	  <C>
	      when let <_cor221> =
		    call 'erlang':'>='
			(_cor0, 3762)
		in  let <_cor222> =
			call 'erlang':'=<'
			    (_cor0, 3763)
		    in  call 'erlang':'and'
			    (_cor221, _cor222) ->
	      'true'
	  %% Line 3052
	  <3773> when 'true' ->
	      'true'
	  %% Line 3053
	  <C>
	      when let <_cor223> =
		    call 'erlang':'>='
			(_cor0, 3776)
		in  let <_cor224> =
			call 'erlang':'=<'
			    (_cor0, 3780)
		    in  call 'erlang':'and'
			    (_cor223, _cor224) ->
	      'true'
	  %% Line 3054
	  <C>
	      when let <_cor225> =
		    call 'erlang':'>='
			(_cor0, 3904)
		in  let <_cor226> =
			call 'erlang':'=<'
			    (_cor0, 3911)
		    in  call 'erlang':'and'
			    (_cor225, _cor226) ->
	      'true'
	  %% Line 3055
	  <C>
	      when let <_cor227> =
		    call 'erlang':'>='
			(_cor0, 3913)
		in  let <_cor228> =
			call 'erlang':'=<'
			    (_cor0, 3945)
		    in  call 'erlang':'and'
			    (_cor227, _cor228) ->
	      'true'
	  %% Line 3056
	  <C>
	      when let <_cor229> =
		    call 'erlang':'>='
			(_cor0, 4256)
		in  let <_cor230> =
			call 'erlang':'=<'
			    (_cor0, 4293)
		    in  call 'erlang':'and'
			    (_cor229, _cor230) ->
	      'true'
	  %% Line 3057
	  <C>
	      when let <_cor231> =
		    call 'erlang':'>='
			(_cor0, 4304)
		in  let <_cor232> =
			call 'erlang':'=<'
			    (_cor0, 4342)
		    in  call 'erlang':'and'
			    (_cor231, _cor232) ->
	      'true'
	  %% Line 3058
	  <4352> when 'true' ->
	      'true'
	  %% Line 3059
	  <C>
	      when let <_cor233> =
		    call 'erlang':'>='
			(_cor0, 4354)
		in  let <_cor234> =
			call 'erlang':'=<'
			    (_cor0, 4355)
		    in  call 'erlang':'and'
			    (_cor233, _cor234) ->
	      'true'
	  %% Line 3060
	  <C>
	      when let <_cor235> =
		    call 'erlang':'>='
			(_cor0, 4357)
		in  let <_cor236> =
			call 'erlang':'=<'
			    (_cor0, 4359)
		    in  call 'erlang':'and'
			    (_cor235, _cor236) ->
	      'true'
	  %% Line 3061
	  <4361> when 'true' ->
	      'true'
	  %% Line 3062
	  <C>
	      when let <_cor237> =
		    call 'erlang':'>='
			(_cor0, 4363)
		in  let <_cor238> =
			call 'erlang':'=<'
			    (_cor0, 4364)
		    in  call 'erlang':'and'
			    (_cor237, _cor238) ->
	      'true'
	  %% Line 3063
	  <C>
	      when let <_cor239> =
		    call 'erlang':'>='
			(_cor0, 4366)
		in  let <_cor240> =
			call 'erlang':'=<'
			    (_cor0, 4370)
		    in  call 'erlang':'and'
			    (_cor239, _cor240) ->
	      'true'
	  %% Line 3064
	  <4412> when 'true' ->
	      'true'
	  %% Line 3065
	  <4414> when 'true' ->
	      'true'
	  %% Line 3066
	  <4416> when 'true' ->
	      'true'
	  %% Line 3067
	  <4428> when 'true' ->
	      'true'
	  %% Line 3068
	  <4430> when 'true' ->
	      'true'
	  %% Line 3069
	  <4432> when 'true' ->
	      'true'
	  %% Line 3070
	  <C>
	      when let <_cor241> =
		    call 'erlang':'>='
			(_cor0, 4436)
		in  let <_cor242> =
			call 'erlang':'=<'
			    (_cor0, 4437)
		    in  call 'erlang':'and'
			    (_cor241, _cor242) ->
	      'true'
	  %% Line 3071
	  <4441> when 'true' ->
	      'true'
	  %% Line 3072
	  <C>
	      when let <_cor243> =
		    call 'erlang':'>='
			(_cor0, 4447)
		in  let <_cor244> =
			call 'erlang':'=<'
			    (_cor0, 4449)
		    in  call 'erlang':'and'
			    (_cor243, _cor244) ->
	      'true'
	  %% Line 3073
	  <4451> when 'true' ->
	      'true'
	  %% Line 3074
	  <4453> when 'true' ->
	      'true'
	  %% Line 3075
	  <4455> when 'true' ->
	      'true'
	  %% Line 3076
	  <4457> when 'true' ->
	      'true'
	  %% Line 3077
	  <C>
	      when let <_cor245> =
		    call 'erlang':'>='
			(_cor0, 4461)
		in  let <_cor246> =
			call 'erlang':'=<'
			    (_cor0, 4462)
		    in  call 'erlang':'and'
			    (_cor245, _cor246) ->
	      'true'
	  %% Line 3078
	  <C>
	      when let <_cor247> =
		    call 'erlang':'>='
			(_cor0, 4466)
		in  let <_cor248> =
			call 'erlang':'=<'
			    (_cor0, 4467)
		    in  call 'erlang':'and'
			    (_cor247, _cor248) ->
	      'true'
	  %% Line 3079
	  <4469> when 'true' ->
	      'true'
	  %% Line 3080
	  <4510> when 'true' ->
	      'true'
	  %% Line 3081
	  <4520> when 'true' ->
	      'true'
	  %% Line 3082
	  <4523> when 'true' ->
	      'true'
	  %% Line 3083
	  <C>
	      when let <_cor249> =
		    call 'erlang':'>='
			(_cor0, 4526)
		in  let <_cor250> =
			call 'erlang':'=<'
			    (_cor0, 4527)
		    in  call 'erlang':'and'
			    (_cor249, _cor250) ->
	      'true'
	  %% Line 3084
	  <C>
	      when let <_cor251> =
		    call 'erlang':'>='
			(_cor0, 4535)
		in  let <_cor252> =
			call 'erlang':'=<'
			    (_cor0, 4536)
		    in  call 'erlang':'and'
			    (_cor251, _cor252) ->
	      'true'
	  %% Line 3085
	  <4538> when 'true' ->
	      'true'
	  %% Line 3086
	  <C>
	      when let <_cor253> =
		    call 'erlang':'>='
			(_cor0, 4540)
		in  let <_cor254> =
			call 'erlang':'=<'
			    (_cor0, 4546)
		    in  call 'erlang':'and'
			    (_cor253, _cor254) ->
	      'true'
	  %% Line 3087
	  <4587> when 'true' ->
	      'true'
	  %% Line 3088
	  <4592> when 'true' ->
	      'true'
	  %% Line 3089
	  <4601> when 'true' ->
	      'true'
	  %% Line 3090
	  <C>
	      when let <_cor255> =
		    call 'erlang':'>='
			(_cor0, 7680)
		in  let <_cor256> =
			call 'erlang':'=<'
			    (_cor0, 7835)
		    in  call 'erlang':'and'
			    (_cor255, _cor256) ->
	      'true'
	  %% Line 3091
	  <C>
	      when let <_cor257> =
		    call 'erlang':'>='
			(_cor0, 7840)
		in  let <_cor258> =
			call 'erlang':'=<'
			    (_cor0, 7929)
		    in  call 'erlang':'and'
			    (_cor257, _cor258) ->
	      'true'
	  %% Line 3092
	  <C>
	      when let <_cor259> =
		    call 'erlang':'>='
			(_cor0, 7936)
		in  let <_cor260> =
			call 'erlang':'=<'
			    (_cor0, 7957)
		    in  call 'erlang':'and'
			    (_cor259, _cor260) ->
	      'true'
	  %% Line 3093
	  <C>
	      when let <_cor261> =
		    call 'erlang':'>='
			(_cor0, 7960)
		in  let <_cor262> =
			call 'erlang':'=<'
			    (_cor0, 7965)
		    in  call 'erlang':'and'
			    (_cor261, _cor262) ->
	      'true'
	  %% Line 3094
	  <C>
	      when let <_cor263> =
		    call 'erlang':'>='
			(_cor0, 7968)
		in  let <_cor264> =
			call 'erlang':'=<'
			    (_cor0, 8005)
		    in  call 'erlang':'and'
			    (_cor263, _cor264) ->
	      'true'
	  %% Line 3095
	  <C>
	      when let <_cor265> =
		    call 'erlang':'>='
			(_cor0, 8008)
		in  let <_cor266> =
			call 'erlang':'=<'
			    (_cor0, 8013)
		    in  call 'erlang':'and'
			    (_cor265, _cor266) ->
	      'true'
	  %% Line 3096
	  <C>
	      when let <_cor267> =
		    call 'erlang':'>='
			(_cor0, 8016)
		in  let <_cor268> =
			call 'erlang':'=<'
			    (_cor0, 8023)
		    in  call 'erlang':'and'
			    (_cor267, _cor268) ->
	      'true'
	  %% Line 3097
	  <8025> when 'true' ->
	      'true'
	  %% Line 3098
	  <8027> when 'true' ->
	      'true'
	  %% Line 3099
	  <8029> when 'true' ->
	      'true'
	  %% Line 3100
	  <C>
	      when let <_cor269> =
		    call 'erlang':'>='
			(_cor0, 8031)
		in  let <_cor270> =
			call 'erlang':'=<'
			    (_cor0, 8061)
		    in  call 'erlang':'and'
			    (_cor269, _cor270) ->
	      'true'
	  %% Line 3101
	  <C>
	      when let <_cor271> =
		    call 'erlang':'>='
			(_cor0, 8064)
		in  let <_cor272> =
			call 'erlang':'=<'
			    (_cor0, 8116)
		    in  call 'erlang':'and'
			    (_cor271, _cor272) ->
	      'true'
	  %% Line 3102
	  <C>
	      when let <_cor273> =
		    call 'erlang':'>='
			(_cor0, 8118)
		in  let <_cor274> =
			call 'erlang':'=<'
			    (_cor0, 8124)
		    in  call 'erlang':'and'
			    (_cor273, _cor274) ->
	      'true'
	  %% Line 3103
	  <8126> when 'true' ->
	      'true'
	  %% Line 3104
	  <C>
	      when let <_cor275> =
		    call 'erlang':'>='
			(_cor0, 8130)
		in  let <_cor276> =
			call 'erlang':'=<'
			    (_cor0, 8132)
		    in  call 'erlang':'and'
			    (_cor275, _cor276) ->
	      'true'
	  %% Line 3105
	  <C>
	      when let <_cor277> =
		    call 'erlang':'>='
			(_cor0, 8134)
		in  let <_cor278> =
			call 'erlang':'=<'
			    (_cor0, 8140)
		    in  call 'erlang':'and'
			    (_cor277, _cor278) ->
	      'true'
	  %% Line 3106
	  <C>
	      when let <_cor279> =
		    call 'erlang':'>='
			(_cor0, 8144)
		in  let <_cor280> =
			call 'erlang':'=<'
			    (_cor0, 8147)
		    in  call 'erlang':'and'
			    (_cor279, _cor280) ->
	      'true'
	  %% Line 3107
	  <C>
	      when let <_cor281> =
		    call 'erlang':'>='
			(_cor0, 8150)
		in  let <_cor282> =
			call 'erlang':'=<'
			    (_cor0, 8155)
		    in  call 'erlang':'and'
			    (_cor281, _cor282) ->
	      'true'
	  %% Line 3108
	  <C>
	      when let <_cor283> =
		    call 'erlang':'>='
			(_cor0, 8160)
		in  let <_cor284> =
			call 'erlang':'=<'
			    (_cor0, 8172)
		    in  call 'erlang':'and'
			    (_cor283, _cor284) ->
	      'true'
	  %% Line 3109
	  <C>
	      when let <_cor285> =
		    call 'erlang':'>='
			(_cor0, 8178)
		in  let <_cor286> =
			call 'erlang':'=<'
			    (_cor0, 8180)
		    in  call 'erlang':'and'
			    (_cor285, _cor286) ->
	      'true'
	  %% Line 3110
	  <C>
	      when let <_cor287> =
		    call 'erlang':'>='
			(_cor0, 8182)
		in  let <_cor288> =
			call 'erlang':'=<'
			    (_cor0, 8188)
		    in  call 'erlang':'and'
			    (_cor287, _cor288) ->
	      'true'
	  %% Line 3111
	  <8486> when 'true' ->
	      'true'
	  %% Line 3112
	  <C>
	      when let <_cor289> =
		    call 'erlang':'>='
			(_cor0, 8490)
		in  let <_cor290> =
			call 'erlang':'=<'
			    (_cor0, 8491)
		    in  call 'erlang':'and'
			    (_cor289, _cor290) ->
	      'true'
	  %% Line 3113
	  <8494> when 'true' ->
	      'true'
	  %% Line 3114
	  <C>
	      when let <_cor291> =
		    call 'erlang':'>='
			(_cor0, 8576)
		in  let <_cor292> =
			call 'erlang':'=<'
			    (_cor0, 8578)
		    in  call 'erlang':'and'
			    (_cor291, _cor292) ->
	      'true'
	  %% Line 3115
	  <C>
	      when let <_cor293> =
		    call 'erlang':'>='
			(_cor0, 12353)
		in  let <_cor294> =
			call 'erlang':'=<'
			    (_cor0, 12436)
		    in  call 'erlang':'and'
			    (_cor293, _cor294) ->
	      'true'
	  %% Line 3116
	  <C>
	      when let <_cor295> =
		    call 'erlang':'>='
			(_cor0, 12449)
		in  let <_cor296> =
			call 'erlang':'=<'
			    (_cor0, 12538)
		    in  call 'erlang':'and'
			    (_cor295, _cor296) ->
	      'true'
	  %% Line 3117
	  <C>
	      when let <_cor297> =
		    call 'erlang':'>='
			(_cor0, 12549)
		in  let <_cor298> =
			call 'erlang':'=<'
			    (_cor0, 12588)
		    in  call 'erlang':'and'
			    (_cor297, _cor298) ->
	      'true'
	  %% Line 3118
	  <C>
	      when let <_cor299> =
		    call 'erlang':'>='
			(_cor0, 44032)
		in  let <_cor300> =
			call 'erlang':'=<'
			    (_cor0, 55203)
		    in  call 'erlang':'and'
			    (_cor299, _cor300) ->
	      'true'
	  %% Line 3119
	  <_cor302> when 'true' ->
	      %% Line 3120
	      'false'
	end
'is_ideographic'/1 =
    %% Line 3129
    fun (_cor0) ->
	case _cor0 of
	  <C>
	      when let <_cor1> =
		    call 'erlang':'>='
			(_cor0, 19968)
		in  let <_cor2> =
			call 'erlang':'=<'
			    (_cor0, 40869)
		    in  call 'erlang':'and'
			    (_cor1, _cor2) ->
	      'true'
	  %% Line 3130
	  <12295> when 'true' ->
	      'true'
	  %% Line 3131
	  <C>
	      when let <_cor3> =
		    call 'erlang':'>='
			(_cor0, 12321)
		in  let <_cor4> =
			call 'erlang':'=<'
			    (_cor0, 12329)
		    in  call 'erlang':'and'
			    (_cor3, _cor4) ->
	      'true'
	  %% Line 3132
	  <_cor6> when 'true' ->
	      %% Line 3133
	      'false'
	end
'is_combining_char'/1 =
    %% Line 3142
    fun (_cor0) ->
	case _cor0 of
	  <C>
	      when let <_cor1> =
		    call 'erlang':'>='
			(_cor0, 768)
		in  let <_cor2> =
			call 'erlang':'=<'
			    (_cor0, 837)
		    in  call 'erlang':'and'
			    (_cor1, _cor2) ->
	      'true'
	  %% Line 3143
	  <C>
	      when let <_cor3> =
		    call 'erlang':'>='
			(_cor0, 864)
		in  let <_cor4> =
			call 'erlang':'=<'
			    (_cor0, 865)
		    in  call 'erlang':'and'
			    (_cor3, _cor4) ->
	      'true'
	  %% Line 3144
	  <C>
	      when let <_cor5> =
		    call 'erlang':'>='
			(_cor0, 1155)
		in  let <_cor6> =
			call 'erlang':'=<'
			    (_cor0, 1158)
		    in  call 'erlang':'and'
			    (_cor5, _cor6) ->
	      'true'
	  %% Line 3145
	  <C>
	      when let <_cor7> =
		    call 'erlang':'>='
			(_cor0, 1425)
		in  let <_cor8> =
			call 'erlang':'=<'
			    (_cor0, 1441)
		    in  call 'erlang':'and'
			    (_cor7, _cor8) ->
	      'true'
	  %% Line 3146
	  <C>
	      when let <_cor9> =
		    call 'erlang':'>='
			(_cor0, 1443)
		in  let <_cor10> =
			call 'erlang':'=<'
			    (_cor0, 1465)
		    in  call 'erlang':'and'
			    (_cor9, _cor10) ->
	      'true'
	  %% Line 3147
	  <C>
	      when let <_cor11> =
		    call 'erlang':'>='
			(_cor0, 1467)
		in  let <_cor12> =
			call 'erlang':'=<'
			    (_cor0, 1469)
		    in  call 'erlang':'and'
			    (_cor11, _cor12) ->
	      'true'
	  %% Line 3148
	  <1471> when 'true' ->
	      'true'
	  %% Line 3149
	  <C>
	      when let <_cor13> =
		    call 'erlang':'>='
			(_cor0, 1473)
		in  let <_cor14> =
			call 'erlang':'=<'
			    (_cor0, 1474)
		    in  call 'erlang':'and'
			    (_cor13, _cor14) ->
	      'true'
	  %% Line 3150
	  <1476> when 'true' ->
	      'true'
	  %% Line 3151
	  <C>
	      when let <_cor15> =
		    call 'erlang':'>='
			(_cor0, 1611)
		in  let <_cor16> =
			call 'erlang':'=<'
			    (_cor0, 1618)
		    in  call 'erlang':'and'
			    (_cor15, _cor16) ->
	      'true'
	  %% Line 3152
	  <1648> when 'true' ->
	      'true'
	  %% Line 3153
	  <C>
	      when let <_cor17> =
		    call 'erlang':'>='
			(_cor0, 1750)
		in  let <_cor18> =
			call 'erlang':'=<'
			    (_cor0, 1756)
		    in  call 'erlang':'and'
			    (_cor17, _cor18) ->
	      'true'
	  %% Line 3154
	  <C>
	      when let <_cor19> =
		    call 'erlang':'>='
			(_cor0, 1757)
		in  let <_cor20> =
			call 'erlang':'=<'
			    (_cor0, 1759)
		    in  call 'erlang':'and'
			    (_cor19, _cor20) ->
	      'true'
	  %% Line 3155
	  <C>
	      when let <_cor21> =
		    call 'erlang':'>='
			(_cor0, 1760)
		in  let <_cor22> =
			call 'erlang':'=<'
			    (_cor0, 1764)
		    in  call 'erlang':'and'
			    (_cor21, _cor22) ->
	      'true'
	  %% Line 3156
	  <C>
	      when let <_cor23> =
		    call 'erlang':'>='
			(_cor0, 1767)
		in  let <_cor24> =
			call 'erlang':'=<'
			    (_cor0, 1768)
		    in  call 'erlang':'and'
			    (_cor23, _cor24) ->
	      'true'
	  %% Line 3157
	  <C>
	      when let <_cor25> =
		    call 'erlang':'>='
			(_cor0, 1770)
		in  let <_cor26> =
			call 'erlang':'=<'
			    (_cor0, 1773)
		    in  call 'erlang':'and'
			    (_cor25, _cor26) ->
	      'true'
	  %% Line 3158
	  <C>
	      when let <_cor27> =
		    call 'erlang':'>='
			(_cor0, 2305)
		in  let <_cor28> =
			call 'erlang':'=<'
			    (_cor0, 2307)
		    in  call 'erlang':'and'
			    (_cor27, _cor28) ->
	      'true'
	  %% Line 3159
	  <2364> when 'true' ->
	      'true'
	  %% Line 3160
	  <C>
	      when let <_cor29> =
		    call 'erlang':'>='
			(_cor0, 2366)
		in  let <_cor30> =
			call 'erlang':'=<'
			    (_cor0, 2380)
		    in  call 'erlang':'and'
			    (_cor29, _cor30) ->
	      'true'
	  %% Line 3161
	  <2381> when 'true' ->
	      'true'
	  %% Line 3162
	  <C>
	      when let <_cor31> =
		    call 'erlang':'>='
			(_cor0, 2385)
		in  let <_cor32> =
			call 'erlang':'=<'
			    (_cor0, 2388)
		    in  call 'erlang':'and'
			    (_cor31, _cor32) ->
	      'true'
	  %% Line 3163
	  <C>
	      when let <_cor33> =
		    call 'erlang':'>='
			(_cor0, 2402)
		in  let <_cor34> =
			call 'erlang':'=<'
			    (_cor0, 2403)
		    in  call 'erlang':'and'
			    (_cor33, _cor34) ->
	      'true'
	  %% Line 3164
	  <C>
	      when let <_cor35> =
		    call 'erlang':'>='
			(_cor0, 2433)
		in  let <_cor36> =
			call 'erlang':'=<'
			    (_cor0, 2435)
		    in  call 'erlang':'and'
			    (_cor35, _cor36) ->
	      'true'
	  %% Line 3165
	  <2492> when 'true' ->
	      'true'
	  %% Line 3166
	  <2494> when 'true' ->
	      'true'
	  %% Line 3167
	  <2495> when 'true' ->
	      'true'
	  %% Line 3168
	  <C>
	      when let <_cor37> =
		    call 'erlang':'>='
			(_cor0, 2496)
		in  let <_cor38> =
			call 'erlang':'=<'
			    (_cor0, 2500)
		    in  call 'erlang':'and'
			    (_cor37, _cor38) ->
	      'true'
	  %% Line 3169
	  <C>
	      when let <_cor39> =
		    call 'erlang':'>='
			(_cor0, 2503)
		in  let <_cor40> =
			call 'erlang':'=<'
			    (_cor0, 2504)
		    in  call 'erlang':'and'
			    (_cor39, _cor40) ->
	      'true'
	  %% Line 3170
	  <C>
	      when let <_cor41> =
		    call 'erlang':'>='
			(_cor0, 2507)
		in  let <_cor42> =
			call 'erlang':'=<'
			    (_cor0, 2509)
		    in  call 'erlang':'and'
			    (_cor41, _cor42) ->
	      'true'
	  %% Line 3171
	  <2519> when 'true' ->
	      'true'
	  %% Line 3172
	  <C>
	      when let <_cor43> =
		    call 'erlang':'>='
			(_cor0, 2530)
		in  let <_cor44> =
			call 'erlang':'=<'
			    (_cor0, 2531)
		    in  call 'erlang':'and'
			    (_cor43, _cor44) ->
	      'true'
	  %% Line 3173
	  <2562> when 'true' ->
	      'true'
	  %% Line 3174
	  <2620> when 'true' ->
	      'true'
	  %% Line 3175
	  <2622> when 'true' ->
	      'true'
	  %% Line 3176
	  <2623> when 'true' ->
	      'true'
	  %% Line 3177
	  <C>
	      when let <_cor45> =
		    call 'erlang':'>='
			(_cor0, 2624)
		in  let <_cor46> =
			call 'erlang':'=<'
			    (_cor0, 2626)
		    in  call 'erlang':'and'
			    (_cor45, _cor46) ->
	      'true'
	  %% Line 3178
	  <C>
	      when let <_cor47> =
		    call 'erlang':'>='
			(_cor0, 2631)
		in  let <_cor48> =
			call 'erlang':'=<'
			    (_cor0, 2632)
		    in  call 'erlang':'and'
			    (_cor47, _cor48) ->
	      'true'
	  %% Line 3179
	  <C>
	      when let <_cor49> =
		    call 'erlang':'>='
			(_cor0, 2635)
		in  let <_cor50> =
			call 'erlang':'=<'
			    (_cor0, 2637)
		    in  call 'erlang':'and'
			    (_cor49, _cor50) ->
	      'true'
	  %% Line 3180
	  <C>
	      when let <_cor51> =
		    call 'erlang':'>='
			(_cor0, 2672)
		in  let <_cor52> =
			call 'erlang':'=<'
			    (_cor0, 2673)
		    in  call 'erlang':'and'
			    (_cor51, _cor52) ->
	      'true'
	  %% Line 3181
	  <C>
	      when let <_cor53> =
		    call 'erlang':'>='
			(_cor0, 2689)
		in  let <_cor54> =
			call 'erlang':'=<'
			    (_cor0, 2691)
		    in  call 'erlang':'and'
			    (_cor53, _cor54) ->
	      'true'
	  %% Line 3182
	  <2748> when 'true' ->
	      'true'
	  %% Line 3183
	  <C>
	      when let <_cor55> =
		    call 'erlang':'>='
			(_cor0, 2750)
		in  let <_cor56> =
			call 'erlang':'=<'
			    (_cor0, 2757)
		    in  call 'erlang':'and'
			    (_cor55, _cor56) ->
	      'true'
	  %% Line 3184
	  <C>
	      when let <_cor57> =
		    call 'erlang':'>='
			(_cor0, 2759)
		in  let <_cor58> =
			call 'erlang':'=<'
			    (_cor0, 2761)
		    in  call 'erlang':'and'
			    (_cor57, _cor58) ->
	      'true'
	  %% Line 3185
	  <C>
	      when let <_cor59> =
		    call 'erlang':'>='
			(_cor0, 2763)
		in  let <_cor60> =
			call 'erlang':'=<'
			    (_cor0, 2765)
		    in  call 'erlang':'and'
			    (_cor59, _cor60) ->
	      'true'
	  %% Line 3186
	  <C>
	      when let <_cor61> =
		    call 'erlang':'>='
			(_cor0, 2817)
		in  let <_cor62> =
			call 'erlang':'=<'
			    (_cor0, 2819)
		    in  call 'erlang':'and'
			    (_cor61, _cor62) ->
	      'true'
	  %% Line 3187
	  <2876> when 'true' ->
	      'true'
	  %% Line 3188
	  <C>
	      when let <_cor63> =
		    call 'erlang':'>='
			(_cor0, 2878)
		in  let <_cor64> =
			call 'erlang':'=<'
			    (_cor0, 2883)
		    in  call 'erlang':'and'
			    (_cor63, _cor64) ->
	      'true'
	  %% Line 3189
	  <C>
	      when let <_cor65> =
		    call 'erlang':'>='
			(_cor0, 2887)
		in  let <_cor66> =
			call 'erlang':'=<'
			    (_cor0, 2888)
		    in  call 'erlang':'and'
			    (_cor65, _cor66) ->
	      'true'
	  %% Line 3190
	  <C>
	      when let <_cor67> =
		    call 'erlang':'>='
			(_cor0, 2891)
		in  let <_cor68> =
			call 'erlang':'=<'
			    (_cor0, 2893)
		    in  call 'erlang':'and'
			    (_cor67, _cor68) ->
	      'true'
	  %% Line 3191
	  <C>
	      when let <_cor69> =
		    call 'erlang':'>='
			(_cor0, 2902)
		in  let <_cor70> =
			call 'erlang':'=<'
			    (_cor0, 2903)
		    in  call 'erlang':'and'
			    (_cor69, _cor70) ->
	      'true'
	  %% Line 3192
	  <C>
	      when let <_cor71> =
		    call 'erlang':'>='
			(_cor0, 2946)
		in  let <_cor72> =
			call 'erlang':'=<'
			    (_cor0, 2947)
		    in  call 'erlang':'and'
			    (_cor71, _cor72) ->
	      'true'
	  %% Line 3193
	  <C>
	      when let <_cor73> =
		    call 'erlang':'>='
			(_cor0, 3006)
		in  let <_cor74> =
			call 'erlang':'=<'
			    (_cor0, 3010)
		    in  call 'erlang':'and'
			    (_cor73, _cor74) ->
	      'true'
	  %% Line 3194
	  <C>
	      when let <_cor75> =
		    call 'erlang':'>='
			(_cor0, 3014)
		in  let <_cor76> =
			call 'erlang':'=<'
			    (_cor0, 3016)
		    in  call 'erlang':'and'
			    (_cor75, _cor76) ->
	      'true'
	  %% Line 3195
	  <C>
	      when let <_cor77> =
		    call 'erlang':'>='
			(_cor0, 3018)
		in  let <_cor78> =
			call 'erlang':'=<'
			    (_cor0, 3021)
		    in  call 'erlang':'and'
			    (_cor77, _cor78) ->
	      'true'
	  %% Line 3196
	  <3031> when 'true' ->
	      'true'
	  %% Line 3197
	  <C>
	      when let <_cor79> =
		    call 'erlang':'>='
			(_cor0, 3073)
		in  let <_cor80> =
			call 'erlang':'=<'
			    (_cor0, 3075)
		    in  call 'erlang':'and'
			    (_cor79, _cor80) ->
	      'true'
	  %% Line 3198
	  <C>
	      when let <_cor81> =
		    call 'erlang':'>='
			(_cor0, 3134)
		in  let <_cor82> =
			call 'erlang':'=<'
			    (_cor0, 3140)
		    in  call 'erlang':'and'
			    (_cor81, _cor82) ->
	      'true'
	  %% Line 3199
	  <C>
	      when let <_cor83> =
		    call 'erlang':'>='
			(_cor0, 3142)
		in  let <_cor84> =
			call 'erlang':'=<'
			    (_cor0, 3144)
		    in  call 'erlang':'and'
			    (_cor83, _cor84) ->
	      'true'
	  %% Line 3200
	  <C>
	      when let <_cor85> =
		    call 'erlang':'>='
			(_cor0, 3146)
		in  let <_cor86> =
			call 'erlang':'=<'
			    (_cor0, 3149)
		    in  call 'erlang':'and'
			    (_cor85, _cor86) ->
	      'true'
	  %% Line 3201
	  <C>
	      when let <_cor87> =
		    call 'erlang':'>='
			(_cor0, 3157)
		in  let <_cor88> =
			call 'erlang':'=<'
			    (_cor0, 3158)
		    in  call 'erlang':'and'
			    (_cor87, _cor88) ->
	      'true'
	  %% Line 3202
	  <C>
	      when let <_cor89> =
		    call 'erlang':'>='
			(_cor0, 3202)
		in  let <_cor90> =
			call 'erlang':'=<'
			    (_cor0, 3203)
		    in  call 'erlang':'and'
			    (_cor89, _cor90) ->
	      'true'
	  %% Line 3203
	  <C>
	      when let <_cor91> =
		    call 'erlang':'>='
			(_cor0, 3262)
		in  let <_cor92> =
			call 'erlang':'=<'
			    (_cor0, 3268)
		    in  call 'erlang':'and'
			    (_cor91, _cor92) ->
	      'true'
	  %% Line 3204
	  <C>
	      when let <_cor93> =
		    call 'erlang':'>='
			(_cor0, 3270)
		in  let <_cor94> =
			call 'erlang':'=<'
			    (_cor0, 3272)
		    in  call 'erlang':'and'
			    (_cor93, _cor94) ->
	      'true'
	  %% Line 3205
	  <C>
	      when let <_cor95> =
		    call 'erlang':'>='
			(_cor0, 3274)
		in  let <_cor96> =
			call 'erlang':'=<'
			    (_cor0, 3277)
		    in  call 'erlang':'and'
			    (_cor95, _cor96) ->
	      'true'
	  %% Line 3206
	  <C>
	      when let <_cor97> =
		    call 'erlang':'>='
			(_cor0, 3285)
		in  let <_cor98> =
			call 'erlang':'=<'
			    (_cor0, 3286)
		    in  call 'erlang':'and'
			    (_cor97, _cor98) ->
	      'true'
	  %% Line 3207
	  <C>
	      when let <_cor99> =
		    call 'erlang':'>='
			(_cor0, 3330)
		in  let <_cor100> =
			call 'erlang':'=<'
			    (_cor0, 3331)
		    in  call 'erlang':'and'
			    (_cor99, _cor100) ->
	      'true'
	  %% Line 3208
	  <C>
	      when let <_cor101> =
		    call 'erlang':'>='
			(_cor0, 3390)
		in  let <_cor102> =
			call 'erlang':'=<'
			    (_cor0, 3395)
		    in  call 'erlang':'and'
			    (_cor101, _cor102) ->
	      'true'
	  %% Line 3209
	  <C>
	      when let <_cor103> =
		    call 'erlang':'>='
			(_cor0, 3398)
		in  let <_cor104> =
			call 'erlang':'=<'
			    (_cor0, 3400)
		    in  call 'erlang':'and'
			    (_cor103, _cor104) ->
	      'true'
	  %% Line 3210
	  <C>
	      when let <_cor105> =
		    call 'erlang':'>='
			(_cor0, 3402)
		in  let <_cor106> =
			call 'erlang':'=<'
			    (_cor0, 3405)
		    in  call 'erlang':'and'
			    (_cor105, _cor106) ->
	      'true'
	  %% Line 3211
	  <3415> when 'true' ->
	      'true'
	  %% Line 3212
	  <3633> when 'true' ->
	      'true'
	  %% Line 3213
	  <C>
	      when let <_cor107> =
		    call 'erlang':'>='
			(_cor0, 3636)
		in  let <_cor108> =
			call 'erlang':'=<'
			    (_cor0, 3642)
		    in  call 'erlang':'and'
			    (_cor107, _cor108) ->
	      'true'
	  %% Line 3214
	  <C>
	      when let <_cor109> =
		    call 'erlang':'>='
			(_cor0, 3655)
		in  let <_cor110> =
			call 'erlang':'=<'
			    (_cor0, 3662)
		    in  call 'erlang':'and'
			    (_cor109, _cor110) ->
	      'true'
	  %% Line 3215
	  <3761> when 'true' ->
	      'true'
	  %% Line 3216
	  <C>
	      when let <_cor111> =
		    call 'erlang':'>='
			(_cor0, 3764)
		in  let <_cor112> =
			call 'erlang':'=<'
			    (_cor0, 3769)
		    in  call 'erlang':'and'
			    (_cor111, _cor112) ->
	      'true'
	  %% Line 3217
	  <C>
	      when let <_cor113> =
		    call 'erlang':'>='
			(_cor0, 3771)
		in  let <_cor114> =
			call 'erlang':'=<'
			    (_cor0, 3772)
		    in  call 'erlang':'and'
			    (_cor113, _cor114) ->
	      'true'
	  %% Line 3218
	  <C>
	      when let <_cor115> =
		    call 'erlang':'>='
			(_cor0, 3784)
		in  let <_cor116> =
			call 'erlang':'=<'
			    (_cor0, 3789)
		    in  call 'erlang':'and'
			    (_cor115, _cor116) ->
	      'true'
	  %% Line 3219
	  <C>
	      when let <_cor117> =
		    call 'erlang':'>='
			(_cor0, 3864)
		in  let <_cor118> =
			call 'erlang':'=<'
			    (_cor0, 3865)
		    in  call 'erlang':'and'
			    (_cor117, _cor118) ->
	      'true'
	  %% Line 3220
	  <3893> when 'true' ->
	      'true'
	  %% Line 3221
	  <3895> when 'true' ->
	      'true'
	  %% Line 3222
	  <3897> when 'true' ->
	      'true'
	  %% Line 3223
	  <3902> when 'true' ->
	      'true'
	  %% Line 3224
	  <3903> when 'true' ->
	      'true'
	  %% Line 3225
	  <C>
	      when let <_cor119> =
		    call 'erlang':'>='
			(_cor0, 3953)
		in  let <_cor120> =
			call 'erlang':'=<'
			    (_cor0, 3972)
		    in  call 'erlang':'and'
			    (_cor119, _cor120) ->
	      'true'
	  %% Line 3226
	  <C>
	      when let <_cor121> =
		    call 'erlang':'>='
			(_cor0, 3974)
		in  let <_cor122> =
			call 'erlang':'=<'
			    (_cor0, 3979)
		    in  call 'erlang':'and'
			    (_cor121, _cor122) ->
	      'true'
	  %% Line 3227
	  <C>
	      when let <_cor123> =
		    call 'erlang':'>='
			(_cor0, 3984)
		in  let <_cor124> =
			call 'erlang':'=<'
			    (_cor0, 3989)
		    in  call 'erlang':'and'
			    (_cor123, _cor124) ->
	      'true'
	  %% Line 3228
	  <3991> when 'true' ->
	      'true'
	  %% Line 3229
	  <C>
	      when let <_cor125> =
		    call 'erlang':'>='
			(_cor0, 3993)
		in  let <_cor126> =
			call 'erlang':'=<'
			    (_cor0, 4013)
		    in  call 'erlang':'and'
			    (_cor125, _cor126) ->
	      'true'
	  %% Line 3230
	  <C>
	      when let <_cor127> =
		    call 'erlang':'>='
			(_cor0, 4017)
		in  let <_cor128> =
			call 'erlang':'=<'
			    (_cor0, 4023)
		    in  call 'erlang':'and'
			    (_cor127, _cor128) ->
	      'true'
	  %% Line 3231
	  <4025> when 'true' ->
	      'true'
	  %% Line 3232
	  <C>
	      when let <_cor129> =
		    call 'erlang':'>='
			(_cor0, 8400)
		in  let <_cor130> =
			call 'erlang':'=<'
			    (_cor0, 8412)
		    in  call 'erlang':'and'
			    (_cor129, _cor130) ->
	      'true'
	  %% Line 3233
	  <8417> when 'true' ->
	      'true'
	  %% Line 3234
	  <C>
	      when let <_cor131> =
		    call 'erlang':'>='
			(_cor0, 12330)
		in  let <_cor132> =
			call 'erlang':'=<'
			    (_cor0, 12335)
		    in  call 'erlang':'and'
			    (_cor131, _cor132) ->
	      'true'
	  %% Line 3235
	  <12441> when 'true' ->
	      'true'
	  %% Line 3236
	  <12442> when 'true' ->
	      'true'
	  %% Line 3237
	  <_cor134> when 'true' ->
	      'false'
	end
'is_digit'/1 =
    %% Line 3247
    fun (_cor0) ->
	case _cor0 of
	  <C>
	      when let <_cor1> =
		    call 'erlang':'>='
			(_cor0, 48)
		in  let <_cor2> =
			call 'erlang':'=<'
			    (_cor0, 57)
		    in  call 'erlang':'and'
			    (_cor1, _cor2) ->
	      'true'
	  %% Line 3248
	  <C>
	      when let <_cor3> =
		    call 'erlang':'>='
			(_cor0, 1632)
		in  let <_cor4> =
			call 'erlang':'=<'
			    (_cor0, 1641)
		    in  call 'erlang':'and'
			    (_cor3, _cor4) ->
	      'true'
	  %% Line 3249
	  <C>
	      when let <_cor5> =
		    call 'erlang':'>='
			(_cor0, 1776)
		in  let <_cor6> =
			call 'erlang':'=<'
			    (_cor0, 1785)
		    in  call 'erlang':'and'
			    (_cor5, _cor6) ->
	      'true'
	  %% Line 3250
	  <C>
	      when let <_cor7> =
		    call 'erlang':'>='
			(_cor0, 2406)
		in  let <_cor8> =
			call 'erlang':'=<'
			    (_cor0, 2415)
		    in  call 'erlang':'and'
			    (_cor7, _cor8) ->
	      'true'
	  %% Line 3251
	  <C>
	      when let <_cor9> =
		    call 'erlang':'>='
			(_cor0, 2534)
		in  let <_cor10> =
			call 'erlang':'=<'
			    (_cor0, 2543)
		    in  call 'erlang':'and'
			    (_cor9, _cor10) ->
	      'true'
	  %% Line 3252
	  <C>
	      when let <_cor11> =
		    call 'erlang':'>='
			(_cor0, 2662)
		in  let <_cor12> =
			call 'erlang':'=<'
			    (_cor0, 2671)
		    in  call 'erlang':'and'
			    (_cor11, _cor12) ->
	      'true'
	  %% Line 3253
	  <C>
	      when let <_cor13> =
		    call 'erlang':'>='
			(_cor0, 2790)
		in  let <_cor14> =
			call 'erlang':'=<'
			    (_cor0, 2799)
		    in  call 'erlang':'and'
			    (_cor13, _cor14) ->
	      'true'
	  %% Line 3254
	  <C>
	      when let <_cor15> =
		    call 'erlang':'>='
			(_cor0, 2918)
		in  let <_cor16> =
			call 'erlang':'=<'
			    (_cor0, 2927)
		    in  call 'erlang':'and'
			    (_cor15, _cor16) ->
	      'true'
	  %% Line 3255
	  <C>
	      when let <_cor17> =
		    call 'erlang':'>='
			(_cor0, 3047)
		in  let <_cor18> =
			call 'erlang':'=<'
			    (_cor0, 3055)
		    in  call 'erlang':'and'
			    (_cor17, _cor18) ->
	      'true'
	  %% Line 3256
	  <C>
	      when let <_cor19> =
		    call 'erlang':'>='
			(_cor0, 3174)
		in  let <_cor20> =
			call 'erlang':'=<'
			    (_cor0, 3183)
		    in  call 'erlang':'and'
			    (_cor19, _cor20) ->
	      'true'
	  %% Line 3257
	  <C>
	      when let <_cor21> =
		    call 'erlang':'>='
			(_cor0, 3302)
		in  let <_cor22> =
			call 'erlang':'=<'
			    (_cor0, 3311)
		    in  call 'erlang':'and'
			    (_cor21, _cor22) ->
	      'true'
	  %% Line 3258
	  <C>
	      when let <_cor23> =
		    call 'erlang':'>='
			(_cor0, 3430)
		in  let <_cor24> =
			call 'erlang':'=<'
			    (_cor0, 3439)
		    in  call 'erlang':'and'
			    (_cor23, _cor24) ->
	      'true'
	  %% Line 3259
	  <C>
	      when let <_cor25> =
		    call 'erlang':'>='
			(_cor0, 3664)
		in  let <_cor26> =
			call 'erlang':'=<'
			    (_cor0, 3673)
		    in  call 'erlang':'and'
			    (_cor25, _cor26) ->
	      'true'
	  %% Line 3260
	  <C>
	      when let <_cor27> =
		    call 'erlang':'>='
			(_cor0, 3792)
		in  let <_cor28> =
			call 'erlang':'=<'
			    (_cor0, 3801)
		    in  call 'erlang':'and'
			    (_cor27, _cor28) ->
	      'true'
	  %% Line 3261
	  <C>
	      when let <_cor29> =
		    call 'erlang':'>='
			(_cor0, 3872)
		in  let <_cor30> =
			call 'erlang':'=<'
			    (_cor0, 3881)
		    in  call 'erlang':'and'
			    (_cor29, _cor30) ->
	      'true'
	  %% Line 3262
	  <_cor32> when 'true' ->
	      'false'
	end
'is_extender'/1 =
    %% Line 3272
    fun (_cor0) ->
	case _cor0 of
	  <183> when 'true' ->
	      'true'
	  %% Line 3273
	  <720> when 'true' ->
	      'true'
	  %% Line 3274
	  <721> when 'true' ->
	      'true'
	  %% Line 3275
	  <903> when 'true' ->
	      'true'
	  %% Line 3276
	  <1600> when 'true' ->
	      'true'
	  %% Line 3277
	  <3654> when 'true' ->
	      'true'
	  %% Line 3278
	  <3782> when 'true' ->
	      'true'
	  %% Line 3279
	  <12293> when 'true' ->
	      'true'
	  %% Line 3280
	  <C>
	      when let <_cor1> =
		    call 'erlang':'>='
			(_cor0, 12337)
		in  let <_cor2> =
			call 'erlang':'=<'
			    (_cor0, 12341)
		    in  call 'erlang':'and'
			    (_cor1, _cor2) ->
	      'true'
	  %% Line 3281
	  <C>
	      when let <_cor3> =
		    call 'erlang':'>='
			(_cor0, 12445)
		in  let <_cor4> =
			call 'erlang':'=<'
			    (_cor0, 12446)
		    in  call 'erlang':'and'
			    (_cor3, _cor4) ->
	      'true'
	  %% Line 3282
	  <C>
	      when let <_cor5> =
		    call 'erlang':'>='
			(_cor0, 12540)
		in  let <_cor6> =
			call 'erlang':'=<'
			    (_cor0, 12542)
		    in  call 'erlang':'and'
			    (_cor5, _cor6) ->
	      'true'
	  %% Line 3283
	  <_cor8> when 'true' ->
	      'false'
	end
'event_callback'/2 =
    %% Line 3297
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Event,State = %% Line 3298
			 {'xmerl_sax_parser_state',%% Line 3300
						   EventState,%% Line 3299
							      CbFun,_cor11,_cor12,_cor13,%% Line 3301
											 N,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,%% Line 3303
																	    L,%% Line 3302
																	      E,_cor21,_cor22}> when 'true' ->
	      %% Line 3305
	      try
		  let <NewEventState> =
		      %% Line 3306
		      apply CbFun
			  (Event, {L,E,N}, EventState)
		  in  %% Line 3307
		      call 'erlang':'setelement'
			  (2, State, NewEventState)
	      of <_cor5> ->
		  _cor5
	      catch <_cor8,_cor7,_cor6> ->
		  case <_cor8,_cor7,_cor6> of
		    %% Line 3309
		    <'throw',ErrorTerm,_cor41> when 'true' ->
			%% Line 3310
			call 'erlang':'throw'
			    ({'event_receiver_error',State,ErrorTerm})
		    %% Line 3311
		    <'exit',Reason,_cor42> when 'true' ->
			%% Line 3312
			call 'erlang':'throw'
			    ({'event_receiver_error',State,{'EXIT',Reason}})
		    ( <_cor8,_cor7,_cor6> when 'true' ->
			  primop 'raise'
			      (_cor6, _cor7)
		      -| ['compiler_generated'] )
		  end
	  ( <_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9})
		  -| [{'function_name',{'event_callback',2}}] )
	    -| ['compiler_generated'] )
	end
'cf'/3 =
    %% Line 3324
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <_X_Rest,State = {'xmerl_sax_parser_state',_cor17,_cor18,_cor19,'undefined',_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32},_cor33> when 'true' ->
	      %% Line 3325
	      call 'erlang':'throw'
		  ({'fatal_error',{State,[67|[111|[110|[116|[105|[110|[117|[97|[116|[105|[111|[110|[32|[102|[117|[110|[99|[116|[105|[111|[110|[32|[117|[110|[100|[101|[102|[105|[110|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}})
	  %% Line 3326
	  <Rest,State = {'xmerl_sax_parser_state',_cor34,_cor35,CState,CFun,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48},%% Line 3327
																					NextCall> when 'true' ->
	      let <_cor7> =
		  %% Line 3329
		  try
		      %% Line 3330
		      apply CFun
			  (CState)
		  of <_cor3> ->
		      _cor3
		  catch <_cor6,_cor5,_cor4> ->
		      case <_cor6,_cor5,_cor4> of
			%% Line 3332
			<'throw',ErrorTerm,_cor49> when 'true' ->
			    %% Line 3333
			    call 'erlang':'throw'
				({'fatal_error',{State,ErrorTerm}})
			%% Line 3334
			<'exit',Reason,_cor50> when 'true' ->
			    %% Line 3335
			    call 'erlang':'throw'
				({'fatal_error',{State,{'EXIT',Reason}}})
			( <_cor6,_cor5,_cor4> when 'true' ->
			      primop 'raise'
				  (_cor4, _cor5)
			  -| ['compiler_generated'] )
		      end
	      in  %% Line 3337
		  case _cor7 of
		    %% Line 3338
		    <{#{}#,_cor51}> when 'true' ->
			%% Line 3339
			call 'erlang':'throw'
			    ({'fatal_error',{State,[78|[111|[32|[109|[111|[114|[101|[32|[98|[121|[116|[101|[115]]]]]]]]]]]]]}})
		    %% Line 3340
		    <{NewBytes,NewContState}> when 'true' ->
			let <_cor12> =
			    %% Line 3341
			    #{#<Rest>('all',8,'binary',['unsigned'|['big']]),
			      #<NewBytes>('all',8,'binary',['unsigned'|['big']])}#
			in  let <_cor11> =
				%% Line 3342
				call 'erlang':'setelement'
				    (4, State, NewContState)
			    in  %% Line 3341
				apply NextCall
				    (_cor12, _cor11)
		    ( <_cor13> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor13})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor16,_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15,_cor14})
		  -| [{'function_name',{'cf',3}}] )
	    -| ['compiler_generated'] )
	end
'cf'/4 =
    %% Line 3355
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <_X_Rest,State = {'xmerl_sax_parser_state',_cor19,_cor20,_cor21,'undefined',_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34},_X_P,_cor35> when 'true' ->
	      %% Line 3356
	      call 'erlang':'throw'
		  ({'fatal_error',{State,[67|[111|[110|[116|[105|[110|[117|[97|[116|[105|[111|[110|[32|[102|[117|[110|[99|[116|[105|[111|[110|[32|[117|[110|[100|[101|[102|[105|[110|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}})
	  %% Line 3357
	  <Rest,State = {'xmerl_sax_parser_state',_cor36,_cor37,CState,CFun,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50},%% Line 3358
																					P,%% Line 3358
																					  NextCall> when 'true' ->
	      let <_cor8> =
		  %% Line 3360
		  try
		      %% Line 3361
		      apply CFun
			  (CState)
		  of <_cor4> ->
		      _cor4
		  catch <_cor7,_cor6,_cor5> ->
		      case <_cor7,_cor6,_cor5> of
			%% Line 3363
			<'throw',ErrorTerm,_cor51> when 'true' ->
			    %% Line 3364
			    call 'erlang':'throw'
				({'fatal_error',{State,ErrorTerm}})
			%% Line 3365
			<'exit',Reason,_cor52> when 'true' ->
			    %% Line 3366
			    call 'erlang':'throw'
				({'fatal_error',{State,{'EXIT',Reason}}})
			( <_cor7,_cor6,_cor5> when 'true' ->
			      primop 'raise'
				  (_cor5, _cor6)
			  -| ['compiler_generated'] )
		      end
	      in  %% Line 3368
		  case _cor8 of
		    %% Line 3369
		    <{#{}#,_cor53}> when 'true' ->
			%% Line 3370
			call 'erlang':'throw'
			    ({'fatal_error',{State,[78|[111|[32|[109|[111|[114|[101|[32|[98|[121|[116|[101|[115]]]]]]]]]]]]]}})
		    %% Line 3371
		    <{NewBytes,NewContState}> when 'true' ->
			let <_cor13> =
			    %% Line 3372
			    #{#<Rest>('all',8,'binary',['unsigned'|['big']]),
			      #<NewBytes>('all',8,'binary',['unsigned'|['big']])}#
			in  let <_cor12> =
				%% Line 3373
				call 'erlang':'setelement'
				    (4, State, NewContState)
			    in  %% Line 3372
				apply NextCall
				    (_cor13, _cor12, %% Line 3374
						     P)
		    ( <_cor14> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor14})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor18,_cor17,_cor16,_cor15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor18,_cor17,_cor16,_cor15})
		  -| [{'function_name',{'cf',4}}] )
	    -| ['compiler_generated'] )
	end
'cf'/5 =
    %% Line 3390
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <_X_Rest,State = {'xmerl_sax_parser_state',_cor21,_cor22,_cor23,'undefined',_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36},_X_P1,_X_P2,_cor37> when 'true' ->
	      %% Line 3391
	      call 'erlang':'throw'
		  ({'fatal_error',{State,[67|[111|[110|[116|[105|[110|[117|[97|[116|[105|[111|[110|[32|[102|[117|[110|[99|[116|[105|[111|[110|[32|[117|[110|[100|[101|[102|[105|[110|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}})
	  %% Line 3392
	  <Rest,State = {'xmerl_sax_parser_state',_cor38,_cor39,CState,CFun,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52},%% Line 3393
																					P1,%% Line 3393
																					   P2,%% Line 3393
																					      NextCall> when 'true' ->
	      let <_cor9> =
		  %% Line 3395
		  try
		      %% Line 3396
		      apply CFun
			  (CState)
		  of <_cor5> ->
		      _cor5
		  catch <_cor8,_cor7,_cor6> ->
		      case <_cor8,_cor7,_cor6> of
			%% Line 3398
			<'throw',ErrorTerm,_cor53> when 'true' ->
			    %% Line 3399
			    call 'erlang':'throw'
				({'fatal_error',{State,ErrorTerm}})
			%% Line 3400
			<'exit',Reason,_cor54> when 'true' ->
			    %% Line 3401
			    call 'erlang':'throw'
				({'fatal_error',{State,{'EXIT',Reason}}})
			( <_cor8,_cor7,_cor6> when 'true' ->
			      primop 'raise'
				  (_cor6, _cor7)
			  -| ['compiler_generated'] )
		      end
	      in  %% Line 3403
		  case _cor9 of
		    %% Line 3404
		    <{#{}#,_cor55}> when 'true' ->
			%% Line 3405
			call 'erlang':'throw'
			    ({'fatal_error',{State,[78|[111|[32|[109|[111|[114|[101|[32|[98|[121|[116|[101|[115]]]]]]]]]]]]]}})
		    %% Line 3406
		    <{NewBytes,NewContState}> when 'true' ->
			let <_cor14> =
			    %% Line 3407
			    #{#<Rest>('all',8,'binary',['unsigned'|['big']]),
			      #<NewBytes>('all',8,'binary',['unsigned'|['big']])}#
			in  let <_cor13> =
				%% Line 3408
				call 'erlang':'setelement'
				    (4, State, NewContState)
			    in  %% Line 3407
				apply NextCall
				    (_cor14, _cor13, %% Line 3409
						     P1, %% Line 3409
							 P2)
		    ( <_cor15> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor15})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor20,_cor19,_cor18,_cor17,_cor16> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor20,_cor19,_cor18,_cor17,_cor16})
		  -| [{'function_name',{'cf',5}}] )
	    -| ['compiler_generated'] )
	end
'unicode_incomplete_check'/2 =
    %% Line 3424
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Args = [Bytes|[State = {'xmerl_sax_parser_state',_cor9,_cor10,_cor11,_cor12,Enc,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24}|_cor25]],ErrString>
	      when call 'erlang':'is_binary'
		    (Bytes) ->
	      %% Line 3425
	      case call 'unicode':'characters_to_list'
		       (Bytes, Enc) of
		%% Line 3426
		<{'incomplete',_cor26,_cor27}> when 'true' ->
		    %% Line 3427
		    call 'erlang':'apply'
			('xmerl_sax_parser_utf8', 'cf', Args)
		%% Line 3428
		<{'error',_X_Encoded,_X_Rest}> when 'true' ->
		    let <_cor2> =
			%% Line 3429
			call 'io_lib':'format'
			    ([66|[97|[100|[32|[99|[104|[97|[114|[97|[99|[116|[101|[114|[44|[32|[110|[111|[116|[32|[105|[110|[32|[126|[112|[10]]]]]]]]]]]]]]]]]]]]]]]]], [Enc|[]])
		    in  let <_cor3> =
			    %% Line 3429
			    call 'lists':'flatten'
				(_cor2)
			in  %% Line 3429
			    call 'erlang':'throw'
				({'fatal_error',{State,_cor3}})
		%% Line 3430
		<_cor28>
		    when call 'erlang':'=/='
			  (ErrString,
			   'undefined') ->
		    %% Line 3431
		    call 'erlang':'throw'
			({'fatal_error',{State,ErrString}})
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 3433
	  <[Bytes|[State|_cor29]],ErrString>
	      when let <_cor5> =
		    call 'erlang':'is_list'
			(Bytes)
		in  let <_cor6> =
			call 'erlang':'=/='
			    (ErrString, 'undefined')
		    in  call 'erlang':'and'
			    (_cor5, _cor6) ->
	      %% Line 3434
	      call 'erlang':'throw'
		  ({'fatal_error',{State,ErrString}})
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'unicode_incomplete_check',2}}] )
	    -| ['compiler_generated'] )
	end
'check_uri'/2 =
    %% Line 3444
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Url = [104|[116|[116|[112|[58|[47|[47|_cor20]]]]]]],_X_CL> when 'true' ->
	      %% Line 3445
	      {'http',Url}
	  %% Line 3446
	  <[102|[105|[108|[101|[58|[47|[47|Path]]]]]]],_X_CL> when 'true' ->
	      %% Line 3447
	      {'file',Path}
	  %% Line 3448
	  <Path,CL> when 'true' ->
	      let <Tag> =
		  %% Line 3450
		  apply 'get_uri_tag'/1
		      (CL)
	      in  %% Line 3451
		  case call 'filename':'pathtype'
			   (Path) of
		    %% Line 3452
		    <'relative'> when 'true' ->
			%% Line 3453
			case Tag of
			  %% Line 3454
			  <'false'> when 'true' ->
			      let <_cor3> =
				  %% Line 3455
				  call 'filename':'join'
				      (CL, Path)
			      in  %% Line 3455
				  {'file',_cor3}
			  %% Line 3456
			  <T> when 'true' ->
			      let <_cor4> =
				  %% Line 3457
				  [47|Path]
			      in  let <_cor5> =
				      %% Line 3457
				      call 'erlang':'++'
					  (CL, _cor4)
				  in  %% Line 3457
				      {T,_cor5}
			end
		    %% Line 3459
		    <'absolute'> when 'true' ->
			%% Line 3460
			case Tag of
			  %% Line 3461
			  <'false'> when 'true' ->
			      let <_cor7> =
				  %% Line 3462
				  call 'filename':'absname'
				      (Path)
			      in  %% Line 3462
				  {'file',_cor7}
			  %% Line 3463
			  <T> when 'true' ->
			      let <_cor8> =
				  %% Line 3464
				  [47|Path]
			      in  let <_cor9> =
				      %% Line 3464
				      call 'erlang':'++'
					  (CL, _cor8)
				  in  %% Line 3464
				      {T,_cor9}
			end
		    %% Line 3466
		    <'volumerelative'> when 'true' ->
			%% Line 3467
			case Tag of
			  %% Line 3468
			  <'false'> when 'true' ->
			      %% Line 3469
			      case call 're':'split'
				       (CL, [58], [{'return','list'}]) of
				<[Vol|_cor21]> when 'true' ->
				    let <_cor12> =
					%% Line 3470
					call 'erlang':'++'
					    (Vol, [58])
				    in  let <_cor13> =
					    %% Line 3470
					    call 'filename':'join'
						(_cor12, Path)
					in  %% Line 3470
					    {'file',_cor13}
				( <_cor11> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor11})
				  -| ['compiler_generated'] )
			      end
			  %% Line 3471
			  <T> when 'true' ->
			      let <_cor14> =
				  %% Line 3472
				  [47|Path]
			      in  let <_cor15> =
				      %% Line 3472
				      call 'erlang':'++'
					  (CL, _cor14)
				  in  %% Line 3472
				      {T,_cor15}
			end
		    ( <_cor17> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor17})
		      -| ['compiler_generated'] )
		  end
	end
'get_uri_tag'/1 =
    %% Line 3482
    fun (_cor0) ->
	%% Line 3483
	case call 're':'split'
		 (_cor0, [58|[47|[47]]], [{'return','list'}]) of
	  %% Line 3484
	  <[Tag|[_cor3|[]]]> when 'true' ->
	      %% Line 3485
	      call 'erlang':'list_to_atom'
		  (Tag)
	  %% Line 3486
	  <[_cor4|[]]> when 'true' ->
	      %% Line 3487
	      'false'
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor1})
	    -| ['compiler_generated'] )
	end
'http_get_file'/3 =
    %% Line 3498
    fun (_cor2,_cor1,_cor0) ->
	let <FilenameTempl> =
	    %% Line 3501
	    call 'filename':'basename'
		(_cor0)
	in  %% Line 3503
	    case apply 'create_tempfile'/1
		     (FilenameTempl) of
	      <{Filename,FD}> when 'true' ->
		  let <Socket> =
		      %% Line 3504
		      apply 'create_connection'/3
			  (_cor2, _cor1, 10000)
		  in  let <_cor8> =
			  %% Line 3505
			  call 'erlang':'++'
			      (_cor0, [32|[72|[84|[84|[80|[47|[49|[46|[48|[13|[10|[13|[10]]]]]]]]]]]]])
		      in  let <Request> =
			      %% Line 3505
			      [71|[69|[84|[32|_cor8]]]]
			  in  do  %% Line 3507
				  case call 'gen_tcp':'send'
					   (Socket, Request) of
				    %% Line 3508
				    <'ok'> when 'true' ->
					%% Line 3509
					try
					    %% Line 3510
					    apply 'receive_msg'/4
						(Socket, FD, 'true', 10000)
					of <_cor10> ->
					    _cor10
					catch <_cor13,_cor12,_cor11> ->
					    case <_cor13,_cor12,_cor11> of
					      %% Line 3512
					      <'throw',{'error',Error},_cor20> when 'true' ->
						  do  %% Line 3513
						      call 'file':'close'
							  (FD)
						      do  %% Line 3514
							  call 'file':'delete'
							      (Filename)
							  %% Line 3515
							  call 'erlang':'throw'
							      ({'error',Error})
					      ( <_cor13,_cor12,_cor11> when 'true' ->
						    primop 'raise'
							(_cor11, _cor12)
						-| ['compiler_generated'] )
					    end
				    %% Line 3517
				    <{'error',_X_Reason}> when 'true' ->
					do  %% Line 3518
					    call 'file':'close'
						(FD)
					    do  %% Line 3519
						call 'file':'delete'
						    (Filename)
						let <_cor14> =
						    %% Line 3520
						    call 'io_lib':'format'
							([67|[111|[117|[108|[100|[110|[39|[116|[32|[102|[101|[116|[99|[104|[32|[104|[116|[116|[112|[58|[47|[47|[126|[115|[58|[126|[112|[47|[126|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 3521
																												    [_cor2|[_cor1|[_cor0|[]]]])
						in  let <_cor15> =
							%% Line 3520
							call 'lists':'flatten'
							    (_cor14)
						    in  %% Line 3520
							call 'erlang':'throw'
							    ({'error',_cor15})
				    ( <_cor16> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_cor16})
				      -| ['compiler_generated'] )
				  end
				  do  %% Line 3523
				      call 'file':'close'
					  (FD)
				      %% Line 3524
				      Filename
	      ( <_cor6> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor6})
		-| ['compiler_generated'] )
	    end
'receive_msg'/4 =
    %% Line 3535
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 3536
	receive
	  %% Line 3537
	  <{'tcp_closed',_cor9}>
	      when call 'erlang':'=:='
		    (_cor9,
		     _cor3) ->
	      %% Line 3538
	      'ok'
	  %% Line 3539
	  <{'tcp',_cor10,Response}>
	      when let <_cor11> =
		    call 'erlang':'=:='
			(_cor10, _cor3)
		in  let <_cor12> =
			call 'erlang':'=:='
			    (_cor1, 'false')
		    in  call 'erlang':'and'
			    (_cor11, _cor12) ->
	      do  %% Line 3540
		  call 'file':'write'
		      (_cor2, Response)
		  %% Line 3541
		  apply 'receive_msg'/4
		      (_cor3, _cor2, _cor1, _cor0)
	  %% Line 3542
	  <{'tcp',_cor13,Response}>
	      when call 'erlang':'=:='
		    (_cor13,
		     _cor3) ->
	      let <MsgBody> =
		  %% Line 3543
		  apply 'remove_header'/1
		      (Response)
	      in  do  %% Line 3544
		      call 'file':'write'
			  (_cor2, MsgBody)
		      %% Line 3545
		      apply 'receive_msg'/4
			  (_cor3, _cor2, 'false', _cor0)
	  %% Line 3546
	  <{'tcp_error',_cor14,_X_Reason}>
	      when call 'erlang':'=:='
		    (_cor14,
		     _cor3) ->
	      do  %% Line 3547
		  call 'gen_tcp':'close'
		      (_cor3)
		  %% Line 3548
		  call 'erlang':'throw'
		      ({'error',[104|[116|[116|[112|[32|[99|[111|[110|[110|[101|[99|[116|[105|[111|[110|[32|[102|[97|[105|[108|[101|[100]]]]]]]]]]]]]]]]]]]]]]})
	after _cor0 ->
	  do  %% Line 3550
	      call 'gen_tcp':'close'
		  (_cor3)
	      %% Line 3551
	      call 'erlang':'throw'
		  ({'error',[104|[116|[116|[112|[32|[99|[111|[110|[110|[101|[99|[116|[105|[111|[110|[32|[116|[105|[109|[101|[100|[111|[117|[116]]]]]]]]]]]]]]]]]]]]]]]]})
'remove_header'/1 =
    %% Line 3555
    fun (_cor0) ->
	case ( _cor0
	       -| ['reuse_for_context'] ) of
	  <#{#<13>(8,1,'integer',['unsigned'|['big']]),
	     #<10>(8,1,'integer',['unsigned'|['big']]),
	     #<13>(8,1,'integer',['unsigned'|['big']]),
	     #<10>(8,1,'integer',['unsigned'|['big']]),
	     #<MsgBody>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      %% Line 3556
	      MsgBody
	  %% Line 3557
	  <#{#<_X_C>(8,1,'integer',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      %% Line 3558
	      apply 'remove_header'/1
		  (Rest)
	  ( <_cor1> when 'true' ->
		do  primop 'bs_context_to_binary'
			(_cor1)
		    ( primop 'match_fail'
			  ({'function_clause',_cor1})
		      -| [{'function_name',{'remove_header',1}}] )
	    -| ['compiler_generated'] )
	end
'create_connection'/3 =
    %% Line 3568
    fun (_cor2,_cor1,_cor0) ->
	%% Line 3569
	case call 'gen_tcp':'connect'
		 (_cor2, _cor1, [{'packet',0}|['binary'|[{'reuseaddr','true'}]]], _cor0) of
	  %% Line 3570
	  <{'ok',Socket}> when 'true' ->
	      %% Line 3571
	      Socket
	  %% Line 3572
	  <{'error',Reason}> when 'true' ->
	      let <_cor3> =
		  %% Line 3573
		  call 'io_lib':'format'
		      ([67|[97|[110|[39|[116|[32|[99|[111|[110|[110|[101|[99|[116|[32|[116|[111|[32|[126|[115|[58|[126|[112|[32|[126|[112|[10]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 3574
																					 [_cor2|[_cor1|[Reason|[]]]])
	      in  let <_cor4> =
		      %% Line 3573
		      call 'lists':'flatten'
			  (_cor3)
		  in  %% Line 3573
		      call 'erlang':'throw'
			  ({'error',_cor4})
	  ( <_cor5> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor5})
	    -| ['compiler_generated'] )
	end
'http'/1 =
    %% Line 3583
    fun (_cor0) ->
	case _cor0 of
	  <[104|[116|[116|[112|[58|[47|[47|Address]]]]]]]> when 'true' ->
	      %% Line 3584
	      case call 'string':'tokens'
		       (Address, [58]) of
		%% Line 3585
		<[Host|[Rest|[]]]> when 'true' ->
		    %% Line 3587
		    case apply 'split_to_slash'/2
			     (Rest, []) of
		      <{Port,Key}> when 'true' ->
			  let <_cor2> =
			      catch
				  %% Line 3588
				  call 'erlang':'list_to_integer'
				      (Port)
			  in  %% Line 3588
			      case _cor2 of
				%% Line 3589
				<PortInt>
				    when call 'erlang':'is_integer'
					  (_cor2) ->
				    %% Line 3590
				    {Host,PortInt,Key}
				%% Line 3591
				<_cor7> when 'true' ->
				    %% Line 3592
				    call 'erlang':'throw'
					({'error',[77|[97|[108|[102|[111|[114|[109|[101|[100|[32|[107|[101|[121|[59|[32|[112|[111|[114|[116|[32|[110|[111|[116|[32|[97|[110|[32|[105|[110|[116|[101|[103|[101|[114|[44|[32|[115|[104|[111|[117|[108|[100|[32|[98|[101|[32|[104|[116|[116|[112|[58|[47|[47|[72|[111|[115|[116|[58|[80|[111|[114|[116|[47|[112|[97|[116|[104|[32|[111|[114|[32|[104|[116|[116|[112|[58|[47|[47|[72|[111|[115|[116|[47|[112|[97|[116|[104]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]})
			      end
		      ( <_cor1> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor1})
			-| ['compiler_generated'] )
		    end
		%% Line 3594
		<[_cor8|[]]>
		    when call 'erlang':'=:='
			  (_cor8,
			   Address) ->
		    %% Line 3596
		    case apply 'split_to_slash'/2
			     (Address, []) of
		      <{Host,Key}> when 'true' ->
			  %% Line 3597
			  {Host,80,Key}
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
		%% Line 3598
		<_X_What> when 'true' ->
		    %% Line 3599
		    call 'erlang':'throw'
			({'error',[77|[97|[108|[102|[111|[114|[109|[101|[100|[32|[107|[101|[121|[59|[32|[115|[104|[111|[117|[108|[100|[32|[98|[101|[32|[104|[116|[116|[112|[58|[47|[47|[72|[111|[115|[116|[58|[80|[111|[114|[116|[47|[112|[97|[116|[104|[32|[111|[114|[32|[104|[116|[116|[112|[58|[47|[47|[72|[111|[115|[116|[47|[112|[97|[116|[104]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]})
	      end
	  ( <_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6})
		  -| [{'function_name',{'http',1}}] )
	    -| ['compiler_generated'] )
	end
'split_to_slash'/2 =
    %% Line 3609
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],_X_Acc> when 'true' ->
	      %% Line 3610
	      call 'erlang':'throw'
		  ({'error',[78|[111|[32|[75|[101|[121|[32|[103|[105|[118|[101|[110|[32|[72|[111|[115|[116|[58|[80|[111|[114|[116|[47|[75|[101|[121]]]]]]]]]]]]]]]]]]]]]]]]]]})
	  %% Line 3611
	  <[47|Rest],Acc> when 'true' ->
	      let <_cor2> =
		  %% Line 3612
		  call 'lists':'reverse'
		      (Acc)
	      in  %% Line 3612
		  {_cor2,[47|Rest]}
	  %% Line 3613
	  <[H|T],Acc> when 'true' ->
	      %% Line 3614
	      apply 'split_to_slash'/2
		  (T, [H|Acc])
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'split_to_slash',2}}] )
	    -| ['compiler_generated'] )
	end
'create_tempfile'/1 =
    %% Line 3623
    fun (_cor0) ->
	let <_cor5> =
	    %% Line 3625
	    case call 'os':'type'
		     () of
	      %% Line 3626
	      <{'unix',_cor12}> when 'true' ->
		  %% Line 3627
		  case call 'file':'read_file_info'
			   ([47|[116|[109|[112]]]]) of
		    %% Line 3628
		    <{'ok',_cor13}> when 'true' ->
			%% Line 3629
			[47|[116|[109|[112]]]]
		    %% Line 3630
		    <{'error','enoent'}> when 'true' ->
			%% Line 3631
			call 'erlang':'throw'
			    ({'error',[47|[116|[109|[112|[32|[100|[111|[101|[115|[110|[39|[116|[32|[101|[120|[105|[115|[116]]]]]]]]]]]]]]]]]]})
		    ( <_cor1> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor1})
		      -| ['compiler_generated'] )
		  end
	      %% Line 3633
	      <{'win32',_cor14}> when 'true' ->
		  %% Line 3634
		  case call 'os':'getenv'
			   ([84|[77|[80]]]) of
		    %% Line 3635
		    <'false'> when 'true' ->
			%% Line 3636
			case call 'os':'getenv'
				 ([84|[69|[77|[80]]]]) of
			  %% Line 3637
			  <'false'> when 'true' ->
			      %% Line 3638
			      call 'erlang':'throw'
				  ({'error',[86|[97|[114|[105|[97|[98|[101|[108|[32|[84|[77|[80|[32|[111|[114|[32|[84|[69|[77|[80|[32|[100|[111|[101|[115|[110|[39|[116|[32|[101|[120|[105|[115|[116]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]})
			  %% Line 3639
			  <P2> when 'true' ->
			      %% Line 3640
			      P2
			end
		    %% Line 3642
		    <P1> when 'true' ->
			%% Line 3643
			P1
		  end
	      ( <_cor4> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor4})
		-| ['compiler_generated'] )
	    end
	in  let <_cor8> =
		%% Line 3646
		call 'os':'getpid'
		    ()
	    in  let <_cor7> =
		    %% Line 3646
		    call 'erlang':'++'
			(_cor0, [46])
		in  let <_cor9> =
			%% Line 3646
			call 'erlang':'++'
			    (_cor8, _cor7)
		    in  let <TmpNameBase> =
			    %% Line 3646
			    call 'filename':'join'
				([_cor5|[_cor9|[]]])
			in  %% Line 3647
			    apply 'create_tempfile_1'/2
				(TmpNameBase, 1)
'create_tempfile_1'/2 =
    %% Line 3649
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 3650
	    call 'erlang':'integer_to_list'
		(_cor0)
	in  let <FileName> =
		%% Line 3650
		call 'erlang':'++'
		    (_cor1, _cor2)
	    in  %% Line 3651
		case call 'file':'open'
			 (FileName, ['write'|['binary']]) of
		  %% Line 3652
		  <{'error',_X_Reason}> when 'true' ->
		      let <_cor4> =
			  %% Line 3653
			  call 'erlang':'+'
			      (_cor0, 1)
		      in  %% Line 3653
			  apply 'create_tempfile_1'/2
			      (_cor1, _cor4)
		  %% Line 3654
		  <{'ok',FD}> when 'true' ->
		      %% Line 3655
		      {FileName,FD}
		  ( <_cor5> when 'true' ->
			primop 'match_fail'
			    ({'case_clause',_cor5})
		    -| ['compiler_generated'] )
		end
'filter_endtag_stack'/1 =
    %% Line 3666
    fun (_cor0) ->
	%% Line 3667
	apply 'filter_endtag_stack'/2
	    (_cor0, [])
'filter_endtag_stack'/2 =
    %% Line 3669
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],Acc> when 'true' ->
	      %% Line 3670
	      call 'lists':'reverse'
		  (Acc)
	  %% Line 3671
	  <[{_cor4,_cor5,N,_cor6,_cor7,_cor8}|Ts],Acc> when 'true' ->
	      %% Line 3672
	      apply 'filter_endtag_stack'/2
		  (Ts, [N|Acc])
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'filter_endtag_stack',2}}] )
	    -| ['compiler_generated'] )
	end
'format_error'/3 =
    %% Line 3683
    fun (_cor2,_cor1,_cor0) ->
	%% Line 3686
	( case _cor1 of
	    ( <( {'xmerl_sax_parser_state',_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_rec97,_cor30,_cor31,_cor32}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_cor7> =
		      %% Line 3691
		      apply 'filter_endtag_stack'/1
			  (_cor25)
		  in  {_cor2,{_rec97,_cor30,_cor22},_cor0,_cor7,_cor17}
	      -| ['compiler_generated'] )
	    ( <_cor33> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','xmerl_sax_parser_state'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('xmerl_sax_parser_utf8')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('xmerl_sax_parser_utf8', _cor0)
end