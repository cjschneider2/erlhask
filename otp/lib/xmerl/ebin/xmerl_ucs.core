module 'xmerl_ucs' ['from_latin9'/1,
		    'from_ucs2be'/1,
		    'from_ucs2be'/2,
		    'from_ucs2le'/1,
		    'from_ucs2le'/2,
		    'from_ucs4be'/1,
		    'from_ucs4be'/2,
		    'from_ucs4le'/1,
		    'from_ucs4le'/2,
		    'from_utf16be'/1,
		    'from_utf16be'/2,
		    'from_utf16le'/1,
		    'from_utf16le'/2,
		    'from_utf8'/1,
		    'is_ascii'/1,
		    'is_bmpchar'/1,
		    'is_incharset'/2,
		    'is_iso10646'/1,
		    'is_iso646_basic'/1,
		    'is_latin1'/1,
		    'is_unicode'/1,
		    'is_visible_ascii'/1,
		    'is_visible_latin1'/1,
		    'module_info'/0,
		    'module_info'/1,
		    'to_ucs2be'/1,
		    'to_ucs2le'/1,
		    'to_ucs4be'/1,
		    'to_ucs4le'/1,
		    'to_unicode'/2,
		    'to_utf16be'/1,
		    'to_utf16le'/1,
		    'to_utf8'/1]
    attributes []
'is_iso10646'/1 =
    %% Line 54
    fun (_cor0) ->
	case _cor0 of
	  <Ch>
	      when let <_cor1> =
		    call 'erlang':'is_integer'
			(_cor0)
		in  let <_cor2> =
			call 'erlang':'>='
			    (_cor0, 0)
		    in  call 'erlang':'and'
			    (_cor1, _cor2) ->
	      %% Line 55
	      case <> of
		<>
		    when call 'erlang':'<'
			  (Ch,
			   55296) ->
		    'true'
		%% Line 56
		<>
		    when call 'erlang':'<'
			  (Ch,
			   57344) ->
		    'false'
		%% Line 57
		<>
		    when call 'erlang':'<'
			  (Ch,
			   65534) ->
		    'true'
		%% Line 58
		<>
		    when call 'erlang':'=<'
			  (Ch,
			   65535) ->
		    'false'
		%% Line 59
		<>
		    when call 'erlang':'=<'
			  (Ch,
			   2147483647) ->
		    'true'
		%% Line 60
		<> when 'true' ->
		    'false'
	      end
	  %% Line 62
	  <_cor4> when 'true' ->
	      'false'
	end
'is_unicode'/1 =
    %% Line 66
    fun (_cor0) ->
	case _cor0 of
	  <Ch>
	      when call 'erlang':'<'
		    (_cor0,
		     1114112) ->
	      apply 'is_iso10646'/1
		  (Ch)
	  %% Line 67
	  <_cor2> when 'true' ->
	      'false'
	end
'is_bmpchar'/1 =
    %% Line 71
    fun (_cor0) ->
	case _cor0 of
	  <Ch>
	      when let <_cor1> =
		    call 'erlang':'is_integer'
			(_cor0)
		in  let <_cor2> =
			call 'erlang':'>='
			    (_cor0, 0)
		    in  call 'erlang':'and'
			    (_cor1, _cor2) ->
	      %% Line 72
	      case <> of
		<>
		    when call 'erlang':'<'
			  (Ch,
			   55296) ->
		    'true'
		%% Line 73
		<>
		    when call 'erlang':'<'
			  (Ch,
			   57344) ->
		    'false'
		%% Line 74
		<>
		    when call 'erlang':'<'
			  (Ch,
			   65534) ->
		    'true'
		%% Line 75
		<> when 'true' ->
		    'false'
	      end
	  %% Line 77
	  <_cor4> when 'true' ->
	      'false'
	end
'is_latin1'/1 =
    %% Line 80
    fun (_cor0) ->
	case _cor0 of
	  <Ch>
	      when try
		    let <_cor1> =
			call 'erlang':'is_integer'
			    (_cor0)
		    in  let <_cor2> =
			    call 'erlang':'>='
				(_cor0, 0)
			in  let <_cor3> =
				call 'erlang':'=<'
				    (_cor0, 255)
			    in  let <_cor4> =
				    call 'erlang':'and'
					(_cor2, _cor3)
				in  call 'erlang':'and'
					(_cor1, _cor4)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      'true'
	  %% Line 81
	  <_cor6> when 'true' ->
	      'false'
	end
'is_ascii'/1 =
    %% Line 84
    fun (_cor0) ->
	case _cor0 of
	  <Ch>
	      when try
		    let <_cor1> =
			call 'erlang':'is_integer'
			    (_cor0)
		    in  let <_cor2> =
			    call 'erlang':'>='
				(_cor0, 0)
			in  let <_cor3> =
				call 'erlang':'=<'
				    (_cor0, 127)
			    in  let <_cor4> =
				    call 'erlang':'and'
					(_cor2, _cor3)
				in  call 'erlang':'and'
					(_cor1, _cor4)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      'true'
	  %% Line 85
	  <_cor6> when 'true' ->
	      'false'
	end
'is_iso646_basic'/1 =
    %% Line 88
    fun (_cor0) ->
	case _cor0 of
	  <Ch>
	      when let <_cor1> =
		    call 'erlang':'is_integer'
			(_cor0)
		in  let <_cor2> =
			call 'erlang':'>='
			    (_cor0, 32)
		    in  call 'erlang':'and'
			    (_cor1, _cor2) ->
	      %% Line 89
	      case <> of
		<>
		    when call 'erlang':'=<'
			  (Ch,
			   90) ->
		    %% Line 91
		    case <> of
		      <>
			  when call 'erlang':'>'
				(Ch,
				 36) ->
			  call 'erlang':'=/='
			      (Ch, 64)
		      %% Line 92
		      <> when 'true' ->
			  call 'erlang':'<'
			      (Ch, 35)
		    end
		%% Line 95
		<>
		    when call 'erlang':'>'
			  (Ch,
			   122) ->
		    'false'
		%% Line 96
		<>
		    when call 'erlang':'>='
			  (Ch,
			   97) ->
		    'true'
		%% Line 97
		<> when 'true' ->
		    call 'erlang':'=:='
			(Ch, 95)
	      end
	  %% Line 99
	  <_cor4> when 'true' ->
	      %% Line 100
	      'false'
	end
'is_visible_latin1'/1 =
    %% Line 104
    fun (_cor0) ->
	case _cor0 of
	  <Ch>
	      when let <_cor1> =
		    call 'erlang':'is_integer'
			(_cor0)
		in  let <_cor2> =
			call 'erlang':'>='
			    (_cor0, 32)
		    in  call 'erlang':'and'
			    (_cor1, _cor2) ->
	      %% Line 105
	      case <> of
		<>
		    when call 'erlang':'=<'
			  (Ch,
			   126) ->
		    'true'
		%% Line 106
		<>
		    when call 'erlang':'>='
			  (Ch,
			   161) ->
		    call 'erlang':'=<'
			(Ch, 255)
		( <> when 'true' ->
		      primop 'match_fail'
			  ('if_clause')
		  -| ['compiler_generated'] )
	      end
	  %% Line 108
	  <_cor4> when 'true' ->
	      %% Line 109
	      'false'
	end
'is_visible_ascii'/1 =
    %% Line 113
    fun (_cor0) ->
	case _cor0 of
	  <Ch>
	      when let <_cor1> =
		    call 'erlang':'is_integer'
			(_cor0)
		in  let <_cor2> =
			call 'erlang':'>='
			    (_cor0, 32)
		    in  call 'erlang':'and'
			    (_cor1, _cor2) ->
	      call 'erlang':'=<'
		  (Ch, 126)
	  %% Line 114
	  <_cor4> when 'true' ->
	      'false'
	end
'to_ucs4be'/1 =
    %% Line 118
    fun (_cor0) ->
	case _cor0 of
	  <List>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      call 'lists':'flatmap'
		  (( 'to_ucs4be'/1
		     -| [{'id',{0,0,'-to_ucs4be/1-fun-0-'}}] ), List)
	  %% Line 119
	  <Ch> when 'true' ->
	      apply 'char_to_ucs4be'/1
		  (Ch)
	end
'from_ucs4be'/1 =
    %% Line 121
    fun (_cor0) ->
	case _cor0 of
	  <Bin>
	      when call 'erlang':'is_binary'
		    (_cor0) ->
	      apply 'from_ucs4be'/3
		  (Bin, [], [])
	  %% Line 122
	  <List> when 'true' ->
	      let <_cor1> =
		  call 'erlang':'list_to_binary'
		      (List)
	      in  apply 'from_ucs4be'/3
		      (_cor1, [], [])
	end
'from_ucs4be'/2 =
    %% Line 124
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Bin,Tail>
	      when call 'erlang':'is_binary'
		    (Bin) ->
	      apply 'from_ucs4be'/3
		  (Bin, [], Tail)
	  %% Line 125
	  <List,Tail> when 'true' ->
	      let <_cor2> =
		  call 'erlang':'list_to_binary'
		      (List)
	      in  apply 'from_ucs4be'/3
		      (_cor2, [], Tail)
	end
'to_ucs4le'/1 =
    %% Line 127
    fun (_cor0) ->
	case _cor0 of
	  <List>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      call 'lists':'flatmap'
		  (( 'to_ucs4le'/1
		     -| [{'id',{0,0,'-to_ucs4le/1-fun-0-'}}] ), List)
	  %% Line 128
	  <Ch> when 'true' ->
	      apply 'char_to_ucs4le'/1
		  (Ch)
	end
'from_ucs4le'/1 =
    %% Line 130
    fun (_cor0) ->
	case _cor0 of
	  <Bin>
	      when call 'erlang':'is_binary'
		    (_cor0) ->
	      apply 'from_ucs4le'/3
		  (Bin, [], [])
	  %% Line 131
	  <List> when 'true' ->
	      let <_cor1> =
		  call 'erlang':'list_to_binary'
		      (List)
	      in  apply 'from_ucs4le'/3
		      (_cor1, [], [])
	end
'from_ucs4le'/2 =
    %% Line 133
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Bin,Tail>
	      when call 'erlang':'is_binary'
		    (Bin) ->
	      apply 'from_ucs4le'/3
		  (Bin, [], Tail)
	  %% Line 134
	  <List,Tail> when 'true' ->
	      let <_cor2> =
		  call 'erlang':'list_to_binary'
		      (List)
	      in  apply 'from_ucs4le'/3
		      (_cor2, [], Tail)
	end
'to_ucs2be'/1 =
    %% Line 137
    fun (_cor0) ->
	case _cor0 of
	  <List>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      call 'lists':'flatmap'
		  (( 'to_ucs2be'/1
		     -| [{'id',{0,0,'-to_ucs2be/1-fun-0-'}}] ), List)
	  %% Line 138
	  <Ch> when 'true' ->
	      apply 'char_to_ucs2be'/1
		  (Ch)
	end
'from_ucs2be'/1 =
    %% Line 140
    fun (_cor0) ->
	case _cor0 of
	  <Bin>
	      when call 'erlang':'is_binary'
		    (_cor0) ->
	      apply 'from_ucs2be'/3
		  (Bin, [], [])
	  %% Line 141
	  <List> when 'true' ->
	      let <_cor1> =
		  call 'erlang':'list_to_binary'
		      (List)
	      in  apply 'from_ucs2be'/3
		      (_cor1, [], [])
	end
'from_ucs2be'/2 =
    %% Line 143
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Bin,Tail>
	      when call 'erlang':'is_binary'
		    (Bin) ->
	      apply 'from_ucs2be'/3
		  (Bin, [], Tail)
	  %% Line 144
	  <List,Tail> when 'true' ->
	      let <_cor2> =
		  call 'erlang':'list_to_binary'
		      (List)
	      in  apply 'from_ucs2be'/3
		      (_cor2, [], Tail)
	end
'to_ucs2le'/1 =
    %% Line 146
    fun (_cor0) ->
	case _cor0 of
	  <List>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      call 'lists':'flatmap'
		  (( 'to_ucs2le'/1
		     -| [{'id',{0,0,'-to_ucs2le/1-fun-0-'}}] ), List)
	  %% Line 147
	  <Ch> when 'true' ->
	      apply 'char_to_ucs2le'/1
		  (Ch)
	end
'from_ucs2le'/1 =
    %% Line 149
    fun (_cor0) ->
	case _cor0 of
	  <Bin>
	      when call 'erlang':'is_binary'
		    (_cor0) ->
	      apply 'from_ucs2le'/3
		  (Bin, [], [])
	  %% Line 150
	  <List> when 'true' ->
	      let <_cor1> =
		  call 'erlang':'list_to_binary'
		      (List)
	      in  apply 'from_ucs2le'/3
		      (_cor1, [], [])
	end
'from_ucs2le'/2 =
    %% Line 152
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Bin,Tail>
	      when call 'erlang':'is_binary'
		    (Bin) ->
	      apply 'from_ucs2le'/3
		  (Bin, [], Tail)
	  %% Line 153
	  <List,Tail> when 'true' ->
	      let <_cor2> =
		  call 'erlang':'list_to_binary'
		      (List)
	      in  apply 'from_ucs2le'/3
		      (_cor2, [], Tail)
	end
'to_utf16be'/1 =
    %% Line 157
    fun (_cor0) ->
	case _cor0 of
	  <List>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      call 'lists':'flatmap'
		  (( 'to_utf16be'/1
		     -| [{'id',{0,0,'-to_utf16be/1-fun-0-'}}] ), List)
	  %% Line 158
	  <Ch> when 'true' ->
	      apply 'char_to_utf16be'/1
		  (Ch)
	end
'from_utf16be'/1 =
    %% Line 160
    fun (_cor0) ->
	case _cor0 of
	  <Bin>
	      when call 'erlang':'is_binary'
		    (_cor0) ->
	      apply 'from_utf16be'/3
		  (Bin, [], [])
	  %% Line 161
	  <List> when 'true' ->
	      let <_cor1> =
		  call 'erlang':'list_to_binary'
		      (List)
	      in  apply 'from_utf16be'/3
		      (_cor1, [], [])
	end
'from_utf16be'/2 =
    %% Line 163
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Bin,Tail>
	      when call 'erlang':'is_binary'
		    (Bin) ->
	      apply 'from_utf16be'/3
		  (Bin, [], Tail)
	  %% Line 164
	  <List,Tail> when 'true' ->
	      let <_cor2> =
		  call 'erlang':'list_to_binary'
		      (List)
	      in  apply 'from_utf16be'/3
		      (_cor2, [], Tail)
	end
'to_utf16le'/1 =
    %% Line 166
    fun (_cor0) ->
	case _cor0 of
	  <List>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      call 'lists':'flatmap'
		  (( 'to_utf16le'/1
		     -| [{'id',{0,0,'-to_utf16le/1-fun-0-'}}] ), List)
	  %% Line 167
	  <Ch> when 'true' ->
	      apply 'char_to_utf16le'/1
		  (Ch)
	end
'from_utf16le'/1 =
    %% Line 169
    fun (_cor0) ->
	case _cor0 of
	  <Bin>
	      when call 'erlang':'is_binary'
		    (_cor0) ->
	      apply 'from_utf16le'/3
		  (Bin, [], [])
	  %% Line 170
	  <List> when 'true' ->
	      let <_cor1> =
		  call 'erlang':'list_to_binary'
		      (List)
	      in  apply 'from_utf16le'/3
		      (_cor1, [], [])
	end
'from_utf16le'/2 =
    %% Line 172
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Bin,Tail>
	      when call 'erlang':'is_binary'
		    (Bin) ->
	      apply 'from_utf16le'/3
		  (Bin, [], Tail)
	  %% Line 173
	  <List,Tail> when 'true' ->
	      let <_cor2> =
		  call 'erlang':'list_to_binary'
		      (List)
	      in  apply 'from_utf16le'/3
		      (_cor2, [], Tail)
	end
'to_utf8'/1 =
    %% Line 177
    fun (_cor0) ->
	case _cor0 of
	  <List>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      call 'lists':'flatmap'
		  (( 'to_utf8'/1
		     -| [{'id',{0,0,'-to_utf8/1-fun-0-'}}] ), List)
	  %% Line 178
	  <Ch> when 'true' ->
	      apply 'char_to_utf8'/1
		  (Ch)
	end
'from_utf8'/1 =
    %% Line 180
    fun (_cor0) ->
	case _cor0 of
	  <Bin>
	      when call 'erlang':'is_binary'
		    (_cor0) ->
	      let <_cor1> =
		  call 'erlang':'binary_to_list'
		      (Bin)
	      in  apply 'from_utf8'/1
		      (_cor1)
	  %% Line 181
	  <List> when 'true' ->
	      %% Line 182
	      case apply 'expand_utf8'/1
		       (List) of
		%% Line 183
		<{Result,0}> when 'true' ->
		    Result
		%% Line 184
		<{_X_Res,_X_NumBadChar}> when 'true' ->
		    %% Line 185
		    call 'erlang':'exit'
			({'ucs',{'bad_utf8_character_code'}})
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor2})
		  -| ['compiler_generated'] )
	      end
	end
'from_latin9'/1 =
    %% Line 189
    fun (_cor0) ->
	case _cor0 of
	  <Bin>
	      when call 'erlang':'is_binary'
		    (_cor0) ->
	      let <_cor1> =
		  call 'erlang':'binary_to_list'
		      (Bin)
	      in  apply 'from_latin9'/1
		      (_cor1)
	  %% Line 190
	  <List> when 'true' ->
	      %% Line 191
	      ( letrec
		    'lc$^0'/1 =
			fun (_cor4) ->
			    case _cor4 of
			      <[Char|_cor3]> when 'true' ->
				  let <_cor5> =
				      apply 'latin9_to_ucs4'/1
					  (Char)
				  in  let <_cor6> =
					  apply 'lc$^0'/1
					      (_cor3)
				      in  ( [_cor5|_cor6]
					    -| ['compiler_generated'] )
			      <[]> when 'true' ->
				  []
			      ( <_cor4> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_cor4})
				      -| [{'function_name',{'lc$^0',1}}] )
				-| ['compiler_generated'] )
			    end
		in  apply 'lc$^0'/1
			(List)
		-| ['list_comprehension'] )
	end
'latin9_to_ucs4'/1 =
    %% Line 193
    fun (_cor0) ->
	case _cor0 of
	  <164> when 'true' ->
	      8364
	  %% Line 194
	  <166> when 'true' ->
	      352
	  %% Line 195
	  <168> when 'true' ->
	      353
	  %% Line 196
	  <180> when 'true' ->
	      381
	  %% Line 197
	  <184> when 'true' ->
	      382
	  %% Line 198
	  <188> when 'true' ->
	      338
	  %% Line 199
	  <189> when 'true' ->
	      339
	  %% Line 200
	  <190> when 'true' ->
	      376
	  %% Line 201
	  <Other> when 'true' ->
	      Other
	end
'char_to_ucs4be'/1 =
    %% Line 214
    fun (_cor0) ->
	%% Line 215
	case apply 'is_iso10646'/1
		 (_cor0) of
	  <'true'> when 'true' ->
	      let <_cor2> =
		  %% Line 216
		  call 'erlang':'bsr'
		      (_cor0, 24)
	      in  let <_cor3> =
		      %% Line 217
		      call 'erlang':'bsr'
			  (_cor0, 16)
		  in  let <_cor4> =
			  %% Line 217
			  call 'erlang':'band'
			      (_cor3, 255)
		      in  let <_cor5> =
			      %% Line 218
			      call 'erlang':'bsr'
				  (_cor0, 8)
			  in  let <_cor6> =
				  %% Line 218
				  call 'erlang':'band'
				      (_cor5, 255)
			      in  let <_cor7> =
				      %% Line 219
				      call 'erlang':'band'
					  (_cor0, 255)
				  in  %% Line 216
				      [_cor2|%% Line 217
					     [_cor4|%% Line 218
						    [_cor6|%% Line 219
							   [_cor7|[]]]]]
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'from_ucs4be'/3 =
    %% Line 221
    fun (_cor2,_cor1,_cor0) ->
	case <( _cor2
		-| ['reuse_for_context'] ),_cor1,_cor0> of
	  <#{#<Ch>(32,1,'integer',['signed'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,Acc,Tail> when 'true' ->
	      %% Line 222
	      case <> of
		<>
		    when let <_cor3> =
			  call 'erlang':'<'
			      (Ch, 0)
		      in  let <_cor6> =
			      let <_cor4> =
				  call 'erlang':'>='
				      (Ch, 55296)
			      in  let <_cor5> =
				      call 'erlang':'<'
					  (Ch, 57344)
				  in  call 'erlang':'and'
					  (_cor4, _cor5)
			  in  let <_cor7> =
				  call 'erlang':'=:='
				      (Ch, 65534)
			      in  let <_cor8> =
				      call 'erlang':'=:='
					  (Ch, 65535)
				  in  let <_cor9> =
					  call 'erlang':'or'
					      (_cor7, _cor8)
				      in  let <_cor10> =
					      call 'erlang':'or'
						  (_cor6, _cor9)
					  in  call 'erlang':'or'
						  (_cor3, _cor10) ->
		    %% Line 223
		    call 'erlang':'exit'
			({'bad_character_code',Ch})
		%% Line 224
		<> when 'true' ->
		    %% Line 225
		    apply 'from_ucs4be'/3
			(Rest, [Ch|Acc], Tail)
	      end
	  %% Line 227
	  <#{}#,Acc,Tail> when 'true' ->
	      %% Line 228
	      call 'lists':'reverse'
		  (Acc, Tail)
	  %% Line 229
	  <Bin,Acc,Tail> when 'true' ->
	      do  primop 'bs_context_to_binary'
		      (Bin)
		  do  %% Line 230
		      call 'io':'format'
			  ([117|[99|[115|[32|[69|[114|[114|[111|[114|[58|[32|[66|[105|[110|[61|[126|[112|[126|[110|[32|[32|[32|[32|[32|[65|[99|[99|[61|[126|[112|[126|[110|[32|[32|[32|[32|[32|[84|[97|[105|[108|[61|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Bin|[Acc|[Tail|[]]]])
		      %% Line 231
		      {'error','not_ucs4be'}
	end
'char_to_ucs4le'/1 =
    %% Line 233
    fun (_cor0) ->
	%% Line 234
	case apply 'is_iso10646'/1
		 (_cor0) of
	  <'true'> when 'true' ->
	      let <_cor2> =
		  %% Line 235
		  call 'erlang':'band'
		      (_cor0, 255)
	      in  let <_cor3> =
		      %% Line 236
		      call 'erlang':'bsr'
			  (_cor0, 8)
		  in  let <_cor4> =
			  %% Line 236
			  call 'erlang':'band'
			      (_cor3, 255)
		      in  let <_cor5> =
			      %% Line 237
			      call 'erlang':'bsr'
				  (_cor0, 16)
			  in  let <_cor6> =
				  %% Line 237
				  call 'erlang':'band'
				      (_cor5, 255)
			      in  let <_cor7> =
				      %% Line 238
				      call 'erlang':'bsr'
					  (_cor0, 24)
				  in  %% Line 235
				      [_cor2|%% Line 236
					     [_cor4|%% Line 237
						    [_cor6|%% Line 238
							   [_cor7|[]]]]]
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'from_ucs4le'/3 =
    %% Line 241
    fun (_cor2,_cor1,_cor0) ->
	case <( _cor2
		-| ['reuse_for_context'] ),_cor1,_cor0> of
	  <#{#<Ch>(32,1,'integer',['signed'|['little']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,Acc,Tail> when 'true' ->
	      %% Line 242
	      case <> of
		<>
		    when let <_cor3> =
			  call 'erlang':'<'
			      (Ch, 0)
		      in  let <_cor6> =
			      let <_cor4> =
				  call 'erlang':'>='
				      (Ch, 55296)
			      in  let <_cor5> =
				      call 'erlang':'<'
					  (Ch, 57344)
				  in  call 'erlang':'and'
					  (_cor4, _cor5)
			  in  let <_cor7> =
				  call 'erlang':'=:='
				      (Ch, 65534)
			      in  let <_cor8> =
				      call 'erlang':'=:='
					  (Ch, 65535)
				  in  let <_cor9> =
					  call 'erlang':'or'
					      (_cor7, _cor8)
				      in  let <_cor10> =
					      call 'erlang':'or'
						  (_cor6, _cor9)
					  in  call 'erlang':'or'
						  (_cor3, _cor10) ->
		    %% Line 243
		    call 'erlang':'exit'
			({'bad_character_code',Ch})
		%% Line 244
		<> when 'true' ->
		    %% Line 245
		    apply 'from_ucs4le'/3
			(Rest, [Ch|Acc], Tail)
	      end
	  %% Line 247
	  <#{}#,Acc,Tail> when 'true' ->
	      %% Line 248
	      call 'lists':'reverse'
		  (Acc, Tail)
	  %% Line 249
	  <Bin,Acc,Tail> when 'true' ->
	      do  primop 'bs_context_to_binary'
		      (Bin)
		  do  %% Line 250
		      call 'io':'format'
			  ([117|[99|[115|[32|[69|[114|[114|[111|[114|[58|[32|[66|[105|[110|[61|[126|[112|[126|[110|[32|[32|[32|[32|[32|[65|[99|[99|[61|[126|[112|[126|[110|[32|[32|[32|[32|[32|[84|[97|[105|[108|[61|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Bin|[Acc|[Tail|[]]]])
		      %% Line 251
		      {'error','not_ucs4le'}
	end
'char_to_ucs2be'/1 =
    %% Line 258
    fun (_cor0) ->
	%% Line 259
	case apply 'is_iso10646'/1
		 (_cor0) of
	  <'true'> when 'true' ->
	      let <_cor2> =
		  %% Line 260
		  call 'erlang':'bsr'
		      (_cor0, 8)
	      in  let <_cor3> =
		      %% Line 260
		      call 'erlang':'band'
			  (_cor2, 255)
		  in  let <_cor4> =
			  %% Line 261
			  call 'erlang':'band'
			      (_cor0, 255)
		      in  %% Line 260
			  [_cor3|%% Line 261
				 [_cor4|[]]]
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'from_ucs2be'/3 =
    %% Line 263
    fun (_cor2,_cor1,_cor0) ->
	case <( _cor2
		-| ['reuse_for_context'] ),_cor1,_cor0> of
	  <#{#<Ch>(16,1,'integer',['signed'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,Acc,Tail> when 'true' ->
	      %% Line 264
	      case <> of
		<>
		    when let <_cor3> =
			  call 'erlang':'<'
			      (Ch, 0)
		      in  let <_cor6> =
			      let <_cor4> =
				  call 'erlang':'>='
				      (Ch, 55296)
			      in  let <_cor5> =
				      call 'erlang':'<'
					  (Ch, 57344)
				  in  call 'erlang':'and'
					  (_cor4, _cor5)
			  in  let <_cor7> =
				  call 'erlang':'=:='
				      (Ch, 65534)
			      in  let <_cor8> =
				      call 'erlang':'=:='
					  (Ch, 65535)
				  in  let <_cor9> =
					  call 'erlang':'or'
					      (_cor7, _cor8)
				      in  let <_cor10> =
					      call 'erlang':'or'
						  (_cor6, _cor9)
					  in  call 'erlang':'or'
						  (_cor3, _cor10) ->
		    %% Line 265
		    call 'erlang':'exit'
			({'bad_character_code',Ch})
		%% Line 266
		<> when 'true' ->
		    %% Line 267
		    apply 'from_ucs2be'/3
			(Rest, [Ch|Acc], Tail)
	      end
	  %% Line 269
	  <#{}#,Acc,Tail> when 'true' ->
	      %% Line 270
	      call 'lists':'reverse'
		  (Acc, Tail)
	  %% Line 271
	  <Bin,Acc,Tail> when 'true' ->
	      do  primop 'bs_context_to_binary'
		      (Bin)
		  do  %% Line 272
		      call 'io':'format'
			  ([117|[99|[115|[32|[69|[114|[114|[111|[114|[58|[32|[66|[105|[110|[61|[126|[112|[126|[110|[32|[32|[32|[32|[32|[65|[99|[99|[61|[126|[112|[126|[110|[32|[32|[32|[32|[32|[84|[97|[105|[108|[61|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Bin|[Acc|[Tail|[]]]])
		      %% Line 273
		      {'error','not_ucs2be'}
	end
'char_to_ucs2le'/1 =
    %% Line 275
    fun (_cor0) ->
	%% Line 276
	case apply 'is_iso10646'/1
		 (_cor0) of
	  <'true'> when 'true' ->
	      let <_cor2> =
		  %% Line 277
		  call 'erlang':'band'
		      (_cor0, 255)
	      in  let <_cor3> =
		      %% Line 278
		      call 'erlang':'bsr'
			  (_cor0, 8)
		  in  let <_cor4> =
			  %% Line 278
			  call 'erlang':'band'
			      (_cor3, 255)
		      in  %% Line 277
			  [_cor2|%% Line 278
				 [_cor4|[]]]
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'from_ucs2le'/3 =
    %% Line 281
    fun (_cor2,_cor1,_cor0) ->
	case <( _cor2
		-| ['reuse_for_context'] ),_cor1,_cor0> of
	  <#{#<Ch>(16,1,'integer',['signed'|['little']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,Acc,Tail> when 'true' ->
	      %% Line 282
	      case <> of
		<>
		    when let <_cor3> =
			  call 'erlang':'<'
			      (Ch, 0)
		      in  let <_cor6> =
			      let <_cor4> =
				  call 'erlang':'>='
				      (Ch, 55296)
			      in  let <_cor5> =
				      call 'erlang':'<'
					  (Ch, 57344)
				  in  call 'erlang':'and'
					  (_cor4, _cor5)
			  in  let <_cor7> =
				  call 'erlang':'=:='
				      (Ch, 65534)
			      in  let <_cor8> =
				      call 'erlang':'=:='
					  (Ch, 65535)
				  in  let <_cor9> =
					  call 'erlang':'or'
					      (_cor7, _cor8)
				      in  let <_cor10> =
					      call 'erlang':'or'
						  (_cor6, _cor9)
					  in  call 'erlang':'or'
						  (_cor3, _cor10) ->
		    %% Line 283
		    call 'erlang':'exit'
			({'bad_character_code',Ch})
		%% Line 284
		<> when 'true' ->
		    %% Line 285
		    apply 'from_ucs2le'/3
			(Rest, [Ch|Acc], Tail)
	      end
	  %% Line 287
	  <#{}#,Acc,Tail> when 'true' ->
	      %% Line 288
	      call 'lists':'reverse'
		  (Acc, Tail)
	  %% Line 289
	  <Bin,Acc,Tail> when 'true' ->
	      do  primop 'bs_context_to_binary'
		      (Bin)
		  do  %% Line 290
		      call 'io':'format'
			  ([117|[99|[115|[32|[69|[114|[114|[111|[114|[58|[32|[66|[105|[110|[61|[126|[112|[126|[110|[32|[32|[32|[32|[32|[65|[99|[99|[61|[126|[112|[126|[110|[32|[32|[32|[32|[32|[84|[97|[105|[108|[61|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Bin|[Acc|[Tail|[]]]])
		      %% Line 291
		      {'error','not_ucs2le'}
	end
'char_to_utf16be'/1 =
    %% Line 305
    fun (_cor0) ->
	case _cor0 of
	  <Ch>
	      when let <_cor1> =
		    call 'erlang':'is_integer'
			(_cor0)
		in  let <_cor2> =
			call 'erlang':'>='
			    (_cor0, 0)
		    in  call 'erlang':'and'
			    (_cor1, _cor2) ->
	      %% Line 306
	      case <> of
		<>
		    when call 'erlang':'=<'
			  (Ch,
			   65535) ->
		    %% Line 307
		    case <> of
		      <>
			  when let <_cor3> =
				call 'erlang':'<'
				    (Ch, 55296)
			    in  let <_cor6> =
				    let <_cor4> =
					call 'erlang':'>='
					    (Ch, 57344)
				    in  let <_cor5> =
					    call 'erlang':'<'
						(Ch, 65534)
					in  call 'erlang':'and'
						(_cor4, _cor5)
				in  call 'erlang':'or'
					(_cor3, _cor6) ->
			  let <_cor7> =
			      %% Line 308
			      call 'erlang':'bsr'
				  (Ch, 8)
			  in  let <_cor8> =
				  %% Line 308
				  call 'erlang':'band'
				      (Ch, 255)
			      in  %% Line 308
				  [_cor7|[_cor8|[]]]
		      ( <> when 'true' ->
			    primop 'match_fail'
				('if_clause')
			-| ['compiler_generated'] )
		    end
		%% Line 310
		<>
		    when call 'erlang':'<'
			  (Ch,
			   1114112) ->
		    let <X> =
			%% Line 312
			call 'erlang':'-'
			    (Ch, 65536)
		    in  let <_cor10> =
			    %% Line 313
			    call 'erlang':'bsr'
				(X, 18)
			in  let <_cor11> =
				%% Line 313
				call 'erlang':'+'
				    (216, _cor10)
			    in  let <_cor12> =
				    %% Line 314
				    call 'erlang':'bsr'
					(X, 10)
				in  let <_cor13> =
					%% Line 314
					call 'erlang':'band'
					    (_cor12, 255)
				    in  let <_cor14> =
					    %% Line 315
					    call 'erlang':'bsr'
						(X, 8)
					in  let <_cor15> =
						%% Line 315
						call 'erlang':'band'
						    (_cor14, 3)
					    in  let <_cor16> =
						    %% Line 315
						    call 'erlang':'+'
							(220, _cor15)
						in  let <_cor17> =
							%% Line 316
							call 'erlang':'band'
							    (X, 255)
						    in  %% Line 313
							[_cor11|%% Line 314
								[_cor13|%% Line 315
									[_cor16|%% Line 316
										[_cor17|[]]]]]
		%% Line 317
		<>
		    when call 'erlang':'=<'
			  (Ch,
			   2147483647) ->
		    %% Line 319
		    [255|[253]]
		( <> when 'true' ->
		      primop 'match_fail'
			  ('if_clause')
		  -| ['compiler_generated'] )
	      end
	  ( <_cor18> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor18})
		  -| [{'function_name',{'char_to_utf16be',1}}] )
	    -| ['compiler_generated'] )
	end
'from_utf16be'/3 =
    %% Line 322
    fun (_cor2,_cor1,_cor0) ->
	case <( _cor2
		-| ['reuse_for_context'] ),_cor1,_cor0> of
	  <#{#<Ch>(16,1,'integer',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,Acc,Tail>
	      when let <_cor3> =
		    %% Line 323
		    call 'erlang':'<'
			(Ch, 55296)
		in  let <_cor4> =
			%% Line 323
			call 'erlang':'>'
			    (Ch, 57343)
		    in  %% Line 323
			call 'erlang':'or'
			    (_cor3, _cor4) ->
	      %% Line 324
	      case <> of
		<>
		    when call 'erlang':'<'
			  (Ch,
			   65534) ->
		    apply 'from_utf16be'/3
			(Rest, [Ch|Acc], Tail)
		( <> when 'true' ->
		      primop 'match_fail'
			  ('if_clause')
		  -| ['compiler_generated'] )
	      end
	  %% Line 325
	  <#{#<Hi>(16,1,'integer',['unsigned'|['big']]),
	     #<Lo>(16,1,'integer',['unsigned'|['big']]),
	     #<%% Line 326
	       Rest>(%% Line 326
		     'all',8,'binary',['unsigned'|['big']])}#,%% Line 326
							      Acc,%% Line 326
								  Tail>
	      when %% Line 327
		try
		    let <_cor5> =
			call 'erlang':'>='
			    (Hi, 55296)
		    in  let <_cor6> =
			    call 'erlang':'<'
				(Hi, 56320)
			in  let <_cor7> =
				call 'erlang':'>='
				    (Lo, 56320)
			    in  let <_cor8> =
				    call 'erlang':'=<'
					(Lo, 57343)
				in  let <_cor9> =
					call 'erlang':'and'
					    (_cor7, _cor8)
				    in  let <_cor10> =
					    call 'erlang':'and'
						(_cor6, _cor9)
					in  call 'erlang':'and'
						(_cor5, _cor10)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor12> =
		  %% Line 329
		  call 'erlang':'band'
		      (Hi, 1023)
	      in  let <_cor13> =
		      %% Line 329
		      call 'erlang':'bsl'
			  (_cor12, 10)
		  in  let <_cor11> =
			  %% Line 329
			  call 'erlang':'band'
			      (Lo, 1023)
		      in  let <_cor14> =
			      %% Line 329
			      call 'erlang':'+'
				  (_cor13, _cor11)
			  in  let <Ch> =
				  %% Line 329
				  call 'erlang':'+'
				      (_cor14, 65536)
			      in  %% Line 330
				  apply 'from_utf16be'/3
				      (Rest, [Ch|Acc], Tail)
	  %% Line 331
	  <#{}#,Acc,Tail> when 'true' ->
	      %% Line 332
	      call 'lists':'reverse'
		  (Acc, Tail)
	  %% Line 333
	  <Bin,Acc,Tail> when 'true' ->
	      do  primop 'bs_context_to_binary'
		      (Bin)
		  do  %% Line 334
		      call 'io':'format'
			  ([117|[99|[115|[32|[69|[114|[114|[111|[114|[58|[32|[66|[105|[110|[61|[126|[112|[126|[110|[32|[32|[32|[32|[32|[65|[99|[99|[61|[126|[112|[126|[110|[32|[32|[32|[32|[32|[84|[97|[105|[108|[61|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Bin|[Acc|[Tail|[]]]])
		      %% Line 335
		      {'error','not_utf16be'}
	end
'char_to_utf16le'/1 =
    %% Line 337
    fun (_cor0) ->
	case _cor0 of
	  <Ch>
	      when let <_cor1> =
		    call 'erlang':'is_integer'
			(_cor0)
		in  let <_cor2> =
			call 'erlang':'>='
			    (_cor0, 0)
		    in  call 'erlang':'and'
			    (_cor1, _cor2) ->
	      %% Line 338
	      case <> of
		<>
		    when call 'erlang':'=<'
			  (Ch,
			   65535) ->
		    %% Line 339
		    case <> of
		      <>
			  when let <_cor3> =
				call 'erlang':'<'
				    (Ch, 55296)
			    in  let <_cor6> =
				    let <_cor4> =
					call 'erlang':'>='
					    (Ch, 57344)
				    in  let <_cor5> =
					    call 'erlang':'<'
						(Ch, 65534)
					in  call 'erlang':'and'
						(_cor4, _cor5)
				in  call 'erlang':'or'
					(_cor3, _cor6) ->
			  let <_cor7> =
			      %% Line 340
			      call 'erlang':'band'
				  (Ch, 255)
			  in  let <_cor8> =
				  %% Line 340
				  call 'erlang':'bsr'
				      (Ch, 8)
			      in  %% Line 340
				  [_cor7|[_cor8|[]]]
		      ( <> when 'true' ->
			    primop 'match_fail'
				('if_clause')
			-| ['compiler_generated'] )
		    end
		%% Line 342
		<>
		    when call 'erlang':'<'
			  (Ch,
			   1114112) ->
		    let <X> =
			%% Line 344
			call 'erlang':'-'
			    (Ch, 65536)
		    in  let <_cor10> =
			    %% Line 345
			    call 'erlang':'bsr'
				(X, 10)
			in  let <_cor11> =
				%% Line 345
				call 'erlang':'band'
				    (_cor10, 255)
			    in  let <_cor12> =
				    %% Line 346
				    call 'erlang':'bsr'
					(X, 18)
				in  let <_cor13> =
					%% Line 346
					call 'erlang':'+'
					    (216, _cor12)
				    in  let <_cor14> =
					    %% Line 347
					    call 'erlang':'band'
						(X, 255)
					in  let <_cor15> =
						%% Line 348
						call 'erlang':'bsr'
						    (X, 8)
					    in  let <_cor16> =
						    %% Line 348
						    call 'erlang':'band'
							(_cor15, 3)
						in  let <_cor17> =
							%% Line 348
							call 'erlang':'+'
							    (220, _cor16)
						    in  %% Line 345
							[_cor11|%% Line 346
								[_cor13|%% Line 347
									[_cor14|%% Line 348
										[_cor17|[]]]]]
		%% Line 349
		<>
		    when call 'erlang':'=<'
			  (Ch,
			   2147483647) ->
		    %% Line 351
		    [253|[255]]
		( <> when 'true' ->
		      primop 'match_fail'
			  ('if_clause')
		  -| ['compiler_generated'] )
	      end
	  ( <_cor18> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor18})
		  -| [{'function_name',{'char_to_utf16le',1}}] )
	    -| ['compiler_generated'] )
	end
'from_utf16le'/3 =
    %% Line 354
    fun (_cor2,_cor1,_cor0) ->
	case <( _cor2
		-| ['reuse_for_context'] ),_cor1,_cor0> of
	  <#{#<Ch>(16,1,'integer',['unsigned'|['little']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,Acc,Tail>
	      when let <_cor3> =
		    %% Line 355
		    call 'erlang':'<'
			(Ch, 55296)
		in  let <_cor4> =
			%% Line 355
			call 'erlang':'>'
			    (Ch, 57343)
		    in  %% Line 355
			call 'erlang':'or'
			    (_cor3, _cor4) ->
	      %% Line 356
	      case <> of
		<>
		    when call 'erlang':'<'
			  (Ch,
			   65534) ->
		    apply 'from_utf16le'/3
			(Rest, [Ch|Acc], Tail)
		( <> when 'true' ->
		      primop 'match_fail'
			  ('if_clause')
		  -| ['compiler_generated'] )
	      end
	  %% Line 357
	  <#{#<Hi>(16,1,'integer',['unsigned'|['little']]),
	     #<Lo>(16,1,'integer',['unsigned'|['little']]),
	     #<%% Line 358
	       Rest>(%% Line 358
		     'all',8,'binary',['unsigned'|['big']])}#,%% Line 358
							      Acc,%% Line 358
								  Tail>
	      when %% Line 359
		try
		    let <_cor5> =
			call 'erlang':'>='
			    (Hi, 55296)
		    in  let <_cor6> =
			    call 'erlang':'<'
				(Hi, 56320)
			in  let <_cor7> =
				call 'erlang':'>='
				    (Lo, 56320)
			    in  let <_cor8> =
				    call 'erlang':'=<'
					(Lo, 57343)
				in  let <_cor9> =
					call 'erlang':'and'
					    (_cor7, _cor8)
				    in  let <_cor10> =
					    call 'erlang':'and'
						(_cor6, _cor9)
					in  call 'erlang':'and'
						(_cor5, _cor10)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor12> =
		  %% Line 361
		  call 'erlang':'band'
		      (Hi, 1023)
	      in  let <_cor13> =
		      %% Line 361
		      call 'erlang':'bsl'
			  (_cor12, 10)
		  in  let <_cor11> =
			  %% Line 361
			  call 'erlang':'band'
			      (Lo, 1023)
		      in  let <_cor14> =
			      %% Line 361
			      call 'erlang':'+'
				  (_cor13, _cor11)
			  in  let <Ch> =
				  %% Line 361
				  call 'erlang':'+'
				      (_cor14, 65536)
			      in  %% Line 362
				  apply 'from_utf16le'/3
				      (Rest, [Ch|Acc], Tail)
	  %% Line 363
	  <#{}#,Acc,Tail> when 'true' ->
	      %% Line 364
	      call 'lists':'reverse'
		  (Acc, Tail)
	  %% Line 365
	  <Bin,Acc,Tail> when 'true' ->
	      do  primop 'bs_context_to_binary'
		      (Bin)
		  do  %% Line 366
		      call 'io':'format'
			  ([117|[99|[115|[32|[69|[114|[114|[111|[114|[58|[32|[66|[105|[110|[61|[126|[112|[126|[110|[32|[32|[32|[32|[32|[65|[99|[99|[61|[126|[112|[126|[110|[32|[32|[32|[32|[32|[84|[97|[105|[108|[61|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Bin|[Acc|[Tail|[]]]])
		      %% Line 367
		      {'error','not_utf16le'}
	end
'char_to_utf8'/1 =
    %% Line 382
    fun (_cor0) ->
	case _cor0 of
	  <Ch>
	      when let <_cor1> =
		    call 'erlang':'is_integer'
			(_cor0)
		in  let <_cor2> =
			call 'erlang':'>='
			    (_cor0, 0)
		    in  call 'erlang':'and'
			    (_cor1, _cor2) ->
	      %% Line 383
	      case <> of
		<>
		    when call 'erlang':'<'
			  (Ch,
			   128) ->
		    %% Line 385
		    [Ch|[]]
		%% Line 386
		<>
		    when call 'erlang':'<'
			  (Ch,
			   2048) ->
		    let <_cor3> =
			%% Line 388
			call 'erlang':'bsr'
			    (Ch, 6)
		    in  let <_cor4> =
			    %% Line 388
			    call 'erlang':'+'
				(192, _cor3)
			in  let <_cor5> =
				%% Line 389
				call 'erlang':'band'
				    (Ch, 63)
			    in  let <_cor6> =
				    %% Line 389
				    call 'erlang':'+'
					(128, _cor5)
				in  %% Line 388
				    [_cor4|%% Line 389
					   [_cor6|[]]]
		%% Line 390
		<>
		    when call 'erlang':'<'
			  (Ch,
			   65536) ->
		    %% Line 392
		    case <> of
		      <>
			  when let <_cor7> =
				call 'erlang':'<'
				    (Ch, 55296)
			    in  let <_cor10> =
				    let <_cor8> =
					call 'erlang':'>'
					    (Ch, 57343)
				    in  let <_cor9> =
					    call 'erlang':'<'
						(Ch, 65534)
					in  call 'erlang':'and'
						(_cor8, _cor9)
				in  call 'erlang':'or'
					(_cor7, _cor10) ->
			  let <_cor11> =
			      %% Line 393
			      call 'erlang':'bsr'
				  (Ch, 12)
			  in  let <_cor12> =
				  %% Line 393
				  call 'erlang':'+'
				      (224, _cor11)
			      in  let <_cor13> =
				      %% Line 394
				      call 'erlang':'bsr'
					  (Ch, 6)
				  in  let <_cor14> =
					  %% Line 394
					  call 'erlang':'band'
					      (_cor13, 63)
				      in  let <_cor15> =
					      %% Line 394
					      call 'erlang':'+'
						  (128, _cor14)
					  in  let <_cor16> =
						  %% Line 395
						  call 'erlang':'band'
						      (Ch, 63)
					      in  let <_cor17> =
						      %% Line 395
						      call 'erlang':'+'
							  (128, _cor16)
						  in  %% Line 393
						      [_cor12|%% Line 394
							      [_cor15|%% Line 395
								      [_cor17|[]]]]
		      ( <> when 'true' ->
			    primop 'match_fail'
				('if_clause')
			-| ['compiler_generated'] )
		    end
		%% Line 397
		<>
		    when call 'erlang':'<'
			  (Ch,
			   2097152) ->
		    let <_cor18> =
			%% Line 399
			call 'erlang':'bsr'
			    (Ch, 18)
		    in  let <_cor19> =
			    %% Line 399
			    call 'erlang':'+'
				(240, _cor18)
			in  let <_cor20> =
				%% Line 400
				call 'erlang':'bsr'
				    (Ch, 12)
			    in  let <_cor21> =
				    %% Line 400
				    call 'erlang':'band'
					(_cor20, 63)
				in  let <_cor22> =
					%% Line 400
					call 'erlang':'+'
					    (128, _cor21)
				    in  let <_cor23> =
					    %% Line 401
					    call 'erlang':'bsr'
						(Ch, 6)
					in  let <_cor24> =
						%% Line 401
						call 'erlang':'band'
						    (_cor23, 63)
					    in  let <_cor25> =
						    %% Line 401
						    call 'erlang':'+'
							(128, _cor24)
						in  let <_cor26> =
							%% Line 402
							call 'erlang':'band'
							    (Ch, 63)
						    in  let <_cor27> =
							    %% Line 402
							    call 'erlang':'+'
								(128, _cor26)
							in  %% Line 399
							    [_cor19|%% Line 400
								    [_cor22|%% Line 401
									    [_cor25|%% Line 402
										    [_cor27|[]]]]]
		%% Line 403
		<>
		    when call 'erlang':'<'
			  (Ch,
			   67108864) ->
		    let <_cor28> =
			%% Line 405
			call 'erlang':'bsr'
			    (Ch, 24)
		    in  let <_cor29> =
			    %% Line 405
			    call 'erlang':'+'
				(248, _cor28)
			in  let <_cor30> =
				%% Line 406
				call 'erlang':'bsr'
				    (Ch, 18)
			    in  let <_cor31> =
				    %% Line 406
				    call 'erlang':'band'
					(_cor30, 63)
				in  let <_cor32> =
					%% Line 406
					call 'erlang':'+'
					    (128, _cor31)
				    in  let <_cor33> =
					    %% Line 407
					    call 'erlang':'bsr'
						(Ch, 12)
					in  let <_cor34> =
						%% Line 407
						call 'erlang':'band'
						    (_cor33, 63)
					    in  let <_cor35> =
						    %% Line 407
						    call 'erlang':'+'
							(128, _cor34)
						in  let <_cor36> =
							%% Line 408
							call 'erlang':'bsr'
							    (Ch, 6)
						    in  let <_cor37> =
							    %% Line 408
							    call 'erlang':'band'
								(_cor36, 63)
							in  let <_cor38> =
								%% Line 408
								call 'erlang':'+'
								    (128, _cor37)
							    in  let <_cor39> =
								    %% Line 409
								    call 'erlang':'band'
									(Ch, 63)
								in  let <_cor40> =
									%% Line 409
									call 'erlang':'+'
									    (128, _cor39)
								    in  %% Line 405
									[_cor29|%% Line 406
										[_cor32|%% Line 407
											[_cor35|%% Line 408
												[_cor38|%% Line 409
													[_cor40|[]]]]]]
		%% Line 410
		<>
		    when call 'erlang':'<'
			  (Ch,
			   2147483648) ->
		    let <_cor41> =
			%% Line 412
			call 'erlang':'bsr'
			    (Ch, 30)
		    in  let <_cor42> =
			    %% Line 412
			    call 'erlang':'+'
				(252, _cor41)
			in  let <_cor43> =
				%% Line 413
				call 'erlang':'bsr'
				    (Ch, 24)
			    in  let <_cor44> =
				    %% Line 413
				    call 'erlang':'band'
					(_cor43, 63)
				in  let <_cor45> =
					%% Line 413
					call 'erlang':'+'
					    (128, _cor44)
				    in  let <_cor46> =
					    %% Line 414
					    call 'erlang':'bsr'
						(Ch, 18)
					in  let <_cor47> =
						%% Line 414
						call 'erlang':'band'
						    (_cor46, 63)
					    in  let <_cor48> =
						    %% Line 414
						    call 'erlang':'+'
							(128, _cor47)
						in  let <_cor49> =
							%% Line 415
							call 'erlang':'bsr'
							    (Ch, 12)
						    in  let <_cor50> =
							    %% Line 415
							    call 'erlang':'band'
								(_cor49, 63)
							in  let <_cor51> =
								%% Line 415
								call 'erlang':'+'
								    (128, _cor50)
							    in  let <_cor52> =
								    %% Line 416
								    call 'erlang':'bsr'
									(Ch, 6)
								in  let <_cor53> =
									%% Line 416
									call 'erlang':'band'
									    (_cor52, 63)
								    in  let <_cor54> =
									    %% Line 416
									    call 'erlang':'+'
										(128, _cor53)
									in  let <_cor55> =
										%% Line 417
										call 'erlang':'band'
										    (Ch, 63)
									    in  let <_cor56> =
										    %% Line 417
										    call 'erlang':'+'
											(128, _cor55)
										in  %% Line 412
										    [_cor42|%% Line 413
											    [_cor45|%% Line 414
												    [_cor48|%% Line 415
													    [_cor51|%% Line 416
														    [_cor54|%% Line 417
															    [_cor56|[]]]]]]]
		( <> when 'true' ->
		      primop 'match_fail'
			  ('if_clause')
		  -| ['compiler_generated'] )
	      end
	  ( <_cor57> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor57})
		  -| [{'function_name',{'char_to_utf8',1}}] )
	    -| ['compiler_generated'] )
	end
'expand_utf8'/1 =
    %% Line 431
    fun (_cor0) ->
	%% Line 432
	apply 'expand_utf8_1'/3
	    (_cor0, [], 0)
'expand_utf8_1'/3 =
    %% Line 434
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[C|Cs],Acc,Bad>
	      when call 'erlang':'<'
		    (C,
		     128) ->
	      %% Line 436
	      apply 'expand_utf8_1'/3
		  (Cs, [C|Acc], Bad)
	  %% Line 437
	  <[C1|[C2|Cs]],Acc,Bad>
	      when try
		    let <_cor3> =
			call 'erlang':'band'
			    (C1, 224)
		    in  let <_cor4> =
			    call 'erlang':'=:='
				(_cor3, 192)
			in  let <_cor5> =
				%% Line 438
				call 'erlang':'band'
				    (C2, 192)
			    in  let <_cor6> =
				    %% Line 438
				    call 'erlang':'=:='
					(_cor5, 128)
				in  call 'erlang':'and'
					(_cor4, _cor6)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor8> =
		  %% Line 439
		  call 'erlang':'band'
		      (C1, 31)
	      in  let <_cor9> =
		      %% Line 439
		      call 'erlang':'bsl'
			  (_cor8, 6)
		  in  let <_cor7> =
			  %% Line 439
			  call 'erlang':'band'
			      (C2, 63)
		      in  %% Line 439
			  case call 'erlang':'bor'
				   (_cor9, _cor7) of
			    %% Line 440
			    <C>
				when call 'erlang':'=<'
				      (128,
				       C) ->
				%% Line 441
				apply 'expand_utf8_1'/3
				    (Cs, [C|Acc], Bad)
			    %% Line 442
			    <_cor53> when 'true' ->
				let <_cor10> =
				    %% Line 444
				    call 'erlang':'+'
					(Bad, 1)
				in  %% Line 444
				    apply 'expand_utf8_1'/3
					(Cs, Acc, _cor10)
			  end
	  %% Line 446
	  <[C1|[C2|[C3|Cs]]],Acc,Bad>
	      when try
		    let <_cor12> =
			call 'erlang':'band'
			    (C1, 240)
		    in  let <_cor13> =
			    call 'erlang':'=:='
				(_cor12, 224)
			in  let <_cor14> =
				%% Line 447
				call 'erlang':'band'
				    (C2, 192)
			    in  let <_cor15> =
				    %% Line 447
				    call 'erlang':'=:='
					(_cor14, 128)
				in  let <_cor16> =
					%% Line 448
					call 'erlang':'band'
					    (C3, 192)
				    in  let <_cor17> =
					    %% Line 448
					    call 'erlang':'=:='
						(_cor16, 128)
					in  let <_cor18> =
						call 'erlang':'and'
						    (_cor15, _cor17)
					    in  call 'erlang':'and'
						    (_cor13, _cor18)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor21> =
		  %% Line 449
		  call 'erlang':'band'
		      (C1, 15)
	      in  let <_cor22> =
		      %% Line 449
		      call 'erlang':'bsl'
			  (_cor21, 6)
		  in  let <_cor20> =
			  %% Line 449
			  call 'erlang':'band'
			      (C2, 63)
		      in  let <_cor23> =
			      %% Line 449
			      call 'erlang':'bor'
				  (_cor22, _cor20)
			  in  let <_cor24> =
				  %% Line 449
				  call 'erlang':'bsl'
				      (_cor23, 6)
			      in  let <_cor19> =
				      %% Line 450
				      call 'erlang':'band'
					  (C3, 63)
				  in  %% Line 449
				      case call 'erlang':'bor'
					       (_cor24, _cor19) of
					%% Line 451
					<C>
					    when call 'erlang':'=<'
						  (2048,
						   C) ->
					    %% Line 452
					    apply 'expand_utf8_1'/3
						(Cs, [C|Acc], Bad)
					%% Line 453
					<_cor54> when 'true' ->
					    let <_cor25> =
						%% Line 455
						call 'erlang':'+'
						    (Bad, 1)
					    in  %% Line 455
						apply 'expand_utf8_1'/3
						    (Cs, Acc, _cor25)
				      end
	  %% Line 457
	  <[C1|[C2|[C3|[C4|Cs]]]],Acc,Bad>
	      when try
		    let <_cor27> =
			call 'erlang':'band'
			    (C1, 248)
		    in  let <_cor28> =
			    call 'erlang':'=:='
				(_cor27, 240)
			in  let <_cor29> =
				%% Line 458
				call 'erlang':'band'
				    (C2, 192)
			    in  let <_cor30> =
				    %% Line 458
				    call 'erlang':'=:='
					(_cor29, 128)
				in  let <_cor31> =
					%% Line 459
					call 'erlang':'band'
					    (C3, 192)
				    in  let <_cor32> =
					    %% Line 459
					    call 'erlang':'=:='
						(_cor31, 128)
					in  let <_cor33> =
						%% Line 460
						call 'erlang':'band'
						    (C4, 192)
					    in  let <_cor34> =
						    %% Line 460
						    call 'erlang':'=:='
							(_cor33, 128)
						in  let <_cor35> =
							call 'erlang':'and'
							    (_cor32, _cor34)
						    in  let <_cor36> =
							    call 'erlang':'and'
								(_cor30, _cor35)
							in  call 'erlang':'and'
								(_cor28, _cor36)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor40> =
		  %% Line 461
		  call 'erlang':'band'
		      (C1, 15)
	      in  let <_cor41> =
		      %% Line 461
		      call 'erlang':'bsl'
			  (_cor40, 6)
		  in  let <_cor39> =
			  %% Line 461
			  call 'erlang':'band'
			      (C2, 63)
		      in  let <_cor42> =
			      %% Line 461
			      call 'erlang':'bor'
				  (_cor41, _cor39)
			  in  let <_cor43> =
				  %% Line 461
				  call 'erlang':'bsl'
				      (_cor42, 6)
			      in  let <_cor38> =
				      %% Line 462
				      call 'erlang':'band'
					  (C3, 63)
				  in  let <_cor44> =
					  %% Line 461
					  call 'erlang':'bor'
					      (_cor43, _cor38)
				      in  let <_cor45> =
					      %% Line 462
					      call 'erlang':'bsl'
						  (_cor44, 6)
					  in  let <_cor37> =
						  %% Line 462
						  call 'erlang':'band'
						      (C4, 63)
					      in  %% Line 461
						  case %% Line 462
						       call 'erlang':'bor'
							   (_cor45, _cor37) of
						    %% Line 463
						    <C>
							when call 'erlang':'=<'
							      (65536,
							       C) ->
							%% Line 464
							apply 'expand_utf8_1'/3
							    (Cs, [C|Acc], Bad)
						    %% Line 465
						    <_cor55> when 'true' ->
							let <_cor46> =
							    %% Line 467
							    call 'erlang':'+'
								(Bad, 1)
							in  %% Line 467
							    apply 'expand_utf8_1'/3
								(Cs, Acc, _cor46)
						  end
	  %% Line 469
	  <[_cor56|Cs],Acc,Bad> when 'true' ->
	      let <_cor48> =
		  %% Line 471
		  call 'erlang':'+'
		      (Bad, 1)
	      in  %% Line 471
		  apply 'expand_utf8_1'/3
		      (Cs, Acc, _cor48)
	  %% Line 472
	  <[],Acc,Bad> when 'true' ->
	      let <_cor49> =
		  call 'lists':'reverse'
		      (Acc)
	      in  {_cor49,Bad}
	  ( <_cor52,_cor51,_cor50> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor52,_cor51,_cor50})
		  -| [{'function_name',{'expand_utf8_1',3}}] )
	    -| ['compiler_generated'] )
	end
'to_unicode'/2 =
    %% Line 479
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Input,Cs>
	      when let <_cor2> =
		    call 'erlang':'=:='
			(Cs, 'ansi_x3.4-1968')
		in  let <_cor3> =
			call 'erlang':'=:='
			    (Cs, 'iso-ir-6')
		    in  let <_cor4> =
			    %% Line 480
			    call 'erlang':'=:='
				(Cs, 'ansi_x3.4-1986')
			in  let <_cor5> =
				%% Line 480
				call 'erlang':'=:='
				    (Cs, 'iso_646.irv:1991')
			    in  let <_cor6> =
				    %% Line 481
				    call 'erlang':'=:='
					(Cs, 'ascii')
				in  let <_cor7> =
					%% Line 481
					call 'erlang':'=:='
					    (Cs, 'iso646-us')
				    in  let <_cor8> =
					    %% Line 481
					    call 'erlang':'=:='
						(Cs, 'us-ascii')
					in  let <_cor9> =
						%% Line 481
						call 'erlang':'=:='
						    (Cs, 'us')
					    in  let <_cor10> =
						    %% Line 482
						    call 'erlang':'=:='
							(Cs, 'ibm367')
						in  let <_cor11> =
							%% Line 482
							call 'erlang':'=:='
							    (Cs, 'cp367')
						    in  let <_cor12> =
							    %% Line 482
							    call 'erlang':'=:='
								(Cs, 'csascii')
							in  let <_cor13> =
								%% Line 482
								call 'erlang':'or'
								    (_cor11, _cor12)
							    in  let <_cor14> =
								    %% Line 482
								    call 'erlang':'or'
									(_cor10, _cor13)
								in  let <_cor15> =
									%% Line 481
									call 'erlang':'or'
									    (_cor9, _cor14)
								    in  let <_cor16> =
									    %% Line 481
									    call 'erlang':'or'
										(_cor8, _cor15)
									in  let <_cor17> =
										%% Line 481
										call 'erlang':'or'
										    (_cor7, _cor16)
									    in  let <_cor18> =
										    %% Line 481
										    call 'erlang':'or'
											(_cor6, _cor17)
										in  let <_cor19> =
											%% Line 480
											call 'erlang':'or'
											    (_cor5, _cor18)
										    in  let <_cor20> =
											    %% Line 480
											    call 'erlang':'or'
												(_cor4, _cor19)
											in  let <_cor21> =
												call 'erlang':'or'
												    (_cor3, _cor20)
											    in  call 'erlang':'or'
												    (_cor2, _cor21) ->
	      %% Line 483
	      Input
	  %% Line 484
	  <Input,Cs>
	      when let <_cor22> =
		    call 'erlang':'=:='
			(Cs, 'iso-10646-utf-1')
		in  let <_cor23> =
			call 'erlang':'=:='
			    (Cs, 'csiso10646utf1')
		    in  call 'erlang':'or'
			    (_cor22, _cor23) ->
	      %% Line 485
	      Input
	  %% Line 486
	  <Input,Cs>
	      when let <_cor24> =
		    call 'erlang':'=:='
			(Cs, 'iso_646.basic:1983')
		in  let <_cor25> =
			call 'erlang':'=:='
			    (Cs, 'ref')
		    in  let <_cor26> =
			    %% Line 487
			    call 'erlang':'=:='
				(Cs, 'csiso646basic1983')
			in  let <_cor27> =
				call 'erlang':'or'
				    (_cor25, _cor26)
			    in  call 'erlang':'or'
				    (_cor24, _cor27) ->
	      %% Line 488
	      Input
	  %% Line 489
	  <Input,Cs>
	      when let <_cor28> =
		    call 'erlang':'=:='
			(Cs, 'iso_8859-1:1987')
		in  let <_cor29> =
			call 'erlang':'=:='
			    (Cs, 'iso-ir-100')
		    in  let <_cor30> =
			    %% Line 490
			    call 'erlang':'=:='
				(Cs, 'iso_8859-1')
			in  let <_cor31> =
				%% Line 490
				call 'erlang':'=:='
				    (Cs, 'iso-8859-1')
			    in  let <_cor32> =
				    %% Line 490
				    call 'erlang':'=:='
					(Cs, 'latin1')
				in  let <_cor33> =
					%% Line 491
					call 'erlang':'=:='
					    (Cs, 'l1')
				    in  let <_cor34> =
					    %% Line 491
					    call 'erlang':'=:='
						(Cs, 'ibm819')
					in  let <_cor35> =
						%% Line 492
						call 'erlang':'=:='
						    (Cs, 'cp819')
					    in  let <_cor36> =
						    %% Line 492
						    call 'erlang':'=:='
							(Cs, 'csisolatin1')
						in  let <_cor37> =
							%% Line 492
							call 'erlang':'or'
							    (_cor35, _cor36)
						    in  let <_cor38> =
							    %% Line 491
							    call 'erlang':'or'
								(_cor34, _cor37)
							in  let <_cor39> =
								%% Line 491
								call 'erlang':'or'
								    (_cor33, _cor38)
							    in  let <_cor40> =
								    %% Line 490
								    call 'erlang':'or'
									(_cor32, _cor39)
								in  let <_cor41> =
									%% Line 490
									call 'erlang':'or'
									    (_cor31, _cor40)
								    in  let <_cor42> =
									    %% Line 490
									    call 'erlang':'or'
										(_cor30, _cor41)
									in  let <_cor43> =
										call 'erlang':'or'
										    (_cor29, _cor42)
									    in  call 'erlang':'or'
										    (_cor28, _cor43) ->
	      %% Line 493
	      Input
	  %% Line 494
	  <Input,Cs>
	      when let <_cor44> =
		    call 'erlang':'=:='
			(Cs, 'iso_8859-15')
		in  let <_cor45> =
			call 'erlang':'=:='
			    (Cs, 'iso-8859-15')
		    in  let <_cor46> =
			    call 'erlang':'=:='
				(Cs, 'latin9')
			in  let <_cor47> =
				call 'erlang':'or'
				    (_cor45, _cor46)
			    in  call 'erlang':'or'
				    (_cor44, _cor47) ->
	      %% Line 495
	      apply 'from_latin9'/1
		  (Input)
	  %% Line 499
	  <Input,Cs>
	      when let <_cor48> =
		    call 'erlang':'=:='
			(Cs, 'iso-10646-ucs-2')
		in  let <_cor49> =
			call 'erlang':'=:='
			    (Cs, 'csunicode')
		    in  call 'erlang':'or'
			    (_cor48, _cor49) ->
	      %% Line 500
	      apply 'from_ucs2be'/1
		  (Input)
	  %% Line 501
	  <Input,Cs>
	      when let <_cor50> =
		    call 'erlang':'=:='
			(Cs, 'iso-10646-ucs-4')
		in  let <_cor51> =
			call 'erlang':'=:='
			    (Cs, 'csucs4')
		    in  call 'erlang':'or'
			    (_cor50, _cor51) ->
	      %% Line 502
	      apply 'from_ucs4be'/1
		  (Input)
	  %% Line 503
	  <Input,Cs>
	      when let <_cor52> =
		    call 'erlang':'=:='
			(Cs, 'utf-16be')
		in  let <_cor53> =
			call 'erlang':'=:='
			    (Cs, 'utf-16')
		    in  call 'erlang':'or'
			    (_cor52, _cor53) ->
	      %% Line 504
	      apply 'from_utf16be'/1
		  (Input)
	  %% Line 505
	  <Input,'utf-16le'> when 'true' ->
	      %% Line 506
	      apply 'from_utf16le'/1
		  (Input)
	  %% Line 507
	  <Input,'utf-8'> when 'true' ->
	      %% Line 508
	      apply 'from_utf8'/1
		  (Input)
	  %% Line 509
	  <Input,Charset> when 'true' ->
	      %% Line 510
	      call 'erlang':'exit'
		  ({'bad_character_code',Input,Charset})
	end
'is_incharset'/2 =
    %% Line 519
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <In,Cs>
	      when let <_cor2> =
		    call 'erlang':'=:='
			(Cs, 'ansi_x3.4-1968')
		in  let <_cor3> =
			call 'erlang':'=:='
			    (Cs, 'iso-ir-6')
		    in  let <_cor4> =
			    %% Line 520
			    call 'erlang':'=:='
				(Cs, 'ansi_x3.4-1986')
			in  let <_cor5> =
				%% Line 520
				call 'erlang':'=:='
				    (Cs, 'iso_646.irv:1991')
			    in  let <_cor6> =
				    %% Line 521
				    call 'erlang':'=:='
					(Cs, 'ascii')
				in  let <_cor7> =
					%% Line 521
					call 'erlang':'=:='
					    (Cs, 'iso646-us')
				    in  let <_cor8> =
					    %% Line 521
					    call 'erlang':'=:='
						(Cs, 'us-ascii')
					in  let <_cor9> =
						%% Line 521
						call 'erlang':'=:='
						    (Cs, 'us')
					    in  let <_cor10> =
						    %% Line 522
						    call 'erlang':'=:='
							(Cs, 'ibm367')
						in  let <_cor11> =
							%% Line 522
							call 'erlang':'=:='
							    (Cs, 'cp367')
						    in  let <_cor12> =
							    %% Line 522
							    call 'erlang':'=:='
								(Cs, 'csascii')
							in  let <_cor13> =
								%% Line 522
								call 'erlang':'or'
								    (_cor11, _cor12)
							    in  let <_cor14> =
								    %% Line 522
								    call 'erlang':'or'
									(_cor10, _cor13)
								in  let <_cor15> =
									%% Line 521
									call 'erlang':'or'
									    (_cor9, _cor14)
								    in  let <_cor16> =
									    %% Line 521
									    call 'erlang':'or'
										(_cor8, _cor15)
									in  let <_cor17> =
										%% Line 521
										call 'erlang':'or'
										    (_cor7, _cor16)
									    in  let <_cor18> =
										    %% Line 521
										    call 'erlang':'or'
											(_cor6, _cor17)
										in  let <_cor19> =
											%% Line 520
											call 'erlang':'or'
											    (_cor5, _cor18)
										    in  let <_cor20> =
											    %% Line 520
											    call 'erlang':'or'
												(_cor4, _cor19)
											in  let <_cor21> =
												call 'erlang':'or'
												    (_cor3, _cor20)
											    in  call 'erlang':'or'
												    (_cor2, _cor21) ->
	      %% Line 523
	      case <> of
		%% Line 524
		<>
		    when call 'erlang':'is_integer'
			  (In) ->
		    apply 'is_ascii'/1
			(In)
		%% Line 525
		<>
		    when call 'erlang':'is_list'
			  (In) ->
		    apply 'test_charset'/2
			(( 'is_ascii'/1
			   -| [{'id',{0,0,'-is_incharset/2-fun-0-'}}] ), In)
		( <> when 'true' ->
		      primop 'match_fail'
			  ('if_clause')
		  -| ['compiler_generated'] )
	      end
	  %% Line 527
	  <In,Cs>
	      when let <_cor22> =
		    call 'erlang':'=:='
			(Cs, 'iso-10646-utf-1')
		in  let <_cor23> =
			call 'erlang':'=:='
			    (Cs, 'csiso10646utf1')
		    in  call 'erlang':'or'
			    (_cor22, _cor23) ->
	      %% Line 528
	      case <> of
		%% Line 529
		<>
		    when call 'erlang':'is_integer'
			  (In) ->
		    apply 'is_unicode'/1
			(In)
		%% Line 530
		<>
		    when call 'erlang':'is_list'
			  (In) ->
		    apply 'test_charset'/2
			(( 'is_unicode'/1
			   -| [{'id',{0,0,'-is_incharset/2-fun-1-'}}] ), In)
		( <> when 'true' ->
		      primop 'match_fail'
			  ('if_clause')
		  -| ['compiler_generated'] )
	      end
	  %% Line 532
	  <In,Cs>
	      when let <_cor24> =
		    call 'erlang':'=:='
			(Cs, 'iso_646.basic:1983')
		in  let <_cor25> =
			call 'erlang':'=:='
			    (Cs, 'ref')
		    in  let <_cor26> =
			    %% Line 533
			    call 'erlang':'=:='
				(Cs, 'csiso646basic1983')
			in  let <_cor27> =
				call 'erlang':'or'
				    (_cor25, _cor26)
			    in  call 'erlang':'or'
				    (_cor24, _cor27) ->
	      %% Line 534
	      case <> of
		%% Line 535
		<>
		    when call 'erlang':'is_integer'
			  (In) ->
		    apply 'is_iso646_basic'/1
			(In)
		%% Line 536
		<>
		    when call 'erlang':'is_list'
			  (In) ->
		    apply 'test_charset'/2
			(( 'is_iso646_basic'/1
			   -| [{'id',{0,0,'-is_incharset/2-fun-2-'}}] ), In)
		( <> when 'true' ->
		      primop 'match_fail'
			  ('if_clause')
		  -| ['compiler_generated'] )
	      end
	  %% Line 538
	  <In,Cs>
	      when let <_cor28> =
		    call 'erlang':'=:='
			(Cs, 'iso_8859-1:1987')
		in  let <_cor29> =
			call 'erlang':'=:='
			    (Cs, 'iso-ir-100')
		    in  let <_cor30> =
			    %% Line 539
			    call 'erlang':'=:='
				(Cs, 'iso_8859-1')
			in  let <_cor31> =
				%% Line 539
				call 'erlang':'=:='
				    (Cs, 'iso-8859-1')
			    in  let <_cor32> =
				    %% Line 540
				    call 'erlang':'=:='
					(Cs, 'latin1')
				in  let <_cor33> =
					%% Line 540
					call 'erlang':'=:='
					    (Cs, 'l1')
				    in  let <_cor34> =
					    %% Line 540
					    call 'erlang':'=:='
						(Cs, 'ibm819')
					in  let <_cor35> =
						%% Line 541
						call 'erlang':'=:='
						    (Cs, 'cp819')
					    in  let <_cor36> =
						    %% Line 541
						    call 'erlang':'=:='
							(Cs, 'csisolatin1')
						in  let <_cor37> =
							%% Line 541
							call 'erlang':'or'
							    (_cor35, _cor36)
						    in  let <_cor38> =
							    %% Line 540
							    call 'erlang':'or'
								(_cor34, _cor37)
							in  let <_cor39> =
								%% Line 540
								call 'erlang':'or'
								    (_cor33, _cor38)
							    in  let <_cor40> =
								    %% Line 540
								    call 'erlang':'or'
									(_cor32, _cor39)
								in  let <_cor41> =
									%% Line 539
									call 'erlang':'or'
									    (_cor31, _cor40)
								    in  let <_cor42> =
									    %% Line 539
									    call 'erlang':'or'
										(_cor30, _cor41)
									in  let <_cor43> =
										call 'erlang':'or'
										    (_cor29, _cor42)
									    in  call 'erlang':'or'
										    (_cor28, _cor43) ->
	      %% Line 542
	      case <> of
		%% Line 543
		<>
		    when call 'erlang':'is_integer'
			  (In) ->
		    apply 'is_latin1'/1
			(In)
		%% Line 544
		<>
		    when call 'erlang':'is_list'
			  (In) ->
		    apply 'test_charset'/2
			(( 'is_latin1'/1
			   -| [{'id',{0,0,'-is_incharset/2-fun-3-'}}] ), In)
		( <> when 'true' ->
		      primop 'match_fail'
			  ('if_clause')
		  -| ['compiler_generated'] )
	      end
	  %% Line 546
	  <In,Charset>
	      when call 'erlang':'is_integer'
		    (In) ->
	      %% Line 547
	      case apply 'to_unicode'/2
		       ([In|[]], Charset) of
		%% Line 548
		<{'error','unsupported_charset'}> when 'true' ->
		    %% Line 549
		    {'error','unsupported_charset'}
		%% Line 550
		<{'error',_cor48}> when 'true' ->
		    %% Line 551
		    'false'
		%% Line 552
		<[Int|[]]>
		    when call 'erlang':'is_integer'
			  (Int) ->
		    %% Line 553
		    'true'
		( <_cor44> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor44})
		  -| ['compiler_generated'] )
	      end
	  %% Line 555
	  <In,Charset>
	      when call 'erlang':'is_list'
		    (In) ->
	      %% Line 556
	      case apply 'to_unicode'/2
		       (In, Charset) of
		%% Line 557
		<{'error','unsupported_charset'}> when 'true' ->
		    %% Line 558
		    {'error','unsupported_charset'}
		%% Line 559
		<{'error',_cor49}> when 'true' ->
		    %% Line 560
		    'false'
		%% Line 561
		<[Int|[]]>
		    when call 'erlang':'is_integer'
			  (Int) ->
		    %% Line 562
		    'true'
		( <_cor45> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor45})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor47,_cor46> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor47,_cor46})
		  -| [{'function_name',{'is_incharset',2}}] )
	    -| ['compiler_generated'] )
	end
'test_charset'/2 =
    %% Line 566
    fun (_cor1,_cor0) ->
	%% Line 567
	case call 'lists':'all'
		 (_cor1, _cor0) of
	  %% Line 568
	  <'true'> when 'true' ->
	      %% Line 569
	      'true'
	  %% Line 570
	  <_cor5> when 'true' ->
	      %% Line 571
	      'false'
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('xmerl_ucs')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('xmerl_ucs', _cor0)
end