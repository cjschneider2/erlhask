module 'xmerl_regexp' ['compile'/1,
		       'compile_proc'/2,
		       'first_match'/2,
		       'format_error'/1,
		       'gsub'/3,
		       'make_dfa'/1,
		       'make_dfa'/2,
		       'make_nfa'/1,
		       'match'/2,
		       'matches'/2,
		       'module_info'/0,
		       'module_info'/1,
		       'parse'/1,
		       'setup'/1,
		       'sh_to_awk'/1,
		       'split'/2,
		       'sub'/3,
		       'sub_first_match'/2,
		       'sub_match'/2]
    attributes []
'setup'/1 =
    %% Line 44
    fun (_cor0) ->
	let <RE> =
	    %% Line 45
	    apply 'setup'/2
		(_cor0, [94])
	in  let <_cor2> =
		%% Line 46
		call 'erlang':'self'
		    ()
	    in  let <Pid> =
		    %% Line 46
		    call 'erlang':'spawn'
			('xmerl_regexp', 'compile_proc', [_cor2|[RE|[]]])
		in  %% Line 47
		    receive
		      %% Line 48
		      <{'ok',Result}> when 'true' ->
			  %% Line 49
			  Result
		    after %% Line 50
			  2000 ->
		      do  %% Line 51
			  call 'erlang':'exit'
			      (Pid, 'force')
			  %% Line 52
			  apply 'parse'/1
			      (RE)
'compile_proc'/2 =
    %% Line 56
    fun (_cor1,_cor0) ->
	let <Res> =
	    %% Line 57
	    apply 'compile'/1
		(_cor0)
	in  %% Line 58
	    call 'erlang':'!'
		(_cor1, {'ok',Res})
'setup'/2 =
    %% Line 61
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[92|[100|S]],Acc> when 'true' ->
	      let <_cor2> =
		  call 'erlang':'++'
		      ([93|[57|[45|[48|[91]]]]], Acc)
	      in  apply 'setup'/2
		      (S, _cor2)
	  %% Line 62
	  <[92|[68|S]],Acc> when 'true' ->
	      let <_cor3> =
		  call 'erlang':'++'
		      ([93|[57|[45|[48|[94|[91]]]]]], Acc)
	      in  apply 'setup'/2
		      (S, _cor3)
	  %% Line 63
	  <[92|[115|S]],Acc> when 'true' ->
	      let <_cor4> =
		  call 'erlang':'++'
		      ([93|[115|[92|[116|[92|[110|[92|[114|[92|[91]]]]]]]]]], Acc)
	      in  apply 'setup'/2
		      (S, _cor4)
	  %% Line 64
	  <[92|[83|S]],Acc> when 'true' ->
	      let <_cor5> =
		  call 'erlang':'++'
		      ([93|[92|[115|[92|[116|[92|[110|[92|[114|[94|[91]]]]]]]]]]], Acc)
	      in  apply 'setup'/2
		      (S, _cor5)
	  %% Line 65
	  <[92|[105|S]],Acc> when 'true' ->
	      let <_cor6> =
		  call 'erlang':'++'
		      ([93|[122|[45|[97|[90|[45|[65|[95|[58|[91]]]]]]]]]], Acc)
	      in  apply 'setup'/2
		      (S, _cor6)
	  %% Line 66
	  <[92|[73|S]],Acc> when 'true' ->
	      let <_cor7> =
		  call 'erlang':'++'
		      ([93|[122|[45|[97|[90|[45|[65|[95|[58|[94|[91]]]]]]]]]]], Acc)
	      in  apply 'setup'/2
		      (S, _cor7)
	  %% Line 67
	  <[92|[99|S]],Acc> when 'true' ->
	      let <_cor8> =
		  [45|[91|Acc]]
	      in  let <_cor9> =
		      [183|_cor8]
		  in  let <_cor10> =
			  call 'erlang':'++'
			      ([93|[57|[45|[48|[122|[45|[97|[90|[45|[65|[95|[58|[46]]]]]]]]]]]]], _cor9)
		      in  apply 'setup'/2
			      (S, _cor10)
	  %% Line 68
	  <[92|[67|S]],Acc> when 'true' ->
	      let <_cor11> =
		  [45|[94|[91|Acc]]]
	      in  let <_cor12> =
		      [183|_cor11]
		  in  let <_cor13> =
			  call 'erlang':'++'
			      ([93|[57|[45|[48|[122|[45|[97|[90|[45|[65|[95|[58|[46]]]]]]]]]]]]], _cor12)
		      in  apply 'setup'/2
			      (S, _cor13)
	  %% Line 182
	  <[A|S],Acc> when 'true' ->
	      apply 'setup'/2
		  (S, [A|Acc])
	  %% Line 183
	  <[],Acc> when 'true' ->
	      call 'lists':'reverse'
		  ([36|Acc])
	  ( <_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14})
		  -| [{'function_name',{'setup',2}}] )
	    -| ['compiler_generated'] )
	end
'sh_to_awk'/1 =
    %% Line 189
    fun (_cor0) ->
	let <_cor1> =
	    apply 'sh_to_awk_1'/1
		(_cor0)
	in  [94|[40|_cor1]]
'sh_to_awk_1'/1 =
    %% Line 191
    fun (_cor0) ->
	case _cor0 of
	  <[42|Sh]> when 'true' ->
	      let <_cor1> =
		  %% Line 192
		  apply 'sh_to_awk_1'/1
		      (Sh)
	      in  %% Line 192
		  [46|[42|_cor1]]
	  %% Line 193
	  <[63|Sh]> when 'true' ->
	      let <_cor2> =
		  %% Line 194
		  apply 'sh_to_awk_1'/1
		      (Sh)
	      in  %% Line 194
		  [46|_cor2]
	  %% Line 195
	  <[91|[94|[93|Sh]]]> when 'true' ->
	      let <_cor3> =
		  %% Line 196
		  apply 'sh_to_awk_1'/1
		      (Sh)
	      in  %% Line 196
		  [92|[94|_cor3]]
	  %% Line 198
	  <[91|[94|Sh]]> when 'true' ->
	      let <_cor4> =
		  apply 'sh_to_awk_2'/2
		      (Sh, 'true')
	      in  [91|_cor4]
	  %% Line 199
	  <[91|[33|Sh]]> when 'true' ->
	      let <_cor5> =
		  apply 'sh_to_awk_2'/2
		      (Sh, 'false')
	      in  [91|[94|_cor5]]
	  %% Line 200
	  <[91|Sh]> when 'true' ->
	      let <_cor6> =
		  apply 'sh_to_awk_2'/2
		      (Sh, 'false')
	      in  [91|_cor6]
	  %% Line 201
	  <[C|Sh]> when 'true' ->
	      %% Line 203
	      case apply 'sh_special_char'/1
		       (C) of
		%% Line 204
		<'true'> when 'true' ->
		    let <_cor7> =
			apply 'sh_to_awk_1'/1
			    (Sh)
		    in  [92|[C|_cor7]]
		%% Line 205
		<'false'> when 'true' ->
		    let <_cor8> =
			apply 'sh_to_awk_1'/1
			    (Sh)
		    in  [C|_cor8]
		( <_cor9> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor9})
		  -| ['compiler_generated'] )
	      end
	  %% Line 207
	  <[]> when 'true' ->
	      [41|[36]]
	  ( <_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10})
		  -| [{'function_name',{'sh_to_awk_1',1}}] )
	    -| ['compiler_generated'] )
	end
'sh_to_awk_2'/2 =
    %% Line 209
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[93|Sh],UpArrow> when 'true' ->
	      let <_cor2> =
		  apply 'sh_to_awk_3'/2
		      (Sh, UpArrow)
	      in  [93|_cor2]
	  %% Line 210
	  <Sh,UpArrow> when 'true' ->
	      apply 'sh_to_awk_3'/2
		  (Sh, UpArrow)
	end
'sh_to_awk_3'/2 =
    %% Line 212
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[93|Sh],'true'> when 'true' ->
	      let <_cor2> =
		  apply 'sh_to_awk_1'/1
		      (Sh)
	      in  [94|[93|_cor2]]
	  %% Line 213
	  <[93|Sh],'false'> when 'true' ->
	      let <_cor3> =
		  apply 'sh_to_awk_1'/1
		      (Sh)
	      in  [93|_cor3]
	  %% Line 214
	  <[C|Sh],UpArrow> when 'true' ->
	      let <_cor4> =
		  apply 'sh_to_awk_3'/2
		      (Sh, UpArrow)
	      in  [C|_cor4]
	  %% Line 215
	  <[],'true'> when 'true' ->
	      let <_cor5> =
		  apply 'sh_to_awk_1'/1
		      ([])
	      in  [94|_cor5]
	  %% Line 216
	  <[],'false'> when 'true' ->
	      apply 'sh_to_awk_1'/1
		  ([])
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6})
		  -| [{'function_name',{'sh_to_awk_3',2}}] )
	    -| ['compiler_generated'] )
	end
'sh_special_char'/1 =
    %% Line 221
    fun (_cor0) ->
	case _cor0 of
	  <124> when 'true' ->
	      'true'
	  %% Line 222
	  <42> when 'true' ->
	      'true'
	  %% Line 223
	  <43> when 'true' ->
	      'true'
	  %% Line 224
	  <63> when 'true' ->
	      'true'
	  %% Line 225
	  <40> when 'true' ->
	      'true'
	  %% Line 226
	  <41> when 'true' ->
	      'true'
	  %% Line 227
	  <92> when 'true' ->
	      'true'
	  %% Line 228
	  <94> when 'true' ->
	      'true'
	  %% Line 229
	  <36> when 'true' ->
	      'true'
	  %% Line 230
	  <46> when 'true' ->
	      'true'
	  %% Line 231
	  <91> when 'true' ->
	      'true'
	  %% Line 232
	  <93> when 'true' ->
	      'true'
	  %% Line 233
	  <34> when 'true' ->
	      'true'
	  %% Line 234
	  <_X_C> when 'true' ->
	      'false'
	end
'parse'/1 =
    %% Line 239
    fun (_cor0) ->
	let <_cor1> =
	    catch
		%% Line 240
		apply 'reg'/2
		    (_cor0, 0)
	in  %% Line 240
	    case _cor1 of
	      %% Line 241
	      <{R,Sc,[]}> when 'true' ->
		  {'ok',{'regexp',{R,Sc}}}
	      %% Line 242
	      <{_X_R,_X_Sc,[C|_cor4]}> when 'true' ->
		  {'error',{'illegal',[C|[]]}}
	      %% Line 243
	      <{'error',E}> when 'true' ->
		  {'error',E}
	      ( <_cor2> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor2})
		-| ['compiler_generated'] )
	    end
'format_error'/1 =
    %% Line 248
    fun (_cor0) ->
	case _cor0 of
	  <{'interval_range',What}> when 'true' ->
	      let <_cor1> =
		  %% Line 249
		  call 'io_lib':'write_string'
		      (What)
	      in  %% Line 249
		  [[105|[108|[108|[101|[103|[97|[108|[32|[105|[110|[116|[101|[114|[118|[97|[108|[32|[114|[97|[110|[103|[101]]]]]]]]]]]]]]]]]]]]]]|[_cor1|[]]]
	  %% Line 250
	  <{'illegal',What}> when 'true' ->
	      [[105|[108|[108|[101|[103|[97|[108|[32|[99|[104|[97|[114|[97|[99|[116|[101|[114|[32|[96]]]]]]]]]]]]]]]]]]]|[What|[[39]]]]
	  %% Line 251
	  <{'unterminated',What}> when 'true' ->
	      [[117|[110|[116|[101|[114|[109|[105|[110|[97|[116|[101|[100|[32|[96]]]]]]]]]]]]]]|[What|[[39]]]]
	  %% Line 252
	  <{'posix_cc',What}> when 'true' ->
	      let <_cor2> =
		  %% Line 253
		  call 'io_lib':'write_string'
		      (What)
	      in  %% Line 253
		  [[105|[108|[108|[101|[103|[97|[108|[32|[80|[79|[83|[73|[88|[32|[99|[104|[97|[114|[97|[99|[116|[101|[114|[32|[99|[108|[97|[115|[115|[32]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[_cor2|[]]]
	  %% Line 254
	  <{'char_class',What}> when 'true' ->
	      let <_cor3> =
		  %% Line 255
		  call 'io_lib':'write_string'
		      (What)
	      in  %% Line 255
		  [[105|[108|[108|[101|[103|[97|[108|[32|[99|[104|[97|[114|[97|[99|[116|[101|[114|[32|[99|[108|[97|[115|[115|[32]]]]]]]]]]]]]]]]]]]]]]]]|[_cor3|[]]]
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'format_error',1}}] )
	    -| ['compiler_generated'] )
	end
'match'/2 =
    %% Line 260
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <S,RegExp>
	      when call 'erlang':'is_list'
		    (RegExp) ->
	      %% Line 261
	      case apply 'parse'/1
		       (RegExp) of
		%% Line 262
		<{'ok',RE}> when 'true' ->
		    apply 'match'/2
			(S, RE)
		%% Line 263
		<{'error',E}> when 'true' ->
		    {'error',E}
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 265
	  <S,{'regexp',RE}> when 'true' ->
	      %% Line 266
	      case apply 'match_re'/5
		       (RE, S, 1, 0, -1) of
		%% Line 267
		<{Start,Len}>
		    when call 'erlang':'>='
			  (Len,
			   0) ->
		    %% Line 268
		    {'match',Start,Len}
		%% Line 269
		<{_X_Start,_X_Len}> when 'true' ->
		    'nomatch'
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 271
	  <S,{'comp_regexp',RE}> when 'true' ->
	      %% Line 272
	      case apply 'match_comp'/5
		       (RE, S, 1, 0, -1) of
		%% Line 273
		<{Start,Len}>
		    when call 'erlang':'>='
			  (Len,
			   0) ->
		    %% Line 274
		    {'match',Start,Len}
		%% Line 275
		<{_X_Start,_X_Len}> when 'true' ->
		    'nomatch'
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor6})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'match',2}}] )
	    -| ['compiler_generated'] )
	end
'match_re'/5 =
    %% Line 278
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <RE,S0 = [_cor15|Cs],P0,Mst,Mlen> when 'true' ->
	      %% Line 279
	      case apply 're_apply'/3
		       (S0, P0, RE) of
		%% Line 280
		<{'match',P1,_X_S1,_X_Subs}> when 'true' ->
		    let <Len> =
			%% Line 281
			call 'erlang':'-'
			    (P1, P0)
		    in  %% Line 282
			case <> of
			  <>
			      when call 'erlang':'>'
				    (Len,
				     Mlen) ->
			      let <_cor6> =
				  call 'erlang':'+'
				      (P0, 1)
			      in  apply 'match_re'/5
				      (RE, Cs, _cor6, P0, Len)
			  %% Line 283
			  <> when 'true' ->
			      let <_cor7> =
				  call 'erlang':'+'
				      (P0, 1)
			      in  apply 'match_re'/5
				      (RE, Cs, _cor7, Mst, Mlen)
			end
		%% Line 285
		<'nomatch'> when 'true' ->
		    let <_cor8> =
			call 'erlang':'+'
			    (P0, 1)
		    in  apply 'match_re'/5
			    (RE, Cs, _cor8, Mst, Mlen)
		%% Line 286
		<'never_match'> when 'true' ->
		    {Mst,Mlen}
		( <_cor9> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor9})
		  -| ['compiler_generated'] )
	      end
	  %% Line 288
	  <_X_RE,_X_S,_X_P,Mst,Mlen> when 'true' ->
	      {Mst,Mlen}
	end
'match_comp'/5 =
    %% Line 290
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <RE,S0 = [_cor15|Cs],P0,Mst,Mlen> when 'true' ->
	      %% Line 291
	      case apply 'comp_apply'/3
		       (S0, P0, RE) of
		%% Line 292
		<{'match',P1,_X_S1}> when 'true' ->
		    let <Len> =
			%% Line 293
			call 'erlang':'-'
			    (P1, P0)
		    in  %% Line 294
			case <> of
			  <>
			      when call 'erlang':'>'
				    (Len,
				     Mlen) ->
			      let <_cor6> =
				  call 'erlang':'+'
				      (P0, 1)
			      in  apply 'match_comp'/5
				      (RE, Cs, _cor6, P0, Len)
			  %% Line 295
			  <> when 'true' ->
			      let <_cor7> =
				  call 'erlang':'+'
				      (P0, 1)
			      in  apply 'match_comp'/5
				      (RE, Cs, _cor7, Mst, Mlen)
			end
		%% Line 297
		<'nomatch'> when 'true' ->
		    let <_cor8> =
			call 'erlang':'+'
			    (P0, 1)
		    in  apply 'match_comp'/5
			    (RE, Cs, _cor8, Mst, Mlen)
		( <_cor9> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor9})
		  -| ['compiler_generated'] )
	      end
	  %% Line 299
	  <_X_RE,_X_S,_X_P,Mst,Mlen> when 'true' ->
	      {Mst,Mlen}
	end
'first_match'/2 =
    %% Line 326
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <S,RegExp>
	      when call 'erlang':'is_list'
		    (RegExp) ->
	      %% Line 327
	      case apply 'parse'/1
		       (RegExp) of
		%% Line 328
		<{'ok',RE}> when 'true' ->
		    apply 'first_match'/2
			(S, RE)
		%% Line 329
		<{'error',E}> when 'true' ->
		    {'error',E}
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 331
	  <S,{'regexp',RE}> when 'true' ->
	      %% Line 332
	      case apply 'first_match_re'/3
		       (RE, S, 1) of
		%% Line 333
		<{Start,Len,_cor7}> when 'true' ->
		    {'match',Start,Len}
		%% Line 334
		<'nomatch'> when 'true' ->
		    'nomatch'
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 336
	  <S,{'comp_regexp',RE}> when 'true' ->
	      %% Line 337
	      case apply 'first_match_comp'/3
		       (RE, S, 1) of
		%% Line 338
		<{Start,Len}> when 'true' ->
		    {'match',Start,Len}
		%% Line 339
		<'nomatch'> when 'true' ->
		    'nomatch'
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'first_match',2}}] )
	    -| ['compiler_generated'] )
	end
'first_match_re'/3 =
    %% Line 342
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <RE,S,St>
	      when call 'erlang':'=/='
		    (S,
		     []) ->
	      %% Line 343
	      case apply 're_apply'/3
		       (S, St, RE) of
		%% Line 344
		<{'match',P,_X_Rest,Subs}> when 'true' ->
		    let <_cor3> =
			call 'erlang':'-'
			    (P, St)
		    in  {St,_cor3,Subs}
		%% Line 345
		<'nomatch'> when 'true' ->
		    let <_cor5> =
			call 'erlang':'tl'
			    (S)
		    in  let <_cor4> =
			    call 'erlang':'+'
				(St, 1)
			in  apply 'first_match_re'/3
				(RE, _cor5, _cor4)
		%% Line 346
		<'never_match'> when 'true' ->
		    'nomatch'
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor6})
		  -| ['compiler_generated'] )
	      end
	  %% Line 348
	  <_X_RE,[],_X_St> when 'true' ->
	      'nomatch'
	  ( <_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7})
		  -| [{'function_name',{'first_match_re',3}}] )
	    -| ['compiler_generated'] )
	end
'first_match_comp'/3 =
    %% Line 350
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <RE,S,St>
	      when call 'erlang':'=/='
		    (S,
		     []) ->
	      %% Line 351
	      case apply 'comp_apply'/3
		       (S, St, RE) of
		%% Line 352
		<{'match',P,_X_Rest}> when 'true' ->
		    let <_cor3> =
			call 'erlang':'-'
			    (P, St)
		    in  {St,_cor3}
		%% Line 353
		<'nomatch'> when 'true' ->
		    let <_cor5> =
			call 'erlang':'tl'
			    (S)
		    in  let <_cor4> =
			    call 'erlang':'+'
				(St, 1)
			in  apply 'first_match_comp'/3
				(RE, _cor5, _cor4)
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor6})
		  -| ['compiler_generated'] )
	      end
	  %% Line 355
	  <_X_RE,[],_X_St> when 'true' ->
	      'nomatch'
	  ( <_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7})
		  -| [{'function_name',{'first_match_comp',3}}] )
	    -| ['compiler_generated'] )
	end
'matches'/2 =
    %% Line 360
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <S,RegExp>
	      when call 'erlang':'is_list'
		    (RegExp) ->
	      %% Line 361
	      case apply 'parse'/1
		       (RegExp) of
		%% Line 362
		<{'ok',RE}> when 'true' ->
		    apply 'matches'/2
			(S, RE)
		%% Line 363
		<{'error',E}> when 'true' ->
		    {'error',E}
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 365
	  <S,{'regexp',RE}> when 'true' ->
	      let <_cor3> =
		  apply 'matches_re'/3
		      (S, RE, 1)
	      in  {'match',_cor3}
	  %% Line 366
	  <S,{'comp_regexp',RE}> when 'true' ->
	      let <_cor4> =
		  apply 'matches_comp'/3
		      (S, RE, 1)
	      in  {'match',_cor4}
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'matches',2}}] )
	    -| ['compiler_generated'] )
	end
'matches_re'/3 =
    %% Line 368
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <S0 = [_cor13|Cs],RE,P0> when 'true' ->
	      %% Line 369
	      case apply 're_apply'/3
		       (S0, P0, RE) of
		%% Line 370
		<{'match',_cor14,S1,_X_Subs}>
		    when call 'erlang':'=:='
			  (_cor14,
			   P0) ->
		    let <_cor4> =
			%% Line 371
			call 'erlang':'tl'
			    (S1)
		    in  let <_cor3> =
			    %% Line 371
			    call 'erlang':'+'
				(P0, 1)
			in  let <_cor5> =
				%% Line 371
				apply 'matches_re'/3
				    (_cor4, RE, _cor3)
			    in  %% Line 371
				[{P0,0}|_cor5]
		%% Line 372
		<{'match',P1,S1,_X_Subs}> when 'true' ->
		    let <_cor6> =
			%% Line 373
			call 'erlang':'-'
			    (P1, P0)
		    in  let <_cor7> =
			    %% Line 373
			    apply 'matches_re'/3
				(S1, RE, P1)
			in  %% Line 373
			    [{P0,_cor6}|_cor7]
		%% Line 374
		<'nomatch'> when 'true' ->
		    let <_cor8> =
			call 'erlang':'+'
			    (P0, 1)
		    in  apply 'matches_re'/3
			    (Cs, RE, _cor8)
		%% Line 375
		<'never_match'> when 'true' ->
		    []
		( <_cor9> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor9})
		  -| ['compiler_generated'] )
	      end
	  %% Line 377
	  <[],_X_RE,_X_P> when 'true' ->
	      []
	  ( <_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10})
		  -| [{'function_name',{'matches_re',3}}] )
	    -| ['compiler_generated'] )
	end
'matches_comp'/3 =
    %% Line 379
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <S0 = [_cor13|Cs],RE,P0> when 'true' ->
	      %% Line 380
	      case apply 'comp_apply'/3
		       (S0, P0, RE) of
		%% Line 381
		<{'match',_cor14,S1}>
		    when call 'erlang':'=:='
			  (_cor14,
			   P0) ->
		    let <_cor4> =
			%% Line 382
			call 'erlang':'tl'
			    (S1)
		    in  let <_cor3> =
			    %% Line 382
			    call 'erlang':'+'
				(P0, 1)
			in  let <_cor5> =
				%% Line 382
				apply 'matches_comp'/3
				    (_cor4, RE, _cor3)
			    in  %% Line 382
				[{P0,0}|_cor5]
		%% Line 383
		<{'match',P1,S1}> when 'true' ->
		    let <_cor6> =
			%% Line 384
			call 'erlang':'-'
			    (P1, P0)
		    in  let <_cor7> =
			    %% Line 384
			    apply 'matches_comp'/3
				(S1, RE, P1)
			in  %% Line 384
			    [{P0,_cor6}|_cor7]
		%% Line 385
		<'nomatch'> when 'true' ->
		    let <_cor8> =
			call 'erlang':'+'
			    (P0, 1)
		    in  apply 'matches_comp'/3
			    (Cs, RE, _cor8)
		( <_cor9> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor9})
		  -| ['compiler_generated'] )
	      end
	  %% Line 387
	  <[],_X_RE,_X_P> when 'true' ->
	      []
	  ( <_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10})
		  -| [{'function_name',{'matches_comp',3}}] )
	    -| ['compiler_generated'] )
	end
'sub'/3 =
    %% Line 394
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <String,RegExp,Rep>
	      when call 'erlang':'is_list'
		    (RegExp) ->
	      %% Line 395
	      case apply 'parse'/1
		       (RegExp) of
		%% Line 396
		<{'ok',RE}> when 'true' ->
		    apply 'sub'/3
			(String, RE, Rep)
		%% Line 397
		<{'error',E}> when 'true' ->
		    {'error',E}
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 399
	  <String,{'regexp',RE},Rep> when 'true' ->
	      %% Line 400
	      case apply 'sub_re'/5
		       (String, 1, RE, [], Rep) of
		%% Line 401
		<{'yes',NewStr}> when 'true' ->
		    {'ok',NewStr,1}
		%% Line 402
		<'no'> when 'true' ->
		    {'ok',String,0}
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 404
	  <String,{'comp_regexp',RE},Rep> when 'true' ->
	      %% Line 405
	      case apply 'sub_comp'/5
		       (String, 1, RE, [], Rep) of
		%% Line 406
		<{'yes',NewStr}> when 'true' ->
		    {'ok',NewStr,1}
		%% Line 407
		<'no'> when 'true' ->
		    {'ok',String,0}
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor5})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'sub',3}}] )
	    -| ['compiler_generated'] )
	end
'sub_re'/5 =
    %% Line 418
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <S0 = [C|Cs],P0,RE,Bef,Rep> when 'true' ->
	      %% Line 419
	      case apply 're_apply'/3
		       (S0, P0, RE) of
		%% Line 420
		<{'match',_cor17,_X_S1,_cor18}>
		    when call 'erlang':'=:='
			  (_cor17,
			   P0) ->
		    let <_cor5> =
			%% Line 421
			call 'erlang':'+'
			    (P0, 1)
		    in  %% Line 421
			apply 'sub_re'/5
			    (Cs, _cor5, RE, [C|Bef], Rep)
		%% Line 422
		<{'match',P1,Rest,_X_Gps}> when 'true' ->
		    let <_cor6> =
			%% Line 423
			call 'erlang':'-'
			    (P1, P0)
		    in  let <_cor7> =
			    %% Line 423
			    call 'string':'substr'
				(S0, 1, _cor6)
			in  let <_cor8> =
				%% Line 423
				apply 'sub_repl'/3
				    (Rep, _cor7, Rest)
			    in  let <_cor9> =
				    %% Line 423
				    call 'lists':'reverse'
					(Bef, _cor8)
				in  %% Line 423
				    {'yes',_cor9}
		%% Line 424
		<'nomatch'> when 'true' ->
		    let <_cor10> =
			call 'erlang':'+'
			    (P0, 1)
		    in  apply 'sub_re'/5
			    (Cs, _cor10, RE, [C|Bef], Rep)
		%% Line 425
		<'never_match'> when 'true' ->
		    'no'
		( <_cor11> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor11})
		  -| ['compiler_generated'] )
	      end
	  %% Line 427
	  <[],_X_P,_X_RE,_X_Bef,_X_Rep> when 'true' ->
	      'no'
	  ( <_cor16,_cor15,_cor14,_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15,_cor14,_cor13,_cor12})
		  -| [{'function_name',{'sub_re',5}}] )
	    -| ['compiler_generated'] )
	end
'sub_comp'/5 =
    %% Line 429
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <S0 = [C|Cs],P0,RE,Bef,Rep> when 'true' ->
	      %% Line 430
	      case apply 'comp_apply'/3
		       (S0, P0, RE) of
		%% Line 431
		<{'match',_cor17,_X_S1}>
		    when call 'erlang':'=:='
			  (_cor17,
			   P0) ->
		    let <_cor5> =
			%% Line 432
			call 'erlang':'+'
			    (P0, 1)
		    in  %% Line 432
			apply 'sub_comp'/5
			    (Cs, _cor5, RE, [C|Bef], Rep)
		%% Line 433
		<{'match',P1,Rest}> when 'true' ->
		    let <_cor6> =
			%% Line 434
			call 'erlang':'-'
			    (P1, P0)
		    in  let <_cor7> =
			    %% Line 434
			    call 'string':'substr'
				(S0, 1, _cor6)
			in  let <_cor8> =
				%% Line 434
				apply 'sub_repl'/3
				    (Rep, _cor7, Rest)
			    in  let <_cor9> =
				    %% Line 434
				    call 'lists':'reverse'
					(Bef, _cor8)
				in  %% Line 434
				    {'yes',_cor9}
		%% Line 435
		<'nomatch'> when 'true' ->
		    let <_cor10> =
			call 'erlang':'+'
			    (P0, 1)
		    in  apply 'sub_comp'/5
			    (Cs, _cor10, RE, [C|Bef], Rep)
		( <_cor11> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor11})
		  -| ['compiler_generated'] )
	      end
	  %% Line 437
	  <[],_X_P,_X_RE,_X_Bef,_X_Rep> when 'true' ->
	      'no'
	  ( <_cor16,_cor15,_cor14,_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15,_cor14,_cor13,_cor12})
		  -| [{'function_name',{'sub_comp',5}}] )
	    -| ['compiler_generated'] )
	end
'sub_repl'/3 =
    %% Line 439
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[38|Rep],M,Rest> when 'true' ->
	      let <_cor3> =
		  apply 'sub_repl'/3
		      (Rep, M, Rest)
	      in  call 'erlang':'++'
		      (M, _cor3)
	  %% Line 440
	  <[92|[38|Rep]],M,Rest> when 'true' ->
	      let <_cor4> =
		  apply 'sub_repl'/3
		      (Rep, M, Rest)
	      in  [38|_cor4]
	  %% Line 441
	  <[C|Rep],M,Rest> when 'true' ->
	      let <_cor5> =
		  apply 'sub_repl'/3
		      (Rep, M, Rest)
	      in  [C|_cor5]
	  %% Line 442
	  <[],_X_M,Rest> when 'true' ->
	      Rest
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'sub_repl',3}}] )
	    -| ['compiler_generated'] )
	end
'gsub'/3 =
    %% Line 448
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <String,RegExp,Rep>
	      when call 'erlang':'is_list'
		    (RegExp) ->
	      %% Line 449
	      case apply 'parse'/1
		       (RegExp) of
		%% Line 450
		<{'ok',RE}> when 'true' ->
		    apply 'gsub'/3
			(String, RE, Rep)
		%% Line 451
		<{'error',E}> when 'true' ->
		    {'error',E}
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 453
	  <String,{'regexp',RE},Rep> when 'true' ->
	      %% Line 454
	      case apply 'gsub_re'/5
		       (String, 1, RE, [], Rep) of
		%% Line 455
		<{NewStr,N}> when 'true' ->
		    {'ok',NewStr,N}
		%% Line 456
		<'no'> when 'true' ->
		    {'ok',String,0}
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 458
	  <String,{'comp_regexp',RE},Rep> when 'true' ->
	      %% Line 459
	      case apply 'gsub_comp'/5
		       (String, 1, RE, [], Rep) of
		%% Line 460
		<{NewStr,N}> when 'true' ->
		    {'ok',NewStr,N}
		%% Line 461
		<'no'> when 'true' ->
		    {'ok',String,0}
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor5})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'gsub',3}}] )
	    -| ['compiler_generated'] )
	end
'gsub_re'/5 =
    %% Line 473
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <S0 = [C|Cs],P0,RE,Bef,Rep> when 'true' ->
	      %% Line 474
	      case apply 're_apply'/3
		       (S0, P0, RE) of
		%% Line 475
		<{'match',_cor23,_X_S1,_cor24}>
		    when call 'erlang':'=:='
			  (_cor23,
			   P0) ->
		    let <_cor5> =
			%% Line 476
			call 'erlang':'+'
			    (P0, 1)
		    in  %% Line 476
			apply 'gsub_re'/5
			    (Cs, _cor5, RE, [C|Bef], Rep)
		%% Line 477
		<{'match',P1,S1,_X_Gps}> when 'true' ->
		    %% Line 478
		    case apply 'gsub_re'/5
			     (S1, P1, RE, [], Rep) of
		      %% Line 479
		      <{NewStr,N0}> when 'true' ->
			  let <_cor7> =
			      %% Line 480
			      call 'erlang':'-'
				  (P1, P0)
			  in  let <_cor8> =
				  %% Line 480
				  call 'string':'substr'
				      (S0, 1, _cor7)
			      in  let <_cor9> =
				      %% Line 480
				      apply 'sub_repl'/3
					  (Rep, _cor8, NewStr)
				  in  let <_cor10> =
					  %% Line 480
					  call 'lists':'reverse'
					      (Bef, _cor9)
				      in  let <_cor6> =
					      %% Line 481
					      call 'erlang':'+'
						  (N0, 1)
					  in  %% Line 480
					      {_cor10,_cor6}
		      %% Line 482
		      <'no'> when 'true' ->
			  let <_cor11> =
			      %% Line 483
			      call 'erlang':'-'
				  (P1, P0)
			  in  let <_cor12> =
				  %% Line 483
				  call 'string':'substr'
				      (S0, 1, _cor11)
			      in  let <_cor13> =
				      %% Line 483
				      apply 'sub_repl'/3
					  (Rep, _cor12, S1)
				  in  let <_cor14> =
					  %% Line 483
					  call 'lists':'reverse'
					      (Bef, _cor13)
				      in  %% Line 483
					  {_cor14,1}
		      ( <_cor15> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor15})
			-| ['compiler_generated'] )
		    end
		%% Line 486
		<'nomatch'> when 'true' ->
		    let <_cor16> =
			call 'erlang':'+'
			    (P0, 1)
		    in  apply 'gsub_re'/5
			    (Cs, _cor16, RE, [C|Bef], Rep)
		%% Line 487
		<'never_match'> when 'true' ->
		    'no'
		( <_cor17> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor17})
		  -| ['compiler_generated'] )
	      end
	  %% Line 489
	  <[],_X_P,_X_RE,_X_Bef,_X_Rep> when 'true' ->
	      'no'
	  ( <_cor22,_cor21,_cor20,_cor19,_cor18> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor22,_cor21,_cor20,_cor19,_cor18})
		  -| [{'function_name',{'gsub_re',5}}] )
	    -| ['compiler_generated'] )
	end
'gsub_comp'/5 =
    %% Line 491
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <S0 = [C|Cs],P0,RE,Bef,Rep> when 'true' ->
	      %% Line 492
	      case apply 'comp_apply'/3
		       (S0, P0, RE) of
		%% Line 493
		<{'match',_cor23,_X_S1}>
		    when call 'erlang':'=:='
			  (_cor23,
			   P0) ->
		    let <_cor5> =
			%% Line 494
			call 'erlang':'+'
			    (P0, 1)
		    in  %% Line 494
			apply 'gsub_comp'/5
			    (Cs, _cor5, RE, [C|Bef], Rep)
		%% Line 495
		<{'match',P1,S1}> when 'true' ->
		    %% Line 496
		    case apply 'gsub_comp'/5
			     (S1, P1, RE, [], Rep) of
		      %% Line 497
		      <{NewStr,N0}> when 'true' ->
			  let <_cor7> =
			      %% Line 498
			      call 'erlang':'-'
				  (P1, P0)
			  in  let <_cor8> =
				  %% Line 498
				  call 'string':'substr'
				      (S0, 1, _cor7)
			      in  let <_cor9> =
				      %% Line 498
				      apply 'sub_repl'/3
					  (Rep, _cor8, NewStr)
				  in  let <_cor10> =
					  %% Line 498
					  call 'lists':'reverse'
					      (Bef, _cor9)
				      in  let <_cor6> =
					      %% Line 499
					      call 'erlang':'+'
						  (N0, 1)
					  in  %% Line 498
					      {_cor10,_cor6}
		      %% Line 500
		      <'no'> when 'true' ->
			  let <_cor11> =
			      %% Line 501
			      call 'erlang':'-'
				  (P1, P0)
			  in  let <_cor12> =
				  %% Line 501
				  call 'string':'substr'
				      (S0, 1, _cor11)
			      in  let <_cor13> =
				      %% Line 501
				      apply 'sub_repl'/3
					  (Rep, _cor12, S1)
				  in  let <_cor14> =
					  %% Line 501
					  call 'lists':'reverse'
					      (Bef, _cor13)
				      in  %% Line 501
					  {_cor14,1}
		      ( <_cor15> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor15})
			-| ['compiler_generated'] )
		    end
		%% Line 504
		<'nomatch'> when 'true' ->
		    let <_cor16> =
			call 'erlang':'+'
			    (P0, 1)
		    in  apply 'gsub_comp'/5
			    (Cs, _cor16, RE, [C|Bef], Rep)
		( <_cor17> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor17})
		  -| ['compiler_generated'] )
	      end
	  %% Line 506
	  <[],_X_P,_X_RE,_X_Bef,_X_Rep> when 'true' ->
	      'no'
	  ( <_cor22,_cor21,_cor20,_cor19,_cor18> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor22,_cor21,_cor20,_cor19,_cor18})
		  -| [{'function_name',{'gsub_comp',5}}] )
	    -| ['compiler_generated'] )
	end
'split'/2 =
    %% Line 512
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <String,[32]> when 'true' ->
	      %% Line 513
	      case apply 'parse'/1
		       ([91|[32|[9|[93|[43]]]]]) of
		<{'ok',{'regexp',RE}}> when 'true' ->
		    %% Line 514
		    case apply 'split_apply_re'/3
			     (String, RE, 'true') of
		      %% Line 515
		      <[[]|Ss]> when 'true' ->
			  {'ok',Ss}
		      %% Line 516
		      <Ss> when 'true' ->
			  {'ok',Ss}
		    end
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 518
	  <String,RegExp>
	      when call 'erlang':'is_list'
		    (RegExp) ->
	      %% Line 519
	      case apply 'parse'/1
		       (RegExp) of
		%% Line 520
		<{'ok',{'regexp',RE}}> when 'true' ->
		    let <_cor4> =
			apply 'split_apply_re'/3
			    (String, RE, 'false')
		    in  {'ok',_cor4}
		%% Line 521
		<{'error',E}> when 'true' ->
		    {'error',E}
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 523
	  <String,{'regexp',RE}> when 'true' ->
	      let <_cor6> =
		  apply 'split_apply_re'/3
		      (String, RE, 'false')
	      in  {'ok',_cor6}
	  %% Line 524
	  <String,{'comp_regexp',RE}> when 'true' ->
	      let <_cor7> =
		  apply 'split_apply_comp'/3
		      (String, RE, 'false')
	      in  {'ok',_cor7}
	  ( <_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8})
		  -| [{'function_name',{'split',2}}] )
	    -| ['compiler_generated'] )
	end
'split_apply_re'/3 =
    %% Line 526
    fun (_cor2,_cor1,_cor0) ->
	apply 'split_apply_re'/5
	    (_cor2, 1, _cor1, _cor0, [])
'split_apply_re'/5 =
    %% Line 528
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[],_X_P,_X_RE,'true',[]> when 'true' ->
	      []
	  %% Line 529
	  <[],_X_P,_X_RE,_X_T,Sub> when 'true' ->
	      let <_cor5> =
		  call 'lists':'reverse'
		      (Sub)
	      in  [_cor5|[]]
	  %% Line 530
	  <S = [C|Cs],P0,RE,T,Sub> when 'true' ->
	      %% Line 531
	      case apply 're_apply'/3
		       (S, P0, RE) of
		%% Line 532
		<{'match',_cor17,_X_S1,_cor18}>
		    when call 'erlang':'=:='
			  (_cor17,
			   P0) ->
		    let <_cor6> =
			%% Line 533
			call 'erlang':'+'
			    (P0, 1)
		    in  %% Line 533
			apply 'split_apply_re'/5
			    (Cs, _cor6, RE, T, [C|Sub])
		%% Line 534
		<{'match',P1,S1,_cor19}> when 'true' ->
		    let <_cor7> =
			%% Line 535
			call 'lists':'reverse'
			    (Sub)
		    in  let <_cor8> =
			    %% Line 535
			    apply 'split_apply_re'/5
				(S1, P1, RE, T, [])
			in  %% Line 535
			    [_cor7|_cor8]
		%% Line 536
		<'nomatch'> when 'true' ->
		    let <_cor9> =
			%% Line 537
			call 'erlang':'+'
			    (P0, 1)
		    in  %% Line 537
			apply 'split_apply_re'/5
			    (Cs, _cor9, RE, T, [C|Sub])
		%% Line 538
		<'never_match'> when 'true' ->
		    let <_cor10> =
			call 'lists':'reverse'
			    (Sub, S)
		    in  [_cor10|[]]
		( <_cor11> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor11})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor16,_cor15,_cor14,_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15,_cor14,_cor13,_cor12})
		  -| [{'function_name',{'split_apply_re',5}}] )
	    -| ['compiler_generated'] )
	end
'split_apply_comp'/3 =
    %% Line 541
    fun (_cor2,_cor1,_cor0) ->
	apply 'split_apply_comp'/5
	    (_cor2, 1, _cor1, _cor0, [])
'split_apply_comp'/5 =
    %% Line 544
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[],_X_P,_X_RE,_X_T,Sub> when 'true' ->
	      let <_cor5> =
		  call 'lists':'reverse'
		      (Sub)
	      in  [_cor5|[]]
	  %% Line 545
	  <S = [C|Cs],P0,RE,T,Sub> when 'true' ->
	      %% Line 546
	      case apply 'comp_apply'/3
		       (S, P0, RE) of
		%% Line 547
		<{'match',_cor16,_X_S1}>
		    when call 'erlang':'=:='
			  (_cor16,
			   P0) ->
		    let <_cor6> =
			%% Line 548
			call 'erlang':'+'
			    (P0, 1)
		    in  %% Line 548
			apply 'split_apply_comp'/5
			    (Cs, _cor6, RE, T, [C|Sub])
		%% Line 549
		<{'match',P1,S1}> when 'true' ->
		    let <_cor7> =
			%% Line 550
			call 'lists':'reverse'
			    (Sub)
		    in  let <_cor8> =
			    %% Line 550
			    apply 'split_apply_comp'/5
				(S1, P1, RE, T, [])
			in  %% Line 550
			    [_cor7|_cor8]
		%% Line 551
		<'nomatch'> when 'true' ->
		    let <_cor9> =
			%% Line 552
			call 'erlang':'+'
			    (P0, 1)
		    in  %% Line 552
			apply 'split_apply_comp'/5
			    (Cs, _cor9, RE, T, [C|Sub])
		( <_cor10> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor10})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor15,_cor14,_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14,_cor13,_cor12,_cor11})
		  -| [{'function_name',{'split_apply_comp',5}}] )
	    -| ['compiler_generated'] )
	end
'sub_match'/2 =
    %% Line 559
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <S,RegExp>
	      when call 'erlang':'is_list'
		    (RegExp) ->
	      %% Line 560
	      case apply 'parse'/1
		       (RegExp) of
		%% Line 561
		<{'ok',RE}> when 'true' ->
		    apply 'sub_match'/2
			(S, RE)
		%% Line 562
		<{'error',E}> when 'true' ->
		    {'error',E}
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 564
	  <S,{'regexp',RE}> when 'true' ->
	      %% Line 565
	      case apply 'sub_match_re'/6
		       (RE, S, 1, 0, -1, 'none') of
		%% Line 566
		<{Start,Len,Subs}>
		    when call 'erlang':'>='
			  (Len,
			   0) ->
		    %% Line 567
		    {'match',Start,Len,Subs}
		%% Line 568
		<{_X_Start,_X_Len,_X_Subs}> when 'true' ->
		    'nomatch'
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'sub_match',2}}] )
	    -| ['compiler_generated'] )
	end
'sub_match_re'/6 =
    %% Line 571
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 572
	case apply 'first_match_re'/3
		 (_cor5, _cor4, _cor3) of
	  %% Line 573
	  <{St,Len,Subs}> when 'true' ->
	      let <Pos1> =
		  %% Line 574
		  call 'erlang':'+'
		      (St, 1)
	      in  let <_cor7> =
		      %% Line 575
		      call 'erlang':'-'
			  (Pos1, _cor3)
		  in  let <S1> =
			  %% Line 575
			  call 'lists':'nthtail'
			      (_cor7, _cor4)
		      in  %% Line 576
			  case <> of
			    <>
				when call 'erlang':'>'
				      (Len,
				       _cor1) ->
				apply 'sub_match_re'/6
				    (_cor5, S1, Pos1, St, Len, Subs)
			    %% Line 577
			    <> when 'true' ->
				apply 'sub_match_re'/6
				    (_cor5, S1, Pos1, _cor2, _cor1, _cor0)
			  end
	  %% Line 579
	  <'nomatch'> when 'true' ->
	      {_cor2,_cor1,_cor0}
	  ( <_cor9> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor9})
	    -| ['compiler_generated'] )
	end
'sub_first_match'/2 =
    %% Line 587
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <S,RegExp>
	      when call 'erlang':'is_list'
		    (RegExp) ->
	      %% Line 588
	      case apply 'parse'/1
		       (RegExp) of
		<{'ok',RE}> when 'true' ->
		    %% Line 589
		    apply 'sub_first_match'/2
			(S, RE)
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 590
	  <S,{'regexp',RE}> when 'true' ->
	      %% Line 591
	      case apply 'first_match_re'/3
		       (RE, S, 1) of
		%% Line 592
		<{St,Len,Subs}> when 'true' ->
		    {'match',St,Len,Subs}
		%% Line 593
		<'nomatch'> when 'true' ->
		    'nomatch'
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'sub_first_match',2}}] )
	    -| ['compiler_generated'] )
	end
'reg'/2 =
    %% Line 624
    fun (_cor1,_cor0) ->
	apply 'reg1'/2
	    (_cor1, _cor0)
'reg1'/2 =
    %% Line 630
    fun (_cor1,_cor0) ->
	%% Line 631
	case apply 'reg2'/2
		 (_cor1, _cor0) of
	  <{L,Sc1,S1}> when 'true' ->
	      %% Line 632
	      apply 'reg1p'/3
		  (S1, L, Sc1)
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'reg1p'/3 =
    %% Line 634
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[124|S0],L,Sc0> when 'true' ->
	      %% Line 635
	      case apply 'reg2'/2
		       (S0, Sc0) of
		<{R,Sc1,S1}> when 'true' ->
		    %% Line 636
		    apply 'reg1p'/3
			(S1, {'or',L,R}, Sc1)
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 637
	  <S,L,Sc> when 'true' ->
	      {L,Sc,S}
	end
'reg2'/2 =
    %% Line 643
    fun (_cor1,_cor0) ->
	%% Line 644
	case apply 'reg3'/2
		 (_cor1, _cor0) of
	  <{L,Sc1,S1}> when 'true' ->
	      %% Line 645
	      apply 'reg2p'/3
		  (S1, L, Sc1)
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'reg2p'/3 =
    %% Line 647
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[C|S0],L,Sc0>
	      when let <_cor3> =
		    call 'erlang':'/='
			(C, 124)
		in  let <_cor4> =
			call 'erlang':'/='
			    (C, 41)
		    in  call 'erlang':'and'
			    (_cor3, _cor4) ->
	      %% Line 648
	      case apply 'reg3'/2
		       ([C|S0], Sc0) of
		<{R,Sc1,S1}> when 'true' ->
		    %% Line 650
		    case <> of
		      %% Line 651
		      <>
			  when call 'erlang':'is_integer'
				(R) ->
			  %% Line 652
			  case L of
			    %% Line 653
			    <{'literal',Lit}> when 'true' ->
				let <_cor6> =
				    %% Line 654
				    call 'erlang':'++'
					(Lit, [R|[]])
				in  %% Line 654
				    apply 'reg2p'/3
					(S1, {'literal',_cor6}, Sc1)
			    %% Line 655
			    <{'concat',S2,Char}>
				when call 'erlang':'is_integer'
				      (Char) ->
				%% Line 656
				apply 'reg2p'/3
				    (S1, {'concat',S2,{'literal',[Char|[R|[]]]}}, Sc1)
			    %% Line 657
			    <{'concat',S2,{'literal',Lit}}> when 'true' ->
				let <_cor7> =
				    %% Line 658
				    call 'erlang':'++'
					(Lit, [R|[]])
				in  %% Line 658
				    apply 'reg2p'/3
					(S1, {'concat',S2,{'literal',_cor7}}, Sc1)
			    %% Line 659
			    <Char>
				when call 'erlang':'is_integer'
				      (L) ->
				%% Line 660
				apply 'reg2p'/3
				    (S1, {'literal',[Char|[R|[]]]}, Sc1)
			    %% Line 661
			    <_cor13> when 'true' ->
				%% Line 662
				apply 'reg2p'/3
				    (S1, {'concat',L,R}, Sc1)
			  end
		      %% Line 664
		      <> when 'true' ->
			  %% Line 665
			  apply 'reg2p'/3
			      (S1, {'concat',L,R}, Sc1)
		    end
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 667
	  <S,L,Sc> when 'true' ->
	      {L,Sc,S}
	end
'reg3'/2 =
    %% Line 676
    fun (_cor1,_cor0) ->
	%% Line 677
	case apply 'reg4'/2
		 (_cor1, _cor0) of
	  <{L,Sc1,S1}> when 'true' ->
	      %% Line 678
	      apply 'reg3p'/3
		  (S1, L, Sc1)
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'reg3p'/3 =
    %% Line 680
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[42|S],L,Sc> when 'true' ->
	      apply 'reg3p'/3
		  (S, {'kclosure',L}, Sc)
	  %% Line 681
	  <[43|S],L,Sc> when 'true' ->
	      apply 'reg3p'/3
		  (S, {'pclosure',L}, Sc)
	  %% Line 682
	  <[63|S],L,Sc> when 'true' ->
	      apply 'reg3p'/3
		  (S, {'optional',L}, Sc)
	  %% Line 683
	  <[123|Cs0],L,Sc> when 'true' ->
	      %% Line 684
	      case apply 'interval_range'/1
		       (Cs0) of
		%% Line 685
		<{'none','none',_X_Cs1}> when 'true' ->
		    apply 'parse_error'/1
			({'interval_range',[123|Cs0]})
		%% Line 686
		<{N,M,[125|Cs1]}> when 'true' ->
		    apply 'reg3p'/3
			(Cs1, {'iclosure',L,N,M}, Sc)
		%% Line 687
		<{_X_N,_X_M,_X_Cs1}> when 'true' ->
		    apply 'parse_error'/1
			({'unterminated',[123]})
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 689
	  <S,L,Sc> when 'true' ->
	      {L,Sc,S}
	end
'reg4'/2 =
    %% Line 691
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[40|S0],Sc0> when 'true' ->
	      let <Sc1> =
		  %% Line 692
		  call 'erlang':'+'
		      (Sc0, 1)
	      in  %% Line 693
		  case apply 'reg'/2
			   (S0, Sc1) of
		    %% Line 694
		    <{R,Sc2,[41|S1]}> when 'true' ->
			{{'subexpr',Sc1,R},Sc2,S1}
		    %% Line 695
		    <{_X_R,_X_Sc,_X_S}> when 'true' ->
			apply 'parse_error'/1
			    ({'unterminated',[40]})
		    ( <_cor3> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor3})
		      -| ['compiler_generated'] )
		  end
	  %% Line 697
	  <[94|S],Sc> when 'true' ->
	      {'bos',Sc,S}
	  %% Line 698
	  <[36|S],Sc> when 'true' ->
	      {'eos',Sc,S}
	  %% Line 699
	  <[46|S],Sc> when 'true' ->
	      {{'comp_class',[10]},Sc,S}
	  %% Line 700
	  <[91|[94|S0]],Sc> when 'true' ->
	      %% Line 701
	      case apply 'char_class'/1
		       (S0) of
		%% Line 702
		<{Cc,[93|S1]}> when 'true' ->
		    {{'comp_class',Cc},Sc,S1}
		%% Line 703
		<{_X_Cc,_X_S}> when 'true' ->
		    apply 'parse_error'/1
			({'unterminated',[91]})
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 705
	  <[91|S0],Sc> when 'true' ->
	      %% Line 706
	      case apply 'char_class'/1
		       (S0) of
		%% Line 707
		<{Cc,[93|S1]}> when 'true' ->
		    {{'char_class',Cc},Sc,S1}
		%% Line 708
		<{_X_Cc,_X_S1}> when 'true' ->
		    apply 'parse_error'/1
			({'unterminated',[91]})
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 715
	  <[C0|S0],Sc>
	      when %% Line 716
		try
		    let <_cor6> =
			call 'erlang':'is_integer'
			    (C0)
		    in  let <_cor7> =
			    call 'erlang':'/='
				(C0, 42)
			in  let <_cor8> =
				call 'erlang':'/='
				    (C0, 43)
			    in  let <_cor9> =
				    call 'erlang':'/='
					(C0, 63)
				in  let <_cor10> =
					call 'erlang':'/='
					    (C0, 93)
				    in  let <_cor11> =
					    call 'erlang':'/='
						(C0, 41)
					in  let <_cor12> =
						call 'erlang':'/='
						    (C0, 125)
					    in  let <_cor13> =
						    call 'erlang':'and'
							(_cor11, _cor12)
						in  let <_cor14> =
							call 'erlang':'and'
							    (_cor10, _cor13)
						    in  let <_cor15> =
							    call 'erlang':'and'
								(_cor9, _cor14)
							in  let <_cor16> =
								call 'erlang':'and'
								    (_cor8, _cor15)
							    in  let <_cor17> =
								    call 'erlang':'and'
									(_cor7, _cor16)
								in  call 'erlang':'and'
									(_cor6, _cor17)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 718
	      case apply 'char'/2
		       (C0, S0) of
		<{C1,S1}> when 'true' ->
		    %% Line 719
		    {C1,Sc,S1}
		( <_cor18> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor18})
		  -| ['compiler_generated'] )
	      end
	  %% Line 720
	  <S = [41|_cor21],Sc> when 'true' ->
	      {'epsilon',Sc,S}
	  %% Line 721
	  <[C|_X_S],_X_Sc> when 'true' ->
	      apply 'parse_error'/1
		  ({'illegal',[C|[]]})
	  %% Line 722
	  <[],Sc> when 'true' ->
	      {'epsilon',Sc,[]}
	  ( <_cor20,_cor19> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor20,_cor19})
		  -| [{'function_name',{'reg4',2}}] )
	    -| ['compiler_generated'] )
	end
'char'/2 =
    %% Line 724
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <92,[O1|[O2|[O3|S]]]>
	      when %% Line 725
		try
		    let <_cor2> =
			call 'erlang':'>='
			    (O1, 48)
		    in  let <_cor3> =
			    call 'erlang':'=<'
				(O1, 55)
			in  let <_cor4> =
				call 'erlang':'>='
				    (O2, 48)
			    in  let <_cor5> =
				    call 'erlang':'=<'
					(O2, 55)
				in  let <_cor6> =
					call 'erlang':'>='
					    (O3, 48)
				    in  let <_cor7> =
					    call 'erlang':'=<'
						(O3, 55)
					in  let <_cor8> =
						call 'erlang':'and'
						    (_cor6, _cor7)
					    in  let <_cor9> =
						    call 'erlang':'and'
							(_cor5, _cor8)
						in  let <_cor10> =
							call 'erlang':'and'
							    (_cor4, _cor9)
						    in  let <_cor11> =
							    call 'erlang':'and'
								(_cor3, _cor10)
							in  call 'erlang':'and'
								(_cor2, _cor11)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor13> =
		  %% Line 726
		  call 'erlang':'*'
		      (O1, 8)
	      in  let <_cor14> =
		      %% Line 726
		      call 'erlang':'+'
			  (_cor13, O2)
		  in  let <_cor15> =
			  %% Line 726
			  call 'erlang':'*'
			      (_cor14, 8)
		      in  let <_cor16> =
			      %% Line 726
			      call 'erlang':'+'
				  (_cor15, O3)
			  in  let <_cor17> =
				  %% Line 726
				  call 'erlang':'-'
				      (_cor16, 3504)
			      in  %% Line 726
				  {_cor17,S}
	  %% Line 727
	  <92,[C|S]> when 'true' ->
	      let <_cor18> =
		  apply 'escape_char'/1
		      (C)
	      in  {_cor18,S}
	  %% Line 728
	  <92,[]> when 'true' ->
	      apply 'parse_error'/1
		  ({'unterminated',[92]})
	  %% Line 729
	  <C,S> when 'true' ->
	      {C,S}
	end
'escape_char'/1 =
    %% Line 731
    fun (_cor0) ->
	case _cor0 of
	  <110> when 'true' ->
	      10
	  %% Line 732
	  <114> when 'true' ->
	      13
	  %% Line 733
	  <116> when 'true' ->
	      9
	  %% Line 734
	  <118> when 'true' ->
	      11
	  %% Line 735
	  <98> when 'true' ->
	      8
	  %% Line 736
	  <102> when 'true' ->
	      12
	  %% Line 737
	  <101> when 'true' ->
	      27
	  %% Line 738
	  <115> when 'true' ->
	      32
	  %% Line 739
	  <100> when 'true' ->
	      127
	  %% Line 740
	  <C> when 'true' ->
	      C
	end
'char_class'/1 =
    %% Line 742
    fun (_cor0) ->
	case _cor0 of
	  <[93|S0]> when 'true' ->
	      %% Line 743
	      case apply 'char_class'/2
		       (S0, [93]) of
		<{Cc,S1}> when 'true' ->
		    let <_cor2> =
			%% Line 744
			apply 'pack_cc'/1
			    (Cc)
		    in  %% Line 744
			{_cor2,S1}
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 745
	  <S0> when 'true' ->
	      %% Line 746
	      case apply 'char_class'/2
		       (S0, []) of
		<{Cc,S1}> when 'true' ->
		    let <_cor4> =
			%% Line 747
			apply 'pack_cc'/1
			    (Cc)
		    in  %% Line 747
			{_cor4,S1}
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	end
'pack_cc'/1 =
    %% Line 749
    fun (_cor0) ->
	let <_cor5> =
	    %% Line 751
	    ( fun (_cor2,_cor1) ->
		  case <_cor2,_cor1> of
		    <{Cf1,_cor8},{Cf2,_cor9}> when 'true' ->
			call 'erlang':'<'
			    (Cf1, Cf2)
		    %% Line 752
		    <{Cf1,_cor10},C> when 'true' ->
			call 'erlang':'<'
			    (Cf1, C)
		    %% Line 753
		    <C,{Cf,_cor11}> when 'true' ->
			call 'erlang':'<'
			    (C, Cf)
		    %% Line 754
		    <C1,C2> when 'true' ->
			call 'erlang':'=<'
			    (C1, C2)
		  end
	      -| [{'id',{0,0,'-pack_cc/1-fun-0-'}}] )
	in  let <Cc1> =
		%% Line 751
		call 'lists':'usort'
		    (_cor5, _cor0)
	    in  %% Line 756
		apply 'pack_cc1'/1
		    (Cc1)
'pack_cc1'/1 =
    %% Line 758
    fun (_cor0) ->
	case _cor0 of
	  <[{Cf1,Cl1}|[{Cf2,Cl2}|Cc]]>
	      when let <_cor1> =
		    call 'erlang':'>='
			(Cl1, Cf2)
		in  let <_cor2> =
			call 'erlang':'=<'
			    (Cl1, Cl2)
		    in  call 'erlang':'and'
			    (_cor1, _cor2) ->
	      %% Line 759
	      apply 'pack_cc1'/1
		  ([{Cf1,Cl2}|Cc])
	  %% Line 760
	  <[{Cf1,Cl1}|[{Cf2,Cl2}|Cc]]>
	      when let <_cor3> =
		    call 'erlang':'>='
			(Cl1, Cf2)
		in  let <_cor4> =
			call 'erlang':'>='
			    (Cl1, Cl2)
		    in  call 'erlang':'and'
			    (_cor3, _cor4) ->
	      %% Line 761
	      apply 'pack_cc1'/1
		  ([{Cf1,Cl1}|Cc])
	  %% Line 762
	  <[{Cf1,Cl1}|[{Cf2,Cl2}|Cc]]>
	      when try
		    let <_cor5> =
			call 'erlang':'+'
			    (Cl1, 1)
		    in  call 'erlang':'=='
			    (_cor5, Cf2)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 763
	      apply 'pack_cc1'/1
		  ([{Cf1,Cl2}|Cc])
	  %% Line 764
	  <[{Cf,Cl}|[C|Cc]]>
	      when call 'erlang':'>='
		    (Cl,
		     C) ->
	      apply 'pack_cc1'/1
		  ([{Cf,Cl}|Cc])
	  %% Line 765
	  <[{Cf,Cl}|[C|Cc]]>
	      when try
		    let <_cor6> =
			call 'erlang':'+'
			    (Cl, 1)
		    in  call 'erlang':'=='
			    (_cor6, C)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      apply 'pack_cc1'/1
		  ([{Cf,C}|Cc])
	  %% Line 766
	  <[C|[{Cf,Cl}|Cc]]>
	      when try
		    let <_cor7> =
			call 'erlang':'-'
			    (Cf, 1)
		    in  call 'erlang':'=='
			    (C, _cor7)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      apply 'pack_cc1'/1
		  ([{C,Cl}|Cc])
	  %% Line 767
	  <[C1|[C2|Cc]]>
	      when try
		    let <_cor8> =
			call 'erlang':'+'
			    (C1, 1)
		    in  call 'erlang':'=='
			    (_cor8, C2)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      apply 'pack_cc1'/1
		  ([{C1,C2}|Cc])
	  %% Line 768
	  <[C|Cc]> when 'true' ->
	      let <_cor9> =
		  apply 'pack_cc1'/1
		      (Cc)
	      in  [C|_cor9]
	  %% Line 769
	  <[]> when 'true' ->
	      []
	  ( <_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10})
		  -| [{'function_name',{'pack_cc1',1}}] )
	    -| ['compiler_generated'] )
	end
'char_class'/2 =
    %% Line 771
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[91|[58|S0]],Cc0> when 'true' ->
	      %% Line 772
	      case apply 'posix_cc'/2
		       (S0, Cc0) of
		%% Line 773
		<{Cc1,[58|[93|S1]]}> when 'true' ->
		    apply 'char_class'/2
			(S1, Cc1)
		%% Line 774
		<{_cor8,_X_S1}> when 'true' ->
		    let <_cor2> =
			[91|[58|S0]]
		    in  apply 'parse_error'/1
			    ({'posix_cc',_cor2})
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 776
	  <[C1|S0],Cc>
	      when call 'erlang':'/='
		    (C1,
		     93) ->
	      %% Line 777
	      case apply 'char'/2
		       (C1, S0) of
		%% Line 778
		<{Cf,[45|[C2|S1]]}>
		    when call 'erlang':'/='
			  (C2,
			   93) ->
		    %% Line 779
		    case apply 'char'/2
			     (C2, S1) of
		      %% Line 780
		      <{Cl,S2}>
			  when call 'erlang':'<'
				(Cf,
				 Cl) ->
			  apply 'char_class'/2
			      (S2, [{Cf,Cl}|Cc])
		      %% Line 781
		      <{_X_Cl,_X_S2}> when 'true' ->
			  apply 'parse_error'/1
			      ({'char_class',[C1|S0]})
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor4})
			-| ['compiler_generated'] )
		    end
		%% Line 783
		<{C,S1}> when 'true' ->
		    apply 'char_class'/2
			(S1, [C|Cc])
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 785
	  <S,Cc> when 'true' ->
	      {Cc,S}
	end
'posix_cc'/2 =
    %% Line 790
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[97|[108|[110|[117|[109|S]]]]],Cc> when 'true' ->
	      %% Line 791
	      {[{48,57}|[{65,90}|[{192,214}|[{216,223}|[{97,122}|[{224,246}|[{248,255}|Cc]]]]]]],S}
	  %% Line 792
	  <[97|[108|[112|[104|[97|S]]]]],Cc> when 'true' ->
	      %% Line 793
	      {[{65,90}|[{192,214}|[{216,223}|[{97,122}|[{224,246}|[{248,255}|Cc]]]]]],S}
	  %% Line 794
	  <[98|[108|[97|[110|[107|S]]]]],Cc> when 'true' ->
	      {[32|[9|[160|Cc]]],S}
	  %% Line 795
	  <[99|[110|[116|[114|[108|S]]]]],Cc> when 'true' ->
	      {[{0,31}|[{127,159}|Cc]],S}
	  %% Line 796
	  <[100|[105|[103|[105|[116|S]]]]],Cc> when 'true' ->
	      {[{48,57}|Cc],S}
	  %% Line 797
	  <[103|[114|[97|[112|[104|S]]]]],Cc> when 'true' ->
	      {[{33,126}|[{161,255}|Cc]],S}
	  %% Line 798
	  <[108|[111|[119|[101|[114|S]]]]],Cc> when 'true' ->
	      {[{97,122}|[{224,246}|[{248,255}|Cc]]],S}
	  %% Line 799
	  <[112|[114|[105|[110|[116|S]]]]],Cc> when 'true' ->
	      {[{32,126}|[{160,255}|Cc]],S}
	  %% Line 800
	  <[112|[117|[110|[99|[116|S]]]]],Cc> when 'true' ->
	      {[{33,47}|[{58,63}|[{123,126}|[{161,191}|Cc]]]],S}
	  %% Line 801
	  <[115|[112|[97|[99|[101|S]]]]],Cc> when 'true' ->
	      {[32|[9|[12|[13|[11|[160|Cc]]]]]],S}
	  %% Line 802
	  <[117|[112|[112|[101|[114|S]]]]],Cc> when 'true' ->
	      {[{65,90}|[{192,214}|[{216,223}|Cc]]],S}
	  %% Line 803
	  <[120|[100|[105|[103|[105|[116|S]]]]]],Cc> when 'true' ->
	      {[{97,102}|[{65,70}|[{48,57}|Cc]]],S}
	  %% Line 804
	  <S,_X_Cc> when 'true' ->
	      let <_cor2> =
		  [91|[58|S]]
	      in  apply 'parse_error'/1
		      ({'posix_cc',_cor2})
	end
'interval_range'/1 =
    %% Line 806
    fun (_cor0) ->
	%% Line 807
	case apply 'number'/1
		 (_cor0) of
	  %% Line 808
	  <{'none',Cs1}> when 'true' ->
	      {'none','none',Cs1}
	  %% Line 809
	  <{N,[44|Cs1]}> when 'true' ->
	      %% Line 810
	      case apply 'number'/1
		       (Cs1) of
		%% Line 811
		<{'none',Cs2}> when 'true' ->
		    {N,'any',Cs2}
		%% Line 812
		<{M,Cs2}> when 'true' ->
		    {N,M,Cs2}
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 814
	  <{N,Cs1}> when 'true' ->
	      {N,'none',Cs1}
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor2})
	    -| ['compiler_generated'] )
	end
'number'/1 =
    %% Line 817
    fun (_cor0) ->
	case _cor0 of
	  <[C|Cs]>
	      when let <_cor1> =
		    call 'erlang':'>='
			(C, 48)
		in  let <_cor2> =
			call 'erlang':'=<'
			    (C, 57)
		    in  call 'erlang':'and'
			    (_cor1, _cor2) ->
	      let <_cor3> =
		  %% Line 818
		  call 'erlang':'-'
		      (C, 48)
	      in  %% Line 818
		  apply 'number'/2
		      (Cs, _cor3)
	  %% Line 819
	  <Cs> when 'true' ->
	      {'none',Cs}
	end
'number'/2 =
    %% Line 821
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[C|Cs],Acc>
	      when let <_cor2> =
		    call 'erlang':'>='
			(C, 48)
		in  let <_cor3> =
			call 'erlang':'=<'
			    (C, 57)
		    in  call 'erlang':'and'
			    (_cor2, _cor3) ->
	      let <_cor5> =
		  %% Line 822
		  call 'erlang':'*'
		      (10, Acc)
	      in  let <_cor4> =
		      %% Line 822
		      call 'erlang':'-'
			  (C, 48)
		  in  let <_cor6> =
			  %% Line 822
			  call 'erlang':'+'
			      (_cor5, _cor4)
		      in  %% Line 822
			  apply 'number'/2
			      (Cs, _cor6)
	  %% Line 823
	  <Cs,Acc> when 'true' ->
	      {Acc,Cs}
	end
'parse_error'/1 =
    %% Line 825
    fun (_cor0) ->
	call 'erlang':'throw'
	    ({'error',_cor0})
're_apply'/3 =
    %% Line 844
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <S,St,{RE,Sc}> when 'true' ->
	      let <Subs> =
		  %% Line 845
		  call 'erlang':'make_tuple'
		      (Sc, 'none')
	      in  %% Line 846
		  apply 're_apply'/5
		      (RE, [], S, St, Subs)
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'re_apply',3}}] )
	    -| ['compiler_generated'] )
	end
're_apply'/5 =
    %% Line 850
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <'epsilon',More,S,P,Subs> when 'true' ->
	      %% Line 851
	      apply 're_apply_more'/4
		  (More, S, P, Subs)
	  %% Line 852
	  <{'or',RE1,RE2},More,S,P,Subs> when 'true' ->
	      let <_cor6> =
		  %% Line 853
		  apply 're_apply'/5
		      (RE1, More, S, P, Subs)
	      in  let <_cor5> =
		      %% Line 854
		      apply 're_apply'/5
			  (RE2, More, S, P, Subs)
		  in  %% Line 853
		      apply 're_apply_or'/2
			  (_cor6, _cor5)
	  %% Line 855
	  <{'concat',RE1,RE2},More,S0,P,Subs> when 'true' ->
	      %% Line 856
	      apply 're_apply'/5
		  (RE1, [RE2|More], S0, P, Subs)
	  %% Line 857
	  <{'literal',[C|Lcs]},More,[_cor28|S],P,Subs>
	      when call 'erlang':'=:='
		    (_cor28,
		     C) ->
	      let <_cor7> =
		  %% Line 858
		  call 'erlang':'+'
		      (P, 1)
	      in  %% Line 858
		  apply 're_apply_lit'/5
		      (Lcs, More, S, _cor7, Subs)
	  %% Line 859
	  <{'kclosure',RE},More,S0,P0,Subs0> when 'true' ->
	      let <_cor9> =
		  %% Line 861
		  case apply 're_apply'/5
			   (RE, [], S0, P0, Subs0) of
		    %% Line 862
		    <{'match',_cor29,_X_S1,_X_Subs1}>
			when call 'erlang':'=:='
			      (_cor29,
			       P0) ->
			%% Line 863
			'nomatch'
		    %% Line 864
		    <{'match',P1,S1,Subs1}> when 'true' ->
			%% Line 865
			apply 're_apply_more'/4
			    ([{'kclosure',RE}|More], S1, P1, Subs1)
		    %% Line 866
		    <'nomatch'> when 'true' ->
			'nomatch'
		    %% Line 867
		    <'never_match'> when 'true' ->
			'never_match'
		    ( <_cor8> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor8})
		      -| ['compiler_generated'] )
		  end
	      in  let <_cor11> =
		      %% Line 869
		      apply 're_apply_more'/4
			  (More, S0, P0, Subs0)
		  in  %% Line 869
		      apply 're_apply_or'/2
			  (_cor9, _cor11)
	  %% Line 870
	  <{'pclosure',RE},More,S,P,Subs> when 'true' ->
	      %% Line 871
	      apply 're_apply'/5
		  (RE, [{'kclosure',RE}|More], S, P, Subs)
	  %% Line 872
	  <{'optional',RE},More,S,P,Subs> when 'true' ->
	      let <_cor13> =
		  %% Line 874
		  apply 're_apply'/5
		      (RE, More, S, P, Subs)
	      in  let <_cor12> =
		      %% Line 875
		      apply 're_apply_more'/4
			  (More, S, P, Subs)
		  in  %% Line 874
		      apply 're_apply_or'/2
			  (_cor13, _cor12)
	  %% Line 876
	  <{'iclosure',RE,N,M},More,S,P,Subs>
	      when call 'erlang':'>'
		    (N,
		     0) ->
	      let <_cor14> =
		  %% Line 877
		  call 'erlang':'-'
		      (N, 1)
	      in  %% Line 877
		  apply 're_apply'/5
		      (RE, [{'iclosure',RE,_cor14,M}|More], S, P, Subs)
	  %% Line 878
	  <{'iclosure',RE,0,M},More,S,P,Subs> when 'true' ->
	      let <Exp> =
		  %% Line 879
		  apply 'expand_opt'/2
		      (RE, M)
	      in  %% Line 880
		  apply 're_apply'/5
		      (Exp, More, S, P, Subs)
	  %% Line 881
	  <{'subexpr',N,RE},More,S,P,Subs> when 'true' ->
	      %% Line 882
	      apply 're_apply'/5
		  (RE, [{'endsub',N,P}|More], S, P, Subs)
	  %% Line 883
	  <{'endsub',N,St},More,S,P,Subs0> when 'true' ->
	      let <_cor16> =
		  %% Line 884
		  call 'erlang':'-'
		      (P, St)
	      in  let <Subs1> =
		      %% Line 884
		      call 'erlang':'setelement'
			  (N, Subs0, {St,_cor16})
		  in  %% Line 885
		      apply 're_apply_more'/4
			  (More, S, P, Subs1)
	  %% Line 886
	  <'bos',More,S,1,Subs> when 'true' ->
	      apply 're_apply_more'/4
		  (More, S, 1, Subs)
	  %% Line 887
	  <'bos',_X_More,_X_S,_cor30,_cor31> when 'true' ->
	      'never_match'
	  %% Line 888
	  <'eos',More,[10],P,Subs> when 'true' ->
	      apply 're_apply_more'/4
		  (More, [], P, Subs)
	  %% Line 889
	  <'eos',More,[],P,Subs> when 'true' ->
	      apply 're_apply_more'/4
		  (More, [], P, Subs)
	  %% Line 890
	  <{'char_class',Cc},More,[C|S],P,Subs> when 'true' ->
	      %% Line 891
	      case apply 'in_char_class'/2
		       (C, Cc) of
		%% Line 892
		<'true'> when 'true' ->
		    let <_cor18> =
			call 'erlang':'+'
			    (P, 1)
		    in  apply 're_apply_more'/4
			    (More, S, _cor18, Subs)
		%% Line 893
		<'false'> when 'true' ->
		    'nomatch'
		( <_cor19> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor19})
		  -| ['compiler_generated'] )
	      end
	  %% Line 895
	  <{'comp_class',Cc},More,[C|S],P,Subs> when 'true' ->
	      %% Line 896
	      case apply 'in_char_class'/2
		       (C, Cc) of
		%% Line 897
		<'true'> when 'true' ->
		    'nomatch'
		%% Line 898
		<'false'> when 'true' ->
		    let <_cor20> =
			call 'erlang':'+'
			    (P, 1)
		    in  apply 're_apply_more'/4
			    (More, S, _cor20, Subs)
		( <_cor21> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor21})
		  -| ['compiler_generated'] )
	      end
	  %% Line 900
	  <C,More,[_cor32|S],P,Subs>
	      when let <_cor33> =
		    call 'erlang':'=:='
			(_cor32, C)
		in  let <_cor34> =
			call 'erlang':'is_integer'
			    (C)
		    in  call 'erlang':'and'
			    (_cor33, _cor34) ->
	      let <_cor22> =
		  %% Line 901
		  call 'erlang':'+'
		      (P, 1)
	      in  %% Line 901
		  apply 're_apply_more'/4
		      (More, S, _cor22, Subs)
	  %% Line 902
	  <_X_RE,_X_More,_X_S,_X_P,_X_Subs> when 'true' ->
	      %% Line 904
	      'nomatch'
	end
're_apply_more'/4 =
    %% Line 909
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[RE|More],S,P,Subs> when 'true' ->
	      apply 're_apply'/5
		  (RE, More, S, P, Subs)
	  %% Line 910
	  <[],S,P,Subs> when 'true' ->
	      {'match',P,S,Subs}
	  ( <_cor7,_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5,_cor4})
		  -| [{'function_name',{'re_apply_more',4}}] )
	    -| ['compiler_generated'] )
	end
're_apply_lit'/5 =
    %% Line 914
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[C|Lit],More,[_cor11|Cs],P,Subs>
	      when call 'erlang':'=:='
		    (_cor11,
		     C) ->
	      let <_cor5> =
		  %% Line 915
		  call 'erlang':'+'
		      (P, 1)
	      in  %% Line 915
		  apply 're_apply_lit'/5
		      (Lit, More, Cs, _cor5, Subs)
	  %% Line 916
	  <[],More,Cs,P,Subs> when 'true' ->
	      %% Line 917
	      apply 're_apply_more'/4
		  (More, Cs, P, Subs)
	  %% Line 918
	  <_X_Lit,_X_More,_X_Cs,_X_P,_X_Subs> when 'true' ->
	      %% Line 919
	      'nomatch'
	end
'expand_iclosure'/3 =
    %% Line 923
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <RE,0,M> when 'true' ->
	      apply 'expand_opt'/2
		  (RE, M)
	  %% Line 924
	  <RE,N,M> when 'true' ->
	      let <_cor3> =
		  %% Line 925
		  call 'erlang':'-'
		      (N, 1)
	      in  let <_cor4> =
		      %% Line 925
		      apply 'expand_iclosure'/3
			  (RE, _cor3, M)
		  in  %% Line 925
		      {'concat',RE,_cor4}
	end
'expand_opt'/2 =
    %% Line 930
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <_X_RE,'none'> when 'true' ->
	      'epsilon'
	  %% Line 931
	  <RE,'any'> when 'true' ->
	      {'kclosure',RE}
	  %% Line 932
	  <_X_RE,0> when 'true' ->
	      'epsilon'
	  %% Line 933
	  <RE,1> when 'true' ->
	      {'optional',RE}
	  %% Line 934
	  <RE,N> when 'true' ->
	      let <_cor2> =
		  %% Line 935
		  call 'erlang':'-'
		      (N, 1)
	      in  let <_cor3> =
		      %% Line 935
		      apply 'expand_opt'/2
			  (RE, _cor2)
		  in  %% Line 935
		      {'optional',{'concat',RE,_cor3}}
	end
'in_char_class'/2 =
    %% Line 948
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <C,[{C1,C2}|_X_Cc]>
	      when let <_cor2> =
		    call 'erlang':'>='
			(C, C1)
		in  let <_cor3> =
			call 'erlang':'=<'
			    (C, C2)
		    in  call 'erlang':'and'
			    (_cor2, _cor3) ->
	      'true'
	  %% Line 949
	  <C,[_cor6|_X_Cc]>
	      when call 'erlang':'=:='
		    (_cor6,
		     C) ->
	      'true'
	  %% Line 950
	  <C,[_cor7|Cc]> when 'true' ->
	      apply 'in_char_class'/2
		  (C, Cc)
	  %% Line 951
	  <_X_C,[]> when 'true' ->
	      'false'
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'in_char_class',2}}] )
	    -| ['compiler_generated'] )
	end
're_apply_or'/2 =
    %% Line 958
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <M1 = {'match',P1,_cor4,_cor5},{'match',P2,_cor6,_cor7}>
	      when call 'erlang':'>='
		    (P1,
		     P2) ->
	      M1
	  %% Line 959
	  <{'match',_cor8,_cor9,_cor10},M2 = {'match',_cor11,_cor12,_cor13}> when 'true' ->
	      M2
	  %% Line 960
	  <'never_match',R2> when 'true' ->
	      R2
	  %% Line 961
	  <R1,'never_match'> when 'true' ->
	      R1
	  %% Line 962
	  <'nomatch',R2> when 'true' ->
	      R2
	  %% Line 963
	  <R1,'nomatch'> when 'true' ->
	      R1
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'re_apply_or',2}}] )
	    -| ['compiler_generated'] )
	end
'make_nfa'/1 =
    %% Line 993
    fun (_cor0) ->
	%% Line 994
	case apply 'parse_reas'/1
		 (_cor0) of
	  %% Line 995
	  <{'ok',REAs1}> when 'true' ->
	      %% Line 996
	      case apply 'build_combined_nfa'/1
		       (REAs1) of
		<{NFA,Start}> when 'true' ->
		    %% Line 997
		    {'ok',{NFA,Start}}
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 998
	  <{'error',E}> when 'true' ->
	      {'error',E}
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor2})
	    -| ['compiler_generated'] )
	end
'make_dfa'/1 =
    %% Line 1007
    fun (_cor0) ->
	apply 'make_dfa'/2
	    (_cor0, 0)
'make_dfa'/2 =
    %% Line 1009
    fun (_cor1,_cor0) ->
	%% Line 1010
	case apply 'parse_reas'/1
		 (_cor1) of
	  %% Line 1011
	  <{'ok',REAs1}> when 'true' ->
	      %% Line 1012
	      case apply 'build_combined_nfa'/1
		       (REAs1) of
		<{NFA,Start0}> when 'true' ->
		    %% Line 1013
		    case apply 'build_dfa'/2
			     (NFA, Start0) of
		      <{DFA0,Start1}> when 'true' ->
			  %% Line 1014
			  case apply 'minimise_dfa'/3
				   (DFA0, Start1, _cor0) of
			    <{DFA,Start}> when 'true' ->
				%% Line 1015
				{'ok',{DFA,Start}}
			    ( <_cor4> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor4})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor3> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor3})
			-| ['compiler_generated'] )
		    end
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1016
	  <{'error',E}> when 'true' ->
	      {'error',E}
	  ( <_cor5> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor5})
	    -| ['compiler_generated'] )
	end
'parse_reas'/1 =
    %% Line 1019
    fun (_cor0) ->
	apply 'parse_reas'/2
	    (_cor0, [])
'parse_reas'/2 =
    %% Line 1021
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{{'regexp',{R,_X_Sc}},A}|REAs],S> when 'true' ->
	      %% Line 1022
	      apply 'parse_reas'/2
		  (REAs, [{R,A}|S])
	  %% Line 1023
	  <[{RegExp,A}|REAs],S> when 'true' ->
	      %% Line 1024
	      case apply 'parse'/1
		       (RegExp) of
		%% Line 1025
		<{'ok',{'regexp',{R,_X_Sc}}}> when 'true' ->
		    apply 'parse_reas'/2
			(REAs, [{R,A}|S])
		%% Line 1026
		<{'error',E}> when 'true' ->
		    {'error',E}
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1028
	  <[],Stack> when 'true' ->
	      let <_cor3> =
		  call 'lists':'reverse'
		      (Stack)
	      in  {'ok',_cor3}
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'parse_reas',2}}] )
	    -| ['compiler_generated'] )
	end
'build_combined_nfa'/1 =
    %% Line 1037
    fun (_cor0) ->
	%% Line 1038
	case apply 'build_nfa_list'/4
		 (_cor0, [], [], 1) of
	  <{NFA,Starts,Next}> when 'true' ->
	      let <_cor2> =
		  %% Line 1039
		  apply 'epsilon_trans'/1
		      (Starts)
	      in  let <F> =
		      %% Line 1039
		      {'nfa_state',Next,_cor2,'no'}
		  in  %% Line 1040
		      {[F|NFA],Next}
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'build_nfa_list'/4 =
    %% Line 1042
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[{RE,Action}|REAs],NFA0,Starts,Next0> when 'true' ->
	      %% Line 1043
	      case apply 'build_nfa'/3
		       (RE, Next0, Action) of
		<{NFA1,Next1,Start}> when 'true' ->
		    let <_cor5> =
			%% Line 1044
			call 'erlang':'++'
			    (NFA1, NFA0)
		    in  %% Line 1044
			apply 'build_nfa_list'/4
			    (REAs, _cor5, [Start|Starts], Next1)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1045
	  <[],NFA,Starts,Next> when 'true' ->
	      let <_cor6> =
		  %% Line 1046
		  call 'lists':'reverse'
		      (Starts)
	      in  %% Line 1046
		  {NFA,_cor6,Next}
	  ( <_cor10,_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8,_cor7})
		  -| [{'function_name',{'build_nfa_list',4}}] )
	    -| ['compiler_generated'] )
	end
'epsilon_trans'/1 =
    %% Line 1048
    fun (_cor0) ->
	( letrec
	      'lc$^0'/1 =
		  fun (_cor3) ->
		      case _cor3 of
			<[S|_cor2]> when 'true' ->
			    let <_cor4> =
				apply 'lc$^0'/1
				    (_cor2)
			    in  ( [{'epsilon',S}|_cor4]
				  -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_cor3> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor3})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  apply 'lc$^0'/1
		  (_cor0)
	  -| ['list_comprehension'] )
'build_nfa'/3 =
    %% Line 1057
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 1058
	    call 'erlang':'+'
		(_cor1, 1)
	in  %% Line 1058
	    case apply 'build_nfa'/4
		     (_cor2, _cor3, _cor1, []) of
	      <{NFA,N,E}> when 'true' ->
		  %% Line 1059
		  {[{'nfa_state',E,[],{'yes',_cor0}}|NFA],N,_cor1}
	      ( <_cor4> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor4})
		-| ['compiler_generated'] )
	    end
'build_nfa'/4 =
    %% Line 1065
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{'or',RE1,RE2},N0,S,NFA0> when 'true' ->
	      let <_cor4> =
		  %% Line 1066
		  call 'erlang':'+'
		      (N0, 1)
	      in  %% Line 1066
		  case apply 'build_nfa'/4
			   (RE1, _cor4, N0, NFA0) of
		    <{NFA1,N1,E1}> when 'true' ->
			let <_cor6> =
			    %% Line 1067
			    call 'erlang':'+'
				(N1, 1)
			in  %% Line 1067
			    case apply 'build_nfa'/4
				     (RE2, _cor6, N1, NFA1) of
			      <{NFA2,N2,E2}> when 'true' ->
				  let <_cor9> =
				      %% Line 1072
				      call 'erlang':'+'
					  (N2, 1)
				  in  %% Line 1069
				      {[{'nfa_state',S,[{'epsilon',N0}|[{'epsilon',N1}|[]]],'no'}|%% Line 1070
												  [{'nfa_state',E1,[{'epsilon',N2}|[]],'no'}|%% Line 1071
																	     [{'nfa_state',E2,[{'epsilon',N2}|[]],'no'}|NFA2]]],_cor9,N2}
			      ( <_cor7> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor7})
				-| ['compiler_generated'] )
			    end
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor5})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1073
	  <{'literal',[]},N,S,NFA> when 'true' ->
	      %% Line 1074
	      {NFA,N,S}
	  %% Line 1075
	  <{'literal',[C|Cs]},N0,S,NFA0> when 'true' ->
	      %% Line 1076
	      case apply 'build_nfa'/4
		       (C, N0, S, NFA0) of
		<{NFA1,N1,E1}> when 'true' ->
		    %% Line 1077
		    apply 'build_nfa'/4
			({'literal',Cs}, N1, E1, NFA1)
		( <_cor10> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor10})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1078
	  <{'concat',RE1,RE2},N0,S,NFA0> when 'true' ->
	      %% Line 1079
	      case apply 'build_nfa'/4
		       (RE1, N0, S, NFA0) of
		<{NFA1,N1,E1}> when 'true' ->
		    %% Line 1080
		    case apply 'build_nfa'/4
			     (RE2, N1, E1, NFA1) of
		      <{NFA2,N2,E2}> when 'true' ->
			  %% Line 1081
			  {NFA2,N2,E2}
		      ( <_cor12> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor12})
			-| ['compiler_generated'] )
		    end
		( <_cor11> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor11})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1082
	  <{'kclosure',RE},N0,S,NFA0> when 'true' ->
	      let <_cor13> =
		  %% Line 1083
		  call 'erlang':'+'
		      (N0, 1)
	      in  %% Line 1083
		  case apply 'build_nfa'/4
			   (RE, _cor13, N0, NFA0) of
		    <{NFA1,N1,E1}> when 'true' ->
			let <_cor16> =
			    %% Line 1087
			    call 'erlang':'+'
				(N1, 1)
			in  %% Line 1085
			    {[{'nfa_state',S,[{'epsilon',N0}|[{'epsilon',N1}|[]]],'no'}|%% Line 1086
											[{'nfa_state',E1,[{'epsilon',N0}|[{'epsilon',N1}|[]]],'no'}|NFA1]],_cor16,N1}
		    ( <_cor14> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor14})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1088
	  <{'pclosure',RE},N0,S,NFA0> when 'true' ->
	      let <_cor17> =
		  %% Line 1089
		  call 'erlang':'+'
		      (N0, 1)
	      in  %% Line 1089
		  case apply 'build_nfa'/4
			   (RE, _cor17, N0, NFA0) of
		    <{NFA1,N1,E1}> when 'true' ->
			let <_cor20> =
			    %% Line 1093
			    call 'erlang':'+'
				(N1, 1)
			in  %% Line 1091
			    {[{'nfa_state',S,[{'epsilon',N0}|[]],'no'}|%% Line 1092
								       [{'nfa_state',E1,[{'epsilon',N0}|[{'epsilon',N1}|[]]],'no'}|NFA1]],_cor20,N1}
		    ( <_cor18> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor18})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1094
	  <{'optional',RE},N0,S,NFA0> when 'true' ->
	      let <_cor21> =
		  %% Line 1095
		  call 'erlang':'+'
		      (N0, 1)
	      in  %% Line 1095
		  case apply 'build_nfa'/4
			   (RE, _cor21, N0, NFA0) of
		    <{NFA1,N1,E1}> when 'true' ->
			let <_cor24> =
			    %% Line 1099
			    call 'erlang':'+'
				(N1, 1)
			in  %% Line 1097
			    {[{'nfa_state',S,[{'epsilon',N0}|[{'epsilon',N1}|[]]],'no'}|%% Line 1098
											[{'nfa_state',E1,[{'epsilon',N1}|[]],'no'}|NFA1]],_cor24,N1}
		    ( <_cor22> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor22})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1100
	  <{'iclosure',RE,I1,I2},N,S,NFA> when 'true' ->
	      let <Exp> =
		  %% Line 1101
		  apply 'expand_iclosure'/3
		      (RE, I1, I2)
	      in  %% Line 1102
		  apply 'build_nfa'/4
		      (Exp, N, S, NFA)
	  %% Line 1103
	  <{'char_class',Cc},N,S,NFA> when 'true' ->
	      let <_cor27> =
		  %% Line 1104
		  apply 'nfa_char_class'/1
		      (Cc)
	      in  let <_cor26> =
		      %% Line 1104
		      call 'erlang':'+'
			  (N, 1)
		  in  %% Line 1104
		      {[{'nfa_state',S,[{_cor27,N}|[]],'no'}|NFA],_cor26,N}
	  %% Line 1105
	  <{'comp_class',Cc},N,S,NFA> when 'true' ->
	      let <_cor29> =
		  %% Line 1106
		  apply 'nfa_comp_class'/1
		      (Cc)
	      in  let <_cor28> =
		      %% Line 1106
		      call 'erlang':'+'
			  (N, 1)
		  in  %% Line 1106
		      {[{'nfa_state',S,[{_cor29,N}|[]],'no'}|NFA],_cor28,N}
	  %% Line 1107
	  <'epsilon',N,S,NFA> when 'true' ->
	      %% Line 1108
	      {NFA,N,S}
	  %% Line 1109
	  <{'group',RE},N,S,NFA> when 'true' ->
	      %% Line 1110
	      apply 'build_nfa'/4
		  (RE, N, S, NFA)
	  %% Line 1111
	  <{'subexpr',_X_N,RE},N,S,NFA> when 'true' ->
	      %% Line 1112
	      apply 'build_nfa'/4
		  (RE, N, S, NFA)
	  %% Line 1113
	  <'bos',N,S,NFA> when 'true' ->
	      let <_cor30> =
		  %% Line 1114
		  call 'erlang':'+'
		      (N, 1)
	      in  %% Line 1114
		  {[{'nfa_state',S,[{['bos'],N}|[]],'no'}|NFA],_cor30,N}
	  %% Line 1115
	  <'eos',N,S,NFA> when 'true' ->
	      let <_cor31> =
		  %% Line 1116
		  call 'erlang':'+'
		      (N, 1)
	      in  %% Line 1116
		  {[{'nfa_state',S,[{['eos'],N}|[]],'no'}|NFA],_cor31,N}
	  %% Line 1118
	  <C,N,S,NFA>
	      when call 'erlang':'is_integer'
		    (C) ->
	      let <_cor32> =
		  %% Line 1119
		  call 'erlang':'+'
		      (N, 1)
	      in  %% Line 1119
		  {[{'nfa_state',S,[{[{C,C}|[]],N}|[]],'no'}|NFA],_cor32,N}
	  ( <_cor36,_cor35,_cor34,_cor33> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor36,_cor35,_cor34,_cor33})
		  -| [{'function_name',{'build_nfa',4}}] )
	    -| ['compiler_generated'] )
	end
'nfa_char_class'/1 =
    %% Line 1121
    fun (_cor0) ->
	let <_cor5> =
	    %% Line 1122
	    ( fun (_cor2,_cor1) ->
		  case <_cor2,_cor1> of
		    <{C1,C2},Set> when 'true' ->
			call 'ordsets':'add_element'
			    ({C1,C2}, Set)
		    %% Line 1123
		    <C,Set> when 'true' ->
			call 'ordsets':'add_element'
			    ({C,C}, Set)
		  end
	      -| [{'id',{0,0,'-nfa_char_class/1-fun-0-'}}] )
	in  let <Crs> =
		%% Line 1122
		call 'lists':'foldl'
		    (_cor5, %% Line 1123
			    [], _cor0)
	    in  %% Line 1125
		apply 'pack_crs'/1
		    (Crs)
'pack_crs'/1 =
    %% Line 1127
    fun (_cor0) ->
	case _cor0 of
	  <[Cr = {C1,C2}|[{C3,C4}|Crs]]>
	      when let <_cor1> =
		    call 'erlang':'=<'
			(C1, C3)
		in  let <_cor2> =
			call 'erlang':'>='
			    (C2, C4)
		    in  call 'erlang':'and'
			    (_cor1, _cor2) ->
	      %% Line 1130
	      apply 'pack_crs'/1
		  ([Cr|Crs])
	  %% Line 1131
	  <[{C1,C2}|[{C3,C4}|Crs]]>
	      when let <_cor3> =
		    call 'erlang':'>='
			(C2, C3)
		in  let <_cor4> =
			call 'erlang':'<'
			    (C2, C4)
		    in  call 'erlang':'and'
			    (_cor3, _cor4) ->
	      %% Line 1134
	      apply 'pack_crs'/1
		  ([{C1,C4}|Crs])
	  %% Line 1135
	  <[{C1,C2}|[{C3,C4}|Crs]]>
	      when try
		    let <_cor5> =
			call 'erlang':'+'
			    (C2, 1)
		    in  call 'erlang':'=='
			    (_cor5, C3)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 1138
	      apply 'pack_crs'/1
		  ([{C1,C4}|Crs])
	  %% Line 1139
	  <[Cr|Crs]> when 'true' ->
	      let <_cor6> =
		  apply 'pack_crs'/1
		      (Crs)
	      in  [Cr|_cor6]
	  %% Line 1140
	  <[]> when 'true' ->
	      []
	  ( <_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7})
		  -| [{'function_name',{'pack_crs',1}}] )
	    -| ['compiler_generated'] )
	end
'nfa_comp_class'/1 =
    %% Line 1142
    fun (_cor0) ->
	let <Crs> =
	    %% Line 1143
	    apply 'nfa_char_class'/1
		(_cor0)
	in  %% Line 1145
	    apply 'comp_crs'/2
		(Crs, 0)
'comp_crs'/2 =
    %% Line 1147
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{C1,C2}|Crs],Last> when 'true' ->
	      let <_cor2> =
		  %% Line 1148
		  call 'erlang':'-'
		      (C1, 1)
	      in  let <_cor3> =
		      %% Line 1148
		      call 'erlang':'+'
			  (C2, 1)
		  in  let <_cor4> =
			  %% Line 1148
			  apply 'comp_crs'/2
			      (Crs, _cor3)
		      in  %% Line 1148
			  [{Last,_cor2}|_cor4]
	  %% Line 1149
	  <[],Last> when 'true' ->
	      [{Last,'maxchar'}|[]]
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'comp_crs',2}}] )
	    -| ['compiler_generated'] )
	end
'build_dfa'/2 =
    %% Line 1159
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 1161
	    call 'lists':'keysort'
		(2, _cor1)
	in  let <NFA1> =
		%% Line 1161
		call 'erlang':'list_to_tuple'
		    (_cor2)
	    in  let <_cor4> =
		    %% Line 1162
		    apply 'eclosure'/2
			([_cor0|[]], NFA1)
		in  let <D> =
			%% Line 1162
			{'dfa_state',0,_cor4,[],'no'}
		    in  let <_cor6> =
			    %% Line 1163
			    apply 'build_dfa'/4
				([D|[]], 1, [], NFA1)
			in  %% Line 1163
			    {_cor6,0}
'build_dfa'/4 =
    %% Line 1171
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[U|Us0],N0,Ms,NFA> when 'true' ->
	      %% Line 1172
	      ( case U of
		  ( <( {'dfa_state',_cor19,_rec0,_cor20,_cor21}
		       -| ['compiler_generated'] )> when 'true' ->
			case apply 'build_dfa'/6
				 (_rec0, Us0, N0, [], [U|Ms], NFA) of
			  <{Ts,Us1,N1}> when 'true' ->
			      let <_rec1> =
				  %% Line 1173
				  apply 'accept'/2
				      (_rec0, NFA)
			      in  let <_cor11> =
				      %% Line 1173
				      call 'erlang':'setelement'
					  (5, U, _rec1)
				  in  let <_cor13> =
					  %% Line 1173
					  call 'erlang':'setelement'
					      (4, _cor11, Ts)
				      in  %% Line 1174
					  apply 'build_dfa'/4
					      (Us1, N1, [_cor13|Ms], NFA)
			  ( <_cor6> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor6})
			    -| ['compiler_generated'] )
			end
		    -| ['compiler_generated'] )
		  ( <_cor22> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','dfa_state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1175
	  <[],_X_N,Ms,_X_NFA> when 'true' ->
	      Ms
	  ( <_cor18,_cor17,_cor16,_cor15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor18,_cor17,_cor16,_cor15})
		  -| [{'function_name',{'build_dfa',4}}] )
	    -| ['compiler_generated'] )
	end
'build_dfa'/6 =
    %% Line 1186
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor18> =
	    %% Line 1188
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor14) ->
			  case _cor14 of
			    <[S|_cor7]> when 'true' ->
				( letrec
				      'lc$^1'/1 =
					  fun (_cor15) ->
					      case _cor15 of
						<[%% Line 1189
						  {Crs,_X_St}|_cor9]>
						    when %% Line 1190
						      call 'erlang':'is_list'
							  (Crs) ->
						    ( letrec
							  'lc$^2'/1 =
							      fun (_cor16) ->
								  case _cor16 of
								    <[%% Line 1191
								      Cr|_cor13]> when 'true' ->
									let <_cor17> =
									    %% Line 1191
									    apply 'lc$^2'/1
										(_cor13)
									in  ( [Cr|_cor17]
									      -| ['compiler_generated'] )
								    <[]> when 'true' ->
									%% Line 1189
									apply 'lc$^1'/1
									    (_cor9)
								    ( <_cor16> when 'true' ->
									  ( primop 'match_fail'
										({'function_clause',_cor16})
									    -| [{'function_name',{'lc$^2',1}}] )
								      -| ['compiler_generated'] )
								  end
						      in  apply 'lc$^2'/1
							      (%% Line 1191
							       Crs)
						      -| ['list_comprehension'] )
						( <[_cor8|_cor9]> when 'true' ->
						      %% Line 1189
						      apply 'lc$^1'/1
							  (_cor9)
						  -| ['compiler_generated'] )
						<[]> when 'true' ->
						    apply 'lc$^0'/1
							(_cor7)
						( <_cor15> when 'true' ->
						      ( primop 'match_fail'
							    ({'function_clause',_cor15})
							-| [{'function_name',{'lc$^1',1}}] )
						  -| ['compiler_generated'] )
					      end
				  in  %% Line 1189
				      ( case call 'erlang':'element'
						 (S, _cor0) of
					  ( <( {'nfa_state',_cor28,_rec4,_cor29}
					       -| ['compiler_generated'] )> when 'true' ->
						apply 'lc$^1'/1
						    (_rec4)
					    -| ['compiler_generated'] )
					  ( <_cor30> when 'true' ->
						( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'error'
										       -| ['compiler_generated'] )
						      (( {'badrecord','nfa_state'}
							 -| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					end
					-| ['compiler_generated'] )
				  -| ['list_comprehension'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor14> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor14})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (_cor5)
	      -| ['list_comprehension'] )
	in  let <Crs1> =
		%% Line 1192
		call 'lists':'usort'
		    (_cor18)
	    in  let <Test> =
		    %% Line 1194
		    apply 'disjoint_crs'/1
			(Crs1)
		in  %% Line 1196
		    apply 'build_dfa'/7
			(Test, _cor5, _cor4, _cor3, _cor2, _cor1, _cor0)
'disjoint_crs'/1 =
    %% Line 1203
    fun (_cor0) ->
	case _cor0 of
	  <[Cr1 = {_X_C1,C2}|[Cr2 = {C3,_X_C4}|Crs]]>
	      when call 'erlang':'<'
		    (C2,
		     C3) ->
	      let <_cor1> =
		  %% Line 1206
		  apply 'disjoint_crs'/1
		      ([Cr2|Crs])
	      in  %% Line 1206
		  [Cr1|_cor1]
	  %% Line 1207
	  <[{C1,C2}|[{C3,C4}|Crs]]>
	      when call 'erlang':'=='
		    (C1,
		     C3) ->
	      let <_cor2> =
		  %% Line 1210
		  call 'erlang':'+'
		      (C2, 1)
	      in  let <_cor3> =
		      %% Line 1210
		      call 'ordsets':'add_element'
			  ({_cor2,C4}, Crs)
		  in  let <_cor4> =
			  %% Line 1210
			  apply 'disjoint_crs'/1
			      (_cor3)
		      in  %% Line 1210
			  [{C1,C2}|_cor4]
	  %% Line 1211
	  <[{C1,C2}|[{C3,C4}|Crs]]>
	      when try
		    let <_cor5> =
			call 'erlang':'<'
			    (C1, C3)
		    in  let <_cor6> =
			    call 'erlang':'>='
				(C2, C3)
			in  let <_cor7> =
				call 'erlang':'<'
				    (C2, C4)
			    in  let <_cor8> =
				    call 'erlang':'and'
					(_cor6, _cor7)
				in  call 'erlang':'and'
					(_cor5, _cor8)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor9> =
		  %% Line 1214
		  call 'erlang':'-'
		      (C3, 1)
	      in  let <_cor10> =
		      %% Line 1214
		      call 'erlang':'+'
			  (C2, 1)
		  in  let <_cor11> =
			  %% Line 1214
			  call 'ordsets':'union'
			      ([{C3,C2}|[{_cor10,C4}|[]]], Crs)
		      in  let <_cor12> =
			      %% Line 1214
			      apply 'disjoint_crs'/1
				  (_cor11)
			  in  %% Line 1214
			      [{C1,_cor9}|_cor12]
	  %% Line 1215
	  <[{C1,C2}|[{C3,C4}|Crs]]>
	      when let <_cor13> =
		    call 'erlang':'<'
			(C1, C3)
		in  let <_cor14> =
			call 'erlang':'=='
			    (C2, C4)
		    in  call 'erlang':'and'
			    (_cor13, _cor14) ->
	      let <_cor15> =
		  %% Line 1218
		  call 'erlang':'-'
		      (C3, 1)
	      in  let <_cor16> =
		      %% Line 1218
		      call 'ordsets':'add_element'
			  ({C3,C4}, Crs)
		  in  let <_cor17> =
			  %% Line 1218
			  apply 'disjoint_crs'/1
			      (_cor16)
		      in  %% Line 1218
			  [{C1,_cor15}|_cor17]
	  %% Line 1219
	  <[{C1,C2}|[{C3,C4}|Crs]]>
	      when let <_cor18> =
		    call 'erlang':'<'
			(C1, C3)
		in  let <_cor19> =
			call 'erlang':'>'
			    (C2, C4)
		    in  call 'erlang':'and'
			    (_cor18, _cor19) ->
	      let <_cor20> =
		  %% Line 1222
		  call 'erlang':'-'
		      (C3, 1)
	      in  let <_cor21> =
		      %% Line 1222
		      call 'erlang':'+'
			  (C4, 1)
		  in  let <_cor22> =
			  %% Line 1222
			  call 'ordsets':'union'
			      ([{C3,C4}|[{_cor21,C2}|[]]], Crs)
		      in  let <_cor23> =
			      %% Line 1222
			      apply 'disjoint_crs'/1
				  (_cor22)
			  in  %% Line 1222
			      [{C1,_cor20}|_cor23]
	  %% Line 1223
	  <[Cr|Crs]> when 'true' ->
	      let <_cor24> =
		  apply 'disjoint_crs'/1
		      (Crs)
	      in  [Cr|_cor24]
	  %% Line 1224
	  <[]> when 'true' ->
	      []
	  ( <_cor25> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor25})
		  -| [{'function_name',{'disjoint_crs',1}}] )
	    -| ['compiler_generated'] )
	end
'build_dfa'/7 =
    %% Line 1226
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[Cr|Crs],Set,Us,N,Ts,Ms,NFA> when 'true' ->
	      let <_cor7> =
		  %% Line 1227
		  apply 'move'/3
		      (Set, Cr, NFA)
	      in  %% Line 1227
		  case apply 'eclosure'/2
			   (_cor7, NFA) of
		    %% Line 1228
		    <S>
			when call 'erlang':'=/='
			      (S,
			       []) ->
			%% Line 1229
			case call 'lists':'keysearch'
				 (S, 3, Us) of
			  %% Line 1230
			  <{'value',{'dfa_state',T,_cor20,_cor21,_cor22}}> when 'true' ->
			      %% Line 1231
			      apply 'build_dfa'/7
				  (Crs, Set, Us, N, [{Cr,T}|Ts], Ms, NFA)
			  %% Line 1232
			  <'false'> when 'true' ->
			      %% Line 1233
			      case call 'lists':'keysearch'
				       (S, 3, Ms) of
				%% Line 1234
				<{'value',{'dfa_state',T,_cor23,_cor24,_cor25}}> when 'true' ->
				    %% Line 1235
				    apply 'build_dfa'/7
					(Crs, Set, Us, N, [{Cr,T}|Ts], Ms, NFA)
				%% Line 1236
				<'false'> when 'true' ->
				    let <U> =
					%% Line 1237
					{'dfa_state',N,S,[],'no'}
				    in  let <_cor9> =
					    %% Line 1238
					    call 'erlang':'+'
						(N, 1)
					in  %% Line 1238
					    apply 'build_dfa'/7
						(Crs, Set, [U|Us], _cor9, [{Cr,N}|Ts], Ms, NFA)
				( <_cor10> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor10})
				  -| ['compiler_generated'] )
			      end
			  ( <_cor11> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor11})
			    -| ['compiler_generated'] )
			end
		    %% Line 1241
		    <[]> when 'true' ->
			%% Line 1242
			apply 'build_dfa'/7
			    (Crs, Set, Us, N, Ts, Ms, NFA)
		    ( <_cor12> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor12})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1244
	  <[],_X_Set,Us,N,Ts,_X_Ms,_X_NFA> when 'true' ->
	      %% Line 1245
	      {Ts,Us,N}
	  ( <_cor19,_cor18,_cor17,_cor16,_cor15,_cor14,_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor19,_cor18,_cor17,_cor16,_cor15,_cor14,_cor13})
		  -| [{'function_name',{'build_dfa',7}}] )
	    -| ['compiler_generated'] )
	end
'eclosure'/2 =
    %% Line 1252
    fun (_cor1,_cor0) ->
	apply 'eclosure'/3
	    (_cor1, _cor0, [])
'eclosure'/3 =
    %% Line 1254
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[St|Sts],NFA,Ec> when 'true' ->
	      %% Line 1255
	      case call 'erlang':'element'
		       (St, NFA) of
		<{'nfa_state',_cor15,Es,_cor16}> when 'true' ->
		    let <_cor11> =
			%% Line 1256
			( letrec
			      'lc$^0'/1 =
				  fun (_cor8) ->
				      case _cor8 of
					<[{'epsilon',N}|_cor6]> when 'true' ->
					    %% Line 1257
					    ( case call 'ordsets':'is_element'
						       (N, Ec) of
						<'false'> when 'true' ->
						    let <_cor9> =
							apply 'lc$^0'/1
							    (_cor6)
						    in  ( [N|_cor9]
							  -| ['compiler_generated'] )
						( <'true'> when 'true' ->
						      apply 'lc$^0'/1
							  (_cor6)
						  -| ['compiler_generated'] )
						( <_cor_variable> when 'true' ->
						      call 'erlang':'error'
							  ('badarg')
						  -| ['compiler_generated'] )
					      end
					      -| ['list_comprehension'] )
					( <[_cor5|_cor6]> when 'true' ->
					      apply 'lc$^0'/1
						  (_cor6)
					  -| ['compiler_generated'] )
					<[]> when 'true' ->
					    %% Line 1257
					    Sts
					( <_cor8> when 'true' ->
					      ( primop 'match_fail'
						    ({'function_clause',_cor8})
						-| [{'function_name',{'lc$^0',1}}] )
					  -| ['compiler_generated'] )
				      end
			  in  apply 'lc$^0'/1
				  (Es)
			  -| ['list_comprehension'] )
		    in  let <_cor4> =
			    %% Line 1258
			    call 'ordsets':'add_element'
				(St, Ec)
			in  %% Line 1256
			    apply 'eclosure'/3
				(_cor11, %% Line 1258
					 NFA, _cor4)
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1259
	  <[],_X_NFA,Ec> when 'true' ->
	      Ec
	  ( <_cor14,_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12})
		  -| [{'function_name',{'eclosure',3}}] )
	    -| ['compiler_generated'] )
	end
'move'/3 =
    %% Line 1261
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1262
	( letrec
	      'lc$^0'/1 =
		  fun (_cor9) ->
		      case _cor9 of
			<[N|_cor4]> when 'true' ->
			    ( letrec
				  'lc$^1'/1 =
				      fun (_cor10) ->
					  case _cor10 of
					    <[%% Line 1263
					      {Crs,St}|_cor6]>
						when %% Line 1264
						  call 'erlang':'is_list'
						      (Crs) ->
						%% Line 1269
						( case apply 'in_crs'/2
							   (_cor1, Crs) of
						    <'true'> when 'true' ->
							let <_cor11> =
							    apply 'lc$^1'/1
								(_cor6)
							in  ( [St|_cor11]
							      -| ['compiler_generated'] )
						    ( <'false'> when 'true' ->
							  apply 'lc$^1'/1
							      (_cor6)
						      -| ['compiler_generated'] )
						    ( <_cor12> when 'true' ->
							  primop 'match_fail'
							      ({'case_clause',_cor12})
						      -| ['compiler_generated'] )
						  end
						  -| ['list_comprehension'] )
					    ( <[_cor5|_cor6]> when 'true' ->
						  %% Line 1263
						  apply 'lc$^1'/1
						      (_cor6)
					      -| ['compiler_generated'] )
					    <[]> when 'true' ->
						apply 'lc$^0'/1
						    (_cor4)
					    ( <_cor10> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor10})
						    -| [{'function_name',{'lc$^1',1}}] )
					      -| ['compiler_generated'] )
					  end
			      in  %% Line 1263
				  ( case call 'erlang':'element'
					     (N, _cor0) of
				      ( <( {'nfa_state',_cor16,_rec5,_cor17}
					   -| ['compiler_generated'] )> when 'true' ->
					    apply 'lc$^1'/1
						(_rec5)
					-| ['compiler_generated'] )
				      ( <_cor18> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','nfa_state'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
			      -| ['list_comprehension'] )
			<[]> when 'true' ->
			    []
			( <_cor9> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor9})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  apply 'lc$^0'/1
		  (_cor2)
	  -| ['list_comprehension'] )
'in_crs'/2 =
    %% Line 1271
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{C1,C2},[{C3,C4}|_X_Crs]>
	      when let <_cor2> =
		    call 'erlang':'>='
			(C1, C3)
		in  let <_cor3> =
			call 'erlang':'=<'
			    (C2, C4)
		    in  call 'erlang':'and'
			    (_cor2, _cor3) ->
	      'true'
	  %% Line 1272
	  <Cr,[_cor6|_X_Crs]>
	      when call 'erlang':'=:='
		    (_cor6,
		     Cr) ->
	      'true'
	  %% Line 1273
	  <Cr,[_cor7|Crs]> when 'true' ->
	      apply 'in_crs'/2
		  (Cr, Crs)
	  %% Line 1274
	  <_X_Cr,[]> when 'true' ->
	      'false'
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'in_crs',2}}] )
	    -| ['compiler_generated'] )
	end
'accept'/2 =
    %% Line 1279
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[St|Sts],NFA> when 'true' ->
	      %% Line 1280
	      case call 'erlang':'element'
		       (St, NFA) of
		%% Line 1281
		<{'nfa_state',_cor5,_cor6,{'yes',A}}> when 'true' ->
		    {'yes',A}
		%% Line 1282
		<{'nfa_state',_cor7,_cor8,'no'}> when 'true' ->
		    apply 'accept'/2
			(Sts, NFA)
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1284
	  <[],_X_NFA> when 'true' ->
	      'no'
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'accept',2}}] )
	    -| ['compiler_generated'] )
	end
'minimise_dfa'/3 =
    %% Line 1295
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1296
	case apply 'min_dfa'/1
		 (_cor2) of
	  %% Line 1297
	  <{DFA1,[]}> when 'true' ->
	      %% Line 1298
	      case apply 'pack_dfa'/2
		       (DFA1, _cor0) of
		<{DFA2,Rs}> when 'true' ->
		    let <_cor5> =
			%% Line 1299
			apply 'min_update'/2
			    (DFA2, Rs)
		    in  let <_cor4> =
			    %% Line 1299
			    apply 'min_new_state'/2
				(_cor1, Rs)
			in  %% Line 1299
			    {_cor5,_cor4}
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1300
	  <{DFA1,Rs}> when 'true' ->
	      let <_cor7> =
		  %% Line 1301
		  apply 'min_update'/2
		      (DFA1, Rs)
	      in  let <_cor6> =
		      %% Line 1301
		      apply 'min_new_state'/2
			  (_cor1, Rs)
		  in  %% Line 1301
		      apply 'minimise_dfa'/3
			  (_cor7, _cor6, _cor0)
	  ( <_cor8> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor8})
	    -| ['compiler_generated'] )
	end
'min_dfa'/1 =
    %% Line 1304
    fun (_cor0) ->
	apply 'min_dfa'/3
	    (_cor0, [], [])
'min_dfa'/3 =
    %% Line 1306
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[D|DFA0],Rs0,MDFA> when 'true' ->
	      %% Line 1307
	      ( case D of
		  ( <( {'dfa_state',_cor13,_cor14,_rec6,_cor15}
		       -| ['compiler_generated'] )> when 'true' ->
			case apply 'min_delete'/6
				 (DFA0, _rec6, _cor15, _cor13, %% Line 1308
							       Rs0, %% Line 1308
								    []) of
			  <{DFA1,Rs1}> when 'true' ->
			      %% Line 1309
			      apply 'min_dfa'/3
				  (DFA1, Rs1, [D|MDFA])
			  ( <_cor9> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor9})
			    -| ['compiler_generated'] )
			end
		    -| ['compiler_generated'] )
		  ( <_cor16> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','dfa_state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1310
	  <[],Rs,MDFA> when 'true' ->
	      {MDFA,Rs}
	  ( <_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10})
		  -| [{'function_name',{'min_dfa',3}}] )
	    -| ['compiler_generated'] )
	end
'min_delete'/6 =
    %% Line 1312
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[{'dfa_state',N,_cor12,T,A}|DFA],_cor13,_cor14,NewN,Rs,MDFA>
	      when let <_cor15> =
		    call 'erlang':'=:='
			(_cor13, T)
		in  let <_cor16> =
			call 'erlang':'=:='
			    (_cor14, A)
		    in  call 'erlang':'and'
			    (_cor15, _cor16) ->
	      %% Line 1313
	      apply 'min_delete'/6
		  (DFA, T, A, NewN, [{N,NewN}|Rs], MDFA)
	  %% Line 1314
	  <[D|DFA],T,A,NewN,Rs,MDFA> when 'true' ->
	      %% Line 1315
	      apply 'min_delete'/6
		  (DFA, T, A, NewN, Rs, [D|MDFA])
	  %% Line 1316
	  <[],_X_T,_X_A,_X_NewN,Rs,MDFA> when 'true' ->
	      {MDFA,Rs}
	  ( <_cor11,_cor10,_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'min_delete',6}}] )
	    -| ['compiler_generated'] )
	end
'min_update'/2 =
    %% Line 1318
    fun (_cor1,_cor0) ->
	%% Line 1319
	( letrec
	      'lc$^0'/1 =
		  fun (_cor4) ->
		      case _cor4 of
			<[D|_cor3]> when 'true' ->
			    ( case D of
				( <( {'dfa_state',_cor14,_cor15,_rec11,_cor16}
				     -| ['compiler_generated'] )> when 'true' ->
				      let <_rec9> =
					  apply 'min_update_trans'/2
					      (_rec11, _cor0)
				      in  let <_cor10> =
					      call 'erlang':'setelement'
						  (4, D, _rec9)
					  in  let <_cor11> =
						  apply 'lc$^0'/1
						      (_cor3)
					      in  ( [_cor10|_cor11]
						    -| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				( <_cor17> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {'badrecord','dfa_state'}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_cor4> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor4})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  apply 'lc$^0'/1
		  (_cor1)
	  -| ['list_comprehension'] )
'min_update_trans'/2 =
    %% Line 1321
    fun (_cor1,_cor0) ->
	%% Line 1322
	( letrec
	      'lc$^0'/1 =
		  fun (_cor4) ->
		      case _cor4 of
			<[{C,S}|_cor3]> when 'true' ->
			    let <_cor5> =
				apply 'min_new_state'/2
				    (S, _cor0)
			    in  let <_cor6> =
				    apply 'lc$^0'/1
					(_cor3)
				in  ( [{C,_cor5}|_cor6]
				      -| ['compiler_generated'] )
			( <[_cor2|_cor3]> when 'true' ->
			      apply 'lc$^0'/1
				  (_cor3)
			  -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_cor4> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor4})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  apply 'lc$^0'/1
		  (_cor1)
	  -| ['list_comprehension'] )
'min_new_state'/2 =
    %% Line 1324
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Old,[{_cor4,New}|_X_Reds]>
	      when call 'erlang':'=:='
		    (_cor4,
		     Old) ->
	      New
	  %% Line 1325
	  <Old,[_X_R|Reds]> when 'true' ->
	      apply 'min_new_state'/2
		  (Old, Reds)
	  %% Line 1326
	  <Old,[]> when 'true' ->
	      Old
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'min_new_state',2}}] )
	    -| ['compiler_generated'] )
	end
'pack_dfa'/2 =
    %% Line 1328
    fun (_cor1,_cor0) ->
	apply 'pack_dfa'/4
	    (_cor1, _cor0, [], [])
'pack_dfa'/4 =
    %% Line 1330
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[D|DFA],NewN,Rs,PDFA> when 'true' ->
	      let <_cor9> =
		  %% Line 1331
		  call 'erlang':'+'
		      (NewN, 1)
	      in  %% Line 1331
		  ( case D of
		      ( <( {'dfa_state',_rec12,_cor14,_cor15,_cor16}
			   -| ['compiler_generated'] )> when 'true' ->
			    let <_cor6> =
				%% Line 1332
				call 'erlang':'setelement'
				    (2, D, NewN)
			    in  apply 'pack_dfa'/4
				    (DFA, _cor9, [{_rec12,NewN}|Rs], %% Line 1332
								     [_cor6|PDFA])
			-| ['compiler_generated'] )
		      ( <_cor17> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','dfa_state'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  %% Line 1333
	  <[],_X_NewN,Rs,PDFA> when 'true' ->
	      {PDFA,Rs}
	  ( <_cor13,_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11,_cor10})
		  -| [{'function_name',{'pack_dfa',4}}] )
	    -| ['compiler_generated'] )
	end
'comp_apply'/3 =
    %% Line 1343
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Cs,P,{DFA,Start,_X_Fail}> when 'true' ->
	      let <_cor3> =
		  %% Line 1344
		  call 'erlang':'element'
		      (Start, DFA)
	      in  %% Line 1344
		  apply 'comp_apply'/5
		      (_cor3, Cs, P, DFA, 'nomatch')
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'comp_apply',3}}] )
	    -| ['compiler_generated'] )
	end
'comp_apply'/5 =
    %% Line 1346
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <St = {'c_state',_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,[]},Cs,P,DFA,Accept> when 'true' ->
	      %% Line 1347
	      apply 'comp_apply_tr'/5
		  (St, Cs, P, DFA, Accept)
	  %% Line 1348
	  <St = {'c_state',_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,Sp},Cs,P,DFA,Accept> when 'true' ->
	      %% Line 1349
	      apply 'comp_apply_sp'/6
		  (St, Cs, P, DFA, Accept, Sp)
	  ( <_cor9,_cor8,_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7,_cor6,_cor5})
		  -| [{'function_name',{'comp_apply',5}}] )
	    -| ['compiler_generated'] )
	end
'comp_apply_tr'/5 =
    %% Line 1351
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <{'c_state',_cor16,'none',_cor17,_cor18,_cor19,_cor20,A,_cor21},Cs,P,_X_DFA,Accept> when 'true' ->
	      %% Line 1353
	      apply 'accept_value'/4
		  (A, Cs, P, Accept)
	  %% Line 1354
	  <{'c_state',_cor22,Tr,Tmin,Smin,Tmax,Smax,A,_cor23},Cs0 = %% Line 1355
								    [C|Cs],%% Line 1355
									   P,%% Line 1355
									     DFA,%% Line 1355
										 Accept> when 'true' ->
	      let <_cor6> =
		  %% Line 1357
		  case <> of
		    <>
			when call 'erlang':'=<'
			      (C,
			       Tmin) ->
			Smin
		    %% Line 1358
		    <>
			when call 'erlang':'>='
			      (C,
			       Tmax) ->
			Smax
		    %% Line 1359
		    <> when 'true' ->
			let <_cor5> =
			    %% Line 1360
			    call 'erlang':'-'
				(C, Tmin)
			in  %% Line 1360
			    call 'erlang':'element'
				(_cor5, Tr)
		  end
	      in  let <_cor10> =
		      %% Line 1362
		      call 'erlang':'element'
			  (_cor6, DFA)
		  in  let <_cor9> =
			  %% Line 1362
			  call 'erlang':'+'
			      (P, 1)
		      in  let <_cor8> =
			      %% Line 1363
			      apply 'accept_value'/4
				  (A, Cs0, P, Accept)
			  in  %% Line 1362
			      apply 'comp_apply'/5
				  (_cor10, Cs, _cor9, DFA, _cor8)
	  %% Line 1364
	  <{'c_state',_cor24,_X_Tr,_cor25,_cor26,_cor27,_cor28,A,_cor29},[],P,_X_DFA,Accept> when 'true' ->
	      %% Line 1365
	      apply 'accept_value'/4
		  (A, [], P, Accept)
	  ( <_cor15,_cor14,_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14,_cor13,_cor12,_cor11})
		  -| [{'function_name',{'comp_apply_tr',5}}] )
	    -| ['compiler_generated'] )
	end
'comp_apply_sp'/6 =
    %% Line 1367
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <_X_St,Cs,1,DFA,Accept,[{'bos',S}|_cor15]> when 'true' ->
	      let <_cor6> =
		  %% Line 1368
		  call 'erlang':'element'
		      (S, DFA)
	      in  %% Line 1368
		  apply 'comp_apply'/5
		      (_cor6, Cs, 1, DFA, Accept)
	  %% Line 1369
	  <_X_St,[10],P,DFA,Accept,[{'eos',S}|_cor16]> when 'true' ->
	      let <_cor7> =
		  %% Line 1370
		  call 'erlang':'element'
		      (S, DFA)
	      in  %% Line 1370
		  apply 'comp_apply'/5
		      (_cor7, [], P, DFA, Accept)
	  %% Line 1371
	  <_X_St,[],P,DFA,Accept,[{'eos',S}|_cor17]> when 'true' ->
	      let <_cor8> =
		  %% Line 1372
		  call 'erlang':'element'
		      (S, DFA)
	      in  %% Line 1372
		  apply 'comp_apply'/5
		      (_cor8, [], P, DFA, Accept)
	  %% Line 1373
	  <St,Cs,P,DFA,Accept,[_cor18|Sp]> when 'true' ->
	      %% Line 1374
	      apply 'comp_apply_sp'/6
		  (St, Cs, P, DFA, Accept, Sp)
	  %% Line 1375
	  <St,Cs,P,DFA,Accept,[]> when 'true' ->
	      %% Line 1376
	      apply 'comp_apply_tr'/5
		  (St, Cs, P, DFA, Accept)
	  ( <_cor14,_cor13,_cor12,_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12,_cor11,_cor10,_cor9})
		  -| [{'function_name',{'comp_apply_sp',6}}] )
	    -| ['compiler_generated'] )
	end
'accept_value'/4 =
    %% Line 1378
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <'true',Cs,P,_X_Accept> when 'true' ->
	      {'match',P,Cs}
	  %% Line 1379
	  <'false',_X_Cs,_X_P,Accept> when 'true' ->
	      Accept
	  ( <_cor7,_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5,_cor4})
		  -| [{'function_name',{'accept_value',4}}] )
	    -| ['compiler_generated'] )
	end
'compile'/1 =
    %% Line 1384
    fun (_cor0) ->
	%% Line 1385
	case apply 'make_dfa'/2
		 ([{_cor0,'yes'}|[]], 2) of
	  %% Line 1386
	  <{'ok',{DFA0,Start}}> when 'true' ->
	      let <DFA1> =
		  %% Line 1388
		  [{'dfa_state',1,[],[],'no'}|DFA0]
	      in  let <DFA> =
		      %% Line 1389
		      apply 'tuplelise_dfa'/2
			  (DFA1, 1)
		  in  %% Line 1390
		      {'ok',{'comp_regexp',{DFA,Start,1}}}
	  %% Line 1391
	  <{'error',E}> when 'true' ->
	      {'error',E}
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor4})
	    -| ['compiler_generated'] )
	end
'tuplelise_dfa'/2 =
    %% Line 1396
    fun (_cor1,_cor0) ->
	let <_cor6> =
	    %% Line 1397
	    ( fun (_cor4) ->
		  case _cor4 of
		    <{'dfa_state',N,_cor11,Ts,A}> when 'true' ->
			%% Line 1398
			case apply 'build_trans'/2
				 (Ts, _cor0) of
			  <{Tr,Tmin,Smin,Tmax,Smax,Sp}> when 'true' ->
			      let <_cor3> =
				  %% Line 1401
				  apply 'fix_accept'/1
				      (A)
			      in  %% Line 1399
				  {'c_state',N,Tr,Tmin,Smin,%% Line 1400
							    Tmax,%% Line 1400
								 Smax,_cor3,%% Line 1401
									    Sp}
			  ( <_cor2> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor2})
			    -| ['compiler_generated'] )
			end
		    ( <_cor5> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor5})
			    -| [{'function_name',{'-tuplelise_dfa/2-fun-0-',1}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-tuplelise_dfa/2-fun-0-'}}] )
	in  let <DFA1> =
		%% Line 1397
		call 'lists':'map'
		    (_cor6, _cor1)
	    in  let <_cor8> =
		    %% Line 1403
		    call 'lists':'keysort'
			(2, DFA1)
		in  %% Line 1403
		    call 'erlang':'list_to_tuple'
			(_cor8)
'build_trans'/2 =
    %% Line 1405
    fun (_cor1,_cor0) ->
	let <_cor6> =
	    %% Line 1407
	    ( fun (_cor3,_cor2) ->
		  case <_cor3,_cor2> of
		    <T = {{_cor14,_cor15},_cor16},{Ts,Sp}> when 'true' ->
			{[T|Ts],Sp}
		    %% Line 1408
		    <T = {_cor17,_cor18},{Ts,Sp}> when 'true' ->
			{Ts,[T|Sp]}
		    ( <_cor5,_cor4> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor5,_cor4})
			    -| [{'function_name',{'-build_trans/2-fun-0-',2}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-build_trans/2-fun-0-'}}] )
	in  %% Line 1407
	    case call 'lists':'foldl'
		     (_cor6, %% Line 1409
			     {[],[]}, _cor1) of
	      <{Ts1,Sp1}> when 'true' ->
		  %% Line 1410
		  case <> of
		    <>
			when call 'erlang':'=:='
			      (Ts1,
			       []) ->
			%% Line 1411
			{'none','none','none','none','none',Sp1}
		    %% Line 1412
		    <> when 'true' ->
			let <Ts2> =
			    %% Line 1414
			    call 'lists':'keysort'
				(1, Ts1)
			in  %% Line 1415
			    case apply 'min_trans'/2
				     (Ts2, _cor0) of
			      <{Tmin,Smin,Ts3}> when 'true' ->
				  %% Line 1417
				  case apply 'expand_trans'/3
					   (Ts3, Tmin, _cor0) of
				    <{Trans,Tmax,Smax}> when 'true' ->
					let <_cor11> =
					    %% Line 1418
					    call 'erlang':'list_to_tuple'
						(Trans)
					in  %% Line 1418
					    {_cor11,Tmin,Smin,Tmax,Smax,Sp1}
				    ( <_cor10> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor10})
				      -| ['compiler_generated'] )
				  end
			      ( <_cor9> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor9})
				-| ['compiler_generated'] )
			    end
		  end
	      ( <_cor7> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor7})
		-| ['compiler_generated'] )
	    end
'min_trans'/2 =
    %% Line 1421
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{{0,C2},S}|Crs],_X_Def> when 'true' ->
	      {C2,S,Crs}
	  %% Line 1422
	  <Crs = [{{C1,_X_C2},_X_S}|_cor5],Def> when 'true' ->
	      let <_cor2> =
		  call 'erlang':'-'
		      (C1, 1)
	      in  {_cor2,Def,Crs}
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'min_trans',2}}] )
	    -| ['compiler_generated'] )
	end
'expand_trans'/3 =
    %% Line 1424
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[{{C1,'maxchar'},S}|[]],Last,Def> when 'true' ->
	      let <_cor3> =
		  %% Line 1425
		  call 'erlang':'+'
		      (Last, 1)
	      in  let <_cor4> =
		      %% Line 1425
		      call 'erlang':'-'
			  (C1, _cor3)
		  in  let <Trs> =
			  %% Line 1425
			  call 'lists':'duplicate'
			      (_cor4, Def)
		      in  %% Line 1426
			  {Trs,C1,S}
	  %% Line 1427
	  <[{{C1,C2},S}|[]],Last,Def> when 'true' ->
	      let <_cor9> =
		  %% Line 1428
		  call 'erlang':'+'
		      (Last, 1)
	      in  let <_cor10> =
		      %% Line 1428
		      call 'erlang':'-'
			  (C1, _cor9)
		  in  let <_cor11> =
			  %% Line 1428
			  call 'lists':'duplicate'
			      (_cor10, Def)
		      in  let <_cor6> =
			      %% Line 1428
			      call 'erlang':'-'
				  (C2, C1)
			  in  let <_cor7> =
				  %% Line 1428
				  call 'erlang':'+'
				      (_cor6, 1)
			      in  let <_cor8> =
				      %% Line 1428
				      call 'lists':'duplicate'
					  (_cor7, S)
				  in  let <Trs> =
					  %% Line 1428
					  call 'erlang':'++'
					      (_cor11, _cor8)
				      in  let <_cor13> =
					      %% Line 1429
					      call 'erlang':'+'
						  (C2, 1)
					  in  %% Line 1429
					      {Trs,_cor13,Def}
	  %% Line 1430
	  <[{{C1,C2},S}|Crs],Last,Def> when 'true' ->
	      %% Line 1431
	      case apply 'expand_trans'/3
		       (Crs, C2, Def) of
		<{Trs0,Tmax,Smax}> when 'true' ->
		    let <_cor19> =
			%% Line 1432
			call 'erlang':'+'
			    (Last, 1)
		    in  let <_cor20> =
			    %% Line 1432
			    call 'erlang':'-'
				(C1, _cor19)
			in  let <_cor21> =
				%% Line 1432
				call 'lists':'duplicate'
				    (_cor20, Def)
			    in  let <_cor15> =
				    %% Line 1432
				    call 'erlang':'-'
					(C2, C1)
				in  let <_cor16> =
					%% Line 1432
					call 'erlang':'+'
					    (_cor15, 1)
				    in  let <_cor17> =
					    %% Line 1432
					    call 'lists':'duplicate'
						(_cor16, S)
					in  let <_cor18> =
						%% Line 1432
						call 'erlang':'++'
						    (_cor17, Trs0)
					    in  let <Trs1> =
						    %% Line 1432
						    call 'erlang':'++'
							(_cor21, _cor18)
						in  %% Line 1433
						    {Trs1,Tmax,Smax}
		( <_cor14> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor14})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor25,_cor24,_cor23> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor25,_cor24,_cor23})
		  -| [{'function_name',{'expand_trans',3}}] )
	    -| ['compiler_generated'] )
	end
'fix_accept'/1 =
    %% Line 1435
    fun (_cor0) ->
	case _cor0 of
	  <{'yes',_cor2}> when 'true' ->
	      'true'
	  %% Line 1436
	  <'no'> when 'true' ->
	      'false'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'fix_accept',1}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('xmerl_regexp')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('xmerl_regexp', _cor0)
end