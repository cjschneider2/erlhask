module 'xmerl_sax_parser' ['default_continuation_cb'/1,
			   'file'/2,
			   'module_info'/0,
			   'module_info'/1,
			   'stream'/2]
    attributes []
'file'/2 =
    %% Line 68
    fun (_cor1,_cor0) ->
	%% Line 69
	case call 'file':'open'
		 (_cor1, ['raw'|['read'|['binary']]]) of
	  %% Line 70
	  <{'error',Reason}> when 'true' ->
	      let <_cor2> =
		  %% Line 71
		  call 'file':'format_error'
		      (Reason)
	      in  %% Line 71
		  {'error',{_cor1,_cor2}}
	  %% Line 72
	  <{'ok',FD}> when 'true' ->
	      let <Dir> =
		  %% Line 73
		  call 'filename':'dirname'
		      (_cor1)
	      in  let <CL> =
		      %% Line 74
		      call 'filename':'absname'
			  (Dir)
		  in  let <File> =
			  %% Line 75
			  call 'filename':'basename'
			      (_cor1)
		      in  let <ContinuationFun> = 'default_continuation_cb'/1
			  in  let <Res> =
				  %% Line 77
				  apply 'stream'/2
				      (#{}#, %% Line 78
					     [{'continuation_fun',ContinuationFun}|%% Line 79
										   [{'continuation_state',FD}|%% Line 80
													      [{'current_location',CL}|%% Line 81
																       [{'entity',File}|_cor0]]]])
			      in  do  %% Line 83
				      call 'file':'close'
					  (FD)
				      %% Line 84
				      Res
	  ( <_cor8> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor8})
	    -| ['compiler_generated'] )
	end
'stream'/2 =
    %% Line 98
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Xml,Options>
	      when let <_cor2> =
		    call 'erlang':'is_list'
			(Xml)
		in  let <_cor3> =
			call 'erlang':'is_list'
			    (Options)
		    in  call 'erlang':'and'
			    (_cor2, _cor3) ->
	      let <_cor4> =
		  %% Line 99
		  apply 'initial_state'/0
		      ()
	      in  let <State> =
		      %% Line 99
		      apply 'parse_options'/2
			  (Options, _cor4)
		  in  %% Line 100
		      ( case State of
			  ( <( {'xmerl_sax_parser_state',_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_rec0,_cor50,_cor51,_cor52,_cor53}
			       -| ['compiler_generated'] )> when 'true' ->
				case _rec0 of
				  %% Line 101
				  <'dtd'> when 'true' ->
				      let <_cor9> =
					  %% Line 104
					  call 'erlang':'setelement'
					      (18, State, 'stream')
				      in  let <_cor11> =
					      %% Line 103
					      call 'erlang':'setelement'
						  (6, _cor9, 'list')
					  in  %% Line 102
					      call 'xmerl_sax_parser_list':'parse_dtd'
						  (Xml, _cor11)
				  %% Line 105
				  <'normal'> when 'true' ->
				      let <_cor13> =
					  %% Line 108
					  call 'erlang':'setelement'
					      (18, State, 'stream')
				      in  let <_cor15> =
					      %% Line 107
					      call 'erlang':'setelement'
						  (6, _cor13, 'list')
					  in  %% Line 106
					      call 'xmerl_sax_parser_list':'parse'
						  (Xml, _cor15)
				  ( <_cor16> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor16})
				    -| ['compiler_generated'] )
				end
			    -| ['compiler_generated'] )
			  ( <_cor54> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','xmerl_sax_parser_state'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
	  %% Line 110
	  <Xml,Options>
	      when let <_cor17> =
		    call 'erlang':'is_binary'
			(Xml)
		in  let <_cor18> =
			call 'erlang':'is_list'
			    (Options)
		    in  call 'erlang':'and'
			    (_cor17, _cor18) ->
	      let <_cor19> =
		  %% Line 111
		  apply 'initial_state'/0
		      ()
	      in  %% Line 111
		  case apply 'parse_options'/2
			   (Options, _cor19) of
		    %% Line 112
		    <{'error',Reason}> when 'true' ->
			{'error',Reason}
		    %% Line 113
		    <State> when 'true' ->
			%% Line 115
			( case State of
			    ( <( {'xmerl_sax_parser_state',_cor91,_cor92,_cor93,_cor94,_cor95,_cor96,_cor97,_cor98,_cor99,_cor100,_cor101,_cor102,_rec3,_cor103,_cor104,_cor105,_cor106}
				 -| ['compiler_generated'] )> when 'true' ->
				  let <_cor23> =
				      case _rec3 of
					%% Line 116
					<'dtd'> when 'true' ->
					    %% Line 117
					    'parse_dtd'
					%% Line 118
					<'normal'> when 'true' ->
					    %% Line 119
					    'parse'
					( <_cor22> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_cor22})
					  -| ['compiler_generated'] )
				      end
				  in  %% Line 121
				      case apply 'detect_charset'/2
					       (Xml, State) of
					%% Line 122
					<{'error',Reason}> when 'true' ->
					    {'fatal_error',%% Line 123
							   {_cor103,_cor104,%% Line 126
									    1},%% Line 128
									       Reason,%% Line 129
										      [],_cor91}
					%% Line 131
					<{Xml1,State1}> when 'true' ->
					    %% Line 133
					    case State1 of
					      <{'xmerl_sax_parser_state',_cor159,_cor160,_cor161,_cor162,_cor163,_cor164,_cor165,_cor166,_cor167,_cor168,_cor169,_cor170,_cor171,_cor172,_cor173,_cor174,_cor175}> when 'true' ->
						  let <_cor33> =
						      call 'erlang':'setelement'
							  (18, State1, 'stream')
						  in  apply 'parse_binary'/3
							  (Xml1, _cor33, _cor23)
					      ( <_cor176> when 'true' ->
						    ( call ( 'erlang'
							     -| ['compiler_generated'] ):( 'error'
											   -| ['compiler_generated'] )
							  (( {'badrecord','xmerl_sax_parser_state'}
							     -| ['compiler_generated'] ))
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					    end
					( <_cor34> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_cor34})
					  -| ['compiler_generated'] )
				      end
			      -| ['compiler_generated'] )
			    ( <_cor107> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','xmerl_sax_parser_state'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		  end
	  ( <_cor37,_cor36> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor37,_cor36})
		  -| [{'function_name',{'stream',2}}] )
	    -| ['compiler_generated'] )
	end
'parse_binary'/3 =
    %% Line 149
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Xml,State = {'xmerl_sax_parser_state',_cor8,_cor9,_cor10,_cor11,'utf8',_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23},F> when 'true' ->
	      %% Line 150
	      call 'xmerl_sax_parser_utf8':F
		  (Xml, State)
	  %% Line 151
	  <Xml,State = {'xmerl_sax_parser_state',_cor24,_cor25,_cor26,_cor27,{'utf16','little'},_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39},F> when 'true' ->
	      %% Line 152
	      call 'xmerl_sax_parser_utf16le':F
		  (Xml, State)
	  %% Line 153
	  <Xml,State = {'xmerl_sax_parser_state',_cor40,_cor41,_cor42,_cor43,{'utf16','big'},_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55},F> when 'true' ->
	      %% Line 154
	      call 'xmerl_sax_parser_utf16be':F
		  (Xml, State)
	  %% Line 155
	  <Xml,State = {'xmerl_sax_parser_state',_cor56,_cor57,_cor58,_cor59,'latin1',_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,_cor69,_cor70,_cor71},F> when 'true' ->
	      %% Line 156
	      call 'xmerl_sax_parser_latin1':F
		  (Xml, State)
	  %% Line 157
	  <_cor72,{'xmerl_sax_parser_state',_cor73,_cor74,_cor75,_cor76,Enc,_cor77,_cor78,_cor79,_cor80,_cor81,_cor82,_cor83,_cor84,_cor85,_cor86,_cor87,_cor88},_cor89> when 'true' ->
	      let <_cor3> =
		  %% Line 158
		  call 'io_lib':'format'
		      ([67|[104|[97|[114|[99|[116|[101|[114|[32|[115|[101|[116|[32|[126|[112|[32|[110|[111|[116|[32|[115|[117|[112|[112|[111|[114|[116|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Enc|[]])
	      in  let <_cor4> =
		      %% Line 158
		      call 'lists':'flatten'
			  (_cor3)
		  in  %% Line 158
		      {'error',_cor4}
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'parse_binary',3}}] )
	    -| ['compiler_generated'] )
	end
'initial_state'/0 =
    %% Line 166
    fun () ->
	%% Line 167
	{'xmerl_sax_parser_state','undefined',%% Line 168
					      ( 'default_event_cb'/3
						-| [{'id',{0,0,'-initial_state/0-fun-0-'}}] ),'undefined','undefined','utf8',1,%% Line 169
															       [{[120|[109|[108]]],[104|[116|[116|[112|[58|[47|[47|[119|[119|[119|[46|[119|[51|[46|[111|[114|[103|[47|[88|[77|[76|[47|[49|[57|[57|[56|[47|[110|[97|[109|[101|[115|[112|[97|[99|[101]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}],[],[],'true','undefined','no','normal',%% Line 170
																																																 [46],%% Line 171
																																																      [],'false','undefined'}
'parse_options'/2 =
    %% Line 186
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],State> when 'true' ->
	      %% Line 187
	      State
	  %% Line 188
	  <[{'event_state',CbState}|Options],State> when 'true' ->
	      %% Line 189
	      case State of
		<{'xmerl_sax_parser_state',_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52}> when 'true' ->
		    let <_cor4> =
			call 'erlang':'setelement'
			    (2, State, CbState)
		    in  apply 'parse_options'/2
			    (Options, _cor4)
		( <_cor53> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','xmerl_sax_parser_state'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 190
	  <[{'event_fun',CbF}|Options],State> when 'true' ->
	      %% Line 191
	      case State of
		<{'xmerl_sax_parser_state',_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,_cor69,_cor70}> when 'true' ->
		    let <_cor7> =
			call 'erlang':'setelement'
			    (3, State, CbF)
		    in  apply 'parse_options'/2
			    (Options, _cor7)
		( <_cor71> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','xmerl_sax_parser_state'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 192
	  <[{'continuation_state',CState}|Options],State> when 'true' ->
	      %% Line 193
	      case State of
		<{'xmerl_sax_parser_state',_cor72,_cor73,_cor74,_cor75,_cor76,_cor77,_cor78,_cor79,_cor80,_cor81,_cor82,_cor83,_cor84,_cor85,_cor86,_cor87,_cor88}> when 'true' ->
		    let <_cor10> =
			call 'erlang':'setelement'
			    (4, State, CState)
		    in  apply 'parse_options'/2
			    (Options, _cor10)
		( <_cor89> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','xmerl_sax_parser_state'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 194
	  <[{'continuation_fun',CF}|Options],State> when 'true' ->
	      %% Line 195
	      case State of
		<{'xmerl_sax_parser_state',_cor90,_cor91,_cor92,_cor93,_cor94,_cor95,_cor96,_cor97,_cor98,_cor99,_cor100,_cor101,_cor102,_cor103,_cor104,_cor105,_cor106}> when 'true' ->
		    let <_cor13> =
			call 'erlang':'setelement'
			    (5, State, CF)
		    in  apply 'parse_options'/2
			    (Options, _cor13)
		( <_cor107> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','xmerl_sax_parser_state'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 196
	  <[{'file_type',FT}|Options],State>
	      when let <_cor14> =
		    call 'erlang':'=:='
			(FT, 'normal')
		in  let <_cor15> =
			call 'erlang':'=:='
			    (FT, 'dtd')
		    in  call 'erlang':'or'
			    (_cor14, _cor15) ->
	      %% Line 197
	      case State of
		<{'xmerl_sax_parser_state',_cor108,_cor109,_cor110,_cor111,_cor112,_cor113,_cor114,_cor115,_cor116,_cor117,_cor118,_cor119,_cor120,_cor121,_cor122,_cor123,_cor124}> when 'true' ->
		    let <_cor18> =
			call 'erlang':'setelement'
			    (14, State, FT)
		    in  apply 'parse_options'/2
			    (Options, _cor18)
		( <_cor125> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','xmerl_sax_parser_state'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 198
	  <[{'encoding',E}|Options],State> when 'true' ->
	      %% Line 199
	      case apply 'check_encoding_option'/1
		       (E) of
		%% Line 200
		<{'error',Reason}> when 'true' ->
		    %% Line 201
		    {'error',Reason}
		%% Line 202
		<Enc> when 'true' ->
		    %% Line 203
		    case State of
		      <{'xmerl_sax_parser_state',_cor126,_cor127,_cor128,_cor129,_cor130,_cor131,_cor132,_cor133,_cor134,_cor135,_cor136,_cor137,_cor138,_cor139,_cor140,_cor141,_cor142}> when 'true' ->
			  let <_cor21> =
			      call 'erlang':'setelement'
				  (6, State, Enc)
			  in  apply 'parse_options'/2
				  (Options, _cor21)
		      ( <_cor143> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','xmerl_sax_parser_state'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
	      end
	  %% Line 205
	  <[{'current_location',CL}|Options],State> when 'true' ->
	      %% Line 206
	      case State of
		<{'xmerl_sax_parser_state',_cor144,_cor145,_cor146,_cor147,_cor148,_cor149,_cor150,_cor151,_cor152,_cor153,_cor154,_cor155,_cor156,_cor157,_cor158,_cor159,_cor160}> when 'true' ->
		    let <_cor25> =
			call 'erlang':'setelement'
			    (15, State, CL)
		    in  apply 'parse_options'/2
			    (Options, _cor25)
		( <_cor161> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','xmerl_sax_parser_state'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 207
	  <[{'entity',Entity}|Options],State> when 'true' ->
	      %% Line 208
	      case State of
		<{'xmerl_sax_parser_state',_cor162,_cor163,_cor164,_cor165,_cor166,_cor167,_cor168,_cor169,_cor170,_cor171,_cor172,_cor173,_cor174,_cor175,_cor176,_cor177,_cor178}> when 'true' ->
		    let <_cor28> =
			call 'erlang':'setelement'
			    (16, State, Entity)
		    in  apply 'parse_options'/2
			    (Options, _cor28)
		( <_cor179> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','xmerl_sax_parser_state'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 209
	  <['skip_external_dtd'|Options],State> when 'true' ->
	      %% Line 210
	      case State of
		<{'xmerl_sax_parser_state',_cor180,_cor181,_cor182,_cor183,_cor184,_cor185,_cor186,_cor187,_cor188,_cor189,_cor190,_cor191,_cor192,_cor193,_cor194,_cor195,_cor196}> when 'true' ->
		    let <_cor31> =
			call 'erlang':'setelement'
			    (17, State, 'true')
		    in  apply 'parse_options'/2
			    (Options, _cor31)
		( <_cor197> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','xmerl_sax_parser_state'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 211
	  <[O|_cor198],_X_State> when 'true' ->
	      let <_cor32> =
		  %% Line 213
		  call 'io_lib':'format'
		      ([79|[112|[116|[105|[111|[110|[58|[32|[126|[112|[32|[110|[111|[116|[32|[115|[117|[112|[112|[111|[114|[116|[101|[100]]]]]]]]]]]]]]]]]]]]]]]], [O|[]])
	      in  let <_cor33> =
		      %% Line 213
		      call 'lists':'flatten'
			  (_cor32)
		  in  %% Line 212
		      {'error',_cor33}
	  ( <_cor35,_cor34> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor35,_cor34})
		  -| [{'function_name',{'parse_options',2}}] )
	    -| ['compiler_generated'] )
	end
'check_encoding_option'/1 =
    %% Line 216
    fun (_cor0) ->
	case _cor0 of
	  <E>
	      when let <_cor1> =
		    call 'erlang':'=:='
			(_cor0, 'utf8')
		in  let <_cor2> =
			call 'erlang':'=:='
			    (_cor0, {'utf16','little'})
		    in  let <_cor3> =
			    call 'erlang':'=:='
				(_cor0, {'utf16','big'})
			in  let <_cor4> =
				%% Line 217
				call 'erlang':'=:='
				    (_cor0, 'latin1')
			    in  let <_cor5> =
				    %% Line 217
				    call 'erlang':'=:='
					(_cor0, 'list')
				in  let <_cor6> =
					%% Line 217
					call 'erlang':'or'
					    (_cor4, _cor5)
				    in  let <_cor7> =
					    call 'erlang':'or'
						(_cor3, _cor6)
					in  let <_cor8> =
						call 'erlang':'or'
						    (_cor2, _cor7)
					    in  call 'erlang':'or'
						    (_cor1, _cor8) ->
	      %% Line 218
	      E
	  %% Line 219
	  <'utf16'> when 'true' ->
	      %% Line 220
	      {'utf16','big'}
	  %% Line 221
	  <E> when 'true' ->
	      let <_cor9> =
		  %% Line 222
		  call 'io_lib':'format'
		      ([67|[104|[97|[114|[97|[99|[116|[101|[114|[32|[115|[101|[116|[32|[126|[112|[32|[110|[111|[116|[32|[115|[117|[112|[112|[111|[114|[116|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [E|[]])
	      in  %% Line 222
		  {'error',_cor9}
	end
'detect_charset'/2 =
    %% Line 231
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <#{}#,_cor13 = {'xmerl_sax_parser_state',_cor14,_cor15,_cor16,'undefined',_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29}> when 'true' ->
	      %% Line 232
	      call 'erlang':'throw'
		  ({'error',[67|[97|[110|[39|[116|[32|[100|[101|[116|[101|[99|[116|[32|[99|[104|[97|[114|[97|[99|[116|[101|[114|[32|[101|[110|[99|[111|[100|[105|[110|[103|[32|[100|[117|[101|[32|[116|[111|[32|[110|[111|[32|[105|[110|[100|[97|[116|[97]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]})
	  %% Line 233
	  <#{}#,State = {'xmerl_sax_parser_state',_cor30,_cor31,%% Line 234
								CState,CFun,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44}> when 'true' ->
	      %% Line 235
	      case apply CFun
		       (CState) of
		%% Line 236
		<{#{}#,_cor45}> when 'true' ->
		    %% Line 237
		    call 'erlang':'throw'
			({'error',[67|[97|[110|[39|[116|[32|[100|[101|[116|[101|[99|[116|[32|[99|[104|[97|[114|[97|[99|[116|[101|[114|[32|[101|[110|[99|[111|[100|[105|[110|[103|[32|[100|[117|[101|[32|[116|[111|[32|[108|[97|[99|[107|[32|[111|[102|[32|[105|[110|[100|[97|[116|[97]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]})
		%% Line 238
		<{NewBytes,NewContState}> when 'true' ->
		    let <_cor4> =
			%% Line 239
			call 'erlang':'setelement'
			    (4, State, NewContState)
		    in  %% Line 239
			apply 'detect_charset'/2
			    (NewBytes, _cor4)
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 241
	  <Bytes,State> when 'true' ->
	      %% Line 242
	      case call 'unicode':'bom_to_encoding'
		       (Bytes) of
		%% Line 243
		<{'latin1',0}> when 'true' ->
		    %% Line 244
		    apply 'detect_charset_1'/2
			(Bytes, State)
		%% Line 245
		<{Enc,Length}> when 'true' ->
		    %% Line 246
		    case ( Bytes
			   -| ['reuse_for_context'] ) of
		      <#{#<_cor64>(Length,8,'binary',['unsigned'|['big']]),
			 #<RealBytes>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
			  %% Line 247
			  case State of
			    <{'xmerl_sax_parser_state',_cor65,_cor66,_cor67,_cor68,_cor69,_cor70,_cor71,_cor72,_cor73,_cor74,_cor75,_cor76,_cor77,_cor78,_cor79,_cor80,_cor81}> when 'true' ->
				let <_cor9> =
				    call 'erlang':'setelement'
					(6, State, Enc)
				in  {RealBytes,_cor9}
			    ( <_cor82> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','xmerl_sax_parser_state'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
		      ( <_cor6> when 'true' ->
			    do  primop 'bs_context_to_binary'
				    (_cor6)
				primop 'match_fail'
				    ({'badmatch',_cor6})
			-| ['compiler_generated'] )
		    end
		( <_cor10> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor10})
		  -| ['compiler_generated'] )
	      end
	end
'detect_charset_1'/2 =
    %% Line 250
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Xml = #{#<0>(8,1,'integer',['unsigned'|['big']]),
		   #<60>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<63>(8,1,'integer',['unsigned'|['big']]),
		   #<_cor16>('all',8,'binary',['unsigned'|['big']])}#,State> when 'true' ->
	      %% Line 251
	      case State of
		<{'xmerl_sax_parser_state',_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33}> when 'true' ->
		    let <_cor4> =
			call 'erlang':'setelement'
			    (6, State, {'utf16','big'})
		    in  {Xml,_cor4}
		( <_cor34> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','xmerl_sax_parser_state'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 252
	  <Xml = #{#<60>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<63>(8,1,'integer',['unsigned'|['big']]),
		   #<0>(8,1,'integer',['unsigned'|['big']]),
		   #<_cor35>('all',8,'binary',['unsigned'|['big']])}#,State> when 'true' ->
	      %% Line 253
	      case State of
		<{'xmerl_sax_parser_state',_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52}> when 'true' ->
		    let <_cor7> =
			call 'erlang':'setelement'
			    (6, State, {'utf16','little'})
		    in  {Xml,_cor7}
		( <_cor53> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','xmerl_sax_parser_state'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 254
	  <Xml = #{#<60>(8,1,'integer',['unsigned'|['big']]),
		   #<63>(8,1,'integer',['unsigned'|['big']]),
		   #<120>(8,1,'integer',['unsigned'|['big']]),
		   #<109>(8,1,'integer',['unsigned'|['big']]),
		   #<108>(8,1,'integer',['unsigned'|['big']]),
		   #<Xml2>('all',8,'binary',['unsigned'|['big']])}#,State> when 'true' ->
	      %% Line 255
	      case apply 'parse_xml_directive'/1
		       (Xml2) of
		%% Line 256
		<{'error',Reason}> when 'true' ->
		    %% Line 257
		    {'error',Reason}
		%% Line 258
		<AttrList> when 'true' ->
		    %% Line 259
		    case call 'lists':'keysearch'
			     ([101|[110|[99|[111|[100|[105|[110|[103]]]]]]]], 1, AttrList) of
		      %% Line 260
		      <{'value',{_cor54,E}}> when 'true' ->
			  %% Line 261
			  case apply 'convert_encoding'/1
				   (E) of
			    %% Line 262
			    <{'error',Reason}> when 'true' ->
				%% Line 263
				{'error',Reason}
			    %% Line 264
			    <Enc> when 'true' ->
				%% Line 265
				case State of
				  <{'xmerl_sax_parser_state',_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,_cor69,_cor70,_cor71}> when 'true' ->
				      let <_cor10> =
					  call 'erlang':'setelement'
					      (6, State, Enc)
				      in  {Xml,_cor10}
				  ( <_cor72> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','xmerl_sax_parser_state'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
			  end
		      %% Line 267
		      <_cor73> when 'true' ->
			  %% Line 268
			  {Xml,State}
		    end
	      end
	  %% Line 271
	  <Xml,State> when 'true' ->
	      %% Line 272
	      {Xml,State}
	end
'convert_encoding'/1 =
    %% Line 280
    fun (_cor0) ->
	%% Line 281
	case call 'string':'to_lower'
		 (_cor0) of
	  %% Line 282
	  <[117|[116|[102|[45|[56]]]]]> when 'true' ->
	      'utf8'
	  %% Line 283
	  <[117|[115|[45|[97|[115|[99|[105|[105]]]]]]]]> when 'true' ->
	      'utf8'
	  %% Line 284
	  <[108|[97|[116|[105|[110|[49]]]]]]> when 'true' ->
	      'latin1'
	  %% Line 285
	  <[105|[115|[111|[45|[56|[56|[53|[57|[45|[49]]]]]]]]]]> when 'true' ->
	      'latin1'
	  %% Line 286
	  <[105|[115|[111|[45|[56|[56|[53|[57|[45|[50]]]]]]]]]]> when 'true' ->
	      'latin1'
	  %% Line 287
	  <[105|[115|[111|[45|[56|[56|[53|[57|[45|[51]]]]]]]]]]> when 'true' ->
	      'latin1'
	  %% Line 288
	  <[105|[115|[111|[45|[56|[56|[53|[57|[45|[52]]]]]]]]]]> when 'true' ->
	      'latin1'
	  %% Line 289
	  <[105|[115|[111|[45|[56|[56|[53|[57|[45|[53]]]]]]]]]]> when 'true' ->
	      'latin1'
	  %% Line 290
	  <[105|[115|[111|[45|[56|[56|[53|[57|[45|[54]]]]]]]]]]> when 'true' ->
	      'latin1'
	  %% Line 291
	  <[105|[115|[111|[45|[56|[56|[53|[57|[45|[55]]]]]]]]]]> when 'true' ->
	      'latin1'
	  %% Line 292
	  <[105|[115|[111|[45|[56|[56|[53|[57|[45|[56]]]]]]]]]]> when 'true' ->
	      'latin1'
	  %% Line 293
	  <[105|[115|[111|[45|[56|[56|[53|[57|[45|[57]]]]]]]]]]> when 'true' ->
	      'latin1'
	  %% Line 294
	  <_cor4> when 'true' ->
	      let <_cor1> =
		  call 'erlang':'++'
		      ([85|[110|[107|[110|[111|[119|[110|[32|[101|[110|[99|[111|[100|[105|[110|[103|[58|[32]]]]]]]]]]]]]]]]]], _cor0)
	      in  {'error',_cor1}
	end
'parse_xml_directive'/1 =
    %% Line 304
    fun (_cor0) ->
	case ( _cor0
	       -| ['reuse_for_context'] ) of
	  <#{#<C>(8,1,'integer',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#>
	      when let <_cor1> =
		    call 'erlang':'=:='
			(C, 32)
		in  let <_cor2> =
			call 'erlang':'=:='
			    (C, 13)
		    in  let <_cor3> =
			    call 'erlang':'=:='
				(C, 10)
			in  let <_cor4> =
				call 'erlang':'=:='
				    (C, 9)
			    in  let <_cor5> =
				    call 'erlang':'or'
					(_cor3, _cor4)
				in  let <_cor6> =
					call 'erlang':'or'
					    (_cor2, _cor5)
				    in  call 'erlang':'or'
					    (_cor1, _cor6) ->
	      %% Line 305
	      apply 'parse_xml_directive_1'/2
		  (Rest, [])
	  ( <_cor7> when 'true' ->
		do  primop 'bs_context_to_binary'
			(_cor7)
		    ( primop 'match_fail'
			  ({'function_clause',_cor7})
		      -| [{'function_name',{'parse_xml_directive',1}}] )
	    -| ['compiler_generated'] )
	end
'parse_xml_directive_1'/2 =
    %% Line 316
    fun (_cor1,_cor0) ->
	case <( _cor1
		-| ['reuse_for_context'] ),_cor0> of
	  <#{#<C>(8,1,'integer',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,Acc>
	      when let <_cor2> =
		    call 'erlang':'=:='
			(C, 32)
		in  let <_cor3> =
			call 'erlang':'=:='
			    (C, 13)
		    in  let <_cor4> =
			    call 'erlang':'=:='
				(C, 10)
			in  let <_cor5> =
				call 'erlang':'=:='
				    (C, 9)
			    in  let <_cor6> =
				    call 'erlang':'or'
					(_cor4, _cor5)
				in  let <_cor7> =
					call 'erlang':'or'
					    (_cor3, _cor6)
				    in  call 'erlang':'or'
					    (_cor2, _cor7) ->
	      %% Line 317
	      apply 'parse_xml_directive_1'/2
		  (Rest, Acc)
	  %% Line 318
	  <#{#<63>(8,1,'integer',['unsigned'|['big']]),
	     #<62>(8,1,'integer',['unsigned'|['big']]),
	     #<_cor15>('all',8,'binary',['unsigned'|['big']])}#,Acc> when 'true' ->
	      %% Line 319
	      Acc
	  %% Line 320
	  <#{#<C>(8,1,'integer',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,Acc>
	      when let <_cor8> =
		    call 'erlang':'=<'
			(97, C)
		in  let <_cor9> =
			call 'erlang':'=<'
			    (C, 122)
		    in  call 'erlang':'and'
			    (_cor8, _cor9) ->
	      %% Line 321
	      case apply 'parse_name'/2
		       (Rest, [C|[]]) of
		<{Name,Rest1}> when 'true' ->
		    let <Rest2> =
			%% Line 322
			apply 'parse_eq'/1
			    (Rest1)
		    in  %% Line 323
			case apply 'parse_value'/1
				 (Rest2) of
			  <{Value,Rest3}> when 'true' ->
			      %% Line 324
			      apply 'parse_xml_directive_1'/2
				  (Rest3, [{Name,Value}|Acc])
			  ( <_cor12> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor12})
			    -| ['compiler_generated'] )
			end
		( <_cor10> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor10})
		  -| ['compiler_generated'] )
	      end
	  %% Line 325
	  <_cor16,_cor17> when 'true' ->
	      %% Line 326
	      {'error',[85|[110|[107|[110|[111|[119|[110|[32|[97|[116|[116|[114|[105|[98|[117|[116|[101|[32|[105|[110|[32|[120|[109|[108|[32|[100|[105|[114|[101|[99|[116|[105|[118|[101]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}
	end
'parse_name'/2 =
    %% Line 335
    fun (_cor1,_cor0) ->
	case <( _cor1
		-| ['reuse_for_context'] ),_cor0> of
	  <#{#<C>(8,1,'integer',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,Acc>
	      when let <_cor2> =
		    call 'erlang':'=<'
			(97, C)
		in  let <_cor3> =
			call 'erlang':'=<'
			    (C, 122)
		    in  call 'erlang':'and'
			    (_cor2, _cor3) ->
	      %% Line 336
	      apply 'parse_name'/2
		  (Rest, [C|Acc])
	  %% Line 337
	  <Rest,Acc> when 'true' ->
	      do  primop 'bs_context_to_binary'
		      (Rest)
		  let <_cor4> =
		      %% Line 338
		      call 'lists':'reverse'
			  (Acc)
		  in  %% Line 338
		      {_cor4,Rest}
	end
'parse_eq'/1 =
    %% Line 346
    fun (_cor0) ->
	case ( _cor0
	       -| ['reuse_for_context'] ) of
	  <#{#<C>(8,1,'integer',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#>
	      when let <_cor1> =
		    call 'erlang':'=:='
			(C, 32)
		in  let <_cor2> =
			call 'erlang':'=:='
			    (C, 13)
		    in  let <_cor3> =
			    call 'erlang':'=:='
				(C, 10)
			in  let <_cor4> =
				call 'erlang':'=:='
				    (C, 9)
			    in  let <_cor5> =
				    call 'erlang':'or'
					(_cor3, _cor4)
				in  let <_cor6> =
					call 'erlang':'or'
					    (_cor2, _cor5)
				    in  call 'erlang':'or'
					    (_cor1, _cor6) ->
	      %% Line 347
	      apply 'parse_eq'/1
		  (Rest)
	  %% Line 348
	  <#{#<61>(8,1,'integer',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      %% Line 349
	      Rest
	  ( <_cor7> when 'true' ->
		do  primop 'bs_context_to_binary'
			(_cor7)
		    ( primop 'match_fail'
			  ({'function_clause',_cor7})
		      -| [{'function_name',{'parse_eq',1}}] )
	    -| ['compiler_generated'] )
	end
'parse_value'/1 =
    %% Line 358
    fun (_cor0) ->
	case ( _cor0
	       -| ['reuse_for_context'] ) of
	  <#{#<C>(8,1,'integer',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#>
	      when let <_cor1> =
		    call 'erlang':'=:='
			(C, 32)
		in  let <_cor2> =
			call 'erlang':'=:='
			    (C, 13)
		    in  let <_cor3> =
			    call 'erlang':'=:='
				(C, 10)
			in  let <_cor4> =
				call 'erlang':'=:='
				    (C, 9)
			    in  let <_cor5> =
				    call 'erlang':'or'
					(_cor3, _cor4)
				in  let <_cor6> =
					call 'erlang':'or'
					    (_cor2, _cor5)
				    in  call 'erlang':'or'
					    (_cor1, _cor6) ->
	      %% Line 359
	      apply 'parse_value'/1
		  (Rest)
	  %% Line 360
	  <#{#<C>(8,1,'integer',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#>
	      when let <_cor7> =
		    call 'erlang':'=='
			(C, 39)
		in  let <_cor8> =
			call 'erlang':'=='
			    (C, 34)
		    in  call 'erlang':'or'
			    (_cor7, _cor8) ->
	      %% Line 361
	      apply 'parse_value_1'/3
		  (Rest, C, [])
	  ( <_cor9> when 'true' ->
		do  primop 'bs_context_to_binary'
			(_cor9)
		    ( primop 'match_fail'
			  ({'function_clause',_cor9})
		      -| [{'function_name',{'parse_value',1}}] )
	    -| ['compiler_generated'] )
	end
'parse_value_1'/3 =
    %% Line 372
    fun (_cor2,_cor1,_cor0) ->
	case <( _cor2
		-| ['reuse_for_context'] ),_cor1,_cor0> of
	  <#{#<Stop>(8,1,'integer',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,_cor7,Acc>
	      when call 'erlang':'=:='
		    (_cor7,
		     Stop) ->
	      let <_cor3> =
		  %% Line 373
		  call 'lists':'reverse'
		      (Acc)
	      in  %% Line 373
		  {_cor3,Rest}
	  %% Line 374
	  <#{#<C>(8,1,'integer',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,Stop,Acc> when 'true' ->
	      %% Line 375
	      apply 'parse_value_1'/3
		  (Rest, Stop, [C|Acc])
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		do  primop 'bs_context_to_binary'
			(_cor6)
		    ( primop 'match_fail'
			  ({'function_clause',_cor6,_cor5,_cor4})
		      -| [{'function_name',{'parse_value_1',3}}] )
	    -| ['compiler_generated'] )
	end
'default_event_cb'/3 =
    %% Line 388
    fun (_cor2,_cor1,_cor0) ->
	_cor0
'default_continuation_cb'/1 =
    %% Line 397
    fun (_cor0) ->
	%% Line 398
	case call 'file':'read'
		 (_cor0, 1024) of
	  %% Line 399
	  <'eof'> when 'true' ->
	      %% Line 400
	      {#{}#,_cor0}
	  %% Line 401
	  <{'ok',FileBin}> when 'true' ->
	      %% Line 402
	      {FileBin,_cor0}
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor1})
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('xmerl_sax_parser')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('xmerl_sax_parser', _cor0)
end