module 'xmerl_sax_old_dom' ['event'/3,
			    'get_dom'/1,
			    'initial_state'/0,
			    'module_info'/0,
			    'module_info'/1]
    attributes []
'initial_state'/0 =
    %% Line 79
    fun () ->
	%% Line 80
	{'xmerl_sax_old_dom_state',[],[],[],[]}
'get_dom'/1 =
    %% Line 88
    fun (_cor0) ->
	case _cor0 of
	  <{'xmerl_sax_old_dom_state',_cor2,_cor3,_cor4,Dom}> when 'true' ->
	      %% Line 89
	      Dom
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'get_dom',1}}] )
	    -| ['compiler_generated'] )
	end
'event'/3 =
    %% Line 97
    fun (_cor2,_cor1,_cor0) ->
	%% Line 98
	apply 'build_dom'/2
	    (_cor2, _cor0)
'build_dom'/2 =
    %% Line 115
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'startDocument',State> when 'true' ->
	      %% Line 116
	      case State of
		<{'xmerl_sax_old_dom_state',_cor105,_cor106,_cor107,_cor108}> when 'true' ->
		    call 'erlang':'setelement'
			(5, State, ['startDocument'])
		( <_cor109> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','xmerl_sax_old_dom_state'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 117
	  <'endDocument',State = %% Line 118
				 {'xmerl_sax_old_dom_state',_cor110,_cor111,_cor112,[Current = {'xmlElement',_cor113,_cor114,_cor115,_cor116,_cor117,_cor118,_cor119,C,_cor120,_cor121,_cor122}|D]}> when 'true' ->
	      %% Line 119
	      case D of
		%% Line 120
		<['startDocument']> when 'true' ->
		    let <_rec3> =
			%% Line 122
			call 'lists':'reverse'
			    (C)
		    in  let <_cor7> =
			    %% Line 122
			    call 'erlang':'setelement'
				(9, Current, _rec3)
			in  let <_rec1> =
				%% Line 121
				[_cor7|%% Line 123
				       []]
			    in  %% Line 121
				call 'erlang':'setelement'
				    (5, State, _rec1)
		%% Line 124
		<[Decl = {'xmlDecl',_cor140,_cor141,_cor142,_cor143}|['startDocument']]> when 'true' ->
		    let <_rec7> =
			%% Line 126
			call 'lists':'reverse'
			    (C)
		    in  let <_cor14> =
			    %% Line 126
			    call 'erlang':'setelement'
				(9, Current, _rec7)
			in  let <_rec5> =
				%% Line 125
				[Decl|[_cor14|%% Line 127
					      []]]
			    in  %% Line 125
				call 'erlang':'setelement'
				    (5, State, _rec5)
		%% Line 128
		<_cor161> when 'true' ->
		    do  %% Line 129
			call 'io':'format'
			    ([126|[112|[10]]], [D|[]])
			%% Line 130
			call 'erlang':'throw'
			    ({'xmerl_sax_old_dom_error',[119|[101|[39|[114|[101|[32|[110|[111|[116|[32|[97|[116|[32|[101|[110|[100|[32|[116|[104|[101|[32|[100|[111|[99|[117|[109|[101|[110|[116|[32|[119|[104|[101|[110|[32|[101|[110|[100|[68|[111|[99|[117|[109|[101|[110|[116|[32|[101|[118|[101|[110|[116|[32|[105|[115|[32|[101|[110|[99|[111|[117|[110|[116|[101|[114|[101|[100|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]})
	      end
	  %% Line 135
	  <{'startElement',Uri,LocalName,QName,Attributes},State = %% Line 136
								   {'xmerl_sax_old_dom_state',T,CN,NS,D}> when 'true' ->
	      let <A> =
		  %% Line 138
		  apply 'parse_attributes'/2
		      (LocalName, Attributes)
	      in  let <Num,NewCN> =
		      %% Line 140
		      case CN of
			%% Line 141
			<[]> when 'true' ->
			    %% Line 142
			    <1,[1]>
			%% Line 143
			<[N|CNs]> when 'true' ->
			    let <_cor20> =
				%% Line 144
				call 'erlang':'+'
				    (N, 1)
			    in  %% Line 144
				<N,[1|[_cor20|CNs]]>
			( <_cor21> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor21})
			  -| ['compiler_generated'] )
		      end
		  in  let <_cor25> =
			  %% Line 148
			  case QName of
			    %% Line 149
			    <{[],_cor162}> when 'true' ->
				[]
			    %% Line 150
			    <QN> when 'true' ->
				QN
			  end
		      in  let <NameAsAtom> =
			      %% Line 152
			      apply 'convert_qname_to_atom'/1
				  (QName)
			  in  let <_rec9> =
				  %% Line 154
				  [{NameAsAtom,Num}|T]
			      in  let <_cor30> =
				      %% Line 159
				      call 'erlang':'list_to_atom'
					  (Uri)
				  in  let <_cor29> =
					  %% Line 163
					  call 'lists':'reverse'
					      (A)
				      in  let <_rec10> =
					      %% Line 156
					      [{'xmlElement',NameAsAtom,%% Line 157
									NameAsAtom,_cor25,%% Line 159
											  {'xmlNamespace',_cor30,%% Line 160
														 NS},%% Line 162
														     T,%% Line 161
														       Num,_cor29,[],[],%% Line 164
																	[46],'undeclared'}|%% Line 165
																			   D]
					  in  %% Line 156
					      {'xmerl_sax_old_dom_state',_rec9,NewCN,NS,_rec10}
	  %% Line 166
	  <{'endElement',_X_Uri,LocalName,QName},State = %% Line 167
							 {'xmerl_sax_old_dom_state',[_cor164|T],%% Line 168
												[_cor165|CN],_cor166,%% Line 169
														     [Current = {'xmlElement',CName,_cor167,_cor168,_cor169,_cor170,_cor171,_cor172,C,_cor173,_cor174,_cor175}|%% Line 170
																											       [Parent = {'xmlElement',_cor176,_cor177,_cor178,_cor179,_cor180,_cor181,_cor182,PC,_cor183,_cor184,_cor185}|D]]}> when 'true' ->
	      %% Line 171
	      case apply 'convert_qname_to_atom'/1
		       (QName) of
		%% Line 172
		<_cor186>
		    when call 'erlang':'=:='
			  (_cor186,
			   CName) ->
		    let <_rec24> =
			%% Line 177
			call 'lists':'reverse'
			    (C)
		    in  let <_cor37> =
			    %% Line 177
			    call 'erlang':'setelement'
				(9, Current, _rec24)
			in  let <_rec22> =
				%% Line 176
				[_cor37|%% Line 179
					PC]
			    in  let <_cor41> =
				    %% Line 176
				    call 'erlang':'setelement'
					(9, Parent, _rec22)
				in  let <_rec16> =
					%% Line 175
					[_cor41|%% Line 180
						D]
				    in  %% Line 175
					{'xmerl_sax_old_dom_state',T,CN,_cor166,_rec16}
		%% Line 181
		<_cor212> when 'true' ->
		    let <_cor47> =
			%% Line 182
			call 'erlang':'++'
			    ([32|[98|[117|[116|[32|[101|[120|[112|[101|[99|[116|[101|[100|[58|[32]]]]]]]]]]]]]]], CName)
		    in  let <_cor48> =
			    %% Line 182
			    call 'erlang':'++'
				(LocalName, _cor47)
			in  let <_cor49> =
				%% Line 182
				call 'erlang':'++'
				    ([71|[111|[116|[32|[101|[110|[100|[32|[111|[102|[32|[101|[108|[101|[109|[101|[110|[116|[58|[32]]]]]]]]]]]]]]]]]]]], _cor48)
			    in  %% Line 182
				call 'erlang':'throw'
				    ({'xmerl_sax_old_dom_error',_cor49})
	      end
	  %% Line 188
	  <{'characters',String},State = %% Line 189
					 {'xmerl_sax_old_dom_state',T,%% Line 190
								      [Num|CN],_cor224,%% Line 191
										       [Current = {'xmlElement',_cor225,_cor226,_cor227,_cor228,_cor229,_cor230,_cor231,C,_cor232,_cor233,_cor234}|D]}> when 'true' ->
	      let <_cor51> =
		  %% Line 192
		  call 'erlang':'+'
		      (Num, 1)
	      in  let <_rec27> =
		      %% Line 192
		      [_cor51|CN]
		  in  let <_rec30> =
			  %% Line 193
			  [{'xmlText',T,Num,[],String,'text'}|%% Line 194
							      C]
		      in  let <_cor56> =
			      %% Line 193
			      call 'erlang':'setelement'
				  (9, Current, _rec30)
			  in  let <_rec28> =
				  %% Line 193
				  [_cor56|%% Line 194
					  D]
			      in  let <_cor59> =
				      %% Line 193
				      call 'erlang':'setelement'
					  (5, State, _rec28)
				  in  %% Line 192
				      call 'erlang':'setelement'
					  (3, _cor59, _rec27)
	  %% Line 195
	  <{'ignorableWhitespace',String},State = %% Line 196
						  {'xmerl_sax_old_dom_state',T,%% Line 197
									       [Num|CN],_cor252,%% Line 198
												[Current = {'xmlElement',_cor253,_cor254,_cor255,_cor256,_cor257,_cor258,_cor259,C,_cor260,_cor261,_cor262}|D]}> when 'true' ->
	      let <_cor61> =
		  %% Line 199
		  call 'erlang':'+'
		      (Num, 1)
	      in  let <_rec32> =
		      %% Line 199
		      [_cor61|CN]
		  in  let <_rec35> =
			  %% Line 200
			  [{'xmlText',%% Line 201
				      T,%% Line 201
					Num,[],String,%% Line 202
						      'text'}|%% Line 203
							      C]
		      in  let <_cor66> =
			      %% Line 200
			      call 'erlang':'setelement'
				  (9, Current, _rec35)
			  in  let <_rec33> =
				  %% Line 200
				  [_cor66|%% Line 203
					  D]
			      in  let <_cor69> =
				      %% Line 200
				      call 'erlang':'setelement'
					  (5, State, _rec33)
				  in  %% Line 199
				      call 'erlang':'setelement'
					  (3, _cor69, _rec32)
	  %% Line 207
	  <{'comment',String},State = %% Line 208
				      {'xmerl_sax_old_dom_state',T,%% Line 209
								   [Num|CN],_cor280,%% Line 210
										    [Current = {'xmlElement',_cor281,_cor282,_cor283,_cor284,_cor285,_cor286,_cor287,C,_cor288,_cor289,_cor290}|D]}> when 'true' ->
	      let <_cor71> =
		  %% Line 211
		  call 'erlang':'+'
		      (Num, 1)
	      in  let <_rec37> =
		      %% Line 211
		      [_cor71|CN]
		  in  let <_rec40> =
			  %% Line 212
			  [{'xmlComment',T,Num,[],String}|C]
		      in  let <_cor76> =
			      %% Line 212
			      call 'erlang':'setelement'
				  (9, Current, _rec40)
			  in  let <_rec38> =
				  %% Line 212
				  [_cor76|D]
			      in  let <_cor79> =
				      %% Line 212
				      call 'erlang':'setelement'
					  (5, State, _rec38)
				  in  %% Line 211
				      call 'erlang':'setelement'
					  (3, _cor79, _rec37)
	  %% Line 216
	  <{'startPrefixMapping',[],_X_Uri},State> when 'true' ->
	      %% Line 217
	      State
	  %% Line 218
	  <{'startPrefixMapping',Prefix,Uri},State = %% Line 219
						     {'xmerl_sax_old_dom_state',_cor308,_cor309,NS,_cor310}> when 'true' ->
	      let <_cor81> =
		  %% Line 220
		  call 'erlang':'list_to_atom'
		      (Uri)
	      in  let <_rec42> =
		      %% Line 220
		      [{Prefix,_cor81}|NS]
		  in  %% Line 220
		      call 'erlang':'setelement'
			  (4, State, _rec42)
	  %% Line 221
	  <{'endPrefixMapping',Prefix},State = %% Line 222
					       {'xmerl_sax_old_dom_state',_cor316,_cor317,[{_cor318,_cor319}|NS],_cor320}>
	      when call 'erlang':'=:='
		    (_cor318,
		     %% Line 222
		     Prefix) ->
	      %% Line 223
	      call 'erlang':'setelement'
		  (4, State, NS)
	  %% Line 227
	  <{'processingInstruction',[120|[109|[108]]],PiData},State = %% Line 228
								      {'xmerl_sax_old_dom_state',_cor326,_cor327,_cor328,D}> when 'true' ->
	      %% Line 229
	      case apply 'find_and_remove_attribute'/3
		       ([118|[101|[114|[115|[105|[111|[110]]]]]]], PiData, []) of
		<{Vsn,PiData1}> when 'true' ->
		    %% Line 230
		    case apply 'find_and_remove_attribute'/3
			     ([101|[110|[99|[111|[100|[105|[110|[103]]]]]]]], PiData1, []) of
		      <{Enc,PiData2}> when 'true' ->
			  %% Line 231
			  case apply 'find_and_remove_attribute'/3
				   ([115|[116|[97|[110|[100|[97|[108|[111|[110|[101]]]]]]]]]], PiData2, 'yes') of
			    <{Standalone,PiData3}> when 'true' ->
				let <_rec45> =
				    %% Line 232
				    [{'xmlDecl',Vsn,Enc,Standalone,PiData3}|D]
				in  %% Line 232
				    call 'erlang':'setelement'
					(5, State, _rec45)
			    ( <_cor89> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor89})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor88> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor88})
			-| ['compiler_generated'] )
		    end
		( <_cor87> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor87})
		  -| ['compiler_generated'] )
	      end
	  %% Line 233
	  <{'processingInstruction',PiTarget,PiData},State = %% Line 234
							     {'xmerl_sax_old_dom_state',_cor334,[Num|CN],_cor335,%% Line 235
														 [Current = {'xmlElement',_cor336,_cor337,_cor338,_cor339,_cor340,_cor341,_cor342,C,_cor343,_cor344,_cor345}|D]}> when 'true' ->
	      let <_cor93> =
		  %% Line 236
		  call 'erlang':'+'
		      (Num, 1)
	      in  let <_rec47> =
		      %% Line 236
		      [_cor93|CN]
		  in  let <_rec50> =
			  %% Line 237
			  [{'xmlPI',PiTarget,Num,PiData}|%% Line 238
							 C]
		      in  let <_cor98> =
			      %% Line 237
			      call 'erlang':'setelement'
				  (9, Current, _rec50)
			  in  let <_rec48> =
				  %% Line 237
				  [_cor98|%% Line 238
					  D]
			      in  let <_cor101> =
				      %% Line 237
				      call 'erlang':'setelement'
					  (5, State, _rec48)
				  in  %% Line 236
				      call 'erlang':'setelement'
					  (3, _cor101, _rec47)
	  %% Line 241
	  <_X_E,State> when 'true' ->
	      %% Line 242
	      State
	end
'parse_attributes'/2 =
    %% Line 251
    fun (_cor1,_cor0) ->
	%% Line 252
	apply 'parse_attributes'/4
	    (_cor1, _cor0, 1, [])
'parse_attributes'/4 =
    %% Line 254
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <_cor13,[],_cor14,Acc> when 'true' ->
	      %% Line 255
	      Acc
	  %% Line 256
	  <ElName,[{_X_Uri,Prefix,LocalName,AttrValue}|As],N,Acc> when 'true' ->
	      let <Name> =
		  %% Line 257
		  apply 'convert_qname_to_atom'/1
		      ({Prefix,LocalName})
	      in  let <_cor6> =
		      %% Line 259
		      case Prefix of
			%% Line 260
			<[]> when 'true' ->
			    []
			%% Line 261
			<P> when 'true' ->
			    {P,LocalName}
		      end
		  in  let <_cor8> =
			  %% Line 263
			  call 'erlang':'+'
			      (N, 1)
		      in  %% Line 263
			  apply 'parse_attributes'/4
			      (ElName, As, _cor8, [{'xmlAttribute',Name,[],_cor6,[],[],%% Line 264
										       N,[],%% Line 266
											    AttrValue,%% Line 267
												      'false'}|%% Line 267
													       Acc])
	  ( <_cor12,_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10,_cor9})
		  -| [{'function_name',{'parse_attributes',4}}] )
	    -| ['compiler_generated'] )
	end
'convert_qname_to_atom'/1 =
    %% Line 275
    fun (_cor0) ->
	case _cor0 of
	  <{[],N}> when 'true' ->
	      %% Line 276
	      call 'erlang':'list_to_atom'
		  (N)
	  %% Line 277
	  <{P,N}> when 'true' ->
	      let <_cor1> =
		  %% Line 278
		  [58|N]
	      in  let <_cor2> =
		      %% Line 278
		      call 'erlang':'++'
			  (P, _cor1)
		  in  %% Line 278
		      call 'erlang':'list_to_atom'
			  (_cor2)
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'convert_qname_to_atom',1}}] )
	    -| ['compiler_generated'] )
	end
'find_and_remove_attribute'/3 =
    %% Line 286
    fun (_cor2,_cor1,_cor0) ->
	%% Line 287
	case call 'lists':'keysearch'
		 (_cor2, 1, _cor1) of
	  %% Line 288
	  <{'value',{_cor8,Value}}>
	      when call 'erlang':'=:='
		    (_cor8,
		     _cor2) ->
	      let <Data2> =
		  %% Line 289
		  call 'lists':'keydelete'
		      (_cor2, 1, _cor1)
	      in  %% Line 290
		  {Value,Data2}
	  %% Line 291
	  <'false'> when 'true' ->
	      %% Line 292
	      {_cor0,_cor1}
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor4})
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('xmerl_sax_old_dom')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('xmerl_sax_old_dom', _cor0)
end