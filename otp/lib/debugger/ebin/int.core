module 'int' ['action_at_break'/3,
	      'all_breaks'/0,
	      'all_breaks'/1,
	      'attach'/2,
	      'attached'/1,
	      'auto_attach'/0,
	      'auto_attach'/1,
	      'auto_attach'/2,
	      'break'/2,
	      'break_in'/3,
	      'clear'/0,
	      'contents'/2,
	      'continue'/1,
	      'continue'/3,
	      'del_break_in'/3,
	      'delete_break'/2,
	      'disable_break'/2,
	      'enable_break'/2,
	      'eval'/3,
	      'file'/1,
	      'finish'/1,
	      'functions'/1,
	      'get_binding'/2,
	      'i'/1,
	      'i'/2,
	      'interpretable'/1,
	      'interpreted'/0,
	      'meta'/2,
	      'meta'/3,
	      'module_info'/0,
	      'module_info'/1,
	      'n'/1,
	      'next'/1,
	      'ni'/1,
	      'ni'/2,
	      'nn'/1,
	      'no_break'/0,
	      'no_break'/1,
	      'snapshot'/0,
	      'stack_trace'/0,
	      'stack_trace'/1,
	      'start'/0,
	      'step'/1,
	      'stop'/0,
	      'subscribe'/0,
	      'test_at_break'/3]
    attributes [%% Line 24
		'type' =
		    %% Line 24
		    [{{'record','file_info'},[{'typed_record_field',{'record_field',25,{'atom',25,'size'}},{'type',25,'union',[{'atom',25,'undefined'}|[{'type',25,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',26,{'atom',26,'type'}},{'type',26,'union',[{'atom',26,'undefined'}|[{'atom',26,'device'}|[{'atom',26,'directory'}|[{'atom',26,'other'}|[{'atom',26,'regular'}|[{'atom',26,'symlink'}]]]]]]}}|[{'typed_record_field',{'record_field',27,{'atom',27,'access'}},{'type',27,'union',[{'atom',27,'undefined'}|[{'atom',27,'read'}|[{'atom',27,'write'}|[{'atom',27,'read_write'}|[{'atom',27,'none'}]]]]]}}|[{'typed_record_field',{'record_field',28,{'atom',28,'atime'}},{'type',28,'union',[{'atom',28,'undefined'}|[{'remote_type',28,[{'atom',28,'file'}|[{'atom',28,'date_time'}|[[]]]]}|[{'type',28,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',32,{'atom',32,'mtime'}},{'type',32,'union',[{'atom',32,'undefined'}|[{'remote_type',32,[{'atom',32,'file'}|[{'atom',32,'date_time'}|[[]]]]}|[{'type',32,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',34,{'atom',34,'ctime'}},{'type',34,'union',[{'atom',34,'undefined'}|[{'remote_type',34,[{'atom',34,'file'}|[{'atom',34,'date_time'}|[[]]]]}|[{'type',34,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',40,{'atom',40,'mode'}},{'type',40,'union',[{'atom',40,'undefined'}|[{'type',40,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',43,{'atom',43,'links'}},{'type',43,'union',[{'atom',43,'undefined'}|[{'type',43,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',46,{'atom',46,'major_device'}},{'type',46,'union',[{'atom',46,'undefined'}|[{'type',46,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',52,{'atom',52,'minor_device'}},{'type',52,'union',[{'atom',52,'undefined'}|[{'type',52,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',53,{'atom',53,'inode'}},{'type',53,'union',[{'atom',53,'undefined'}|[{'type',53,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',54,{'atom',54,'uid'}},{'type',54,'union',[{'atom',54,'undefined'}|[{'type',54,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',55,{'atom',55,'gid'}},{'type',55,'union',[{'atom',55,'undefined'}|[{'type',55,'non_neg_integer',[]}]]}}]]]]]]]]]]]]],[]}],
		%% Line 58
		'type' =
		    %% Line 58
		    [{{'record','file_descriptor'},[{'typed_record_field',{'record_field',59,{'atom',59,'module'}},{'type',59,'union',[{'atom',59,'undefined'}|[{'type',59,'module',[]}]]}}|[{'typed_record_field',{'record_field',60,{'atom',60,'data'}},{'type',60,'union',[{'atom',60,'undefined'}|[{'type',60,'term',[]}]]}}]],[]}]]
'i'/1 =
    %% Line 100
    fun (_cor0) ->
	apply 'i2'/3
	    (_cor0, 'local', 'ok')
'i'/2 =
    %% Line 101
    fun (_cor1,_cor0) ->
	apply 'i2'/3
	    (_cor1, 'local', 'ok')
'ni'/1 =
    %% Line 102
    fun (_cor0) ->
	apply 'i2'/3
	    (_cor0, 'distributed', 'ok')
'ni'/2 =
    %% Line 103
    fun (_cor1,_cor0) ->
	apply 'i2'/3
	    (_cor1, 'distributed', 'ok')
'i2'/3 =
    %% Line 105
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[AbsMod|AbsMods],Dist,Acc>
	      when let <_cor3> =
		    %% Line 106
		    call 'erlang':'is_atom'
			(AbsMod)
		in  let <_cor4> =
			%% Line 106
			call 'erlang':'is_list'
			    (AbsMod)
		    in  let <_cor5> =
			    %% Line 106
			    call 'erlang':'is_tuple'
				(AbsMod)
			in  let <_cor6> =
				%% Line 106
				call 'erlang':'or'
				    (_cor4, _cor5)
			    in  %% Line 106
				call 'erlang':'or'
				    (_cor3, _cor6) ->
	      let <Res> =
		  %% Line 107
		  apply 'int_mod'/2
		      (AbsMod, Dist)
	      in  %% Line 108
		  case Acc of
		    %% Line 109
		    <'error'> when 'true' ->
			%% Line 110
			apply 'i2'/3
			    (AbsMods, Dist, Acc)
		    %% Line 111
		    <_cor16> when 'true' ->
			%% Line 112
			apply 'i2'/3
			    (AbsMods, Dist, Res)
		  end
	  %% Line 114
	  <[],_X_Dist,Acc> when 'true' ->
	      %% Line 115
	      Acc
	  %% Line 116
	  <AbsMod,Dist,_X_Acc>
	      when let <_cor9> =
		    call 'erlang':'is_atom'
			(AbsMod)
		in  let <_cor10> =
			call 'erlang':'is_list'
			    (AbsMod)
		    in  let <_cor11> =
			    call 'erlang':'is_tuple'
				(AbsMod)
			in  let <_cor12> =
				call 'erlang':'or'
				    (_cor10, _cor11)
			    in  call 'erlang':'or'
				    (_cor9, _cor12) ->
	      %% Line 117
	      apply 'int_mod'/2
		  (AbsMod, Dist)
	  ( <_cor15,_cor14,_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14,_cor13})
		  -| [{'function_name',{'i2',3}}] )
	    -| ['compiler_generated'] )
	end
'n'/1 =
    %% Line 123
    fun (_cor0) ->
	apply 'n2'/2
	    (_cor0, 'local')
'nn'/1 =
    %% Line 124
    fun (_cor0) ->
	apply 'n2'/2
	    (_cor0, 'distributed')
'n2'/2 =
    %% Line 126
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[AbsMod|AbsMods],Dist>
	      when let <_cor2> =
		    call 'erlang':'is_atom'
			(AbsMod)
		in  let <_cor3> =
			call 'erlang':'is_list'
			    (AbsMod)
		    in  call 'erlang':'or'
			    (_cor2, _cor3) ->
	      do  %% Line 127
		  apply 'del_mod'/2
		      (AbsMod, Dist)
		  %% Line 128
		  apply 'n2'/2
		      (AbsMods, Dist)
	  %% Line 129
	  <[AbsMod|[]],Dist>
	      when let <_cor4> =
		    call 'erlang':'is_atom'
			(AbsMod)
		in  let <_cor5> =
			call 'erlang':'is_list'
			    (AbsMod)
		    in  call 'erlang':'or'
			    (_cor4, _cor5) ->
	      %% Line 130
	      apply 'del_mod'/2
		  (AbsMod, Dist)
	  %% Line 131
	  <[],_X_Dist> when 'true' ->
	      %% Line 132
	      'ok'
	  %% Line 133
	  <AbsMod,Dist>
	      when let <_cor6> =
		    call 'erlang':'is_atom'
			(AbsMod)
		in  let <_cor7> =
			call 'erlang':'is_list'
			    (AbsMod)
		    in  call 'erlang':'or'
			    (_cor6, _cor7) ->
	      %% Line 134
	      apply 'del_mod'/2
		  (AbsMod, Dist)
	  ( <_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8})
		  -| [{'function_name',{'n2',2}}] )
	    -| ['compiler_generated'] )
	end
'interpreted'/0 =
    %% Line 139
    fun () ->
	%% Line 140
	call 'dbg_iserver':'safe_call'
	    ('all_interpreted')
'file'/1 =
    %% Line 147
    fun (_cor0) ->
	case _cor0 of
	  <Mod>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      %% Line 148
	      call 'dbg_iserver':'safe_call'
		  ({'file',Mod})
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'file',1}}] )
	    -| ['compiler_generated'] )
	end
'interpretable'/1 =
    %% Line 155
    fun (_cor0) ->
	%% Line 156
	case apply 'check'/1
		 (_cor0) of
	  %% Line 157
	  <{'ok',_X_Res}> when 'true' ->
	      'true'
	  %% Line 158
	  <Error> when 'true' ->
	      Error
	end
'auto_attach'/0 =
    %% Line 172
    fun () ->
	%% Line 173
	call 'dbg_iserver':'safe_call'
	    ('get_auto_attach')
'auto_attach'/1 =
    %% Line 175
    fun (_cor0) ->
	case _cor0 of
	  <'false'> when 'true' ->
	      %% Line 176
	      call 'dbg_iserver':'safe_cast'
		  ({'set_auto_attach','false'})
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'auto_attach',1}}] )
	    -| ['compiler_generated'] )
	end
'auto_attach'/2 =
    %% Line 178
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],_X_Function> when 'true' ->
	      %% Line 179
	      apply 'auto_attach'/1
		  ('false')
	  %% Line 180
	  <Flags,{Mod,Func}> when 'true' ->
	      %% Line 181
	      apply 'auto_attach'/2
		  (Flags, {Mod,Func,[]})
	  %% Line 182
	  <Flags,{Mod,Func,Args}>
	      when try
		    let <_cor2> =
			call 'erlang':'is_atom'
			    (Mod)
		    in  let <_cor3> =
			    call 'erlang':'is_atom'
				(Func)
			in  let <_cor4> =
				call 'erlang':'is_list'
				    (Args)
			    in  let <_cor5> =
				    call 'erlang':'and'
					(_cor3, _cor4)
				in  call 'erlang':'and'
					(_cor2, _cor5)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 183
		  apply 'check_flags'/1
		      (Flags)
		  %% Line 184
		  call 'dbg_iserver':'safe_cast'
		      ({'set_auto_attach',Flags,{Mod,Func,Args}})
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6})
		  -| [{'function_name',{'auto_attach',2}}] )
	    -| ['compiler_generated'] )
	end
'check_flags'/1 =
    %% Line 186
    fun (_cor0) ->
	case _cor0 of
	  <['init'|Flags]> when 'true' ->
	      apply 'check_flags'/1
		  (Flags)
	  %% Line 187
	  <['break'|Flags]> when 'true' ->
	      apply 'check_flags'/1
		  (Flags)
	  %% Line 188
	  <['exit'|Flags]> when 'true' ->
	      apply 'check_flags'/1
		  (Flags)
	  %% Line 189
	  <[]> when 'true' ->
	      'true'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'check_flags',1}}] )
	    -| ['compiler_generated'] )
	end
'stack_trace'/0 =
    %% Line 196
    fun () ->
	%% Line 197
	call 'dbg_iserver':'safe_call'
	    ('get_stack_trace')
'stack_trace'/1 =
    %% Line 199
    fun (_cor0) ->
	case _cor0 of
	  <'true'> when 'true' ->
	      %% Line 200
	      apply 'stack_trace'/1
		  ('all')
	  %% Line 201
	  <Flag> when 'true' ->
	      do  %% Line 202
		  apply 'check_flag'/1
		      (Flag)
		  %% Line 203
		  call 'dbg_iserver':'safe_cast'
		      ({'set_stack_trace',Flag})
	end
'check_flag'/1 =
    %% Line 205
    fun (_cor0) ->
	case _cor0 of
	  <'all'> when 'true' ->
	      'true'
	  %% Line 206
	  <'no_tail'> when 'true' ->
	      'true'
	  %% Line 207
	  <'false'> when 'true' ->
	      'true'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'check_flag',1}}] )
	    -| ['compiler_generated'] )
	end
'break'/2 =
    %% Line 237
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Mod,Line>
	      when let <_cor2> =
		    call 'erlang':'is_atom'
			(Mod)
		in  let <_cor3> =
			call 'erlang':'is_integer'
			    (Line)
		    in  call 'erlang':'and'
			    (_cor2, _cor3) ->
	      %% Line 238
	      call 'dbg_iserver':'safe_call'
		  ({'new_break',{Mod,Line},%% Line 239
					   ['active'|['enable'|['null'|['null']]]]})
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'break',2}}] )
	    -| ['compiler_generated'] )
	end
'delete_break'/2 =
    %% Line 241
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Mod,Line>
	      when let <_cor2> =
		    call 'erlang':'is_atom'
			(Mod)
		in  let <_cor3> =
			call 'erlang':'is_integer'
			    (Line)
		    in  call 'erlang':'and'
			    (_cor2, _cor3) ->
	      %% Line 242
	      call 'dbg_iserver':'safe_cast'
		  ({'delete_break',{Mod,Line}})
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'delete_break',2}}] )
	    -| ['compiler_generated'] )
	end
'break_in'/3 =
    %% Line 244
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Mod,Func,Arity>
	      when try
		    let <_cor3> =
			call 'erlang':'is_atom'
			    (Mod)
		    in  let <_cor4> =
			    call 'erlang':'is_atom'
				(Func)
			in  let <_cor5> =
				call 'erlang':'is_integer'
				    (Arity)
			    in  let <_cor6> =
				    call 'erlang':'and'
					(_cor4, _cor5)
				in  call 'erlang':'and'
					(_cor3, _cor6)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 245
	      case call 'dbg_iserver':'safe_call'
		       ({'is_interpreted',Mod,Func,Arity}) of
		%% Line 246
		<{'true',Clauses}> when 'true' ->
		    let <Lines> =
			%% Line 247
			apply 'first_lines'/1
			    (Clauses)
		    in  let <_cor10> =
			    %% Line 248
			    ( fun (_cor8) ->
				  apply 'break'/2
				      (Mod, _cor8)
			      -| [{'id',{0,0,'-break_in/3-fun-0-'}}] )
			in  %% Line 248
			    call 'lists':'foreach'
				(_cor10, Lines)
		%% Line 249
		<'false'> when 'true' ->
		    %% Line 250
		    {'error','function_not_found'}
		( <_cor11> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor11})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor14,_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12})
		  -| [{'function_name',{'break_in',3}}] )
	    -| ['compiler_generated'] )
	end
'del_break_in'/3 =
    %% Line 253
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Mod,Func,Arity>
	      when try
		    let <_cor3> =
			call 'erlang':'is_atom'
			    (Mod)
		    in  let <_cor4> =
			    call 'erlang':'is_atom'
				(Func)
			in  let <_cor5> =
				call 'erlang':'is_integer'
				    (Arity)
			    in  let <_cor6> =
				    call 'erlang':'and'
					(_cor4, _cor5)
				in  call 'erlang':'and'
					(_cor3, _cor6)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 254
	      case call 'dbg_iserver':'safe_call'
		       ({'is_interpreted',Mod,Func,Arity}) of
		%% Line 255
		<{'true',Clauses}> when 'true' ->
		    let <Lines> =
			%% Line 256
			apply 'first_lines'/1
			    (Clauses)
		    in  let <_cor10> =
			    %% Line 257
			    ( fun (_cor8) ->
				  apply 'delete_break'/2
				      (Mod, _cor8)
			      -| [{'id',{0,0,'-del_break_in/3-fun-0-'}}] )
			in  %% Line 257
			    call 'lists':'foreach'
				(_cor10, %% Line 258
					 Lines)
		%% Line 259
		<'false'> when 'true' ->
		    %% Line 260
		    {'error','function_not_found'}
		( <_cor11> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor11})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor14,_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12})
		  -| [{'function_name',{'del_break_in',3}}] )
	    -| ['compiler_generated'] )
	end
'first_lines'/1 =
    %% Line 263
    fun (_cor0) ->
	%% Line 264
	( letrec
	      'lc$^0'/1 =
		  fun (_cor3) ->
		      case _cor3 of
			<[Clause|_cor2]> when 'true' ->
			    let <_cor4> =
				apply 'first_line'/1
				    (Clause)
			    in  let <_cor5> =
				    apply 'lc$^0'/1
					(_cor2)
				in  ( [_cor4|_cor5]
				      -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_cor3> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor3})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  apply 'lc$^0'/1
		  (_cor0)
	  -| ['list_comprehension'] )
'first_line'/1 =
    %% Line 266
    fun (_cor0) ->
	case _cor0 of
	  <{'clause',_X_L,_X_Vars,_cor2,Exprs}> when 'true' ->
	      %% Line 267
	      apply 'first_line'/1
		  (Exprs)
	  %% Line 269
	  <[{'call_remote',0,'ct_line','line',_X_As}|Exprs]> when 'true' ->
	      %% Line 270
	      apply 'first_line'/1
		  (Exprs)
	  %% Line 271
	  <[Expr|_X_Exprs]> when 'true' ->
	      %% Line 272
	      call 'erlang':'element'
		  (2, Expr)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'first_line',1}}] )
	    -| ['compiler_generated'] )
	end
'no_break'/0 =
    %% Line 274
    fun () ->
	%% Line 275
	call 'dbg_iserver':'safe_cast'
	    ('no_break')
'no_break'/1 =
    %% Line 277
    fun (_cor0) ->
	case _cor0 of
	  <Mod>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      %% Line 278
	      call 'dbg_iserver':'safe_cast'
		  ({'no_break',Mod})
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'no_break',1}}] )
	    -| ['compiler_generated'] )
	end
'disable_break'/2 =
    %% Line 280
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Mod,Line>
	      when let <_cor2> =
		    call 'erlang':'is_atom'
			(Mod)
		in  let <_cor3> =
			call 'erlang':'is_integer'
			    (Line)
		    in  call 'erlang':'and'
			    (_cor2, _cor3) ->
	      %% Line 281
	      call 'dbg_iserver':'safe_cast'
		  ({'break_option',{Mod,Line},'status','inactive'})
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'disable_break',2}}] )
	    -| ['compiler_generated'] )
	end
'enable_break'/2 =
    %% Line 283
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Mod,Line>
	      when let <_cor2> =
		    call 'erlang':'is_atom'
			(Mod)
		in  let <_cor3> =
			call 'erlang':'is_integer'
			    (Line)
		    in  call 'erlang':'and'
			    (_cor2, _cor3) ->
	      %% Line 284
	      call 'dbg_iserver':'safe_cast'
		  ({'break_option',{Mod,Line},'status','active'})
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'enable_break',2}}] )
	    -| ['compiler_generated'] )
	end
'action_at_break'/3 =
    %% Line 286
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Mod,Line,Action>
	      when let <_cor3> =
		    call 'erlang':'is_atom'
			(Mod)
		in  let <_cor4> =
			call 'erlang':'is_integer'
			    (Line)
		    in  call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 287
		  apply 'check_action'/1
		      (Action)
		  %% Line 288
		  call 'dbg_iserver':'safe_cast'
		      ({'break_option',{Mod,Line},'action',Action})
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'action_at_break',3}}] )
	    -| ['compiler_generated'] )
	end
'check_action'/1 =
    %% Line 290
    fun (_cor0) ->
	case _cor0 of
	  <'enable'> when 'true' ->
	      'true'
	  %% Line 291
	  <'disable'> when 'true' ->
	      'true'
	  %% Line 292
	  <'delete'> when 'true' ->
	      'true'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'check_action',1}}] )
	    -| ['compiler_generated'] )
	end
'test_at_break'/3 =
    %% Line 294
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Mod,Line,Function>
	      when let <_cor3> =
		    call 'erlang':'is_atom'
			(Mod)
		in  let <_cor4> =
			call 'erlang':'is_integer'
			    (Line)
		    in  call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 295
		  apply 'check_function'/1
		      (Function)
		  %% Line 296
		  call 'dbg_iserver':'safe_cast'
		      ({'break_option',{Mod,Line},'condition',Function})
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'test_at_break',3}}] )
	    -| ['compiler_generated'] )
	end
'check_function'/1 =
    %% Line 298
    fun (_cor0) ->
	case _cor0 of
	  <{Mod,Func}>
	      when let <_cor1> =
		    call 'erlang':'is_atom'
			(Mod)
		in  let <_cor2> =
			call 'erlang':'is_atom'
			    (Func)
		    in  call 'erlang':'and'
			    (_cor1, _cor2) ->
	      'true'
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'check_function',1}}] )
	    -| ['compiler_generated'] )
	end
'get_binding'/2 =
    %% Line 300
    fun (_cor1,_cor0) ->
	%% Line 301
	call 'dbg_icmd':'get_binding'
	    (_cor1, _cor0)
'all_breaks'/0 =
    %% Line 303
    fun () ->
	%% Line 304
	call 'dbg_iserver':'safe_call'
	    ('all_breaks')
'all_breaks'/1 =
    %% Line 305
    fun (_cor0) ->
	case _cor0 of
	  <Mod>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      %% Line 306
	      call 'dbg_iserver':'safe_call'
		  ({'all_breaks',Mod})
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'all_breaks',1}}] )
	    -| ['compiler_generated'] )
	end
'snapshot'/0 =
    %% Line 318
    fun () ->
	%% Line 319
	call 'dbg_iserver':'safe_call'
	    ('snapshot')
'clear'/0 =
    %% Line 324
    fun () ->
	%% Line 325
	call 'dbg_iserver':'safe_cast'
	    ('clear')
'continue'/1 =
    %% Line 331
    fun (_cor0) ->
	case _cor0 of
	  <Pid>
	      when call 'erlang':'is_pid'
		    (_cor0) ->
	      %% Line 332
	      case call 'dbg_iserver':'safe_call'
		       ({'get_meta',Pid}) of
		%% Line 333
		<{'ok',Meta}>
		    when call 'erlang':'is_pid'
			  (Meta) ->
		    do  %% Line 334
			call 'dbg_icmd':'continue'
			    (Meta)
			%% Line 335
			'ok'
		%% Line 336
		<Error> when 'true' ->
		    %% Line 337
		    Error
	      end
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'continue',1}}] )
	    -| ['compiler_generated'] )
	end
'continue'/3 =
    %% Line 340
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <X,Y,Z>
	      when try
		    let <_cor3> =
			call 'erlang':'is_integer'
			    (X)
		    in  let <_cor4> =
			    call 'erlang':'is_integer'
				(Y)
			in  let <_cor5> =
				call 'erlang':'is_integer'
				    (Z)
			    in  let <_cor6> =
				    call 'erlang':'and'
					(_cor4, _cor5)
				in  call 'erlang':'and'
					(_cor3, _cor6)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor7> =
		  %% Line 341
		  call 'c':'pid'
		      (X, Y, Z)
	      in  %% Line 341
		  apply 'continue'/1
		      (_cor7)
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'continue',3}}] )
	    -| ['compiler_generated'] )
	end
'start'/0 =
    %% Line 353
    fun () ->
	call 'dbg_iserver':'start'
	    ()
'stop'/0 =
    %% Line 354
    fun () ->
	let <_cor4> =
	    %% Line 356
	    ( fun (_cor2) ->
		  let <_cor1> =
		      %% Line 358
		      ( fun () ->
			    %% Line 359
			    call 'erts_debug':'breakpoint'
				({_cor2,'_','_'}, 'false')
			-| [{'id',{0,0,'-stop/0-fun-0-'}}] )
		  in  %% Line 357
		      apply 'everywhere'/2
			  ('distributed', _cor1)
	      -| [{'id',{0,0,'-stop/0-fun-1-'}}] )
	in  let <_cor0> =
		%% Line 362
		apply 'interpreted'/0
		    ()
	    in  do  %% Line 355
		    call 'lists':'foreach'
			(_cor4, _cor0)
		    %% Line 363
		    call 'dbg_iserver':'stop'
			()
'subscribe'/0 =
    %% Line 381
    fun () ->
	let <_cor0> =
	    call 'erlang':'self'
		()
	in  call 'dbg_iserver':'cast'
		({'subscribe',_cor0})
'attach'/2 =
    %% Line 390
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Pid,{Mod,Func}> when 'true' ->
	      %% Line 391
	      apply 'attach'/2
		  (Pid, {Mod,Func,[]})
	  %% Line 392
	  <Pid,Function> when 'true' ->
	      %% Line 393
	      call 'dbg_iserver':'cast'
		  ({'attach',Pid,Function})
	end
'step'/1 =
    %% Line 401
    fun (_cor0) ->
	%% Line 402
	case call 'dbg_iserver':'call'
		 ({'get_meta',_cor0}) of
	  <{'ok',Meta}> when 'true' ->
	      %% Line 403
	      call 'dbg_icmd':'step'
		  (Meta)
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'next'/1 =
    %% Line 404
    fun (_cor0) ->
	%% Line 405
	case call 'dbg_iserver':'call'
		 ({'get_meta',_cor0}) of
	  <{'ok',Meta}> when 'true' ->
	      %% Line 406
	      call 'dbg_icmd':'next'
		  (Meta)
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'finish'/1 =
    %% Line 407
    fun (_cor0) ->
	%% Line 408
	case call 'dbg_iserver':'call'
		 ({'get_meta',_cor0}) of
	  <{'ok',Meta}> when 'true' ->
	      %% Line 409
	      call 'dbg_icmd':'finish'
		  (Meta)
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'attached'/1 =
    %% Line 423
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 424
	    call 'erlang':'self'
		()
	in  %% Line 424
	    call 'dbg_iserver':'call'
		({'attached',_cor1,_cor0})
'meta'/2 =
    %% Line 440
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Meta,'step'> when 'true' ->
	      call 'dbg_icmd':'step'
		  (Meta)
	  %% Line 441
	  <Meta,'next'> when 'true' ->
	      call 'dbg_icmd':'next'
		  (Meta)
	  %% Line 442
	  <Meta,'continue'> when 'true' ->
	      call 'dbg_icmd':'continue'
		  (Meta)
	  %% Line 443
	  <Meta,'finish'> when 'true' ->
	      call 'dbg_icmd':'finish'
		  (Meta)
	  %% Line 444
	  <Meta,'skip'> when 'true' ->
	      call 'dbg_icmd':'skip'
		  (Meta)
	  %% Line 445
	  <Meta,'timeout'> when 'true' ->
	      call 'dbg_icmd':'timeout'
		  (Meta)
	  %% Line 446
	  <Meta,'stop'> when 'true' ->
	      call 'dbg_icmd':'stop'
		  (Meta)
	  %% Line 447
	  <Meta,'messages'> when 'true' ->
	      call 'dbg_icmd':'get'
		  (Meta, 'messages', 'null')
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'meta',2}}] )
	    -| ['compiler_generated'] )
	end
'meta'/3 =
    %% Line 449
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Meta,'trace',Trace> when 'true' ->
	      call 'dbg_icmd':'set'
		  (Meta, 'trace', Trace)
	  %% Line 450
	  <Meta,'stack_trace',Flag> when 'true' ->
	      call 'dbg_icmd':'set'
		  (Meta, 'stack_trace', Flag)
	  %% Line 451
	  <Meta,'bindings',Stack> when 'true' ->
	      call 'dbg_icmd':'get'
		  (Meta, 'bindings', Stack)
	  %% Line 452
	  <Meta,'stack_frame',Arg> when 'true' ->
	      call 'dbg_icmd':'get'
		  (Meta, 'stack_frame', Arg)
	  %% Line 453
	  <Meta,'backtrace',N> when 'true' ->
	      call 'dbg_icmd':'get'
		  (Meta, 'backtrace', N)
	  %% Line 454
	  <Meta,'eval',Arg> when 'true' ->
	      call 'dbg_icmd':'eval'
		  (Meta, Arg)
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'meta',3}}] )
	    -| ['compiler_generated'] )
	end
'contents'/2 =
    %% Line 462
    fun (_cor1,_cor0) ->
	%% Line 463
	case call 'dbg_iserver':'call'
		 ({'contents',_cor1,_cor0}) of
	  <{'ok',Bin}> when 'true' ->
	      %% Line 464
	      call 'erlang':'binary_to_list'
		  (Bin)
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'functions'/1 =
    %% Line 471
    fun (_cor0) ->
	%% Line 472
	( letrec
	      'lc$^0'/1 =
		  fun (_cor4) ->
		      case _cor4 of
			<[F|_cor2]> when 'true' ->
			    ( case apply 'functions_1'/1
				       (F) of
				<'true'> when 'true' ->
				    let <_cor5> =
					apply 'lc$^0'/1
					    (_cor2)
				    in  ( [F|_cor5]
					  -| ['compiler_generated'] )
				( <'false'> when 'true' ->
				      apply 'lc$^0'/1
					  (_cor2)
				  -| ['compiler_generated'] )
				( <_cor6> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor6})
				  -| ['compiler_generated'] )
			      end
			      -| ['list_comprehension'] )
			<[]> when 'true' ->
			    []
			( <_cor4> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor4})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  let <_cor3> =
		  call 'dbg_iserver':'call'
		      ({'functions',_cor0})
	      in  apply 'lc$^0'/1
		      (_cor3)
	  -| ['list_comprehension'] )
'functions_1'/1 =
    %% Line 474
    fun (_cor0) ->
	case _cor0 of
	  <['module_info'|[_X_Arity|[]]]> when 'true' ->
	      'false'
	  %% Line 475
	  <_X_Func> when 'true' ->
	      'true'
	end
'eval'/3 =
    %% Line 482
    fun (_cor2,_cor1,_cor0) ->
	%% Line 483
	call 'dbg_debugged':'eval'
	    (_cor2, _cor1, _cor0)
'int_mod'/2 =
    %% Line 492
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{Mod,Src,Beam,BeamBin},Dist>
	      when %% Line 493
		try
		    let <_cor2> =
			call 'erlang':'is_atom'
			    (Mod)
		    in  let <_cor3> =
			    call 'erlang':'is_list'
				(Src)
			in  let <_cor4> =
				call 'erlang':'is_list'
				    (Beam)
			    in  let <_cor5> =
				    call 'erlang':'is_binary'
					(BeamBin)
				in  let <_cor6> =
					call 'erlang':'and'
					    (_cor4, _cor5)
				    in  let <_cor7> =
					    call 'erlang':'and'
						(_cor3, _cor6)
					in  call 'erlang':'and'
						(_cor2, _cor7)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 494
	      try
		  %% Line 495
		  case apply 'is_file'/1
			   (Src) of
		    %% Line 496
		    <'true'> when 'true' ->
			do  %% Line 497
			    apply 'check_application'/1
				(Src)
			    %% Line 498
			    case apply 'check_beam'/1
				     (BeamBin) of
			      %% Line 499
			      <{'ok',Exp,Abst,_X_BeamBin}> when 'true' ->
				  %% Line 500
				  apply 'load'/2
				      ({Mod,Src,Beam,BeamBin,Exp,Abst}, Dist)
			      %% Line 501
			      <'error'> when 'true' ->
				  %% Line 502
				  'error'
			      ( <_cor8> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor8})
				-| ['compiler_generated'] )
			    end
		    %% Line 504
		    <'false'> when 'true' ->
			%% Line 505
			'error'
		    ( <_cor9> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor9})
		      -| ['compiler_generated'] )
		  end
	      of <_cor10> ->
		  _cor10
	      catch <_cor13,_cor12,_cor11> ->
		  case <_cor13,_cor12,_cor11> of
		    %% Line 508
		    <'throw',Reason,_cor19> when 'true' ->
			%% Line 509
			Reason
		    ( <_cor13,_cor12,_cor11> when 'true' ->
			  primop 'raise'
			      (_cor11, _cor12)
		      -| ['compiler_generated'] )
		  end
	  %% Line 511
	  <AbsMod,Dist>
	      when let <_cor14> =
		    call 'erlang':'is_atom'
			(AbsMod)
		in  let <_cor15> =
			call 'erlang':'is_list'
			    (AbsMod)
		    in  call 'erlang':'or'
			    (_cor14, _cor15) ->
	      %% Line 512
	      case apply 'check'/1
		       (AbsMod) of
		%% Line 513
		<{'ok',Res}> when 'true' ->
		    %% Line 514
		    apply 'load'/2
			(Res, Dist)
		%% Line 515
		<{'error',{'app',App}}> when 'true' ->
		    do  %% Line 516
			call 'io':'format'
			    ([42|[42|[32|[67|[97|[110|[110|[111|[116|[32|[105|[110|[116|[101|[114|[112|[114|[101|[116|[32|[126|[112|[32|[109|[111|[100|[117|[108|[101|[58|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 517
																												      [App|[AbsMod|[]]])
			%% Line 518
			'error'
		%% Line 519
		<_X_Error> when 'true' ->
		    do  %% Line 520
			call 'io':'format'
			    ([42|[42|[32|[73|[110|[118|[97|[108|[105|[100|[32|[98|[101|[97|[109|[32|[102|[105|[108|[101|[32|[111|[114|[32|[110|[111|[32|[97|[98|[115|[116|[114|[97|[99|[116|[32|[99|[111|[100|[101|[58|[32|[126|[116|[112|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 521
																																			     [AbsMod|[]])
			%% Line 522
			'error'
	      end
	  ( <_cor18,_cor17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor18,_cor17})
		  -| [{'function_name',{'int_mod',2}}] )
	    -| ['compiler_generated'] )
	end
'check'/1 =
    %% Line 525
    fun (_cor0) ->
	case _cor0 of
	  <Mod>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      catch
		  apply 'check_module'/1
		      (Mod)
	  %% Line 526
	  <File>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      catch
		  apply 'check_file'/1
		      (File)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'check',1}}] )
	    -| ['compiler_generated'] )
	end
'load'/2 =
    %% Line 528
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{Mod,Src,Beam,BeamBin,Exp,Abst},Dist> when 'true' ->
	      let <_cor3> =
		  %% Line 530
		  ( fun () ->
			do  %% Line 531
			    call 'code':'purge'
				(Mod)
			    do  %% Line 532
				call 'erts_debug':'breakpoint'
				    ({Mod,'_','_'}, 'false')
				let <_cor14> =
				    %% Line 533
				    call 'code':'load_binary'
					(Mod, Beam, BeamBin)
				in  %% Line 533
				    case _cor14 of
				      <{'module',_cor15}>
					  when call 'erlang':'=:='
						(_cor15,
						 Mod) ->
					  ( _cor14
					    -| ['compiler_generated'] )
				      ( <_cor2> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_cor2})
					-| ['compiler_generated'] )
				    end
		    -| [{'id',{0,0,'-load/2-fun-0-'}}] )
	      in  do  %% Line 529
		      apply 'everywhere'/2
			  (Dist, _cor3)
		      let <_cor4> =
			  %% Line 535
			  call 'filename':'absname'
			      (Src)
		      in  %% Line 535
			  case call 'erl_prim_loader':'get_file'
				   (_cor4) of
			    %% Line 536
			    <{'ok',SrcBin,_cor16}> when 'true' ->
				let <MD5> =
				    %% Line 537
				    call 'code':'module_md5'
					(BeamBin)
				in  let <Bin> =
					%% Line 538
					call 'erlang':'term_to_binary'
					    ({'interpreter_module',Exp,Abst,SrcBin,MD5})
				    in  %% Line 539
					case call 'dbg_iserver':'safe_call'
						 ({'load',Mod,Src,Bin}) of
					  <{'module',_cor17}>
					      when call 'erlang':'=:='
						    (_cor17,
						     Mod) ->
					      let <_cor10> =
						  %% Line 541
						  ( fun () ->
							let <_cor8> =
							    %% Line 542
							    call 'erts_debug':'breakpoint'
								({Mod,'_','_'}, 'true')
							in  let <_cor18> =
								%% Line 542
								call 'erlang':'>'
								    (_cor8, 0)
							    in  %% Line 542
								case _cor18 of
								  <'true'> when 'true' ->
								      ( _cor18
									-| ['compiler_generated'] )
								  ( <_cor9> when 'true' ->
									primop 'match_fail'
									    ({'badmatch',_cor9})
								    -| ['compiler_generated'] )
								end
						    -| [{'id',{0,0,'-load/2-fun-1-'}}] )
					      in  do  %% Line 540
						      apply 'everywhere'/2
							  (Dist, _cor10)
						      %% Line 544
						      {'module',Mod}
					  ( <_cor7> when 'true' ->
						primop 'match_fail'
						    ({'badmatch',_cor7})
					    -| ['compiler_generated'] )
					end
			    %% Line 545
			    <'error'> when 'true' ->
				%% Line 546
				'error'
			    ( <_cor11> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor11})
			      -| ['compiler_generated'] )
			  end
	  ( <_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12})
		  -| [{'function_name',{'load',2}}] )
	    -| ['compiler_generated'] )
	end
'check_module'/1 =
    %% Line 549
    fun (_cor0) ->
	%% Line 550
	case call 'code':'which'
		 (_cor0) of
	  %% Line 551
	  <Beam>
	      when call 'erlang':'is_list'
		    (Beam) ->
	      %% Line 552
	      case apply 'find_src'/1
		       (Beam) of
		%% Line 553
		<Src>
		    when call 'erlang':'is_list'
			  (Src) ->
		    do  %% Line 554
			apply 'check_application'/1
			    (Src)
			%% Line 555
			case apply 'check_beam'/1
				 (Beam) of
			  %% Line 556
			  <{'ok',Exp,Abst,BeamBin}> when 'true' ->
			      %% Line 557
			      {'ok',{_cor0,Src,Beam,BeamBin,Exp,Abst}}
			  %% Line 558
			  <'error'> when 'true' ->
			      %% Line 559
			      {'error','no_debug_info'}
			  ( <_cor1> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor1})
			    -| ['compiler_generated'] )
			end
		%% Line 561
		<'error'> when 'true' ->
		    %% Line 562
		    {'error','no_src'}
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 564
	  <_cor5> when 'true' ->
	      %% Line 565
	      {'error','badarg'}
	end
'check_file'/1 =
    %% Line 568
    fun (_cor0) ->
	let <_cor4> =
	    %% Line 570
	    case apply 'is_file'/1
		     (_cor0) of
	      %% Line 571
	      <'true'> when 'true' ->
		  _cor0
	      %% Line 573
	      <'false'> when 'true' ->
		  let <Name> =
		      %% Line 574
		      call 'erlang':'++'
			  (_cor0, [46|[101|[114|[108]]]])
		  in  %% Line 575
		      case apply 'is_file'/1
			       (Name) of
			%% Line 576
			<'true'> when 'true' ->
			    Name
			%% Line 577
			<'false'> when 'true' ->
			    'error'
			( <_cor2> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor2})
			  -| ['compiler_generated'] )
		      end
	      ( <_cor3> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor3})
		-| ['compiler_generated'] )
	    end
	in  %% Line 580
	    case <> of
	      %% Line 581
	      <>
		  when call 'erlang':'is_list'
			(_cor4) ->
		  do  %% Line 582
		      apply 'check_application'/1
			  (_cor4)
		      let <Mod> =
			  %% Line 583
			  apply 'scan_module_name'/1
			      (_cor4)
		      in  %% Line 584
			  case apply 'find_beam'/2
				   (Mod, _cor4) of
			    %% Line 585
			    <Beam>
				when call 'erlang':'is_list'
				      (Beam) ->
				%% Line 586
				case apply 'check_beam'/1
					 (Beam) of
				  %% Line 587
				  <{'ok',Exp,Abst,BeamBin}> when 'true' ->
				      %% Line 588
				      {'ok',{Mod,_cor4,Beam,BeamBin,Exp,Abst}}
				  %% Line 589
				  <'error'> when 'true' ->
				      %% Line 590
				      {'error','no_debug_info'}
				  ( <_cor7> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor7})
				    -| ['compiler_generated'] )
				end
			    %% Line 592
			    <'error'> when 'true' ->
				%% Line 593
				{'error','no_beam'}
			    ( <_cor8> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor8})
			      -| ['compiler_generated'] )
			  end
	      %% Line 595
	      <> when 'true' ->
		  %% Line 596
		  {'error','badarg'}
	    end
'check_application'/1 =
    %% Line 600
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 601
	    call 'filename':'absname'
		(_cor0)
	in  let <_cor2> =
		%% Line 601
		call 'filename':'split'
		    (_cor1)
	    in  %% Line 601
		case call 'lists':'reverse'
			 (_cor2) of
		  %% Line 602
		  <[_X_Mod|[[115|[114|[99]]]|[AppS|_cor5]]]> when 'true' ->
		      %% Line 603
		      apply 'check_application2'/1
			  (AppS)
		  %% Line 604
		  <_cor6> when 'true' ->
		      'ok'
		end
'check_application2'/1 =
    %% Line 606
    fun (_cor0) ->
	case _cor0 of
	  <[107|[101|[114|[110|[101|[108|[45|_cor2]]]]]]]> when 'true' ->
	      call 'erlang':'throw'
		  ({'error',{'app','kernel'}})
	  %% Line 607
	  <[115|[116|[100|[108|[105|[98|[45|_cor3]]]]]]]> when 'true' ->
	      call 'erlang':'throw'
		  ({'error',{'app','stdlib'}})
	  %% Line 608
	  <[101|[114|[116|[115|[45|_cor4]]]]]> when 'true' ->
	      call 'erlang':'throw'
		  ({'error',{'app','erts'}})
	  %% Line 609
	  <[103|[115|[45|_cor5]]]> when 'true' ->
	      call 'erlang':'throw'
		  ({'error',{'app','gs'}})
	  %% Line 610
	  <[100|[101|[98|[117|[103|[103|[101|[114|[45|_cor6]]]]]]]]]> when 'true' ->
	      call 'erlang':'throw'
		  ({'error',{'app','debugger'}})
	  %% Line 611
	  <_cor7> when 'true' ->
	      'ok'
	end
'find_src'/1 =
    %% Line 613
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 614
	    call 'filename':'rootname'
		(_cor0)
	in  let <Src0> =
		%% Line 614
		call 'erlang':'++'
		    (_cor1, [46|[101|[114|[108]]]])
	    in  %% Line 615
		case apply 'is_file'/1
			 (Src0) of
		  %% Line 616
		  <'true'> when 'true' ->
		      Src0
		  %% Line 617
		  <'false'> when 'true' ->
		      let <EbinDir> =
			  %% Line 618
			  call 'filename':'dirname'
			      (_cor0)
		      in  let <_cor4> =
			      %% Line 619
			      call 'filename':'dirname'
				  (EbinDir)
			  in  let <_cor5> =
				  %% Line 620
				  call 'filename':'basename'
				      (Src0)
			      in  let <Src> =
				      %% Line 619
				      call 'filename':'join'
					  ([_cor4|[[115|[114|[99]]]|%% Line 620
								    [_cor5|[]]]])
				  in  %% Line 621
				      case apply 'is_file'/1
					       (Src) of
					%% Line 622
					<'true'> when 'true' ->
					    Src
					%% Line 623
					<'false'> when 'true' ->
					    'error'
					( <_cor7> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_cor7})
					  -| ['compiler_generated'] )
				      end
		  ( <_cor8> when 'true' ->
			primop 'match_fail'
			    ({'case_clause',_cor8})
		    -| ['compiler_generated'] )
		end
'find_beam'/2 =
    %% Line 627
    fun (_cor1,_cor0) ->
	let <SrcDir> =
	    %% Line 628
	    call 'filename':'dirname'
		(_cor0)
	in  let <_cor4> =
		%% Line 629
		call 'erlang':'atom_to_list'
		    (_cor1)
	    in  let <_cor3> =
		    %% Line 629
		    call 'code':'objfile_extension'
			()
		in  let <BeamFile> =
			%% Line 629
			call 'erlang':'++'
			    (_cor4, _cor3)
		    in  let <File> =
			    %% Line 630
			    call 'filename':'join'
				(SrcDir, BeamFile)
			in  %% Line 631
			    case apply 'is_file'/1
				     (File) of
			      %% Line 632
			      <'true'> when 'true' ->
				  File
			      %% Line 633
			      <'false'> when 'true' ->
				  apply 'find_beam_1'/2
				      (BeamFile, SrcDir)
			      ( <_cor7> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor7})
				-| ['compiler_generated'] )
			    end
'find_beam_1'/2 =
    %% Line 636
    fun (_cor1,_cor0) ->
	let <RootDir> =
	    %% Line 637
	    call 'filename':'dirname'
		(_cor0)
	in  let <EbinDir> =
		%% Line 638
		call 'filename':'join'
		    (RootDir, [101|[98|[105|[110]]]])
	    in  let <_cor4> =
		    %% Line 639
		    call 'code':'get_path'
			()
		in  let <CodePath> =
			%% Line 639
			[EbinDir|_cor4]
		    in  let <_cor12> =
			    %% Line 640
			    ( fun (_cor9,_cor8) ->
				  case <_cor9,_cor8> of
				    <_cor15,Beam>
					when call 'erlang':'is_list'
					      (Beam) ->
					Beam
				    %% Line 641
				    <Dir,'error'> when 'true' ->
					let <File> =
					    %% Line 642
					    call 'filename':'join'
						(Dir, _cor1)
					in  %% Line 643
					    case apply 'is_file'/1
						     (File) of
					      %% Line 644
					      <'true'> when 'true' ->
						  File
					      %% Line 645
					      <'false'> when 'true' ->
						  'error'
					      ( <_cor7> when 'true' ->
						    primop 'match_fail'
							({'case_clause',_cor7})
						-| ['compiler_generated'] )
					    end
				    ( <_cor11,_cor10> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor11,_cor10})
					    -| [{'function_name',{'-find_beam_1/2-fun-0-',2}}] )
				      -| ['compiler_generated'] )
				  end
			      -| [{'id',{0,0,'-find_beam_1/2-fun-0-'}}] )
			in  %% Line 640
			    call 'lists':'foldl'
				(_cor12, %% Line 648
					 'error', %% Line 649
						  CodePath)
'check_beam'/1 =
    %% Line 651
    fun (_cor0) ->
	case _cor0 of
	  <BeamBin>
	      when call 'erlang':'is_binary'
		    (_cor0) ->
	      %% Line 652
	      case call 'beam_lib':'chunks'
		       (BeamBin, ['abstract_code'|['exports']]) of
		%% Line 653
		<{'ok',{_X_Mod,[{'abstract_code','no_abstract_code'}|_cor5]}}> when 'true' ->
		    %% Line 654
		    'error'
		%% Line 655
		<{'ok',{_X_Mod,[{'abstract_code',Abst}|[{'exports',Exp}|[]]]}}> when 'true' ->
		    %% Line 656
		    {'ok',Exp,Abst,BeamBin}
		%% Line 657
		<_cor6> when 'true' ->
		    %% Line 658
		    'error'
	      end
	  %% Line 660
	  <Beam>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      let <_cor2> =
		  %% Line 661
		  call 'filename':'absname'
		      (Beam)
	      in  %% Line 661
		  case call 'erl_prim_loader':'get_file'
			   (_cor2) of
		    <{'ok',Bin,_X_FullPath}> when 'true' ->
			%% Line 662
			apply 'check_beam'/1
			    (Bin)
		    ( <_cor3> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor3})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'check_beam',1}}] )
	    -| ['compiler_generated'] )
	end
'is_file'/1 =
    %% Line 664
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 665
	    call 'filename':'absname'
		(_cor0)
	in  %% Line 665
	    call 'filelib':'is_regular'
		(_cor1, 'erl_prim_loader')
'everywhere'/2 =
    %% Line 667
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'distributed',Fun> when 'true' ->
	      %% Line 668
	      case call 'erlang':'is_alive'
		       () of
		%% Line 669
		<'true'> when 'true' ->
		    call 'rpc':'multicall'
			('erlang', 'apply', [Fun|[[]]])
		%% Line 670
		<'false'> when 'true' ->
		    apply Fun
			()
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 672
	  <'local',Fun> when 'true' ->
	      %% Line 673
	      apply Fun
		  ()
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'everywhere',2}}] )
	    -| ['compiler_generated'] )
	end
'scan_module_name'/1 =
    %% Line 675
    fun (_cor0) ->
	%% Line 676
	try
	    let <_cor1> =
		%% Line 678
		call 'filename':'absname'
		    (_cor0)
	    in  %% Line 677
		case %% Line 678
		     call 'erl_prim_loader':'get_file'
			 (_cor1) of
		  <{'ok',Bin,_X_FullPath}> when 'true' ->
		      let <_cor3> =
			  %% Line 679
			  apply 'enc'/1
			      (Bin)
		      in  %% Line 679
			  apply 'scan_module_name_1'/4
			      ([], #{}#, Bin, _cor3)
		  ( <_cor2> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_cor2})
		    -| ['compiler_generated'] )
		end
	of <_cor4> ->
	    _cor4
	catch <_cor7,_cor6,_cor5> ->
	    %% Line 682
	    call 'erlang':'throw'
		({'error','no_beam'})
'scan_module_name_1'/4 =
    %% Line 685
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 686
	    call 'erlang':'byte_size'
		(_cor1)
	in  let <N> =
		%% Line 686
		call 'erlang':'min'
		    (100, _cor4)
	    in  %% Line 687
		case call 'erlang':'split_binary'
			 (_cor1, N) of
		  <{Bin1,Bin}> when 'true' ->
		      let <_cor7> =
			  %% Line 689
			  call 'erlang':'list_to_binary'
			      ([_cor2|[Bin1|[]]])
		      in  let <Chars,B1> =
			      %% Line 689
			      case call 'unicode':'characters_to_list'
				       (_cor7, _cor0) of
				%% Line 690
				<{'incomplete',List,Binary}> when 'true' ->
				    %% Line 691
				    <List,Binary>
				%% Line 692
				<List>
				    when let <_cor8> =
					  call 'erlang':'is_list'
					      (List)
				      in  let <_cor9> =
					      call 'erlang':'=/='
						  (List, [])
					  in  call 'erlang':'and'
						  (_cor8, _cor9) ->
				    %% Line 693
				    <List,#{}#>
				( <_cor10> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor10})
				  -| ['compiler_generated'] )
			      end
			  in  %% Line 695
			      apply 'scan_module_name_2'/5
				  (_cor3, Chars, B1, Bin, _cor0)
		  ( <_cor6> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_cor6})
		    -| ['compiler_generated'] )
		end
'scan_module_name_2'/5 =
    %% Line 697
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 698
	case call 'erl_scan':'tokens'
		 (_cor4, _cor3, 1) of
	  %% Line 699
	  <{'done',{'ok',Ts,_cor13},Rest}> when 'true' ->
	      %% Line 700
	      apply 'scan_module_name_3'/5
		  (Ts, Rest, _cor2, _cor1, _cor0)
	  %% Line 701
	  <{'more',Cont}> when 'true' ->
	      %% Line 702
	      apply 'scan_module_name_1'/4
		  (Cont, _cor2, _cor1, _cor0)
	  ( <_cor7> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor7})
	    -| ['compiler_generated'] )
	end
'scan_module_name_3'/5 =
    %% Line 705
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Ts = [{'-',_cor10}|[{'atom',_cor11,'module'}|[{'(',_cor12}|_cor13]]],%% Line 706
										_X_Chars,%% Line 706
											 _X_B1,%% Line 706
											       _X_Bin,%% Line 706
												      _X_Enc> when 'true' ->
	      %% Line 707
	      apply 'scan_module_name_4'/1
		  (Ts)
	  %% Line 708
	  <[{'-',_cor14}|[{'atom',_cor15,_cor16}|_cor17]],Chars,B1,Bin,Enc> when 'true' ->
	      %% Line 709
	      apply 'scan_module_name_2'/5
		  ([], Chars, B1, Bin, Enc)
	  ( <_cor9,_cor8,_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7,_cor6,_cor5})
		  -| [{'function_name',{'scan_module_name_3',5}}] )
	    -| ['compiler_generated'] )
	end
'scan_module_name_4'/1 =
    %% Line 711
    fun (_cor0) ->
	%% Line 712
	case call 'erl_parse':'parse_form'
		 (_cor0) of
	  <{'ok',{'attribute',_cor4,'module',M}}> when 'true' ->
	      %% Line 713
	      case call 'erlang':'is_atom'
		       (M) of
		<'true'> when 'true' ->
		    %% Line 714
		    M
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'enc'/1 =
    %% Line 716
    fun (_cor0) ->
	%% Line 717
	case call 'epp':'read_encoding_from_binary'
		 (_cor0) of
	  %% Line 718
	  <'none'> when 'true' ->
	      call 'epp':'default_encoding'
		  ()
	  %% Line 719
	  <Encoding> when 'true' ->
	      Encoding
	end
'del_mod'/2 =
    %% Line 724
    fun (_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 725
	    case <> of
	      %% Line 726
	      <>
		  when call 'erlang':'is_atom'
			(_cor1) ->
		  _cor1
	      %% Line 727
	      <>
		  when call 'erlang':'is_list'
			(_cor1) ->
		  let <_cor2> =
		      %% Line 728
		      call 'filename':'basename'
			  (_cor1, [46|[101|[114|[108]]]])
		  in  %% Line 728
		      call 'erlang':'list_to_atom'
			  (_cor2)
	      ( <> when 'true' ->
		    primop 'match_fail'
			('if_clause')
		-| ['compiler_generated'] )
	    end
	in  do  %% Line 730
		call 'dbg_iserver':'safe_cast'
		    ({'delete',_cor3})
		let <_cor5> =
		    %% Line 732
		    ( fun () ->
			  do  %% Line 733
			      call 'erts_debug':'breakpoint'
				  ({_cor3,'_','_'}, 'false')
			      %% Line 734
			      call 'erlang':'yield'
				  ()
		      -| [{'id',{0,0,'-del_mod/2-fun-0-'}}] )
		in  do  %% Line 731
			apply 'everywhere'/2
			    (_cor0, _cor5)
			%% Line 736
			'ok'
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('int')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('int', _cor0)
end