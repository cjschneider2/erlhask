module 'dbg_wx_mon' ['module_info'/0,
		     'module_info'/1,
		     'start'/2,
		     'stop'/0]
    attributes [%% Line 24
		'type' =
		    %% Line 24
		    [{{'record','file_info'},[{'typed_record_field',{'record_field',25,{'atom',25,'size'}},{'type',25,'union',[{'atom',25,'undefined'}|[{'type',25,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',26,{'atom',26,'type'}},{'type',26,'union',[{'atom',26,'undefined'}|[{'atom',26,'device'}|[{'atom',26,'directory'}|[{'atom',26,'other'}|[{'atom',26,'regular'}|[{'atom',26,'symlink'}]]]]]]}}|[{'typed_record_field',{'record_field',27,{'atom',27,'access'}},{'type',27,'union',[{'atom',27,'undefined'}|[{'atom',27,'read'}|[{'atom',27,'write'}|[{'atom',27,'read_write'}|[{'atom',27,'none'}]]]]]}}|[{'typed_record_field',{'record_field',28,{'atom',28,'atime'}},{'type',28,'union',[{'atom',28,'undefined'}|[{'remote_type',28,[{'atom',28,'file'}|[{'atom',28,'date_time'}|[[]]]]}|[{'type',28,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',32,{'atom',32,'mtime'}},{'type',32,'union',[{'atom',32,'undefined'}|[{'remote_type',32,[{'atom',32,'file'}|[{'atom',32,'date_time'}|[[]]]]}|[{'type',32,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',34,{'atom',34,'ctime'}},{'type',34,'union',[{'atom',34,'undefined'}|[{'remote_type',34,[{'atom',34,'file'}|[{'atom',34,'date_time'}|[[]]]]}|[{'type',34,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',40,{'atom',40,'mode'}},{'type',40,'union',[{'atom',40,'undefined'}|[{'type',40,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',43,{'atom',43,'links'}},{'type',43,'union',[{'atom',43,'undefined'}|[{'type',43,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',46,{'atom',46,'major_device'}},{'type',46,'union',[{'atom',46,'undefined'}|[{'type',46,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',52,{'atom',52,'minor_device'}},{'type',52,'union',[{'atom',52,'undefined'}|[{'type',52,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',53,{'atom',53,'inode'}},{'type',53,'union',[{'atom',53,'undefined'}|[{'type',53,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',54,{'atom',54,'uid'}},{'type',54,'union',[{'atom',54,'undefined'}|[{'type',54,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',55,{'atom',55,'gid'}},{'type',55,'union',[{'atom',55,'undefined'}|[{'type',55,'non_neg_integer',[]}]]}}]]]]]]]]]]]]],[]}],
		%% Line 58
		'type' =
		    %% Line 58
		    [{{'record','file_descriptor'},[{'typed_record_field',{'record_field',59,{'atom',59,'module'}},{'type',59,'union',[{'atom',59,'undefined'}|[{'type',59,'module',[]}]]}}|[{'typed_record_field',{'record_field',60,{'atom',60,'data'}},{'type',60,'union',[{'atom',60,'undefined'}|[{'type',60,'term',[]}]]}}]],[]}],
		%% Line 25
		'type' =
		    %% Line 25
		    [{{'record','wx'},[{'typed_record_field',{'record_field',25,{'atom',25,'id'}},{'type',25,'union',[{'atom',25,'undefined'}|[{'type',25,'integer',[]}]]}}|[{'typed_record_field',{'record_field',26,{'atom',26,'obj'}},{'type',26,'union',[{'atom',26,'undefined'}|[{'remote_type',26,[{'atom',26,'wx'}|[{'atom',26,'wx_object'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',27,{'atom',27,'userData'}},{'type',27,'union',[{'atom',27,'undefined'}|[{'type',27,'term',[]}]]}}|[{'typed_record_field',{'record_field',28,{'atom',28,'event'}},{'type',28,'union',[{'atom',28,'undefined'}|[{'type',28,'event',[]}]]}}]]]],[]}],
		%% Line 31
		'type' =
		    %% Line 31
		    [{'wx',{'type',31,'record',[{'atom',31,'wx'}]},[]}],
		%% Line 35
		'type' =
		    %% Line 35
		    [{{'record','wxNavigationKey'},[{'typed_record_field',{'record_field',35,{'atom',35,'type'}},{'type',35,'union',[{'atom',35,'undefined'}|[{'type',35,'wxNavigationKeyEventType',[]}]]}}|[{'typed_record_field',{'record_field',36,{'atom',36,'flags'}},{'type',36,'union',[{'atom',36,'undefined'}|[{'type',36,'integer',[]}]]}}|[{'typed_record_field',{'record_field',37,{'atom',37,'focus'}},{'type',37,'union',[{'atom',37,'undefined'}|[{'remote_type',37,[{'atom',37,'wxWindow'}|[{'atom',37,'wxWindow'}|[[]]]]}]]}}]]],[]}],
		%% Line 38
		'type' =
		    %% Line 38
		    [{'wxNavigationKeyEventType',{'atom',38,'navigation_key'},[]}],
		%% Line 39
		'type' =
		    %% Line 39
		    [{'wxNavigationKey',{'type',39,'record',[{'atom',39,'wxNavigationKey'}]},[]}],
		%% Line 41
		'type' =
		    %% Line 41
		    [{{'record','wxSash'},[{'typed_record_field',{'record_field',41,{'atom',41,'type'}},{'type',41,'union',[{'atom',41,'undefined'}|[{'type',41,'wxSashEventType',[]}]]}}|[{'typed_record_field',{'record_field',42,{'atom',42,'edge'}},{'type',42,'union',[{'atom',42,'undefined'}|[{'remote_type',42,[{'atom',42,'wx'}|[{'atom',42,'wx_enum'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',43,{'atom',43,'dragRect'}},{'type',43,'union',[{'atom',43,'undefined'}|[{'type',43,'tuple',[{'ann_type',43,[{'var',43,'X'}|[{'type',43,'integer',[]}]]}|[{'ann_type',43,[{'var',43,'Y'}|[{'type',43,'integer',[]}]]}|[{'ann_type',43,[{'var',43,'W'}|[{'type',43,'integer',[]}]]}|[{'ann_type',43,[{'var',43,'H'}|[{'type',43,'integer',[]}]]}]]]]}]]}}|[{'typed_record_field',{'record_field',44,{'atom',44,'dragStatus'}},{'type',44,'union',[{'atom',44,'undefined'}|[{'remote_type',44,[{'atom',44,'wx'}|[{'atom',44,'wx_enum'}|[[]]]]}]]}}]]]],[]}],
		%% Line 45
		'type' =
		    %% Line 45
		    [{'wxSashEventType',{'atom',45,'sash_dragged'},[]}],
		%% Line 46
		'type' =
		    %% Line 46
		    [{'wxSash',{'type',46,'record',[{'atom',46,'wxSash'}]},[]}],
		%% Line 48
		'type' =
		    %% Line 48
		    [{{'record','wxList'},[{'typed_record_field',{'record_field',48,{'atom',48,'type'}},{'type',48,'union',[{'atom',48,'undefined'}|[{'type',48,'wxListEventType',[]}]]}}|[{'typed_record_field',{'record_field',49,{'atom',49,'code'}},{'type',49,'union',[{'atom',49,'undefined'}|[{'type',49,'integer',[]}]]}}|[{'typed_record_field',{'record_field',50,{'atom',50,'oldItemIndex'}},{'type',50,'union',[{'atom',50,'undefined'}|[{'type',50,'integer',[]}]]}}|[{'typed_record_field',{'record_field',51,{'atom',51,'itemIndex'}},{'type',51,'union',[{'atom',51,'undefined'}|[{'type',51,'integer',[]}]]}}|[{'typed_record_field',{'record_field',52,{'atom',52,'col'}},{'type',52,'union',[{'atom',52,'undefined'}|[{'type',52,'integer',[]}]]}}|[{'typed_record_field',{'record_field',53,{'atom',53,'pointDrag'}},{'type',53,'union',[{'atom',53,'undefined'}|[{'type',53,'tuple',[{'ann_type',53,[{'var',53,'X'}|[{'type',53,'integer',[]}]]}|[{'ann_type',53,[{'var',53,'Y'}|[{'type',53,'integer',[]}]]}]]}]]}}]]]]]],[]}],
		%% Line 54
		'type' =
		    %% Line 54
		    [{'wxListEventType',{'type',54,'union',[{'atom',54,'command_list_begin_drag'}|[{'atom',54,'command_list_begin_rdrag'}|[{'atom',54,'command_list_begin_label_edit'}|[{'atom',54,'command_list_end_label_edit'}|[{'atom',54,'command_list_delete_item'}|[{'atom',54,'command_list_delete_all_items'}|[{'atom',54,'command_list_key_down'}|[{'atom',54,'command_list_insert_item'}|[{'atom',54,'command_list_col_click'}|[{'atom',54,'command_list_col_right_click'}|[{'atom',54,'command_list_col_begin_drag'}|[{'atom',54,'command_list_col_dragging'}|[{'atom',54,'command_list_col_end_drag'}|[{'atom',54,'command_list_item_selected'}|[{'atom',54,'command_list_item_deselected'}|[{'atom',54,'command_list_item_right_click'}|[{'atom',54,'command_list_item_middle_click'}|[{'atom',54,'command_list_item_activated'}|[{'atom',54,'command_list_item_focused'}|[{'atom',54,'command_list_cache_hint'}]]]]]]]]]]]]]]]]]]]]},[]}],
		%% Line 55
		'type' =
		    %% Line 55
		    [{'wxList',{'type',55,'record',[{'atom',55,'wxList'}]},[]}],
		%% Line 57
		'type' =
		    %% Line 57
		    [{{'record','wxNotebook'},[{'typed_record_field',{'record_field',57,{'atom',57,'type'}},{'type',57,'union',[{'atom',57,'undefined'}|[{'type',57,'wxNotebookEventType',[]}]]}}],[]}],
		%% Line 58
		'type' =
		    %% Line 58
		    [{'wxNotebookEventType',{'type',58,'union',[{'atom',58,'command_notebook_page_changed'}|[{'atom',58,'command_notebook_page_changing'}]]},[]}],
		%% Line 59
		'type' =
		    %% Line 59
		    [{'wxNotebook',{'type',59,'record',[{'atom',59,'wxNotebook'}]},[]}],
		%% Line 61
		'type' =
		    %% Line 61
		    [{{'record','wxDisplayChanged'},[{'typed_record_field',{'record_field',61,{'atom',61,'type'}},{'type',61,'union',[{'atom',61,'undefined'}|[{'type',61,'wxDisplayChangedEventType',[]}]]}}],[]}],
		%% Line 62
		'type' =
		    %% Line 62
		    [{'wxDisplayChangedEventType',{'atom',62,'display_changed'},[]}],
		%% Line 63
		'type' =
		    %% Line 63
		    [{'wxDisplayChanged',{'type',63,'record',[{'atom',63,'wxDisplayChanged'}]},[]}],
		%% Line 65
		'type' =
		    %% Line 65
		    [{{'record','wxErase'},[{'typed_record_field',{'record_field',65,{'atom',65,'type'}},{'type',65,'union',[{'atom',65,'undefined'}|[{'type',65,'wxEraseEventType',[]}]]}}|[{'typed_record_field',{'record_field',66,{'atom',66,'dc'}},{'type',66,'union',[{'atom',66,'undefined'}|[{'remote_type',66,[{'atom',66,'wxDC'}|[{'atom',66,'wxDC'}|[[]]]]}]]}}]],[]}],
		%% Line 67
		'type' =
		    %% Line 67
		    [{'wxEraseEventType',{'atom',67,'erase_background'},[]}],
		%% Line 68
		'type' =
		    %% Line 68
		    [{'wxErase',{'type',68,'record',[{'atom',68,'wxErase'}]},[]}],
		%% Line 70
		'type' =
		    %% Line 70
		    [{{'record','wxKey'},[{'typed_record_field',{'record_field',70,{'atom',70,'type'}},{'type',70,'union',[{'atom',70,'undefined'}|[{'type',70,'wxKeyEventType',[]}]]}}|[{'typed_record_field',{'record_field',71,{'atom',71,'x'}},{'type',71,'union',[{'atom',71,'undefined'}|[{'type',71,'integer',[]}]]}}|[{'typed_record_field',{'record_field',72,{'atom',72,'y'}},{'type',72,'union',[{'atom',72,'undefined'}|[{'type',72,'integer',[]}]]}}|[{'typed_record_field',{'record_field',73,{'atom',73,'keyCode'}},{'type',73,'union',[{'atom',73,'undefined'}|[{'type',73,'integer',[]}]]}}|[{'typed_record_field',{'record_field',74,{'atom',74,'controlDown'}},{'type',74,'union',[{'atom',74,'undefined'}|[{'type',74,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',75,{'atom',75,'shiftDown'}},{'type',75,'union',[{'atom',75,'undefined'}|[{'type',75,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',76,{'atom',76,'altDown'}},{'type',76,'union',[{'atom',76,'undefined'}|[{'type',76,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',77,{'atom',77,'metaDown'}},{'type',77,'union',[{'atom',77,'undefined'}|[{'type',77,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',78,{'atom',78,'scanCode'}},{'type',78,'union',[{'atom',78,'undefined'}|[{'type',78,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',79,{'atom',79,'uniChar'}},{'type',79,'union',[{'atom',79,'undefined'}|[{'type',79,'integer',[]}]]}}|[{'typed_record_field',{'record_field',80,{'atom',80,'rawCode'}},{'type',80,'union',[{'atom',80,'undefined'}|[{'type',80,'integer',[]}]]}}|[{'typed_record_field',{'record_field',81,{'atom',81,'rawFlags'}},{'type',81,'union',[{'atom',81,'undefined'}|[{'type',81,'integer',[]}]]}}]]]]]]]]]]]],[]}],
		%% Line 82
		'type' =
		    %% Line 82
		    [{'wxKeyEventType',{'type',82,'union',[{'atom',82,'char'}|[{'atom',82,'char_hook'}|[{'atom',82,'key_down'}|[{'atom',82,'key_up'}]]]]},[]}],
		%% Line 83
		'type' =
		    %% Line 83
		    [{'wxKey',{'type',83,'record',[{'atom',83,'wxKey'}]},[]}],
		%% Line 85
		'type' =
		    %% Line 85
		    [{{'record','wxWindowDestroy'},[{'typed_record_field',{'record_field',85,{'atom',85,'type'}},{'type',85,'union',[{'atom',85,'undefined'}|[{'type',85,'wxWindowDestroyEventType',[]}]]}}],[]}],
		%% Line 86
		'type' =
		    %% Line 86
		    [{'wxWindowDestroyEventType',{'atom',86,'destroy'},[]}],
		%% Line 87
		'type' =
		    %% Line 87
		    [{'wxWindowDestroy',{'type',87,'record',[{'atom',87,'wxWindowDestroy'}]},[]}],
		%% Line 89
		'type' =
		    %% Line 89
		    [{{'record','wxCalendar'},[{'typed_record_field',{'record_field',89,{'atom',89,'type'}},{'type',89,'union',[{'atom',89,'undefined'}|[{'type',89,'wxCalendarEventType',[]}]]}}],[]}],
		%% Line 90
		'type' =
		    %% Line 90
		    [{'wxCalendarEventType',{'type',90,'union',[{'atom',90,'calendar_sel_changed'}|[{'atom',90,'calendar_day_changed'}|[{'atom',90,'calendar_month_changed'}|[{'atom',90,'calendar_year_changed'}|[{'atom',90,'calendar_doubleclicked'}|[{'atom',90,'calendar_weekday_clicked'}]]]]]]},[]}],
		%% Line 91
		'type' =
		    %% Line 91
		    [{'wxCalendar',{'type',91,'record',[{'atom',91,'wxCalendar'}]},[]}],
		%% Line 93
		'type' =
		    %% Line 93
		    [{{'record','wxSplitter'},[{'typed_record_field',{'record_field',93,{'atom',93,'type'}},{'type',93,'union',[{'atom',93,'undefined'}|[{'type',93,'wxSplitterEventType',[]}]]}}],[]}],
		%% Line 94
		'type' =
		    %% Line 94
		    [{'wxSplitterEventType',{'type',94,'union',[{'atom',94,'command_splitter_sash_pos_changed'}|[{'atom',94,'command_splitter_sash_pos_changing'}|[{'atom',94,'command_splitter_doubleclicked'}|[{'atom',94,'command_splitter_unsplit'}]]]]},[]}],
		%% Line 95
		'type' =
		    %% Line 95
		    [{'wxSplitter',{'type',95,'record',[{'atom',95,'wxSplitter'}]},[]}],
		%% Line 97
		'type' =
		    %% Line 97
		    [{{'record','wxScroll'},[{'typed_record_field',{'record_field',97,{'atom',97,'type'}},{'type',97,'union',[{'atom',97,'undefined'}|[{'type',97,'wxScrollEventType',[]}]]}}|[{'typed_record_field',{'record_field',98,{'atom',98,'commandInt'}},{'type',98,'union',[{'atom',98,'undefined'}|[{'type',98,'integer',[]}]]}}|[{'typed_record_field',{'record_field',99,{'atom',99,'extraLong'}},{'type',99,'union',[{'atom',99,'undefined'}|[{'type',99,'integer',[]}]]}}]]],[]}],
		%% Line 100
		'type' =
		    %% Line 100
		    [{'wxScrollEventType',{'type',100,'union',[{'atom',100,'scroll_top'}|[{'atom',100,'scroll_bottom'}|[{'atom',100,'scroll_lineup'}|[{'atom',100,'scroll_linedown'}|[{'atom',100,'scroll_pageup'}|[{'atom',100,'scroll_pagedown'}|[{'atom',100,'scroll_thumbtrack'}|[{'atom',100,'scroll_thumbrelease'}|[{'atom',100,'scroll_changed'}]]]]]]]]]},[]}],
		%% Line 101
		'type' =
		    %% Line 101
		    [{'wxScroll',{'type',101,'record',[{'atom',101,'wxScroll'}]},[]}],
		%% Line 103
		'type' =
		    %% Line 103
		    [{{'record','wxMenu'},[{'typed_record_field',{'record_field',103,{'atom',103,'type'}},{'type',103,'union',[{'atom',103,'undefined'}|[{'type',103,'wxMenuEventType',[]}]]}}],[]}],
		%% Line 104
		'type' =
		    %% Line 104
		    [{'wxMenuEventType',{'type',104,'union',[{'atom',104,'menu_open'}|[{'atom',104,'menu_close'}|[{'atom',104,'menu_highlight'}]]]},[]}],
		%% Line 105
		'type' =
		    %% Line 105
		    [{'wxMenu',{'type',105,'record',[{'atom',105,'wxMenu'}]},[]}],
		%% Line 107
		'type' =
		    %% Line 107
		    [{{'record','wxContextMenu'},[{'typed_record_field',{'record_field',107,{'atom',107,'type'}},{'type',107,'union',[{'atom',107,'undefined'}|[{'type',107,'wxContextMenuEventType',[]}]]}}],[]}],
		%% Line 108
		'type' =
		    %% Line 108
		    [{'wxContextMenuEventType',{'atom',108,'context_menu'},[]}],
		%% Line 109
		'type' =
		    %% Line 109
		    [{'wxContextMenu',{'type',109,'record',[{'atom',109,'wxContextMenu'}]},[]}],
		%% Line 111
		'type' =
		    %% Line 111
		    [{{'record','wxShow'},[{'typed_record_field',{'record_field',111,{'atom',111,'type'}},{'type',111,'union',[{'atom',111,'undefined'}|[{'type',111,'wxShowEventType',[]}]]}}],[]}],
		%% Line 112
		'type' =
		    %% Line 112
		    [{'wxShowEventType',{'atom',112,'show'},[]}],
		%% Line 113
		'type' =
		    %% Line 113
		    [{'wxShow',{'type',113,'record',[{'atom',113,'wxShow'}]},[]}],
		%% Line 115
		'type' =
		    %% Line 115
		    [{{'record','wxSpin'},[{'typed_record_field',{'record_field',115,{'atom',115,'type'}},{'type',115,'union',[{'atom',115,'undefined'}|[{'type',115,'wxSpinEventType',[]}]]}}|[{'typed_record_field',{'record_field',116,{'atom',116,'commandInt'}},{'type',116,'union',[{'atom',116,'undefined'}|[{'type',116,'integer',[]}]]}}]],[]}],
		%% Line 117
		'type' =
		    %% Line 117
		    [{'wxSpinEventType',{'type',117,'union',[{'atom',117,'command_spinctrl_updated'}|[{'atom',117,'spin_up'}|[{'atom',117,'spin_down'}|[{'atom',117,'spin'}]]]]},[]}],
		%% Line 118
		'type' =
		    %% Line 118
		    [{'wxSpin',{'type',118,'record',[{'atom',118,'wxSpin'}]},[]}],
		%% Line 120
		'type' =
		    %% Line 120
		    [{{'record','wxSetCursor'},[{'typed_record_field',{'record_field',120,{'atom',120,'type'}},{'type',120,'union',[{'atom',120,'undefined'}|[{'type',120,'wxSetCursorEventType',[]}]]}}],[]}],
		%% Line 121
		'type' =
		    %% Line 121
		    [{'wxSetCursorEventType',{'atom',121,'set_cursor'},[]}],
		%% Line 122
		'type' =
		    %% Line 122
		    [{'wxSetCursor',{'type',122,'record',[{'atom',122,'wxSetCursor'}]},[]}],
		%% Line 124
		'type' =
		    %% Line 124
		    [{{'record','wxFontPicker'},[{'typed_record_field',{'record_field',124,{'atom',124,'type'}},{'type',124,'union',[{'atom',124,'undefined'}|[{'type',124,'wxFontPickerEventType',[]}]]}}|[{'typed_record_field',{'record_field',125,{'atom',125,'font'}},{'type',125,'union',[{'atom',125,'undefined'}|[{'remote_type',125,[{'atom',125,'wxFont'}|[{'atom',125,'wxFont'}|[[]]]]}]]}}]],[]}],
		%% Line 126
		'type' =
		    %% Line 126
		    [{'wxFontPickerEventType',{'atom',126,'command_fontpicker_changed'},[]}],
		%% Line 127
		'type' =
		    %% Line 127
		    [{'wxFontPicker',{'type',127,'record',[{'atom',127,'wxFontPicker'}]},[]}],
		%% Line 129
		'type' =
		    %% Line 129
		    [{{'record','wxScrollWin'},[{'typed_record_field',{'record_field',129,{'atom',129,'type'}},{'type',129,'union',[{'atom',129,'undefined'}|[{'type',129,'wxScrollWinEventType',[]}]]}}],[]}],
		%% Line 130
		'type' =
		    %% Line 130
		    [{'wxScrollWinEventType',{'type',130,'union',[{'atom',130,'scrollwin_top'}|[{'atom',130,'scrollwin_bottom'}|[{'atom',130,'scrollwin_lineup'}|[{'atom',130,'scrollwin_linedown'}|[{'atom',130,'scrollwin_pageup'}|[{'atom',130,'scrollwin_pagedown'}|[{'atom',130,'scrollwin_thumbtrack'}|[{'atom',130,'scrollwin_thumbrelease'}]]]]]]]]},[]}],
		%% Line 131
		'type' =
		    %% Line 131
		    [{'wxScrollWin',{'type',131,'record',[{'atom',131,'wxScrollWin'}]},[]}],
		%% Line 133
		'type' =
		    %% Line 133
		    [{{'record','wxPaint'},[{'typed_record_field',{'record_field',133,{'atom',133,'type'}},{'type',133,'union',[{'atom',133,'undefined'}|[{'type',133,'wxPaintEventType',[]}]]}}],[]}],
		%% Line 134
		'type' =
		    %% Line 134
		    [{'wxPaintEventType',{'atom',134,'paint'},[]}],
		%% Line 135
		'type' =
		    %% Line 135
		    [{'wxPaint',{'type',135,'record',[{'atom',135,'wxPaint'}]},[]}],
		%% Line 137
		'type' =
		    %% Line 137
		    [{{'record','wxChildFocus'},[{'typed_record_field',{'record_field',137,{'atom',137,'type'}},{'type',137,'union',[{'atom',137,'undefined'}|[{'type',137,'wxChildFocusEventType',[]}]]}}],[]}],
		%% Line 138
		'type' =
		    %% Line 138
		    [{'wxChildFocusEventType',{'atom',138,'child_focus'},[]}],
		%% Line 139
		'type' =
		    %% Line 139
		    [{'wxChildFocus',{'type',139,'record',[{'atom',139,'wxChildFocus'}]},[]}],
		%% Line 141
		'type' =
		    %% Line 141
		    [{{'record','wxMaximize'},[{'typed_record_field',{'record_field',141,{'atom',141,'type'}},{'type',141,'union',[{'atom',141,'undefined'}|[{'type',141,'wxMaximizeEventType',[]}]]}}],[]}],
		%% Line 142
		'type' =
		    %% Line 142
		    [{'wxMaximizeEventType',{'atom',142,'maximize'},[]}],
		%% Line 143
		'type' =
		    %% Line 143
		    [{'wxMaximize',{'type',143,'record',[{'atom',143,'wxMaximize'}]},[]}],
		%% Line 145
		'type' =
		    %% Line 145
		    [{{'record','wxFileDirPicker'},[{'typed_record_field',{'record_field',145,{'atom',145,'type'}},{'type',145,'union',[{'atom',145,'undefined'}|[{'type',145,'wxFileDirPickerEventType',[]}]]}}|[{'typed_record_field',{'record_field',146,{'atom',146,'path'}},{'type',146,'union',[{'atom',146,'undefined'}|[{'remote_type',146,[{'atom',146,'unicode'}|[{'atom',146,'chardata'}|[[]]]]}]]}}]],[]}],
		%% Line 147
		'type' =
		    %% Line 147
		    [{'wxFileDirPickerEventType',{'type',147,'union',[{'atom',147,'command_filepicker_changed'}|[{'atom',147,'command_dirpicker_changed'}]]},[]}],
		%% Line 148
		'type' =
		    %% Line 148
		    [{'wxFileDirPicker',{'type',148,'record',[{'atom',148,'wxFileDirPicker'}]},[]}],
		%% Line 150
		'type' =
		    %% Line 150
		    [{{'record','wxFocus'},[{'typed_record_field',{'record_field',150,{'atom',150,'type'}},{'type',150,'union',[{'atom',150,'undefined'}|[{'type',150,'wxFocusEventType',[]}]]}}],[]}],
		%% Line 151
		'type' =
		    %% Line 151
		    [{'wxFocusEventType',{'type',151,'union',[{'atom',151,'set_focus'}|[{'atom',151,'kill_focus'}]]},[]}],
		%% Line 152
		'type' =
		    %% Line 152
		    [{'wxFocus',{'type',152,'record',[{'atom',152,'wxFocus'}]},[]}],
		%% Line 154
		'type' =
		    %% Line 154
		    [{{'record','wxDate'},[{'typed_record_field',{'record_field',154,{'atom',154,'type'}},{'type',154,'union',[{'atom',154,'undefined'}|[{'type',154,'wxDateEventType',[]}]]}}|[{'typed_record_field',{'record_field',155,{'atom',155,'date'}},{'type',155,'union',[{'atom',155,'undefined'}|[{'remote_type',155,[{'atom',155,'wx'}|[{'atom',155,'wx_datetime'}|[[]]]]}]]}}]],[]}],
		%% Line 156
		'type' =
		    %% Line 156
		    [{'wxDateEventType',{'atom',156,'date_changed'},[]}],
		%% Line 157
		'type' =
		    %% Line 157
		    [{'wxDate',{'type',157,'record',[{'atom',157,'wxDate'}]},[]}],
		%% Line 159
		'type' =
		    %% Line 159
		    [{{'record','wxHtmlLink'},[{'typed_record_field',{'record_field',159,{'atom',159,'type'}},{'type',159,'union',[{'atom',159,'undefined'}|[{'type',159,'wxHtmlLinkEventType',[]}]]}}|[{'typed_record_field',{'record_field',160,{'atom',160,'linkInfo'}},{'type',160,'union',[{'atom',160,'undefined'}|[{'remote_type',160,[{'atom',160,'wx'}|[{'atom',160,'wx_wxHtmlLinkInfo'}|[[]]]]}]]}}]],[]}],
		%% Line 161
		'type' =
		    %% Line 161
		    [{'wxHtmlLinkEventType',{'atom',161,'command_html_link_clicked'},[]}],
		%% Line 162
		'type' =
		    %% Line 162
		    [{'wxHtmlLink',{'type',162,'record',[{'atom',162,'wxHtmlLink'}]},[]}],
		%% Line 164
		'type' =
		    %% Line 164
		    [{{'record','wxHelp'},[{'typed_record_field',{'record_field',164,{'atom',164,'type'}},{'type',164,'union',[{'atom',164,'undefined'}|[{'type',164,'wxHelpEventType',[]}]]}}],[]}],
		%% Line 165
		'type' =
		    %% Line 165
		    [{'wxHelpEventType',{'type',165,'union',[{'atom',165,'help'}|[{'atom',165,'detailed_help'}]]},[]}],
		%% Line 166
		'type' =
		    %% Line 166
		    [{'wxHelp',{'type',166,'record',[{'atom',166,'wxHelp'}]},[]}],
		%% Line 168
		'type' =
		    %% Line 168
		    [{{'record','wxActivate'},[{'typed_record_field',{'record_field',168,{'atom',168,'type'}},{'type',168,'union',[{'atom',168,'undefined'}|[{'type',168,'wxActivateEventType',[]}]]}}|[{'typed_record_field',{'record_field',169,{'atom',169,'active'}},{'type',169,'union',[{'atom',169,'undefined'}|[{'type',169,'boolean',[]}]]}}]],[]}],
		%% Line 170
		'type' =
		    %% Line 170
		    [{'wxActivateEventType',{'type',170,'union',[{'atom',170,'activate'}|[{'atom',170,'activate_app'}|[{'atom',170,'hibernate'}]]]},[]}],
		%% Line 171
		'type' =
		    %% Line 171
		    [{'wxActivate',{'type',171,'record',[{'atom',171,'wxActivate'}]},[]}],
		%% Line 173
		'type' =
		    %% Line 173
		    [{{'record','wxStyledText'},[{'typed_record_field',{'record_field',173,{'atom',173,'type'}},{'type',173,'union',[{'atom',173,'undefined'}|[{'type',173,'wxStyledTextEventType',[]}]]}}|[{'typed_record_field',{'record_field',174,{'atom',174,'position'}},{'type',174,'union',[{'atom',174,'undefined'}|[{'type',174,'integer',[]}]]}}|[{'typed_record_field',{'record_field',175,{'atom',175,'key'}},{'type',175,'union',[{'atom',175,'undefined'}|[{'type',175,'integer',[]}]]}}|[{'typed_record_field',{'record_field',176,{'atom',176,'modifiers'}},{'type',176,'union',[{'atom',176,'undefined'}|[{'type',176,'integer',[]}]]}}|[{'typed_record_field',{'record_field',177,{'atom',177,'modificationType'}},{'type',177,'union',[{'atom',177,'undefined'}|[{'type',177,'integer',[]}]]}}|[{'typed_record_field',{'record_field',178,{'atom',178,'text'}},{'type',178,'union',[{'atom',178,'undefined'}|[{'remote_type',178,[{'atom',178,'unicode'}|[{'atom',178,'chardata'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',179,{'atom',179,'length'}},{'type',179,'union',[{'atom',179,'undefined'}|[{'type',179,'integer',[]}]]}}|[{'typed_record_field',{'record_field',180,{'atom',180,'linesAdded'}},{'type',180,'union',[{'atom',180,'undefined'}|[{'type',180,'integer',[]}]]}}|[{'typed_record_field',{'record_field',181,{'atom',181,'line'}},{'type',181,'union',[{'atom',181,'undefined'}|[{'type',181,'integer',[]}]]}}|[{'typed_record_field',{'record_field',182,{'atom',182,'foldLevelNow'}},{'type',182,'union',[{'atom',182,'undefined'}|[{'type',182,'integer',[]}]]}}|[{'typed_record_field',{'record_field',183,{'atom',183,'foldLevelPrev'}},{'type',183,'union',[{'atom',183,'undefined'}|[{'type',183,'integer',[]}]]}}|[{'typed_record_field',{'record_field',184,{'atom',184,'margin'}},{'type',184,'union',[{'atom',184,'undefined'}|[{'type',184,'integer',[]}]]}}|[{'typed_record_field',{'record_field',185,{'atom',185,'message'}},{'type',185,'union',[{'atom',185,'undefined'}|[{'type',185,'integer',[]}]]}}|[{'typed_record_field',{'record_field',186,{'atom',186,'wParam'}},{'type',186,'union',[{'atom',186,'undefined'}|[{'type',186,'integer',[]}]]}}|[{'typed_record_field',{'record_field',187,{'atom',187,'lParam'}},{'type',187,'union',[{'atom',187,'undefined'}|[{'type',187,'integer',[]}]]}}|[{'typed_record_field',{'record_field',188,{'atom',188,'listType'}},{'type',188,'union',[{'atom',188,'undefined'}|[{'type',188,'integer',[]}]]}}|[{'typed_record_field',{'record_field',189,{'atom',189,'x'}},{'type',189,'union',[{'atom',189,'undefined'}|[{'type',189,'integer',[]}]]}}|[{'typed_record_field',{'record_field',190,{'atom',190,'y'}},{'type',190,'union',[{'atom',190,'undefined'}|[{'type',190,'integer',[]}]]}}|[{'typed_record_field',{'record_field',191,{'atom',191,'dragText'}},{'type',191,'union',[{'atom',191,'undefined'}|[{'remote_type',191,[{'atom',191,'unicode'}|[{'atom',191,'chardata'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',192,{'atom',192,'dragAllowMove'}},{'type',192,'union',[{'atom',192,'undefined'}|[{'type',192,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',193,{'atom',193,'dragResult'}},{'type',193,'union',[{'atom',193,'undefined'}|[{'remote_type',193,[{'atom',193,'wx'}|[{'atom',193,'wx_enum'}|[[]]]]}]]}}]]]]]]]]]]]]]]]]]]]]],[]}],
		%% Line 194
		'type' =
		    %% Line 194
		    [{'wxStyledTextEventType',{'type',194,'union',[{'atom',194,'stc_change'}|[{'atom',194,'stc_styleneeded'}|[{'atom',194,'stc_charadded'}|[{'atom',194,'stc_savepointreached'}|[{'atom',194,'stc_savepointleft'}|[{'atom',194,'stc_romodifyattempt'}|[{'atom',194,'stc_key'}|[{'atom',194,'stc_doubleclick'}|[{'atom',194,'stc_updateui'}|[{'atom',194,'stc_modified'}|[{'atom',194,'stc_macrorecord'}|[{'atom',194,'stc_marginclick'}|[{'atom',194,'stc_needshown'}|[{'atom',194,'stc_painted'}|[{'atom',194,'stc_userlistselection'}|[{'atom',194,'stc_uridropped'}|[{'atom',194,'stc_dwellstart'}|[{'atom',194,'stc_dwellend'}|[{'atom',194,'stc_start_drag'}|[{'atom',194,'stc_drag_over'}|[{'atom',194,'stc_do_drop'}|[{'atom',194,'stc_zoom'}|[{'atom',194,'stc_hotspot_click'}|[{'atom',194,'stc_hotspot_dclick'}|[{'atom',194,'stc_calltip_click'}|[{'atom',194,'stc_autocomp_selection'}]]]]]]]]]]]]]]]]]]]]]]]]]]},[]}],
		%% Line 195
		'type' =
		    %% Line 195
		    [{'wxStyledText',{'type',195,'record',[{'atom',195,'wxStyledText'}]},[]}],
		%% Line 197
		'type' =
		    %% Line 197
		    [{{'record','wxSysColourChanged'},[{'typed_record_field',{'record_field',197,{'atom',197,'type'}},{'type',197,'union',[{'atom',197,'undefined'}|[{'type',197,'wxSysColourChangedEventType',[]}]]}}],[]}],
		%% Line 198
		'type' =
		    %% Line 198
		    [{'wxSysColourChangedEventType',{'atom',198,'sys_colour_changed'},[]}],
		%% Line 199
		'type' =
		    %% Line 199
		    [{'wxSysColourChanged',{'type',199,'record',[{'atom',199,'wxSysColourChanged'}]},[]}],
		%% Line 201
		'type' =
		    %% Line 201
		    [{{'record','wxGrid'},[{'typed_record_field',{'record_field',201,{'atom',201,'type'}},{'type',201,'union',[{'atom',201,'undefined'}|[{'type',201,'wxGridEventType',[]}]]}}|[{'typed_record_field',{'record_field',202,{'atom',202,'row'}},{'type',202,'union',[{'atom',202,'undefined'}|[{'type',202,'integer',[]}]]}}|[{'typed_record_field',{'record_field',203,{'atom',203,'col'}},{'type',203,'union',[{'atom',203,'undefined'}|[{'type',203,'integer',[]}]]}}|[{'typed_record_field',{'record_field',204,{'atom',204,'x'}},{'type',204,'union',[{'atom',204,'undefined'}|[{'type',204,'integer',[]}]]}}|[{'typed_record_field',{'record_field',205,{'atom',205,'y'}},{'type',205,'union',[{'atom',205,'undefined'}|[{'type',205,'integer',[]}]]}}|[{'typed_record_field',{'record_field',206,{'atom',206,'selecting'}},{'type',206,'union',[{'atom',206,'undefined'}|[{'type',206,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',207,{'atom',207,'control'}},{'type',207,'union',[{'atom',207,'undefined'}|[{'type',207,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',208,{'atom',208,'meta'}},{'type',208,'union',[{'atom',208,'undefined'}|[{'type',208,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',209,{'atom',209,'shift'}},{'type',209,'union',[{'atom',209,'undefined'}|[{'type',209,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',210,{'atom',210,'alt'}},{'type',210,'union',[{'atom',210,'undefined'}|[{'type',210,'boolean',[]}]]}}]]]]]]]]]],[]}],
		%% Line 211
		'type' =
		    %% Line 211
		    [{'wxGridEventType',{'type',211,'union',[{'atom',211,'grid_cell_left_click'}|[{'atom',211,'grid_cell_right_click'}|[{'atom',211,'grid_cell_left_dclick'}|[{'atom',211,'grid_cell_right_dclick'}|[{'atom',211,'grid_label_left_click'}|[{'atom',211,'grid_label_right_click'}|[{'atom',211,'grid_label_left_dclick'}|[{'atom',211,'grid_label_right_dclick'}|[{'atom',211,'grid_row_size'}|[{'atom',211,'grid_col_size'}|[{'atom',211,'grid_range_select'}|[{'atom',211,'grid_cell_change'}|[{'atom',211,'grid_select_cell'}|[{'atom',211,'grid_editor_shown'}|[{'atom',211,'grid_editor_hidden'}|[{'atom',211,'grid_editor_created'}|[{'atom',211,'grid_cell_begin_drag'}]]]]]]]]]]]]]]]]]},[]}],
		%% Line 212
		'type' =
		    %% Line 212
		    [{'wxGrid',{'type',212,'record',[{'atom',212,'wxGrid'}]},[]}],
		%% Line 214
		'type' =
		    %% Line 214
		    [{{'record','wxPaletteChanged'},[{'typed_record_field',{'record_field',214,{'atom',214,'type'}},{'type',214,'union',[{'atom',214,'undefined'}|[{'type',214,'wxPaletteChangedEventType',[]}]]}}],[]}],
		%% Line 215
		'type' =
		    %% Line 215
		    [{'wxPaletteChangedEventType',{'atom',215,'palette_changed'},[]}],
		%% Line 216
		'type' =
		    %% Line 216
		    [{'wxPaletteChanged',{'type',216,'record',[{'atom',216,'wxPaletteChanged'}]},[]}],
		%% Line 218
		'type' =
		    %% Line 218
		    [{{'record','wxUpdateUI'},[{'typed_record_field',{'record_field',218,{'atom',218,'type'}},{'type',218,'union',[{'atom',218,'undefined'}|[{'type',218,'wxUpdateUIEventType',[]}]]}}],[]}],
		%% Line 219
		'type' =
		    %% Line 219
		    [{'wxUpdateUIEventType',{'atom',219,'update_ui'},[]}],
		%% Line 220
		'type' =
		    %% Line 220
		    [{'wxUpdateUI',{'type',220,'record',[{'atom',220,'wxUpdateUI'}]},[]}],
		%% Line 222
		'type' =
		    %% Line 222
		    [{{'record','wxSize'},[{'typed_record_field',{'record_field',222,{'atom',222,'type'}},{'type',222,'union',[{'atom',222,'undefined'}|[{'type',222,'wxSizeEventType',[]}]]}}|[{'typed_record_field',{'record_field',223,{'atom',223,'size'}},{'type',223,'union',[{'atom',223,'undefined'}|[{'type',223,'tuple',[{'ann_type',223,[{'var',223,'W'}|[{'type',223,'integer',[]}]]}|[{'ann_type',223,[{'var',223,'H'}|[{'type',223,'integer',[]}]]}]]}]]}}|[{'typed_record_field',{'record_field',224,{'atom',224,'rect'}},{'type',224,'union',[{'atom',224,'undefined'}|[{'type',224,'tuple',[{'ann_type',224,[{'var',224,'X'}|[{'type',224,'integer',[]}]]}|[{'ann_type',224,[{'var',224,'Y'}|[{'type',224,'integer',[]}]]}|[{'ann_type',224,[{'var',224,'W'}|[{'type',224,'integer',[]}]]}|[{'ann_type',224,[{'var',224,'H'}|[{'type',224,'integer',[]}]]}]]]]}]]}}]]],[]}],
		%% Line 225
		'type' =
		    %% Line 225
		    [{'wxSizeEventType',{'atom',225,'size'},[]}],
		%% Line 226
		'type' =
		    %% Line 226
		    [{'wxSize',{'type',226,'record',[{'atom',226,'wxSize'}]},[]}],
		%% Line 228
		'type' =
		    %% Line 228
		    [{{'record','wxIconize'},[{'typed_record_field',{'record_field',228,{'atom',228,'type'}},{'type',228,'union',[{'atom',228,'undefined'}|[{'type',228,'wxIconizeEventType',[]}]]}}],[]}],
		%% Line 229
		'type' =
		    %% Line 229
		    [{'wxIconizeEventType',{'atom',229,'iconize'},[]}],
		%% Line 230
		'type' =
		    %% Line 230
		    [{'wxIconize',{'type',230,'record',[{'atom',230,'wxIconize'}]},[]}],
		%% Line 232
		'type' =
		    %% Line 232
		    [{{'record','wxAuiNotebook'},[{'typed_record_field',{'record_field',232,{'atom',232,'type'}},{'type',232,'union',[{'atom',232,'undefined'}|[{'type',232,'wxAuiNotebookEventType',[]}]]}}|[{'typed_record_field',{'record_field',233,{'atom',233,'old_selection'}},{'type',233,'union',[{'atom',233,'undefined'}|[{'type',233,'integer',[]}]]}}|[{'typed_record_field',{'record_field',234,{'atom',234,'selection'}},{'type',234,'union',[{'atom',234,'undefined'}|[{'type',234,'integer',[]}]]}}|[{'typed_record_field',{'record_field',235,{'atom',235,'drag_source'}},{'type',235,'union',[{'atom',235,'undefined'}|[{'remote_type',235,[{'atom',235,'wxAuiNotebook'}|[{'atom',235,'wxAuiNotebook'}|[[]]]]}]]}}]]]],[]}],
		%% Line 236
		'type' =
		    %% Line 236
		    [{'wxAuiNotebookEventType',{'type',236,'union',[{'atom',236,'command_auinotebook_page_close'}|[{'atom',236,'command_auinotebook_page_changed'}|[{'atom',236,'command_auinotebook_page_changing'}|[{'atom',236,'command_auinotebook_button'}|[{'atom',236,'command_auinotebook_begin_drag'}|[{'atom',236,'command_auinotebook_end_drag'}|[{'atom',236,'command_auinotebook_drag_motion'}|[{'atom',236,'command_auinotebook_allow_dnd'}|[{'atom',236,'command_auinotebook_tab_middle_down'}|[{'atom',236,'command_auinotebook_tab_middle_up'}|[{'atom',236,'command_auinotebook_tab_right_down'}|[{'atom',236,'command_auinotebook_tab_right_up'}|[{'atom',236,'command_auinotebook_page_closed'}|[{'atom',236,'command_auinotebook_drag_done'}|[{'atom',236,'command_auinotebook_bg_dclick'}]]]]]]]]]]]]]]]},[]}],
		%% Line 237
		'type' =
		    %% Line 237
		    [{'wxAuiNotebook',{'type',237,'record',[{'atom',237,'wxAuiNotebook'}]},[]}],
		%% Line 239
		'type' =
		    %% Line 239
		    [{{'record','wxClose'},[{'typed_record_field',{'record_field',239,{'atom',239,'type'}},{'type',239,'union',[{'atom',239,'undefined'}|[{'type',239,'wxCloseEventType',[]}]]}}],[]}],
		%% Line 240
		'type' =
		    %% Line 240
		    [{'wxCloseEventType',{'type',240,'union',[{'atom',240,'close_window'}|[{'atom',240,'end_session'}|[{'atom',240,'query_end_session'}]]]},[]}],
		%% Line 241
		'type' =
		    %% Line 241
		    [{'wxClose',{'type',241,'record',[{'atom',241,'wxClose'}]},[]}],
		%% Line 243
		'type' =
		    %% Line 243
		    [{{'record','wxMouseCaptureChanged'},[{'typed_record_field',{'record_field',243,{'atom',243,'type'}},{'type',243,'union',[{'atom',243,'undefined'}|[{'type',243,'wxMouseCaptureChangedEventType',[]}]]}}],[]}],
		%% Line 244
		'type' =
		    %% Line 244
		    [{'wxMouseCaptureChangedEventType',{'atom',244,'mouse_capture_changed'},[]}],
		%% Line 245
		'type' =
		    %% Line 245
		    [{'wxMouseCaptureChanged',{'type',245,'record',[{'atom',245,'wxMouseCaptureChanged'}]},[]}],
		%% Line 247
		'type' =
		    %% Line 247
		    [{{'record','wxMouse'},[{'typed_record_field',{'record_field',247,{'atom',247,'type'}},{'type',247,'union',[{'atom',247,'undefined'}|[{'type',247,'wxMouseEventType',[]}]]}}|[{'typed_record_field',{'record_field',248,{'atom',248,'x'}},{'type',248,'union',[{'atom',248,'undefined'}|[{'type',248,'integer',[]}]]}}|[{'typed_record_field',{'record_field',249,{'atom',249,'y'}},{'type',249,'union',[{'atom',249,'undefined'}|[{'type',249,'integer',[]}]]}}|[{'typed_record_field',{'record_field',250,{'atom',250,'leftDown'}},{'type',250,'union',[{'atom',250,'undefined'}|[{'type',250,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',251,{'atom',251,'middleDown'}},{'type',251,'union',[{'atom',251,'undefined'}|[{'type',251,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',252,{'atom',252,'rightDown'}},{'type',252,'union',[{'atom',252,'undefined'}|[{'type',252,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',253,{'atom',253,'controlDown'}},{'type',253,'union',[{'atom',253,'undefined'}|[{'type',253,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',254,{'atom',254,'shiftDown'}},{'type',254,'union',[{'atom',254,'undefined'}|[{'type',254,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',255,{'atom',255,'altDown'}},{'type',255,'union',[{'atom',255,'undefined'}|[{'type',255,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',256,{'atom',256,'metaDown'}},{'type',256,'union',[{'atom',256,'undefined'}|[{'type',256,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',257,{'atom',257,'wheelRotation'}},{'type',257,'union',[{'atom',257,'undefined'}|[{'type',257,'integer',[]}]]}}|[{'typed_record_field',{'record_field',258,{'atom',258,'wheelDelta'}},{'type',258,'union',[{'atom',258,'undefined'}|[{'type',258,'integer',[]}]]}}|[{'typed_record_field',{'record_field',259,{'atom',259,'linesPerAction'}},{'type',259,'union',[{'atom',259,'undefined'}|[{'type',259,'integer',[]}]]}}]]]]]]]]]]]]],[]}],
		%% Line 260
		'type' =
		    %% Line 260
		    [{'wxMouseEventType',{'type',260,'union',[{'atom',260,'left_down'}|[{'atom',260,'left_up'}|[{'atom',260,'middle_down'}|[{'atom',260,'middle_up'}|[{'atom',260,'right_down'}|[{'atom',260,'right_up'}|[{'atom',260,'motion'}|[{'atom',260,'enter_window'}|[{'atom',260,'leave_window'}|[{'atom',260,'left_dclick'}|[{'atom',260,'middle_dclick'}|[{'atom',260,'right_dclick'}|[{'atom',260,'mousewheel'}]]]]]]]]]]]]]},[]}],
		%% Line 261
		'type' =
		    %% Line 261
		    [{'wxMouse',{'type',261,'record',[{'atom',261,'wxMouse'}]},[]}],
		%% Line 263
		'type' =
		    %% Line 263
		    [{{'record','wxClipboardText'},[{'typed_record_field',{'record_field',263,{'atom',263,'type'}},{'type',263,'union',[{'atom',263,'undefined'}|[{'type',263,'wxClipboardTextEventType',[]}]]}}],[]}],
		%% Line 264
		'type' =
		    %% Line 264
		    [{'wxClipboardTextEventType',{'type',264,'union',[{'atom',264,'command_text_copy'}|[{'atom',264,'command_text_cut'}|[{'atom',264,'command_text_paste'}]]]},[]}],
		%% Line 265
		'type' =
		    %% Line 265
		    [{'wxClipboardText',{'type',265,'record',[{'atom',265,'wxClipboardText'}]},[]}],
		%% Line 267
		'type' =
		    %% Line 267
		    [{{'record','wxWindowCreate'},[{'typed_record_field',{'record_field',267,{'atom',267,'type'}},{'type',267,'union',[{'atom',267,'undefined'}|[{'type',267,'wxWindowCreateEventType',[]}]]}}],[]}],
		%% Line 268
		'type' =
		    %% Line 268
		    [{'wxWindowCreateEventType',{'atom',268,'create'},[]}],
		%% Line 269
		'type' =
		    %% Line 269
		    [{'wxWindowCreate',{'type',269,'record',[{'atom',269,'wxWindowCreate'}]},[]}],
		%% Line 271
		'type' =
		    %% Line 271
		    [{{'record','wxAuiManager'},[{'typed_record_field',{'record_field',271,{'atom',271,'type'}},{'type',271,'union',[{'atom',271,'undefined'}|[{'type',271,'wxAuiManagerEventType',[]}]]}}|[{'typed_record_field',{'record_field',272,{'atom',272,'manager'}},{'type',272,'union',[{'atom',272,'undefined'}|[{'remote_type',272,[{'atom',272,'wxAuiManager'}|[{'atom',272,'wxAuiManager'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',273,{'atom',273,'pane'}},{'type',273,'union',[{'atom',273,'undefined'}|[{'remote_type',273,[{'atom',273,'wxAuiPaneInfo'}|[{'atom',273,'wxAuiPaneInfo'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',274,{'atom',274,'button'}},{'type',274,'union',[{'atom',274,'undefined'}|[{'type',274,'integer',[]}]]}}|[{'typed_record_field',{'record_field',275,{'atom',275,'veto_flag'}},{'type',275,'union',[{'atom',275,'undefined'}|[{'type',275,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',276,{'atom',276,'canveto_flag'}},{'type',276,'union',[{'atom',276,'undefined'}|[{'type',276,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',277,{'atom',277,'dc'}},{'type',277,'union',[{'atom',277,'undefined'}|[{'remote_type',277,[{'atom',277,'wxDC'}|[{'atom',277,'wxDC'}|[[]]]]}]]}}]]]]]]],[]}],
		%% Line 278
		'type' =
		    %% Line 278
		    [{'wxAuiManagerEventType',{'type',278,'union',[{'atom',278,'aui_pane_button'}|[{'atom',278,'aui_pane_close'}|[{'atom',278,'aui_pane_maximize'}|[{'atom',278,'aui_pane_restore'}|[{'atom',278,'aui_render'}|[{'atom',278,'aui_find_manager'}]]]]]]},[]}],
		%% Line 279
		'type' =
		    %% Line 279
		    [{'wxAuiManager',{'type',279,'record',[{'atom',279,'wxAuiManager'}]},[]}],
		%% Line 281
		'type' =
		    %% Line 281
		    [{{'record','wxInitDialog'},[{'typed_record_field',{'record_field',281,{'atom',281,'type'}},{'type',281,'union',[{'atom',281,'undefined'}|[{'type',281,'wxInitDialogEventType',[]}]]}}],[]}],
		%% Line 282
		'type' =
		    %% Line 282
		    [{'wxInitDialogEventType',{'atom',282,'init_dialog'},[]}],
		%% Line 283
		'type' =
		    %% Line 283
		    [{'wxInitDialog',{'type',283,'record',[{'atom',283,'wxInitDialog'}]},[]}],
		%% Line 285
		'type' =
		    %% Line 285
		    [{{'record','wxCommand'},[{'typed_record_field',{'record_field',285,{'atom',285,'type'}},{'type',285,'union',[{'atom',285,'undefined'}|[{'type',285,'wxCommandEventType',[]}]]}}|[{'typed_record_field',{'record_field',286,{'atom',286,'cmdString'}},{'type',286,'union',[{'atom',286,'undefined'}|[{'remote_type',286,[{'atom',286,'unicode'}|[{'atom',286,'chardata'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',287,{'atom',287,'commandInt'}},{'type',287,'union',[{'atom',287,'undefined'}|[{'type',287,'integer',[]}]]}}|[{'typed_record_field',{'record_field',288,{'atom',288,'extraLong'}},{'type',288,'union',[{'atom',288,'undefined'}|[{'type',288,'integer',[]}]]}}]]]],[]}],
		%% Line 289
		'type' =
		    %% Line 289
		    [{'wxCommandEventType',{'type',289,'union',[{'atom',289,'command_button_clicked'}|[{'atom',289,'command_checkbox_clicked'}|[{'atom',289,'command_choice_selected'}|[{'atom',289,'command_listbox_selected'}|[{'atom',289,'command_listbox_doubleclicked'}|[{'atom',289,'command_text_updated'}|[{'atom',289,'command_text_enter'}|[{'atom',289,'command_menu_selected'}|[{'atom',289,'command_slider_updated'}|[{'atom',289,'command_radiobox_selected'}|[{'atom',289,'command_radiobutton_selected'}|[{'atom',289,'command_scrollbar_updated'}|[{'atom',289,'command_vlbox_selected'}|[{'atom',289,'command_combobox_selected'}|[{'atom',289,'command_tool_rclicked'}|[{'atom',289,'command_tool_enter'}|[{'atom',289,'command_checklistbox_toggled'}|[{'atom',289,'command_togglebutton_clicked'}|[{'atom',289,'command_left_click'}|[{'atom',289,'command_left_dclick'}|[{'atom',289,'command_right_click'}|[{'atom',289,'command_set_focus'}|[{'atom',289,'command_kill_focus'}|[{'atom',289,'command_enter'}]]]]]]]]]]]]]]]]]]]]]]]]},[]}],
		%% Line 290
		'type' =
		    %% Line 290
		    [{'wxCommand',{'type',290,'record',[{'atom',290,'wxCommand'}]},[]}],
		%% Line 292
		'type' =
		    %% Line 292
		    [{{'record','wxJoystick'},[{'typed_record_field',{'record_field',292,{'atom',292,'type'}},{'type',292,'union',[{'atom',292,'undefined'}|[{'type',292,'wxJoystickEventType',[]}]]}}],[]}],
		%% Line 293
		'type' =
		    %% Line 293
		    [{'wxJoystickEventType',{'type',293,'union',[{'atom',293,'joy_button_down'}|[{'atom',293,'joy_button_up'}|[{'atom',293,'joy_move'}|[{'atom',293,'joy_zmove'}]]]]},[]}],
		%% Line 294
		'type' =
		    %% Line 294
		    [{'wxJoystick',{'type',294,'record',[{'atom',294,'wxJoystick'}]},[]}],
		%% Line 296
		'type' =
		    %% Line 296
		    [{{'record','wxQueryNewPalette'},[{'typed_record_field',{'record_field',296,{'atom',296,'type'}},{'type',296,'union',[{'atom',296,'undefined'}|[{'type',296,'wxQueryNewPaletteEventType',[]}]]}}],[]}],
		%% Line 297
		'type' =
		    %% Line 297
		    [{'wxQueryNewPaletteEventType',{'atom',297,'query_new_palette'},[]}],
		%% Line 298
		'type' =
		    %% Line 298
		    [{'wxQueryNewPalette',{'type',298,'record',[{'atom',298,'wxQueryNewPalette'}]},[]}],
		%% Line 300
		'type' =
		    %% Line 300
		    [{{'record','wxMove'},[{'typed_record_field',{'record_field',300,{'atom',300,'type'}},{'type',300,'union',[{'atom',300,'undefined'}|[{'type',300,'wxMoveEventType',[]}]]}}],[]}],
		%% Line 301
		'type' =
		    %% Line 301
		    [{'wxMoveEventType',{'atom',301,'move'},[]}],
		%% Line 302
		'type' =
		    %% Line 302
		    [{'wxMove',{'type',302,'record',[{'atom',302,'wxMove'}]},[]}],
		%% Line 304
		'type' =
		    %% Line 304
		    [{{'record','wxIdle'},[{'typed_record_field',{'record_field',304,{'atom',304,'type'}},{'type',304,'union',[{'atom',304,'undefined'}|[{'type',304,'wxIdleEventType',[]}]]}}],[]}],
		%% Line 305
		'type' =
		    %% Line 305
		    [{'wxIdleEventType',{'atom',305,'idle'},[]}],
		%% Line 306
		'type' =
		    %% Line 306
		    [{'wxIdle',{'type',306,'record',[{'atom',306,'wxIdle'}]},[]}],
		%% Line 308
		'type' =
		    %% Line 308
		    [{{'record','wxColourPicker'},[{'typed_record_field',{'record_field',308,{'atom',308,'type'}},{'type',308,'union',[{'atom',308,'undefined'}|[{'type',308,'wxColourPickerEventType',[]}]]}}|[{'typed_record_field',{'record_field',309,{'atom',309,'colour'}},{'type',309,'union',[{'atom',309,'undefined'}|[{'remote_type',309,[{'atom',309,'wx'}|[{'atom',309,'wx_colour'}|[[]]]]}]]}}]],[]}],
		%% Line 310
		'type' =
		    %% Line 310
		    [{'wxColourPickerEventType',{'atom',310,'command_colourpicker_changed'},[]}],
		%% Line 311
		'type' =
		    %% Line 311
		    [{'wxColourPicker',{'type',311,'record',[{'atom',311,'wxColourPicker'}]},[]}],
		%% Line 313
		'type' =
		    %% Line 313
		    [{{'record','wxTaskBarIcon'},[{'typed_record_field',{'record_field',313,{'atom',313,'type'}},{'type',313,'union',[{'atom',313,'undefined'}|[{'type',313,'wxTaskBarIconEventType',[]}]]}}],[]}],
		%% Line 314
		'type' =
		    %% Line 314
		    [{'wxTaskBarIconEventType',{'type',314,'union',[{'atom',314,'taskbar_move'}|[{'atom',314,'taskbar_left_down'}|[{'atom',314,'taskbar_left_up'}|[{'atom',314,'taskbar_right_down'}|[{'atom',314,'taskbar_right_up'}|[{'atom',314,'taskbar_left_dclick'}|[{'atom',314,'taskbar_right_dclick'}]]]]]]]},[]}],
		%% Line 315
		'type' =
		    %% Line 315
		    [{'wxTaskBarIcon',{'type',315,'record',[{'atom',315,'wxTaskBarIcon'}]},[]}],
		%% Line 317
		'type' =
		    %% Line 317
		    [{{'record','wxTree'},[{'typed_record_field',{'record_field',317,{'atom',317,'type'}},{'type',317,'union',[{'atom',317,'undefined'}|[{'type',317,'wxTreeEventType',[]}]]}}|[{'typed_record_field',{'record_field',318,{'atom',318,'item'}},{'type',318,'union',[{'atom',318,'undefined'}|[{'type',318,'integer',[]}]]}}|[{'typed_record_field',{'record_field',319,{'atom',319,'itemOld'}},{'type',319,'union',[{'atom',319,'undefined'}|[{'type',319,'integer',[]}]]}}|[{'typed_record_field',{'record_field',320,{'atom',320,'pointDrag'}},{'type',320,'union',[{'atom',320,'undefined'}|[{'type',320,'tuple',[{'ann_type',320,[{'var',320,'X'}|[{'type',320,'integer',[]}]]}|[{'ann_type',320,[{'var',320,'Y'}|[{'type',320,'integer',[]}]]}]]}]]}}]]]],[]}],
		%% Line 321
		'type' =
		    %% Line 321
		    [{'wxTreeEventType',{'type',321,'union',[{'atom',321,'command_tree_begin_drag'}|[{'atom',321,'command_tree_begin_rdrag'}|[{'atom',321,'command_tree_begin_label_edit'}|[{'atom',321,'command_tree_end_label_edit'}|[{'atom',321,'command_tree_delete_item'}|[{'atom',321,'command_tree_get_info'}|[{'atom',321,'command_tree_set_info'}|[{'atom',321,'command_tree_item_expanded'}|[{'atom',321,'command_tree_item_expanding'}|[{'atom',321,'command_tree_item_collapsed'}|[{'atom',321,'command_tree_item_collapsing'}|[{'atom',321,'command_tree_sel_changed'}|[{'atom',321,'command_tree_sel_changing'}|[{'atom',321,'command_tree_key_down'}|[{'atom',321,'command_tree_item_activated'}|[{'atom',321,'command_tree_item_right_click'}|[{'atom',321,'command_tree_item_middle_click'}|[{'atom',321,'command_tree_end_drag'}|[{'atom',321,'command_tree_state_image_click'}|[{'atom',321,'command_tree_item_gettooltip'}|[{'atom',321,'command_tree_item_menu'}]]]]]]]]]]]]]]]]]]]]]},[]}],
		%% Line 322
		'type' =
		    %% Line 322
		    [{'wxTree',{'type',322,'record',[{'atom',322,'wxTree'}]},[]}],
		%% Line 324
		'type' =
		    %% Line 324
		    [{'event',{'type',324,'union',[{'type',324,'wxActivate',[]}|[{'type',324,'wxAuiManager',[]}|[{'type',324,'wxAuiNotebook',[]}|[{'type',324,'wxCalendar',[]}|[{'type',324,'wxChildFocus',[]}|[{'type',324,'wxClipboardText',[]}|[{'type',324,'wxClose',[]}|[{'type',324,'wxColourPicker',[]}|[{'type',324,'wxCommand',[]}|[{'type',324,'wxContextMenu',[]}|[{'type',324,'wxDate',[]}|[{'type',324,'wxDisplayChanged',[]}|[{'type',324,'wxErase',[]}|[{'type',324,'wxFileDirPicker',[]}|[{'type',324,'wxFocus',[]}|[{'type',324,'wxFontPicker',[]}|[{'type',324,'wxGrid',[]}|[{'type',324,'wxHelp',[]}|[{'type',324,'wxHtmlLink',[]}|[{'type',324,'wxIconize',[]}|[{'type',324,'wxIdle',[]}|[{'type',324,'wxInitDialog',[]}|[{'type',324,'wxJoystick',[]}|[{'type',324,'wxKey',[]}|[{'type',324,'wxList',[]}|[{'type',324,'wxMaximize',[]}|[{'type',324,'wxMenu',[]}|[{'type',324,'wxMouse',[]}|[{'type',324,'wxMouseCaptureChanged',[]}|[{'type',324,'wxMove',[]}|[{'type',324,'wxNavigationKey',[]}|[{'type',324,'wxNotebook',[]}|[{'type',324,'wxPaint',[]}|[{'type',324,'wxPaletteChanged',[]}|[{'type',324,'wxQueryNewPalette',[]}|[{'type',324,'wxSash',[]}|[{'type',324,'wxScroll',[]}|[{'type',324,'wxScrollWin',[]}|[{'type',324,'wxSetCursor',[]}|[{'type',324,'wxShow',[]}|[{'type',324,'wxSize',[]}|[{'type',324,'wxSpin',[]}|[{'type',324,'wxSplitter',[]}|[{'type',324,'wxStyledText',[]}|[{'type',324,'wxSysColourChanged',[]}|[{'type',324,'wxTaskBarIcon',[]}|[{'type',324,'wxTree',[]}|[{'type',324,'wxUpdateUI',[]}|[{'type',324,'wxWindowCreate',[]}|[{'type',324,'wxWindowDestroy',[]}]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]},[]}],
		%% Line 325
		'type' =
		    %% Line 325
		    [{'wxEventType',{'type',325,'union',[{'type',325,'wxActivateEventType',[]}|[{'type',325,'wxAuiManagerEventType',[]}|[{'type',325,'wxAuiNotebookEventType',[]}|[{'type',325,'wxCalendarEventType',[]}|[{'type',325,'wxChildFocusEventType',[]}|[{'type',325,'wxClipboardTextEventType',[]}|[{'type',325,'wxCloseEventType',[]}|[{'type',325,'wxColourPickerEventType',[]}|[{'type',325,'wxCommandEventType',[]}|[{'type',325,'wxContextMenuEventType',[]}|[{'type',325,'wxDateEventType',[]}|[{'type',325,'wxDisplayChangedEventType',[]}|[{'type',325,'wxEraseEventType',[]}|[{'type',325,'wxFileDirPickerEventType',[]}|[{'type',325,'wxFocusEventType',[]}|[{'type',325,'wxFontPickerEventType',[]}|[{'type',325,'wxGridEventType',[]}|[{'type',325,'wxHelpEventType',[]}|[{'type',325,'wxHtmlLinkEventType',[]}|[{'type',325,'wxIconizeEventType',[]}|[{'type',325,'wxIdleEventType',[]}|[{'type',325,'wxInitDialogEventType',[]}|[{'type',325,'wxJoystickEventType',[]}|[{'type',325,'wxKeyEventType',[]}|[{'type',325,'wxListEventType',[]}|[{'type',325,'wxMaximizeEventType',[]}|[{'type',325,'wxMenuEventType',[]}|[{'type',325,'wxMouseCaptureChangedEventType',[]}|[{'type',325,'wxMouseEventType',[]}|[{'type',325,'wxMoveEventType',[]}|[{'type',325,'wxNavigationKeyEventType',[]}|[{'type',325,'wxNotebookEventType',[]}|[{'type',325,'wxPaintEventType',[]}|[{'type',325,'wxPaletteChangedEventType',[]}|[{'type',325,'wxQueryNewPaletteEventType',[]}|[{'type',325,'wxSashEventType',[]}|[{'type',325,'wxScrollEventType',[]}|[{'type',325,'wxScrollWinEventType',[]}|[{'type',325,'wxSetCursorEventType',[]}|[{'type',325,'wxShowEventType',[]}|[{'type',325,'wxSizeEventType',[]}|[{'type',325,'wxSpinEventType',[]}|[{'type',325,'wxSplitterEventType',[]}|[{'type',325,'wxStyledTextEventType',[]}|[{'type',325,'wxSysColourChangedEventType',[]}|[{'type',325,'wxTaskBarIconEventType',[]}|[{'type',325,'wxTreeEventType',[]}|[{'type',325,'wxUpdateUIEventType',[]}|[{'type',325,'wxWindowCreateEventType',[]}|[{'type',325,'wxWindowDestroyEventType',[]}]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]},[]}],
		%% Line 328
		'type' =
		    %% Line 328
		    [{{'record','wxMouseState'},[{'typed_record_field',{'record_field',328,{'atom',328,'x'}},{'type',328,'union',[{'atom',328,'undefined'}|[{'type',328,'integer',[]}]]}}|[{'typed_record_field',{'record_field',328,{'atom',328,'y'}},{'type',328,'union',[{'atom',328,'undefined'}|[{'type',328,'integer',[]}]]}}|[{'typed_record_field',{'record_field',329,{'atom',329,'leftDown'}},{'type',329,'union',[{'atom',329,'undefined'}|[{'type',329,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',329,{'atom',329,'middleDown'}},{'type',329,'union',[{'atom',329,'undefined'}|[{'atom',329,'boolean'}]]}}|[{'typed_record_field',{'record_field',329,{'atom',329,'rightDown'}},{'type',329,'union',[{'atom',329,'undefined'}|[{'atom',329,'boolean'}]]}}|[{'typed_record_field',{'record_field',330,{'atom',330,'controlDown'}},{'type',330,'union',[{'atom',330,'undefined'}|[{'type',330,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',330,{'atom',330,'shiftDown'}},{'type',330,'union',[{'atom',330,'undefined'}|[{'type',330,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',331,{'atom',331,'altDown'}},{'type',331,'union',[{'atom',331,'undefined'}|[{'type',331,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',331,{'atom',331,'metaDown'}},{'type',331,'union',[{'atom',331,'undefined'}|[{'type',331,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',331,{'atom',331,'cmdDown'}},{'type',331,'union',[{'atom',331,'undefined'}|[{'type',331,'boolean',[]}]]}}]]]]]]]]]],[]}],
		%% Line 333
		'type' =
		    %% Line 333
		    [{{'record','wxHtmlLinkInfo'},[{'typed_record_field',{'record_field',334,{'atom',334,'href'}},{'type',334,'union',[{'atom',334,'undefined'}|[{'remote_type',334,[{'atom',334,'unicode'}|[{'atom',334,'chardata'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',334,{'atom',334,'target'}},{'type',334,'union',[{'atom',334,'undefined'}|[{'remote_type',334,[{'atom',334,'unicode'}|[{'atom',334,'chardata'}|[[]]]]}]]}}]],[]}],
		%% Line 35
		'type' =
		    %% Line 35
		    [{{'record','pinfo'},[{'record_field',35,{'atom',35,'pid'}}|[{'record_field',36,{'atom',36,'status'}}]],[]}],
		%% Line 39
		'type' =
		    %% Line 39
		    [{{'record','state'},[{'record_field',39,{'atom',39,'mode'}}|[{'record_field',40,{'atom',40,'starter'}}|[{'record_field',42,{'atom',42,'win'}}|[{'record_field',43,{'atom',43,'focus'}}|[{'record_field',44,{'atom',44,'coords'}}|[{'record_field',46,{'atom',46,'intdir'}}|[{'record_field',47,{'atom',47,'pinfos'}}|[{'record_field',49,{'atom',49,'tracewin'}}|[{'record_field',50,{'atom',50,'backtrace'}}|[{'record_field',51,{'atom',51,'strings'}}|[{'record_field',53,{'atom',53,'attach'}}|[{'record_field',55,{'atom',55,'sfile'}}|[{'record_field',56,{'atom',56,'changed'}}]]]]]]]]]]]]],[]}]]
'start'/2 =
    %% Line 70
    fun (_cor1,_cor0) ->
	%% Line 71
	case call 'erlang':'whereis'
		 ('dbg_wx_mon') of
	  %% Line 72
	  <'undefined'> when 'true' ->
	      let <CallingPid> =
		  %% Line 73
		  call 'erlang':'self'
		      ()
	      in  let <_cor3> =
		      %% Line 74
		      ( fun () ->
			    apply 'init'/3
				(CallingPid, _cor1, _cor0)
			-| [{'id',{0,0,'-start/2-fun-0-'}}] )
		  in  let <Pid> =
			  %% Line 74
			  call 'erlang':'spawn'
			      (_cor3)
		      in  %% Line 75
			  receive
			    %% Line 76
			    <{'initialization_complete',_cor8}>
				when call 'erlang':'=:='
				      (_cor8,
				       Pid) ->
				%% Line 77
				{'ok',Pid}
			    %% Line 78
			    <Error> when 'true' ->
				%% Line 79
				Error
			  after 'infinity' ->
			    'true'
	  %% Line 82
	  <Pid> when 'true' ->
	      %% Line 83
	      {'error',{'already_started',Pid}}
	end
'stop'/0 =
    %% Line 89
    fun () ->
	%% Line 90
	case call 'erlang':'whereis'
		 ('dbg_wx_mon') of
	  %% Line 91
	  <'undefined'> when 'true' ->
	      %% Line 92
	      'ok'
	  %% Line 93
	  <Pid> when 'true' ->
	      let <Flag> =
		  %% Line 94
		  call 'erlang':'process_flag'
		      ('trap_exit', 'true')
	      in  do  %% Line 95
		      call 'erlang':'link'
			  (Pid)
		      do  %% Line 96
			  call 'erlang':'!'
			      (Pid, 'stop')
			  %% Line 97
			  receive
			    %% Line 98
			    <{'EXIT',_cor2,'stop'}>
				when call 'erlang':'=:='
				      (_cor2,
				       Pid) ->
				do  %% Line 99
				    call 'erlang':'process_flag'
					('trap_exit', Flag)
				    %% Line 100
				    'ok'
			  after 'infinity' ->
			    'true'
	end
'init'/3 =
    %% Line 109
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 110
	    call 'erlang':'self'
		()
	in  do  %% Line 110
		call 'erlang':'register'
		    ('dbg_wx_mon', _cor3)
		let <_cor4> =
		    catch
			%% Line 113
			call 'dbg_wx_mon_win':'init'
			    ()
		in  %% Line 113
		    case _cor4 of
		      %% Line 114
		      <{'EXIT',Reason}> when 'true' ->
			  %% Line 115
			  call 'erlang':'!'
			      (_cor2, {'error',Reason})
		      %% Line 116
		      <GS> when 'true' ->
			  %% Line 117
			  try
			      %% Line 118
			      apply 'init2'/4
				  (_cor2, _cor1, _cor0, GS)
			  of <_cor5> ->
			      _cor5
			  catch <_cor8,_cor7,_cor6> ->
			      case <_cor8,_cor7,_cor6> of
				%% Line 120
				<'exit','stop',_cor14> when 'true' ->
				    'stop'
				%% Line 121
				<Error,Reason,_cor15> when 'true' ->
				    let <_cor9> =
					%% Line 123
					call 'erlang':'get_stacktrace'
					    ()
				    in  %% Line 122
					call 'io':'format'
					    ([126|[112|[58|[32|[67|[114|[97|[115|[104|[101|[100|[32|[123|[126|[112|[44|[126|[112|[125|[32|[105|[110|[126|[110|[32|[32|[126|[112]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 123
																									     ['dbg_wx_mon'|[Error|[Reason|[_cor9|[]]]]])
			      end
		    end
'init2'/4 =
    %% Line 127
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 129
	    case call 'int':'start'
		     () of
	      %% Line 130
	      <{'ok',_X_Int}> when 'true' ->
		  'true'
	      %% Line 131
	      <{'error',{'already_started',_X_Int}}> when 'true' ->
		  'false'
	      ( <_cor4> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor4})
		-| ['compiler_generated'] )
	    end
	in  do  %% Line 133
		call 'int':'subscribe'
		    ()
		do  %% Line 136
		    call 'dbg_wx_win':'init'
			()
		    do  %% Line 137
			call 'dbg_wx_winman':'start'
			    ()
			let <_cor8> =
			    %% Line 141
			    apply 'menus'/0
				()
			in  let <Win> =
				%% Line 141
				call 'dbg_wx_mon_win':'create_win'
				    (_cor0, [77|[111|[110|[105|[116|[111|[114]]]]]]], _cor8)
			    in  let <Window> =
				    %% Line 142
				    call 'dbg_wx_mon_win':'get_window'
					(Win)
				in  do  %% Line 143
					call 'dbg_wx_winman':'insert'
					    ([77|[111|[110|[105|[116|[111|[114]]]]]]], Window)
					let <_cor11> =
					    %% Line 153
					    call 'file':'get_cwd'
						()
					in  let <_cor12> =
						%% Line 153
						call 'erlang':'element'
						    (2, _cor11)
					    in  let <State1> =
						    %% Line 146
						    {'state',_cor2,_cor5,%% Line 149
									 Win,%% Line 150
									     'undefined',%% Line 151
											 {-1,-1},_cor12,%% Line 154
													[],'undefined','undefined','undefined','undefined',_cor1,%% Line 157
																				 'false'}
						in  let <_cor17> =
							%% Line 161
							call 'int':'auto_attach'
							    ()
						    in  let <_cor16> =
							    %% Line 162
							    call 'int':'stack_trace'
								()
							in  let <State2> =
								%% Line 160
								apply 'init_options'/6
								    (['Search Area'|['Button Area'|['Evaluator Area'|['Bindings Area']]]], _cor17, _cor16, %% Line 163
																			   100, %% Line 164
																				['str_on'], %% Line 165
																					    State1)
							    in  let <_cor21> =
								    %% Line 167
								    call 'int':'interpreted'
									()
								in  let <_cor20> =
									%% Line 168
									call 'int':'all_breaks'
									    ()
								    in  let <_cor19> =
									    %% Line 169
									    call 'int':'snapshot'
										()
									in  let <State3> =
										%% Line 167
										apply 'init_contents'/4
										    (_cor21, _cor20, _cor19, %% Line 170
													     State2)
									    in  %% Line 173
										( case State3 of
										    ( <( {'state',_cor31,_cor32,_cor33,_rec0,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42}
											 -| ['compiler_generated'] )> when 'true' ->
											  do  apply 'gui_enable_functions'/1
												  (_rec0)
											      let <_cor25> =
												  %% Line 175
												  call 'erlang':'self'
												      ()
											      in  do  %% Line 175
												      call 'erlang':'!'
													  (_cor3, {'initialization_complete',_cor25})
												      %% Line 177
												      case <> of
													%% Line 178
													<>
													    when call 'erlang':'=:='
														  (_cor1,
														   'default') ->
													    %% Line 179
													    apply 'loop'/1
														(State3)
													%% Line 180
													<> when 'true' ->
													    let <_cor26> =
														%% Line 181
														apply 'load_settings'/2
														    (_cor1, State3)
													    in  %% Line 181
														apply 'loop'/1
														    (_cor26)
												      end
										      -| ['compiler_generated'] )
										    ( <_cor43> when 'true' ->
											  ( call ( 'erlang'
												   -| ['compiler_generated'] ):( 'error'
																 -| ['compiler_generated'] )
												(( {'badrecord','state'}
												   -| ['compiler_generated'] ))
											    -| ['compiler_generated'] )
										      -| ['compiler_generated'] )
										  end
										  -| ['compiler_generated'] )
'init_options'/6 =
    %% Line 184
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor8> =
	    %% Line 185
	    ( fun (_cor6) ->
		  %% Line 186
		  call 'dbg_wx_mon_win':'select'
		      (_cor6, 'true')
	      -| [{'id',{0,0,'-init_options/6-fun-0-'}}] )
	in  do  %% Line 185
		call 'lists':'foreach'
		    (_cor8, _cor5)
		do  %% Line 190
		    case _cor4 of
		      %% Line 191
		      <'false'> when 'true' ->
			  'ok'
		      %% Line 192
		      <{Flags,_X_Function}> when 'true' ->
			  %% Line 193
			  ( case _cor0 of
			      ( <( {'state',_cor29,_cor30,_rec1,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40}
				   -| ['compiler_generated'] )> when 'true' ->
				    do  call 'dbg_wx_mon_win':'show_option'
					    (_rec1, %% Line 194
						    'auto_attach', %% Line 194
								   Flags)
					%% Line 195
					apply 'select'/2
					    (Flags, ['init'|['exit'|['break']]])
				-| ['compiler_generated'] )
			      ( <_cor41> when 'true' ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {'badrecord','state'}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
		      ( <_cor11> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor11})
			-| ['compiler_generated'] )
		    end
		    %% Line 198
		    ( case _cor0 of
			( <( {'state',_cor42,_cor43,_rec2,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53}
			     -| ['compiler_generated'] )> when 'true' ->
			      do  call 'dbg_wx_mon_win':'show_option'
				      (_rec2, %% Line 199
					      'stack_trace', _cor3)
				  let <_cor14> =
				      %% Line 200
				      apply 'map'/1
					  (_cor3)
				  in  do  %% Line 200
					  call 'dbg_wx_mon_win':'select'
					      (_cor14, 'true')
					  do  %% Line 202
					      call 'dbg_wx_mon_win':'show_option'
						  (_rec2, 'back_trace', _cor2)
					      do  %% Line 204
						  apply 'select'/2
						      (_cor1, ['str_on'])
						  do  %% Line 205
						      call 'dbg_wx_mon_win':'show_option'
							  (_rec2, 'strings', _cor1)
						      let <_cor20> =
							  %% Line 207
							  call 'erlang':'setelement'
							      (11, _cor0, _cor1)
						      in  let <_cor21> =
							      %% Line 207
							      call 'erlang':'setelement'
								  (10, _cor20, _cor2)
							  in  %% Line 207
							      call 'erlang':'setelement'
								  (9, _cor21, _cor5)
			  -| ['compiler_generated'] )
			( <_cor54> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','state'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
'init_contents'/4 =
    %% Line 209
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor10> =
	    %% Line 211
	    ( fun (_cor7,_cor6) ->
		  %% Line 212
		  call 'dbg_wx_mon_win':'add_module'
		      (_cor6, 'Module', _cor7)
	      -| [{'id',{0,0,'-init_contents/4-fun-0-'}}] )
	in  %% Line 214
	    ( case _cor0 of
		( <( {'state',_cor30,_cor31,_rec6,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41}
		     -| ['compiler_generated'] )> when 'true' ->
		      let <Win2> =
			  call 'lists':'foldl'
			      (_cor10, _rec6, _cor3)
		      in  let <_cor16> =
			      %% Line 218
			      ( fun (_cor13,_cor12) ->
				    %% Line 219
				    call 'dbg_wx_mon_win':'add_break'
					(_cor12, 'Break', _cor13)
				-| [{'id',{0,0,'-init_contents/4-fun-1-'}}] )
			  in  let <Win3> =
				  %% Line 218
				  call 'lists':'foldl'
				      (_cor16, %% Line 221
					       Win2, _cor2)
			      in  let <_cor25> =
				      %% Line 224
				      ( fun (_cor22,_cor21) ->
					    %% Line 225
					    apply 'int_cmd'/2
						({'new_process',_cor22}, _cor21)
					-| [{'id',{0,0,'-init_contents/4-fun-2-'}}] )
				  in  let <_cor20> =
					  %% Line 227
					  call 'erlang':'setelement'
					      (4, _cor0, Win3)
				      in  %% Line 224
					  call 'lists':'foldl'
					      (_cor25, _cor20, _cor1)
		  -| ['compiler_generated'] )
		( <_cor42> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','state'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	      -| ['compiler_generated'] )
'loop'/1 =
    %% Line 235
    fun (_cor0) ->
	%% Line 236
	receive
	  %% Line 237
	  <'stop'> when 'true' ->
	      %% Line 238
	      apply 'gui_cmd'/2
		  ('stopped', _cor0)
	  %% Line 241
	  <GuiEvent = {'wx',_cor18,_cor19,_cor20,_cor21}> when 'true' ->
	      %% Line 242
	      ( case _cor0 of
		  ( <( {'state',_cor22,_cor23,_rec8,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33}
		       -| ['compiler_generated'] )> when 'true' ->
			let <Cmd> =
			    call 'dbg_wx_mon_win':'handle_event'
				(GuiEvent, _rec8)
			in  let <State2> =
				%% Line 243
				apply 'gui_cmd'/2
				    (Cmd, _cor0)
			    in  %% Line 244
				apply 'loop'/1
				    (State2)
		    -| ['compiler_generated'] )
		  ( <_cor34> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 247
	  <{'int',Cmd}> when 'true' ->
	      let <State2> =
		  %% Line 248
		  apply 'int_cmd'/2
		      (Cmd, _cor0)
	      in  %% Line 249
		  apply 'loop'/1
		      (State2)
	  %% Line 252
	  <{'dbg_ui_interpret',Dir}> when 'true' ->
	      %% Line 253
	      case _cor0 of
		<{'state',_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47}> when 'true' ->
		    let <_cor8> =
			call 'erlang':'setelement'
			    (7, _cor0, Dir)
		    in  apply 'loop'/1
			    (_cor8)
		( <_cor48> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','state'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 256
	  <{'dbg_ui_winman','update_windows_menu',Data}> when 'true' ->
	      %% Line 257
	      ( case _cor0 of
		  ( <( {'state',_cor49,_cor50,_rec10,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60}
		       -| ['compiler_generated'] )> when 'true' ->
			let <Window> =
			    call 'dbg_wx_mon_win':'get_window'
				(_rec10)
			in  do  %% Line 258
				call 'dbg_wx_winman':'update_windows_menu'
				    (Window, Data)
				%% Line 259
				apply 'loop'/1
				    (_cor0)
		    -| ['compiler_generated'] )
		  ( <_cor61> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 262
	  <{'dbg_wx_trace',From,'get_env'}> when 'true' ->
	      let <_cor16> =
		  %% Line 263
		  call 'erlang':'self'
		      ()
	      in  let <_cor15> =
		      %% Line 263
		      call 'wx':'get_env'
			  ()
		  in  %% Line 263
		      ( case _cor0 of
			  ( <( {'state',_cor62,_cor63,_rec11,_cor64,_cor65,_cor66,_cor67,_cor68,_cor69,_cor70,_cor71,_cor72,_cor73}
			       -| ['compiler_generated'] )> when 'true' ->
				let <_cor14> =
				    call 'dbg_wx_mon_win':'get_window'
					(_rec11)
				in  do  call 'erlang':'!'
					    (From, {'env',_cor16,_cor15,_cor14})
					%% Line 264
					apply 'loop'/1
					    (_cor0)
			    -| ['compiler_generated'] )
			  ( <_cor74> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','state'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
	after 'infinity' ->
	  'true'
'gui_cmd'/2 =
    %% Line 272
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'ignore',State> when 'true' ->
	      %% Line 273
	      State
	  %% Line 274
	  <'stopped',State> when 'true' ->
	      do  %% Line 275
		  case <> of
		    %% Line 276
		    <>
			when ( try
				( case <> of
				    ( <>
					  when ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'is_record'
										   -| ['compiler_generated'] )
						  (State,
						   ( 'state'
						     -| ['compiler_generated'] ),
						   ( 14
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] ) ->
					  let <_cor6> =
					      ( call 'erlang':'element'
						    (3, State)
						-| ['compiler_generated'] )
					  in  ( call 'erlang':'=:='
						    (_cor6, 'true')
						-| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				    ( <> when 'true' ->
					  'false'
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
			    of <Try> ->
				Try
			    catch <T,R> ->
				'false'
			    -| ['compiler_generated'] ) ->
			call 'int':'stop'
			    ()
		    %% Line 277
		    <> when 'true' ->
			call 'int':'auto_attach'
			    ('false')
		  end
		  %% Line 279
		  call 'erlang':'exit'
		      ('stop')
	  %% Line 280
	  <{'coords',Coords},State> when 'true' ->
	      %% Line 281
	      case State of
		<{'state',_cor179,_cor180,_cor181,_cor182,_cor183,_cor184,_cor185,_cor186,_cor187,_cor188,_cor189,_cor190,_cor191}> when 'true' ->
		    call 'erlang':'setelement'
			(6, State, Coords)
		( <_cor192> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','state'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 283
	  <{'shortcut',Key},State> when 'true' ->
	      %% Line 284
	      case apply 'shortcut'/1
		       (Key) of
		%% Line 285
		<{'always',Cmd}> when 'true' ->
		    apply 'gui_cmd'/2
			(Cmd, State)
		%% Line 286
		<{'if_enabled',Cmd}> when 'true' ->
		    %% Line 287
		    case call 'dbg_wx_mon_win':'is_enabled'
			     (Cmd) of
		      %% Line 288
		      <'true'> when 'true' ->
			  apply 'gui_cmd'/2
			      (Cmd, State)
		      %% Line 289
		      <'false'> when 'true' ->
			  State
		      ( <_cor10> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor10})
			-| ['compiler_generated'] )
		    end
		%% Line 291
		<'false'> when 'true' ->
		    State
		( <_cor11> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor11})
		  -| ['compiler_generated'] )
	      end
	  %% Line 295
	  <'Load Settings...',State> when 'true' ->
	      %% Line 296
	      ( case State of
		  ( <( {'state',_cor193,_cor194,_rec13,_cor195,_cor196,_cor197,_cor198,_cor199,_cor200,_cor201,_cor202,_cor203,_cor204}
		       -| ['compiler_generated'] )> when 'true' ->
			let <Window> =
			    call 'dbg_wx_mon_win':'get_window'
				(_rec13)
			in  %% Line 297
			    case call 'dbg_wx_settings':'load'
				     (Window, _cor196, _cor203) of
			      %% Line 298
			      <'cancel'> when 'true' ->
				  State
			      %% Line 299
			      <{'ok',File}> when 'true' ->
				  apply 'load_settings'/2
				      (File, State)
			      ( <_cor19> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor19})
				-| ['compiler_generated'] )
			    end
		    -| ['compiler_generated'] )
		  ( <_cor205> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 301
	  <'Save Settings...',State> when 'true' ->
	      %% Line 302
	      ( case State of
		  ( <( {'state',_cor232,_cor233,_rec16,_cor234,_cor235,_cor236,_cor237,_cor238,_cor239,_cor240,_cor241,_cor242,_cor243}
		       -| ['compiler_generated'] )> when 'true' ->
			let <Window> =
			    call 'dbg_wx_mon_win':'get_window'
				(_rec16)
			in  %% Line 303
			    case call 'dbg_wx_settings':'save'
				     (Window, _cor235, _cor242) of
			      %% Line 304
			      <'cancel'> when 'true' ->
				  State
			      %% Line 305
			      <{'ok',File}> when 'true' ->
				  apply 'save_settings'/2
				      (File, State)
			      ( <_cor27> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor27})
				-| ['compiler_generated'] )
			    end
		    -| ['compiler_generated'] )
		  ( <_cor244> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 307
	  <'Exit',State> when 'true' ->
	      %% Line 308
	      apply 'gui_cmd'/2
		  ('stopped', State)
	  %% Line 311
	  <'Refresh',State> when 'true' ->
	      do  %% Line 312
		  call 'int':'clear'
		      ()
		  %% Line 313
		  ( case State of
		      ( <( {'state',_cor271,_cor272,_rec19,_cor273,_cor274,_cor275,_cor276,_cor277,_cor278,_cor279,_cor280,_cor281,_cor282}
			   -| ['compiler_generated'] )> when 'true' ->
			    let <Win> =
				call 'dbg_wx_mon_win':'clear_processes'
				    (_rec19)
			    in  do  %% Line 314
				    apply 'gui_enable_functions'/1
					('undefined')
				    let <_cor32> =
					%% Line 315
					call 'erlang':'setelement'
					    (8, State, [])
				    in  let <_cor33> =
					    %% Line 315
					    call 'erlang':'setelement'
						(5, _cor32, 'undefined')
					in  let <_cor35> =
						%% Line 315
						call 'erlang':'setelement'
						    (4, _cor33, Win)
					    in  let <_cor42> =
						    %% Line 316
						    ( fun (_cor39,_cor38) ->
							  %% Line 317
							  apply 'int_cmd'/2
							      ({'new_process',_cor39}, _cor38)
						      -| [{'id',{0,0,'-gui_cmd/2-fun-0-'}}] )
						in  let <_cor37> =
							%% Line 320
							call 'int':'snapshot'
							    ()
						    in  %% Line 316
							call 'lists':'foldl'
							    (_cor42, _cor35, _cor37)
			-| ['compiler_generated'] )
		      ( <_cor283> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','state'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  %% Line 321
	  <'Kill All',State> when 'true' ->
	      let <_cor52> =
		  %% Line 322
		  ( fun (_cor50) ->
			%% Line 323
			( case _cor50 of
			    ( <( {'pinfo',_cor298,_rec21}
				 -| ['compiler_generated'] )> when 'true' ->
				  case _rec21 of
				    %% Line 324
				    <'exit'> when 'true' ->
					'ignore'
				    %% Line 325
				    <_X_Status> when 'true' ->
					call 'erlang':'exit'
					    (_cor298, 'kill')
				  end
			      -| ['compiler_generated'] )
			    ( <_cor299> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','pinfo'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    -| [{'id',{0,0,'-gui_cmd/2-fun-1-'}}] )
	      in  %% Line 328
		  ( case State of
		      ( <( {'state',_cor302,_cor303,_cor304,_cor305,_cor306,_cor307,_rec23,_cor308,_cor309,_cor310,_cor311,_cor312,_cor313}
			   -| ['compiler_generated'] )> when 'true' ->
			    do  call 'lists':'foreach'
				    (_cor52, _rec23)
				%% Line 329
				State
			-| ['compiler_generated'] )
		      ( <_cor314> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','state'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  %% Line 332
	  <'Interpret...',State> when 'true' ->
	      %% Line 333
	      ( case State of
		  ( <( {'state',_cor315,_cor316,_rec24,_cor317,_cor318,_cor319,_cor320,_cor321,_cor322,_cor323,_cor324,_cor325,_cor326}
		       -| ['compiler_generated'] )> when 'true' ->
			let <Window> =
			    call 'dbg_wx_mon_win':'get_window'
				(_rec24)
			in  do  %% Line 334
				call 'dbg_wx_interpret':'start'
				    (Window, _cor318, _cor319, _cor315)
				%% Line 336
				State
		    -| ['compiler_generated'] )
		  ( <_cor327> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 337
	  <'Delete All Modules',State> when 'true' ->
	      let <_cor65> =
		  %% Line 338
		  ( fun (_cor63) ->
			call 'int':'nn'
			    (_cor63)
		    -| [{'id',{0,0,'-gui_cmd/2-fun-2-'}}] )
	      in  let <_cor62> =
		      %% Line 338
		      call 'int':'interpreted'
			  ()
		  in  do  %% Line 338
			  call 'lists':'foreach'
			      (_cor65, _cor62)
			  %% Line 339
			  State
	  %% Line 340
	  <{'module',Mod,What},State> when 'true' ->
	      do  %% Line 341
		  case What of
		    %% Line 342
		    <'delete'> when 'true' ->
			call 'int':'nn'
			    (Mod)
		    %% Line 343
		    <'view'> when 'true' ->
			%% Line 344
			( case State of
			    ( <( {'state',_cor367,_cor368,_rec28,_cor369,_cor370,_cor371,_cor372,_cor373,_cor374,_cor375,_cor376,_cor377,_cor378}
				 -| ['compiler_generated'] )> when 'true' ->
				  let <Window> =
				      call 'dbg_wx_mon_win':'get_window'
					  (_rec28)
				  in  %% Line 345
				      call 'dbg_wx_view':'start'
					  (Window, Mod)
			      -| ['compiler_generated'] )
			    ( <_cor379> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','state'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    ( <_cor69> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor69})
		      -| ['compiler_generated'] )
		  end
		  %% Line 347
		  State
	  %% Line 350
	  <'Step',State> when 'true' ->
	      %% Line 351
	      ( case State of
		  ( <( {'state',_cor380,_cor381,_cor382,_rec30,_cor383,_cor384,_cor385,_cor386,_cor387,_cor388,_cor389,_cor390,_cor391}
		       -| ['compiler_generated'] )> when 'true' ->
			( case _rec30 of
			    ( <( {'pinfo',_rec29,_cor393}
				 -| ['compiler_generated'] )> when 'true' ->
				  do  call 'int':'step'
					  (_rec29)
				      %% Line 352
				      State
			      -| ['compiler_generated'] )
			    ( <_cor394> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','pinfo'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  ( <_cor392> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 353
	  <'Next',State> when 'true' ->
	      %% Line 354
	      ( case State of
		  ( <( {'state',_cor395,_cor396,_cor397,_rec32,_cor398,_cor399,_cor400,_cor401,_cor402,_cor403,_cor404,_cor405,_cor406}
		       -| ['compiler_generated'] )> when 'true' ->
			( case _rec32 of
			    ( <( {'pinfo',_rec31,_cor408}
				 -| ['compiler_generated'] )> when 'true' ->
				  do  call 'int':'next'
					  (_rec31)
				      %% Line 355
				      State
			      -| ['compiler_generated'] )
			    ( <_cor409> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','pinfo'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  ( <_cor407> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 356
	  <'Continue',State> when 'true' ->
	      %% Line 357
	      ( case State of
		  ( <( {'state',_cor410,_cor411,_cor412,_rec34,_cor413,_cor414,_cor415,_cor416,_cor417,_cor418,_cor419,_cor420,_cor421}
		       -| ['compiler_generated'] )> when 'true' ->
			( case _rec34 of
			    ( <( {'pinfo',_rec33,_cor423}
				 -| ['compiler_generated'] )> when 'true' ->
				  do  call 'int':'continue'
					  (_rec33)
				      %% Line 358
				      State
			      -| ['compiler_generated'] )
			    ( <_cor424> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','pinfo'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  ( <_cor422> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 359
	  <'Finish ',State> when 'true' ->
	      %% Line 360
	      ( case State of
		  ( <( {'state',_cor425,_cor426,_cor427,_rec36,_cor428,_cor429,_cor430,_cor431,_cor432,_cor433,_cor434,_cor435,_cor436}
		       -| ['compiler_generated'] )> when 'true' ->
			( case _rec36 of
			    ( <( {'pinfo',_rec35,_cor438}
				 -| ['compiler_generated'] )> when 'true' ->
				  do  call 'int':'finish'
					  (_rec35)
				      %% Line 361
				      State
			      -| ['compiler_generated'] )
			    ( <_cor439> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','pinfo'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  ( <_cor437> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 362
	  <'Attach',State> when 'true' ->
	      %% Line 363
	      ( case State of
		  ( <( {'state',_cor440,_cor441,_cor442,_rec38,_cor443,_cor444,_cor445,_cor446,_cor447,_cor448,_cor449,_cor450,_cor451}
		       -| ['compiler_generated'] )> when 'true' ->
			( case _rec38 of
			    ( <( {'pinfo',_rec37,_cor453}
				 -| ['compiler_generated'] )> when 'true' ->
				  let <_cor91> =
				      %% Line 364
				      call 'dbg_wx_trace':'title'
					  (_rec37)
				  in  do  %% Line 364
					  case call 'dbg_wx_winman':'is_started'
						   (_cor91) of
					    %% Line 365
					    <'true'> when 'true' ->
						'ok'
					    %% Line 366
					    <'false'> when 'true' ->
						let <_cor92> =
						    apply 'trace_function'/1
							(State)
						in  call 'int':'attach'
							(_rec37, _cor92)
					    ( <_cor93> when 'true' ->
						  primop 'match_fail'
						      ({'case_clause',_cor93})
					      -| ['compiler_generated'] )
					  end
					  %% Line 368
					  State
			      -| ['compiler_generated'] )
			    ( <_cor454> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','pinfo'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  ( <_cor452> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 369
	  <'Kill',State> when 'true' ->
	      %% Line 370
	      ( case State of
		  ( <( {'state',_cor455,_cor456,_cor457,_rec40,_cor458,_cor459,_cor460,_cor461,_cor462,_cor463,_cor464,_cor465,_cor466}
		       -| ['compiler_generated'] )> when 'true' ->
			( case _rec40 of
			    ( <( {'pinfo',_rec39,_cor468}
				 -| ['compiler_generated'] )> when 'true' ->
				  do  call 'erlang':'exit'
					  (_rec39, 'kill')
				      %% Line 371
				      State
			      -| ['compiler_generated'] )
			    ( <_cor469> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','pinfo'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  ( <_cor467> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 374
	  <'Line Break...',State> when 'true' ->
	      %% Line 375
	      ( case State of
		  ( <( {'state',_cor470,_cor471,_rec41,_cor472,_cor473,_cor474,_cor475,_cor476,_cor477,_cor478,_cor479,_cor480,_cor481}
		       -| ['compiler_generated'] )> when 'true' ->
			let <Window> =
			    call 'dbg_wx_mon_win':'get_window'
				(_rec41)
			in  do  %% Line 376
				call 'dbg_wx_break':'start'
				    (Window, _cor473, 'line')
				%% Line 377
				State
		    -| ['compiler_generated'] )
		  ( <_cor482> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 378
	  <'Conditional Break...',State> when 'true' ->
	      %% Line 379
	      ( case State of
		  ( <( {'state',_cor496,_cor497,_rec43,_cor498,_cor499,_cor500,_cor501,_cor502,_cor503,_cor504,_cor505,_cor506,_cor507}
		       -| ['compiler_generated'] )> when 'true' ->
			let <Window> =
			    call 'dbg_wx_mon_win':'get_window'
				(_rec43)
			in  do  %% Line 380
				call 'dbg_wx_break':'start'
				    (Window, _cor499, 'conditional')
				%% Line 381
				State
		    -| ['compiler_generated'] )
		  ( <_cor508> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 382
	  <'Function Break...',State> when 'true' ->
	      %% Line 383
	      ( case State of
		  ( <( {'state',_cor522,_cor523,_rec45,_cor524,_cor525,_cor526,_cor527,_cor528,_cor529,_cor530,_cor531,_cor532,_cor533}
		       -| ['compiler_generated'] )> when 'true' ->
			let <Window> =
			    call 'dbg_wx_mon_win':'get_window'
				(_rec45)
			in  do  %% Line 384
				call 'dbg_wx_break':'start'
				    (Window, _cor525, 'function')
				%% Line 385
				State
		    -| ['compiler_generated'] )
		  ( <_cor534> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 386
	  <'Enable All',State> when 'true' ->
	      let <Breaks> =
		  %% Line 387
		  call 'int':'all_breaks'
		      ()
	      in  let <_cor116> =
		      %% Line 388
		      ( fun (_cor114) ->
			    case _cor114 of
			      <{{Mod,Line},_X_Options}> when 'true' ->
				  %% Line 389
				  call 'int':'enable_break'
				      (Mod, Line)
			      ( <_cor115> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_cor115})
				      -| [{'function_name',{'-gui_cmd/2-fun-3-',1}}] )
				-| ['compiler_generated'] )
			    end
			-| [{'id',{0,0,'-gui_cmd/2-fun-3-'}}] )
		  in  do  %% Line 388
			  call 'lists':'foreach'
			      (_cor116, %% Line 391
					Breaks)
			  %% Line 392
			  State
	  %% Line 393
	  <'Disable All',State> when 'true' ->
	      let <Breaks> =
		  %% Line 394
		  call 'int':'all_breaks'
		      ()
	      in  let <_cor120> =
		      %% Line 395
		      ( fun (_cor118) ->
			    case _cor118 of
			      <{{Mod,Line},_X_Options}> when 'true' ->
				  %% Line 396
				  call 'int':'disable_break'
				      (Mod, Line)
			      ( <_cor119> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_cor119})
				      -| [{'function_name',{'-gui_cmd/2-fun-4-',1}}] )
				-| ['compiler_generated'] )
			    end
			-| [{'id',{0,0,'-gui_cmd/2-fun-4-'}}] )
		  in  do  %% Line 395
			  call 'lists':'foreach'
			      (_cor120, %% Line 398
					Breaks)
			  %% Line 399
			  State
	  %% Line 400
	  <'Delete All',State> when 'true' ->
	      do  %% Line 401
		  call 'int':'no_break'
		      ()
		  %% Line 402
		  State
	  %% Line 403
	  <{'break',{Mod,Line},What},State> when 'true' ->
	      do  %% Line 404
		  case What of
		    %% Line 405
		    <'delete'> when 'true' ->
			call 'int':'delete_break'
			    (Mod, Line)
		    %% Line 406
		    <{'status','inactive'}> when 'true' ->
			call 'int':'disable_break'
			    (Mod, Line)
		    %% Line 407
		    <{'status','active'}> when 'true' ->
			call 'int':'enable_break'
			    (Mod, Line)
		    %% Line 408
		    <{'trigger',Action}> when 'true' ->
			call 'int':'action_at_break'
			    (Mod, Line, Action)
		    ( <_cor121> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor121})
		      -| ['compiler_generated'] )
		  end
		  %% Line 410
		  State
	  %% Line 413
	  <{'Trace Window',TraceWin},State> when 'true' ->
	      %% Line 414
	      case State of
		<{'state',_cor548,_cor549,_cor550,_cor551,_cor552,_cor553,_cor554,_cor555,_cor556,_cor557,_cor558,_cor559,_cor560}> when 'true' ->
		    let <_cor124> =
			call 'erlang':'setelement'
			    (9, State, TraceWin)
		    in  do  %% Line 415
			    case _cor558 of
			      %% Line 416
			      <'false'> when 'true' ->
				  'ok'
			      %% Line 417
			      <{Flags,{'dbg_ui_trace','start',StartFlags}}> when 'true' ->
				  %% Line 418
				  case apply 'trace_function'/1
					   (_cor124) of
				    %% Line 419
				    <{_cor575,_cor576,_cor577}>
					when call 'erlang':'=:='
					      (_cor577,
					       StartFlags) ->
					'ok'
				    %% Line 420
				    <NewFunction> when 'true' ->
					%% Line 421
					call 'int':'auto_attach'
					    (Flags, NewFunction)
				  end
			      %% Line 423
			      <_X_AutoAttach> when 'true' ->
				  'ok'
			    end
			    _cor124
		( <_cor561> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','state'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 426
	  <{'Auto Attach',When},State> when 'true' ->
	      do  %% Line 427
		  case <> of
		    %% Line 428
		    <>
			when call 'erlang':'=:='
			      (When,
			       []) ->
			call 'int':'auto_attach'
			    ('false')
		    %% Line 429
		    <> when 'true' ->
			let <_cor135> =
			    %% Line 430
			    ( letrec
				  'lc$^0'/1 =
				      fun (_cor132) ->
					  case _cor132 of
					    <[Name|_cor131]> when 'true' ->
						let <_cor133> =
						    apply 'map'/1
							(Name)
						in  let <_cor134> =
							apply 'lc$^0'/1
							    (_cor131)
						    in  ( [_cor133|_cor134]
							  -| ['compiler_generated'] )
					    <[]> when 'true' ->
						[]
					    ( <_cor132> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor132})
						    -| [{'function_name',{'lc$^0',1}}] )
					      -| ['compiler_generated'] )
					  end
			      in  apply 'lc$^0'/1
				      (When)
			      -| ['list_comprehension'] )
			in  let <_cor137> =
				%% Line 431
				apply 'trace_function'/1
				    (State)
			    in  %% Line 431
				call 'int':'auto_attach'
				    (_cor135, _cor137)
		  end
		  %% Line 433
		  State
	  %% Line 434
	  <{'Stack Trace',[Name|[]]},State> when 'true' ->
	      let <_cor138> =
		  %% Line 435
		  apply 'map'/1
		      (Name)
	      in  do  %% Line 435
		      call 'int':'stack_trace'
			  (_cor138)
		      %% Line 436
		      State
	  %% Line 437
	  <'Back Trace Size...',State> when 'true' ->
	      %% Line 438
	      ( case State of
		  ( <( {'state',_cor578,_cor579,_rec49,_cor580,_cor581,_cor582,_cor583,_cor584,_cor585,_cor586,_cor587,_cor588,_cor589}
		       -| ['compiler_generated'] )> when 'true' ->
			let <Window> =
			    call 'dbg_wx_mon_win':'get_window'
				(_rec49)
			in  let <_cor144> =
				%% Line 439
				call 'erlang':'integer_to_list'
				    (_cor585)
			    in  let <What> = {%% Line 439
				     'integer',_cor144}
				in  %% Line 440
				    case call 'dbg_wx_win':'entry'
					     (Window, [66|[97|[99|[107|[116|[114|[97|[99|[101]]]]]]]]], 'Backtrace:', What) of
				      %% Line 441
				      <'cancel'> when 'true' ->
					  %% Line 442
					  State
				      %% Line 443
				      <{_cor604,BackTrace}> when 'true' ->
					  do  %% Line 444
					      call 'dbg_wx_mon_win':'show_option'
						  (_rec49, 'back_trace', BackTrace)
					      %% Line 445
					      call 'erlang':'setelement'
						  (10, State, BackTrace)
				      ( <_cor150> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_cor150})
					-| ['compiler_generated'] )
				    end
		    -| ['compiler_generated'] )
		  ( <_cor590> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 447
	  <{'Strings',Flags},State> when 'true' ->
	      let <_cor156> =
		  %% Line 448
		  ( letrec
			'lc$^1'/1 =
			    fun (_cor153) ->
				case _cor153 of
				  <[Flag|_cor152]> when 'true' ->
				      let <_cor154> =
					  apply 'map'/1
					      (Flag)
				      in  let <_cor155> =
					      apply 'lc$^1'/1
						  (_cor152)
					  in  ( [_cor154|_cor155]
						-| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor153> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor153})
					  -| [{'function_name',{'lc$^1',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^1'/1
			    (Flags)
		    -| ['list_comprehension'] )
	      in  %% Line 449
		  ( case State of
		      ( <( {'state',_cor632,_cor633,_rec53,_cor634,_cor635,_cor636,_cor637,_cor638,_cor639,_cor640,_cor641,_cor642,_cor643}
			   -| ['compiler_generated'] )> when 'true' ->
			    do  call 'dbg_wx_mon_win':'show_option'
				    (_rec53, 'strings', _cor156)
				do  %% Line 450
				    apply 'select'/2
					(_cor156, ['str_on'])
				    %% Line 451
				    call 'erlang':'setelement'
					(11, State, _cor156)
			-| ['compiler_generated'] )
		      ( <_cor644> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','state'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  %% Line 454
	  <'Debugger',State> when 'true' ->
	      let <_cor162> =
		  %% Line 455
		  call 'code':'lib_dir'
		      ('debugger')
	      in  let <HelpFile> =
		      %% Line 455
		      call 'filename':'join'
			  ([_cor162|[[100|[111|[99]]]|[[104|[116|[109|[108]]]]|[[105|[110|[100|[101|[120|[46|[104|[116|[109|[108]]]]]]]]]]]]]])
		  in  %% Line 456
		      ( case State of
			  ( <( {'state',_cor659,_cor660,_rec55,_cor661,_cor662,_cor663,_cor664,_cor665,_cor666,_cor667,_cor668,_cor669,_cor670}
			       -| ['compiler_generated'] )> when 'true' ->
				let <Window> =
				    call 'dbg_wx_mon_win':'get_window'
					(_rec55)
				in  do  %% Line 457
					call 'dbg_wx_win':'open_help'
					    (Window, HelpFile)
					%% Line 458
					State
			    -| ['compiler_generated'] )
			  ( <_cor671> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','state'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
	  %% Line 460
	  <{'focus',Pid,Win},State> when 'true' ->
	      %% Line 462
	      ( case State of
		  ( <( {'state',_cor672,_cor673,_cor674,_cor675,_cor676,_cor677,_rec56,_cor678,_cor679,_cor680,_cor681,_cor682,_cor683}
		       -| ['compiler_generated'] )> when 'true' ->
			case call 'lists':'keysearch'
				 (Pid, 2, _rec56) of
			  <{'value',PInfo}> when 'true' ->
			      do  %% Line 463
				  apply 'gui_enable_functions'/1
				      (PInfo)
				  let <_cor171> =
				      %% Line 464
				      call 'erlang':'setelement'
					  (5, State, PInfo)
				  in  %% Line 464
				      call 'erlang':'setelement'
					  (4, _cor171, Win)
			  ( <_cor169> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor169})
			    -| ['compiler_generated'] )
			end
		    -| ['compiler_generated'] )
		  ( <_cor684> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 465
	  <'default',State> when 'true' ->
	      %% Line 466
	      ( case State of
		  ( <( {'state',_cor699,_cor700,_cor701,_rec58,_cor702,_cor703,_cor704,_cor705,_cor706,_cor707,_cor708,_cor709,_cor710}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_cor175> =
			    apply 'menus'/2
				('enabled', _rec58)
			in  case call 'lists':'member'
				     ('Attach', _cor175) of
			      %% Line 467
			      <'true'> when 'true' ->
				  apply 'gui_cmd'/2
				      ('Attach', State)
			      %% Line 468
			      <'false'> when 'true' ->
				  State
			      ( <_cor176> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor176})
				-| ['compiler_generated'] )
			    end
		    -| ['compiler_generated'] )
		  ( <_cor711> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_cor178,_cor177> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor178,_cor177})
		  -| [{'function_name',{'gui_cmd',2}}] )
	    -| ['compiler_generated'] )
	end
'int_cmd'/2 =
    %% Line 473
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'interpret',Mod},State> when 'true' ->
	      %% Line 474
	      ( case State of
		  ( <( {'state',_cor77,_cor78,_rec59,_cor79,_cor80,_cor81,_cor82,_cor83,_cor84,_cor85,_cor86,_cor87,_cor88}
		       -| ['compiler_generated'] )> when 'true' ->
			let <Win> =
			    call 'dbg_wx_mon_win':'add_module'
				(_rec59, 'Module', Mod)
			in  %% Line 475
			    call 'erlang':'setelement'
				(4, State, Win)
		    -| ['compiler_generated'] )
		  ( <_cor89> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 476
	  <{'no_interpret',Mod},State> when 'true' ->
	      %% Line 477
	      ( case State of
		  ( <( {'state',_cor104,_cor105,_rec61,_cor106,_cor107,_cor108,_cor109,_cor110,_cor111,_cor112,_cor113,_cor114,_cor115}
		       -| ['compiler_generated'] )> when 'true' ->
			let <Win> =
			    call 'dbg_wx_mon_win':'delete_module'
				(_rec61, Mod)
			in  %% Line 478
			    call 'erlang':'setelement'
				(4, State, Win)
		    -| ['compiler_generated'] )
		  ( <_cor116> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 480
	  <{'new_process',{Pid,Function,Status,Info}},State> when 'true' ->
	      let <Name> =
		  %% Line 483
		  apply 'registered_name'/1
		      (Pid)
	      in  let <PInfo> = {%% Line 484
		       'pinfo',%% Line 484
			       Pid,%% Line 484
				   Status}
		  in  %% Line 487
		      ( case State of
			  ( <( {'state',_cor131,_cor132,_rec63,_cor133,_cor134,_cor135,_cor136,_cor137,_cor138,_cor139,_cor140,_cor141,_cor142}
			       -| ['compiler_generated'] )> when 'true' ->
				let <Win> =
				    call 'dbg_wx_mon_win':'add_process'
					(_rec63, %% Line 488
						 Pid, %% Line 488
						      Name, %% Line 488
							    Function, %% Line 488
								      Status, %% Line 488
									      Info)
				in  let <PInfos> =
					%% Line 491
					call 'erlang':'++'
					    (_cor136, [PInfo|[]])
				    in  let <_cor21> =
					    %% Line 492
					    call 'erlang':'setelement'
						(8, State, PInfos)
					in  %% Line 492
					    call 'erlang':'setelement'
						(4, _cor21, Win)
			    -| ['compiler_generated'] )
			  ( <_cor143> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','state'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
	  %% Line 493
	  <{'new_status',Pid,Status,Info},State> when 'true' ->
	      %% Line 496
	      ( case State of
		  ( <( {'state',_cor171,_cor172,_cor173,_cor174,_cor175,_cor176,_rec66,_cor177,_cor178,_cor179,_cor180,_cor181,_cor182}
		       -| ['compiler_generated'] )> when 'true' ->
			%% Line 497
			case call 'lists':'keysearch'
				 (Pid, 2, _rec66) of
			  <{'value',PInfo}> when 'true' ->
			      %% Line 500
			      case PInfo of
				<{'pinfo',_cor184,_cor185}> when 'true' ->
				    let <_cor29> =
					call 'erlang':'setelement'
					    (3, PInfo, Status)
				    in  let <PInfos2> =
					    %% Line 501
					    call 'lists':'keyreplace'
						(Pid, 2, _rec66, _cor29)
					in  let <_cor34> =
						%% Line 502
						call 'erlang':'setelement'
						    (8, State, PInfos2)
					    in  %% Line 505
						( case _cor34 of
						    ( <( {'state',_cor201,_cor202,_rec69,_cor203,_cor204,_cor205,_cor206,_cor207,_cor208,_cor209,_cor210,_cor211,_cor212}
							 -| ['compiler_generated'] )> when 'true' ->
							  do  call 'dbg_wx_mon_win':'update_process'
								  (_rec69, Pid, Status, Info)
							      %% Line 506
							      case _cor203 of
								%% Line 507
								<{'pinfo',_cor227,_cor228}>
								    when call 'erlang':'=:='
									  (_cor227,
									   Pid) ->
								    do  %% Line 508
									apply 'gui_enable_functions'/1
									    (_cor29)
									%% Line 509
									call 'erlang':'setelement'
									    (5, _cor34, _cor29)
								%% Line 510
								<_cor243> when 'true' ->
								    _cor34
							      end
						      -| ['compiler_generated'] )
						    ( <_cor213> when 'true' ->
							  ( call ( 'erlang'
								   -| ['compiler_generated'] ):( 'error'
												 -| ['compiler_generated'] )
								(( {'badrecord','state'}
								   -| ['compiler_generated'] ))
							    -| ['compiler_generated'] )
						      -| ['compiler_generated'] )
						  end
						  -| ['compiler_generated'] )
				( <_cor186> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {'badrecord','pinfo'}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			  ( <_cor26> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor26})
			    -| ['compiler_generated'] )
			end
		    -| ['compiler_generated'] )
		  ( <_cor183> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 514
	  <{'new_break',Break},State> when 'true' ->
	      %% Line 515
	      ( case State of
		  ( <( {'state',_cor244,_cor245,_rec72,_cor246,_cor247,_cor248,_cor249,_cor250,_cor251,_cor252,_cor253,_cor254,_cor255}
		       -| ['compiler_generated'] )> when 'true' ->
			let <Win> =
			    call 'dbg_wx_mon_win':'add_break'
				(_rec72, 'Break', Break)
			in  %% Line 516
			    call 'erlang':'setelement'
				(4, State, Win)
		    -| ['compiler_generated'] )
		  ( <_cor256> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 517
	  <{'delete_break',Point},State> when 'true' ->
	      %% Line 518
	      ( case State of
		  ( <( {'state',_cor271,_cor272,_rec74,_cor273,_cor274,_cor275,_cor276,_cor277,_cor278,_cor279,_cor280,_cor281,_cor282}
		       -| ['compiler_generated'] )> when 'true' ->
			let <Win> =
			    call 'dbg_wx_mon_win':'delete_break'
				(_rec74, Point)
			in  %% Line 519
			    call 'erlang':'setelement'
				(4, State, Win)
		    -| ['compiler_generated'] )
		  ( <_cor283> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 520
	  <{'break_options',Break},State> when 'true' ->
	      %% Line 521
	      ( case State of
		  ( <( {'state',_cor298,_cor299,_rec76,_cor300,_cor301,_cor302,_cor303,_cor304,_cor305,_cor306,_cor307,_cor308,_cor309}
		       -| ['compiler_generated'] )> when 'true' ->
			do  call 'dbg_wx_mon_win':'update_break'
				(_rec76, Break)
			    %% Line 522
			    State
		    -| ['compiler_generated'] )
		  ( <_cor310> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 523
	  <'no_break',State> when 'true' ->
	      %% Line 524
	      ( case State of
		  ( <( {'state',_cor311,_cor312,_rec77,_cor313,_cor314,_cor315,_cor316,_cor317,_cor318,_cor319,_cor320,_cor321,_cor322}
		       -| ['compiler_generated'] )> when 'true' ->
			let <Win> =
			    call 'dbg_wx_mon_win':'clear_breaks'
				(_rec77)
			in  %% Line 525
			    call 'erlang':'setelement'
				(4, State, Win)
		    -| ['compiler_generated'] )
		  ( <_cor323> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 526
	  <{'no_break',Mod},State> when 'true' ->
	      %% Line 527
	      ( case State of
		  ( <( {'state',_cor338,_cor339,_rec79,_cor340,_cor341,_cor342,_cor343,_cor344,_cor345,_cor346,_cor347,_cor348,_cor349}
		       -| ['compiler_generated'] )> when 'true' ->
			let <Win> =
			    call 'dbg_wx_mon_win':'clear_breaks'
				(_rec79, Mod)
			in  %% Line 528
			    call 'erlang':'setelement'
				(4, State, Win)
		    -| ['compiler_generated'] )
		  ( <_cor350> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 530
	  <{'auto_attach',AutoAttach},State> when 'true' ->
	      let <_cor66> =
		  %% Line 531
		  case AutoAttach of
		    %% Line 532
		    <'false'> when 'true' ->
			[]
		    %% Line 533
		    <{Flags,_X_Function}> when 'true' ->
			Flags
		    ( <_cor65> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor65})
		      -| ['compiler_generated'] )
		  end
	      in  %% Line 535
		  ( case State of
		      ( <( {'state',_cor365,_cor366,_rec81,_cor367,_cor368,_cor369,_cor370,_cor371,_cor372,_cor373,_cor374,_cor375,_cor376}
			   -| ['compiler_generated'] )> when 'true' ->
			    do  call 'dbg_wx_mon_win':'show_option'
				    (_rec81, 'auto_attach', _cor66)
				do  %% Line 536
				    apply 'select'/2
					(_cor66, ['init'|['exit'|['break']]])
				    %% Line 537
				    call 'erlang':'setelement'
					(12, State, AutoAttach)
			-| ['compiler_generated'] )
		      ( <_cor377> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','state'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  %% Line 538
	  <{'stack_trace',Flag},State> when 'true' ->
	      %% Line 539
	      ( case State of
		  ( <( {'state',_cor392,_cor393,_rec83,_cor394,_cor395,_cor396,_cor397,_cor398,_cor399,_cor400,_cor401,_cor402,_cor403}
		       -| ['compiler_generated'] )> when 'true' ->
			do  call 'dbg_wx_mon_win':'show_option'
				(_rec83, 'stack_trace', Flag)
			    let <_cor74> =
				%% Line 540
				apply 'map'/1
				    (Flag)
			    in  do  %% Line 540
				    call 'dbg_wx_mon_win':'select'
					(_cor74, 'true')
				    %% Line 541
				    State
		    -| ['compiler_generated'] )
		  ( <_cor404> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_cor76,_cor75> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor76,_cor75})
		  -| [{'function_name',{'int_cmd',2}}] )
	    -| ['compiler_generated'] )
	end
'menus'/0 =
    %% Line 548
    fun () ->
	%% Line 549
	[{'File',[{'Load Settings...',0}|[{'Save Settings...',2}|['separator'|[{'Exit',0}]]]]}|[{'Edit',[{'Refresh','no'}|[{'Kill All','no'}]]}|[{'Module',[{'Interpret...',0}|[{'Delete All Modules','no'}|['separator']]]}|[{'Process',[{'Step',0}|[{'Next',0}|[{'Continue',0}|[{'Finish ',0}|['separator'|[{'Attach',0}|[{'Kill','no'}]]]]]]]}|[{'Break',[{'Line Break...',5}|[{'Conditional Break...','no'}|[{'Function Break...','no'}|['separator'|[{'Enable All','no'}|[{'Disable All','no'}|[{'Delete All',0}|['separator']]]]]]]]}|[{'Options',[{'Trace Window','no','cascade',[{'Search Area','no','check'}|[{'Button Area','no','check'}|[{'Evaluator Area','no','check'}|[{'Bindings Area','no','check'}|[{'Trace Area','no','check'}]]]]]}|[{'Auto Attach','no','cascade',[{'First Call','no','check'}|[{'On Break','no','check'}|[{'On Exit','no','check'}]]]}|[{'Stack Trace','no','cascade',[{'Stack On, Tail','no','radio'}|[{'Stack On, No Tail','no','radio'}|[{'Stack Off','no','radio'}]]]}|[{'Strings','no','cascade',[{'Use range of +pc flag','no','check'}]}|[{'Back Trace Size...','no'}]]]]]}|[{'Windows',[]}|[{'Help',[{'Debugger','no'}]}]]]]]]]]
'menus'/2 =
    %% Line 593
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'enabled','undefined'> when 'true' ->
	      %% Line 594
	      []
	  %% Line 595
	  <'disabled','undefined'> when 'true' ->
	      %% Line 596
	      ['Step'|['Next'|['Continue'|['Finish '|['Attach'|['Kill']]]]]]
	  %% Line 597
	  <'enabled',{'pinfo',_cor4,'exit'}> when 'true' ->
	      %% Line 598
	      ['Attach']
	  %% Line 599
	  <'disabled',{'pinfo',_cor5,'exit'}> when 'true' ->
	      %% Line 600
	      ['Step'|['Next'|['Continue'|['Finish '|['Kill']]]]]
	  %% Line 601
	  <'enabled',{'pinfo',_cor6,'break'}> when 'true' ->
	      %% Line 602
	      ['Step'|['Next'|['Continue'|['Finish '|['Attach'|['Kill']]]]]]
	  %% Line 603
	  <'disabled',{'pinfo',_cor7,'break'}> when 'true' ->
	      %% Line 604
	      []
	  %% Line 605
	  <'enabled',_X_PInfo> when 'true' ->
	      %% Line 606
	      ['Attach'|['Kill']]
	  %% Line 607
	  <'disabled',_X_PInfo> when 'true' ->
	      %% Line 608
	      ['Step'|['Next'|['Continue'|['Finish ']]]]
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'menus',2}}] )
	    -| ['compiler_generated'] )
	end
'shortcut'/1 =
    %% Line 610
    fun (_cor0) ->
	case _cor0 of
	  <'l'> when 'true' ->
	      {'always','Load Settings...'}
	  %% Line 611
	  <'v'> when 'true' ->
	      {'always','Save Settings...'}
	  %% Line 612
	  <'e'> when 'true' ->
	      {'always','Exit'}
	  %% Line 614
	  <'i'> when 'true' ->
	      {'always','Interpret...'}
	  %% Line 616
	  <'s'> when 'true' ->
	      {'if_enabled','Step'}
	  %% Line 617
	  <'n'> when 'true' ->
	      {'if_enabled','Next'}
	  %% Line 618
	  <'c'> when 'true' ->
	      {'if_enabled','Continue'}
	  %% Line 619
	  <'f'> when 'true' ->
	      {'if_enabled','Finish '}
	  %% Line 620
	  <'a'> when 'true' ->
	      {'if_enabled','Attach'}
	  %% Line 622
	  <'b'> when 'true' ->
	      {'always','Line Break...'}
	  %% Line 623
	  <'d'> when 'true' ->
	      {'always','Delete All'}
	  %% Line 625
	  <_cor2> when 'true' ->
	      'false'
	end
'gui_enable_functions'/1 =
    %% Line 629
    fun (_cor0) ->
	let <Enabled> =
	    %% Line 630
	    apply 'menus'/2
		('enabled', _cor0)
	in  let <Disabled> =
		%% Line 631
		apply 'menus'/2
		    ('disabled', _cor0)
	    in  do  %% Line 632
		    call 'dbg_wx_mon_win':'enable'
			(Enabled, 'true')
		    %% Line 633
		    call 'dbg_wx_mon_win':'enable'
			(Disabled, 'false')
'map'/1 =
    %% Line 636
    fun (_cor0) ->
	case _cor0 of
	  <'First Call'> when 'true' ->
	      'init'
	  %% Line 637
	  <'On Exit'> when 'true' ->
	      'exit'
	  %% Line 638
	  <'On Break'> when 'true' ->
	      'break'
	  %% Line 639
	  <'init'> when 'true' ->
	      'First Call'
	  %% Line 640
	  <'exit'> when 'true' ->
	      'On Exit'
	  %% Line 641
	  <'break'> when 'true' ->
	      'On Break'
	  %% Line 643
	  <'Stack On, Tail'> when 'true' ->
	      'all'
	  %% Line 644
	  <'Stack On, No Tail'> when 'true' ->
	      'no_tail'
	  %% Line 645
	  <'Stack Off'> when 'true' ->
	      'false'
	  %% Line 646
	  <'all'> when 'true' ->
	      'Stack On, Tail'
	  %% Line 647
	  <'true'> when 'true' ->
	      'Stack On, Tail'
	  %% Line 648
	  <'no_tail'> when 'true' ->
	      'Stack On, No Tail'
	  %% Line 649
	  <'false'> when 'true' ->
	      'Stack Off'
	  %% Line 651
	  <'Use range of +pc flag'> when 'true' ->
	      'str_on'
	  %% Line 652
	  <'str_on'> when 'true' ->
	      'Use range of +pc flag'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'map',1}}] )
	    -| ['compiler_generated'] )
	end
'select'/2 =
    %% Line 654
    fun (_cor1,_cor0) ->
	let <OffFlags> =
	    %% Line 655
	    call 'erlang':'--'
		(_cor0, _cor1)
	in  let <_cor6> =
		%% Line 656
		( fun (_cor4) ->
		      let <_cor3> =
			  %% Line 657
			  apply 'map'/1
			      (_cor4)
		      in  %% Line 657
			  call 'dbg_wx_mon_win':'select'
			      (_cor3, 'false')
		  -| [{'id',{0,0,'-select/2-fun-0-'}}] )
	    in  do  %% Line 656
		    call 'lists':'foreach'
			(_cor6, %% Line 659
				OffFlags)
		    let <_cor10> =
			%% Line 660
			( fun (_cor8) ->
			      let <_cor7> =
				  %% Line 661
				  apply 'map'/1
				      (_cor8)
			      in  %% Line 661
				  call 'dbg_wx_mon_win':'select'
				      (_cor7, 'true')
			  -| [{'id',{0,0,'-select/2-fun-1-'}}] )
		    in  %% Line 660
			call 'lists':'foreach'
			    (_cor10, _cor1)
'load_settings'/2 =
    %% Line 669
    fun (_cor1,_cor0) ->
	%% Line 670
	case call 'file':'read_file'
		 (_cor1) of
	  %% Line 671
	  <{'ok',Binary}> when 'true' ->
	      let <_cor2> =
		  catch
		      %% Line 672
		      call 'erlang':'binary_to_term'
			  (Binary)
	      in  %% Line 672
		  case _cor2 of
		    %% Line 673
		    <{'debugger_settings',Settings}> when 'true' ->
			%% Line 675
			case _cor0 of
			  <{'state',_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23}> when 'true' ->
			      let <_cor4> =
				  %% Line 676
				  call 'erlang':'setelement'
				      (14, _cor0, 'false')
			      in  let <_cor6> =
				      call 'erlang':'setelement'
					  (13, _cor4, _cor1)
				  in  apply 'load_settings2'/2
					  (Settings, _cor6)
			  ( <_cor24> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','state'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
		    %% Line 677
		    <_X_Error> when 'true' ->
			_cor0
		  end
	  %% Line 679
	  <{'error',_X_Reason}> when 'true' ->
	      _cor0
	  ( <_cor8> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor8})
	    -| ['compiler_generated'] )
	end
'load_settings2'/2 =
    %% Line 682
    fun (_cor1,_cor0) ->
	%% Line 684
	case apply 'loaded'/1
		 (_cor1) of
	  <[TraceWin|[AutoAttach|[StackTrace|[BackTrace|[Strings|[Files|[Breaks|[]]]]]]]]> when 'true' ->
	      let <_cor7> =
		  %% Line 688
		  ( fun (_cor5) ->
			call 'dbg_wx_mon_win':'select'
			    (_cor5, 'true')
		    -| [{'id',{0,0,'-load_settings2/2-fun-0-'}}] )
	      in  do  %% Line 688
		      call 'lists':'foreach'
			  (_cor7, %% Line 689
				  TraceWin)
		      let <_cor11> =
			  %% Line 690
			  ( fun (_cor9) ->
				call 'dbg_wx_mon_win':'select'
				    (_cor9, 'false')
			    -| [{'id',{0,0,'-load_settings2/2-fun-1-'}}] )
		      in  let <_cor8> =
			      %% Line 691
			      call 'erlang':'--'
				  (['Button Area'|['Evaluator Area'|['Bindings Area'|['Trace Area']]]], TraceWin)
			  in  do  %% Line 690
				  call 'lists':'foreach'
				      (_cor11, _cor8)
				  do  %% Line 693
				      case AutoAttach of
					%% Line 694
					<'false'> when 'true' ->
					    call 'int':'auto_attach'
						('false')
					%% Line 695
					<{Flags,Function}> when 'true' ->
					    call 'int':'auto_attach'
						(Flags, Function)
					( <_cor12> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_cor12})
					  -| ['compiler_generated'] )
				      end
				      do  %% Line 698
					  call 'int':'stack_trace'
					      (StackTrace)
					  do  %% Line 700
					      case <> of
						%% Line 701
						<>
						    when call 'erlang':'=:='
							  (Strings,
							   'keep') ->
						    'ok'
						%% Line 702
						<> when 'true' ->
						    %% Line 703
						    ( case _cor0 of
							( <( {'state',_cor37,_cor38,_rec85,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48}
							     -| ['compiler_generated'] )> when 'true' ->
							      do  call 'dbg_wx_mon_win':'show_option'
								      (_rec85, 'strings', Strings)
								  %% Line 704
								  apply 'select'/2
								      (Strings, ['str_on'])
							  -| ['compiler_generated'] )
							( <_cor49> when 'true' ->
							      ( call ( 'erlang'
								       -| ['compiler_generated'] ):( 'error'
												     -| ['compiler_generated'] )
								    (( {'badrecord','state'}
								       -| ['compiler_generated'] ))
								-| ['compiler_generated'] )
							  -| ['compiler_generated'] )
						      end
						      -| ['compiler_generated'] )
					      end
					      %% Line 707
					      ( case _cor0 of
						  ( <( {'state',_cor50,_cor51,_rec86,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61}
						       -| ['compiler_generated'] )> when 'true' ->
							do  call 'dbg_wx_mon_win':'show_option'
								(_rec86, 'back_trace', BackTrace)
							    do  %% Line 709
								case _cor50 of
								  %% Line 710
								  <'local'> when 'true' ->
								      let <_cor21> =
									  ( fun (_cor19) ->
										call 'int':'i'
										    (_cor19)
									    -| [{'id',{0,0,'-load_settings2/2-fun-2-'}}] )
								      in  call 'lists':'foreach'
									      (_cor21, Files)
								  %% Line 711
								  <'global'> when 'true' ->
								      let <_cor24> =
									  ( fun (_cor22) ->
										call 'int':'ni'
										    (_cor22)
									    -| [{'id',{0,0,'-load_settings2/2-fun-3-'}}] )
								      in  call 'lists':'foreach'
									      (_cor24, Files)
								  ( <_cor25> when 'true' ->
									primop 'match_fail'
									    ({'case_clause',_cor25})
								    -| ['compiler_generated'] )
								end
								let <_cor30> =
								    %% Line 713
								    ( fun (_cor28) ->
									  %% Line 714
									  case _cor28 of
									    <{{Mod,Line},[Status|[Action|[_cor76|[Cond|[]]]]]}> when 'true' ->
										do  %% Line 716
										    call 'int':'break'
											(Mod, Line)
										    do  %% Line 717
											case <> of
											  %% Line 718
											  <>
											      when call 'erlang':'=:='
												    (Status,
												     'inactive') ->
											      %% Line 719
											      call 'int':'disable_break'
												  (Mod, Line)
											  %% Line 720
											  <> when 'true' ->
											      'ok'
											end
											do  %% Line 722
											    case <> of
											      %% Line 723
											      <>
												  when call 'erlang':'=/='
													(Action,
													 'enable') ->
												  %% Line 724
												  call 'int':'action_at_break'
												      (Mod, Line, Action)
											      %% Line 725
											      <> when 'true' ->
												  'ok'
											    end
											    %% Line 727
											    case Cond of
											      %% Line 728
											      <CFunction>
												  when call 'erlang':'is_tuple'
													(Cond) ->
												  %% Line 729
												  call 'int':'test_at_break'
												      (Mod, Line, CFunction)
											      %% Line 730
											      <'null'> when 'true' ->
												  'ignore'
											      ( <_cor27> when 'true' ->
												    primop 'match_fail'
													({'case_clause',_cor27})
												-| ['compiler_generated'] )
											    end
									    ( <_cor26> when 'true' ->
										  primop 'match_fail'
										      ({'badmatch',_cor26})
									      -| ['compiler_generated'] )
									  end
								      -| [{'id',{0,0,'-load_settings2/2-fun-4-'}}] )
								in  do  %% Line 713
									call 'lists':'foreach'
									    (_cor30, %% Line 733
										     Breaks)
									let <_cor32> =
									    %% Line 735
									    call 'erlang':'setelement'
										(11, _cor0, Strings)
									in  let <_cor33> =
										%% Line 735
										call 'erlang':'setelement'
										    (10, _cor32, BackTrace)
									    in  %% Line 735
										call 'erlang':'setelement'
										    (9, _cor33, TraceWin)
						    -| ['compiler_generated'] )
						  ( <_cor62> when 'true' ->
							( call ( 'erlang'
								 -| ['compiler_generated'] ):( 'error'
											       -| ['compiler_generated'] )
							      (( {'badrecord','state'}
								 -| ['compiler_generated'] ))
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						end
						-| ['compiler_generated'] )
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'loaded'/1 =
    %% Line 737
    fun (_cor0) ->
	case _cor0 of
	  <{TraceWin,AutoAttach,StackTrace,BackTrace,Files,Breaks}> when 'true' ->
	      %% Line 739
	      [TraceWin|[AutoAttach|[StackTrace|[BackTrace|['keep'|[Files|[Breaks|[]]]]]]]]
	  %% Line 740
	  <Settings>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      %% Line 743
	      ( letrec
		    'lc$^0'/1 =
			fun (_cor4) ->
			    case _cor4 of
			      <[Key|_cor3]> when 'true' ->
				  let <_cor5> =
				      call 'proplists':'get_value'
					  (Key, Settings)
				  in  let <_cor6> =
					  apply 'lc$^0'/1
					      (_cor3)
				      in  ( [_cor5|_cor6]
					    -| ['compiler_generated'] )
			      <[]> when 'true' ->
				  []
			      ( <_cor4> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_cor4})
				      -| [{'function_name',{'lc$^0',1}}] )
				-| ['compiler_generated'] )
			    end
		in  apply 'lc$^0'/1
			(['trace_win'|['auto_attach'|['stack_trace'|['back_trace'|['strings'|['files'|['breaks']]]]]]])
		-| ['list_comprehension'] )
	  ( <_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7})
		  -| [{'function_name',{'loaded',1}}] )
	    -| ['compiler_generated'] )
	end
'save_settings'/2 =
    %% Line 745
    fun (_cor1,_cor0) ->
	let <Settings> =
	    %% Line 746
	    apply 'saved'/1
		(_cor0)
	in  let <Binary> =
		%% Line 747
		call 'erlang':'term_to_binary'
		    ({'debugger_settings',Settings})
	    in  %% Line 748
		case call 'file':'write_file'
			 (_cor1, Binary) of
		  %% Line 749
		  <'ok'> when 'true' ->
		      %% Line 750
		      case _cor0 of
			<{'state',_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22}> when 'true' ->
			    let <_cor5> =
				call 'erlang':'setelement'
				    (14, _cor0, 'false')
			    in  call 'erlang':'setelement'
				    (13, _cor5, _cor1)
			( <_cor23> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','state'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		  %% Line 751
		  <{'error',_X_Reason}> when 'true' ->
		      _cor0
		  ( <_cor7> when 'true' ->
			primop 'match_fail'
			    ({'case_clause',_cor7})
		    -| ['compiler_generated'] )
		end
'saved'/1 =
    %% Line 755
    fun (_cor0) ->
	case _cor0 of
	  <{'state',_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,TraceWin,BackTrace,Strings,_cor19,_cor20,_cor21}> when 'true' ->
	      let <_cor1> =
		  %% Line 757
		  call 'int':'auto_attach'
		      ()
	      in  let <_cor2> =
		      %% Line 758
		      call 'int':'stack_trace'
			  ()
		  in  let <_cor9> =
			  %% Line 761
			  ( letrec
				'lc$^0'/1 =
				    fun (_cor6) ->
					case _cor6 of
					  <[Mod|_cor4]> when 'true' ->
					      let <_cor7> =
						  call 'int':'file'
						      (Mod)
					      in  let <_cor8> =
						      apply 'lc$^0'/1
							  (_cor4)
						  in  ( [_cor7|_cor8]
							-| ['compiler_generated'] )
					  <[]> when 'true' ->
					      []
					  ( <_cor6> when 'true' ->
						( primop 'match_fail'
						      ({'function_clause',_cor6})
						  -| [{'function_name',{'lc$^0',1}}] )
					    -| ['compiler_generated'] )
					end
			    in  let <_cor5> =
				    call 'int':'interpreted'
					()
				in  apply 'lc$^0'/1
					(_cor5)
			    -| ['list_comprehension'] )
		      in  let <_cor10> =
			      %% Line 762
			      call 'int':'all_breaks'
				  ()
			  in  %% Line 756
			      [{'trace_win',TraceWin}|%% Line 757
						      [{'auto_attach',_cor1}|%% Line 758
									     [{'stack_trace',_cor2}|%% Line 759
												    [{'back_trace',BackTrace}|%% Line 760
															      [{'strings',Strings}|%% Line 761
																		   [{'files',_cor9}|%% Line 762
																				    [{'breaks',_cor10}|[]]]]]]]]
	  ( <_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11})
		  -| [{'function_name',{'saved',1}}] )
	    -| ['compiler_generated'] )
	end
'registered_name'/1 =
    %% Line 768
    fun (_cor0) ->
	do  %% Line 771
	    call 'timer':'sleep'
		(200)
	    let <Node> =
		%% Line 773
		call 'erlang':'node'
		    (_cor0)
	    in  %% Line 774
		case <> of
		  %% Line 775
		  <>
		      when try
			    let <_cor2> =
				call 'erlang':'node'
				    ()
			    in  call 'erlang':'=:='
				    (Node, _cor2)
			of <Try> ->
			    Try
			catch <T,R> ->
			    'false' ->
		      %% Line 776
		      case call 'erlang':'process_info'
			       (_cor0, 'registered_name') of
			%% Line 777
			<{'registered_name',Name}> when 'true' ->
			    Name
			%% Line 778
			<_cor6> when 'true' ->
			    'undefined'
		      end
		  %% Line 780
		  <> when 'true' ->
		      %% Line 781
		      case call 'rpc':'call'
			       (Node, 'erlang', 'process_info', %% Line 782
								[_cor0|['registered_name']]) of
			%% Line 783
			<{'registered_name',Name}> when 'true' ->
			    Name
			%% Line 784
			<_cor7> when 'true' ->
			    'undefined'
		      end
		end
'trace_function'/1 =
    %% Line 788
    fun (_cor0) ->
	%% Line 789
	case _cor0 of
	  <{'state',_cor3,_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,Win,BT,Str,_cor10,_cor11,_cor12}> when 'true' ->
	      %% Line 790
	      {'dbg_wx_trace','start',[Win|[BT|[Str|[]]]]}
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('dbg_wx_mon')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('dbg_wx_mon', _cor0)
end