module 'dbg_wx_mon_win' ['add_break'/3,
			 'add_module'/3,
			 'add_process'/6,
			 'clear_breaks'/1,
			 'clear_breaks'/2,
			 'clear_processes'/1,
			 'create_win'/3,
			 'delete_break'/2,
			 'delete_module'/2,
			 'enable'/2,
			 'get_window'/1,
			 'handle_event'/2,
			 'init'/0,
			 'is_enabled'/1,
			 'module_info'/0,
			 'module_info'/1,
			 'select'/2,
			 'show_option'/3,
			 'update_break'/2,
			 'update_process'/4]
    attributes [%% Line 25
		'type' =
		    %% Line 25
		    [{{'record','wx'},[{'typed_record_field',{'record_field',25,{'atom',25,'id'}},{'type',25,'union',[{'atom',25,'undefined'}|[{'type',25,'integer',[]}]]}}|[{'typed_record_field',{'record_field',26,{'atom',26,'obj'}},{'type',26,'union',[{'atom',26,'undefined'}|[{'remote_type',26,[{'atom',26,'wx'}|[{'atom',26,'wx_object'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',27,{'atom',27,'userData'}},{'type',27,'union',[{'atom',27,'undefined'}|[{'type',27,'term',[]}]]}}|[{'typed_record_field',{'record_field',28,{'atom',28,'event'}},{'type',28,'union',[{'atom',28,'undefined'}|[{'type',28,'event',[]}]]}}]]]],[]}],
		%% Line 31
		'type' =
		    %% Line 31
		    [{'wx',{'type',31,'record',[{'atom',31,'wx'}]},[]}],
		%% Line 35
		'type' =
		    %% Line 35
		    [{{'record','wxNavigationKey'},[{'typed_record_field',{'record_field',35,{'atom',35,'type'}},{'type',35,'union',[{'atom',35,'undefined'}|[{'type',35,'wxNavigationKeyEventType',[]}]]}}|[{'typed_record_field',{'record_field',36,{'atom',36,'flags'}},{'type',36,'union',[{'atom',36,'undefined'}|[{'type',36,'integer',[]}]]}}|[{'typed_record_field',{'record_field',37,{'atom',37,'focus'}},{'type',37,'union',[{'atom',37,'undefined'}|[{'remote_type',37,[{'atom',37,'wxWindow'}|[{'atom',37,'wxWindow'}|[[]]]]}]]}}]]],[]}],
		%% Line 38
		'type' =
		    %% Line 38
		    [{'wxNavigationKeyEventType',{'atom',38,'navigation_key'},[]}],
		%% Line 39
		'type' =
		    %% Line 39
		    [{'wxNavigationKey',{'type',39,'record',[{'atom',39,'wxNavigationKey'}]},[]}],
		%% Line 41
		'type' =
		    %% Line 41
		    [{{'record','wxSash'},[{'typed_record_field',{'record_field',41,{'atom',41,'type'}},{'type',41,'union',[{'atom',41,'undefined'}|[{'type',41,'wxSashEventType',[]}]]}}|[{'typed_record_field',{'record_field',42,{'atom',42,'edge'}},{'type',42,'union',[{'atom',42,'undefined'}|[{'remote_type',42,[{'atom',42,'wx'}|[{'atom',42,'wx_enum'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',43,{'atom',43,'dragRect'}},{'type',43,'union',[{'atom',43,'undefined'}|[{'type',43,'tuple',[{'ann_type',43,[{'var',43,'X'}|[{'type',43,'integer',[]}]]}|[{'ann_type',43,[{'var',43,'Y'}|[{'type',43,'integer',[]}]]}|[{'ann_type',43,[{'var',43,'W'}|[{'type',43,'integer',[]}]]}|[{'ann_type',43,[{'var',43,'H'}|[{'type',43,'integer',[]}]]}]]]]}]]}}|[{'typed_record_field',{'record_field',44,{'atom',44,'dragStatus'}},{'type',44,'union',[{'atom',44,'undefined'}|[{'remote_type',44,[{'atom',44,'wx'}|[{'atom',44,'wx_enum'}|[[]]]]}]]}}]]]],[]}],
		%% Line 45
		'type' =
		    %% Line 45
		    [{'wxSashEventType',{'atom',45,'sash_dragged'},[]}],
		%% Line 46
		'type' =
		    %% Line 46
		    [{'wxSash',{'type',46,'record',[{'atom',46,'wxSash'}]},[]}],
		%% Line 48
		'type' =
		    %% Line 48
		    [{{'record','wxList'},[{'typed_record_field',{'record_field',48,{'atom',48,'type'}},{'type',48,'union',[{'atom',48,'undefined'}|[{'type',48,'wxListEventType',[]}]]}}|[{'typed_record_field',{'record_field',49,{'atom',49,'code'}},{'type',49,'union',[{'atom',49,'undefined'}|[{'type',49,'integer',[]}]]}}|[{'typed_record_field',{'record_field',50,{'atom',50,'oldItemIndex'}},{'type',50,'union',[{'atom',50,'undefined'}|[{'type',50,'integer',[]}]]}}|[{'typed_record_field',{'record_field',51,{'atom',51,'itemIndex'}},{'type',51,'union',[{'atom',51,'undefined'}|[{'type',51,'integer',[]}]]}}|[{'typed_record_field',{'record_field',52,{'atom',52,'col'}},{'type',52,'union',[{'atom',52,'undefined'}|[{'type',52,'integer',[]}]]}}|[{'typed_record_field',{'record_field',53,{'atom',53,'pointDrag'}},{'type',53,'union',[{'atom',53,'undefined'}|[{'type',53,'tuple',[{'ann_type',53,[{'var',53,'X'}|[{'type',53,'integer',[]}]]}|[{'ann_type',53,[{'var',53,'Y'}|[{'type',53,'integer',[]}]]}]]}]]}}]]]]]],[]}],
		%% Line 54
		'type' =
		    %% Line 54
		    [{'wxListEventType',{'type',54,'union',[{'atom',54,'command_list_begin_drag'}|[{'atom',54,'command_list_begin_rdrag'}|[{'atom',54,'command_list_begin_label_edit'}|[{'atom',54,'command_list_end_label_edit'}|[{'atom',54,'command_list_delete_item'}|[{'atom',54,'command_list_delete_all_items'}|[{'atom',54,'command_list_key_down'}|[{'atom',54,'command_list_insert_item'}|[{'atom',54,'command_list_col_click'}|[{'atom',54,'command_list_col_right_click'}|[{'atom',54,'command_list_col_begin_drag'}|[{'atom',54,'command_list_col_dragging'}|[{'atom',54,'command_list_col_end_drag'}|[{'atom',54,'command_list_item_selected'}|[{'atom',54,'command_list_item_deselected'}|[{'atom',54,'command_list_item_right_click'}|[{'atom',54,'command_list_item_middle_click'}|[{'atom',54,'command_list_item_activated'}|[{'atom',54,'command_list_item_focused'}|[{'atom',54,'command_list_cache_hint'}]]]]]]]]]]]]]]]]]]]]},[]}],
		%% Line 55
		'type' =
		    %% Line 55
		    [{'wxList',{'type',55,'record',[{'atom',55,'wxList'}]},[]}],
		%% Line 57
		'type' =
		    %% Line 57
		    [{{'record','wxNotebook'},[{'typed_record_field',{'record_field',57,{'atom',57,'type'}},{'type',57,'union',[{'atom',57,'undefined'}|[{'type',57,'wxNotebookEventType',[]}]]}}],[]}],
		%% Line 58
		'type' =
		    %% Line 58
		    [{'wxNotebookEventType',{'type',58,'union',[{'atom',58,'command_notebook_page_changed'}|[{'atom',58,'command_notebook_page_changing'}]]},[]}],
		%% Line 59
		'type' =
		    %% Line 59
		    [{'wxNotebook',{'type',59,'record',[{'atom',59,'wxNotebook'}]},[]}],
		%% Line 61
		'type' =
		    %% Line 61
		    [{{'record','wxDisplayChanged'},[{'typed_record_field',{'record_field',61,{'atom',61,'type'}},{'type',61,'union',[{'atom',61,'undefined'}|[{'type',61,'wxDisplayChangedEventType',[]}]]}}],[]}],
		%% Line 62
		'type' =
		    %% Line 62
		    [{'wxDisplayChangedEventType',{'atom',62,'display_changed'},[]}],
		%% Line 63
		'type' =
		    %% Line 63
		    [{'wxDisplayChanged',{'type',63,'record',[{'atom',63,'wxDisplayChanged'}]},[]}],
		%% Line 65
		'type' =
		    %% Line 65
		    [{{'record','wxErase'},[{'typed_record_field',{'record_field',65,{'atom',65,'type'}},{'type',65,'union',[{'atom',65,'undefined'}|[{'type',65,'wxEraseEventType',[]}]]}}|[{'typed_record_field',{'record_field',66,{'atom',66,'dc'}},{'type',66,'union',[{'atom',66,'undefined'}|[{'remote_type',66,[{'atom',66,'wxDC'}|[{'atom',66,'wxDC'}|[[]]]]}]]}}]],[]}],
		%% Line 67
		'type' =
		    %% Line 67
		    [{'wxEraseEventType',{'atom',67,'erase_background'},[]}],
		%% Line 68
		'type' =
		    %% Line 68
		    [{'wxErase',{'type',68,'record',[{'atom',68,'wxErase'}]},[]}],
		%% Line 70
		'type' =
		    %% Line 70
		    [{{'record','wxKey'},[{'typed_record_field',{'record_field',70,{'atom',70,'type'}},{'type',70,'union',[{'atom',70,'undefined'}|[{'type',70,'wxKeyEventType',[]}]]}}|[{'typed_record_field',{'record_field',71,{'atom',71,'x'}},{'type',71,'union',[{'atom',71,'undefined'}|[{'type',71,'integer',[]}]]}}|[{'typed_record_field',{'record_field',72,{'atom',72,'y'}},{'type',72,'union',[{'atom',72,'undefined'}|[{'type',72,'integer',[]}]]}}|[{'typed_record_field',{'record_field',73,{'atom',73,'keyCode'}},{'type',73,'union',[{'atom',73,'undefined'}|[{'type',73,'integer',[]}]]}}|[{'typed_record_field',{'record_field',74,{'atom',74,'controlDown'}},{'type',74,'union',[{'atom',74,'undefined'}|[{'type',74,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',75,{'atom',75,'shiftDown'}},{'type',75,'union',[{'atom',75,'undefined'}|[{'type',75,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',76,{'atom',76,'altDown'}},{'type',76,'union',[{'atom',76,'undefined'}|[{'type',76,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',77,{'atom',77,'metaDown'}},{'type',77,'union',[{'atom',77,'undefined'}|[{'type',77,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',78,{'atom',78,'scanCode'}},{'type',78,'union',[{'atom',78,'undefined'}|[{'type',78,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',79,{'atom',79,'uniChar'}},{'type',79,'union',[{'atom',79,'undefined'}|[{'type',79,'integer',[]}]]}}|[{'typed_record_field',{'record_field',80,{'atom',80,'rawCode'}},{'type',80,'union',[{'atom',80,'undefined'}|[{'type',80,'integer',[]}]]}}|[{'typed_record_field',{'record_field',81,{'atom',81,'rawFlags'}},{'type',81,'union',[{'atom',81,'undefined'}|[{'type',81,'integer',[]}]]}}]]]]]]]]]]]],[]}],
		%% Line 82
		'type' =
		    %% Line 82
		    [{'wxKeyEventType',{'type',82,'union',[{'atom',82,'char'}|[{'atom',82,'char_hook'}|[{'atom',82,'key_down'}|[{'atom',82,'key_up'}]]]]},[]}],
		%% Line 83
		'type' =
		    %% Line 83
		    [{'wxKey',{'type',83,'record',[{'atom',83,'wxKey'}]},[]}],
		%% Line 85
		'type' =
		    %% Line 85
		    [{{'record','wxWindowDestroy'},[{'typed_record_field',{'record_field',85,{'atom',85,'type'}},{'type',85,'union',[{'atom',85,'undefined'}|[{'type',85,'wxWindowDestroyEventType',[]}]]}}],[]}],
		%% Line 86
		'type' =
		    %% Line 86
		    [{'wxWindowDestroyEventType',{'atom',86,'destroy'},[]}],
		%% Line 87
		'type' =
		    %% Line 87
		    [{'wxWindowDestroy',{'type',87,'record',[{'atom',87,'wxWindowDestroy'}]},[]}],
		%% Line 89
		'type' =
		    %% Line 89
		    [{{'record','wxCalendar'},[{'typed_record_field',{'record_field',89,{'atom',89,'type'}},{'type',89,'union',[{'atom',89,'undefined'}|[{'type',89,'wxCalendarEventType',[]}]]}}],[]}],
		%% Line 90
		'type' =
		    %% Line 90
		    [{'wxCalendarEventType',{'type',90,'union',[{'atom',90,'calendar_sel_changed'}|[{'atom',90,'calendar_day_changed'}|[{'atom',90,'calendar_month_changed'}|[{'atom',90,'calendar_year_changed'}|[{'atom',90,'calendar_doubleclicked'}|[{'atom',90,'calendar_weekday_clicked'}]]]]]]},[]}],
		%% Line 91
		'type' =
		    %% Line 91
		    [{'wxCalendar',{'type',91,'record',[{'atom',91,'wxCalendar'}]},[]}],
		%% Line 93
		'type' =
		    %% Line 93
		    [{{'record','wxSplitter'},[{'typed_record_field',{'record_field',93,{'atom',93,'type'}},{'type',93,'union',[{'atom',93,'undefined'}|[{'type',93,'wxSplitterEventType',[]}]]}}],[]}],
		%% Line 94
		'type' =
		    %% Line 94
		    [{'wxSplitterEventType',{'type',94,'union',[{'atom',94,'command_splitter_sash_pos_changed'}|[{'atom',94,'command_splitter_sash_pos_changing'}|[{'atom',94,'command_splitter_doubleclicked'}|[{'atom',94,'command_splitter_unsplit'}]]]]},[]}],
		%% Line 95
		'type' =
		    %% Line 95
		    [{'wxSplitter',{'type',95,'record',[{'atom',95,'wxSplitter'}]},[]}],
		%% Line 97
		'type' =
		    %% Line 97
		    [{{'record','wxScroll'},[{'typed_record_field',{'record_field',97,{'atom',97,'type'}},{'type',97,'union',[{'atom',97,'undefined'}|[{'type',97,'wxScrollEventType',[]}]]}}|[{'typed_record_field',{'record_field',98,{'atom',98,'commandInt'}},{'type',98,'union',[{'atom',98,'undefined'}|[{'type',98,'integer',[]}]]}}|[{'typed_record_field',{'record_field',99,{'atom',99,'extraLong'}},{'type',99,'union',[{'atom',99,'undefined'}|[{'type',99,'integer',[]}]]}}]]],[]}],
		%% Line 100
		'type' =
		    %% Line 100
		    [{'wxScrollEventType',{'type',100,'union',[{'atom',100,'scroll_top'}|[{'atom',100,'scroll_bottom'}|[{'atom',100,'scroll_lineup'}|[{'atom',100,'scroll_linedown'}|[{'atom',100,'scroll_pageup'}|[{'atom',100,'scroll_pagedown'}|[{'atom',100,'scroll_thumbtrack'}|[{'atom',100,'scroll_thumbrelease'}|[{'atom',100,'scroll_changed'}]]]]]]]]]},[]}],
		%% Line 101
		'type' =
		    %% Line 101
		    [{'wxScroll',{'type',101,'record',[{'atom',101,'wxScroll'}]},[]}],
		%% Line 103
		'type' =
		    %% Line 103
		    [{{'record','wxMenu'},[{'typed_record_field',{'record_field',103,{'atom',103,'type'}},{'type',103,'union',[{'atom',103,'undefined'}|[{'type',103,'wxMenuEventType',[]}]]}}],[]}],
		%% Line 104
		'type' =
		    %% Line 104
		    [{'wxMenuEventType',{'type',104,'union',[{'atom',104,'menu_open'}|[{'atom',104,'menu_close'}|[{'atom',104,'menu_highlight'}]]]},[]}],
		%% Line 105
		'type' =
		    %% Line 105
		    [{'wxMenu',{'type',105,'record',[{'atom',105,'wxMenu'}]},[]}],
		%% Line 107
		'type' =
		    %% Line 107
		    [{{'record','wxContextMenu'},[{'typed_record_field',{'record_field',107,{'atom',107,'type'}},{'type',107,'union',[{'atom',107,'undefined'}|[{'type',107,'wxContextMenuEventType',[]}]]}}],[]}],
		%% Line 108
		'type' =
		    %% Line 108
		    [{'wxContextMenuEventType',{'atom',108,'context_menu'},[]}],
		%% Line 109
		'type' =
		    %% Line 109
		    [{'wxContextMenu',{'type',109,'record',[{'atom',109,'wxContextMenu'}]},[]}],
		%% Line 111
		'type' =
		    %% Line 111
		    [{{'record','wxShow'},[{'typed_record_field',{'record_field',111,{'atom',111,'type'}},{'type',111,'union',[{'atom',111,'undefined'}|[{'type',111,'wxShowEventType',[]}]]}}],[]}],
		%% Line 112
		'type' =
		    %% Line 112
		    [{'wxShowEventType',{'atom',112,'show'},[]}],
		%% Line 113
		'type' =
		    %% Line 113
		    [{'wxShow',{'type',113,'record',[{'atom',113,'wxShow'}]},[]}],
		%% Line 115
		'type' =
		    %% Line 115
		    [{{'record','wxSpin'},[{'typed_record_field',{'record_field',115,{'atom',115,'type'}},{'type',115,'union',[{'atom',115,'undefined'}|[{'type',115,'wxSpinEventType',[]}]]}}|[{'typed_record_field',{'record_field',116,{'atom',116,'commandInt'}},{'type',116,'union',[{'atom',116,'undefined'}|[{'type',116,'integer',[]}]]}}]],[]}],
		%% Line 117
		'type' =
		    %% Line 117
		    [{'wxSpinEventType',{'type',117,'union',[{'atom',117,'command_spinctrl_updated'}|[{'atom',117,'spin_up'}|[{'atom',117,'spin_down'}|[{'atom',117,'spin'}]]]]},[]}],
		%% Line 118
		'type' =
		    %% Line 118
		    [{'wxSpin',{'type',118,'record',[{'atom',118,'wxSpin'}]},[]}],
		%% Line 120
		'type' =
		    %% Line 120
		    [{{'record','wxSetCursor'},[{'typed_record_field',{'record_field',120,{'atom',120,'type'}},{'type',120,'union',[{'atom',120,'undefined'}|[{'type',120,'wxSetCursorEventType',[]}]]}}],[]}],
		%% Line 121
		'type' =
		    %% Line 121
		    [{'wxSetCursorEventType',{'atom',121,'set_cursor'},[]}],
		%% Line 122
		'type' =
		    %% Line 122
		    [{'wxSetCursor',{'type',122,'record',[{'atom',122,'wxSetCursor'}]},[]}],
		%% Line 124
		'type' =
		    %% Line 124
		    [{{'record','wxFontPicker'},[{'typed_record_field',{'record_field',124,{'atom',124,'type'}},{'type',124,'union',[{'atom',124,'undefined'}|[{'type',124,'wxFontPickerEventType',[]}]]}}|[{'typed_record_field',{'record_field',125,{'atom',125,'font'}},{'type',125,'union',[{'atom',125,'undefined'}|[{'remote_type',125,[{'atom',125,'wxFont'}|[{'atom',125,'wxFont'}|[[]]]]}]]}}]],[]}],
		%% Line 126
		'type' =
		    %% Line 126
		    [{'wxFontPickerEventType',{'atom',126,'command_fontpicker_changed'},[]}],
		%% Line 127
		'type' =
		    %% Line 127
		    [{'wxFontPicker',{'type',127,'record',[{'atom',127,'wxFontPicker'}]},[]}],
		%% Line 129
		'type' =
		    %% Line 129
		    [{{'record','wxScrollWin'},[{'typed_record_field',{'record_field',129,{'atom',129,'type'}},{'type',129,'union',[{'atom',129,'undefined'}|[{'type',129,'wxScrollWinEventType',[]}]]}}],[]}],
		%% Line 130
		'type' =
		    %% Line 130
		    [{'wxScrollWinEventType',{'type',130,'union',[{'atom',130,'scrollwin_top'}|[{'atom',130,'scrollwin_bottom'}|[{'atom',130,'scrollwin_lineup'}|[{'atom',130,'scrollwin_linedown'}|[{'atom',130,'scrollwin_pageup'}|[{'atom',130,'scrollwin_pagedown'}|[{'atom',130,'scrollwin_thumbtrack'}|[{'atom',130,'scrollwin_thumbrelease'}]]]]]]]]},[]}],
		%% Line 131
		'type' =
		    %% Line 131
		    [{'wxScrollWin',{'type',131,'record',[{'atom',131,'wxScrollWin'}]},[]}],
		%% Line 133
		'type' =
		    %% Line 133
		    [{{'record','wxPaint'},[{'typed_record_field',{'record_field',133,{'atom',133,'type'}},{'type',133,'union',[{'atom',133,'undefined'}|[{'type',133,'wxPaintEventType',[]}]]}}],[]}],
		%% Line 134
		'type' =
		    %% Line 134
		    [{'wxPaintEventType',{'atom',134,'paint'},[]}],
		%% Line 135
		'type' =
		    %% Line 135
		    [{'wxPaint',{'type',135,'record',[{'atom',135,'wxPaint'}]},[]}],
		%% Line 137
		'type' =
		    %% Line 137
		    [{{'record','wxChildFocus'},[{'typed_record_field',{'record_field',137,{'atom',137,'type'}},{'type',137,'union',[{'atom',137,'undefined'}|[{'type',137,'wxChildFocusEventType',[]}]]}}],[]}],
		%% Line 138
		'type' =
		    %% Line 138
		    [{'wxChildFocusEventType',{'atom',138,'child_focus'},[]}],
		%% Line 139
		'type' =
		    %% Line 139
		    [{'wxChildFocus',{'type',139,'record',[{'atom',139,'wxChildFocus'}]},[]}],
		%% Line 141
		'type' =
		    %% Line 141
		    [{{'record','wxMaximize'},[{'typed_record_field',{'record_field',141,{'atom',141,'type'}},{'type',141,'union',[{'atom',141,'undefined'}|[{'type',141,'wxMaximizeEventType',[]}]]}}],[]}],
		%% Line 142
		'type' =
		    %% Line 142
		    [{'wxMaximizeEventType',{'atom',142,'maximize'},[]}],
		%% Line 143
		'type' =
		    %% Line 143
		    [{'wxMaximize',{'type',143,'record',[{'atom',143,'wxMaximize'}]},[]}],
		%% Line 145
		'type' =
		    %% Line 145
		    [{{'record','wxFileDirPicker'},[{'typed_record_field',{'record_field',145,{'atom',145,'type'}},{'type',145,'union',[{'atom',145,'undefined'}|[{'type',145,'wxFileDirPickerEventType',[]}]]}}|[{'typed_record_field',{'record_field',146,{'atom',146,'path'}},{'type',146,'union',[{'atom',146,'undefined'}|[{'remote_type',146,[{'atom',146,'unicode'}|[{'atom',146,'chardata'}|[[]]]]}]]}}]],[]}],
		%% Line 147
		'type' =
		    %% Line 147
		    [{'wxFileDirPickerEventType',{'type',147,'union',[{'atom',147,'command_filepicker_changed'}|[{'atom',147,'command_dirpicker_changed'}]]},[]}],
		%% Line 148
		'type' =
		    %% Line 148
		    [{'wxFileDirPicker',{'type',148,'record',[{'atom',148,'wxFileDirPicker'}]},[]}],
		%% Line 150
		'type' =
		    %% Line 150
		    [{{'record','wxFocus'},[{'typed_record_field',{'record_field',150,{'atom',150,'type'}},{'type',150,'union',[{'atom',150,'undefined'}|[{'type',150,'wxFocusEventType',[]}]]}}],[]}],
		%% Line 151
		'type' =
		    %% Line 151
		    [{'wxFocusEventType',{'type',151,'union',[{'atom',151,'set_focus'}|[{'atom',151,'kill_focus'}]]},[]}],
		%% Line 152
		'type' =
		    %% Line 152
		    [{'wxFocus',{'type',152,'record',[{'atom',152,'wxFocus'}]},[]}],
		%% Line 154
		'type' =
		    %% Line 154
		    [{{'record','wxDate'},[{'typed_record_field',{'record_field',154,{'atom',154,'type'}},{'type',154,'union',[{'atom',154,'undefined'}|[{'type',154,'wxDateEventType',[]}]]}}|[{'typed_record_field',{'record_field',155,{'atom',155,'date'}},{'type',155,'union',[{'atom',155,'undefined'}|[{'remote_type',155,[{'atom',155,'wx'}|[{'atom',155,'wx_datetime'}|[[]]]]}]]}}]],[]}],
		%% Line 156
		'type' =
		    %% Line 156
		    [{'wxDateEventType',{'atom',156,'date_changed'},[]}],
		%% Line 157
		'type' =
		    %% Line 157
		    [{'wxDate',{'type',157,'record',[{'atom',157,'wxDate'}]},[]}],
		%% Line 159
		'type' =
		    %% Line 159
		    [{{'record','wxHtmlLink'},[{'typed_record_field',{'record_field',159,{'atom',159,'type'}},{'type',159,'union',[{'atom',159,'undefined'}|[{'type',159,'wxHtmlLinkEventType',[]}]]}}|[{'typed_record_field',{'record_field',160,{'atom',160,'linkInfo'}},{'type',160,'union',[{'atom',160,'undefined'}|[{'remote_type',160,[{'atom',160,'wx'}|[{'atom',160,'wx_wxHtmlLinkInfo'}|[[]]]]}]]}}]],[]}],
		%% Line 161
		'type' =
		    %% Line 161
		    [{'wxHtmlLinkEventType',{'atom',161,'command_html_link_clicked'},[]}],
		%% Line 162
		'type' =
		    %% Line 162
		    [{'wxHtmlLink',{'type',162,'record',[{'atom',162,'wxHtmlLink'}]},[]}],
		%% Line 164
		'type' =
		    %% Line 164
		    [{{'record','wxHelp'},[{'typed_record_field',{'record_field',164,{'atom',164,'type'}},{'type',164,'union',[{'atom',164,'undefined'}|[{'type',164,'wxHelpEventType',[]}]]}}],[]}],
		%% Line 165
		'type' =
		    %% Line 165
		    [{'wxHelpEventType',{'type',165,'union',[{'atom',165,'help'}|[{'atom',165,'detailed_help'}]]},[]}],
		%% Line 166
		'type' =
		    %% Line 166
		    [{'wxHelp',{'type',166,'record',[{'atom',166,'wxHelp'}]},[]}],
		%% Line 168
		'type' =
		    %% Line 168
		    [{{'record','wxActivate'},[{'typed_record_field',{'record_field',168,{'atom',168,'type'}},{'type',168,'union',[{'atom',168,'undefined'}|[{'type',168,'wxActivateEventType',[]}]]}}|[{'typed_record_field',{'record_field',169,{'atom',169,'active'}},{'type',169,'union',[{'atom',169,'undefined'}|[{'type',169,'boolean',[]}]]}}]],[]}],
		%% Line 170
		'type' =
		    %% Line 170
		    [{'wxActivateEventType',{'type',170,'union',[{'atom',170,'activate'}|[{'atom',170,'activate_app'}|[{'atom',170,'hibernate'}]]]},[]}],
		%% Line 171
		'type' =
		    %% Line 171
		    [{'wxActivate',{'type',171,'record',[{'atom',171,'wxActivate'}]},[]}],
		%% Line 173
		'type' =
		    %% Line 173
		    [{{'record','wxStyledText'},[{'typed_record_field',{'record_field',173,{'atom',173,'type'}},{'type',173,'union',[{'atom',173,'undefined'}|[{'type',173,'wxStyledTextEventType',[]}]]}}|[{'typed_record_field',{'record_field',174,{'atom',174,'position'}},{'type',174,'union',[{'atom',174,'undefined'}|[{'type',174,'integer',[]}]]}}|[{'typed_record_field',{'record_field',175,{'atom',175,'key'}},{'type',175,'union',[{'atom',175,'undefined'}|[{'type',175,'integer',[]}]]}}|[{'typed_record_field',{'record_field',176,{'atom',176,'modifiers'}},{'type',176,'union',[{'atom',176,'undefined'}|[{'type',176,'integer',[]}]]}}|[{'typed_record_field',{'record_field',177,{'atom',177,'modificationType'}},{'type',177,'union',[{'atom',177,'undefined'}|[{'type',177,'integer',[]}]]}}|[{'typed_record_field',{'record_field',178,{'atom',178,'text'}},{'type',178,'union',[{'atom',178,'undefined'}|[{'remote_type',178,[{'atom',178,'unicode'}|[{'atom',178,'chardata'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',179,{'atom',179,'length'}},{'type',179,'union',[{'atom',179,'undefined'}|[{'type',179,'integer',[]}]]}}|[{'typed_record_field',{'record_field',180,{'atom',180,'linesAdded'}},{'type',180,'union',[{'atom',180,'undefined'}|[{'type',180,'integer',[]}]]}}|[{'typed_record_field',{'record_field',181,{'atom',181,'line'}},{'type',181,'union',[{'atom',181,'undefined'}|[{'type',181,'integer',[]}]]}}|[{'typed_record_field',{'record_field',182,{'atom',182,'foldLevelNow'}},{'type',182,'union',[{'atom',182,'undefined'}|[{'type',182,'integer',[]}]]}}|[{'typed_record_field',{'record_field',183,{'atom',183,'foldLevelPrev'}},{'type',183,'union',[{'atom',183,'undefined'}|[{'type',183,'integer',[]}]]}}|[{'typed_record_field',{'record_field',184,{'atom',184,'margin'}},{'type',184,'union',[{'atom',184,'undefined'}|[{'type',184,'integer',[]}]]}}|[{'typed_record_field',{'record_field',185,{'atom',185,'message'}},{'type',185,'union',[{'atom',185,'undefined'}|[{'type',185,'integer',[]}]]}}|[{'typed_record_field',{'record_field',186,{'atom',186,'wParam'}},{'type',186,'union',[{'atom',186,'undefined'}|[{'type',186,'integer',[]}]]}}|[{'typed_record_field',{'record_field',187,{'atom',187,'lParam'}},{'type',187,'union',[{'atom',187,'undefined'}|[{'type',187,'integer',[]}]]}}|[{'typed_record_field',{'record_field',188,{'atom',188,'listType'}},{'type',188,'union',[{'atom',188,'undefined'}|[{'type',188,'integer',[]}]]}}|[{'typed_record_field',{'record_field',189,{'atom',189,'x'}},{'type',189,'union',[{'atom',189,'undefined'}|[{'type',189,'integer',[]}]]}}|[{'typed_record_field',{'record_field',190,{'atom',190,'y'}},{'type',190,'union',[{'atom',190,'undefined'}|[{'type',190,'integer',[]}]]}}|[{'typed_record_field',{'record_field',191,{'atom',191,'dragText'}},{'type',191,'union',[{'atom',191,'undefined'}|[{'remote_type',191,[{'atom',191,'unicode'}|[{'atom',191,'chardata'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',192,{'atom',192,'dragAllowMove'}},{'type',192,'union',[{'atom',192,'undefined'}|[{'type',192,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',193,{'atom',193,'dragResult'}},{'type',193,'union',[{'atom',193,'undefined'}|[{'remote_type',193,[{'atom',193,'wx'}|[{'atom',193,'wx_enum'}|[[]]]]}]]}}]]]]]]]]]]]]]]]]]]]]],[]}],
		%% Line 194
		'type' =
		    %% Line 194
		    [{'wxStyledTextEventType',{'type',194,'union',[{'atom',194,'stc_change'}|[{'atom',194,'stc_styleneeded'}|[{'atom',194,'stc_charadded'}|[{'atom',194,'stc_savepointreached'}|[{'atom',194,'stc_savepointleft'}|[{'atom',194,'stc_romodifyattempt'}|[{'atom',194,'stc_key'}|[{'atom',194,'stc_doubleclick'}|[{'atom',194,'stc_updateui'}|[{'atom',194,'stc_modified'}|[{'atom',194,'stc_macrorecord'}|[{'atom',194,'stc_marginclick'}|[{'atom',194,'stc_needshown'}|[{'atom',194,'stc_painted'}|[{'atom',194,'stc_userlistselection'}|[{'atom',194,'stc_uridropped'}|[{'atom',194,'stc_dwellstart'}|[{'atom',194,'stc_dwellend'}|[{'atom',194,'stc_start_drag'}|[{'atom',194,'stc_drag_over'}|[{'atom',194,'stc_do_drop'}|[{'atom',194,'stc_zoom'}|[{'atom',194,'stc_hotspot_click'}|[{'atom',194,'stc_hotspot_dclick'}|[{'atom',194,'stc_calltip_click'}|[{'atom',194,'stc_autocomp_selection'}]]]]]]]]]]]]]]]]]]]]]]]]]]},[]}],
		%% Line 195
		'type' =
		    %% Line 195
		    [{'wxStyledText',{'type',195,'record',[{'atom',195,'wxStyledText'}]},[]}],
		%% Line 197
		'type' =
		    %% Line 197
		    [{{'record','wxSysColourChanged'},[{'typed_record_field',{'record_field',197,{'atom',197,'type'}},{'type',197,'union',[{'atom',197,'undefined'}|[{'type',197,'wxSysColourChangedEventType',[]}]]}}],[]}],
		%% Line 198
		'type' =
		    %% Line 198
		    [{'wxSysColourChangedEventType',{'atom',198,'sys_colour_changed'},[]}],
		%% Line 199
		'type' =
		    %% Line 199
		    [{'wxSysColourChanged',{'type',199,'record',[{'atom',199,'wxSysColourChanged'}]},[]}],
		%% Line 201
		'type' =
		    %% Line 201
		    [{{'record','wxGrid'},[{'typed_record_field',{'record_field',201,{'atom',201,'type'}},{'type',201,'union',[{'atom',201,'undefined'}|[{'type',201,'wxGridEventType',[]}]]}}|[{'typed_record_field',{'record_field',202,{'atom',202,'row'}},{'type',202,'union',[{'atom',202,'undefined'}|[{'type',202,'integer',[]}]]}}|[{'typed_record_field',{'record_field',203,{'atom',203,'col'}},{'type',203,'union',[{'atom',203,'undefined'}|[{'type',203,'integer',[]}]]}}|[{'typed_record_field',{'record_field',204,{'atom',204,'x'}},{'type',204,'union',[{'atom',204,'undefined'}|[{'type',204,'integer',[]}]]}}|[{'typed_record_field',{'record_field',205,{'atom',205,'y'}},{'type',205,'union',[{'atom',205,'undefined'}|[{'type',205,'integer',[]}]]}}|[{'typed_record_field',{'record_field',206,{'atom',206,'selecting'}},{'type',206,'union',[{'atom',206,'undefined'}|[{'type',206,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',207,{'atom',207,'control'}},{'type',207,'union',[{'atom',207,'undefined'}|[{'type',207,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',208,{'atom',208,'meta'}},{'type',208,'union',[{'atom',208,'undefined'}|[{'type',208,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',209,{'atom',209,'shift'}},{'type',209,'union',[{'atom',209,'undefined'}|[{'type',209,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',210,{'atom',210,'alt'}},{'type',210,'union',[{'atom',210,'undefined'}|[{'type',210,'boolean',[]}]]}}]]]]]]]]]],[]}],
		%% Line 211
		'type' =
		    %% Line 211
		    [{'wxGridEventType',{'type',211,'union',[{'atom',211,'grid_cell_left_click'}|[{'atom',211,'grid_cell_right_click'}|[{'atom',211,'grid_cell_left_dclick'}|[{'atom',211,'grid_cell_right_dclick'}|[{'atom',211,'grid_label_left_click'}|[{'atom',211,'grid_label_right_click'}|[{'atom',211,'grid_label_left_dclick'}|[{'atom',211,'grid_label_right_dclick'}|[{'atom',211,'grid_row_size'}|[{'atom',211,'grid_col_size'}|[{'atom',211,'grid_range_select'}|[{'atom',211,'grid_cell_change'}|[{'atom',211,'grid_select_cell'}|[{'atom',211,'grid_editor_shown'}|[{'atom',211,'grid_editor_hidden'}|[{'atom',211,'grid_editor_created'}|[{'atom',211,'grid_cell_begin_drag'}]]]]]]]]]]]]]]]]]},[]}],
		%% Line 212
		'type' =
		    %% Line 212
		    [{'wxGrid',{'type',212,'record',[{'atom',212,'wxGrid'}]},[]}],
		%% Line 214
		'type' =
		    %% Line 214
		    [{{'record','wxPaletteChanged'},[{'typed_record_field',{'record_field',214,{'atom',214,'type'}},{'type',214,'union',[{'atom',214,'undefined'}|[{'type',214,'wxPaletteChangedEventType',[]}]]}}],[]}],
		%% Line 215
		'type' =
		    %% Line 215
		    [{'wxPaletteChangedEventType',{'atom',215,'palette_changed'},[]}],
		%% Line 216
		'type' =
		    %% Line 216
		    [{'wxPaletteChanged',{'type',216,'record',[{'atom',216,'wxPaletteChanged'}]},[]}],
		%% Line 218
		'type' =
		    %% Line 218
		    [{{'record','wxUpdateUI'},[{'typed_record_field',{'record_field',218,{'atom',218,'type'}},{'type',218,'union',[{'atom',218,'undefined'}|[{'type',218,'wxUpdateUIEventType',[]}]]}}],[]}],
		%% Line 219
		'type' =
		    %% Line 219
		    [{'wxUpdateUIEventType',{'atom',219,'update_ui'},[]}],
		%% Line 220
		'type' =
		    %% Line 220
		    [{'wxUpdateUI',{'type',220,'record',[{'atom',220,'wxUpdateUI'}]},[]}],
		%% Line 222
		'type' =
		    %% Line 222
		    [{{'record','wxSize'},[{'typed_record_field',{'record_field',222,{'atom',222,'type'}},{'type',222,'union',[{'atom',222,'undefined'}|[{'type',222,'wxSizeEventType',[]}]]}}|[{'typed_record_field',{'record_field',223,{'atom',223,'size'}},{'type',223,'union',[{'atom',223,'undefined'}|[{'type',223,'tuple',[{'ann_type',223,[{'var',223,'W'}|[{'type',223,'integer',[]}]]}|[{'ann_type',223,[{'var',223,'H'}|[{'type',223,'integer',[]}]]}]]}]]}}|[{'typed_record_field',{'record_field',224,{'atom',224,'rect'}},{'type',224,'union',[{'atom',224,'undefined'}|[{'type',224,'tuple',[{'ann_type',224,[{'var',224,'X'}|[{'type',224,'integer',[]}]]}|[{'ann_type',224,[{'var',224,'Y'}|[{'type',224,'integer',[]}]]}|[{'ann_type',224,[{'var',224,'W'}|[{'type',224,'integer',[]}]]}|[{'ann_type',224,[{'var',224,'H'}|[{'type',224,'integer',[]}]]}]]]]}]]}}]]],[]}],
		%% Line 225
		'type' =
		    %% Line 225
		    [{'wxSizeEventType',{'atom',225,'size'},[]}],
		%% Line 226
		'type' =
		    %% Line 226
		    [{'wxSize',{'type',226,'record',[{'atom',226,'wxSize'}]},[]}],
		%% Line 228
		'type' =
		    %% Line 228
		    [{{'record','wxIconize'},[{'typed_record_field',{'record_field',228,{'atom',228,'type'}},{'type',228,'union',[{'atom',228,'undefined'}|[{'type',228,'wxIconizeEventType',[]}]]}}],[]}],
		%% Line 229
		'type' =
		    %% Line 229
		    [{'wxIconizeEventType',{'atom',229,'iconize'},[]}],
		%% Line 230
		'type' =
		    %% Line 230
		    [{'wxIconize',{'type',230,'record',[{'atom',230,'wxIconize'}]},[]}],
		%% Line 232
		'type' =
		    %% Line 232
		    [{{'record','wxAuiNotebook'},[{'typed_record_field',{'record_field',232,{'atom',232,'type'}},{'type',232,'union',[{'atom',232,'undefined'}|[{'type',232,'wxAuiNotebookEventType',[]}]]}}|[{'typed_record_field',{'record_field',233,{'atom',233,'old_selection'}},{'type',233,'union',[{'atom',233,'undefined'}|[{'type',233,'integer',[]}]]}}|[{'typed_record_field',{'record_field',234,{'atom',234,'selection'}},{'type',234,'union',[{'atom',234,'undefined'}|[{'type',234,'integer',[]}]]}}|[{'typed_record_field',{'record_field',235,{'atom',235,'drag_source'}},{'type',235,'union',[{'atom',235,'undefined'}|[{'remote_type',235,[{'atom',235,'wxAuiNotebook'}|[{'atom',235,'wxAuiNotebook'}|[[]]]]}]]}}]]]],[]}],
		%% Line 236
		'type' =
		    %% Line 236
		    [{'wxAuiNotebookEventType',{'type',236,'union',[{'atom',236,'command_auinotebook_page_close'}|[{'atom',236,'command_auinotebook_page_changed'}|[{'atom',236,'command_auinotebook_page_changing'}|[{'atom',236,'command_auinotebook_button'}|[{'atom',236,'command_auinotebook_begin_drag'}|[{'atom',236,'command_auinotebook_end_drag'}|[{'atom',236,'command_auinotebook_drag_motion'}|[{'atom',236,'command_auinotebook_allow_dnd'}|[{'atom',236,'command_auinotebook_tab_middle_down'}|[{'atom',236,'command_auinotebook_tab_middle_up'}|[{'atom',236,'command_auinotebook_tab_right_down'}|[{'atom',236,'command_auinotebook_tab_right_up'}|[{'atom',236,'command_auinotebook_page_closed'}|[{'atom',236,'command_auinotebook_drag_done'}|[{'atom',236,'command_auinotebook_bg_dclick'}]]]]]]]]]]]]]]]},[]}],
		%% Line 237
		'type' =
		    %% Line 237
		    [{'wxAuiNotebook',{'type',237,'record',[{'atom',237,'wxAuiNotebook'}]},[]}],
		%% Line 239
		'type' =
		    %% Line 239
		    [{{'record','wxClose'},[{'typed_record_field',{'record_field',239,{'atom',239,'type'}},{'type',239,'union',[{'atom',239,'undefined'}|[{'type',239,'wxCloseEventType',[]}]]}}],[]}],
		%% Line 240
		'type' =
		    %% Line 240
		    [{'wxCloseEventType',{'type',240,'union',[{'atom',240,'close_window'}|[{'atom',240,'end_session'}|[{'atom',240,'query_end_session'}]]]},[]}],
		%% Line 241
		'type' =
		    %% Line 241
		    [{'wxClose',{'type',241,'record',[{'atom',241,'wxClose'}]},[]}],
		%% Line 243
		'type' =
		    %% Line 243
		    [{{'record','wxMouseCaptureChanged'},[{'typed_record_field',{'record_field',243,{'atom',243,'type'}},{'type',243,'union',[{'atom',243,'undefined'}|[{'type',243,'wxMouseCaptureChangedEventType',[]}]]}}],[]}],
		%% Line 244
		'type' =
		    %% Line 244
		    [{'wxMouseCaptureChangedEventType',{'atom',244,'mouse_capture_changed'},[]}],
		%% Line 245
		'type' =
		    %% Line 245
		    [{'wxMouseCaptureChanged',{'type',245,'record',[{'atom',245,'wxMouseCaptureChanged'}]},[]}],
		%% Line 247
		'type' =
		    %% Line 247
		    [{{'record','wxMouse'},[{'typed_record_field',{'record_field',247,{'atom',247,'type'}},{'type',247,'union',[{'atom',247,'undefined'}|[{'type',247,'wxMouseEventType',[]}]]}}|[{'typed_record_field',{'record_field',248,{'atom',248,'x'}},{'type',248,'union',[{'atom',248,'undefined'}|[{'type',248,'integer',[]}]]}}|[{'typed_record_field',{'record_field',249,{'atom',249,'y'}},{'type',249,'union',[{'atom',249,'undefined'}|[{'type',249,'integer',[]}]]}}|[{'typed_record_field',{'record_field',250,{'atom',250,'leftDown'}},{'type',250,'union',[{'atom',250,'undefined'}|[{'type',250,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',251,{'atom',251,'middleDown'}},{'type',251,'union',[{'atom',251,'undefined'}|[{'type',251,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',252,{'atom',252,'rightDown'}},{'type',252,'union',[{'atom',252,'undefined'}|[{'type',252,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',253,{'atom',253,'controlDown'}},{'type',253,'union',[{'atom',253,'undefined'}|[{'type',253,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',254,{'atom',254,'shiftDown'}},{'type',254,'union',[{'atom',254,'undefined'}|[{'type',254,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',255,{'atom',255,'altDown'}},{'type',255,'union',[{'atom',255,'undefined'}|[{'type',255,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',256,{'atom',256,'metaDown'}},{'type',256,'union',[{'atom',256,'undefined'}|[{'type',256,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',257,{'atom',257,'wheelRotation'}},{'type',257,'union',[{'atom',257,'undefined'}|[{'type',257,'integer',[]}]]}}|[{'typed_record_field',{'record_field',258,{'atom',258,'wheelDelta'}},{'type',258,'union',[{'atom',258,'undefined'}|[{'type',258,'integer',[]}]]}}|[{'typed_record_field',{'record_field',259,{'atom',259,'linesPerAction'}},{'type',259,'union',[{'atom',259,'undefined'}|[{'type',259,'integer',[]}]]}}]]]]]]]]]]]]],[]}],
		%% Line 260
		'type' =
		    %% Line 260
		    [{'wxMouseEventType',{'type',260,'union',[{'atom',260,'left_down'}|[{'atom',260,'left_up'}|[{'atom',260,'middle_down'}|[{'atom',260,'middle_up'}|[{'atom',260,'right_down'}|[{'atom',260,'right_up'}|[{'atom',260,'motion'}|[{'atom',260,'enter_window'}|[{'atom',260,'leave_window'}|[{'atom',260,'left_dclick'}|[{'atom',260,'middle_dclick'}|[{'atom',260,'right_dclick'}|[{'atom',260,'mousewheel'}]]]]]]]]]]]]]},[]}],
		%% Line 261
		'type' =
		    %% Line 261
		    [{'wxMouse',{'type',261,'record',[{'atom',261,'wxMouse'}]},[]}],
		%% Line 263
		'type' =
		    %% Line 263
		    [{{'record','wxClipboardText'},[{'typed_record_field',{'record_field',263,{'atom',263,'type'}},{'type',263,'union',[{'atom',263,'undefined'}|[{'type',263,'wxClipboardTextEventType',[]}]]}}],[]}],
		%% Line 264
		'type' =
		    %% Line 264
		    [{'wxClipboardTextEventType',{'type',264,'union',[{'atom',264,'command_text_copy'}|[{'atom',264,'command_text_cut'}|[{'atom',264,'command_text_paste'}]]]},[]}],
		%% Line 265
		'type' =
		    %% Line 265
		    [{'wxClipboardText',{'type',265,'record',[{'atom',265,'wxClipboardText'}]},[]}],
		%% Line 267
		'type' =
		    %% Line 267
		    [{{'record','wxWindowCreate'},[{'typed_record_field',{'record_field',267,{'atom',267,'type'}},{'type',267,'union',[{'atom',267,'undefined'}|[{'type',267,'wxWindowCreateEventType',[]}]]}}],[]}],
		%% Line 268
		'type' =
		    %% Line 268
		    [{'wxWindowCreateEventType',{'atom',268,'create'},[]}],
		%% Line 269
		'type' =
		    %% Line 269
		    [{'wxWindowCreate',{'type',269,'record',[{'atom',269,'wxWindowCreate'}]},[]}],
		%% Line 271
		'type' =
		    %% Line 271
		    [{{'record','wxAuiManager'},[{'typed_record_field',{'record_field',271,{'atom',271,'type'}},{'type',271,'union',[{'atom',271,'undefined'}|[{'type',271,'wxAuiManagerEventType',[]}]]}}|[{'typed_record_field',{'record_field',272,{'atom',272,'manager'}},{'type',272,'union',[{'atom',272,'undefined'}|[{'remote_type',272,[{'atom',272,'wxAuiManager'}|[{'atom',272,'wxAuiManager'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',273,{'atom',273,'pane'}},{'type',273,'union',[{'atom',273,'undefined'}|[{'remote_type',273,[{'atom',273,'wxAuiPaneInfo'}|[{'atom',273,'wxAuiPaneInfo'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',274,{'atom',274,'button'}},{'type',274,'union',[{'atom',274,'undefined'}|[{'type',274,'integer',[]}]]}}|[{'typed_record_field',{'record_field',275,{'atom',275,'veto_flag'}},{'type',275,'union',[{'atom',275,'undefined'}|[{'type',275,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',276,{'atom',276,'canveto_flag'}},{'type',276,'union',[{'atom',276,'undefined'}|[{'type',276,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',277,{'atom',277,'dc'}},{'type',277,'union',[{'atom',277,'undefined'}|[{'remote_type',277,[{'atom',277,'wxDC'}|[{'atom',277,'wxDC'}|[[]]]]}]]}}]]]]]]],[]}],
		%% Line 278
		'type' =
		    %% Line 278
		    [{'wxAuiManagerEventType',{'type',278,'union',[{'atom',278,'aui_pane_button'}|[{'atom',278,'aui_pane_close'}|[{'atom',278,'aui_pane_maximize'}|[{'atom',278,'aui_pane_restore'}|[{'atom',278,'aui_render'}|[{'atom',278,'aui_find_manager'}]]]]]]},[]}],
		%% Line 279
		'type' =
		    %% Line 279
		    [{'wxAuiManager',{'type',279,'record',[{'atom',279,'wxAuiManager'}]},[]}],
		%% Line 281
		'type' =
		    %% Line 281
		    [{{'record','wxInitDialog'},[{'typed_record_field',{'record_field',281,{'atom',281,'type'}},{'type',281,'union',[{'atom',281,'undefined'}|[{'type',281,'wxInitDialogEventType',[]}]]}}],[]}],
		%% Line 282
		'type' =
		    %% Line 282
		    [{'wxInitDialogEventType',{'atom',282,'init_dialog'},[]}],
		%% Line 283
		'type' =
		    %% Line 283
		    [{'wxInitDialog',{'type',283,'record',[{'atom',283,'wxInitDialog'}]},[]}],
		%% Line 285
		'type' =
		    %% Line 285
		    [{{'record','wxCommand'},[{'typed_record_field',{'record_field',285,{'atom',285,'type'}},{'type',285,'union',[{'atom',285,'undefined'}|[{'type',285,'wxCommandEventType',[]}]]}}|[{'typed_record_field',{'record_field',286,{'atom',286,'cmdString'}},{'type',286,'union',[{'atom',286,'undefined'}|[{'remote_type',286,[{'atom',286,'unicode'}|[{'atom',286,'chardata'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',287,{'atom',287,'commandInt'}},{'type',287,'union',[{'atom',287,'undefined'}|[{'type',287,'integer',[]}]]}}|[{'typed_record_field',{'record_field',288,{'atom',288,'extraLong'}},{'type',288,'union',[{'atom',288,'undefined'}|[{'type',288,'integer',[]}]]}}]]]],[]}],
		%% Line 289
		'type' =
		    %% Line 289
		    [{'wxCommandEventType',{'type',289,'union',[{'atom',289,'command_button_clicked'}|[{'atom',289,'command_checkbox_clicked'}|[{'atom',289,'command_choice_selected'}|[{'atom',289,'command_listbox_selected'}|[{'atom',289,'command_listbox_doubleclicked'}|[{'atom',289,'command_text_updated'}|[{'atom',289,'command_text_enter'}|[{'atom',289,'command_menu_selected'}|[{'atom',289,'command_slider_updated'}|[{'atom',289,'command_radiobox_selected'}|[{'atom',289,'command_radiobutton_selected'}|[{'atom',289,'command_scrollbar_updated'}|[{'atom',289,'command_vlbox_selected'}|[{'atom',289,'command_combobox_selected'}|[{'atom',289,'command_tool_rclicked'}|[{'atom',289,'command_tool_enter'}|[{'atom',289,'command_checklistbox_toggled'}|[{'atom',289,'command_togglebutton_clicked'}|[{'atom',289,'command_left_click'}|[{'atom',289,'command_left_dclick'}|[{'atom',289,'command_right_click'}|[{'atom',289,'command_set_focus'}|[{'atom',289,'command_kill_focus'}|[{'atom',289,'command_enter'}]]]]]]]]]]]]]]]]]]]]]]]]},[]}],
		%% Line 290
		'type' =
		    %% Line 290
		    [{'wxCommand',{'type',290,'record',[{'atom',290,'wxCommand'}]},[]}],
		%% Line 292
		'type' =
		    %% Line 292
		    [{{'record','wxJoystick'},[{'typed_record_field',{'record_field',292,{'atom',292,'type'}},{'type',292,'union',[{'atom',292,'undefined'}|[{'type',292,'wxJoystickEventType',[]}]]}}],[]}],
		%% Line 293
		'type' =
		    %% Line 293
		    [{'wxJoystickEventType',{'type',293,'union',[{'atom',293,'joy_button_down'}|[{'atom',293,'joy_button_up'}|[{'atom',293,'joy_move'}|[{'atom',293,'joy_zmove'}]]]]},[]}],
		%% Line 294
		'type' =
		    %% Line 294
		    [{'wxJoystick',{'type',294,'record',[{'atom',294,'wxJoystick'}]},[]}],
		%% Line 296
		'type' =
		    %% Line 296
		    [{{'record','wxQueryNewPalette'},[{'typed_record_field',{'record_field',296,{'atom',296,'type'}},{'type',296,'union',[{'atom',296,'undefined'}|[{'type',296,'wxQueryNewPaletteEventType',[]}]]}}],[]}],
		%% Line 297
		'type' =
		    %% Line 297
		    [{'wxQueryNewPaletteEventType',{'atom',297,'query_new_palette'},[]}],
		%% Line 298
		'type' =
		    %% Line 298
		    [{'wxQueryNewPalette',{'type',298,'record',[{'atom',298,'wxQueryNewPalette'}]},[]}],
		%% Line 300
		'type' =
		    %% Line 300
		    [{{'record','wxMove'},[{'typed_record_field',{'record_field',300,{'atom',300,'type'}},{'type',300,'union',[{'atom',300,'undefined'}|[{'type',300,'wxMoveEventType',[]}]]}}],[]}],
		%% Line 301
		'type' =
		    %% Line 301
		    [{'wxMoveEventType',{'atom',301,'move'},[]}],
		%% Line 302
		'type' =
		    %% Line 302
		    [{'wxMove',{'type',302,'record',[{'atom',302,'wxMove'}]},[]}],
		%% Line 304
		'type' =
		    %% Line 304
		    [{{'record','wxIdle'},[{'typed_record_field',{'record_field',304,{'atom',304,'type'}},{'type',304,'union',[{'atom',304,'undefined'}|[{'type',304,'wxIdleEventType',[]}]]}}],[]}],
		%% Line 305
		'type' =
		    %% Line 305
		    [{'wxIdleEventType',{'atom',305,'idle'},[]}],
		%% Line 306
		'type' =
		    %% Line 306
		    [{'wxIdle',{'type',306,'record',[{'atom',306,'wxIdle'}]},[]}],
		%% Line 308
		'type' =
		    %% Line 308
		    [{{'record','wxColourPicker'},[{'typed_record_field',{'record_field',308,{'atom',308,'type'}},{'type',308,'union',[{'atom',308,'undefined'}|[{'type',308,'wxColourPickerEventType',[]}]]}}|[{'typed_record_field',{'record_field',309,{'atom',309,'colour'}},{'type',309,'union',[{'atom',309,'undefined'}|[{'remote_type',309,[{'atom',309,'wx'}|[{'atom',309,'wx_colour'}|[[]]]]}]]}}]],[]}],
		%% Line 310
		'type' =
		    %% Line 310
		    [{'wxColourPickerEventType',{'atom',310,'command_colourpicker_changed'},[]}],
		%% Line 311
		'type' =
		    %% Line 311
		    [{'wxColourPicker',{'type',311,'record',[{'atom',311,'wxColourPicker'}]},[]}],
		%% Line 313
		'type' =
		    %% Line 313
		    [{{'record','wxTaskBarIcon'},[{'typed_record_field',{'record_field',313,{'atom',313,'type'}},{'type',313,'union',[{'atom',313,'undefined'}|[{'type',313,'wxTaskBarIconEventType',[]}]]}}],[]}],
		%% Line 314
		'type' =
		    %% Line 314
		    [{'wxTaskBarIconEventType',{'type',314,'union',[{'atom',314,'taskbar_move'}|[{'atom',314,'taskbar_left_down'}|[{'atom',314,'taskbar_left_up'}|[{'atom',314,'taskbar_right_down'}|[{'atom',314,'taskbar_right_up'}|[{'atom',314,'taskbar_left_dclick'}|[{'atom',314,'taskbar_right_dclick'}]]]]]]]},[]}],
		%% Line 315
		'type' =
		    %% Line 315
		    [{'wxTaskBarIcon',{'type',315,'record',[{'atom',315,'wxTaskBarIcon'}]},[]}],
		%% Line 317
		'type' =
		    %% Line 317
		    [{{'record','wxTree'},[{'typed_record_field',{'record_field',317,{'atom',317,'type'}},{'type',317,'union',[{'atom',317,'undefined'}|[{'type',317,'wxTreeEventType',[]}]]}}|[{'typed_record_field',{'record_field',318,{'atom',318,'item'}},{'type',318,'union',[{'atom',318,'undefined'}|[{'type',318,'integer',[]}]]}}|[{'typed_record_field',{'record_field',319,{'atom',319,'itemOld'}},{'type',319,'union',[{'atom',319,'undefined'}|[{'type',319,'integer',[]}]]}}|[{'typed_record_field',{'record_field',320,{'atom',320,'pointDrag'}},{'type',320,'union',[{'atom',320,'undefined'}|[{'type',320,'tuple',[{'ann_type',320,[{'var',320,'X'}|[{'type',320,'integer',[]}]]}|[{'ann_type',320,[{'var',320,'Y'}|[{'type',320,'integer',[]}]]}]]}]]}}]]]],[]}],
		%% Line 321
		'type' =
		    %% Line 321
		    [{'wxTreeEventType',{'type',321,'union',[{'atom',321,'command_tree_begin_drag'}|[{'atom',321,'command_tree_begin_rdrag'}|[{'atom',321,'command_tree_begin_label_edit'}|[{'atom',321,'command_tree_end_label_edit'}|[{'atom',321,'command_tree_delete_item'}|[{'atom',321,'command_tree_get_info'}|[{'atom',321,'command_tree_set_info'}|[{'atom',321,'command_tree_item_expanded'}|[{'atom',321,'command_tree_item_expanding'}|[{'atom',321,'command_tree_item_collapsed'}|[{'atom',321,'command_tree_item_collapsing'}|[{'atom',321,'command_tree_sel_changed'}|[{'atom',321,'command_tree_sel_changing'}|[{'atom',321,'command_tree_key_down'}|[{'atom',321,'command_tree_item_activated'}|[{'atom',321,'command_tree_item_right_click'}|[{'atom',321,'command_tree_item_middle_click'}|[{'atom',321,'command_tree_end_drag'}|[{'atom',321,'command_tree_state_image_click'}|[{'atom',321,'command_tree_item_gettooltip'}|[{'atom',321,'command_tree_item_menu'}]]]]]]]]]]]]]]]]]]]]]},[]}],
		%% Line 322
		'type' =
		    %% Line 322
		    [{'wxTree',{'type',322,'record',[{'atom',322,'wxTree'}]},[]}],
		%% Line 324
		'type' =
		    %% Line 324
		    [{'event',{'type',324,'union',[{'type',324,'wxActivate',[]}|[{'type',324,'wxAuiManager',[]}|[{'type',324,'wxAuiNotebook',[]}|[{'type',324,'wxCalendar',[]}|[{'type',324,'wxChildFocus',[]}|[{'type',324,'wxClipboardText',[]}|[{'type',324,'wxClose',[]}|[{'type',324,'wxColourPicker',[]}|[{'type',324,'wxCommand',[]}|[{'type',324,'wxContextMenu',[]}|[{'type',324,'wxDate',[]}|[{'type',324,'wxDisplayChanged',[]}|[{'type',324,'wxErase',[]}|[{'type',324,'wxFileDirPicker',[]}|[{'type',324,'wxFocus',[]}|[{'type',324,'wxFontPicker',[]}|[{'type',324,'wxGrid',[]}|[{'type',324,'wxHelp',[]}|[{'type',324,'wxHtmlLink',[]}|[{'type',324,'wxIconize',[]}|[{'type',324,'wxIdle',[]}|[{'type',324,'wxInitDialog',[]}|[{'type',324,'wxJoystick',[]}|[{'type',324,'wxKey',[]}|[{'type',324,'wxList',[]}|[{'type',324,'wxMaximize',[]}|[{'type',324,'wxMenu',[]}|[{'type',324,'wxMouse',[]}|[{'type',324,'wxMouseCaptureChanged',[]}|[{'type',324,'wxMove',[]}|[{'type',324,'wxNavigationKey',[]}|[{'type',324,'wxNotebook',[]}|[{'type',324,'wxPaint',[]}|[{'type',324,'wxPaletteChanged',[]}|[{'type',324,'wxQueryNewPalette',[]}|[{'type',324,'wxSash',[]}|[{'type',324,'wxScroll',[]}|[{'type',324,'wxScrollWin',[]}|[{'type',324,'wxSetCursor',[]}|[{'type',324,'wxShow',[]}|[{'type',324,'wxSize',[]}|[{'type',324,'wxSpin',[]}|[{'type',324,'wxSplitter',[]}|[{'type',324,'wxStyledText',[]}|[{'type',324,'wxSysColourChanged',[]}|[{'type',324,'wxTaskBarIcon',[]}|[{'type',324,'wxTree',[]}|[{'type',324,'wxUpdateUI',[]}|[{'type',324,'wxWindowCreate',[]}|[{'type',324,'wxWindowDestroy',[]}]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]},[]}],
		%% Line 325
		'type' =
		    %% Line 325
		    [{'wxEventType',{'type',325,'union',[{'type',325,'wxActivateEventType',[]}|[{'type',325,'wxAuiManagerEventType',[]}|[{'type',325,'wxAuiNotebookEventType',[]}|[{'type',325,'wxCalendarEventType',[]}|[{'type',325,'wxChildFocusEventType',[]}|[{'type',325,'wxClipboardTextEventType',[]}|[{'type',325,'wxCloseEventType',[]}|[{'type',325,'wxColourPickerEventType',[]}|[{'type',325,'wxCommandEventType',[]}|[{'type',325,'wxContextMenuEventType',[]}|[{'type',325,'wxDateEventType',[]}|[{'type',325,'wxDisplayChangedEventType',[]}|[{'type',325,'wxEraseEventType',[]}|[{'type',325,'wxFileDirPickerEventType',[]}|[{'type',325,'wxFocusEventType',[]}|[{'type',325,'wxFontPickerEventType',[]}|[{'type',325,'wxGridEventType',[]}|[{'type',325,'wxHelpEventType',[]}|[{'type',325,'wxHtmlLinkEventType',[]}|[{'type',325,'wxIconizeEventType',[]}|[{'type',325,'wxIdleEventType',[]}|[{'type',325,'wxInitDialogEventType',[]}|[{'type',325,'wxJoystickEventType',[]}|[{'type',325,'wxKeyEventType',[]}|[{'type',325,'wxListEventType',[]}|[{'type',325,'wxMaximizeEventType',[]}|[{'type',325,'wxMenuEventType',[]}|[{'type',325,'wxMouseCaptureChangedEventType',[]}|[{'type',325,'wxMouseEventType',[]}|[{'type',325,'wxMoveEventType',[]}|[{'type',325,'wxNavigationKeyEventType',[]}|[{'type',325,'wxNotebookEventType',[]}|[{'type',325,'wxPaintEventType',[]}|[{'type',325,'wxPaletteChangedEventType',[]}|[{'type',325,'wxQueryNewPaletteEventType',[]}|[{'type',325,'wxSashEventType',[]}|[{'type',325,'wxScrollEventType',[]}|[{'type',325,'wxScrollWinEventType',[]}|[{'type',325,'wxSetCursorEventType',[]}|[{'type',325,'wxShowEventType',[]}|[{'type',325,'wxSizeEventType',[]}|[{'type',325,'wxSpinEventType',[]}|[{'type',325,'wxSplitterEventType',[]}|[{'type',325,'wxStyledTextEventType',[]}|[{'type',325,'wxSysColourChangedEventType',[]}|[{'type',325,'wxTaskBarIconEventType',[]}|[{'type',325,'wxTreeEventType',[]}|[{'type',325,'wxUpdateUIEventType',[]}|[{'type',325,'wxWindowCreateEventType',[]}|[{'type',325,'wxWindowDestroyEventType',[]}]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]},[]}],
		%% Line 328
		'type' =
		    %% Line 328
		    [{{'record','wxMouseState'},[{'typed_record_field',{'record_field',328,{'atom',328,'x'}},{'type',328,'union',[{'atom',328,'undefined'}|[{'type',328,'integer',[]}]]}}|[{'typed_record_field',{'record_field',328,{'atom',328,'y'}},{'type',328,'union',[{'atom',328,'undefined'}|[{'type',328,'integer',[]}]]}}|[{'typed_record_field',{'record_field',329,{'atom',329,'leftDown'}},{'type',329,'union',[{'atom',329,'undefined'}|[{'type',329,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',329,{'atom',329,'middleDown'}},{'type',329,'union',[{'atom',329,'undefined'}|[{'atom',329,'boolean'}]]}}|[{'typed_record_field',{'record_field',329,{'atom',329,'rightDown'}},{'type',329,'union',[{'atom',329,'undefined'}|[{'atom',329,'boolean'}]]}}|[{'typed_record_field',{'record_field',330,{'atom',330,'controlDown'}},{'type',330,'union',[{'atom',330,'undefined'}|[{'type',330,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',330,{'atom',330,'shiftDown'}},{'type',330,'union',[{'atom',330,'undefined'}|[{'type',330,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',331,{'atom',331,'altDown'}},{'type',331,'union',[{'atom',331,'undefined'}|[{'type',331,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',331,{'atom',331,'metaDown'}},{'type',331,'union',[{'atom',331,'undefined'}|[{'type',331,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',331,{'atom',331,'cmdDown'}},{'type',331,'union',[{'atom',331,'undefined'}|[{'type',331,'boolean',[]}]]}}]]]]]]]]]],[]}],
		%% Line 333
		'type' =
		    %% Line 333
		    [{{'record','wxHtmlLinkInfo'},[{'typed_record_field',{'record_field',334,{'atom',334,'href'}},{'type',334,'union',[{'atom',334,'undefined'}|[{'remote_type',334,[{'atom',334,'unicode'}|[{'atom',334,'chardata'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',334,{'atom',334,'target'}},{'type',334,'union',[{'atom',334,'undefined'}|[{'remote_type',334,[{'atom',334,'unicode'}|[{'atom',334,'chardata'}|[[]]]]}]]}}]],[]}],
		%% Line 43
		'type' =
		    %% Line 43
		    [{{'record','moduleInfo'},[{'record_field',43,{'atom',43,'module'}}|[{'record_field',43,{'atom',43,'menubtn'}}]],[]}],
		%% Line 44
		'type' =
		    %% Line 44
		    [{{'record','procInfo'},[{'record_field',44,{'atom',44,'pid'}}|[{'record_field',44,{'atom',44,'row'}}]],[]}],
		%% Line 45
		'type' =
		    %% Line 45
		    [{{'record','breakInfo'},[{'record_field',45,{'atom',45,'point'}}|[{'record_field',45,{'atom',45,'status'}}|[{'record_field',45,{'atom',45,'break'}}]]],[]}],
		%% Line 46
		'type' =
		    %% Line 46
		    [{{'record','break'},[{'record_field',46,{'atom',46,'mb'}}|[{'record_field',46,{'atom',46,'smi'}}|[{'record_field',46,{'atom',46,'emi'}}|[{'record_field',46,{'atom',46,'dimi'}}|[{'record_field',46,{'atom',46,'demi'}}]]]]],[]}],
		%% Line 47
		'type' =
		    %% Line 47
		    [{{'record','winInfo'},[{'record_field',47,{'atom',47,'window'}}|[{'record_field',48,{'atom',48,'grid'}}|[{'record_field',49,{'atom',49,'row'}}|[{'record_field',51,{'atom',51,'focus'}}|[{'record_field',53,{'atom',53,'modules'},{'nil',53}}|[{'record_field',54,{'atom',54,'processes'},{'nil',54}}|[{'record_field',55,{'atom',55,'breaks'},{'nil',55}}|[{'record_field',57,{'atom',57,'listbox'}}|[{'record_field',60,{'atom',60,'fbutton'}}|[{'record_field',61,{'atom',61,'bbutton'}}|[{'record_field',62,{'atom',62,'ebutton'}}|[{'record_field',63,{'atom',63,'selected'},{'nil',63}}|[{'record_field',66,{'atom',66,'stringsbutton'}}|[{'record_field',68,{'atom',68,'slabel'}}|[{'record_field',69,{'atom',69,'blabel'}}]]]]]]]]]]]]]]],[]}]]
'init'/0 =
    %% Line 76
    fun () ->
	%% Line 77
	call 'dbg_wx_win':'init'
	    ()
'create_win'/3 =
    %% Line 91
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 92
	    ( fun () ->
		  apply 'create_win_batch'/2
		      (_cor1, _cor0)
	      -| [{'id',{0,0,'-create_win/3-fun-0-'}}] )
	in  %% Line 92
	    call 'wx':'batch'
		(_cor3)
'create_win_batch'/2 =
    %% Line 94
    fun (_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 95
	    call 'wx':'null'
		()
	in  let <Win> =
		%% Line 95
		call 'wxFrame':'new'
		    (_cor3, -1, _cor1, %% Line 96
				       [{'size',{800,390}}])
	    in  do  %% Line 97
		    call 'wxFrame':'connect'
			(Win, 'close_window', [{'skip','true'}])
		    let <MenuBar> =
			%% Line 98
			call 'wxMenuBar':'new'
			    ()
		    in  do  %% Line 99
			    call 'dbg_wx_win':'create_menus'
				(MenuBar, _cor0, Win, 1)
			    do  %% Line 100
				call 'wxFrame':'setMenuBar'
				    (Win, MenuBar)
				let <MainSz> =
				    %% Line 102
				    call 'wxBoxSizer':'new'
					(4)
				in  let <LeftSz> =
					%% Line 103
					call 'wxBoxSizer':'new'
					    (8)
				    in  let <Panel> =
					    %% Line 105
					    call 'wxPanel':'new'
						(Win)
					in  let <Listbox> =
						%% Line 107
						call 'wxListBox':'new'
						    (Panel, -1, [{'size',{150,200}}|[{'style',32}]])
					    in  do  %% Line 109
						    call 'wxSizer':'add'
							(LeftSz, Listbox, [{'proportion',1}|[{'border',3}|[{'flag',8192}]]])
						    do  %% Line 110
							call 'wxListBox':'connect'
							    (Listbox, 'command_listbox_doubleclicked')
							do  %% Line 111
							    call 'wxListBox':'connect'
								(Listbox, 'right_down')
							    let <SBox> =
								%% Line 113
								call 'wxStaticBox':'new'
								    (Panel, -1, [65|[117|[116|[111|[32|[65|[116|[116|[97|[99|[104|[58]]]]]]]]]]]])
							    in  let <SBS> =
								    %% Line 114
								    call 'wxStaticBoxSizer':'new'
									(SBox, 8)
								in  let <Fbtn> =
									%% Line 115
									call 'wxCheckBox':'new'
									    (Panel, 314, [70|[105|[114|[115|[116|[32|[67|[97|[108|[108]]]]]]]]]])
								    in  do  %% Line 116
									    call 'wxSizer':'add'
										(SBS, Fbtn)
									    let <Bbtn> =
										%% Line 117
										call 'wxCheckBox':'new'
										    (Panel, 314, [79|[110|[32|[66|[114|[101|[97|[107]]]]]]]])
									    in  do  %% Line 118
										    call 'wxSizer':'add'
											(SBS, Bbtn)
										    let <Ebtn> =
											%% Line 119
											call 'wxCheckBox':'new'
											    (Panel, 314, [79|[110|[32|[69|[120|[105|[116]]]]]]])
										    in  do  %% Line 120
											    call 'wxSizer':'add'
												(SBS, Ebtn)
											    do  %% Line 121
												call 'wxFrame':'connect'
												    (Panel, 'command_checkbox_clicked')
												do  %% Line 122
												    call 'wxSizer':'add'
													(LeftSz, SBS, [{'flag',8192}])
												    let <SLabel> =
													%% Line 124
													call 'wxStaticText':'new'
													    (Panel, -1, [83|[116|[97|[99|[107|[32|[84|[114|[97|[99|[101|[58|[10|[32|[79|[110|[32|[40|[119|[105|[116|[104|[32|[116|[97|[105|[108|[41]]]]]]]]]]]]]]]]]]]]]]]]]]]])
												    in  do  %% Line 125
													    call 'wxSizer':'add'
														(LeftSz, SLabel)
													    let <BLabel> =
														%% Line 126
														call 'wxStaticText':'new'
														    (Panel, -1, [66|[97|[99|[107|[32|[84|[114|[97|[99|[101|[32|[83|[105|[122|[101|[58|[10|[32|[53|[48|[48|[48|[48]]]]]]]]]]]]]]]]]]]]]]])
													    in  do  %% Line 127
														    call 'wxSizer':'add'
															(LeftSz, BLabel)
														    let <StringsBox> =
															%% Line 129
															call 'wxStaticBox':'new'
															    (Panel, -1, [83|[116|[114|[105|[110|[103|[115|[58]]]]]]]])
														    in  let <StringsBS> =
															    %% Line 130
															    call 'wxStaticBoxSizer':'new'
																(StringsBox, 8)
															in  let <Stringsbtn> =
																%% Line 131
																call 'wxCheckBox':'new'
																    (Panel, 271, [85|[115|[101|[32|[114|[97|[110|[103|[101|[32|[111|[102|[32|[43|[112|[99|[32|[102|[108|[97|[103]]]]]]]]]]]]]]]]]]]]])
															    in  do  %% Line 132
																    call 'wxSizer':'add'
																	(StringsBS, Stringsbtn)
																    do  %% Line 133
																	call 'wxSizer':'add'
																	    (LeftSz, StringsBS, [{'flag',8192}])
																	let <Grid> =
																	    %% Line 136
																	    call 'wxListCtrl':'new'
																		(Panel, [{'winid',1000}|[{'style',8226}|[{'size',{600,-1}}]]])
																	in  let <LI> =
																		%% Line 140
																		call 'wxListItem':'new'
																		    ()
																	    in  do  %% Line 141
																		    call 'wxListItem':'setText'
																			(LI, [80|[105|[100]]])
																		    do  %% Line 142
																			call 'wxListItem':'setAlign'
																			    (LI, 2)
																			do  %% Line 143
																			    call 'wxListCtrl':'insertColumn'
																				(Grid, 0, LI)
																			    do  %% Line 144
																				call 'wxListItem':'setText'
																				    (LI, [73|[110|[105|[116|[105|[97|[108|[32|[67|[97|[108|[108]]]]]]]]]]]])
																				do  %% Line 145
																				    call 'wxListItem':'setAlign'
																					(LI, 0)
																				    do  %% Line 146
																					call 'wxListCtrl':'insertColumn'
																					    (Grid, 1, LI)
																					do  %% Line 147
																					    call 'wxListItem':'setText'
																						(LI, [78|[97|[109|[101]]]])
																					    do  %% Line 148
																						call 'wxListCtrl':'insertColumn'
																						    (Grid, 2, LI)
																						do  %% Line 149
																						    call 'wxListItem':'setAlign'
																							(LI, 2)
																						    do  %% Line 150
																							call 'wxListItem':'setText'
																							    (LI, [83|[116|[97|[116|[117|[115]]]]]])
																							do  %% Line 151
																							    call 'wxListCtrl':'insertColumn'
																								(Grid, 3, LI)
																							    do  %% Line 152
																								call 'wxListItem':'setText'
																								    (LI, [73|[110|[102|[111|[114|[109|[97|[116|[105|[111|[110]]]]]]]]]]])
																								do  %% Line 153
																								    call 'wxListItem':'setAlign'
																									(LI, 0)
																								    do  %% Line 154
																									call 'wxListCtrl':'insertColumn'
																									    (Grid, 4, LI)
																									do  %% Line 155
																									    call 'wxListItem':'destroy'
																										(LI)
																									    do  %% Line 157
																										call 'wxListCtrl':'setColumnWidth'
																										    (Grid, 0, 80)
																										do  %% Line 158
																										    call 'wxListCtrl':'setColumnWidth'
																											(Grid, 1, 150)
																										    do  %% Line 159
																											call 'wxListCtrl':'setColumnWidth'
																											    (Grid, 2, 100)
																											do  %% Line 160
																											    call 'wxListCtrl':'setColumnWidth'
																												(Grid, 3, 70)
																											    do  %% Line 161
																												call 'wxListCtrl':'setColumnWidth'
																												    (Grid, 4, 200)
																												do  %% Line 162
																												    call 'wxListCtrl':'connect'
																													(Grid, 'command_list_item_activated')
																												    do  %% Line 163
																													call 'wxListCtrl':'connect'
																													    (Grid, 'command_list_item_selected')
																													do  %% Line 164
																													    call 'wxListCtrl':'connect'
																														(Grid, 'size', [{'skip','true'}])
																													    do  %% Line 165
																														call 'wxListCtrl':'connect'
																														    (Grid, 'key_up', [{'id',1000}|[{'skip','true'}]])
																														do  %% Line 167
																														    call 'wxWindow':'connect'
																															(Win, 'enter_window', [{'skip','true'}])
																														    do  %% Line 168
																															call 'wxWindow':'setFocus'
																															    (Grid)
																															do  %% Line 171
																															    call 'wxSizer':'add'
																																(MainSz, LeftSz, [{'border',3}|[{'flag',8432}]])
																															    do  %% Line 172
																																call 'wxSizer':'add'
																																    (MainSz, Grid, [{'border',3}|[{'flag',8432}|[{'proportion',1}]]])
																																do  %% Line 175
																																    call 'wxWindow':'setSizer'
																																	(Panel, MainSz)
																																    do  %% Line 176
																																	call 'wxSizer':'fit'
																																	    (MainSz, Win)
																																	do  %% Line 177
																																	    call 'wxSizer':'setSizeHints'
																																		(MainSz, Win)
																																	    let <IconFile> =
																																		%% Line 179
																																		call 'dbg_wx_win':'find_icon'
																																		    ([101|[114|[108|[97|[110|[103|[95|[98|[117|[103|[46|[112|[110|[103]]]]]]]]]]]]]])
																																	    in  let <Icon> =
																																		    %% Line 180
																																		    call 'wxIcon':'new'
																																			(IconFile, [{'type',15}])
																																		in  do  %% Line 181
																																			call 'wxFrame':'setIcon'
																																			    (Win, Icon)
																																			do  %% Line 182
																																			    call 'wxIcon':'destroy'
																																				(Icon)
																																			    do  %% Line 183
																																				call 'wxFrame':'show'
																																				    (Win)
																																				do  %% Line 184
																																				    call 'dbg_wx_winman':'raise'
																																					(Win)
																																				    %% Line 185
																																				    {'winInfo',Win,Grid,0,0,[],[],[],%% Line 186
																																								     Listbox,%% Line 187
																																									     Fbtn,%% Line 187
																																										  Bbtn,%% Line 187
																																										       Ebtn,[],%% Line 188
																																											       Stringsbtn,%% Line 189
																																													  SLabel,%% Line 189
																																														 BLabel}
'get_window'/1 =
    %% Line 196
    fun (_cor0) ->
	%% Line 197
	( case _cor0 of
	    ( <( {'winInfo',_rec0,_cor3,_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16}
		 -| ['compiler_generated'] )> when 'true' ->
		  _rec0
	      -| ['compiler_generated'] )
	    ( <_cor17> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','winInfo'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'show_option'/3 =
    %% Line 210
    fun (_cor2,_cor1,_cor0) ->
	%% Line 211
	case _cor1 of
	  %% Line 212
	  <'auto_attach'> when 'true' ->
	      let <_cor6> =
		  %% Line 213
		  ( fun (_cor4) ->
			%% Line 214
			call 'wxCheckBox':'setValue'
			    (_cor4, 'false')
		    -| [{'id',{0,0,'-show_option/3-fun-0-'}}] )
	      in  let <_cor3> =
		      %% Line 216
		      apply 'option_buttons'/2
			  (_cor2, ['init'|['break'|['exit']]])
		  in  do  %% Line 213
			  call 'wx':'foreach'
			      (_cor6, _cor3)
			  let <_cor10> =
			      %% Line 217
			      ( fun (_cor8) ->
				    %% Line 218
				    call 'wxCheckBox':'setValue'
					(_cor8, 'true')
				-| [{'id',{0,0,'-show_option/3-fun-1-'}}] )
			  in  let <_cor7> =
				  %% Line 220
				  apply 'option_buttons'/2
				      (_cor2, _cor0)
			      in  %% Line 217
				  call 'wx':'foreach'
				      (_cor10, _cor7)
	  %% Line 222
	  <'stack_trace'> when 'true' ->
	      let <_cor12> =
		  %% Line 223
		  case _cor0 of
		    %% Line 224
		    <'all'> when 'true' ->
			[83|[116|[97|[99|[107|[32|[84|[114|[97|[99|[101|[58|[10|[32|[79|[110|[32|[40|[119|[105|[116|[104|[32|[116|[97|[105|[108|[41]]]]]]]]]]]]]]]]]]]]]]]]]]]]
		    %% Line 225
		    <'true'> when 'true' ->
			[83|[116|[97|[99|[107|[32|[84|[114|[97|[99|[101|[58|[10|[32|[79|[110|[32|[40|[119|[105|[116|[104|[32|[116|[97|[105|[108|[41]]]]]]]]]]]]]]]]]]]]]]]]]]]]
		    %% Line 226
		    <'no_tail'> when 'true' ->
			[83|[116|[97|[99|[107|[32|[84|[114|[97|[99|[101|[58|[10|[32|[79|[110|[32|[40|[110|[111|[32|[116|[97|[105|[108|[41]]]]]]]]]]]]]]]]]]]]]]]]]]
		    %% Line 227
		    <'false'> when 'true' ->
			[83|[116|[97|[99|[107|[32|[84|[114|[97|[99|[101|[58|[10|[32|[79|[102|[102]]]]]]]]]]]]]]]]]
		    ( <_cor11> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor11})
		      -| ['compiler_generated'] )
		  end
	      in  %% Line 229
		  ( case _cor2 of
		      ( <( {'winInfo',_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_rec1,_cor45}
			   -| ['compiler_generated'] )> when 'true' ->
			    call 'wxStaticText':'setLabel'
				(_rec1, _cor12)
			-| ['compiler_generated'] )
		      ( <_cor46> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','winInfo'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  %% Line 231
	  <'back_trace'> when 'true' ->
	      let <_cor16> =
		  %% Line 232
		  call 'erlang':'integer_to_list'
		      (_cor0)
	      in  let <Text> =
		      %% Line 232
		      call 'erlang':'++'
			  ([66|[97|[99|[107|[32|[84|[114|[97|[99|[101|[32|[83|[105|[122|[101|[58|[10|[32]]]]]]]]]]]]]]]]]], _cor16)
		  in  %% Line 233
		      ( case _cor2 of
			  ( <( {'winInfo',_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_rec2}
			       -| ['compiler_generated'] )> when 'true' ->
				call 'wxStaticText':'setLabel'
				    (_rec2, Text)
			    -| ['compiler_generated'] )
			  ( <_cor61> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','winInfo'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
	  %% Line 234
	  <'strings'> when 'true' ->
	      let <_cor23> =
		  %% Line 235
		  ( fun (_cor21) ->
			%% Line 236
			call 'wxCheckBox':'setValue'
			    (_cor21, 'false')
		    -| [{'id',{0,0,'-show_option/3-fun-2-'}}] )
	      in  let <_cor20> =
		      %% Line 238
		      apply 'option_buttons'/2
			  (_cor2, ['str_on'])
		  in  do  %% Line 235
			  call 'wx':'foreach'
			      (_cor23, _cor20)
			  let <_cor27> =
			      %% Line 239
			      ( fun (_cor25) ->
				    %% Line 240
				    call 'wxCheckBox':'setValue'
					(_cor25, 'true')
				-| [{'id',{0,0,'-show_option/3-fun-3-'}}] )
			  in  let <_cor24> =
				  %% Line 242
				  apply 'option_buttons'/2
				      (_cor2, _cor0)
			      in  %% Line 239
				  call 'wx':'foreach'
				      (_cor27, _cor24)
	  ( <_cor28> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor28})
	    -| ['compiler_generated'] )
	end
'option_buttons'/2 =
    %% Line 246
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <WinInfo,['init'|Flags]> when 'true' ->
	      %% Line 247
	      ( case WinInfo of
		  ( <( {'winInfo',_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_rec3,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_cor4> =
			    apply 'option_buttons'/2
				(WinInfo, Flags)
			in  [_rec3|_cor4]
		    -| ['compiler_generated'] )
		  ( <_cor30> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','winInfo'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 248
	  <WinInfo,['break'|Flags]> when 'true' ->
	      %% Line 249
	      ( case WinInfo of
		  ( <( {'winInfo',_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_rec4,_cor40,_cor41,_cor42,_cor43,_cor44}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_cor7> =
			    apply 'option_buttons'/2
				(WinInfo, Flags)
			in  [_rec4|_cor7]
		    -| ['compiler_generated'] )
		  ( <_cor45> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','winInfo'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 250
	  <WinInfo,['exit'|Flags]> when 'true' ->
	      %% Line 251
	      ( case WinInfo of
		  ( <( {'winInfo',_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_rec5,_cor56,_cor57,_cor58,_cor59}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_cor10> =
			    apply 'option_buttons'/2
				(WinInfo, Flags)
			in  [_rec5|_cor10]
		    -| ['compiler_generated'] )
		  ( <_cor60> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','winInfo'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 253
	  <WinInfo,['str_on'|Flags]> when 'true' ->
	      %% Line 254
	      ( case WinInfo of
		  ( <( {'winInfo',_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,_cor69,_cor70,_cor71,_cor72,_rec6,_cor73,_cor74}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_cor13> =
			    apply 'option_buttons'/2
				(WinInfo, Flags)
			in  [_rec6|_cor13]
		    -| ['compiler_generated'] )
		  ( <_cor75> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','winInfo'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 255
	  <_X_WinInfo,[]> when 'true' ->
	      %% Line 256
	      []
	  ( <_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14})
		  -| [{'function_name',{'option_buttons',2}}] )
	    -| ['compiler_generated'] )
	end
'enable'/2 =
    %% Line 264
    fun (_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 265
	    ( fun (_cor3) ->
		  let <MI> =
		      %% Line 266
		      call 'erlang':'get'
			  (_cor3)
		  in  %% Line 267
		      call 'wxMenuItem':'enable'
			  (MI, [{'enable',_cor0}|[]])
	      -| [{'id',{0,0,'-enable/2-fun-0-'}}] )
	in  %% Line 265
	    call 'lists':'foreach'
		(_cor5, _cor1)
'is_enabled'/1 =
    %% Line 271
    fun (_cor0) ->
	let <MI> =
	    %% Line 272
	    call 'erlang':'get'
		(_cor0)
	in  %% Line 273
	    call 'wxMenuItem':'isEnabled'
		(MI)
'select'/2 =
    %% Line 280
    fun (_cor1,_cor0) ->
	let <MI> =
	    %% Line 281
	    call 'erlang':'get'
		(_cor1)
	in  %% Line 282
	    call 'wxMenuItem':'check'
		(MI, [{'check',_cor0}|[]])
'add_module'/3 =
    %% Line 290
    fun (_cor2,_cor1,_cor0) ->
	%% Line 291
	( case _cor2 of
	    ( <( {'winInfo',_rec7,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44}
		 -| ['compiler_generated'] )> when 'true' ->
		  %% Line 293
		  case call 'lists':'keymember'
			   (_cor0, 2, _cor34) of
		    %% Line 294
		    <'false'> when 'true' ->
			let <Menu> =
			    %% Line 296
			    call 'erlang':'get'
				(_cor1)
			in  let <Sub> =
				%% Line 297
				call 'wxMenu':'new'
				    ([])
			    in  let <ViewItem> =
				    %% Line 298
				    call 'wxMenu':'append'
					(Sub, -1, [86|[105|[101|[119]]]])
				in  let <ViewId> =
					%% Line 299
					call 'wxMenuItem':'getId'
					    (ViewItem)
				    in  do  %% Line 300
					    call 'wxMenu':'connect'
						(_rec7, 'command_menu_selected', %% Line 301
										 [{'id',ViewId}|[{'userData',{'module',_cor0,'view'}}|[]]])
					    let <DelItem> =
						%% Line 302
						call 'wxMenu':'append'
						    (Sub, -1, [68|[101|[108|[101|[116|[101]]]]]])
					    in  let <DelId> =
						    %% Line 303
						    call 'wxMenuItem':'getId'
							(DelItem)
						in  do  %% Line 304
							call 'wxMenu':'connect'
							    (_rec7, 'command_menu_selected', %% Line 305
											     [{'id',DelId}|[{'userData',{'module',_cor0,'delete'}}|[]]])
							let <_cor17> =
							    %% Line 306
							    call 'erlang':'atom_to_list'
								(_cor0)
							in  let <MenuBtn> =
								%% Line 306
								call 'wxMenu':'append'
								    (Menu, -1, _cor17, Sub)
							    in  let <_cor20> =
								    %% Line 307
								    call 'erlang':'atom_to_list'
									(_cor0)
								in  do  %% Line 307
									call 'wxListBox':'append'
									    (_cor37, _cor20)
									let <ModInfo> = {%% Line 309
									     'moduleInfo',_cor0,%% Line 309
												{Menu,MenuBtn}}
									in  let <_rec10> =
										%% Line 310
										[ModInfo|_cor34]
									    in  %% Line 310
										call 'erlang':'setelement'
										    (6, _cor2, _rec10)
		    %% Line 311
		    <'true'> when 'true' ->
			_cor2
		    ( <_cor27> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor27})
		      -| ['compiler_generated'] )
		  end
	      -| ['compiler_generated'] )
	    ( <_cor45> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','winInfo'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'delete_module'/2 =
    %% Line 319
    fun (_cor1,_cor0) ->
	%% Line 321
	( case _cor1 of
	    ( <( {'winInfo',_cor20,_cor21,_cor22,_cor23,_rec12,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33}
		 -| ['compiler_generated'] )> when 'true' ->
		  case call 'lists':'keysearch'
			   (_cor0, 2, _rec12) of
		    <{'value',ModInfo}> when 'true' ->
			%% Line 322
			( case ModInfo of
			    ( <( {'moduleInfo',_cor35,_rec13}
				 -| ['compiler_generated'] )> when 'true' ->
				  case _rec13 of
				    <{Menu,MenuBtn}> when 'true' ->
					do  %% Line 323
					    call 'wxMenu':'Destroy'
						(Menu, MenuBtn)
					    let <_cor11> =
						%% Line 325
						call 'erlang':'atom_to_list'
						    (_cor0)
					    in  let <Id> =
						    %% Line 325
						    call 'wxListBox':'findString'
							(_cor26, _cor11)
						in  do  %% Line 326
							call 'wxListBox':'delete'
							    (_cor26, Id)
							let <_rec15> =
							    %% Line 327
							    call 'lists':'keydelete'
								(_cor0, 2, _rec12)
							in  %% Line 327
							    call 'erlang':'setelement'
								(6, _cor1, _rec15)
				    ( <_cor7> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor7})
				      -| ['compiler_generated'] )
				  end
			      -| ['compiler_generated'] )
			    ( <_cor36> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','moduleInfo'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor4})
		      -| ['compiler_generated'] )
		  end
	      -| ['compiler_generated'] )
	    ( <_cor34> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','winInfo'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'add_process'/6 =
    %% Line 339
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <WinInfo,Pid,Name,{Mod,Func,Args},Status,Info> when 'true' ->
	      %% Line 340
	      ( case WinInfo of
		  ( <( {'winInfo',_cor39,_rec18,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_cor13> =
			    %% Line 343
			    case Name of
			      <'undefined'> when 'true' ->
				  []
			      <_cor69> when 'true' ->
				  call 'dbg_wx_win':'to_string'
				      (Name)
			    end
			in  let <_cor15> =
				%% Line 344
				call 'erlang':'length'
				    (Args)
			    in  let <FuncS> =
				    %% Line 344
				    call 'dbg_wx_win':'to_string'
					([126|[119|[58|[126|[119|[47|[126|[119]]]]]]]], [Mod|[Func|[_cor15|[]]]])
				in  let <_cor18> =
					%% Line 345
					case Info of
					  <{}> when 'true' ->
					      []
					  <_cor70> when 'true' ->
					      call 'dbg_wx_win':'to_string'
						  (Info)
					end
				    in  let <Pid2> =
					    %% Line 346
					    call 'dbg_wx_win':'to_string'
						([126|[112]], [Pid|[]])
					in  let <Add> =
						%% Line 348
						( fun () ->
						      let <_X_Dbg> =
							  %% Line 349
							  call 'wxListCtrl':'insertItem'
							      (_rec18, _cor40, [])
						      in  do  %% Line 351
							      case <> of
								<>
								    when try
									  let <_cor22> =
									      call 'erlang':'rem'
										  (_cor40, 2)
									  in  call 'erlang':'=:='
										  (_cor22, 0)
								      of <Try> ->
									  Try
								      catch <T,R> ->
									  'false' ->
								    %% Line 352
								    call 'wxListCtrl':'setItemBackgroundColour'
									(_rec18, _cor40, {240,240,255})
								%% Line 353
								<> when 'true' ->
								    'ok'
							      end
							      do  %% Line 356
								  call 'wxListCtrl':'setItem'
								      (_rec18, _cor40, 0, Pid2)
								  do  %% Line 357
								      call 'wxListCtrl':'setItem'
									  (_rec18, _cor40, 1, FuncS)
								      do  %% Line 358
									  call 'wxListCtrl':'setItem'
									      (_rec18, _cor40, 2, _cor13)
									  let <_cor23> =
									      %% Line 359
									      call 'dbg_wx_win':'to_string'
										  (Status)
									  in  do  %% Line 359
										  call 'wxListCtrl':'setItem'
										      (_rec18, _cor40, 3, _cor23)
										  do  %% Line 360
										      call 'wxListCtrl':'setItem'
											  (_rec18, _cor40, 4, _cor18)
										      %% Line 361
										      'ok'
						  -| [{'id',{0,0,'-add_process/6-fun-0-'}}] )
					    in  do  %% Line 363
						    call 'wx':'batch'
							(Add)
						    let <ProcInfo> = {%% Line 365
							 'procInfo',%% Line 365
								    Pid,_cor40}
						    in  let <_rec20> =
							    %% Line 366
							    [ProcInfo|_cor43]
							in  let <_rec21> =
								%% Line 367
								call 'erlang':'+'
								    (_cor40, 1)
							    in  let <_cor31> =
								    %% Line 366
								    call 'erlang':'setelement'
									(7, WinInfo, _rec20)
								in  %% Line 367
								    call 'erlang':'setelement'
									(4, _cor31, _rec21)
		    -| ['compiler_generated'] )
		  ( <_cor53> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','winInfo'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_cor38,_cor37,_cor36,_cor35,_cor34,_cor33> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor38,_cor37,_cor36,_cor35,_cor34,_cor33})
		  -| [{'function_name',{'add_process',6}}] )
	    -| ['compiler_generated'] )
	end
'update_process'/4 =
    %% Line 376
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 378
	( case _cor3 of
	    ( <( {'winInfo',_cor22,_cor23,_cor24,_cor25,_cor26,_rec24,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35}
		 -| ['compiler_generated'] )> when 'true' ->
		  case call 'lists':'keysearch'
			   (_cor2, 2, _rec24) of
		    <{'value',ProcInfo}> when 'true' ->
			%% Line 381
			( case ProcInfo of
			    ( <( {'procInfo',_cor52,_rec26}
				 -| ['compiler_generated'] )> when 'true' ->
				  let <_cor14> =
				      %% Line 382
				      case _cor0 of
					<{}> when 'true' ->
					    []
					<_cor54> when 'true' ->
					    _cor0
				      end
				  in  let <_cor16> =
					  %% Line 383
					  call 'dbg_wx_win':'to_string'
					      (_cor1)
				      in  do  %% Line 383
					      call 'wxListCtrl':'setItem'
						  (_cor23, _rec26, 3, _cor16)
					      let <_cor17> =
						  %% Line 384
						  call 'dbg_wx_win':'to_string'
						      (_cor14)
					      in  %% Line 384
						  call 'wxListCtrl':'setItem'
						      (_cor23, _rec26, 4, _cor17)
			      -| ['compiler_generated'] )
			    ( <_cor53> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','procInfo'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    ( <_cor6> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor6})
		      -| ['compiler_generated'] )
		  end
	      -| ['compiler_generated'] )
	    ( <_cor36> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','winInfo'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'clear_processes'/1 =
    %% Line 390
    fun (_cor0) ->
	%% Line 391
	( case _cor0 of
	    ( <( {'winInfo',_cor14,_rec27,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_cor8> =
		      %% Line 393
		      ( fun () ->
			    let <_cor7> =
				call 'erlang':'-'
				    (_cor15, 1)
			    in  apply 'clear_processes'/2
				    (_rec27, _cor7)
			-| [{'id',{0,0,'-clear_processes/1-fun-0-'}}] )
		  in  do  %% Line 393
			  call 'wx':'batch'
			      (_cor8)
			  let <_cor10> =
			      %% Line 394
			      call 'erlang':'setelement'
				  (7, _cor0, [])
			  in  let <_cor11> =
				  %% Line 394
				  call 'erlang':'setelement'
				      (5, _cor10, 0)
			      in  %% Line 394
				  call 'erlang':'setelement'
				      (4, _cor11, 0)
	      -| ['compiler_generated'] )
	    ( <_cor28> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','winInfo'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'clear_processes'/2 =
    %% Line 396
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Grid,Row>
	      when call 'erlang':'>='
		    (Row,
		     0) ->
	      let <Item> =
		  %% Line 397
		  call 'wxListItem':'new'
		      ()
	      in  do  %% Line 398
		      call 'wxListItem':'setId'
			  (Item, Row)
		      do  %% Line 399
			  call 'wxListItem':'setColumn'
			      (Item, 3)
			  do  %% Line 400
			      case call 'wxListCtrl':'getItem'
				       (Grid, Item) of
				%% Line 401
				<'true'> when 'true' ->
				    %% Line 402
				    case call 'wxListItem':'getText'
					     (Item) of
				      %% Line 403
				      <[101|[120|[105|[116]]]]> when 'true' ->
					  do  %% Line 404
					      call 'wxListItem':'setColumn'
						  (Item, 0)
					      do  %% Line 405
						  call 'wxListCtrl':'getItem'
						      (Grid, Item)
						  let <_cor3> =
						      %% Line 406
						      call 'wxListItem':'getText'
							  (Item)
						  in  let <Pid> =
							  %% Line 406
							  call 'erlang':'list_to_pid'
							      (_cor3)
						      in  let <_cor5> =
							      %% Line 407
							      call 'dbg_wx_trace':'title'
								  (Pid)
							  in  %% Line 407
							      call 'dbg_wx_winman':'clear_process'
								  (_cor5)
				      %% Line 408
				      <_cor11> when 'true' ->
					  'ok'
				    end
				%% Line 411
				<'false'> when 'true' ->
				    'ok'
				( <_cor7> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor7})
				  -| ['compiler_generated'] )
			      end
			      do  %% Line 414
				  call 'wxListItem':'destroy'
				      (Item)
				  do  %% Line 415
				      call 'wxListCtrl':'deleteItem'
					  (Grid, Row)
				      let <_cor8> =
					  %% Line 416
					  call 'erlang':'-'
					      (Row, 1)
				      in  %% Line 416
					  apply 'clear_processes'/2
					      (Grid, _cor8)
	  %% Line 417
	  <_X_Grid,_X_Row> when 'true' ->
	      %% Line 418
	      'done'
	end
'add_break'/3 =
    %% Line 431
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <WinInfo,Menu,{Point,Options}> when 'true' ->
	      %% Line 432
	      ( case WinInfo of
		  ( <( {'winInfo',_rec30,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28}
		       -| ['compiler_generated'] )> when 'true' ->
			let <Break> =
			    call 'dbg_wx_win':'add_break'
				(_rec30, Menu, Point)
			in  do  %% Line 433
				call 'dbg_wx_win':'update_break'
				    (Break, Options)
				let <BreakInfo> =
				    %% Line 434
				    {'breakInfo',Point,'undefined',Break}
				in  let <_rec31> =
					%% Line 435
					[BreakInfo|_cor20]
				    in  %% Line 435
					call 'erlang':'setelement'
					    (8, WinInfo, _rec31)
		    -| ['compiler_generated'] )
		  ( <_cor29> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','winInfo'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_cor14,_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12})
		  -| [{'function_name',{'add_break',3}}] )
	    -| ['compiler_generated'] )
	end
'update_break'/2 =
    %% Line 447
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <WinInfo,{Point,Options}> when 'true' ->
	      %% Line 449
	      ( case WinInfo of
		  ( <( {'winInfo',_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_rec34,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22}
		       -| ['compiler_generated'] )> when 'true' ->
			case call 'lists':'keysearch'
				 (Point, 2, _rec34) of
			  <{'value',BreakInfo}> when 'true' ->
			      %% Line 450
			      ( case BreakInfo of
				  ( <( {'breakInfo',_cor24,_cor25,_rec35}
				       -| ['compiler_generated'] )> when 'true' ->
					call 'dbg_wx_win':'update_break'
					    (_rec35, Options)
				    -| ['compiler_generated'] )
				  ( <_cor26> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','breakInfo'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			  ( <_cor4> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor4})
			    -| ['compiler_generated'] )
			end
		    -| ['compiler_generated'] )
		  ( <_cor23> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','winInfo'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'update_break',2}}] )
	    -| ['compiler_generated'] )
	end
'delete_break'/2 =
    %% Line 457
    fun (_cor1,_cor0) ->
	%% Line 459
	( case _cor1 of
	    ( <( {'winInfo',_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_rec36,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27}
		 -| ['compiler_generated'] )> when 'true' ->
		  case call 'lists':'keysearch'
			   (_cor0, 2, _rec36) of
		    <{'value',BreakInfo}> when 'true' ->
			%% Line 460
			( case BreakInfo of
			    ( <( {'breakInfo',_cor29,_cor30,_rec37}
				 -| ['compiler_generated'] )> when 'true' ->
				  do  call 'dbg_wx_win':'delete_break'
					  (_rec37)
				      let <_rec38> =
					  %% Line 461
					  call 'lists':'keydelete'
					      (_cor0, 2, _rec36)
				      in  %% Line 461
					  call 'erlang':'setelement'
					      (8, _cor1, _rec38)
			      -| ['compiler_generated'] )
			    ( <_cor31> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','breakInfo'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor4})
		      -| ['compiler_generated'] )
		  end
	      -| ['compiler_generated'] )
	    ( <_cor28> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','winInfo'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'clear_breaks'/1 =
    %% Line 469
    fun (_cor0) ->
	let <_cor7> =
	    %% Line 470
	    ( fun (_cor5) ->
		  %% Line 471
		  ( case _cor5 of
		      ( <( {'breakInfo',_cor11,_cor12,_rec41}
			   -| ['compiler_generated'] )> when 'true' ->
			    call 'dbg_wx_win':'delete_break'
				(_rec41)
			-| ['compiler_generated'] )
		      ( <_cor13> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','breakInfo'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      -| [{'id',{0,0,'-clear_breaks/1-fun-0-'}}] )
	in  %% Line 473
	    ( case _cor0 of
		( <( {'winInfo',_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_rec42,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27}
		     -| ['compiler_generated'] )> when 'true' ->
		      do  call 'lists':'foreach'
			      (_cor7, _rec42)
			  %% Line 474
			  call 'erlang':'setelement'
			      (8, _cor0, [])
		  -| ['compiler_generated'] )
		( <_cor28> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','winInfo'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	      -| ['compiler_generated'] )
'clear_breaks'/2 =
    %% Line 475
    fun (_cor1,_cor0) ->
	let <Fun> =
	    %% Line 477
	    ( fun (_cor7) ->
		  %% Line 478
		  ( case _cor7 of
		      ( <( {'breakInfo',_rec44,_cor17,_cor18}
			   -| ['compiler_generated'] )> when 'true' ->
			    case _rec44 of
			      %% Line 479
			      <{_cor20,_X_Line}>
				  when call 'erlang':'=:='
					(_cor20,
					 _cor0) ->
				  do  %% Line 480
				      call 'dbg_wx_win':'delete_break'
					  (_cor18)
				      %% Line 481
				      'false'
			      %% Line 482
			      <_cor24> when 'true' ->
				  'true'
			    end
			-| ['compiler_generated'] )
		      ( <_cor19> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','breakInfo'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      -| [{'id',{0,0,'-clear_breaks/2-fun-0-'}}] )
	in  %% Line 485
	    ( case _cor1 of
		( <( {'winInfo',_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_rec46,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38}
		     -| ['compiler_generated'] )> when 'true' ->
		      let <Breaks> =
			  call 'lists':'filter'
			      (Fun, _rec46)
		      in  %% Line 486
			  call 'erlang':'setelement'
			      (8, _cor1, Breaks)
		  -| ['compiler_generated'] )
		( <_cor39> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','winInfo'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	      -| ['compiler_generated'] )
'handle_event'/2 =
    %% Line 508
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'wx',_cor65,_cor66,_cor67,{'wxSize',_cor68,{W,_cor69},_cor70}},{'winInfo',_cor71,Grid,_cor72,_cor73,_cor74,_cor75,_cor76,_cor77,_cor78,_cor79,_cor80,_cor81,_cor82,_cor83,_cor84}> when 'true' ->
	      let <_cor11> =
		  %% Line 509
		  ( fun () ->
			let <_cor7> =
			    %% Line 510
			    ( fun (_cor4,_cor3) ->
				  let <_cor2> =
				      %% Line 511
				      call 'wxListCtrl':'getColumnWidth'
					  (Grid, _cor4)
				  in  %% Line 511
				      call 'erlang':'+'
					  (_cor3, _cor2)
			      -| [{'id',{0,0,'-handle_event/2-fun-0-'}}] )
			in  let <Tot> =
				%% Line 510
				call 'wx':'foldl'
				    (_cor7, %% Line 512
					    0, %% Line 512
					       [0|[1|[2|[3]]]])
			    in  let <_cor9> =
				    %% Line 513
				    call 'erlang':'-'
					(W, Tot)
				in  let <_cor10> =
					%% Line 513
					call 'erlang':'-'
					    (_cor9, 4)
				    in  %% Line 513
					call 'wxListCtrl':'setColumnWidth'
					    (Grid, 4, _cor10)
		    -| [{'id',{0,0,'-handle_event/2-fun-1-'}}] )
	      in  do  %% Line 509
		      call 'wx':'batch'
			  (_cor11)
		      %% Line 515
		      'ignore'
	  %% Line 516
	  <_X_Ev = {'wx',_cor85,_cor86,_cor87,{'wxClose',_cor88}},_X_WinInfo> when 'true' ->
	      %% Line 518
	      'stopped'
	  %% Line 521
	  <{'wx',_cor89,_cor90,{'dbg_ui_winman',Win},%% Line 522
						     {'wxCommand','command_menu_selected',_cor91,_cor92,_cor93}},%% Line 522
														 _X_Wi> when 'true' ->
	      do  %% Line 523
		  call 'dbg_wx_winman':'raise'
		      (Win)
		  %% Line 524
		  'ignore'
	  %% Line 525
	  <_X_Ev = {'wx',_cor94,_cor95,_cor96,{'wxKey',_cor97,_cor98,_cor99,Key,'true',_cor100,_cor101,_cor102,_cor103,_cor104,_cor105,_cor106}},_X_WinInfo> when 'true' ->
	      %% Line 526
	      case <> of
		%% Line 527
		<>
		    when try
			  let <_cor12> =
			      call 'erlang':'/='
				  (Key, 315)
			  in  let <_cor13> =
				  call 'erlang':'/='
				      (Key, 317)
			      in  let <_cor14> =
				      call 'erlang':'/='
					  (Key, 13)
				  in  let <_cor15> =
					  call 'erlang':'and'
					      (_cor13, _cor14)
				      in  call 'erlang':'and'
					      (_cor12, _cor15)
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false' ->
		    %% Line 528
		    try
			let <_cor17> =
			    %% Line 529
			    call 'erlang':'+'
				(Key, 32)
			in  let <_cor18> =
				%% Line 529
				call 'erlang':'list_to_atom'
				    ([_cor17|[]])
			    in  %% Line 529
				{'shortcut',_cor18}
		    of <_cor19> ->
			_cor19
		    catch <_cor22,_cor21,_cor20> ->
			%% Line 530
			'ignore'
		%% Line 532
		<> when 'true' ->
		    %% Line 533
		    'ignore'
	      end
	  %% Line 536
	  <{'wx',_cor110,_cor111,{'break',Point,'status'},%% Line 537
							  {'wxCommand','command_menu_selected',_cor112,_cor113,_cor114}},%% Line 538
															 WinInfo> when 'true' ->
	      %% Line 540
	      ( case WinInfo of
		  ( <( {'winInfo',_cor115,_cor116,_cor117,_cor118,_cor119,_cor120,_rec48,_cor121,_cor122,_cor123,_cor124,_cor125,_cor126,_cor127,_cor128}
		       -| ['compiler_generated'] )> when 'true' ->
			case call 'lists':'keysearch'
				 (Point, 2, _rec48) of
			  <{'value',BreakInfo}> when 'true' ->
			      %% Line 542
			      case BreakInfo of
				<{'breakInfo',_cor130,_cor131,{'break',_cor132,Smi,_cor133,_cor134,_cor135}}> when 'true' ->
				    %% Line 544
				    case call 'wxMenuItem':'getText'
					     (Smi) of
				      %% Line 545
				      <[69|[110|[97|[98|[108|[101]]]]]]> when 'true' ->
					  {'break',Point,{'status','active'}}
				      %% Line 546
				      <[68|[105|[115|[97|[98|[108|[101]]]]]]]> when 'true' ->
					  {'break',Point,{'status','inactive'}}
				      ( <_cor27> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_cor27})
					-| ['compiler_generated'] )
				    end
				( <_cor26> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor26})
				  -| ['compiler_generated'] )
			      end
			  ( <_cor25> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor25})
			    -| ['compiler_generated'] )
			end
		    -| ['compiler_generated'] )
		  ( <_cor129> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','winInfo'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 550
	  <{'wx',_cor136,_cor137,_cor138,{'wxCommand','command_listbox_doubleclicked',ModS,_cor139,_cor140}},%% Line 551
													     _X_WinInfo> when 'true' ->
	      let <_cor28> =
		  %% Line 552
		  call 'erlang':'list_to_atom'
		      (ModS)
	      in  %% Line 552
		  {'module',_cor28,'view'}
	  %% Line 553
	  <{'wx',_cor141,ListBox,_cor142,{'wxMouse','right_down',X,Y,_cor143,_cor144,_cor145,_cor146,_cor147,_cor148,_cor149,_cor150,_cor151,_cor152}},%% Line 554
																		       {'winInfo',_cor153,_cor154,_cor155,_cor156,_cor157,_cor158,_cor159,_cor160,_cor161,_cor162,_cor163,_cor164,_cor165,_cor166,_cor167}>
	      when call 'erlang':'=:='
		    (_cor160,
		     %% Line 554
		     ListBox) ->
	      %% Line 555
	      case call 'wxListBox':'hitTest'
		       (ListBox, {X,Y}) of
		%% Line 556
		<-1> when 'true' ->
		    'ignore'
		%% Line 557
		<Row> when 'true' ->
		    let <ModS> =
			%% Line 558
			call 'wxListBox':'getString'
			    (ListBox, Row)
		    in  do  %% Line 559
			    call 'io':'format'
				([82|[101|[45|[108|[111|[97|[100|[105|[110|[103|[47|[105|[110|[116|[101|[114|[112|[114|[101|[116|[105|[110|[103|[58|[32|[126|[115|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [ModS|[]])
			    let <_cor30> =
				%% Line 560
				call 'erlang':'list_to_atom'
				    (ModS)
			    in  do  %% Line 560
				    call 'int':'i'
					(_cor30)
				    %% Line 561
				    'ignore'
	      end
	  %% Line 565
	  <{'wx',314,_cor168,_cor169,%% Line 566
				     {'wxCommand','command_checkbox_clicked',_cor170,_cor171,_cor172}},%% Line 567
												       WinInfo> when 'true' ->
	      let <Check> =
		  %% Line 568
		  ( fun (_cor36,_cor35) ->
			%% Line 569
			case call 'wxCheckBox':'isChecked'
				 (_cor36) of
			  %% Line 570
			  <'true'> when 'true' ->
			      let <Name> =
				  %% Line 571
				  call 'wxCheckBox':'getLabel'
				      (_cor36)
			      in  let <_cor33> =
				      %% Line 572
				      call 'erlang':'list_to_atom'
					  (Name)
				  in  %% Line 572
				      [_cor33|_cor35]
			  %% Line 573
			  <'false'> when 'true' ->
			      _cor35
			  ( <_cor34> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor34})
			    -| ['compiler_generated'] )
			end
		    -| [{'id',{0,0,'-handle_event/2-fun-2-'}}] )
	      in  %% Line 578
		  ( case WinInfo of
		      ( <( {'winInfo',_cor173,_cor174,_cor175,_cor176,_cor177,_cor178,_cor179,_cor180,_cor181,_cor182,_rec49,_cor183,_cor184,_cor185,_cor186}
			   -| ['compiler_generated'] )> when 'true' ->
			    let <Names> =
				call 'wx':'foldl'
				    (Check, [], [_rec49|%% Line 579
							[_cor182|%% Line 580
								 [_cor181|[]]]])
			    in  %% Line 581
				{'Auto Attach',Names}
			-| ['compiler_generated'] )
		      ( <_cor187> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','winInfo'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  %% Line 584
	  <{'wx',271,_cor218,_cor219,%% Line 585
				     {'wxCommand','command_checkbox_clicked',_cor220,_cor221,_cor222}},%% Line 586
												       WinInfo> when 'true' ->
	      let <Check> =
		  %% Line 587
		  ( fun (_cor51,_cor50) ->
			%% Line 588
			case call 'wxCheckBox':'isChecked'
				 (_cor51) of
			  %% Line 589
			  <'true'> when 'true' ->
			      let <Name> =
				  %% Line 590
				  call 'wxCheckBox':'getLabel'
				      (_cor51)
			      in  let <_cor48> =
				      %% Line 591
				      call 'erlang':'list_to_atom'
					  (Name)
				  in  %% Line 591
				      [_cor48|_cor50]
			  %% Line 592
			  <'false'> when 'true' ->
			      _cor50
			  ( <_cor49> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor49})
			    -| ['compiler_generated'] )
			end
		    -| [{'id',{0,0,'-handle_event/2-fun-3-'}}] )
	      in  %% Line 597
		  ( case WinInfo of
		      ( <( {'winInfo',_cor223,_cor224,_cor225,_cor226,_cor227,_cor228,_cor229,_cor230,_cor231,_cor232,_cor233,_cor234,_rec52,_cor235,_cor236}
			   -| ['compiler_generated'] )> when 'true' ->
			    let <Names> =
				call 'wx':'foldl'
				    (Check, [], [_rec52|[]])
			    in  %% Line 598
				{'Strings',Names}
			-| ['compiler_generated'] )
		      ( <_cor237> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','winInfo'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  %% Line 601
	  <{'wx',_cor238,_cor239,_cor240,{'wxList','command_list_item_selected',_cor241,_cor242,%% Line 602
												Row,_cor243,_cor244}},%% Line 602
														      WinInfo> when 'true' ->
	      %% Line 603
	      case WinInfo of
		<{'winInfo',_cor245,_cor246,_cor247,_cor248,_cor249,Pids,_cor250,_cor251,_cor252,_cor253,_cor254,_cor255,_cor256,_cor257,_cor258}> when 'true' ->
		    %% Line 604
		    case call 'lists':'keyfind'
			     (Row, 3, Pids) of
		      <{'procInfo',Pid,_cor259}> when 'true' ->
			  let <_cor62> =
			      %% Line 605
			      call 'erlang':'setelement'
				  (5, WinInfo, Row)
			  in  %% Line 605
			      {'focus',Pid,_cor62}
		      ( <_cor59> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor59})
			-| ['compiler_generated'] )
		    end
		( <_cor58> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor58})
		  -| ['compiler_generated'] )
	      end
	  %% Line 606
	  <{'wx',_cor276,_cor277,_cor278,{'wxList','command_list_item_activated',_cor279,_cor280,_cor281,_cor282,_cor283}},%% Line 607
															   _X_WinInfo> when 'true' ->
	      %% Line 608
	      'default'
	  %% Line 609
	  <{'wx',_cor284,_cor285,_cor286,{'wxMouse','enter_window',_cor287,_cor288,_cor289,_cor290,_cor291,_cor292,_cor293,_cor294,_cor295,_cor296,_cor297,_cor298}},{'winInfo',_cor299,Grid,_cor300,_cor301,_cor302,_cor303,_cor304,_cor305,_cor306,_cor307,_cor308,_cor309,_cor310,_cor311,_cor312}> when 'true' ->
	      do  %% Line 611
		  call 'wxWindow':'setFocus'
		      (Grid)
		  %% Line 612
		  'ignore'
	  %% Line 615
	  <{'wx',_cor313,_cor314,Data,_X_Cmd = %% Line 616
					       {'wxCommand','command_menu_selected',_cor315,_cor316,_cor317}},%% Line 617
													      _X_WinInfo> when 'true' ->
	      %% Line 618
	      Data
	  %% Line 619
	  <_X_Event,_X_WinInfo> when 'true' ->
	      %% Line 620
	      'ignore'
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('dbg_wx_mon_win')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('dbg_wx_mon_win', _cor0)
end