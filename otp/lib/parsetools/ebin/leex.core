module 'leex' ['compile'/3,
	       'file'/1,
	       'file'/2,
	       'format_error'/1,
	       'module_info'/0,
	       'module_info'/1]
    attributes [%% Line 22
		'type' =
		    %% Line 22
		    [{{'record','options'},[{'typed_record_field',{'record_field',23,{'atom',23,'includes'},{'nil',23}},{'type',23,'list',[{'remote_type',23,[{'atom',23,'file'}|[{'atom',23,'filename'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',25,{'atom',25,'outdir'},{'string',25,[46]}},{'remote_type',25,[{'atom',25,'file'}|[{'atom',25,'filename'}|[[]]]]}}|[{'typed_record_field',{'record_field',27,{'atom',27,'output_type'},{'atom',27,'undefined'}},{'type',27,'atom',[]}}|[{'typed_record_field',{'record_field',28,{'atom',28,'defines'},{'nil',28}},{'type',28,'list',[{'type',28,'union',[{'type',28,'atom',[]}|[{'type',28,'tuple',[{'type',28,'atom',[]}|[{'var',28,'_'}]]}]]}]}}|[{'typed_record_field',{'record_field',32,{'atom',32,'warning'},{'integer',32,1}},{'type',32,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',35,{'atom',35,'verbose'},{'atom',35,'false'}},{'type',35,'boolean',[]}}|[{'record_field',36,{'atom',36,'optimize'},{'integer',36,999}}|[{'typed_record_field',{'record_field',37,{'atom',37,'specific'},{'nil',37}},{'type',37,'list',[{'var',37,'_'}]}}|[{'typed_record_field',{'record_field',38,{'atom',38,'outfile'},{'string',38,[]}},{'remote_type',38,[{'atom',38,'file'}|[{'atom',38,'filename'}|[[]]]]}}|[{'typed_record_field',{'record_field',40,{'atom',40,'cwd'}},{'type',40,'union',[{'atom',40,'undefined'}|[{'remote_type',40,[{'atom',40,'file'}|[{'atom',40,'filename'}|[[]]]]}]]}}]]]]]]]]]],[]}],
		%% Line 55
		'type' =
		    %% Line 55
		    [{{'record','leex'},[{'record_field',55,{'atom',55,'xfile'},{'nil',55}}|[{'record_field',56,{'atom',56,'efile'},{'nil',56}}|[{'record_field',57,{'atom',57,'ifile'},{'nil',57}}|[{'record_field',58,{'atom',58,'gfile'},{'nil',58}}|[{'record_field',59,{'atom',59,'module'}}|[{'record_field',60,{'atom',60,'opts'},{'nil',60}}|[{'record_field',61,{'atom',61,'encoding'},{'atom',61,'none'}}|[{'record_field',63,{'atom',63,'errors'},{'nil',63}}|[{'record_field',64,{'atom',64,'warnings'},{'nil',64}}]]]]]]]]],[]}],
		%% Line 67
		'type' =
		    %% Line 67
		    [{{'record','nfa_state'},[{'record_field',67,{'atom',67,'no'}}|[{'record_field',67,{'atom',67,'edges'},{'nil',67}}|[{'record_field',67,{'atom',67,'accept'},{'atom',67,'noaccept'}}]]],[]}],
		%% Line 68
		'type' =
		    %% Line 68
		    [{{'record','dfa_state'},[{'record_field',68,{'atom',68,'no'}}|[{'record_field',68,{'atom',68,'nfa'},{'nil',68}}|[{'record_field',68,{'atom',68,'trans'},{'nil',68}}|[{'record_field',68,{'atom',68,'accept'},{'atom',68,'noaccept'}}]]]],[]}],
		%% Line 332
		'spec' =
		    %% Line 332
		    [{{'add_error',2},[{'type',332,'fun',[{'type',332,'product',[{'var',332,'_'}|[{'type',332,'record',[{'atom',332,'leex'}]}]]}|[{'type',332,'no_return',[]}]]}]}]]
'compile'/3 =
    %% Line 76
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Input0,Output0,%% Line 77
			  {'options',Includes,_cor15,_cor16,_cor17,WarnLevel,Verbose,_cor18,%% Line 78
											    Specific,_cor19,_cor20}> when 'true' ->
	      let <_cor3> =
		  %% Line 79
		  apply 'shorten_filename'/1
		      (Input0)
	      in  let <Input> =
		      %% Line 79
		      apply 'assure_extension'/2
			  (_cor3, [46|[120|[114|[108]]]])
		  in  let <_cor5> =
			  %% Line 80
			  apply 'shorten_filename'/1
			      (Output0)
		      in  let <Output> =
			      %% Line 80
			      apply 'assure_extension'/2
				  (_cor5, [46|[101|[114|[108]]]])
			  in  let <Includefile> =
				  %% Line 81
				  call 'lists':'sublist'
				      (Includes, 1)
			      in  let <Werror> =
				      %% Line 82
				      call 'proplists':'get_bool'
					  ('warnings_as_errors', Specific)
				  in  let <_cor9> =
					  %% Line 84
					  call 'erlang':'>'
					      (WarnLevel, 0)
				      in  let <Opts> =
					      %% Line 83
					      [{'scannerfile',Output}|[{'includefile',Includefile}|[{'verbose',Verbose}|%% Line 84
															[{'report_errors','true'}|[{'report_warnings',_cor9}|%% Line 85
																					     [{'warnings_as_errors',Werror}|[]]]]]]]
					  in  %% Line 86
					      case apply 'file'/2
						       (Input, Opts) of
						%% Line 87
						<{'ok',_cor21}> when 'true' ->
						    %% Line 88
						    'ok'
						%% Line 89
						<'error'> when 'true' ->
						    %% Line 90
						    'error'
						( <_cor11> when 'true' ->
						      primop 'match_fail'
							  ({'case_clause',_cor11})
						  -| ['compiler_generated'] )
					      end
	  ( <_cor14,_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12})
		  -| [{'function_name',{'compile',3}}] )
	    -| ['compiler_generated'] )
	end
'file'/1 =
    %% Line 96
    fun (_cor0) ->
	apply 'file'/2
	    (_cor0, [])
'file'/2 =
    %% Line 98
    fun (_cor1,_cor0) ->
	do  %% Line 99
	    case apply 'is_filename'/1
		     (_cor1) of
	      %% Line 100
	      <'no'> when 'true' ->
		  call 'erlang':'error'
		      ('badarg', [_cor1|[_cor0|[]]])
	      %% Line 101
	      <_cor23> when 'true' ->
		  'ok'
	    end
	    let <_cor4> =
		%% Line 103
		case apply 'options'/1
			 (_cor0) of
		  %% Line 104
		  <'badarg'> when 'true' ->
		      %% Line 105
		      call 'erlang':'error'
			  ('badarg', [_cor1|[_cor0|[]]])
		  %% Line 106
		  <Options> when 'true' ->
		      %% Line 107
		      Options
		end
	    in  let <St1> =
		    %% Line 110
		    apply 'filenames'/3
			(_cor1, _cor4, {'leex',[],[],[],[],'undefined',[],'none',[],[]})
		in  let <_cor19> =
			%% Line 111
			try
			    %% Line 112
			    case apply 'parse_file'/1
				     (St1) of
			      <{'ok',REAs,Actions,Code,St2}> when 'true' ->
				  %% Line 113
				  case apply 'make_dfa'/2
					   (REAs, St2) of
				    <{DFA,DF}> when 'true' ->
					%% Line 114
					case apply 'werror'/1
						 (St2) of
					  %% Line 115
					  <'false'> when 'true' ->
					      let <St3> =
						  %% Line 116
						  apply 'out_file'/5
						      (St2, DFA, DF, Actions, Code)
					      in  %% Line 117
						  ( case St3 of
						      ( <( {'leex',_cor24,_cor25,_cor26,_cor27,_cor28,_rec0,_cor29,_cor30,_cor31}
							   -| ['compiler_generated'] )> when 'true' ->
							    case call 'lists':'member'
								     ('dfa_graph', _rec0) of
							      %% Line 118
							      <'true'> when 'true' ->
								  apply 'out_dfa_graph'/3
								      (St3, DFA, DF)
							      %% Line 119
							      <'false'> when 'true' ->
								  St3
							      ( <_cor13> when 'true' ->
								    primop 'match_fail'
									({'case_clause',_cor13})
								-| ['compiler_generated'] )
							    end
							-| ['compiler_generated'] )
						      ( <_cor32> when 'true' ->
							    ( call ( 'erlang'
								     -| ['compiler_generated'] ):( 'error'
												   -| ['compiler_generated'] )
								  (( {'badrecord','leex'}
								     -| ['compiler_generated'] ))
							      -| ['compiler_generated'] )
							-| ['compiler_generated'] )
						    end
						    -| ['compiler_generated'] )
					  %% Line 121
					  <'true'> when 'true' ->
					      %% Line 122
					      St2
					  ( <_cor14> when 'true' ->
						primop 'match_fail'
						    ({'case_clause',_cor14})
					    -| ['compiler_generated'] )
					end
				    ( <_cor9> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor9})
				      -| ['compiler_generated'] )
				  end
			      ( <_cor8> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor8})
				-| ['compiler_generated'] )
			    end
			of <_cor15> ->
			    _cor15
			catch <_cor18,_cor17,_cor16> ->
			    case <_cor18,_cor17,_cor16> of
			      %% Line 124
			      <'throw',St4 = {'leex',_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41},_cor42> when 'true' ->
				  %% Line 125
				  St4
			      ( <_cor18,_cor17,_cor16> when 'true' ->
				    primop 'raise'
					(_cor16, _cor17)
				-| ['compiler_generated'] )
			    end
		    in  %% Line 127
			apply 'leex_ret'/1
			    (_cor19)
'format_error'/1 =
    %% Line 129
    fun (_cor0) ->
	case _cor0 of
	  <{'file_error',Reason}> when 'true' ->
	      let <_cor1> =
		  %% Line 130
		  call 'file':'format_error'
		      (Reason)
	      in  %% Line 130
		  call 'io_lib':'fwrite'
		      ([126|[116|[115]]], [_cor1|[]])
	  %% Line 131
	  <'missing_defs'> when 'true' ->
	      [109|[105|[115|[115|[105|[110|[103|[32|[68|[101|[102|[105|[110|[105|[116|[105|[111|[110|[115]]]]]]]]]]]]]]]]]]]
	  %% Line 132
	  <'missing_rules'> when 'true' ->
	      [109|[105|[115|[115|[105|[110|[103|[32|[82|[117|[108|[101|[115]]]]]]]]]]]]]
	  %% Line 133
	  <'missing_code'> when 'true' ->
	      [109|[105|[115|[115|[105|[110|[103|[32|[69|[114|[108|[97|[110|[103|[32|[99|[111|[100|[101]]]]]]]]]]]]]]]]]]]
	  %% Line 134
	  <'empty_rules'> when 'true' ->
	      [110|[111|[32|[114|[117|[108|[101|[115]]]]]]]]
	  %% Line 135
	  <'bad_rule'> when 'true' ->
	      [98|[97|[100|[32|[114|[117|[108|[101]]]]]]]]
	  %% Line 136
	  <{'regexp',E}> when 'true' ->
	      let <_cor4> =
		  %% Line 137
		  case E of
		    %% Line 138
		    <{'interval_range',_cor7}> when 'true' ->
			[105|[110|[116|[101|[114|[118|[97|[108|[32|[114|[97|[110|[103|[101]]]]]]]]]]]]]]
		    %% Line 139
		    <{'unterminated',Cs}> when 'true' ->
			%% Line 140
			call 'erlang':'++'
			    ([117|[110|[116|[101|[114|[109|[105|[110|[97|[116|[101|[100|[32]]]]]]]]]]]]], Cs)
		    %% Line 141
		    <{'illegal_char',Cs}> when 'true' ->
			%% Line 142
			call 'erlang':'++'
			    ([105|[108|[108|[101|[103|[97|[108|[32|[99|[104|[97|[114|[97|[99|[116|[101|[114|[32]]]]]]]]]]]]]]]]]], Cs)
		    %% Line 145
		    <{'char_class',What}> when 'true' ->
			let <_cor2> =
			    %% Line 146
			    call 'io_lib':'write_string'
				(What)
			in  %% Line 146
			    [[105|[108|[108|[101|[103|[97|[108|[32|[99|[104|[97|[114|[97|[99|[116|[101|[114|[32|[99|[108|[97|[115|[115|[32]]]]]]]]]]]]]]]]]]]]]]]]|[_cor2|[]]]
		    ( <_cor3> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor3})
		      -| ['compiler_generated'] )
		  end
	      in  %% Line 148
		  [[98|[97|[100|[32|[114|[101|[103|[101|[120|[112|[32|[96]]]]]]]]]]]]|[_cor4|[[39]]]]
	  %% Line 149
	  <'ignored_characters'> when 'true' ->
	      %% Line 150
	      [105|[103|[110|[111|[114|[101|[100|[32|[99|[104|[97|[114|[97|[99|[116|[101|[114|[115]]]]]]]]]]]]]]]]]]
	  %% Line 151
	  <'cannot_parse'> when 'true' ->
	      %% Line 152
	      call 'io_lib':'fwrite'
		  ([99|[97|[110|[110|[111|[116|[32|[112|[97|[114|[115|[101|[59|[32|[112|[114|[111|[98|[97|[98|[108|[121|[32|[101|[110|[99|[111|[100|[105|[110|[103|[32|[109|[105|[115|[109|[97|[116|[99|[104]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [])
	  ( <_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6})
		  -| [{'function_name',{'format_error',1}}] )
	    -| ['compiler_generated'] )
	end
'assure_extension'/2 =
    %% Line 158
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 159
	    apply 'strip_extension'/2
		(_cor1, _cor0)
	in  %% Line 159
	    call 'lists':'concat'
		([_cor2|[_cor0|[]]])
'strip_extension'/2 =
    %% Line 162
    fun (_cor1,_cor0) ->
	%% Line 163
	case call 'filename':'extension'
		 (_cor1) of
	  %% Line 164
	  <_cor5>
	      when call 'erlang':'=:='
		    (_cor5,
		     _cor0) ->
	      call 'filename':'rootname'
		  (_cor1)
	  %% Line 165
	  <_X_Other> when 'true' ->
	      _cor1
	end
'options'/1 =
    %% Line 168
    fun (_cor0) ->
	case _cor0 of
	  <Options0>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      %% Line 169
	      try
		  let <_cor3> =
		      %% Line 170
		      ( fun (_cor1) ->
			    case _cor1 of
			      <'return'> when 'true' ->
				  apply 'short_option'/2
				      ('return', 'true')
			      %% Line 171
			      <'report'> when 'true' ->
				  apply 'short_option'/2
				      ('report', 'true')
			      %% Line 172
			      <{'return',T}> when 'true' ->
				  apply 'short_option'/2
				      ('return', T)
			      %% Line 173
			      <{'report',T}> when 'true' ->
				  apply 'short_option'/2
				      ('report', T)
			      %% Line 174
			      <T> when 'true' ->
				  [T|[]]
			    end
			-| [{'id',{0,0,'-options/1-fun-0-'}}] )
		  in  let <Options> =
			  %% Line 170
			  call 'lists':'flatmap'
			      (_cor3, %% Line 175
				      Options0)
		      in  %% Line 176
			  apply 'options'/3
			      (Options, ['scannerfile'|['includefile'|['report_errors'|['report_warnings'|['warnings_as_errors'|['return_errors'|['return_warnings'|['verbose'|['dfa_graph']]]]]]]]], %% Line 179
																								      [])
	      of <_cor5> ->
		  _cor5
	      catch <_cor8,_cor7,_cor6> ->
		  case <_cor8,_cor7,_cor6> of
		    %% Line 180
		    <'error',_cor10,_cor11> when 'true' ->
			'badarg'
		    ( <_cor8,_cor7,_cor6> when 'true' ->
			  primop 'raise'
			      (_cor6, _cor7)
		      -| ['compiler_generated'] )
		  end
	  %% Line 182
	  <Option> when 'true' ->
	      %% Line 183
	      apply 'options'/1
		  ([Option|[]])
	end
'short_option'/2 =
    %% Line 185
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'return',T> when 'true' ->
	      %% Line 186
	      [{'return_errors',T}|[{'return_warnings',T}|[]]]
	  %% Line 187
	  <'report',T> when 'true' ->
	      %% Line 188
	      [{'report_errors',T}|[{'report_warnings',T}|[]]]
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'short_option',2}}] )
	    -| ['compiler_generated'] )
	end
'options'/3 =
    %% Line 190
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Options0,[Key|Keys],L>
	      when call 'erlang':'is_list'
		    (Options0) ->
	      let <_cor6> =
		  %% Line 191
		  case call 'lists':'member'
			   (Key, Options0) of
		    %% Line 192
		    <'true'> when 'true' ->
			let <_cor3> =
			    %% Line 193
			    apply 'atom_option'/1
				(Key)
			in  let <_cor4> =
				%% Line 193
				call 'lists':'delete'
				    (Key, Options0)
			    in  %% Line 193
				[_cor3|_cor4]
		    %% Line 194
		    <'false'> when 'true' ->
			%% Line 195
			Options0
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor5})
		      -| ['compiler_generated'] )
		  end
	      in  let <_cor13> =
		      %% Line 197
		      case call 'lists':'keyfind'
			       (Key, 1, _cor6) of
			%% Line 198
			<{_cor26,Filename0}>
			    when let <_cor27> =
				  call 'erlang':'=:='
				      (_cor26, Key)
			      in  let <_cor8> =
				      call 'erlang':'=:='
					  (Key, 'includefile')
				  in  let <_cor9> =
					  %% Line 199
					  call 'erlang':'=:='
					      (Key, 'scannerfile')
				      in  let <_cor28> =
					      call 'erlang':'or'
						  (_cor8, _cor9)
					  in  call 'erlang':'and'
						  (_cor27, _cor28) ->
			    %% Line 200
			    case apply 'is_filename'/1
				     (Filename0) of
			      %% Line 201
			      <'no'> when 'true' ->
				  %% Line 202
				  'badarg'
			      %% Line 203
			      <Filename> when 'true' ->
				  %% Line 204
				  {'ok',[{Key,Filename}|[]]}
			    end
			%% Line 206
			<KB = {_cor29,Bool}>
			    when let <_cor30> =
				  call 'erlang':'=:='
				      (_cor29, Key)
			      in  let <_cor31> =
				      call 'erlang':'is_boolean'
					  (Bool)
				  in  call 'erlang':'and'
					  (_cor30, _cor31) ->
			    %% Line 207
			    {'ok',[KB|[]]}
			%% Line 208
			<{_cor32,_cor33}>
			    when call 'erlang':'=:='
				  (_cor32,
				   Key) ->
			    %% Line 209
			    'badarg'
			%% Line 210
			<'false'> when 'true' ->
			    let <_cor11> =
				%% Line 211
				apply 'default_option'/1
				    (Key)
			    in  %% Line 211
				{'ok',[{Key,_cor11}|[]]}
			( <_cor12> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor12})
			  -| ['compiler_generated'] )
		      end
		  in  %% Line 213
		      case _cor13 of
			%% Line 214
			<'badarg'> when 'true' ->
			    %% Line 215
			    'badarg'
			%% Line 216
			<{'ok',KeyValueL}> when 'true' ->
			    let <NewOptions> =
				%% Line 217
				call 'lists':'keydelete'
				    (Key, 1, _cor6)
			    in  let <_cor16> =
				    %% Line 218
				    call 'erlang':'++'
					(KeyValueL, L)
				in  %% Line 218
				    apply 'options'/3
					(NewOptions, Keys, _cor16)
			( <_cor17> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor17})
			  -| ['compiler_generated'] )
		      end
	  %% Line 220
	  <[],[],L> when 'true' ->
	      let <_cor22> =
		  %% Line 221
		  ( fun (_cor19,_cor18) ->
			case <_cor19,_cor18> of
			  <{_cor34,'false'},A> when 'true' ->
			      A
			  %% Line 222
			  <{Tag,'true'},A> when 'true' ->
			      [Tag|A]
			  %% Line 223
			  <F,A> when 'true' ->
			      [F|A]
			end
		    -| [{'id',{0,0,'-options/3-fun-0-'}}] )
	      in  %% Line 221
		  call 'lists':'foldl'
		      (_cor22, %% Line 224
			       [], %% Line 224
				   L)
	  %% Line 225
	  <_X_Options,_cor35,_X_L> when 'true' ->
	      %% Line 226
	      'badarg'
	end
'default_option'/1 =
    %% Line 228
    fun (_cor0) ->
	case _cor0 of
	  <'dfa_graph'> when 'true' ->
	      'false'
	  %% Line 229
	  <'includefile'> when 'true' ->
	      []
	  %% Line 230
	  <'report_errors'> when 'true' ->
	      'true'
	  %% Line 231
	  <'report_warnings'> when 'true' ->
	      'true'
	  %% Line 232
	  <'warnings_as_errors'> when 'true' ->
	      'false'
	  %% Line 233
	  <'return_errors'> when 'true' ->
	      'false'
	  %% Line 234
	  <'return_warnings'> when 'true' ->
	      'false'
	  %% Line 235
	  <'scannerfile'> when 'true' ->
	      []
	  %% Line 236
	  <'verbose'> when 'true' ->
	      'false'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'default_option',1}}] )
	    -| ['compiler_generated'] )
	end
'atom_option'/1 =
    %% Line 238
    fun (_cor0) ->
	case _cor0 of
	  <'dfa_graph'> when 'true' ->
	      {'dfa_graph','true'}
	  %% Line 239
	  <'report_errors'> when 'true' ->
	      {'report_errors','true'}
	  %% Line 240
	  <'report_warnings'> when 'true' ->
	      {'report_warnings','true'}
	  %% Line 241
	  <'warnings_as_errors'> when 'true' ->
	      {'warnings_as_errors','true'}
	  %% Line 242
	  <'return_errors'> when 'true' ->
	      {'return_errors','true'}
	  %% Line 243
	  <'return_warnings'> when 'true' ->
	      {'return_warnings','true'}
	  %% Line 244
	  <'verbose'> when 'true' ->
	      {'verbose','true'}
	  %% Line 245
	  <Key> when 'true' ->
	      Key
	end
'is_filename'/1 =
    %% Line 247
    fun (_cor0) ->
	%% Line 248
	try
	    call 'filename':'flatten'
		(_cor0)
	of <_cor1> ->
	    _cor1
	catch <_cor4,_cor3,_cor2> ->
	    case <_cor4,_cor3,_cor2> of
	      %% Line 249
	      <'error',_cor6,_cor7> when 'true' ->
		  'no'
	      ( <_cor4,_cor3,_cor2> when 'true' ->
		    primop 'raise'
			(_cor2, _cor3)
		-| ['compiler_generated'] )
	    end
'shorten_filename'/1 =
    %% Line 252
    fun (_cor0) ->
	%% Line 253
	case call 'file':'get_cwd'
		 () of
	  <{'ok',Cwd}> when 'true' ->
	      %% Line 254
	      case call 'lists':'prefix'
		       (Cwd, _cor0) of
		%% Line 255
		<'false'> when 'true' ->
		    _cor0
		%% Line 256
		<'true'> when 'true' ->
		    let <_cor2> =
			%% Line 257
			call 'erlang':'length'
			    (Cwd)
		    in  %% Line 257
			case call 'lists':'nthtail'
				 (_cor2, _cor0) of
			  %% Line 258
			  <[47|N]> when 'true' ->
			      N
			  %% Line 259
			  <N> when 'true' ->
			      N
			end
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'leex_ret'/1 =
    %% Line 263
    fun (_cor0) ->
	do  %% Line 264
	    apply 'report_errors'/1
		(_cor0)
	    do  %% Line 265
		apply 'report_warnings'/1
		    (_cor0)
		%% Line 266
		( case _cor0 of
		    ( <( {'leex',_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_rec1,_cor23}
			 -| ['compiler_generated'] )> when 'true' ->
			  let <Es> =
			      apply 'pack_errors'/1
				  (_rec1)
			  in  let <Ws> =
				  %% Line 267
				  apply 'pack_warnings'/1
				      (_cor23)
			      in  let <Werror> =
				      %% Line 268
				      apply 'werror'/1
					  (_cor0)
				  in  %% Line 269
				      case <> of
					%% Line 270
					<>
					    when call 'erlang':'=:='
						  (Werror,
						   'true') ->
					    %% Line 271
					    apply 'do_error_return'/3
						(_cor0, Es, Ws)
					%% Line 272
					<>
					    when call 'erlang':'=:='
						  (Es,
						   []) ->
					    %% Line 273
					    case call 'lists':'member'
						     ('return_warnings', _cor21) of
					      %% Line 274
					      <'true'> when 'true' ->
						  {'ok',_cor17,Ws}
					      %% Line 275
					      <'false'> when 'true' ->
						  {'ok',_cor17}
					      ( <_cor14> when 'true' ->
						    primop 'match_fail'
							({'case_clause',_cor14})
						-| ['compiler_generated'] )
					    end
					%% Line 277
					<> when 'true' ->
					    %% Line 278
					    apply 'do_error_return'/3
						(_cor0, Es, Ws)
				      end
		      -| ['compiler_generated'] )
		    ( <_cor24> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','leex'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
		  -| ['compiler_generated'] )
'do_error_return'/3 =
    %% Line 281
    fun (_cor2,_cor1,_cor0) ->
	%% Line 282
	( case _cor2 of
	    ( <( {'leex',_cor9,_cor10,_cor11,_cor12,_cor13,_rec6,_cor14,_cor15,_cor16}
		 -| ['compiler_generated'] )> when 'true' ->
		  case call 'lists':'member'
			   ('return_errors', _rec6) of
		    %% Line 283
		    <'true'> when 'true' ->
			{'error',_cor1,_cor0}
		    %% Line 284
		    <'false'> when 'true' ->
			'error'
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor5})
		      -| ['compiler_generated'] )
		  end
	      -| ['compiler_generated'] )
	    ( <_cor17> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','leex'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'werror'/1 =
    %% Line 287
    fun (_cor0) ->
	%% Line 288
	( case _cor0 of
	    ( <( {'leex',_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_rec7}
		 -| ['compiler_generated'] )> when 'true' ->
		  %% Line 289
		  ( case <> of
		      ( <>
			    when call 'erlang':'=/='
				  (_rec7,
				   []) ->
			    call 'lists':'member'
				('warnings_as_errors', _cor13)
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    'false'
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	    ( <_cor16> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','leex'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'pack_errors'/1 =
    %% Line 291
    fun (_cor0) ->
	case _cor0 of
	  <Es = [{File,_cor7}|_cor8]> when 'true' ->
	      let <_cor4> =
		  %% Line 292
		  ( fun (_cor2) ->
			case _cor2 of
			  <{_cor9,E}> when 'true' ->
			      [E|[]]
			  ( <_cor3> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_cor3})
				  -| [{'function_name',{'-pack_errors/1-fun-0-',1}}] )
			    -| ['compiler_generated'] )
			end
		    -| [{'id',{0,0,'-pack_errors/1-fun-0-'}}] )
	      in  let <_cor1> =
		      %% Line 292
		      call 'lists':'sort'
			  (Es)
		  in  let <_cor5> =
			  %% Line 292
			  call 'lists':'flatmap'
			      (_cor4, _cor1)
		      in  %% Line 292
			  [{File,_cor5}|[]]
	  %% Line 293
	  <[]> when 'true' ->
	      %% Line 294
	      []
	  ( <_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6})
		  -| [{'function_name',{'pack_errors',1}}] )
	    -| ['compiler_generated'] )
	end
'pack_warnings'/1 =
    %% Line 296
    fun (_cor0) ->
	case _cor0 of
	  <Ws = [{File,_cor7}|_cor8]> when 'true' ->
	      let <_cor4> =
		  %% Line 297
		  ( fun (_cor2) ->
			case _cor2 of
			  <{_cor9,W}> when 'true' ->
			      [W|[]]
			  ( <_cor3> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_cor3})
				  -| [{'function_name',{'-pack_warnings/1-fun-0-',1}}] )
			    -| ['compiler_generated'] )
			end
		    -| [{'id',{0,0,'-pack_warnings/1-fun-0-'}}] )
	      in  let <_cor1> =
		      %% Line 297
		      call 'lists':'sort'
			  (Ws)
		  in  let <_cor5> =
			  %% Line 297
			  call 'lists':'flatmap'
			      (_cor4, _cor1)
		      in  %% Line 297
			  [{File,_cor5}|[]]
	  %% Line 298
	  <[]> when 'true' ->
	      %% Line 299
	      []
	  ( <_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6})
		  -| [{'function_name',{'pack_warnings',1}}] )
	    -| ['compiler_generated'] )
	end
'report_errors'/1 =
    %% Line 301
    fun (_cor0) ->
	let <_cor11> =
	    %% Line 302
	    ( fun () ->
		  let <_cor10> =
		      %% Line 303
		      ( fun (_cor8) ->
			    case _cor8 of
			      <{File,{'none',Mod,E}}> when 'true' ->
				  let <_cor6> =
				      %% Line 305
				      call Mod:'format_error'
					  (E)
				  in  %% Line 304
				      call 'io':'fwrite'
					  ([126|[116|[115|[58|[32|[126|[116|[115|[10]]]]]]]]], %% Line 305
											       [File|[_cor6|[]]])
			      %% Line 306
			      <{File,{Line,Mod,E}}> when 'true' ->
				  let <_cor7> =
				      %% Line 308
				      call Mod:'format_error'
					  (E)
				  in  %% Line 307
				      call 'io':'fwrite'
					  ([126|[116|[115|[58|[126|[119|[58|[32|[126|[116|[115|[10]]]]]]]]]]]], %% Line 308
														[File|[Line|[_cor7|[]]]])
			      ( <_cor9> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_cor9})
				      -| [{'function_name',{'-report_errors/1-fun-0-',1}}] )
				-| ['compiler_generated'] )
			    end
			-| [{'id',{0,0,'-report_errors/1-fun-0-'}}] )
		  in  %% Line 309
		      ( case _cor0 of
			  ( <( {'leex',_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_rec9,_cor20}
			       -| ['compiler_generated'] )> when 'true' ->
				let <_cor5> =
				    call 'lists':'sort'
					(_rec9)
				in  call 'lists':'foreach'
					(_cor10, _cor5)
			    -| ['compiler_generated'] )
			  ( <_cor21> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','leex'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
	      -| [{'id',{0,0,'-report_errors/1-fun-1-'}}] )
	in  %% Line 310
	    ( case _cor0 of
		( <( {'leex',_cor22,_cor23,_cor24,_cor25,_cor26,_rec10,_cor27,_cor28,_cor29}
		     -| ['compiler_generated'] )> when 'true' ->
		      apply 'when_opt'/3
			  (_cor11, 'report_errors', _rec10)
		  -| ['compiler_generated'] )
		( <_cor30> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','leex'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	      -| ['compiler_generated'] )
'report_warnings'/1 =
    %% Line 312
    fun (_cor0) ->
	%% Line 313
	( case _cor0 of
	    ( <( {'leex',_cor29,_cor30,_cor31,_cor32,_cor33,_rec11,_cor34,_cor35,_cor36}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <Werror> =
		      call 'lists':'member'
			  ('warnings_as_errors', _rec11)
		  in  let <_cor5> =
			  %% Line 314
			  case Werror of
			    %% Line 315
			    <'true'> when 'true' ->
				[]
			    %% Line 316
			    <'false'> when 'true' ->
				[87|[97|[114|[110|[105|[110|[103|[58|[32]]]]]]]]]
			    ( <_cor4> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor4})
			      -| ['compiler_generated'] )
			  end
		      in  let <_cor11> =
			      %% Line 318
			      ( case Werror of
				  ( <( 'true'
				       -| ['compiler_generated'] )> when 'true' ->
					call 'lists':'member'
					    ('report_errors', _rec11)
				    -| ['compiler_generated'] )
				  ( <( 'false'
				       -| ['compiler_generated'] )> when 'true' ->
					'false'
				    -| ['compiler_generated'] )
				  ( <_cor7> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {( 'badarg'
						    -| ['compiler_generated'] ),_cor7}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			  in  let <_cor17> =
				  %% Line 319
				  ( case call 'lists':'member'
					     ('report_warnings', _rec11) of
				      ( <( 'true'
					   -| ['compiler_generated'] )> when 'true' ->
					    'true'
					-| ['compiler_generated'] )
				      ( <( 'false'
					   -| ['compiler_generated'] )> when 'true' ->
					    _cor11
					-| ['compiler_generated'] )
				      ( <_cor13> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {( 'badarg'
							-| ['compiler_generated'] ),_cor13}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
			      in  let <_cor27> =
				      %% Line 320
				      ( fun () ->
					    let <_cor26> =
						%% Line 321
						( fun (_cor24) ->
						      case _cor24 of
							<{File,{'none',Mod,W}}> when 'true' ->
							    let <_cor22> =
								%% Line 324
								call Mod:'format_error'
								    (W)
							    in  %% Line 322
								call 'io':'fwrite'
								    ([126|[116|[115|[58|[32|[126|[115|[126|[116|[115|[10]]]]]]]]]]], %% Line 323
																     [File|[_cor5|%% Line 324
																		  [_cor22|[]]]])
							%% Line 325
							<{File,{Line,Mod,W}}> when 'true' ->
							    let <_cor23> =
								%% Line 328
								call Mod:'format_error'
								    (W)
							    in  %% Line 326
								call 'io':'fwrite'
								    ([126|[116|[115|[58|[126|[119|[58|[32|[126|[115|[126|[116|[115|[10]]]]]]]]]]]]]], %% Line 327
																		      [File|[Line|[_cor5|%% Line 328
																					 [_cor23|[]]]]])
							( <_cor25> when 'true' ->
							      ( primop 'match_fail'
								    ({'function_clause',_cor25})
								-| [{'function_name',{'-report_warnings/1-fun-0-',1}}] )
							  -| ['compiler_generated'] )
						      end
						  -| [{'id',{0,0,'-report_warnings/1-fun-0-'}}] )
					    in  let <_cor21> =
						    %% Line 329
						    call 'lists':'sort'
							(_cor36)
						in  %% Line 321
						    call 'lists':'foreach'
							(_cor26, _cor21)
					-| [{'id',{0,0,'-report_warnings/1-fun-1-'}}] )
				  in  %% Line 320
				      apply 'when_bool'/2
					  (_cor27, _cor17)
	      -| ['compiler_generated'] )
	    ( <_cor37> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','leex'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'add_error'/2 =
    %% Line 333
    fun (_cor1,_cor0) ->
	%% Line 334
	( case _cor0 of
	    ( <( {'leex',_rec15,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13}
		 -| ['compiler_generated'] )> when 'true' ->
		  apply 'add_error'/3
		      (_rec15, _cor1, _cor0)
	      -| ['compiler_generated'] )
	    ( <_cor14> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','leex'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'add_error'/3 =
    %% Line 336
    fun (_cor2,_cor1,_cor0) ->
	%% Line 337
	( case _cor0 of
	    ( <( {'leex',_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_rec18,_cor19}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_rec16> =
		      [{_cor2,_cor1}|_rec18]
		  in  let <_cor8> =
			  call 'erlang':'setelement'
			      (9, _cor0, _rec16)
		      in  call 'erlang':'throw'
			      (_cor8)
	      -| ['compiler_generated'] )
	    ( <_cor20> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','leex'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'add_warning'/3 =
    %% Line 339
    fun (_cor2,_cor1,_cor0) ->
	%% Line 340
	( case _cor0 of
	    ( <( {'leex',_rec21,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_rec19> =
		      [{_rec21,{_cor2,'leex',_cor1}}|_cor20]
		  in  call 'erlang':'setelement'
			  (10, _cor0, _rec19)
	      -| ['compiler_generated'] )
	    ( <_cor21> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','leex'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'filenames'/3 =
    %% Line 346
    fun (_cor2,_cor1,_cor0) ->
	let <Dir> =
	    %% Line 347
	    call 'filename':'dirname'
		(_cor2)
	in  let <Base> =
		%% Line 348
		call 'filename':'basename'
		    (_cor2, [46|[120|[114|[108]]]])
	    in  let <_cor5> =
		    %% Line 349
		    call 'erlang':'++'
			(Base, [46|[120|[114|[108]]]])
		in  let <Xfile> =
			%% Line 349
			call 'filename':'join'
			    (Dir, _cor5)
		    in  let <Efile> =
			    %% Line 350
			    call 'erlang':'++'
				(Base, [46|[101|[114|[108]]]])
			in  let <Gfile> =
				%% Line 351
				call 'erlang':'++'
				    (Base, [46|[100|[111|[116]]]])
			    in  let <Module> =
				    %% Line 352
				    call 'erlang':'list_to_atom'
					(Base)
				in  %% Line 353
				    case _cor0 of
				      <{'leex',_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42}> when 'true' ->
					  let <_cor11> =
					      %% Line 354
					      call 'erlang':'setelement'
						  (7, _cor0, _cor1)
					  in  let <_cor12> =
						  %% Line 355
						  call 'erlang':'setelement'
						      (6, _cor11, Module)
					      in  let <_cor14> =
						      call 'erlang':'setelement'
							  (2, _cor12, Xfile)
						  in  %% Line 356
						      case call 'lists':'keyfind'
							       ('includefile', 1, _cor1) of
							<{'includefile',Ifile0}> when 'true' ->
							    let <Ifile> =
								%% Line 357
								apply 'inc_file_name'/1
								    (Ifile0)
							    in  %% Line 359
								case call 'lists':'keyfind'
									 ('scannerfile', 1, _cor1) of
								  <{'scannerfile',Ofile}> when 'true' ->
								      %% Line 360
								      case <> of
									%% Line 361
									<>
									    when call 'erlang':'=:='
										  (Ofile,
										   []) ->
									    let <_rec24> =
										%% Line 362
										call 'filename':'join'
										    (Dir, Efile)
									    in  let <_rec25> =
										    %% Line 364
										    call 'filename':'join'
											(Dir, Gfile)
										in  %% Line 362
										    case _cor14 of
										      <{'leex',_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52}> when 'true' ->
											  let <_cor22> =
											      %% Line 364
											      call 'erlang':'setelement'
												  (5, _cor14, _rec25)
											  in  let <_cor23> =
												  %% Line 363
												  call 'erlang':'setelement'
												      (4, _cor22, Ifile)
											      in  call 'erlang':'setelement'
												      (3, _cor23, _rec24)
										      ( <_cor53> when 'true' ->
											    ( call ( 'erlang'
												     -| ['compiler_generated'] ):( 'error'
																   -| ['compiler_generated'] )
												  (( {'badrecord','leex'}
												     -| ['compiler_generated'] ))
											      -| ['compiler_generated'] )
											-| ['compiler_generated'] )
										    end
									%% Line 365
									<> when 'true' ->
									    let <D> =
										%% Line 366
										call 'filename':'dirname'
										    (Ofile)
									    in  let <_rec27> =
										    %% Line 369
										    call 'filename':'join'
											(D, Gfile)
										in  %% Line 367
										    case _cor14 of
										      <{'leex',_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62}> when 'true' ->
											  let <_cor28> =
											      %% Line 369
											      call 'erlang':'setelement'
												  (5, _cor14, _rec27)
											  in  let <_cor29> =
												  %% Line 368
												  call 'erlang':'setelement'
												      (4, _cor28, Ifile)
											      in  call 'erlang':'setelement'
												      (3, _cor29, Ofile)
										      ( <_cor63> when 'true' ->
											    ( call ( 'erlang'
												     -| ['compiler_generated'] ):( 'error'
																   -| ['compiler_generated'] )
												  (( {'badrecord','leex'}
												     -| ['compiler_generated'] ))
											      -| ['compiler_generated'] )
											-| ['compiler_generated'] )
										    end
								      end
								  ( <_cor18> when 'true' ->
									primop 'match_fail'
									    ({'badmatch',_cor18})
								    -| ['compiler_generated'] )
								end
							( <_cor16> when 'true' ->
							      primop 'match_fail'
								  ({'badmatch',_cor16})
							  -| ['compiler_generated'] )
						      end
				      ( <_cor43> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','leex'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
'when_opt'/3 =
    %% Line 372
    fun (_cor2,_cor1,_cor0) ->
	%% Line 373
	case call 'lists':'member'
		 (_cor1, _cor0) of
	  %% Line 374
	  <'true'> when 'true' ->
	      apply _cor2
		  ()
	  %% Line 375
	  <'false'> when 'true' ->
	      'ok'
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor3})
	    -| ['compiler_generated'] )
	end
'when_bool'/2 =
    %% Line 378
    fun (_cor1,_cor0) ->
	%% Line 379
	case _cor0 of
	  %% Line 380
	  <'true'> when 'true' ->
	      apply _cor1
		  ()
	  %% Line 381
	  <'false'> when 'true' ->
	      'ok'
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor2})
	    -| ['compiler_generated'] )
	end
'verbose_print'/3 =
    %% Line 384
    fun (_cor2,_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 385
	    ( fun () ->
		  call 'io':'fwrite'
		      (_cor1, _cor0)
	      -| [{'id',{0,0,'-verbose_print/3-fun-0-'}}] )
	in  %% Line 385
	    ( case _cor2 of
		( <( {'leex',_cor9,_cor10,_cor11,_cor12,_cor13,_rec29,_cor14,_cor15,_cor16}
		     -| ['compiler_generated'] )> when 'true' ->
		      apply 'when_opt'/3
			  (_cor5, 'verbose', _rec29)
		  -| ['compiler_generated'] )
		( <_cor17> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','leex'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	      -| ['compiler_generated'] )
'parse_file'/1 =
    %% Line 399
    fun (_cor0) ->
	%% Line 400
	( case _cor0 of
	    ( <( {'leex',_rec30,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29}
		 -| ['compiler_generated'] )> when 'true' ->
		  case call 'file':'open'
			   (_rec30, ['read']) of
		    %% Line 401
		    <{'ok',Xfile}> when 'true' ->
			let <_rec31> =
			    %% Line 402
			    call 'epp':'set_encoding'
				(Xfile)
			in  let <_cor6> =
				%% Line 402
				call 'erlang':'setelement'
				    (8, _cor0, _rec31)
			    in  %% Line 403
				letrec
				    'after$^0'/0 =
					fun () ->
					    let <_cor41> =
						%% Line 413
						call 'file':'close'
						    (Xfile)
					    in  %% Line 413
						case _cor41 of
						  <'ok'> when 'true' ->
						      ( _cor41
							-| ['compiler_generated'] )
						  ( <_cor15> when 'true' ->
							primop 'match_fail'
							    ({'badmatch',_cor15})
						    -| ['compiler_generated'] )
						end
				in  try
					%% Line 404
					( case _cor6 of
					    ( <( {'leex',_rec33,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49}
						 -| ['compiler_generated'] )> when 'true' ->
						  do  apply 'verbose_print'/3
							  (_cor6, [80|[97|[114|[115|[105|[110|[103|[32|[102|[105|[108|[101|[32|[126|[116|[115|[44|[32]]]]]]]]]]]]]]]]]], [_rec33|[]])
						      %% Line 406
						      case apply 'parse_head'/2
							       (Xfile, _cor6) of
							<{'ok',Line1,St2}> when 'true' ->
							    %% Line 407
							    case apply 'parse_defs'/3
								     (Xfile, Line1, St2) of
							      <{'ok',Line2,Macs,St3}> when 'true' ->
								  %% Line 408
								  case %% Line 409
								       apply 'parse_rules'/4
									   (Xfile, Line2, Macs, St3) of
								    <{'ok',Line3,REAs,Actions,St4}> when 'true' ->
									%% Line 410
									case apply 'parse_code'/3
										 (Xfile, Line3, St4) of
									  <{'ok',Code,St5}> when 'true' ->
									      let <_cor14> =
										  %% Line 411
										  call 'erlang':'length'
										      (REAs)
									      in  do  %% Line 411
										      apply 'verbose_print'/3
											  (St5, [99|[111|[110|[116|[97|[105|[110|[101|[100|[32|[126|[119|[32|[114|[117|[108|[101|[115|[46|[126|[110]]]]]]]]]]]]]]]]]]]]], [_cor14|[]])
										      %% Line 412
										      {'ok',REAs,Actions,Code,St5}
									  ( <_cor13> when 'true' ->
										primop 'match_fail'
										    ({'badmatch',_cor13})
									    -| ['compiler_generated'] )
									end
								    ( <_cor12> when 'true' ->
									  primop 'match_fail'
									      ({'badmatch',_cor12})
								      -| ['compiler_generated'] )
								  end
							      ( <_cor11> when 'true' ->
								    primop 'match_fail'
									({'badmatch',_cor11})
								-| ['compiler_generated'] )
							    end
							( <_cor10> when 'true' ->
							      primop 'match_fail'
								  ({'badmatch',_cor10})
							  -| ['compiler_generated'] )
						      end
					      -| ['compiler_generated'] )
					    ( <_cor50> when 'true' ->
						  ( call ( 'erlang'
							   -| ['compiler_generated'] ):( 'error'
											 -| ['compiler_generated'] )
							(( {'badrecord','leex'}
							   -| ['compiler_generated'] ))
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					  end
					  -| ['compiler_generated'] )
				    of <_cor16> ->
					do  ( apply 'after$^0'/0
						  ()
					      -| ['compiler_generated'] )
					    _cor16
				    catch <_cor19,_cor18,_cor17> ->
					do  ( apply 'after$^0'/0
						  ()
					      -| ['compiler_generated'] )
					    primop 'raise'
						(_cor17, _cor18)
		    %% Line 415
		    <{'error',Error}> when 'true' ->
			%% Line 416
			apply 'add_error'/2
			    ({'none','leex',{'file_error',Error}}, _cor0)
		    ( <_cor20> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor20})
		      -| ['compiler_generated'] )
		  end
	      -| ['compiler_generated'] )
	    ( <_cor30> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','leex'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'parse_head'/2 =
    %% Line 422
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    apply 'nextline'/3
		(_cor1, 0, _cor0)
	in  {'ok',_cor2,_cor0}
'parse_defs'/3 =
    %% Line 428
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Ifile,{'ok',[68|[101|[102|[105|[110|[105|[116|[105|[111|[110|[115|[46|Rest]]]]]]]]]]]],L},St> when 'true' ->
	      let <St1> =
		  %% Line 429
		  apply 'warn_ignored_chars'/3
		      (L, Rest, St)
	      in  let <_cor4> =
		      %% Line 430
		      apply 'nextline'/3
			  (Ifile, L, St)
		  in  %% Line 430
		      apply 'parse_defs'/4
			  (Ifile, _cor4, [], St1)
	  %% Line 431
	  <_cor8,{'ok',_cor9,L},St> when 'true' ->
	      %% Line 432
	      apply 'add_error'/2
		  ({L,'leex','missing_defs'}, St)
	  %% Line 433
	  <_cor10,{'eof',L},St> when 'true' ->
	      %% Line 434
	      apply 'add_error'/2
		  ({L,'leex','missing_defs'}, St)
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'parse_defs',3}}] )
	    -| ['compiler_generated'] )
	end
'parse_defs'/4 =
    %% Line 436
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Ifile,Line = {'ok',Chars,L},Ms,St> when 'true' ->
	      %% Line 439
	      case call 're':'run'
		       (Chars, [94|[91|[32|[9|[93|[42|[40|[91|[65|[45|[90|[95|[93|[91|[65|[45|[90|[97|[45|[122|[48|[45|[57|[95|[93|[42|[41|[91|[32|[9|[93|[42|[61|[91|[32|[9|[93|[42|[40|[91|[94|[32|[9|[13|[10|[93|[42|[41|[91|[32|[9|[13|[10|[93|[42|[36]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [{'capture','all_but_first','list'}|['unicode']]) of
		%% Line 440
		<{'match',[Name|[Def|[]]]}> when 'true' ->
		    let <_cor5> =
			%% Line 442
			apply 'nextline'/3
			    (Ifile, L, St)
		    in  %% Line 442
			apply 'parse_defs'/4
			    (Ifile, _cor5, [{Name,Def}|Ms], St)
		%% Line 443
		<_cor11> when 'true' ->
		    {'ok',Line,Ms,St}
	      end
	  %% Line 445
	  <_cor12,Line,Ms,St> when 'true' ->
	      %% Line 446
	      {'ok',Line,Ms,St}
	end
'parse_rules'/4 =
    %% Line 451
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Ifile,{'ok',[82|[117|[108|[101|[115|[46|Rest]]]]]],L},Ms,St> when 'true' ->
	      let <St1> =
		  %% Line 452
		  apply 'warn_ignored_chars'/3
		      (L, Rest, St)
	      in  let <_cor5> =
		      %% Line 453
		      apply 'nextline'/3
			  (Ifile, L, St)
		  in  %% Line 453
		      apply 'parse_rules'/7
			  (Ifile, _cor5, Ms, [], [], 0, St1)
	  %% Line 454
	  <_cor10,{'ok',_cor11,L},_cor12,St> when 'true' ->
	      %% Line 455
	      apply 'add_error'/2
		  ({L,'leex','missing_rules'}, St)
	  %% Line 456
	  <_cor13,{'eof',L},_cor14,St> when 'true' ->
	      %% Line 457
	      apply 'add_error'/2
		  ({L,'leex','missing_rules'}, St)
	  ( <_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'parse_rules',4}}] )
	    -| ['compiler_generated'] )
	end
'parse_rules'/7 =
    %% Line 462
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 463
	case _cor5 of
	  %% Line 464
	  <{'ok',[69|[114|[108|[97|[110|[103|[32|[99|[111|[100|[101|[46|_X_Rest]]]]]]]]]]]],_cor19}> when 'true' ->
	      %% Line 465
	      apply 'parse_rules_end'/5
		  (_cor6, _cor5, _cor3, _cor2, _cor0)
	  %% Line 466
	  <{'ok',Chars,L0}> when 'true' ->
	      %% Line 468
	      case apply 'collect_rule'/3
		       (_cor6, Chars, L0) of
		%% Line 469
		<{'ok',Re,Atoks,L1}> when 'true' ->
		    %% Line 470
		    case apply 'parse_rule'/6
			     (Re, L0, Atoks, _cor4, _cor1, _cor0) of
		      <{'ok',REA,A,St1}> when 'true' ->
			  let <_cor9> =
			      %% Line 471
			      apply 'nextline'/3
				  (_cor6, L1, _cor0)
			  in  let <_cor8> =
				  %% Line 472
				  call 'erlang':'+'
				      (_cor1, 1)
			      in  %% Line 471
				  apply 'parse_rules'/7
				      (_cor6, _cor9, _cor4, %% Line 472
							    [REA|_cor3], %% Line 472
									 [A|_cor2], _cor8, %% Line 472
											   St1)
		      ( <_cor7> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor7})
			-| ['compiler_generated'] )
		    end
		%% Line 473
		<{'error',E}> when 'true' ->
		    apply 'add_error'/2
			(E, _cor0)
		( <_cor10> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor10})
		  -| ['compiler_generated'] )
	      end
	  %% Line 475
	  <{'eof',_cor20}> when 'true' ->
	      %% Line 476
	      apply 'parse_rules_end'/5
		  (_cor6, _cor5, _cor3, _cor2, _cor0)
	  ( <_cor11> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor11})
	    -| ['compiler_generated'] )
	end
'parse_rules_end'/5 =
    %% Line 479
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <_cor12,{'ok',_cor13,L},[],[],St> when 'true' ->
	      %% Line 480
	      apply 'add_error'/2
		  ({L,'leex','empty_rules'}, St)
	  %% Line 481
	  <_cor14,{'eof',L},[],[],St> when 'true' ->
	      %% Line 482
	      apply 'add_error'/2
		  ({L,'leex','empty_rules'}, St)
	  %% Line 483
	  <_cor15,NextLine,REAs,As,St> when 'true' ->
	      let <_cor6> =
		  %% Line 485
		  call 'lists':'reverse'
		      (REAs)
	      in  let <_cor5> =
		      %% Line 485
		      call 'lists':'reverse'
			  (As)
		  in  %% Line 485
		      {'ok',NextLine,_cor6,_cor5,St}
	end
'collect_rule'/3 =
    %% Line 492
    fun (_cor2,_cor1,_cor0) ->
	%% Line 494
	case call 're':'run'
		 (_cor1, [91|[94|[32|[9|[13|[10|[93|[43]]]]]]]], ['unicode']) of
	  <{'match',[{St0,Len}|_cor12]}> when 'true' ->
	      let <St> =
		  %% Line 495
		  call 'erlang':'+'
		      (St0, 1)
	      in  let <_cor5> =
		      %% Line 497
		      call 'erlang':'+'
			  (St, Len)
		  in  let <_cor6> =
			  %% Line 497
			  call 'string':'substr'
			      (_cor1, _cor5)
		      in  %% Line 497
			  case apply 'collect_action'/4
				   (_cor2, _cor6, _cor0, []) of
			    %% Line 498
			    <{'ok',[{':',_cor13}|Toks],L1}> when 'true' ->
				let <_cor7> =
				    call 'string':'substr'
					(_cor1, St, Len)
				in  {'ok',_cor7,Toks,L1}
			    %% Line 499
			    <{'ok',_cor14,_cor15}> when 'true' ->
				{'error',{_cor0,'leex','bad_rule'}}
			    %% Line 500
			    <{'eof',L1}> when 'true' ->
				{'error',{L1,'leex','bad_rule'}}
			    %% Line 501
			    <{'error',E,_cor16}> when 'true' ->
				{'error',E}
			    ( <_cor8> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor8})
			      -| ['compiler_generated'] )
			  end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'collect_action'/4 =
    %% Line 504
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <_X_Ifile,{'error',_cor11},L,_X_Cont0> when 'true' ->
	      %% Line 505
	      {'error',{L,'leex','cannot_parse'},'ignored_end_line'}
	  %% Line 506
	  <Ifile,Chars,L0,Cont0> when 'true' ->
	      %% Line 507
	      case call 'erl_scan':'tokens'
		       (Cont0, Chars, L0) of
		%% Line 508
		<{'done',{'ok',Toks,_cor12},_cor13}> when 'true' ->
		    {'ok',Toks,L0}
		%% Line 509
		<{'done',{'eof',_cor14},_cor15}> when 'true' ->
		    {'eof',L0}
		%% Line 510
		<{'done',{'error',E,_cor16},_cor17}> when 'true' ->
		    {'error',E,L0}
		%% Line 511
		<{'more',Cont1}> when 'true' ->
		    let <_cor5> =
			%% Line 512
			call 'io':'get_line'
			    (Ifile, 'leex')
		    in  let <_cor4> =
			    %% Line 512
			    call 'erlang':'+'
				(L0, 1)
			in  %% Line 512
			    apply 'collect_action'/4
				(Ifile, _cor5, _cor4, Cont1)
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor6})
		  -| ['compiler_generated'] )
	      end
	end
'parse_rule'/6 =
    %% Line 519
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <S,Line,[{'dot',_cor17}|[]],Ms,N,St> when 'true' ->
	      %% Line 520
	      case apply 'parse_rule_regexp'/3
		       (S, Ms, St) of
		%% Line 521
		<{'ok',R}> when 'true' ->
		    %% Line 522
		    {'ok',{R,N},{N,'empty_action'},St}
		%% Line 523
		<{'error',E}> when 'true' ->
		    %% Line 524
		    apply 'add_error'/2
			({Line,'leex',E}, St)
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor6})
		  -| ['compiler_generated'] )
	      end
	  %% Line 526
	  <S,Line,Atoks,Ms,N,St> when 'true' ->
	      %% Line 527
	      case apply 'parse_rule_regexp'/3
		       (S, Ms, St) of
		%% Line 528
		<{'ok',R}> when 'true' ->
		    let <TokenChars> =
			%% Line 531
			apply 'var_used'/2
			    ('TokenChars', Atoks)
		    in  let <TokenLen> =
			    %% Line 532
			    apply 'var_used'/2
				('TokenLen', Atoks)
			in  let <TokenLine> =
				%% Line 533
				apply 'var_used'/2
				    ('TokenLine', Atoks)
			    in  %% Line 534
				{'ok',{R,N},{N,Atoks,TokenChars,TokenLen,TokenLine},St}
		%% Line 535
		<{'error',E}> when 'true' ->
		    %% Line 536
		    apply 'add_error'/2
			({Line,'leex',E}, St)
		( <_cor10> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor10})
		  -| ['compiler_generated'] )
	      end
	end
'var_used'/2 =
    %% Line 539
    fun (_cor1,_cor0) ->
	%% Line 540
	case call 'lists':'keyfind'
		 (_cor1, 3, _cor0) of
	  %% Line 541
	  <{'var',_cor5,_cor6}>
	      when call 'erlang':'=:='
		    (_cor6,
		     _cor1) ->
	      'true'
	  %% Line 542
	  <_cor7> when 'true' ->
	      'false'
	end
'parse_rule_regexp'/3 =
    %% Line 550
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <RE0,[{M,Exp}|Ms],St> when 'true' ->
	      let <_cor3> =
		  %% Line 551
		  call 'erlang':'++'
		      (M, [92|[125]])
	      in  let <_cor4> =
		      %% Line 551
		      [92|[123|_cor3]]
		  in  let <Split> =
			  %% Line 551
			  call 're':'split'
			      (RE0, _cor4, [{'return','list'}|['unicode']])
		      in  let <RE1> =
			      %% Line 552
			      call 'string':'join'
				  (Split, Exp)
			  in  %% Line 553
			      apply 'parse_rule_regexp'/3
				  (RE1, Ms, St)
	  %% Line 554
	  <RE,[],St> when 'true' ->
	      %% Line 556
	      case apply 're_parse'/2
		       (RE, St) of
		%% Line 557
		<{'ok',R}> when 'true' ->
		    {'ok',R}
		%% Line 558
		<{'error',E}> when 'true' ->
		    {'error',{'regexp',E}}
		( <_cor7> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor7})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'parse_rule_regexp',3}}] )
	    -| ['compiler_generated'] )
	end
'parse_code'/3 =
    %% Line 565
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Ifile,{'ok',[69|[114|[108|[97|[110|[103|[32|[99|[111|[100|[101|[46|Rest]]]]]]]]]]]],CodeL},St> when 'true' ->
	      let <St1> =
		  %% Line 566
		  apply 'warn_ignored_chars'/3
		      (CodeL, Rest, St)
	      in  %% Line 567
		  case call 'file':'position'
			   (Ifile, 'cur') of
		    <{'ok',CodePos}> when 'true' ->
			let <EndCodeLine> =
			    %% Line 569
			    apply 'count_lines'/3
				(Ifile, CodeL, St)
			in  let <NCodeLines> =
				%% Line 570
				call 'erlang':'-'
				    (EndCodeLine, CodeL)
			    in  %% Line 571
				{'ok',{CodeL,CodePos,NCodeLines},St1}
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor4})
		      -| ['compiler_generated'] )
		  end
	  %% Line 572
	  <_cor10,{'ok',_cor11,L},St> when 'true' ->
	      %% Line 573
	      apply 'add_error'/2
		  ({L,'leex','missing_code'}, St)
	  %% Line 574
	  <_cor12,{'eof',L},St> when 'true' ->
	      %% Line 575
	      apply 'add_error'/2
		  ({L,'leex','missing_code'}, St)
	  ( <_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7})
		  -| [{'function_name',{'parse_code',3}}] )
	    -| ['compiler_generated'] )
	end
'count_lines'/3 =
    %% Line 577
    fun (_cor2,_cor1,_cor0) ->
	%% Line 578
	case call 'io':'get_line'
		 (_cor2, 'leex') of
	  %% Line 579
	  <'eof'> when 'true' ->
	      _cor1
	  %% Line 580
	  <{'error',_cor9}> when 'true' ->
	      let <_cor3> =
		  call 'erlang':'+'
		      (_cor1, 1)
	      in  apply 'add_error'/2
		      ({_cor3,'leex','cannot_parse'}, _cor0)
	  %% Line 581
	  <_X_Line> when 'true' ->
	      let <_cor4> =
		  call 'erlang':'+'
		      (_cor1, 1)
	      in  apply 'count_lines'/3
		      (_cor2, _cor4, _cor0)
	end
'nextline'/3 =
    %% Line 587
    fun (_cor2,_cor1,_cor0) ->
	%% Line 588
	case call 'io':'get_line'
		 (_cor2, 'leex') of
	  %% Line 589
	  <'eof'> when 'true' ->
	      {'eof',_cor1}
	  %% Line 590
	  <{'error',_cor14}> when 'true' ->
	      let <_cor3> =
		  call 'erlang':'+'
		      (_cor1, 1)
	      in  apply 'add_error'/2
		      ({_cor3,'leex','cannot_parse'}, _cor0)
	  %% Line 591
	  <Chars> when 'true' ->
	      let <_cor4> =
		  %% Line 592
		  call 'string':'span'
		      (Chars, [32|[9|[10]]])
	      in  let <_cor5> =
		      %% Line 592
		      call 'erlang':'+'
			  (_cor4, 1)
		  in  %% Line 592
		      case call 'string':'substr'
			       (Chars, _cor5) of
			%% Line 593
			<[37|_X_Rest]> when 'true' ->
			    let <_cor6> =
				call 'erlang':'+'
				    (_cor1, 1)
			    in  apply 'nextline'/3
				    (_cor2, _cor6, _cor0)
			%% Line 594
			<[]> when 'true' ->
			    let <_cor7> =
				call 'erlang':'+'
				    (_cor1, 1)
			    in  apply 'nextline'/3
				    (_cor2, _cor7, _cor0)
			%% Line 595
			<_X_Other> when 'true' ->
			    let <_cor8> =
				call 'erlang':'+'
				    (_cor1, 1)
			    in  {'ok',Chars,_cor8}
		      end
	end
'warn_ignored_chars'/3 =
    %% Line 599
    fun (_cor2,_cor1,_cor0) ->
	%% Line 600
	case apply 'non_white'/1
		 (_cor1) of
	  %% Line 601
	  <[]> when 'true' ->
	      _cor0
	  %% Line 602
	  <_cor7> when 'true' ->
	      apply 'add_warning'/3
		  (_cor2, 'ignored_characters', _cor0)
	end
'non_white'/1 =
    %% Line 605
    fun (_cor0) ->
	%% Line 606
	( letrec
	      'lc$^0'/1 =
		  fun (_cor8) ->
		      case _cor8 of
			<[C|_cor2]>
			    when try
				  let <_cor3> =
				      call 'erlang':'>'
					  (C, 32)
				  in  ( let <_cor6> =
					    ( case <> of
						( <>
						      when ( call 'erlang':'<'
							      (C,
							       128)
							  -| ['compiler_generated'] ) ->
						      'true'
						  -| ['compiler_generated'] )
						( <> when 'true' ->
						      ( call 'erlang':'>'
							    (C, 160)
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					      end
					      -| ['compiler_generated'] )
					in  ( call 'erlang':'and'
						  (_cor3, ( _cor6
							    -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
			      of <Try> ->
				  Try
			      catch <T,R> ->
				  'false' ->
			    let <_cor9> =
				apply 'lc$^0'/1
				    (_cor2)
			    in  ( [C|_cor9]
				  -| ['compiler_generated'] )
			( <[C|_cor2]> when 'true' ->
			      apply 'lc$^0'/1
				  (_cor2)
			  -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_cor8> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor8})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  apply 'lc$^0'/1
		  (_cor0)
	  -| ['list_comprehension'] )
're_parse'/2 =
    %% Line 635
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    catch
		%% Line 636
		apply 're_reg'/3
		    (_cor1, 0, _cor0)
	in  %% Line 636
	    case _cor2 of
	      %% Line 637
	      <{RE,_cor6,[]}> when 'true' ->
		  {'ok',RE}
	      %% Line 638
	      <{_cor7,_cor8,[C|_cor9]}> when 'true' ->
		  {'error',{'illegal_char',[C|[]]}}
	      %% Line 639
	      <{'parse_error',E}> when 'true' ->
		  {'error',E}
	      ( <_cor3> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor3})
		-| ['compiler_generated'] )
	    end
'parse_error'/1 =
    %% Line 642
    fun (_cor0) ->
	call 'erlang':'throw'
	    ({'parse_error',_cor0})
're_reg'/3 =
    %% Line 644
    fun (_cor2,_cor1,_cor0) ->
	apply 're_alt'/3
	    (_cor2, _cor1, _cor0)
're_alt'/3 =
    %% Line 646
    fun (_cor2,_cor1,_cor0) ->
	%% Line 647
	case apply 're_seq'/3
		 (_cor2, _cor1, _cor0) of
	  <{L,Sn1,Cs1}> when 'true' ->
	      %% Line 648
	      case apply 're_alt1'/3
		       (Cs1, Sn1, _cor0) of
		%% Line 649
		<{[],Sn2,Cs2}> when 'true' ->
		    {L,Sn2,Cs2}
		%% Line 650
		<{Rs,Sn2,Cs2}> when 'true' ->
		    {{'alt',[L|Rs]},Sn2,Cs2}
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
're_alt1'/3 =
    %% Line 653
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[124|Cs0],Sn0,St> when 'true' ->
	      %% Line 654
	      case apply 're_seq'/3
		       (Cs0, Sn0, St) of
		<{L,Sn1,Cs1}> when 'true' ->
		    %% Line 655
		    case apply 're_alt1'/3
			     (Cs1, Sn1, St) of
		      <{Rs,Sn2,Cs2}> when 'true' ->
			  %% Line 656
			  {[L|Rs],Sn2,Cs2}
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 657
	  <Cs,Sn,_cor8> when 'true' ->
	      {[],Sn,Cs}
	end
're_seq'/3 =
    %% Line 670
    fun (_cor2,_cor1,_cor0) ->
	%% Line 671
	case apply 're_seq1'/3
		 (_cor2, _cor1, _cor0) of
	  %% Line 672
	  <{[],Sn1,Cs1}> when 'true' ->
	      {'epsilon',Sn1,Cs1}
	  %% Line 673
	  <{[R|[]],Sn1,Cs1}> when 'true' ->
	      {R,Sn1,Cs1}
	  %% Line 674
	  <{Rs,Sn1,Cs1}> when 'true' ->
	      {{'seq',Rs},Sn1,Cs1}
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor3})
	    -| ['compiler_generated'] )
	end
're_seq1'/3 =
    %% Line 677
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Cs0 = [C|_cor10],Sn0,St>
	      when let <_cor3> =
		    call 'erlang':'=/='
			(C, 124)
		in  let <_cor4> =
			call 'erlang':'=/='
			    (C, 41)
		    in  call 'erlang':'and'
			    (_cor3, _cor4) ->
	      %% Line 678
	      case apply 're_repeat'/3
		       (Cs0, Sn0, St) of
		<{L,Sn1,Cs1}> when 'true' ->
		    %% Line 679
		    case apply 're_seq1'/3
			     (Cs1, Sn1, St) of
		      <{Rs,Sn2,Cs2}> when 'true' ->
			  %% Line 680
			  {[L|Rs],Sn2,Cs2}
		      ( <_cor6> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor6})
			-| ['compiler_generated'] )
		    end
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 681
	  <Cs,Sn,_cor11> when 'true' ->
	      {[],Sn,Cs}
	end
're_repeat'/3 =
    %% Line 685
    fun (_cor2,_cor1,_cor0) ->
	%% Line 686
	case apply 're_single'/3
		 (_cor2, _cor1, _cor0) of
	  <{S,Sn1,Cs1}> when 'true' ->
	      %% Line 687
	      apply 're_repeat1'/4
		  (Cs1, Sn1, S, _cor0)
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
're_repeat1'/4 =
    %% Line 689
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[42|Cs],Sn,S,St> when 'true' ->
	      apply 're_repeat1'/4
		  (Cs, Sn, {'kclosure',S}, St)
	  %% Line 690
	  <[43|Cs],Sn,S,St> when 'true' ->
	      apply 're_repeat1'/4
		  (Cs, Sn, {'pclosure',S}, St)
	  %% Line 691
	  <[63|Cs],Sn,S,St> when 'true' ->
	      apply 're_repeat1'/4
		  (Cs, Sn, {'optional',S}, St)
	  %% Line 701
	  <Cs,Sn,S,_cor8> when 'true' ->
	      {S,Sn,Cs}
	end
're_single'/3 =
    %% Line 706
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[40|Cs0],Sn0,St> when 'true' ->
	      let <Sn1> =
		  %% Line 707
		  call 'erlang':'+'
		      (Sn0, 1)
	      in  %% Line 708
		  case apply 're_reg'/3
			   (Cs0, Sn1, St) of
		    %% Line 709
		    <{S,Sn2,[41|Cs1]}> when 'true' ->
			{S,Sn2,Cs1}
		    %% Line 711
		    <_cor13> when 'true' ->
			apply 'parse_error'/1
			    ({'unterminated',[40]})
		  end
	  %% Line 717
	  <[46|Cs],Sn,_cor14> when 'true' ->
	      {{'comp_class',[10]},Sn,Cs}
	  %% Line 718
	  <[91|[94|Cs0]],Sn,St> when 'true' ->
	      %% Line 719
	      case apply 're_char_class'/2
		       (Cs0, St) of
		%% Line 720
		<{Cc,[93|Cs1]}> when 'true' ->
		    {{'comp_class',Cc},Sn,Cs1}
		%% Line 721
		<_cor15> when 'true' ->
		    apply 'parse_error'/1
			({'unterminated',[91]})
	      end
	  %% Line 723
	  <[91|Cs0],Sn,St> when 'true' ->
	      %% Line 724
	      case apply 're_char_class'/2
		       (Cs0, St) of
		%% Line 725
		<{Cc,[93|Cs1]}> when 'true' ->
		    {{'char_class',Cc},Sn,Cs1}
		%% Line 726
		<_cor16> when 'true' ->
		    apply 'parse_error'/1
			({'unterminated',[91]})
	      end
	  %% Line 728
	  <[92|Cs0],Sn,_cor17> when 'true' ->
	      %% Line 729
	      case apply 're_char'/2
		       (92, Cs0) of
		<{C,Cs1}> when 'true' ->
		    %% Line 730
		    {{'lit',[C|[]]},Sn,Cs1}
		( <_cor7> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor7})
		  -| ['compiler_generated'] )
	      end
	  %% Line 731
	  <[C|Cs0],Sn,St> when 'true' ->
	      %% Line 732
	      case apply 'special_char'/2
		       (C, St) of
		%% Line 733
		<'true'> when 'true' ->
		    apply 'parse_error'/1
			({'illegal_char',[C|[]]})
		%% Line 734
		<'false'> when 'true' ->
		    %% Line 735
		    case apply 're_char'/2
			     (C, Cs0) of
		      <{_cor18,Cs1}>
			  when call 'erlang':'=:='
				(_cor18,
				 C) ->
			  %% Line 736
			  {{'lit',[C|[]]},Sn,Cs1}
		      ( <_cor8> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor8})
			-| ['compiler_generated'] )
		    end
		( <_cor9> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor9})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10})
		  -| [{'function_name',{'re_single',3}}] )
	    -| ['compiler_generated'] )
	end
're_char'/2 =
    %% Line 746
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <92,[O1|[O2|[O3|S]]]>
	      when %% Line 747
		try
		    let <_cor2> =
			call 'erlang':'>='
			    (O1, 48)
		    in  let <_cor3> =
			    call 'erlang':'=<'
				(O1, 55)
			in  let <_cor4> =
				call 'erlang':'>='
				    (O2, 48)
			    in  let <_cor5> =
				    call 'erlang':'=<'
					(O2, 55)
				in  let <_cor6> =
					call 'erlang':'>='
					    (O3, 48)
				    in  let <_cor7> =
					    call 'erlang':'=<'
						(O3, 55)
					in  let <_cor8> =
						call 'erlang':'and'
						    (_cor6, _cor7)
					    in  let <_cor9> =
						    call 'erlang':'and'
							(_cor5, _cor8)
						in  let <_cor10> =
							call 'erlang':'and'
							    (_cor4, _cor9)
						    in  let <_cor11> =
							    call 'erlang':'and'
								(_cor3, _cor10)
							in  call 'erlang':'and'
								(_cor2, _cor11)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor13> =
		  %% Line 748
		  call 'erlang':'*'
		      (O1, 8)
	      in  let <_cor14> =
		      %% Line 748
		      call 'erlang':'+'
			  (_cor13, O2)
		  in  let <_cor15> =
			  %% Line 748
			  call 'erlang':'*'
			      (_cor14, 8)
		      in  let <_cor16> =
			      %% Line 748
			      call 'erlang':'+'
				  (_cor15, O3)
			  in  let <_cor17> =
				  %% Line 748
				  call 'erlang':'-'
				      (_cor16, 3504)
			      in  %% Line 748
				  {_cor17,S}
	  %% Line 749
	  <92,[120|[H1|[H2|S]]]>
	      when try
		    let <_cor21> =
			( case <> of
			    ( <>
				  when ( call 'erlang':'>='
					  (H1,
					   48)
				      -| ['compiler_generated'] ) ->
				  ( call 'erlang':'=<'
					(H1, 57)
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			    ( <> when 'true' ->
				  'false'
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    in  ( let <_cor30> =
			      ( case _cor21 of
				  ( <( 'true'
				       -| ['compiler_generated'] )> when 'true' ->
					'true'
				    -| ['compiler_generated'] )
				  ( <( 'false'
				       -| ['compiler_generated'] )> when 'true' ->
					let <_cor25> =
					    ( case <> of
						( <>
						      when ( call 'erlang':'>='
							      (H1,
							       65)
							  -| ['compiler_generated'] ) ->
						      ( call 'erlang':'=<'
							    (H1, 70)
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
						( <> when 'true' ->
						      'false'
						  -| ['compiler_generated'] )
					      end
					      -| ['compiler_generated'] )
					in  ( case _cor25 of
						( <( 'true'
						     -| ['compiler_generated'] )> when 'true' ->
						      'true'
						  -| ['compiler_generated'] )
						( <( 'false'
						     -| ['compiler_generated'] )> when 'true' ->
						      ( case <> of
							  ( <>
								when ( call 'erlang':'>='
									(H1,
									 97)
								    -| ['compiler_generated'] ) ->
								( call 'erlang':'=<'
								      (H1, 102)
								  -| ['compiler_generated'] )
							    -| ['compiler_generated'] )
							  ( <> when 'true' ->
								'false'
							    -| ['compiler_generated'] )
							end
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
						( <_cor22> when 'true' ->
						      _cor22
						  -| ['compiler_generated'] )
					      end
					      -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				  ( <_cor18> when 'true' ->
					_cor18
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			  in  let <_cor31> =
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( '=:='
									 -| ['compiler_generated'] )
					(( _cor30
					   -| ['compiler_generated'] ), ( 'true'
									  -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      in  let <_cor35> =
				      ( case <> of
					  ( <>
						when ( call 'erlang':'>='
							(H2,
							 48)
						    -| ['compiler_generated'] ) ->
						( call 'erlang':'=<'
						      (H2, 57)
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					  ( <> when 'true' ->
						'false'
					    -| ['compiler_generated'] )
					end
					-| ['compiler_generated'] )
				  in  ( let <_cor44> =
					    ( case _cor35 of
						( <( 'true'
						     -| ['compiler_generated'] )> when 'true' ->
						      'true'
						  -| ['compiler_generated'] )
						( <( 'false'
						     -| ['compiler_generated'] )> when 'true' ->
						      let <_cor39> =
							  ( case <> of
							      ( <>
								    when ( call 'erlang':'>='
									    (H2,
									     65)
									-| ['compiler_generated'] ) ->
								    ( call 'erlang':'=<'
									  (H2, 70)
								      -| ['compiler_generated'] )
								-| ['compiler_generated'] )
							      ( <> when 'true' ->
								    'false'
								-| ['compiler_generated'] )
							    end
							    -| ['compiler_generated'] )
						      in  ( case _cor39 of
							      ( <( 'true'
								   -| ['compiler_generated'] )> when 'true' ->
								    'true'
								-| ['compiler_generated'] )
							      ( <( 'false'
								   -| ['compiler_generated'] )> when 'true' ->
								    ( case <> of
									( <>
									      when ( call 'erlang':'>='
										      (H2,
										       97)
										  -| ['compiler_generated'] ) ->
									      ( call 'erlang':'=<'
										    (H2, 102)
										-| ['compiler_generated'] )
									  -| ['compiler_generated'] )
									( <> when 'true' ->
									      'false'
									  -| ['compiler_generated'] )
								      end
								      -| ['compiler_generated'] )
								-| ['compiler_generated'] )
							      ( <_cor36> when 'true' ->
								    _cor36
								-| ['compiler_generated'] )
							    end
							    -| ['compiler_generated'] )
						  -| ['compiler_generated'] )
						( <_cor32> when 'true' ->
						      _cor32
						  -| ['compiler_generated'] )
					      end
					      -| ['compiler_generated'] )
					in  let <_cor45> =
						( call ( 'erlang'
							 -| ['compiler_generated'] ):( '=:='
										       -| ['compiler_generated'] )
						      (( _cor44
							 -| ['compiler_generated'] ), ( 'true'
											-| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    in  ( call 'erlang':'and'
						      (_cor31, _cor45)
						  -| ['compiler_generated'] )
					-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor46> =
		  %% Line 750
		  call 'erlang':'list_to_integer'
		      ([H1|[H2|[]]], 16)
	      in  %% Line 750
		  {_cor46,S}
	  %% Line 751
	  <92,[120|[123|S0]]> when 'true' ->
	      %% Line 752
	      apply 're_hex'/2
		  (S0, [])
	  %% Line 753
	  <92,[120|_cor50]> when 'true' ->
	      %% Line 754
	      apply 'parse_error'/1
		  ({'illegal_char',[92|[120]]})
	  %% Line 755
	  <92,[C|S]> when 'true' ->
	      let <_cor47> =
		  apply 'escape_char'/1
		      (C)
	      in  {_cor47,S}
	  %% Line 756
	  <92,[]> when 'true' ->
	      apply 'parse_error'/1
		  ({'unterminated',[92]})
	  %% Line 757
	  <C,S> when 'true' ->
	      {C,S}
	end
're_hex'/2 =
    %% Line 759
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[C|Cs],L>
	      when try
		    let <_cor5> =
			( case <> of
			    ( <>
				  when ( call 'erlang':'>='
					  (C,
					   48)
				      -| ['compiler_generated'] ) ->
				  ( call 'erlang':'=<'
					(C, 57)
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			    ( <> when 'true' ->
				  'false'
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    in  ( let <_cor14> =
			      ( case _cor5 of
				  ( <( 'true'
				       -| ['compiler_generated'] )> when 'true' ->
					'true'
				    -| ['compiler_generated'] )
				  ( <( 'false'
				       -| ['compiler_generated'] )> when 'true' ->
					let <_cor9> =
					    ( case <> of
						( <>
						      when ( call 'erlang':'>='
							      (C,
							       65)
							  -| ['compiler_generated'] ) ->
						      ( call 'erlang':'=<'
							    (C, 70)
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
						( <> when 'true' ->
						      'false'
						  -| ['compiler_generated'] )
					      end
					      -| ['compiler_generated'] )
					in  ( case _cor9 of
						( <( 'true'
						     -| ['compiler_generated'] )> when 'true' ->
						      'true'
						  -| ['compiler_generated'] )
						( <( 'false'
						     -| ['compiler_generated'] )> when 'true' ->
						      ( case <> of
							  ( <>
								when ( call 'erlang':'>='
									(C,
									 97)
								    -| ['compiler_generated'] ) ->
								( call 'erlang':'=<'
								      (C, 102)
								  -| ['compiler_generated'] )
							    -| ['compiler_generated'] )
							  ( <> when 'true' ->
								'false'
							    -| ['compiler_generated'] )
							end
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
						( <_cor6> when 'true' ->
						      _cor6
						  -| ['compiler_generated'] )
					      end
					      -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				  ( <_cor2> when 'true' ->
					_cor2
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			  in  ( call ( 'erlang'
				       -| ['compiler_generated'] ):( '=:='
								     -| ['compiler_generated'] )
				    (( _cor14
				       -| ['compiler_generated'] ), ( 'true'
								      -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      apply 're_hex'/2
		  (Cs, [C|L])
	  %% Line 760
	  <[125|S],L0> when 'true' ->
	      let <L> =
		  %% Line 761
		  call 'lists':'reverse'
		      (L0)
	      in  %% Line 762
		  case call 'erlang':'list_to_integer'
			   (L, 16) of
		    %% Line 763
		    <C>
			when call 'erlang':'=<'
			      (C,
			       1114111) ->
			{C,S}
		    %% Line 764
		    <_cor20> when 'true' ->
			let <_cor16> =
			    [92|[120|[123|call 'erlang':'++'
					      (L, [125])]]]
			in  apply 'parse_error'/1
				({'illegal_char',_cor16})
		  end
	  %% Line 766
	  <_cor21,_cor22> when 'true' ->
	      apply 'parse_error'/1
		  ({'unterminated',[92|[120|[123]]]})
	end
'special_char'/2 =
    %% Line 772
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <94,_cor4> when 'true' ->
	      'true'
	  %% Line 773
	  <46,_cor5> when 'true' ->
	      'true'
	  %% Line 774
	  <91,_cor6> when 'true' ->
	      'true'
	  %% Line 775
	  <36,_cor7> when 'true' ->
	      'true'
	  %% Line 776
	  <40,_cor8> when 'true' ->
	      'true'
	  %% Line 777
	  <41,_cor9> when 'true' ->
	      'true'
	  %% Line 778
	  <124,_cor10> when 'true' ->
	      'true'
	  %% Line 779
	  <42,_cor11> when 'true' ->
	      'true'
	  %% Line 780
	  <43,_cor12> when 'true' ->
	      'true'
	  %% Line 781
	  <63,_cor13> when 'true' ->
	      'true'
	  %% Line 783
	  <92,_cor14> when 'true' ->
	      'true'
	  %% Line 784
	  <_cor15,_cor16> when 'true' ->
	      'false'
	end
're_char_class'/2 =
    %% Line 789
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[93|Cs],St> when 'true' ->
	      %% Line 790
	      apply 're_char_class'/3
		  (Cs, [93], St)
	  %% Line 791
	  <Cs,St> when 'true' ->
	      apply 're_char_class'/3
		  (Cs, [], St)
	end
're_char_class'/3 =
    %% Line 799
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[C1|Cs0],Cc,St>
	      when call 'erlang':'=/='
		    (C1,
		     93) ->
	      %% Line 800
	      case apply 're_char'/2
		       (C1, Cs0) of
		%% Line 801
		<{Cf,[45|[C2|Cs1]]}>
		    when call 'erlang':'=/='
			  (C2,
			   93) ->
		    %% Line 802
		    case apply 're_char'/2
			     (C2, Cs1) of
		      %% Line 803
		      <{Cl,Cs2}>
			  when call 'erlang':'<'
				(Cf,
				 Cl) ->
			  %% Line 804
			  apply 're_char_class'/3
			      (Cs2, [{'range',Cf,Cl}|Cc], St)
		      %% Line 805
		      <{_cor10,Cs2}> when 'true' ->
			  let <_cor3> =
			      %% Line 806
			      apply 'string_between'/2
				  ([C1|Cs0], Cs2)
			  in  %% Line 806
			      apply 'parse_error'/1
				  ({'char_class',_cor3})
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor4})
			-| ['compiler_generated'] )
		    end
		%% Line 808
		<{C,Cs1}> when 'true' ->
		    apply 're_char_class'/3
			(Cs1, [C|Cc], St)
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 810
	  <Cs,Cc,_cor11> when 'true' ->
	      let <_cor6> =
		  call 'lists':'reverse'
		      (Cc)
	      in  {_cor6,Cs}
	end
'escape_char'/1 =
    %% Line 829
    fun (_cor0) ->
	case _cor0 of
	  <110> when 'true' ->
	      10
	  %% Line 830
	  <114> when 'true' ->
	      13
	  %% Line 831
	  <116> when 'true' ->
	      9
	  %% Line 832
	  <118> when 'true' ->
	      11
	  %% Line 833
	  <98> when 'true' ->
	      8
	  %% Line 834
	  <102> when 'true' ->
	      12
	  %% Line 835
	  <101> when 'true' ->
	      27
	  %% Line 836
	  <115> when 'true' ->
	      32
	  %% Line 837
	  <100> when 'true' ->
	      127
	  %% Line 838
	  <C> when 'true' ->
	      C
	end
'string_between'/2 =
    %% Line 865
    fun (_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 866
	    call 'erlang':'length'
		(_cor1)
	in  let <_cor2> =
		%% Line 866
		call 'erlang':'length'
		    (_cor0)
	    in  let <_cor4> =
		    %% Line 866
		    call 'erlang':'-'
			(_cor3, _cor2)
		in  %% Line 866
		    call 'string':'substr'
			(_cor1, 1, _cor4)
'make_dfa'/2 =
    %% Line 888
    fun (_cor1,_cor0) ->
	%% Line 889
	case apply 'build_combined_nfa'/1
		 (_cor1) of
	  <{NFA,NF}> when 'true' ->
	      let <_cor3> =
		  %% Line 890
		  call 'erlang':'tuple_size'
		      (NFA)
	      in  do  %% Line 890
		      apply 'verbose_print'/3
			  (_cor0, [78|[70|[65|[32|[99|[111|[110|[116|[97|[105|[110|[115|[32|[126|[119|[32|[115|[116|[97|[116|[101|[115|[44|[32]]]]]]]]]]]]]]]]]]]]]]]], [_cor3|[]])
		      %% Line 891
		      case apply 'build_dfa'/2
			       (NFA, NF) of
			<{DFA0,DF0}> when 'true' ->
			    let <_cor5> =
				%% Line 892
				call 'erlang':'length'
				    (DFA0)
			    in  do  %% Line 892
				    apply 'verbose_print'/3
					(_cor0, [68|[70|[65|[32|[99|[111|[110|[116|[97|[105|[110|[115|[32|[126|[119|[32|[115|[116|[97|[116|[101|[115|[44|[32]]]]]]]]]]]]]]]]]]]]]]]], [_cor5|[]])
				    %% Line 893
				    case apply 'minimise_dfa'/2
					     (DFA0, DF0) of
				      <{DFA,DF}> when 'true' ->
					  let <_cor7> =
					      %% Line 894
					      call 'erlang':'length'
						  (DFA)
					  in  do  %% Line 894
						  apply 'verbose_print'/3
						      (_cor0, [109|[105|[110|[105|[109|[105|[115|[101|[100|[32|[116|[111|[32|[126|[119|[32|[115|[116|[97|[116|[101|[115|[46|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]], [_cor7|[]])
						  %% Line 898
						  {DFA,DF}
				      ( <_cor6> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_cor6})
					-| ['compiler_generated'] )
				    end
			( <_cor4> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor4})
			  -| ['compiler_generated'] )
		      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'build_combined_nfa'/1 =
    %% Line 909
    fun (_cor0) ->
	%% Line 910
	case apply 'build_nfa_list'/4
		 (_cor0, [], [], 1) of
	  <{NFA0,Firsts,Free}> when 'true' ->
	      let <_cor2> =
		  %% Line 911
		  apply 'epsilon_trans'/1
		      (Firsts)
	      in  let <F> =
		      %% Line 911
		      {'nfa_state',Free,_cor2,'noaccept'}
		  in  let <_cor4> =
			  %% Line 912
			  call 'lists':'keysort'
			      (2, [F|NFA0])
		      in  let <_cor5> =
			      %% Line 912
			      call 'erlang':'list_to_tuple'
				  (_cor4)
			  in  %% Line 912
			      {_cor5,Free}
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'build_nfa_list'/4 =
    %% Line 914
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[{RE,Action}|REAs],NFA0,Firsts,Free0> when 'true' ->
	      %% Line 915
	      case apply 'build_nfa'/3
		       (RE, Free0, Action) of
		<{NFA1,Free1,First}> when 'true' ->
		    let <_cor5> =
			%% Line 916
			call 'erlang':'++'
			    (NFA1, NFA0)
		    in  %% Line 916
			apply 'build_nfa_list'/4
			    (REAs, _cor5, [First|Firsts], Free1)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 917
	  <[],NFA,Firsts,Free> when 'true' ->
	      let <_cor6> =
		  %% Line 918
		  call 'lists':'reverse'
		      (Firsts)
	      in  %% Line 918
		  {NFA,_cor6,Free}
	  ( <_cor10,_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8,_cor7})
		  -| [{'function_name',{'build_nfa_list',4}}] )
	    -| ['compiler_generated'] )
	end
'epsilon_trans'/1 =
    %% Line 920
    fun (_cor0) ->
	( letrec
	      'lc$^0'/1 =
		  fun (_cor3) ->
		      case _cor3 of
			<[F|_cor2]> when 'true' ->
			    let <_cor4> =
				apply 'lc$^0'/1
				    (_cor2)
			    in  ( [{'epsilon',F}|_cor4]
				  -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_cor3> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor3})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  apply 'lc$^0'/1
		  (_cor0)
	  -| ['list_comprehension'] )
'build_nfa'/3 =
    %% Line 929
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 930
	    call 'erlang':'+'
		(_cor1, 1)
	in  %% Line 930
	    case apply 'build_nfa'/4
		     (_cor2, _cor3, _cor1, []) of
	      <{NFA,N1,E}> when 'true' ->
		  %% Line 931
		  {[{'nfa_state',E,[],{'accept',_cor0}}|NFA],N1,_cor1}
	      ( <_cor4> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor4})
		-| ['compiler_generated'] )
	    end
'build_nfa'/4 =
    %% Line 941
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{'alt',REs},N,F,NFA> when 'true' ->
	      %% Line 942
	      apply 'build_nfa_alt'/4
		  (REs, N, F, NFA)
	  %% Line 943
	  <{'seq',REs},N,F,NFA> when 'true' ->
	      %% Line 944
	      apply 'build_nfa_seq'/4
		  (REs, N, F, NFA)
	  %% Line 945
	  <{'kclosure',RE},N0,F,NFA0> when 'true' ->
	      let <_cor4> =
		  %% Line 946
		  call 'erlang':'+'
		      (N0, 1)
	      in  %% Line 946
		  case apply 'build_nfa'/4
			   (RE, _cor4, N0, NFA0) of
		    <{NFA1,N1,E1}> when 'true' ->
			let <_cor7> =
			    %% Line 950
			    call 'erlang':'+'
				(N1, 1)
			in  %% Line 948
			    {[{'nfa_state',F,[{'epsilon',N0}|[{'epsilon',N1}|[]]],'noaccept'}|%% Line 949
											      [{'nfa_state',E1,[{'epsilon',N0}|[{'epsilon',N1}|[]]],'noaccept'}|NFA1]],_cor7,N1}
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor5})
		      -| ['compiler_generated'] )
		  end
	  %% Line 951
	  <{'pclosure',RE},N0,F,NFA0> when 'true' ->
	      let <_cor8> =
		  %% Line 952
		  call 'erlang':'+'
		      (N0, 1)
	      in  %% Line 952
		  case apply 'build_nfa'/4
			   (RE, _cor8, N0, NFA0) of
		    <{NFA1,N1,E1}> when 'true' ->
			let <_cor11> =
			    %% Line 956
			    call 'erlang':'+'
				(N1, 1)
			in  %% Line 954
			    {[{'nfa_state',F,[{'epsilon',N0}|[]],'noaccept'}|%% Line 955
									     [{'nfa_state',E1,[{'epsilon',N0}|[{'epsilon',N1}|[]]],'noaccept'}|NFA1]],_cor11,N1}
		    ( <_cor9> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor9})
		      -| ['compiler_generated'] )
		  end
	  %% Line 957
	  <{'optional',RE},N0,F,NFA0> when 'true' ->
	      let <_cor12> =
		  %% Line 958
		  call 'erlang':'+'
		      (N0, 1)
	      in  %% Line 958
		  case apply 'build_nfa'/4
			   (RE, _cor12, N0, NFA0) of
		    <{NFA1,N1,E1}> when 'true' ->
			let <_cor15> =
			    %% Line 962
			    call 'erlang':'+'
				(N1, 1)
			in  %% Line 960
			    {[{'nfa_state',F,[{'epsilon',N0}|[{'epsilon',N1}|[]]],'noaccept'}|%% Line 961
											      [{'nfa_state',E1,[{'epsilon',N1}|[]],'noaccept'}|NFA1]],_cor15,N1}
		    ( <_cor13> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor13})
		      -| ['compiler_generated'] )
		  end
	  %% Line 963
	  <{'char_class',Cc},N,F,NFA> when 'true' ->
	      let <_cor17> =
		  %% Line 964
		  apply 'pack_cc'/1
		      (Cc)
	      in  let <_cor16> =
		      %% Line 964
		      call 'erlang':'+'
			  (N, 1)
		  in  %% Line 964
		      {[{'nfa_state',F,[{_cor17,N}|[]],'noaccept'}|NFA],_cor16,N}
	  %% Line 965
	  <{'comp_class',Cc},N,F,NFA> when 'true' ->
	      let <_cor19> =
		  %% Line 966
		  apply 'comp_class'/1
		      (Cc)
	      in  let <_cor18> =
		      %% Line 966
		      call 'erlang':'+'
			  (N, 1)
		  in  %% Line 966
		      {[{'nfa_state',F,[{_cor19,N}|[]],'noaccept'}|NFA],_cor18,N}
	  %% Line 967
	  <{'lit',Cs},N,F,NFA> when 'true' ->
	      %% Line 968
	      apply 'build_nfa_lit'/4
		  (Cs, N, F, NFA)
	  %% Line 969
	  <'epsilon',N,F,NFA> when 'true' ->
	      let <_cor20> =
		  %% Line 970
		  call 'erlang':'+'
		      (N, 1)
	      in  %% Line 970
		  {[{'nfa_state',F,[{'epsilon',N}|[]],'noaccept'}|NFA],_cor20,N}
	  ( <_cor24,_cor23,_cor22,_cor21> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor24,_cor23,_cor22,_cor21})
		  -| [{'function_name',{'build_nfa',4}}] )
	    -| ['compiler_generated'] )
	end
'build_nfa_lit'/4 =
    %% Line 975
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor9> =
	    %% Line 976
	    ( fun (_cor6,_cor5) ->
		  case <_cor6,_cor5> of
		    <C,{NFA,N,F}> when 'true' ->
			let <_cor4> =
			    %% Line 977
			    call 'erlang':'+'
				(N, 1)
			in  %% Line 977
			    {[{'nfa_state',F,[{[{C,C}|[]],N}|[]],'noaccept'}|NFA],_cor4,N}
		    ( <_cor8,_cor7> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor8,_cor7})
			    -| [{'function_name',{'-build_nfa_lit/4-fun-0-',2}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-build_nfa_lit/4-fun-0-'}}] )
	in  %% Line 976
	    call 'lists':'foldl'
		(_cor9, %% Line 978
			{_cor0,_cor2,_cor1}, _cor3)
'build_nfa_seq'/4 =
    %% Line 988
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor8> =
	    %% Line 989
	    ( fun (_cor5,_cor4) ->
		  case <_cor5,_cor4> of
		    <RE,{NFA,N,F}> when 'true' ->
			apply 'build_nfa'/4
			    (RE, N, F, NFA)
		    ( <_cor7,_cor6> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor7,_cor6})
			    -| [{'function_name',{'-build_nfa_seq/4-fun-0-',2}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-build_nfa_seq/4-fun-0-'}}] )
	in  %% Line 989
	    call 'lists':'foldl'
		(_cor8, %% Line 990
			{_cor0,_cor2,_cor1}, _cor3)
'build_nfa_alt'/4 =
    %% Line 1002
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[RE|[]],N,F,NFA> when 'true' ->
	      apply 'build_nfa'/4
		  (RE, N, F, NFA)
	  %% Line 1003
	  <[RE|REs],N0,F,NFA0> when 'true' ->
	      let <_cor4> =
		  %% Line 1004
		  call 'erlang':'+'
		      (N0, 1)
	      in  %% Line 1004
		  case apply 'build_nfa'/4
			   (RE, _cor4, N0, NFA0) of
		    <{NFA1,N1,E1}> when 'true' ->
			let <_cor6> =
			    %% Line 1005
			    call 'erlang':'+'
				(N1, 1)
			in  %% Line 1005
			    case apply 'build_nfa_alt'/4
				     (REs, _cor6, N1, NFA1) of
			      <{NFA2,N2,E2}> when 'true' ->
				  let <_cor9> =
				      %% Line 1010
				      call 'erlang':'+'
					  (N2, 1)
				  in  %% Line 1007
				      {[{'nfa_state',F,[{'epsilon',N0}|[{'epsilon',N1}|[]]],'noaccept'}|%% Line 1008
													[{'nfa_state',E1,[{'epsilon',N2}|[]],'noaccept'}|%% Line 1009
																			 [{'nfa_state',E2,[{'epsilon',N2}|[]],'noaccept'}|NFA2]]],_cor9,N2}
			      ( <_cor7> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor7})
				-| ['compiler_generated'] )
			    end
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor5})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor13,_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11,_cor10})
		  -| [{'function_name',{'build_nfa_alt',4}}] )
	    -| ['compiler_generated'] )
	end
'pack_cc'/1 =
    %% Line 1032
    fun (_cor0) ->
	let <_cor6> =
	    %% Line 1033
	    ( fun (_cor3,_cor2) ->
		  case <_cor3,_cor2> of
		    <{'range',Cf,Cl},Set> when 'true' ->
			call 'ordsets':'add_element'
			    ({Cf,Cl}, Set)
		    %% Line 1034
		    <C,Set> when 'true' ->
			call 'ordsets':'add_element'
			    ({C,C}, Set)
		  end
	      -| [{'id',{0,0,'-pack_cc/1-fun-0-'}}] )
	in  let <_cor1> =
		%% Line 1035
		call 'ordsets':'new'
		    ()
	    in  let <Crs> =
		    %% Line 1033
		    call 'lists':'foldl'
			(_cor6, _cor1, _cor0)
		in  %% Line 1036
		    apply 'pack_crs'/1
			(Crs)
'pack_crs'/1 =
    %% Line 1038
    fun (_cor0) ->
	case _cor0 of
	  <[Cr = {C1,C2}|[{C3,C4}|Crs]]>
	      when let <_cor1> =
		    call 'erlang':'=<'
			(C1, C3)
		in  let <_cor2> =
			call 'erlang':'>='
			    (C2, C4)
		    in  call 'erlang':'and'
			    (_cor1, _cor2) ->
	      %% Line 1041
	      apply 'pack_crs'/1
		  ([Cr|Crs])
	  %% Line 1042
	  <[{C1,C2}|[{C3,C4}|Crs]]>
	      when let <_cor3> =
		    call 'erlang':'>='
			(C2, C3)
		in  let <_cor4> =
			call 'erlang':'<'
			    (C2, C4)
		    in  call 'erlang':'and'
			    (_cor3, _cor4) ->
	      %% Line 1045
	      apply 'pack_crs'/1
		  ([{C1,C4}|Crs])
	  %% Line 1046
	  <[{C1,C2}|[{C3,C4}|Crs]]>
	      when try
		    let <_cor5> =
			call 'erlang':'+'
			    (C2, 1)
		    in  call 'erlang':'=:='
			    (_cor5, C3)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 1049
	      apply 'pack_crs'/1
		  ([{C1,C4}|Crs])
	  %% Line 1050
	  <[Cr|Crs]> when 'true' ->
	      let <_cor6> =
		  apply 'pack_crs'/1
		      (Crs)
	      in  [Cr|_cor6]
	  %% Line 1051
	  <[]> when 'true' ->
	      []
	  ( <_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7})
		  -| [{'function_name',{'pack_crs',1}}] )
	    -| ['compiler_generated'] )
	end
'comp_class'/1 =
    %% Line 1053
    fun (_cor0) ->
	let <Crs> =
	    %% Line 1054
	    apply 'pack_cc'/1
		(_cor0)
	in  %% Line 1055
	    apply 'comp_crs'/2
		(Crs, 0)
'comp_crs'/2 =
    %% Line 1059
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{0,C2}|Crs],0> when 'true' ->
	      let <_cor2> =
		  %% Line 1060
		  call 'erlang':'+'
		      (C2, 1)
	      in  %% Line 1060
		  apply 'comp_crs'/2
		      (Crs, _cor2)
	  %% Line 1061
	  <[{C1,C2}|Crs],Last> when 'true' ->
	      let <_cor3> =
		  %% Line 1062
		  call 'erlang':'-'
		      (C1, 1)
	      in  let <_cor4> =
		      %% Line 1062
		      call 'erlang':'+'
			  (C2, 1)
		  in  let <_cor5> =
			  %% Line 1062
			  apply 'comp_crs'/2
			      (Crs, _cor4)
		      in  %% Line 1062
			  [{Last,_cor3}|_cor5]
	  %% Line 1063
	  <[],Last> when 'true' ->
	      [{Last,'maxchar'}|[]]
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6})
		  -| [{'function_name',{'comp_crs',2}}] )
	    -| ['compiler_generated'] )
	end
'build_dfa'/2 =
    %% Line 1073
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 1074
	    apply 'eclosure'/2
		([_cor0|[]], _cor1)
	in  let <D> =
		%% Line 1074
		{'dfa_state',0,_cor2,[],'noaccept'}
	    in  let <_cor4> =
		    %% Line 1075
		    apply 'build_dfa'/4
			([D|[]], 1, [], _cor1)
		in  %% Line 1075
		    {_cor4,0}
'build_dfa'/4 =
    %% Line 1083
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[U|Us0],N0,Ms,NFA> when 'true' ->
	      %% Line 1084
	      ( case U of
		  ( <( {'dfa_state',_cor19,_rec34,_cor20,_cor21}
		       -| ['compiler_generated'] )> when 'true' ->
			case apply 'build_dfa'/6
				 (_rec34, Us0, N0, [], [U|Ms], NFA) of
			  <{Ts,Us1,N1}> when 'true' ->
			      let <_rec35> =
				  %% Line 1085
				  apply 'accept'/2
				      (_rec34, NFA)
			      in  let <_cor11> =
				      %% Line 1085
				      call 'erlang':'setelement'
					  (5, U, _rec35)
				  in  let <_cor13> =
					  %% Line 1085
					  call 'erlang':'setelement'
					      (4, _cor11, Ts)
				      in  %% Line 1086
					  apply 'build_dfa'/4
					      (Us1, N1, [_cor13|Ms], NFA)
			  ( <_cor6> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor6})
			    -| ['compiler_generated'] )
			end
		    -| ['compiler_generated'] )
		  ( <_cor22> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','dfa_state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1087
	  <[],_cor32,Ms,_cor33> when 'true' ->
	      Ms
	  ( <_cor18,_cor17,_cor16,_cor15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor18,_cor17,_cor16,_cor15})
		  -| [{'function_name',{'build_dfa',4}}] )
	    -| ['compiler_generated'] )
	end
'build_dfa'/6 =
    %% Line 1099
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor18> =
	    %% Line 1101
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor14) ->
			  case _cor14 of
			    <[S|_cor7]> when 'true' ->
				( letrec
				      'lc$^1'/1 =
					  fun (_cor15) ->
					      case _cor15 of
						<[%% Line 1102
						  {Crs,_X_St}|_cor9]>
						    when %% Line 1103
						      call 'erlang':'=/='
							  (Crs,
							   'epsilon') ->
						    ( letrec
							  'lc$^2'/1 =
							      fun (_cor16) ->
								  case _cor16 of
								    <[%% Line 1104
								      Cr|_cor13]> when 'true' ->
									let <_cor17> =
									    %% Line 1104
									    apply 'lc$^2'/1
										(_cor13)
									in  ( [Cr|_cor17]
									      -| ['compiler_generated'] )
								    <[]> when 'true' ->
									%% Line 1102
									apply 'lc$^1'/1
									    (_cor9)
								    ( <_cor16> when 'true' ->
									  ( primop 'match_fail'
										({'function_clause',_cor16})
									    -| [{'function_name',{'lc$^2',1}}] )
								      -| ['compiler_generated'] )
								  end
						      in  apply 'lc$^2'/1
							      (%% Line 1104
							       Crs)
						      -| ['list_comprehension'] )
						( <[_cor8|_cor9]> when 'true' ->
						      %% Line 1102
						      apply 'lc$^1'/1
							  (_cor9)
						  -| ['compiler_generated'] )
						<[]> when 'true' ->
						    apply 'lc$^0'/1
							(_cor7)
						( <_cor15> when 'true' ->
						      ( primop 'match_fail'
							    ({'function_clause',_cor15})
							-| [{'function_name',{'lc$^1',1}}] )
						  -| ['compiler_generated'] )
					      end
				  in  %% Line 1102
				      ( case call 'erlang':'element'
						 (S, _cor0) of
					  ( <( {'nfa_state',_cor28,_rec38,_cor29}
					       -| ['compiler_generated'] )> when 'true' ->
						apply 'lc$^1'/1
						    (_rec38)
					    -| ['compiler_generated'] )
					  ( <_cor30> when 'true' ->
						( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'error'
										       -| ['compiler_generated'] )
						      (( {'badrecord','nfa_state'}
							 -| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					end
					-| ['compiler_generated'] )
				  -| ['list_comprehension'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor14> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor14})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (_cor5)
	      -| ['list_comprehension'] )
	in  let <Crs1> =
		%% Line 1105
		call 'lists':'usort'
		    (_cor18)
	    in  let <Test> =
		    %% Line 1107
		    apply 'disjoint_crs'/1
			(Crs1)
		in  %% Line 1109
		    apply 'build_dfa'/7
			(Test, _cor5, _cor4, _cor3, _cor2, _cor1, _cor0)
'disjoint_crs'/1 =
    %% Line 1116
    fun (_cor0) ->
	case _cor0 of
	  <[Cr1 = {_X_C1,C2}|[Cr2 = {C3,_X_C4}|Crs]]>
	      when call 'erlang':'<'
		    (C2,
		     C3) ->
	      let <_cor1> =
		  %% Line 1119
		  apply 'disjoint_crs'/1
		      ([Cr2|Crs])
	      in  %% Line 1119
		  [Cr1|_cor1]
	  %% Line 1120
	  <[{C1,C2}|[{C3,C4}|Crs]]>
	      when call 'erlang':'=:='
		    (C1,
		     C3) ->
	      let <_cor2> =
		  %% Line 1123
		  call 'erlang':'+'
		      (C2, 1)
	      in  let <_cor3> =
		      %% Line 1123
		      call 'ordsets':'add_element'
			  ({_cor2,C4}, Crs)
		  in  let <_cor4> =
			  %% Line 1123
			  apply 'disjoint_crs'/1
			      (_cor3)
		      in  %% Line 1123
			  [{C1,C2}|_cor4]
	  %% Line 1124
	  <[{C1,C2}|[{C3,C4}|Crs]]>
	      when try
		    let <_cor5> =
			call 'erlang':'<'
			    (C1, C3)
		    in  let <_cor6> =
			    call 'erlang':'>='
				(C2, C3)
			in  let <_cor7> =
				call 'erlang':'<'
				    (C2, C4)
			    in  let <_cor8> =
				    call 'erlang':'and'
					(_cor6, _cor7)
				in  call 'erlang':'and'
					(_cor5, _cor8)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor9> =
		  %% Line 1127
		  call 'erlang':'-'
		      (C3, 1)
	      in  let <_cor10> =
		      %% Line 1127
		      call 'erlang':'+'
			  (C2, 1)
		  in  let <_cor11> =
			  %% Line 1127
			  call 'ordsets':'union'
			      ([{C3,C2}|[{_cor10,C4}|[]]], Crs)
		      in  let <_cor12> =
			      %% Line 1127
			      apply 'disjoint_crs'/1
				  (_cor11)
			  in  %% Line 1127
			      [{C1,_cor9}|_cor12]
	  %% Line 1128
	  <[{C1,C2}|[{C3,C4}|Crs]]>
	      when let <_cor13> =
		    call 'erlang':'<'
			(C1, C3)
		in  let <_cor14> =
			call 'erlang':'=:='
			    (C2, C4)
		    in  call 'erlang':'and'
			    (_cor13, _cor14) ->
	      let <_cor15> =
		  %% Line 1131
		  call 'erlang':'-'
		      (C3, 1)
	      in  let <_cor16> =
		      %% Line 1131
		      call 'ordsets':'add_element'
			  ({C3,C4}, Crs)
		  in  let <_cor17> =
			  %% Line 1131
			  apply 'disjoint_crs'/1
			      (_cor16)
		      in  %% Line 1131
			  [{C1,_cor15}|_cor17]
	  %% Line 1132
	  <[{C1,C2}|[{C3,C4}|Crs]]>
	      when let <_cor18> =
		    call 'erlang':'<'
			(C1, C3)
		in  let <_cor19> =
			call 'erlang':'>'
			    (C2, C4)
		    in  call 'erlang':'and'
			    (_cor18, _cor19) ->
	      let <_cor20> =
		  %% Line 1135
		  call 'erlang':'-'
		      (C3, 1)
	      in  let <_cor21> =
		      %% Line 1135
		      call 'erlang':'+'
			  (C4, 1)
		  in  let <_cor22> =
			  %% Line 1135
			  call 'ordsets':'union'
			      ([{C3,C4}|[{_cor21,C2}|[]]], Crs)
		      in  let <_cor23> =
			      %% Line 1135
			      apply 'disjoint_crs'/1
				  (_cor22)
			  in  %% Line 1135
			      [{C1,_cor20}|_cor23]
	  %% Line 1136
	  <[Cr|Crs]> when 'true' ->
	      let <_cor24> =
		  apply 'disjoint_crs'/1
		      (Crs)
	      in  [Cr|_cor24]
	  %% Line 1137
	  <[]> when 'true' ->
	      []
	  ( <_cor25> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor25})
		  -| [{'function_name',{'disjoint_crs',1}}] )
	    -| ['compiler_generated'] )
	end
'build_dfa'/7 =
    %% Line 1139
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[Cr|Crs],Set,Us,N,Ts,Ms,NFA> when 'true' ->
	      let <_cor7> =
		  %% Line 1140
		  apply 'move'/3
		      (Set, Cr, NFA)
	      in  %% Line 1140
		  case apply 'eclosure'/2
			   (_cor7, NFA) of
		    %% Line 1141
		    <S>
			when call 'erlang':'=/='
			      (S,
			       []) ->
			%% Line 1142
			case apply 'dfa_state_exist'/3
				 (S, Us, Ms) of
			  %% Line 1143
			  <{'yes',T}> when 'true' ->
			      let <_cor8> =
				  %% Line 1144
				  call 'orddict':'store'
				      (Cr, T, Ts)
			      in  %% Line 1144
				  apply 'build_dfa'/7
				      (Crs, Set, Us, N, _cor8, Ms, NFA)
			  %% Line 1145
			  <'no'> when 'true' ->
			      let <U> =
				  %% Line 1146
				  {'dfa_state',N,S,[],'noaccept'}
			      in  let <_cor11> =
				      %% Line 1147
				      call 'erlang':'+'
					  (N, 1)
				  in  let <_cor10> =
					  %% Line 1147
					  call 'orddict':'store'
					      (Cr, N, Ts)
				      in  %% Line 1147
					  apply 'build_dfa'/7
					      (Crs, Set, [U|Us], _cor11, _cor10, Ms, NFA)
			  ( <_cor12> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor12})
			    -| ['compiler_generated'] )
			end
		    %% Line 1149
		    <[]> when 'true' ->
			%% Line 1150
			apply 'build_dfa'/7
			    (Crs, Set, Us, N, Ts, Ms, NFA)
		    ( <_cor13> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor13})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1152
	  <[],_cor21,Us,N,Ts,_cor22,_cor23> when 'true' ->
	      %% Line 1153
	      {Ts,Us,N}
	  ( <_cor20,_cor19,_cor18,_cor17,_cor16,_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor20,_cor19,_cor18,_cor17,_cor16,_cor15,_cor14})
		  -| [{'function_name',{'build_dfa',7}}] )
	    -| ['compiler_generated'] )
	end
'dfa_state_exist'/3 =
    %% Line 1157
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1158
	case call 'lists':'keyfind'
		 (_cor2, 3, _cor1) of
	  %% Line 1159
	  <{'dfa_state',T,_cor8,_cor9,_cor10}> when 'true' ->
	      {'yes',T}
	  %% Line 1160
	  <'false'> when 'true' ->
	      %% Line 1161
	      case call 'lists':'keyfind'
		       (_cor2, 3, _cor0) of
		%% Line 1162
		<{'dfa_state',T,_cor11,_cor12,_cor13}> when 'true' ->
		    {'yes',T}
		%% Line 1163
		<'false'> when 'true' ->
		    'no'
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor4})
	    -| ['compiler_generated'] )
	end
'eclosure'/2 =
    %% Line 1172
    fun (_cor1,_cor0) ->
	apply 'eclosure'/3
	    (_cor1, _cor0, [])
'eclosure'/3 =
    %% Line 1174
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[St|Sts],NFA,Ec> when 'true' ->
	      %% Line 1175
	      case call 'erlang':'element'
		       (St, NFA) of
		<{'nfa_state',_cor15,Es,_cor16}> when 'true' ->
		    let <_cor11> =
			%% Line 1176
			( letrec
			      'lc$^0'/1 =
				  fun (_cor8) ->
				      case _cor8 of
					<[{'epsilon',N}|_cor6]> when 'true' ->
					    %% Line 1177
					    ( case call 'ordsets':'is_element'
						       (N, Ec) of
						<'false'> when 'true' ->
						    let <_cor9> =
							apply 'lc$^0'/1
							    (_cor6)
						    in  ( [N|_cor9]
							  -| ['compiler_generated'] )
						( <'true'> when 'true' ->
						      apply 'lc$^0'/1
							  (_cor6)
						  -| ['compiler_generated'] )
						( <_cor_variable> when 'true' ->
						      call 'erlang':'error'
							  ('badarg')
						  -| ['compiler_generated'] )
					      end
					      -| ['list_comprehension'] )
					( <[_cor5|_cor6]> when 'true' ->
					      apply 'lc$^0'/1
						  (_cor6)
					  -| ['compiler_generated'] )
					<[]> when 'true' ->
					    %% Line 1177
					    Sts
					( <_cor8> when 'true' ->
					      ( primop 'match_fail'
						    ({'function_clause',_cor8})
						-| [{'function_name',{'lc$^0',1}}] )
					  -| ['compiler_generated'] )
				      end
			  in  apply 'lc$^0'/1
				  (Es)
			  -| ['list_comprehension'] )
		    in  let <_cor4> =
			    %% Line 1178
			    call 'ordsets':'add_element'
				(St, Ec)
			in  %% Line 1176
			    apply 'eclosure'/3
				(_cor11, %% Line 1178
					 NFA, _cor4)
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1179
	  <[],_cor17,Ec> when 'true' ->
	      Ec
	  ( <_cor14,_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12})
		  -| [{'function_name',{'eclosure',3}}] )
	    -| ['compiler_generated'] )
	end
'move'/3 =
    %% Line 1181
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1183
	( letrec
	      'lc$^0'/1 =
		  fun (_cor9) ->
		      case _cor9 of
			<[N|_cor4]> when 'true' ->
			    ( letrec
				  'lc$^1'/1 =
				      fun (_cor10) ->
					  case _cor10 of
					    <[%% Line 1184
					      {Crs,St}|_cor6]>
						when %% Line 1185
						  call 'erlang':'=/='
						      (Crs,
						       'epsilon') ->
						%% Line 1186
						( case apply 'in_crs'/2
							   (_cor1, Crs) of
						    <'true'> when 'true' ->
							let <_cor11> =
							    apply 'lc$^1'/1
								(_cor6)
							in  ( [St|_cor11]
							      -| ['compiler_generated'] )
						    ( <'false'> when 'true' ->
							  apply 'lc$^1'/1
							      (_cor6)
						      -| ['compiler_generated'] )
						    ( <_cor12> when 'true' ->
							  primop 'match_fail'
							      ({'case_clause',_cor12})
						      -| ['compiler_generated'] )
						  end
						  -| ['list_comprehension'] )
					    ( <[_cor5|_cor6]> when 'true' ->
						  %% Line 1184
						  apply 'lc$^1'/1
						      (_cor6)
					      -| ['compiler_generated'] )
					    <[]> when 'true' ->
						apply 'lc$^0'/1
						    (_cor4)
					    ( <_cor10> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor10})
						    -| [{'function_name',{'lc$^1',1}}] )
					      -| ['compiler_generated'] )
					  end
			      in  %% Line 1184
				  ( case call 'erlang':'element'
					     (N, _cor0) of
				      ( <( {'nfa_state',_cor16,_rec39,_cor17}
					   -| ['compiler_generated'] )> when 'true' ->
					    apply 'lc$^1'/1
						(_rec39)
					-| ['compiler_generated'] )
				      ( <_cor18> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','nfa_state'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
			      -| ['list_comprehension'] )
			<[]> when 'true' ->
			    []
			( <_cor9> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor9})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  apply 'lc$^0'/1
		  (_cor2)
	  -| ['list_comprehension'] )
'in_crs'/2 =
    %% Line 1188
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{C1,C2},[{C3,C4}|_X_Crs]>
	      when let <_cor2> =
		    call 'erlang':'>='
			(C1, C3)
		in  let <_cor3> =
			call 'erlang':'=<'
			    (C2, C4)
		    in  call 'erlang':'and'
			    (_cor2, _cor3) ->
	      'true'
	  %% Line 1189
	  <Cr,[_cor6|_X_Crs]>
	      when call 'erlang':'=:='
		    (_cor6,
		     Cr) ->
	      'true'
	  %% Line 1190
	  <Cr,[_cor7|Crs]> when 'true' ->
	      apply 'in_crs'/2
		  (Cr, Crs)
	  %% Line 1191
	  <_X_Cr,[]> when 'true' ->
	      'false'
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'in_crs',2}}] )
	    -| ['compiler_generated'] )
	end
'accept'/2 =
    %% Line 1196
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[St|Sts],NFA> when 'true' ->
	      %% Line 1197
	      case call 'erlang':'element'
		       (St, NFA) of
		%% Line 1198
		<{'nfa_state',_cor5,_cor6,{'accept',A}}> when 'true' ->
		    {'accept',A}
		%% Line 1199
		<{'nfa_state',_cor7,_cor8,'noaccept'}> when 'true' ->
		    apply 'accept'/2
			(Sts, NFA)
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1201
	  <[],_cor9> when 'true' ->
	      'noaccept'
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'accept',2}}] )
	    -| ['compiler_generated'] )
	end
'minimise_dfa'/2 =
    %% Line 1212
    fun (_cor1,_cor0) ->
	%% Line 1213
	case apply 'min_dfa'/1
		 (_cor1) of
	  %% Line 1214
	  <{DFA1,[]}> when 'true' ->
	      %% Line 1215
	      case apply 'pack_dfa'/1
		       (DFA1) of
		<{DFA2,Rs}> when 'true' ->
		    let <_cor4> =
			%% Line 1216
			apply 'min_update'/2
			    (DFA2, Rs)
		    in  let <_cor3> =
			    %% Line 1216
			    apply 'min_use'/2
				(_cor0, Rs)
			in  %% Line 1216
			    {_cor4,_cor3}
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1217
	  <{DFA1,Rs}> when 'true' ->
	      let <_cor6> =
		  %% Line 1218
		  apply 'min_update'/2
		      (DFA1, Rs)
	      in  let <_cor5> =
		      %% Line 1218
		      apply 'min_use'/2
			  (_cor0, Rs)
		  in  %% Line 1218
		      apply 'minimise_dfa'/2
			  (_cor6, _cor5)
	  ( <_cor7> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor7})
	    -| ['compiler_generated'] )
	end
'min_dfa'/1 =
    %% Line 1221
    fun (_cor0) ->
	apply 'min_dfa'/3
	    (_cor0, [], [])
'min_dfa'/3 =
    %% Line 1223
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[D|DFA0],Rs0,MDFA> when 'true' ->
	      %% Line 1224
	      ( case D of
		  ( <( {'dfa_state',_cor13,_cor14,_rec40,_cor15}
		       -| ['compiler_generated'] )> when 'true' ->
			case apply 'min_delete'/6
				 (DFA0, _rec40, _cor15, _cor13, %% Line 1225
								Rs0, %% Line 1225
								     []) of
			  <{DFA1,Rs1}> when 'true' ->
			      %% Line 1226
			      apply 'min_dfa'/3
				  (DFA1, Rs1, [D|MDFA])
			  ( <_cor9> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor9})
			    -| ['compiler_generated'] )
			end
		    -| ['compiler_generated'] )
		  ( <_cor16> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','dfa_state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1227
	  <[],Rs,MDFA> when 'true' ->
	      {MDFA,Rs}
	  ( <_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10})
		  -| [{'function_name',{'min_dfa',3}}] )
	    -| ['compiler_generated'] )
	end
'min_delete'/6 =
    %% Line 1233
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[{'dfa_state',N,_cor12,T,A}|DFA],_cor13,_cor14,NewN,Rs,MDFA>
	      when let <_cor15> =
		    call 'erlang':'=:='
			(_cor13, T)
		in  let <_cor16> =
			call 'erlang':'=:='
			    (_cor14, A)
		    in  call 'erlang':'and'
			    (_cor15, _cor16) ->
	      %% Line 1234
	      apply 'min_delete'/6
		  (DFA, T, A, NewN, [{N,NewN}|Rs], MDFA)
	  %% Line 1235
	  <[D|DFA],T,A,NewN,Rs,MDFA> when 'true' ->
	      %% Line 1236
	      apply 'min_delete'/6
		  (DFA, T, A, NewN, Rs, [D|MDFA])
	  %% Line 1237
	  <[],_cor17,_cor18,_cor19,Rs,MDFA> when 'true' ->
	      {MDFA,Rs}
	  ( <_cor11,_cor10,_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'min_delete',6}}] )
	    -| ['compiler_generated'] )
	end
'min_update'/2 =
    %% Line 1239
    fun (_cor1,_cor0) ->
	%% Line 1240
	( letrec
	      'lc$^0'/1 =
		  fun (_cor4) ->
		      case _cor4 of
			<[D|_cor3]> when 'true' ->
			    ( case D of
				( <( {'dfa_state',_cor14,_cor15,_rec45,_cor16}
				     -| ['compiler_generated'] )> when 'true' ->
				      let <_rec43> =
					  apply 'min_update_trans'/2
					      (_rec45, _cor0)
				      in  let <_cor10> =
					      call 'erlang':'setelement'
						  (4, D, _rec43)
					  in  let <_cor11> =
						  apply 'lc$^0'/1
						      (_cor3)
					      in  ( [_cor10|_cor11]
						    -| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				( <_cor17> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {'badrecord','dfa_state'}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_cor4> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor4})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  apply 'lc$^0'/1
		  (_cor1)
	  -| ['list_comprehension'] )
'min_update_trans'/2 =
    %% Line 1242
    fun (_cor1,_cor0) ->
	%% Line 1243
	( letrec
	      'lc$^0'/1 =
		  fun (_cor4) ->
		      case _cor4 of
			<[{C,S}|_cor3]> when 'true' ->
			    let <_cor5> =
				apply 'min_use'/2
				    (S, _cor0)
			    in  let <_cor6> =
				    apply 'lc$^0'/1
					(_cor3)
				in  ( [{C,_cor5}|_cor6]
				      -| ['compiler_generated'] )
			( <[_cor2|_cor3]> when 'true' ->
			      apply 'lc$^0'/1
				  (_cor3)
			  -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_cor4> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor4})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  apply 'lc$^0'/1
		  (_cor1)
	  -| ['list_comprehension'] )
'min_use'/2 =
    %% Line 1245
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Old,[{_cor4,New}|_cor5]>
	      when call 'erlang':'=:='
		    (_cor4,
		     Old) ->
	      New
	  %% Line 1246
	  <Old,[_cor6|Reds]> when 'true' ->
	      apply 'min_use'/2
		  (Old, Reds)
	  %% Line 1247
	  <Old,[]> when 'true' ->
	      Old
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'min_use',2}}] )
	    -| ['compiler_generated'] )
	end
'pack_dfa'/1 =
    %% Line 1249
    fun (_cor0) ->
	apply 'pack_dfa'/4
	    (_cor0, 0, [], [])
'pack_dfa'/4 =
    %% Line 1251
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[D|DFA],NewN,Rs,PDFA> when 'true' ->
	      let <_cor9> =
		  %% Line 1252
		  call 'erlang':'+'
		      (NewN, 1)
	      in  %% Line 1253
		  ( case D of
		      ( <( {'dfa_state',_rec46,_cor14,_cor15,_cor16}
			   -| ['compiler_generated'] )> when 'true' ->
			    let <_cor6> =
				call 'erlang':'setelement'
				    (2, D, NewN)
			    in  apply 'pack_dfa'/4
				    (DFA, _cor9, [{_rec46,NewN}|Rs], [_cor6|PDFA])
			-| ['compiler_generated'] )
		      ( <_cor17> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','dfa_state'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  %% Line 1254
	  <[],_cor23,Rs,PDFA> when 'true' ->
	      {PDFA,Rs}
	  ( <_cor13,_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11,_cor10})
		  -| [{'function_name',{'pack_dfa',4}}] )
	    -| ['compiler_generated'] )
	end
'out_file'/5 =
    %% Line 1294
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1295
	( case _cor4 of
	    ( <( {'leex',_cor28,_rec48,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35}
		 -| ['compiler_generated'] )> when 'true' ->
		  do  apply 'verbose_print'/3
			  (_cor4, [87|[114|[105|[116|[105|[110|[103|[32|[102|[105|[108|[101|[32|[126|[116|[115|[44|[32]]]]]]]]]]]]]]]]]], [_rec48|[]])
		      %% Line 1296
		      case apply 'open_inc_file'/1
			       (_cor4) of
			%% Line 1297
			<{'ok',Ifile}> when 'true' ->
			    %% Line 1298
			    letrec
				'after$^1'/0 =
				    fun () ->
					let <_cor37> =
					    %% Line 1315
					    call 'file':'close'
						(Ifile)
					in  %% Line 1315
					    case _cor37 of
					      <'ok'> when 'true' ->
						  ( _cor37
						    -| ['compiler_generated'] )
					      ( <_cor17> when 'true' ->
						    primop 'match_fail'
							({'badmatch',_cor17})
						-| ['compiler_generated'] )
					    end
			    in  try
				    %% Line 1299
				    case call 'file':'open'
					     (_rec48, ['write']) of
				      %% Line 1300
				      <{'ok',Ofile}> when 'true' ->
					  do  %% Line 1301
					      apply 'set_encoding'/2
						  (_cor4, Ofile)
					      %% Line 1302
					      letrec
						  'after$^0'/0 =
						      fun () ->
							  let <_cor47> =
							      %% Line 1309
							      call 'file':'close'
								  (Ofile)
							  in  %% Line 1309
							      case _cor47 of
								<'ok'> when 'true' ->
								    ( _cor47
								      -| ['compiler_generated'] )
								( <_cor11> when 'true' ->
								      primop 'match_fail'
									  ({'badmatch',_cor11})
								  -| ['compiler_generated'] )
							      end
					      in  try
						      do  %% Line 1303
							  apply 'output_encoding_comment'/2
							      (Ofile, _cor4)
							  do  %% Line 1304
							      apply 'output_file_directive'/3
								  (Ofile, _cor29, 0)
							      do  %% Line 1305
								  apply 'out_file'/8
								      (Ifile, Ofile, _cor4, _cor3, _cor2, _cor1, _cor0, %% Line 1306
															1)
								  do  %% Line 1307
								      apply 'verbose_print'/3
									  (_cor4, [111|[107|[126|[110]]]], [])
								      _cor4
						  of <_cor12> ->
						      do  ( apply 'after$^0'/0
								()
							    -| ['compiler_generated'] )
							  _cor12
						  catch <_cor15,_cor14,_cor13> ->
						      do  ( apply 'after$^0'/0
								()
							    -| ['compiler_generated'] )
							  primop 'raise'
							      (_cor13, _cor14)
				      %% Line 1311
				      <{'error',Error}> when 'true' ->
					  do  %% Line 1312
					      apply 'verbose_print'/3
						  (_cor4, [101|[114|[114|[111|[114|[126|[110]]]]]]], [])
					      %% Line 1313
					      apply 'add_error'/2
						  ({'none','leex',{'file_error',Error}}, _cor4)
				      ( <_cor16> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_cor16})
					-| ['compiler_generated'] )
				    end
				of <_cor18> ->
				    do  ( apply 'after$^1'/0
					      ()
					  -| ['compiler_generated'] )
					_cor18
				catch <_cor21,_cor20,_cor19> ->
				    do  ( apply 'after$^1'/0
					      ()
					  -| ['compiler_generated'] )
					primop 'raise'
					    (_cor19, _cor20)
			%% Line 1317
			<{{'error',Error},Ifile}> when 'true' ->
			    %% Line 1318
			    apply 'add_error'/3
				(Ifile, {'none','leex',{'file_error',Error}}, _cor4)
			( <_cor22> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor22})
			  -| ['compiler_generated'] )
		      end
	      -| ['compiler_generated'] )
	    ( <_cor36> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','leex'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'open_inc_file'/1 =
    %% Line 1321
    fun (_cor0) ->
	%% Line 1322
	( case _cor0 of
	    ( <( {'leex',_cor7,_cor8,_rec51,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14}
		 -| ['compiler_generated'] )> when 'true' ->
		  %% Line 1323
		  case call 'file':'open'
			   (_rec51, ['read']) of
		    %% Line 1324
		    <{'ok',F}> when 'true' ->
			let <_X_> =
			    %% Line 1325
			    ( call 'epp':'set_encoding'
				  (F)
			      -| ['result_not_wanted'] )
			in  %% Line 1326
			    {'ok',F}
		    %% Line 1327
		    <Error> when 'true' ->
			{Error,_rec51}
		  end
	      -| ['compiler_generated'] )
	    ( <_cor15> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','leex'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'inc_file_name'/1 =
    %% Line 1330
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      let <_cor1> =
		  %% Line 1331
		  call 'code':'lib_dir'
		      ('parsetools')
	      in  let <Incdir> =
		      %% Line 1331
		      call 'filename':'join'
			  (_cor1, [105|[110|[99|[108|[117|[100|[101]]]]]]])
		  in  %% Line 1332
		      call 'filename':'join'
			  (Incdir, [108|[101|[101|[120|[105|[110|[99|[46|[104|[114|[108]]]]]]]]]]])
	  %% Line 1333
	  <Filename> when 'true' ->
	      %% Line 1334
	      Filename
	end
'out_file'/8 =
    %% Line 1341
    fun (_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1342
	case call 'io':'get_line'
		 (_cor7, 'leex') of
	  %% Line 1343
	  <'eof'> when 'true' ->
	      ( case _cor5 of
		  ( <( {'leex',_cor25,_cor26,_rec52,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32}
		       -| ['compiler_generated'] )> when 'true' ->
			apply 'output_file_directive'/3
			    (_cor6, _rec52, _cor0)
		    -| ['compiler_generated'] )
		  ( <_cor33> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','leex'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1344
	  <{'error',_cor34}> when 'true' ->
	      ( case _cor5 of
		  ( <( {'leex',_cor35,_cor36,_rec53,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42}
		       -| ['compiler_generated'] )> when 'true' ->
			apply 'add_error'/3
			    (_rec53, {_cor0,'leex','cannot_parse'}, _cor5)
		    -| ['compiler_generated'] )
		  ( <_cor43> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','leex'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1345
	  <Line> when 'true' ->
	      do  %% Line 1346
		  case call 'string':'substr'
			   (Line, 1, 5) of
		    %% Line 1347
		    <[35|[35|[109|[111|[100]]]]]> when 'true' ->
			apply 'out_module'/2
			    (_cor6, _cor5)
		    %% Line 1348
		    <[35|[35|[99|[111|[100]]]]]> when 'true' ->
			apply 'out_erlang_code'/4
			    (_cor6, _cor5, _cor1, _cor0)
		    %% Line 1349
		    <[35|[35|[100|[102|[97]]]]]> when 'true' ->
			apply 'out_dfa'/6
			    (_cor6, _cor5, _cor4, _cor1, _cor3, _cor0)
		    %% Line 1350
		    <[35|[35|[97|[99|[116]]]]]> when 'true' ->
			( case _cor5 of
			    ( <( {'leex',_rec54,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51}
				 -| ['compiler_generated'] )> when 'true' ->
				  apply 'out_actions'/3
				      (_cor6, _rec54, _cor2)
			      -| ['compiler_generated'] )
			    ( <_cor52> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','leex'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    %% Line 1351
		    <_cor53> when 'true' ->
			call 'io':'put_chars'
			    (_cor6, Line)
		  end
		  let <_cor15> =
		      %% Line 1353
		      call 'erlang':'+'
			  (_cor0, 1)
		  in  %% Line 1353
		      apply 'out_file'/8
			  (_cor7, _cor6, _cor5, _cor4, _cor3, _cor2, _cor1, _cor15)
	end
'out_module'/2 =
    %% Line 1356
    fun (_cor1,_cor0) ->
	%% Line 1357
	( case _cor0 of
	    ( <( {'leex',_cor6,_cor7,_cor8,_cor9,_rec55,_cor10,_cor11,_cor12,_cor13}
		 -| ['compiler_generated'] )> when 'true' ->
		  call 'io':'fwrite'
		      (_cor1, [45|[109|[111|[100|[117|[108|[101|[40|[126|[119|[41|[46|[10]]]]]]]]]]]]], [_rec55|[]])
	      -| ['compiler_generated'] )
	    ( <_cor14> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','leex'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'out_erlang_code'/4 =
    %% Line 1359
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1360
	case _cor1 of
	  <{CodeL,CodePos,_X_NCodeLines}> when 'true' ->
	      %% Line 1361
	      ( case _cor2 of
		  ( <( {'leex',_rec56,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30}
		       -| ['compiler_generated'] )> when 'true' ->
			do  apply 'output_file_directive'/3
				(_cor3, _rec56, CodeL)
			    %% Line 1362
			    case call 'file':'open'
				     (_rec56, ['read']) of
			      <{'ok',Xfile}> when 'true' ->
				  do  %% Line 1363
				      letrec
					  'after$^0'/0 =
					      fun () ->
						  %% Line 1368
						  case call 'file':'close'
							   (Xfile) of
						    <'ok'> when 'true' ->
							'ok'
						    ( <_cor12> when 'true' ->
							  primop 'match_fail'
							      ({'badmatch',_cor12})
						      -| ['compiler_generated'] )
						  end
				      in  try
					      do  %% Line 1364
						  apply 'set_encoding'/2
						      (_cor2, Xfile)
						  %% Line 1365
						  case call 'file':'position'
							   (Xfile, CodePos) of
						    <{'ok',_cor42}> when 'true' ->
							let <_cor43> =
							    %% Line 1366
							    apply 'file_copy'/2
								(Xfile, _cor3)
							in  %% Line 1366
							    case _cor43 of
							      <'ok'> when 'true' ->
								  ( _cor43
								    -| ['compiler_generated'] )
							      ( <_cor11> when 'true' ->
								    primop 'match_fail'
									({'badmatch',_cor11})
								-| ['compiler_generated'] )
							    end
						    ( <_cor10> when 'true' ->
							  primop 'match_fail'
							      ({'badmatch',_cor10})
						      -| ['compiler_generated'] )
						  end
					  of <_cor13> ->
					      do  ( apply 'after$^0'/0
							()
						    -| ['compiler_generated'] )
						  _cor13
					  catch <_cor16,_cor15,_cor14> ->
					      do  ( apply 'after$^0'/0
							()
						    -| ['compiler_generated'] )
						  primop 'raise'
						      (_cor14, _cor15)
				      do  %% Line 1370
					  call 'io':'nl'
					      (_cor3)
					  %% Line 1371
					  apply 'output_file_directive'/3
					      (_cor3, _cor24, _cor0)
			      ( <_cor9> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor9})
				-| ['compiler_generated'] )
			    end
		    -| ['compiler_generated'] )
		  ( <_cor31> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','leex'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor4})
	    -| ['compiler_generated'] )
	end
'file_copy'/2 =
    %% Line 1373
    fun (_cor1,_cor0) ->
	%% Line 1374
	case call 'io':'get_line'
		 (_cor1, 'leex') of
	  %% Line 1375
	  <'eof'> when 'true' ->
	      'ok'
	  %% Line 1376
	  <Line>
	      when call 'erlang':'is_list'
		    (Line) ->
	      do  %% Line 1377
		  call 'io':'fwrite'
		      (_cor0, [126|[116|[115]]], [Line|[]])
		  %% Line 1378
		  apply 'file_copy'/2
		      (_cor1, _cor0)
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor2})
	    -| ['compiler_generated'] )
	end
'out_dfa'/6 =
    %% Line 1381
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1382
	case _cor2 of
	  <{_X_CodeL,_X_CodePos,NCodeLines}> when 'true' ->
	      %% Line 1384
	      ( case _cor4 of
		  ( <( {'leex',_cor21,_rec59,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_cor7> =
			    call 'erlang':'-'
				(NCodeLines, 1)
			in  let <_cor8> =
				call 'erlang':'+'
				    (_cor0, _cor7)
			    in  let <_cor9> =
				    call 'erlang':'+'
					(_cor8, 3)
				in  do  apply 'output_file_directive'/3
					    (_cor5, _rec59, _cor9)
					do  %% Line 1385
					    call 'io':'fwrite'
						(_cor5, [121|[121|[115|[116|[97|[116|[101|[40|[41|[32|[45|[62|[32|[126|[119|[46|[126|[110|[126|[110]]]]]]]]]]]]]]]]]]]], [_cor1|[]])
					    let <_cor14> =
						%% Line 1386
						( fun (_cor12) ->
						      apply 'out_trans'/2
							  (_cor5, _cor12)
						  -| [{'id',{0,0,'-out_dfa/6-fun-0-'}}] )
					    in  do  %% Line 1386
						    call 'lists':'foreach'
							(_cor14, _cor3)
						    do  %% Line 1387
							call 'io':'fwrite'
							    (_cor5, [121|[121|[115|[116|[97|[116|[101|[40|[83|[44|[32|[73|[99|[115|[44|[32|[76|[105|[110|[101|[44|[32|[84|[108|[101|[110|[44|[32|[65|[99|[116|[105|[111|[110|[44|[32|[65|[108|[101|[110|[41|[32|[45|[62|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [])
							%% Line 1388
							call 'io':'fwrite'
							    (_cor5, [32|[32|[32|[32|[123|[65|[99|[116|[105|[111|[110|[44|[65|[108|[101|[110|[44|[84|[108|[101|[110|[44|[73|[99|[115|[44|[76|[105|[110|[101|[44|[83|[125|[46|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [])
		    -| ['compiler_generated'] )
		  ( <_cor29> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','leex'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_cor6> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor6})
	    -| ['compiler_generated'] )
	end
'out_trans'/2 =
    %% Line 1390
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <File,{'dfa_state',N,_cor12,[],{'accept',A}}> when 'true' ->
	      do  %% Line 1392
		  call 'io':'fwrite'
		      (File, [121|[121|[115|[116|[97|[116|[101|[40|[126|[119|[44|[32|[73|[99|[115|[44|[32|[76|[105|[110|[101|[44|[32|[84|[108|[101|[110|[44|[32|[95|[44|[32|[95|[41|[32|[45|[62|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [N|[]])
		  %% Line 1393
		  call 'io':'fwrite'
		      (File, [32|[32|[32|[32|[123|[126|[119|[44|[84|[108|[101|[110|[44|[73|[99|[115|[44|[76|[105|[110|[101|[125|[59|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]], [A|[]])
	  %% Line 1394
	  <File,{'dfa_state',N,_cor13,Tr,{'accept',A}}> when 'true' ->
	      let <_cor5> =
		  %% Line 1396
		  ( fun (_cor3) ->
			apply 'out_accept_tran'/4
			    (File, N, A, _cor3)
		    -| [{'id',{0,0,'-out_trans/2-fun-0-'}}] )
	      in  let <_cor2> =
		      %% Line 1396
		      apply 'pack_trans'/1
			  (Tr)
		  in  do  %% Line 1396
			  call 'lists':'foreach'
			      (_cor5, _cor2)
			  do  %% Line 1397
			      call 'io':'fwrite'
				  (File, [121|[121|[115|[116|[97|[116|[101|[40|[126|[119|[44|[32|[73|[99|[115|[44|[32|[76|[105|[110|[101|[44|[32|[84|[108|[101|[110|[44|[32|[95|[44|[32|[95|[41|[32|[45|[62|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [N|[]])
			      %% Line 1398
			      call 'io':'fwrite'
				  (File, [32|[32|[32|[32|[123|[126|[119|[44|[84|[108|[101|[110|[44|[73|[99|[115|[44|[76|[105|[110|[101|[44|[126|[119|[125|[59|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]], [A|[N|[]]])
	  %% Line 1399
	  <File,{'dfa_state',N,_cor14,Tr,'noaccept'}> when 'true' ->
	      let <_cor9> =
		  %% Line 1401
		  ( fun (_cor7) ->
			apply 'out_noaccept_tran'/3
			    (File, N, _cor7)
		    -| [{'id',{0,0,'-out_trans/2-fun-1-'}}] )
	      in  let <_cor6> =
		      %% Line 1401
		      apply 'pack_trans'/1
			  (Tr)
		  in  do  %% Line 1401
			  call 'lists':'foreach'
			      (_cor9, _cor6)
			  do  %% Line 1402
			      call 'io':'fwrite'
				  (File, [121|[121|[115|[116|[97|[116|[101|[40|[126|[119|[44|[32|[73|[99|[115|[44|[32|[76|[105|[110|[101|[44|[32|[84|[108|[101|[110|[44|[32|[65|[99|[116|[105|[111|[110|[44|[32|[65|[108|[101|[110|[41|[32|[45|[62|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [N|[]])
			      %% Line 1403
			      call 'io':'fwrite'
				  (File, [32|[32|[32|[32|[123|[65|[99|[116|[105|[111|[110|[44|[65|[108|[101|[110|[44|[84|[108|[101|[110|[44|[73|[99|[115|[44|[76|[105|[110|[101|[44|[126|[119|[125|[59|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [N|[]])
	  ( <_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10})
		  -| [{'function_name',{'out_trans',2}}] )
	    -| ['compiler_generated'] )
	end
'out_accept_tran'/4 =
    %% Line 1405
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <File,N,A,{{Cf,'maxchar'},S}> when 'true' ->
	      do  %% Line 1406
		  apply 'out_accept_head_max'/3
		      (File, N, Cf)
		  %% Line 1407
		  apply 'out_accept_body'/4
		      (File, S, [76|[105|[110|[101]]]], A)
	  %% Line 1408
	  <File,N,A,{{Cf,Cl},S}> when 'true' ->
	      do  %% Line 1409
		  apply 'out_accept_head_range'/4
		      (File, N, Cf, Cl)
		  %% Line 1410
		  apply 'out_accept_body'/4
		      (File, S, [76|[105|[110|[101]]]], A)
	  %% Line 1411
	  <File,N,A,{10,S}> when 'true' ->
	      do  %% Line 1412
		  apply 'out_accept_head_1'/3
		      (File, N, 10)
		  %% Line 1413
		  apply 'out_accept_body'/4
		      (File, S, [76|[105|[110|[101|[43|[49]]]]]], A)
	  %% Line 1414
	  <File,N,A,{C,S}> when 'true' ->
	      do  %% Line 1415
		  apply 'out_accept_head_1'/3
		      (File, N, C)
		  %% Line 1416
		  apply 'out_accept_body'/4
		      (File, S, [76|[105|[110|[101]]]], A)
	  ( <_cor7,_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5,_cor4})
		  -| [{'function_name',{'out_accept_tran',4}}] )
	    -| ['compiler_generated'] )
	end
'out_accept_head_1'/3 =
    %% Line 1418
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1419
	apply 'out_head_1'/5
	    (_cor2, _cor1, _cor0, [95], [95])
'out_accept_head_max'/3 =
    %% Line 1421
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1422
	apply 'out_head_max'/5
	    (_cor2, _cor1, _cor0, [95], [95])
'out_accept_head_range'/4 =
    %% Line 1424
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1425
	apply 'out_head_range'/6
	    (_cor3, _cor2, _cor1, _cor0, [95], [95])
'out_accept_body'/4 =
    %% Line 1427
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 1428
	    call 'io_lib':'write'
		(_cor0)
	in  %% Line 1428
	    apply 'out_body'/5
		(_cor3, _cor2, _cor1, _cor4, [84|[108|[101|[110]]]])
'out_noaccept_tran'/3 =
    %% Line 1430
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <File,N,{{Cf,'maxchar'},S}> when 'true' ->
	      do  %% Line 1431
		  apply 'out_noaccept_head_max'/3
		      (File, N, Cf)
		  %% Line 1432
		  apply 'out_noaccept_body'/3
		      (File, S, [76|[105|[110|[101]]]])
	  %% Line 1433
	  <File,N,{{Cf,Cl},S}> when 'true' ->
	      do  %% Line 1434
		  apply 'out_noaccept_head_range'/4
		      (File, N, Cf, Cl)
		  %% Line 1435
		  apply 'out_noaccept_body'/3
		      (File, S, [76|[105|[110|[101]]]])
	  %% Line 1436
	  <File,N,{10,S}> when 'true' ->
	      do  %% Line 1437
		  apply 'out_noaccept_head_1'/3
		      (File, N, 10)
		  %% Line 1438
		  apply 'out_noaccept_body'/3
		      (File, S, [76|[105|[110|[101|[43|[49]]]]]])
	  %% Line 1439
	  <File,N,{C,S}> when 'true' ->
	      do  %% Line 1440
		  apply 'out_noaccept_head_1'/3
		      (File, N, C)
		  %% Line 1441
		  apply 'out_noaccept_body'/3
		      (File, S, [76|[105|[110|[101]]]])
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'out_noaccept_tran',3}}] )
	    -| ['compiler_generated'] )
	end
'out_noaccept_head_1'/3 =
    %% Line 1443
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1444
	apply 'out_head_1'/5
	    (_cor2, _cor1, _cor0, [65|[99|[116|[105|[111|[110]]]]]], [65|[108|[101|[110]]]])
'out_noaccept_head_max'/3 =
    %% Line 1446
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1447
	apply 'out_head_max'/5
	    (_cor2, _cor1, _cor0, [65|[99|[116|[105|[111|[110]]]]]], [65|[108|[101|[110]]]])
'out_noaccept_head_range'/4 =
    %% Line 1449
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1450
	apply 'out_head_range'/6
	    (_cor3, _cor2, _cor1, _cor0, [65|[99|[116|[105|[111|[110]]]]]], [65|[108|[101|[110]]]])
'out_noaccept_body'/3 =
    %% Line 1452
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1453
	apply 'out_body'/5
	    (_cor2, _cor1, _cor0, [65|[99|[116|[105|[111|[110]]]]]], [65|[108|[101|[110]]]])
'out_head_1'/5 =
    %% Line 1455
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1456
	call 'io':'fwrite'
	    (_cor4, [121|[121|[115|[116|[97|[116|[101|[40|[126|[119|[44|[32|[91|[126|[119|[124|[73|[99|[115|[93|[44|[32|[76|[105|[110|[101|[44|[32|[84|[108|[101|[110|[44|[32|[126|[115|[44|[32|[126|[115|[41|[32|[45|[62|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 1457
																																	    [_cor3|[_cor2|[_cor1|[_cor0|[]]]]])
'out_head_max'/5 =
    %% Line 1459
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1460
	call 'io':'fwrite'
	    (_cor4, [121|[121|[115|[116|[97|[116|[101|[40|[126|[119|[44|[32|[91|[67|[124|[73|[99|[115|[93|[44|[32|[76|[105|[110|[101|[44|[32|[84|[108|[101|[110|[44|[32|[126|[115|[44|[32|[126|[115|[41|[32|[119|[104|[101|[110|[32|[67|[32|[62|[61|[32|[126|[119|[32|[45|[62|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 1461
																																									    [_cor3|[_cor1|[_cor0|[_cor2|[]]]]])
'out_head_range'/6 =
    %% Line 1463
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1464
	call 'io':'fwrite'
	    (_cor5, [121|[121|[115|[116|[97|[116|[101|[40|[126|[119|[44|[32|[91|[67|[124|[73|[99|[115|[93|[44|[32|[76|[105|[110|[101|[44|[32|[84|[108|[101|[110|[44|[32|[126|[115|[44|[32|[126|[115|[41|[32|[119|[104|[101|[110|[32|[67|[32|[62|[61|[32|[126|[119|[44|[32|[67|[32|[61|[60|[32|[126|[119|[32|[45|[62|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 1465
																																															   [_cor4|[_cor1|[_cor0|[_cor3|[_cor2|[]]]]]])
'out_body'/5 =
    %% Line 1467
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1468
	call 'io':'fwrite'
	    (_cor4, [32|[32|[32|[32|[121|[121|[115|[116|[97|[116|[101|[40|[126|[119|[44|[32|[73|[99|[115|[44|[32|[126|[115|[44|[32|[84|[108|[101|[110|[43|[49|[44|[32|[126|[115|[44|[32|[126|[115|[41|[59|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 1469
																															 [_cor3|[_cor2|[_cor1|[_cor0|[]]]]])
'pack_trans'/1 =
    %% Line 1481
    fun (_cor0) ->
	apply 'pack_trans'/2
	    (_cor0, [])
'pack_trans'/2 =
    %% Line 1488
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{{C,_cor12},S}|Trs],Pt>
	      when call 'erlang':'=:='
		    (_cor12,
		     C) ->
	      %% Line 1489
	      apply 'pack_trans'/2
		  (Trs, [{C,S}|Pt])
	  %% Line 1491
	  <[{{Cf,10},S}|Trs],Pt> when 'true' ->
	      %% Line 1492
	      apply 'pack_trans'/2
		  ([{{Cf,9},S}|Trs], [{10,S}|Pt])
	  %% Line 1493
	  <[{{10,Cl},S}|Trs],Pt> when 'true' ->
	      %% Line 1494
	      apply 'pack_trans'/2
		  ([{{11,Cl},S}|Trs], [{10,S}|Pt])
	  %% Line 1495
	  <[{{Cf,Cl},S}|Trs],Pt>
	      when let <_cor4> =
		    call 'erlang':'<'
			(Cf, 10)
		in  let <_cor5> =
			call 'erlang':'>'
			    (Cl, 10)
		    in  call 'erlang':'and'
			    (_cor4, _cor5) ->
	      %% Line 1496
	      apply 'pack_trans'/2
		  ([{{Cf,9},S}|[{{11,Cl},S}|Trs]], [{10,S}|Pt])
	  %% Line 1498
	  <[{{Cf,Cl},S}|Trs],Pt>
	      when try
		    let <_cor8> =
			call 'erlang':'+'
			    (Cf, 1)
		    in  call 'erlang':'=:='
			    (Cl, _cor8)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 1499
	      apply 'pack_trans'/2
		  (Trs, [{Cf,S}|[{Cl,S}|Pt]])
	  %% Line 1500
	  <[Tr|Trs],Pt> when 'true' ->
	      let <_cor9> =
		  %% Line 1501
		  call 'erlang':'++'
		      (Pt, [Tr|[]])
	      in  %% Line 1501
		  apply 'pack_trans'/2
		      (Trs, _cor9)
	  %% Line 1502
	  <[],Pt> when 'true' ->
	      Pt
	  ( <_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10})
		  -| [{'function_name',{'pack_trans',2}}] )
	    -| ['compiler_generated'] )
	end
'out_actions'/3 =
    %% Line 1507
    fun (_cor2,_cor1,_cor0) ->
	let <As1> =
	    %% Line 1508
	    apply 'prep_out_actions'/1
		(_cor0)
	in  let <_cor6> =
		%% Line 1509
		( fun (_cor4) ->
		      apply 'out_action'/2
			  (_cor2, _cor4)
		  -| [{'id',{0,0,'-out_actions/3-fun-0-'}}] )
	    in  do  %% Line 1509
		    call 'lists':'foreach'
			(_cor6, As1)
		    do  %% Line 1510
			call 'io':'fwrite'
			    (_cor2, [121|[121|[97|[99|[116|[105|[111|[110|[40|[95|[44|[32|[95|[44|[32|[95|[44|[32|[95|[41|[32|[45|[62|[32|[101|[114|[114|[111|[114|[46|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [])
			let <_cor9> =
			    %% Line 1511
			    ( fun (_cor7) ->
				  apply 'out_action_code'/3
				      (_cor2, _cor1, _cor7)
			      -| [{'id',{0,0,'-out_actions/3-fun-1-'}}] )
			in  %% Line 1511
			    call 'lists':'foreach'
				(_cor9, As1)
'prep_out_actions'/1 =
    %% Line 1513
    fun (_cor0) ->
	let <_cor22> =
	    %% Line 1514
	    ( fun (_cor20) ->
		  case _cor20 of
		    <{A,'empty_action'}> when 'true' ->
			%% Line 1515
			{A,'empty_action'}
		    %% Line 1516
		    <{A,Code,TokenChars,TokenLen,TokenLine}> when 'true' ->
			let <_cor1> =
			    %% Line 1521
			    call 'erlang':'or'
				(TokenLen, TokenChars)
			in  let <Vs> =
				%% Line 1517
				[{TokenChars,[84|[111|[107|[101|[110|[67|[104|[97|[114|[115]]]]]]]]]]}|%% Line 1518
												       [{TokenLen,[84|[111|[107|[101|[110|[76|[101|[110]]]]]]]]}|%% Line 1519
																				 [{TokenLine,[84|[111|[107|[101|[110|[76|[105|[110|[101]]]]]]]]]}|%% Line 1520
																												  [{TokenChars,[89|[89|[116|[99|[115]]]]]}|%% Line 1521
																																	   [{_cor1,[84|[111|[107|[101|[110|[76|[101|[110]]]]]]]]}|[]]]]]]
			    in  let <_cor8> =
				    %% Line 1522
				    ( letrec
					  'lc$^0'/1 =
					      fun (_cor5) ->
						  case _cor5 of
						    <[{F,S}|_cor4]> when 'true' ->
							let <_cor6> =
							    case <> of
							      <>
								  when call 'erlang':'=:='
									(F,
									 'true') ->
								  S
							      <> when 'true' ->
								  [95]
							    end
							in  let <_cor7> =
								apply 'lc$^0'/1
								    (_cor4)
							    in  ( [_cor6|_cor7]
								  -| ['compiler_generated'] )
						    ( <[_cor3|_cor4]> when 'true' ->
							  apply 'lc$^0'/1
							      (_cor4)
						      -| ['compiler_generated'] )
						    <[]> when 'true' ->
							[]
						    ( <_cor5> when 'true' ->
							  ( primop 'match_fail'
								({'function_clause',_cor5})
							    -| [{'function_name',{'lc$^0',1}}] )
						      -| ['compiler_generated'] )
						  end
				      in  apply 'lc$^0'/1
					      (Vs)
				      -| ['list_comprehension'] )
				in  let <_cor10> =
					%% Line 1523
					call 'lists':'concat'
					    (['yyaction_'|[A|[]]])
				    in  let <Name> =
					    %% Line 1523
					    call 'erlang':'list_to_atom'
						(_cor10)
					in  %% Line 1524
					    case _cor8 of
					      <[Chars|[Len|[Line|[_cor24|[_cor25|[]]]]]]> when 'true' ->
						  let <_cor17> =
						      %% Line 1525
						      ( letrec
							    'lc$^1'/1 =
								fun (_cor15) ->
								    case _cor15 of
								      <[V|_cor14]>
									  when call 'erlang':'=/='
										(V,
										 [95]) ->
									  let <_cor16> =
									      apply 'lc$^1'/1
										  (_cor14)
									  in  ( [V|_cor16]
										-| ['compiler_generated'] )
								      ( <[V|_cor14]> when 'true' ->
									    apply 'lc$^1'/1
										(_cor14)
									-| ['compiler_generated'] )
								      <[]> when 'true' ->
									  []
								      ( <_cor15> when 'true' ->
									    ( primop 'match_fail'
										  ({'function_clause',_cor15})
									      -| [{'function_name',{'lc$^1',1}}] )
									-| ['compiler_generated'] )
								    end
							in  apply 'lc$^1'/1
								([Chars|[Len|[Line|[]]]])
							-| ['list_comprehension'] )
						  in  let <ArgsChars> =
							  %% Line 1526
							  call 'string':'join'
							      (_cor17, [44|[32]])
						      in  %% Line 1527
							  {A,Code,_cor8,Name,_cor17,ArgsChars}
					      ( <_cor12> when 'true' ->
						    primop 'match_fail'
							({'badmatch',_cor12})
						-| ['compiler_generated'] )
					    end
		    ( <_cor21> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor21})
			    -| [{'function_name',{'-prep_out_actions/1-fun-0-',1}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-prep_out_actions/1-fun-0-'}}] )
	in  %% Line 1514
	    call 'lists':'map'
		(_cor22, _cor0)
'out_action'/2 =
    %% Line 1530
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <File,{A,'empty_action'}> when 'true' ->
	      %% Line 1531
	      call 'io':'fwrite'
		  (File, [121|[121|[97|[99|[116|[105|[111|[110|[40|[126|[119|[44|[32|[95|[44|[32|[95|[44|[32|[95|[41|[32|[45|[62|[32|[115|[107|[105|[112|[95|[116|[111|[107|[101|[110|[59|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [A|[]])
	  %% Line 1532
	  <File,{A,_X_Code,Vars,Name,_X_Args,ArgsChars}> when 'true' ->
	      %% Line 1533
	      case Vars of
		<[_cor5|[_cor6|[Line|[Tcs|[Len|[]]]]]]> when 'true' ->
		    do  %% Line 1534
			call 'io':'fwrite'
			    (File, [121|[121|[97|[99|[116|[105|[111|[110|[40|[126|[119|[44|[32|[126|[115|[44|[32|[126|[115|[44|[32|[126|[115|[41|[32|[45|[62|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [A|[Len|[Tcs|[Line|[]]]]])
			do  %% Line 1535
			    case <> of
			      %% Line 1536
			      <>
				  when call 'erlang':'=/='
					(Tcs,
					 [95]) ->
				  %% Line 1537
				  call 'io':'fwrite'
				      (File, [32|[32|[32|[32|[84|[111|[107|[101|[110|[67|[104|[97|[114|[115|[32|[61|[32|[121|[121|[112|[114|[101|[40|[89|[89|[116|[99|[115|[44|[32|[84|[111|[107|[101|[110|[76|[101|[110|[41|[44|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [])
			      %% Line 1538
			      <> when 'true' ->
				  'ok'
			    end
			    %% Line 1540
			    call 'io':'fwrite'
				(File, [32|[32|[32|[32|[126|[115|[40|[126|[115|[41|[59|[126|[110]]]]]]]]]]]]], [Name|[ArgsChars|[]]])
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'out_action',2}}] )
	    -| ['compiler_generated'] )
	end
'out_action_code'/3 =
    %% Line 1542
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <_X_File,_X_XrlFile,{_X_A,'empty_action'}> when 'true' ->
	      %% Line 1543
	      'ok'
	  %% Line 1544
	  <File,XrlFile,{_X_A,Code,_X_Vars,Name,Args,ArgsChars}> when 'true' ->
	      let <_cor3> =
		  %% Line 1547
		  call 'erlang':'length'
		      (Args)
	      in  do  %% Line 1547
		      call 'io':'fwrite'
			  (File, [10|[45|[99|[111|[109|[112|[105|[108|[101|[40|[123|[105|[110|[108|[105|[110|[101|[44|[126|[119|[47|[126|[119|[125|[41|[46|[10]]]]]]]]]]]]]]]]]]]]]]]]]]], [Name|[_cor3|[]]])
		      let <_cor4> =
			  %% Line 1548
			  call 'erlang':'hd'
			      (Code)
		      in  %% Line 1548
			  case call 'erl_scan':'token_info'
				   (_cor4, 'line') of
			    <{'line',L}> when 'true' ->
				let <_cor6> =
				    %% Line 1549
				    call 'erlang':'-'
					(L, 2)
				in  do  %% Line 1549
					apply 'output_file_directive'/3
					    (File, XrlFile, _cor6)
					do  %% Line 1550
					    call 'io':'fwrite'
						(File, [126|[115|[40|[126|[115|[41|[32|[45|[62|[126|[110]]]]]]]]]]], [Name|[ArgsChars|[]]])
					    let <_cor7> =
						%% Line 1551
						apply 'pp_tokens'/2
						    (Code, L)
					    in  %% Line 1551
						call 'io':'fwrite'
						    (File, [32|[32|[32|[32|[126|[115|[10]]]]]]], [_cor7|[]])
			    ( <_cor5> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor5})
			      -| ['compiler_generated'] )
			  end
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'out_action_code',3}}] )
	    -| ['compiler_generated'] )
	end
'pp_tokens'/2 =
    %% Line 1556
    fun (_cor1,_cor0) ->
	apply 'pp_tokens'/3
	    (_cor1, _cor0, 'none')
'pp_tokens'/3 =
    %% Line 1558
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],_X_Line0,_cor10> when 'true' ->
	      []
	  %% Line 1559
	  <[T|Ts],Line0,Prev> when 'true' ->
	      %% Line 1560
	      case call 'erl_scan':'token_info'
		       (T, 'line') of
		<{'line',Line}> when 'true' ->
		    let <_cor4> =
			%% Line 1561
			apply 'pp_sep'/4
			    (Line, Line0, Prev, T)
		    in  let <_cor5> =
			    %% Line 1561
			    apply 'pp_symbol'/1
				(T)
			in  let <_cor6> =
				%% Line 1561
				apply 'pp_tokens'/3
				    (Ts, Line, T)
			    in  %% Line 1561
				[_cor4|[_cor5|_cor6]]
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7})
		  -| [{'function_name',{'pp_tokens',3}}] )
	    -| ['compiler_generated'] )
	end
'pp_symbol'/1 =
    %% Line 1563
    fun (_cor0) ->
	case _cor0 of
	  <{'var',_cor2,Var}> when 'true' ->
	      call 'erlang':'atom_to_list'
		  (Var)
	  %% Line 1564
	  <{_cor3,_cor4,Symbol}> when 'true' ->
	      call 'io_lib':'fwrite'
		  ([126|[112]], [Symbol|[]])
	  %% Line 1565
	  <{'dot',_cor5}> when 'true' ->
	      [46]
	  %% Line 1566
	  <{Symbol,_cor6}> when 'true' ->
	      call 'erlang':'atom_to_list'
		  (Symbol)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'pp_symbol',1}}] )
	    -| ['compiler_generated'] )
	end
'pp_sep'/4 =
    %% Line 1568
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Line,Line0,Prev,T>
	      when call 'erlang':'>'
		    (Line,
		     Line0) ->
	      let <_cor4> =
		  %% Line 1569
		  call 'erlang':'-'
		      (Line, 1)
	      in  let <_cor5> =
		      %% Line 1569
		      apply 'pp_sep'/4
			  (_cor4, Line0, Prev, T)
		  in  %% Line 1569
		      [[10|[32|[32|[32|[32]]]]]|_cor5]
	  %% Line 1570
	  <_cor10,_cor11,{'.',_cor12},_cor13> when 'true' ->
	      []
	  %% Line 1571
	  <_cor14,_cor15,{'#',_cor16},_cor17> when 'true' ->
	      []
	  %% Line 1572
	  <_cor18,_cor19,{'(',_cor20},_cor21> when 'true' ->
	      []
	  %% Line 1573
	  <_cor22,_cor23,{'[',_cor24},_cor25> when 'true' ->
	      []
	  %% Line 1574
	  <_cor26,_cor27,_cor28,{'.',_cor29}> when 'true' ->
	      []
	  %% Line 1575
	  <_cor30,_cor31,_cor32,{'#',_cor33}> when 'true' ->
	      []
	  %% Line 1576
	  <_cor34,_cor35,_cor36,{',',_cor37}> when 'true' ->
	      []
	  %% Line 1577
	  <_cor38,_cor39,_cor40,{')',_cor41}> when 'true' ->
	      []
	  %% Line 1578
	  <_cor42,_cor43,_cor44,_cor45> when 'true' ->
	      [32]
	end
'out_dfa_graph'/3 =
    %% Line 1584
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1585
	( case _cor2 of
	    ( <( {'leex',_cor16,_cor17,_cor18,_rec60,_cor19,_cor20,_cor21,_cor22,_cor23}
		 -| ['compiler_generated'] )> when 'true' ->
		  do  apply 'verbose_print'/3
			  (_cor2, [87|[114|[105|[116|[105|[110|[103|[32|[68|[70|[65|[32|[116|[111|[32|[102|[105|[108|[101|[32|[126|[116|[115|[44|[32]]]]]]]]]]]]]]]]]]]]]]]]], [_rec60|[]])
		      %% Line 1586
		      case call 'file':'open'
			       (_rec60, ['write']) of
			%% Line 1587
			<{'ok',Gfile}> when 'true' ->
			    %% Line 1588
			    letrec
				'after$^0'/0 =
				    fun () ->
					let <_cor34> =
					    %% Line 1595
					    call 'file':'close'
						(Gfile)
					in  %% Line 1595
					    case _cor34 of
					      <'ok'> when 'true' ->
						  ( _cor34
						    -| ['compiler_generated'] )
					      ( <_cor7> when 'true' ->
						    primop 'match_fail'
							({'badmatch',_cor7})
						-| ['compiler_generated'] )
					    end
			    in  try
				    do  %% Line 1589
					call 'io':'fwrite'
					    (Gfile, [100|[105|[103|[114|[97|[112|[104|[32|[68|[70|[65|[32|[123|[126|[110]]]]]]]]]]]]]]], [])
					do  %% Line 1590
					    apply 'out_dfa_states'/3
						(Gfile, _cor1, _cor0)
					    do  %% Line 1591
						apply 'out_dfa_edges'/2
						    (Gfile, _cor1)
						do  %% Line 1592
						    call 'io':'fwrite'
							(Gfile, [125|[126|[110]]], [])
						    do  %% Line 1593
							apply 'verbose_print'/3
							    (_cor2, [111|[107|[126|[110]]]], [])
							_cor2
				of <_cor8> ->
				    do  ( apply 'after$^0'/0
					      ()
					  -| ['compiler_generated'] )
					_cor8
				catch <_cor11,_cor10,_cor9> ->
				    do  ( apply 'after$^0'/0
					      ()
					  -| ['compiler_generated'] )
					primop 'raise'
					    (_cor9, _cor10)
			%% Line 1597
			<{'error',Error}> when 'true' ->
			    do  %% Line 1598
				apply 'verbose_print'/3
				    (_cor2, [101|[114|[114|[111|[114|[126|[110]]]]]]], [])
				%% Line 1599
				apply 'add_error'/2
				    ({'none','leex',{'file_error',Error}}, _cor2)
			( <_cor12> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor12})
			  -| ['compiler_generated'] )
		      end
	      -| ['compiler_generated'] )
	    ( <_cor24> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','leex'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'out_dfa_states'/3 =
    %% Line 1602
    fun (_cor2,_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 1603
	    ( fun (_cor3) ->
		  apply 'out_dfa_state'/3
		      (_cor2, _cor0, _cor3)
	      -| [{'id',{0,0,'-out_dfa_states/3-fun-0-'}}] )
	in  do  %% Line 1603
		call 'lists':'foreach'
		    (_cor5, _cor1)
		%% Line 1604
		call 'io':'fwrite'
		    (_cor2, [126|[110]], [])
'out_dfa_state'/3 =
    %% Line 1606
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <File,DF,{'dfa_state',_cor6,_cor7,_cor8,{'accept',_cor9}}>
	      when call 'erlang':'=:='
		    (_cor6,
		     DF) ->
	      %% Line 1607
	      call 'io':'fwrite'
		  (File, [32|[32|[126|[98|[32|[91|[115|[104|[97|[112|[101|[61|[100|[111|[117|[98|[108|[101|[99|[105|[114|[99|[108|[101|[32|[99|[111|[108|[111|[114|[61|[103|[114|[101|[101|[110|[93|[59|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [DF|[]])
	  %% Line 1608
	  <File,DF,{'dfa_state',_cor10,_cor11,_cor12,'noaccept'}>
	      when call 'erlang':'=:='
		    (_cor10,
		     DF) ->
	      %% Line 1609
	      call 'io':'fwrite'
		  (File, [32|[32|[126|[98|[32|[91|[115|[104|[97|[112|[101|[61|[99|[105|[114|[99|[108|[101|[32|[99|[111|[108|[111|[114|[61|[103|[114|[101|[101|[110|[93|[59|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [DF|[]])
	  %% Line 1610
	  <File,_cor13,{'dfa_state',S,_cor14,_cor15,{'accept',_cor16}}> when 'true' ->
	      %% Line 1611
	      call 'io':'fwrite'
		  (File, [32|[32|[126|[98|[32|[91|[115|[104|[97|[112|[101|[61|[100|[111|[117|[98|[108|[101|[99|[105|[114|[99|[108|[101|[93|[59|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]], [S|[]])
	  %% Line 1612
	  <File,_cor17,{'dfa_state',S,_cor18,_cor19,'noaccept'}> when 'true' ->
	      %% Line 1613
	      call 'io':'fwrite'
		  (File, [32|[32|[126|[98|[32|[91|[115|[104|[97|[112|[101|[61|[99|[105|[114|[99|[108|[101|[93|[59|[126|[110]]]]]]]]]]]]]]]]]]]]]], [S|[]])
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'out_dfa_state',3}}] )
	    -| ['compiler_generated'] )
	end
'out_dfa_edges'/2 =
    %% Line 1615
    fun (_cor1,_cor0) ->
	let <_cor19> =
	    %% Line 1616
	    ( fun (_cor17) ->
		  case _cor17 of
		    <{'dfa_state',S,_cor22,Trans,_cor23}> when 'true' ->
			let <Pt> =
			    %% Line 1617
			    apply 'pack_trans'/1
				(Trans)
			in  let <_cor8> =
				%% Line 1618
				( fun (_cor5,_cor4) ->
				      case <_cor5,_cor4> of
					<{Cr,T},D> when 'true' ->
					    %% Line 1619
					    call 'orddict':'append'
						(T, Cr, D)
					( <_cor7,_cor6> when 'true' ->
					      ( primop 'match_fail'
						    ({'function_clause',_cor7,_cor6})
						-| [{'function_name',{'-out_dfa_edges/2-fun-0-',2}}] )
					  -| ['compiler_generated'] )
				      end
				  -| [{'id',{0,0,'-out_dfa_edges/2-fun-0-'}}] )
			    in  let <_cor3> =
				    %% Line 1620
				    call 'orddict':'new'
					()
				in  let <Tdict> =
					%% Line 1618
					call 'lists':'foldl'
					    (_cor8, _cor3, %% Line 1620
							   Pt)
				    in  let <_cor16> =
					    %% Line 1621
					    ( fun (_cor14) ->
						  let <Crs> =
						      %% Line 1622
						      call 'orddict':'fetch'
							  (_cor14, Tdict)
						  in  let <Edgelab> =
							  %% Line 1623
							  apply 'dfa_edgelabel'/1
							      (Crs)
						      in  %% Line 1624
							  call 'io':'fwrite'
							      (_cor1, [32|[32|[126|[98|[32|[45|[62|[32|[126|[98|[32|[91|[108|[97|[98|[101|[108|[61|[34|[126|[115|[34|[93|[59|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 1625
																										  [S|[_cor14|[Edgelab|[]]]])
					      -| [{'id',{0,0,'-out_dfa_edges/2-fun-1-'}}] )
					in  let <_cor10> =
						%% Line 1626
						call 'orddict':'fetch_keys'
						    (Tdict)
					    in  let <_cor11> =
						    %% Line 1626
						    call 'lists':'sort'
							(_cor10)
						in  %% Line 1621
						    call 'lists':'foreach'
							(_cor16, _cor11)
		    ( <_cor18> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor18})
			    -| [{'function_name',{'-out_dfa_edges/2-fun-2-',1}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-out_dfa_edges/2-fun-2-'}}] )
	in  %% Line 1616
	    call 'lists':'foreach'
		(_cor19, _cor0)
'dfa_edgelabel'/1 =
    %% Line 1629
    fun (_cor0) ->
	case _cor0 of
	  <[C|[]]>
	      when call 'erlang':'is_integer'
		    (C) ->
	      apply 'quote'/1
		  (C)
	  %% Line 1630
	  <Cranges> when 'true' ->
	      let <_cor6> =
		  %% Line 1632
		  ( fun (_cor4) ->
			case _cor4 of
			  <{A,B}> when 'true' ->
			      let <_cor1> =
				  apply 'quote'/1
				      (A)
			      in  let <_cor2> =
				      apply 'quote'/1
					  (B)
				  in  [_cor1|[[45]|[_cor2|[]]]]
			  %% Line 1633
			  <C> when 'true' ->
			      let <_cor3> =
				  apply 'quote'/1
				      (C)
			      in  [_cor3|[]]
			end
		    -| [{'id',{0,0,'-dfa_edgelabel/1-fun-0-'}}] )
	      in  let <_cor7> =
		      %% Line 1632
		      call 'lists':'map'
			  (_cor6, %% Line 1634
				  Cranges)
		  in  let <_cor8> =
			  %% Line 1634
			  call 'erlang':'++'
			      (_cor7, [93])
		      in  %% Line 1632
			  [91|_cor8]
	end
'set_encoding'/2 =
    %% Line 1636
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'leex',_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,'none',_cor13,_cor14},File> when 'true' ->
	      let <_cor2> =
		  %% Line 1637
		  call 'epp':'default_encoding'
		      ()
	      in  let <_cor15> =
		      %% Line 1637
		      call 'io':'setopts'
			  (File, [{'encoding',_cor2}|[]])
		  in  %% Line 1637
		      case _cor15 of
			<'ok'> when 'true' ->
			    ( _cor15
			      -| ['compiler_generated'] )
			( <_cor3> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor3})
			  -| ['compiler_generated'] )
		      end
	  %% Line 1638
	  <{'leex',_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,E,_cor22,_cor23},File> when 'true' ->
	      let <_cor24> =
		  %% Line 1639
		  call 'io':'setopts'
		      (File, [{'encoding',E}|[]])
	      in  %% Line 1639
		  case _cor24 of
		    <'ok'> when 'true' ->
			( _cor24
			  -| ['compiler_generated'] )
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor4})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'set_encoding',2}}] )
	    -| ['compiler_generated'] )
	end
'output_encoding_comment'/2 =
    %% Line 1641
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <_X_File,{'leex',_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,'none',_cor11,_cor12}> when 'true' ->
	      %% Line 1642
	      'ok'
	  %% Line 1643
	  <File,{'leex',_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,Encoding,_cor19,_cor20}> when 'true' ->
	      let <_cor2> =
		  %% Line 1644
		  call 'epp':'encoding_to_string'
		      (Encoding)
	      in  %% Line 1644
		  call 'io':'fwrite'
		      (File, #{#<37>(8,1,'integer',['unsigned'|['big']]),
			       #<37>(8,1,'integer',['unsigned'|['big']]),
			       #<32>(8,1,'integer',['unsigned'|['big']]),
			       #<126>(8,1,'integer',['unsigned'|['big']]),
			       #<115>(8,1,'integer',['unsigned'|['big']]),
			       #<10>(8,1,'integer',['unsigned'|['big']])}#, [_cor2|[]])
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'output_encoding_comment',2}}] )
	    -| ['compiler_generated'] )
	end
'output_file_directive'/3 =
    %% Line 1646
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 1648
	    apply 'format_filename'/2
		(_cor1, _cor2)
	in  %% Line 1647
	    call 'io':'fwrite'
		(_cor2, #{#<45>(8,1,'integer',['unsigned'|['big']]),
			  #<102>(8,1,'integer',['unsigned'|['big']]),
			  #<105>(8,1,'integer',['unsigned'|['big']]),
			  #<108>(8,1,'integer',['unsigned'|['big']]),
			  #<101>(8,1,'integer',['unsigned'|['big']]),
			  #<40>(8,1,'integer',['unsigned'|['big']]),
			  #<126>(8,1,'integer',['unsigned'|['big']]),
			  #<116>(8,1,'integer',['unsigned'|['big']]),
			  #<115>(8,1,'integer',['unsigned'|['big']]),
			  #<44>(8,1,'integer',['unsigned'|['big']]),
			  #<32>(8,1,'integer',['unsigned'|['big']]),
			  #<126>(8,1,'integer',['unsigned'|['big']]),
			  #<119>(8,1,'integer',['unsigned'|['big']]),
			  #<41>(8,1,'integer',['unsigned'|['big']]),
			  #<46>(8,1,'integer',['unsigned'|['big']]),
			  #<10>(8,1,'integer',['unsigned'|['big']])}#, %% Line 1648
								       [_cor3|[_cor0|[]]])
'format_filename'/2 =
    %% Line 1650
    fun (_cor1,_cor0) ->
	let <Filename> =
	    %% Line 1651
	    call 'filename':'flatten'
		(_cor1)
	in  let <_cor3> =
		%% Line 1652
		call 'io':'getopts'
		    (_cor0)
	    in  %% Line 1652
		case call 'lists':'keyfind'
			 ('encoding', 1, _cor3) of
		  %% Line 1653
		  <{'encoding','unicode'}> when 'true' ->
		      call 'io_lib':'write_string'
			  (Filename)
		  %% Line 1654
		  <_cor7> when 'true' ->
		      call 'io_lib':'write_string_as_latin1'
			  (Filename)
		end
'quote'/1 =
    %% Line 1657
    fun (_cor0) ->
	case _cor0 of
	  <94> when 'true' ->
	      [92|[94]]
	  %% Line 1658
	  <46> when 'true' ->
	      [92|[46]]
	  %% Line 1659
	  <36> when 'true' ->
	      [92|[36]]
	  %% Line 1660
	  <45> when 'true' ->
	      [92|[45]]
	  %% Line 1661
	  <91> when 'true' ->
	      [92|[91]]
	  %% Line 1662
	  <93> when 'true' ->
	      [92|[93]]
	  %% Line 1663
	  <32> when 'true' ->
	      [92|[92|[115]]]
	  %% Line 1664
	  <34> when 'true' ->
	      [92|[34]]
	  %% Line 1665
	  <8> when 'true' ->
	      [92|[92|[98]]]
	  %% Line 1666
	  <12> when 'true' ->
	      [92|[92|[102]]]
	  %% Line 1667
	  <10> when 'true' ->
	      [92|[92|[110]]]
	  %% Line 1668
	  <13> when 'true' ->
	      [92|[92|[114]]]
	  %% Line 1669
	  <9> when 'true' ->
	      [92|[92|[116]]]
	  %% Line 1670
	  <27> when 'true' ->
	      [92|[92|[101]]]
	  %% Line 1671
	  <11> when 'true' ->
	      [92|[92|[118]]]
	  %% Line 1672
	  <127> when 'true' ->
	      [92|[92|[100]]]
	  %% Line 1673
	  <92> when 'true' ->
	      [92|[92]]
	  %% Line 1674
	  <C>
	      when call 'erlang':'is_integer'
		    (_cor0) ->
	      %% Line 1676
	      case call 'io_lib':'write_char'
		       (C) of
		%% Line 1677
		<[36|[92|Cs]]> when 'true' ->
		    [92|[92|Cs]]
		%% Line 1678
		<[36|Cs]> when 'true' ->
		    Cs
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1680
	  <'maxchar'> when 'true' ->
	      %% Line 1681
	      [77|[65|[88|[67|[72|[65|[82]]]]]]]
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'quote',1}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('leex')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('leex', _cor0)
end