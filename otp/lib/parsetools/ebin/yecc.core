module 'yecc' ['compile'/3,
	       'file'/1,
	       'file'/2,
	       'format_error'/1,
	       'module_info'/0,
	       'module_info'/1,
	       'yecc'/2,
	       'yecc'/3,
	       'yecc'/4]
    attributes [%% Line 22
		'type' =
		    %% Line 22
		    [{{'record','options'},[{'typed_record_field',{'record_field',23,{'atom',23,'includes'},{'nil',23}},{'type',23,'list',[{'remote_type',23,[{'atom',23,'file'}|[{'atom',23,'filename'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',25,{'atom',25,'outdir'},{'string',25,[46]}},{'remote_type',25,[{'atom',25,'file'}|[{'atom',25,'filename'}|[[]]]]}}|[{'typed_record_field',{'record_field',27,{'atom',27,'output_type'},{'atom',27,'undefined'}},{'type',27,'atom',[]}}|[{'typed_record_field',{'record_field',28,{'atom',28,'defines'},{'nil',28}},{'type',28,'list',[{'type',28,'union',[{'type',28,'atom',[]}|[{'type',28,'tuple',[{'type',28,'atom',[]}|[{'var',28,'_'}]]}]]}]}}|[{'typed_record_field',{'record_field',32,{'atom',32,'warning'},{'integer',32,1}},{'type',32,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',35,{'atom',35,'verbose'},{'atom',35,'false'}},{'type',35,'boolean',[]}}|[{'record_field',36,{'atom',36,'optimize'},{'integer',36,999}}|[{'typed_record_field',{'record_field',37,{'atom',37,'specific'},{'nil',37}},{'type',37,'list',[{'var',37,'_'}]}}|[{'typed_record_field',{'record_field',38,{'atom',38,'outfile'},{'string',38,[]}},{'remote_type',38,[{'atom',38,'file'}|[{'atom',38,'filename'}|[[]]]]}}|[{'typed_record_field',{'record_field',40,{'atom',40,'cwd'}},{'type',40,'union',[{'atom',40,'undefined'}|[{'remote_type',40,[{'atom',40,'file'}|[{'atom',40,'filename'}|[[]]]]}]]}}]]]]]]]]]],[]}],
		%% Line 39
		'type' =
		    %% Line 39
		    [{{'record','yecc'},[{'record_field',40,{'atom',40,'infile'}}|[{'record_field',41,{'atom',41,'outfile'}}|[{'record_field',42,{'atom',42,'includefile'}}|[{'record_field',43,{'atom',43,'includefile_version'}}|[{'record_field',44,{'atom',44,'module'}}|[{'record_field',45,{'atom',45,'encoding'},{'atom',45,'none'}}|[{'record_field',46,{'atom',46,'options'},{'nil',46}}|[{'record_field',47,{'atom',47,'verbose'},{'atom',47,'false'}}|[{'record_field',48,{'atom',48,'file_attrs'},{'atom',48,'true'}}|[{'record_field',49,{'atom',49,'errors'},{'nil',49}}|[{'record_field',50,{'atom',50,'warnings'},{'nil',50}}|[{'record_field',51,{'atom',51,'conflicts_done'},{'atom',51,'false'}}|[{'record_field',52,{'atom',52,'shift_reduce'},{'nil',52}}|[{'record_field',53,{'atom',53,'reduce_reduce'},{'nil',53}}|[{'record_field',54,{'atom',54,'n_states'},{'integer',54,0}}|[{'record_field',55,{'atom',55,'inport'}}|[{'record_field',56,{'atom',56,'outport'}}|[{'record_field',57,{'atom',57,'line'}}|[{'record_field',59,{'atom',59,'parse_actions'}}|[{'record_field',60,{'atom',60,'symbol_tab'}}|[{'record_field',61,{'atom',61,'inv_symbol_tab'}}|[{'record_field',62,{'atom',62,'state_tab'}}|[{'record_field',63,{'atom',63,'prec_tab'}}|[{'record_field',64,{'atom',64,'goto_tab'}}|[{'record_field',66,{'atom',66,'terminals'},{'nil',66}}|[{'record_field',67,{'atom',67,'nonterminals'},{'nil',67}}|[{'record_field',68,{'atom',68,'all_symbols'},{'nil',68}}|[{'record_field',69,{'atom',69,'prec'},{'nil',69}}|[{'record_field',70,{'atom',70,'rules_list'},{'nil',70}}|[{'record_field',71,{'atom',71,'rules'}}|[{'record_field',72,{'atom',72,'rule_pointer2rule'}}|[{'record_field',73,{'atom',73,'rootsymbol'},{'nil',73}}|[{'record_field',74,{'atom',74,'endsymbol'},{'nil',74}}|[{'record_field',75,{'atom',75,'expect_shift_reduce'},{'nil',75}}|[{'record_field',76,{'atom',76,'expect_n_states'},{'nil',76}}|[{'record_field',77,{'atom',77,'header'},{'nil',77}}|[{'record_field',78,{'atom',78,'erlang_code'},{'atom',78,'none'}}]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[]}],
		%% Line 81
		'type' =
		    %% Line 81
		    [{{'record','rule'},[{'record_field',82,{'atom',82,'n'}}|[{'record_field',83,{'atom',83,'line'}}|[{'record_field',84,{'atom',84,'symbols'}}|[{'record_field',85,{'atom',85,'tokens'}}|[{'record_field',86,{'atom',86,'is_guard'}}|[{'record_field',87,{'atom',87,'is_well_formed'}}]]]]]],[]}],
		%% Line 90
		'type' =
		    %% Line 90
		    [{{'record','reduce'},[{'record_field',91,{'atom',91,'rule_nmbr'}}|[{'record_field',92,{'atom',92,'head'}}|[{'record_field',93,{'atom',93,'nmbr_of_daughters'}}|[{'record_field',94,{'atom',94,'prec'}}|[{'record_field',95,{'atom',95,'unused'}}]]]]],[]}],
		%% Line 98
		'type' =
		    %% Line 98
		    [{{'record','shift'},[{'record_field',99,{'atom',99,'state'}}|[{'record_field',100,{'atom',100,'pos'}}|[{'record_field',101,{'atom',101,'prec'}}|[{'record_field',102,{'atom',102,'rule_nmbr'}}]]]],[]}],
		%% Line 105
		'type' =
		    %% Line 105
		    [{{'record','user_code'},[{'record_field',105,{'atom',105,'state'}}|[{'record_field',105,{'atom',105,'terminal'}}|[{'record_field',105,{'atom',105,'funname'}}|[{'record_field',105,{'atom',105,'action'}}]]]],[]}],
		%% Line 107
		'type' =
		    %% Line 107
		    [{{'record','symbol'},[{'record_field',107,{'atom',107,'line'},{'atom',107,'none'}}|[{'record_field',107,{'atom',107,'name'}}]],[]}],
		%% Line 767
		'type' =
		    %% Line 767
		    [{{'record','state_info'},[{'record_field',767,{'atom',767,'reduce_only'}}|[{'record_field',767,{'atom',767,'state_repr'}}|[{'record_field',767,{'atom',767,'comment'}}]]],[]}],
		%% Line 1002
		'type' =
		    %% Line 1002
		    [{{'record','tabs'},[{'record_field',1003,{'atom',1003,'symbols'}}|[{'record_field',1004,{'atom',1004,'inv_symbols'}}|[{'record_field',1005,{'atom',1005,'state_id'}}|[{'record_field',1007,{'atom',1007,'rp_rhs'}}|[{'record_field',1008,{'atom',1008,'rp_info'}}|[{'record_field',1009,{'atom',1009,'goto'}}]]]]]],[]}],
		%% Line 1014
		'type' =
		    %% Line 1014
		    [{{'record','item'},[{'record_field',1015,{'atom',1015,'rule_pointer'}}|[{'record_field',1016,{'atom',1016,'look_ahead'}}|[{'record_field',1017,{'atom',1017,'rhs'}}]]],[]}],
		%% Line 1545
		'type' =
		    %% Line 1545
		    [{{'record','cxt'},[{'record_field',1545,{'atom',1545,'terminal'}}|[{'record_field',1545,{'atom',1545,'state_n'}}|[{'record_field',1545,{'atom',1545,'yecc'}}|[{'record_field',1545,{'atom',1545,'res'}}]]]],[]}],
		%% Line 1675
		'type' =
		    %% Line 1675
		    [{{'record','part_data'},[{'record_field',1675,{'atom',1675,'name'}}|[{'record_field',1675,{'atom',1675,'eq_state'}}|[{'record_field',1675,{'atom',1675,'actions'}}|[{'record_field',1675,{'atom',1675,'n_actions'}}|[{'record_field',1675,{'atom',1675,'states'}}]]]]],[]}]]
'compile'/3 =
    %% Line 136
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Input0,Output0,%% Line 137
			  {'options',Includes,_cor13,_cor14,_cor15,WarnLevel,Verbose,_cor16,%% Line 138
											    Specific,_cor17,_cor18}> when 'true' ->
	      let <Input> =
		  %% Line 139
		  apply 'shorten_filename'/1
		      (Input0)
	      in  let <Output> =
		      %% Line 140
		      apply 'shorten_filename'/1
			  (Output0)
		  in  let <Includefile> =
			  %% Line 141
			  call 'lists':'sublist'
			      (Includes, 1)
		      in  let <Werror> =
			      %% Line 142
			      call 'proplists':'get_bool'
				  ('warnings_as_errors', Specific)
			  in  let <_cor7> =
				  %% Line 144
				  call 'erlang':'>'
				      (WarnLevel, 0)
			      in  let <Opts> =
				      %% Line 143
				      [{'parserfile',Output}|[{'includefile',Includefile}|[{'verbose',Verbose}|%% Line 144
													       [{'report_errors','true'}|[{'report_warnings',_cor7}|%% Line 145
																				    [{'warnings_as_errors',Werror}|[]]]]]]]
				  in  %% Line 146
				      case apply 'file'/2
					       (Input, Opts) of
					%% Line 147
					<{'ok',_X_OutFile}> when 'true' ->
					    %% Line 148
					    'ok'
					%% Line 149
					<'error'> when 'true' ->
					    %% Line 150
					    'error'
					( <_cor9> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_cor9})
					  -| ['compiler_generated'] )
				      end
	  ( <_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10})
		  -| [{'function_name',{'compile',3}}] )
	    -| ['compiler_generated'] )
	end
'format_error'/1 =
    %% Line 153
    fun (_cor0) ->
	case _cor0 of
	  <'bad_declaration'> when 'true' ->
	      %% Line 154
	      call 'io_lib':'fwrite'
		  ([117|[110|[107|[110|[111|[119|[110|[32|[111|[114|[32|[98|[97|[100|[32|[100|[101|[99|[108|[97|[114|[97|[116|[105|[111|[110|[44|[32|[105|[103|[110|[111|[114|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [])
	  %% Line 155
	  <{'bad_expect',SymName}> when 'true' ->
	      let <_cor1> =
		  %% Line 157
		  apply 'format_symbol'/1
		      (SymName)
	      in  %% Line 156
		  call 'io_lib':'fwrite'
		      ([97|[114|[103|[117|[109|[101|[110|[116|[32|[126|[115|[32|[111|[102|[32|[69|[120|[112|[101|[99|[116|[32|[105|[115|[32|[110|[111|[116|[32|[97|[110|[32|[105|[110|[116|[101|[103|[101|[114]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 157
																														       [_cor1|[]])
	  %% Line 158
	  <{'bad_rootsymbol',SymName}> when 'true' ->
	      let <_cor2> =
		  %% Line 160
		  apply 'format_symbol'/1
		      (SymName)
	      in  %% Line 159
		  call 'io_lib':'fwrite'
		      ([114|[111|[111|[116|[115|[121|[109|[98|[111|[108|[32|[126|[115|[32|[105|[115|[32|[110|[111|[116|[32|[97|[32|[110|[111|[110|[116|[101|[114|[109|[105|[110|[97|[108]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 160
																											    [_cor2|[]])
	  %% Line 161
	  <{'bad_states',SymName}> when 'true' ->
	      let <_cor3> =
		  %% Line 163
		  apply 'format_symbol'/1
		      (SymName)
	      in  %% Line 162
		  call 'io_lib':'fwrite'
		      ([97|[114|[103|[117|[109|[101|[110|[116|[32|[126|[115|[32|[111|[102|[32|[83|[116|[97|[116|[101|[115|[32|[105|[115|[32|[110|[111|[116|[32|[97|[110|[32|[105|[110|[116|[101|[103|[101|[114]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 163
																														       [_cor3|[]])
	  %% Line 164
	  <{'conflict',Conflict}> when 'true' ->
	      %% Line 165
	      apply 'format_conflict'/1
		  (Conflict)
	  %% Line 166
	  <{'conflicts',SR,RR}> when 'true' ->
	      %% Line 167
	      call 'io_lib':'fwrite'
		  ([99|[111|[110|[102|[108|[105|[99|[116|[115|[58|[32|[126|[119|[32|[115|[104|[105|[102|[116|[47|[114|[101|[100|[117|[99|[101|[44|[32|[126|[119|[32|[114|[101|[100|[117|[99|[101|[47|[114|[101|[100|[117|[99|[101]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [SR|[RR|[]]])
	  %% Line 168
	  <{'duplicate_declaration',Tag}> when 'true' ->
	      let <_cor4> =
		  %% Line 169
		  call 'erlang':'atom_to_list'
		      (Tag)
	      in  %% Line 169
		  call 'io_lib':'fwrite'
		      ([100|[117|[112|[108|[105|[99|[97|[116|[101|[32|[100|[101|[99|[108|[97|[114|[97|[116|[105|[111|[110|[32|[111|[102|[32|[126|[115]]]]]]]]]]]]]]]]]]]]]]]]]]], [_cor4|[]])
	  %% Line 170
	  <{'duplicate_nonterminal',Nonterminal}> when 'true' ->
	      let <_cor5> =
		  %% Line 172
		  apply 'format_symbol'/1
		      (Nonterminal)
	      in  %% Line 171
		  call 'io_lib':'fwrite'
		      ([100|[117|[112|[108|[105|[99|[97|[116|[101|[32|[110|[111|[110|[45|[116|[101|[114|[109|[105|[110|[97|[108|[115|[32|[126|[115]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 172
																					      [_cor5|[]])
	  %% Line 173
	  <{'duplicate_precedence',Op}> when 'true' ->
	      let <_cor6> =
		  %% Line 175
		  apply 'format_symbol'/1
		      (Op)
	      in  %% Line 174
		  call 'io_lib':'fwrite'
		      ([100|[117|[112|[108|[105|[99|[97|[116|[101|[32|[112|[114|[101|[99|[101|[100|[101|[110|[99|[101|[32|[111|[112|[101|[114|[97|[116|[111|[114|[32|[126|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 175
																										[_cor6|[]])
	  %% Line 176
	  <{'duplicate_terminal',Terminal}> when 'true' ->
	      let <_cor7> =
		  %% Line 178
		  apply 'format_symbol'/1
		      (Terminal)
	      in  %% Line 177
		  call 'io_lib':'fwrite'
		      ([100|[117|[112|[108|[105|[99|[97|[116|[101|[32|[116|[101|[114|[109|[105|[110|[97|[108|[32|[126|[115]]]]]]]]]]]]]]]]]]]]], %% Line 178
																		 [_cor7|[]])
	  %% Line 179
	  <{'endsymbol_is_nonterminal',Symbol}> when 'true' ->
	      let <_cor8> =
		  %% Line 181
		  apply 'format_symbol'/1
		      (Symbol)
	      in  %% Line 180
		  call 'io_lib':'fwrite'
		      ([101|[110|[100|[115|[121|[109|[98|[111|[108|[32|[126|[115|[32|[105|[115|[32|[97|[32|[110|[111|[110|[116|[101|[114|[109|[105|[110|[97|[108]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 181
																							       [_cor8|[]])
	  %% Line 182
	  <{'endsymbol_is_terminal',Symbol}> when 'true' ->
	      let <_cor9> =
		  %% Line 184
		  apply 'format_symbol'/1
		      (Symbol)
	      in  %% Line 183
		  call 'io_lib':'fwrite'
		      ([101|[110|[100|[115|[121|[109|[98|[111|[108|[32|[126|[115|[32|[105|[115|[32|[97|[32|[116|[101|[114|[109|[105|[110|[97|[108]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 184
																					     [_cor9|[]])
	  %% Line 185
	  <{'error',Module,Error}> when 'true' ->
	      %% Line 186
	      call Module:'format_error'
		  (Error)
	  %% Line 187
	  <{'file_error',Reason}> when 'true' ->
	      let <_cor10> =
		  %% Line 188
		  call 'file':'format_error'
		      (Reason)
	      in  %% Line 188
		  call 'io_lib':'fwrite'
		      ([126|[116|[115]]], [_cor10|[]])
	  %% Line 189
	  <'illegal_empty'> when 'true' ->
	      %% Line 190
	      call 'io_lib':'fwrite'
		  ([105|[108|[108|[101|[103|[97|[108|[32|[117|[115|[101|[32|[111|[102|[32|[101|[109|[112|[116|[121|[32|[115|[121|[109|[98|[111|[108]]]]]]]]]]]]]]]]]]]]]]]]]]], [])
	  %% Line 191
	  <{'internal_error',Error}> when 'true' ->
	      %% Line 192
	      call 'io_lib':'fwrite'
		  ([105|[110|[116|[101|[114|[110|[97|[108|[32|[121|[101|[99|[99|[32|[101|[114|[114|[111|[114|[58|[32|[126|[119]]]]]]]]]]]]]]]]]]]]]]], [Error|[]])
	  %% Line 193
	  <{'missing_syntax_rule',Nonterminal}> when 'true' ->
	      let <_cor11> =
		  %% Line 195
		  apply 'format_symbol'/1
		      (Nonterminal)
	      in  %% Line 194
		  call 'io_lib':'fwrite'
		      ([110|[111|[32|[115|[121|[110|[116|[97|[120|[32|[114|[117|[108|[101|[32|[102|[111|[114|[32|[110|[111|[110|[45|[116|[101|[114|[109|[105|[110|[97|[108|[32|[115|[121|[109|[98|[111|[108|[32|[126|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 195
																																    [_cor11|[]])
	  %% Line 196
	  <{'n_states',Exp,N}> when 'true' ->
	      %% Line 197
	      call 'io_lib':'fwrite'
		  ([101|[120|[112|[101|[99|[116|[101|[100|[32|[126|[119|[32|[115|[116|[97|[116|[101|[115|[44|[32|[98|[117|[116|[32|[103|[111|[116|[32|[126|[112|[32|[115|[116|[97|[116|[101|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Exp|[N|[]]])
	  %% Line 198
	  <'no_grammar_rules'> when 'true' ->
	      %% Line 199
	      call 'io_lib':'fwrite'
		  ([103|[114|[97|[109|[109|[97|[114|[32|[114|[117|[108|[101|[115|[32|[97|[114|[101|[32|[109|[105|[115|[115|[105|[110|[103]]]]]]]]]]]]]]]]]]]]]]]]], [])
	  %% Line 200
	  <'nonterminals_missing'> when 'true' ->
	      %% Line 201
	      call 'io_lib':'fwrite'
		  ([78|[111|[110|[116|[101|[114|[109|[105|[110|[97|[108|[115|[32|[105|[115|[32|[109|[105|[115|[115|[105|[110|[103]]]]]]]]]]]]]]]]]]]]]]], [])
	  %% Line 202
	  <{'precedence_op_is_endsymbol',SymName}> when 'true' ->
	      let <_cor12> =
		  %% Line 204
		  apply 'format_symbol'/1
		      (SymName)
	      in  %% Line 203
		  call 'io_lib':'fwrite'
		      ([112|[114|[101|[99|[101|[100|[101|[110|[99|[101|[32|[111|[112|[101|[114|[97|[116|[111|[114|[32|[126|[115|[32|[105|[115|[32|[101|[110|[100|[115|[121|[109|[98|[111|[108]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 204
																												  [_cor12|[]])
	  %% Line 205
	  <{'precedence_op_is_unknown',SymName}> when 'true' ->
	      let <_cor13> =
		  %% Line 207
		  apply 'format_symbol'/1
		      (SymName)
	      in  %% Line 206
		  call 'io_lib':'fwrite'
		      ([117|[110|[107|[110|[111|[119|[110|[32|[112|[114|[101|[99|[101|[100|[101|[110|[99|[101|[32|[111|[112|[101|[114|[97|[116|[111|[114|[32|[126|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 207
																								      [_cor13|[]])
	  %% Line 208
	  <{'reserved',N}> when 'true' ->
	      %% Line 209
	      call 'io_lib':'fwrite'
		  ([116|[104|[101|[32|[117|[115|[101|[32|[111|[102|[32|[126|[119|[32|[115|[104|[111|[117|[108|[100|[32|[98|[101|[32|[97|[118|[111|[105|[100|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [N|[]])
	  %% Line 210
	  <{'symbol_terminal_and_nonterminal',SymName}> when 'true' ->
	      let <_cor14> =
		  %% Line 212
		  apply 'format_symbol'/1
		      (SymName)
	      in  %% Line 211
		  call 'io_lib':'fwrite'
		      ([115|[121|[109|[98|[111|[108|[32|[126|[115|[32|[105|[115|[32|[98|[111|[116|[104|[32|[97|[32|[116|[101|[114|[109|[105|[110|[97|[108|[32|[97|[110|[100|[32|[110|[111|[110|[116|[101|[114|[109|[105|[110|[97|[108]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 212
																																		   [_cor14|[]])
	  %% Line 213
	  <'rootsymbol_missing'> when 'true' ->
	      %% Line 214
	      call 'io_lib':'fwrite'
		  ([82|[111|[111|[116|[115|[121|[109|[98|[111|[108|[32|[105|[115|[32|[109|[105|[115|[115|[105|[110|[103]]]]]]]]]]]]]]]]]]]]], [])
	  %% Line 215
	  <'terminals_missing'> when 'true' ->
	      %% Line 216
	      call 'io_lib':'fwrite'
		  ([84|[101|[114|[109|[105|[110|[97|[108|[115|[32|[105|[115|[32|[109|[105|[115|[115|[105|[110|[103]]]]]]]]]]]]]]]]]]]], [])
	  %% Line 217
	  <{'undefined_nonterminal',Symbol}> when 'true' ->
	      let <_cor15> =
		  %% Line 218
		  apply 'format_symbol'/1
		      (Symbol)
	      in  %% Line 218
		  call 'io_lib':'fwrite'
		      ([117|[110|[100|[101|[102|[105|[110|[101|[100|[32|[110|[111|[110|[116|[101|[114|[109|[105|[110|[97|[108|[58|[32|[126|[115]]]]]]]]]]]]]]]]]]]]]]]]], [_cor15|[]])
	  %% Line 219
	  <{'undefined_pseudo_variable',Atom}> when 'true' ->
	      %% Line 220
	      call 'io_lib':'fwrite'
		  ([117|[110|[100|[101|[102|[105|[110|[101|[100|[32|[112|[115|[101|[117|[100|[111|[32|[118|[97|[114|[105|[97|[98|[108|[101|[32|[126|[119]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Atom|[]])
	  %% Line 221
	  <{'undefined_symbol',SymName}> when 'true' ->
	      let <_cor16> =
		  %% Line 222
		  apply 'format_symbol'/1
		      (SymName)
	      in  %% Line 222
		  call 'io_lib':'fwrite'
		      ([117|[110|[100|[101|[102|[105|[110|[101|[100|[32|[114|[104|[115|[32|[115|[121|[109|[98|[111|[108|[32|[126|[115]]]]]]]]]]]]]]]]]]]]]]], [_cor16|[]])
	  %% Line 223
	  <{'unused_nonterminal',Nonterminal}> when 'true' ->
	      let <_cor17> =
		  %% Line 225
		  apply 'format_symbol'/1
		      (Nonterminal)
	      in  %% Line 224
		  call 'io_lib':'fwrite'
		      ([110|[111|[110|[45|[116|[101|[114|[109|[105|[110|[97|[108|[32|[115|[121|[109|[98|[111|[108|[32|[126|[115|[32|[110|[111|[116|[32|[117|[115|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 225
																									   [_cor17|[]])
	  %% Line 226
	  <{'unused_terminal',Terminal}> when 'true' ->
	      let <_cor18> =
		  %% Line 228
		  apply 'format_symbol'/1
		      (Terminal)
	      in  %% Line 227
		  call 'io_lib':'fwrite'
		      ([116|[101|[114|[109|[105|[110|[97|[108|[32|[115|[121|[109|[98|[111|[108|[32|[126|[115|[32|[110|[111|[116|[32|[117|[115|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 228
																						    [_cor18|[]])
	  %% Line 229
	  <{'bad_symbol',String}> when 'true' ->
	      %% Line 230
	      call 'io_lib':'fwrite'
		  ([98|[97|[100|[32|[115|[121|[109|[98|[111|[108|[32|[126|[116|[115]]]]]]]]]]]]]], [String|[]])
	  %% Line 231
	  <'cannot_parse'> when 'true' ->
	      %% Line 232
	      call 'io_lib':'fwrite'
		  ([99|[97|[110|[110|[111|[116|[32|[112|[97|[114|[115|[101|[59|[32|[112|[111|[115|[115|[105|[98|[108|[121|[32|[101|[110|[99|[111|[100|[105|[110|[103|[32|[109|[105|[115|[109|[97|[116|[99|[104]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [])
	  ( <_cor19> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor19})
		  -| [{'function_name',{'format_error',1}}] )
	    -| ['compiler_generated'] )
	end
'file'/1 =
    %% Line 234
    fun (_cor0) ->
	%% Line 235
	apply 'file'/2
	    (_cor0, ['report_errors'|['report_warnings']])
'file'/2 =
    %% Line 237
    fun (_cor1,_cor0) ->
	do  %% Line 238
	    case apply 'is_filename'/1
		     (_cor1) of
	      %% Line 239
	      <'no'> when 'true' ->
		  call 'erlang':'error'
		      ('badarg', [_cor1|[_cor0|[]]])
	      %% Line 240
	      <_cor10> when 'true' ->
		  'ok'
	    end
	    %% Line 242
	    case apply 'options'/1
		     (_cor0) of
	      %% Line 243
	      <'badarg'> when 'true' ->
		  %% Line 244
		  call 'erlang':'error'
		      ('badarg', [_cor1|[_cor0|[]]])
	      %% Line 245
	      <OptionValues> when 'true' ->
		  let <Self> =
		      %% Line 246
		      call 'erlang':'self'
			  ()
		  in  let <Flag> =
			  %% Line 247
			  call 'erlang':'process_flag'
			      ('trap_exit', 'false')
		      in  let <_cor5> =
			      %% Line 248
			      ( fun () ->
				    apply 'infile'/3
					(Self, _cor1, OptionValues)
				-| [{'id',{0,0,'-file/2-fun-0-'}}] )
			  in  let <Pid> =
				  %% Line 248
				  call 'erlang':'spawn_link'
				      (_cor5)
			      in  %% Line 249
				  receive
				    %% Line 250
				    <{_cor11,Rep}>
					when call 'erlang':'=:='
					      (_cor11,
					       Pid) ->
					do  %% Line 251
					    receive
					      
					    after 1 ->
					      'ok'
					    do  %% Line 252
						call 'erlang':'process_flag'
						    ('trap_exit', Flag)
						%% Line 253
						Rep
				  after 'infinity' ->
				    'true'
	    end
'yecc'/2 =
    %% Line 258
    fun (_cor1,_cor0) ->
	%% Line 259
	apply 'yecc'/4
	    (_cor1, _cor0, 'false', [])
'yecc'/3 =
    %% Line 261
    fun (_cor2,_cor1,_cor0) ->
	%% Line 262
	apply 'yecc'/4
	    (_cor2, _cor1, _cor0, [])
'yecc'/4 =
    %% Line 264
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_X_> =
	    %% Line 265
	    ( call 'erlang':'statistics'
		  ('runtime')
	      -| ['result_not_wanted'] )
	in  %% Line 266
	    case apply 'file'/2
		     (_cor3, [{'parserfile',_cor2}|%% Line 267
						   [{'verbose',_cor1}|%% Line 268
								      [{'report','true'}|%% Line 269
											 [{'includefile',_cor0}|[]]]]]) of
	      %% Line 270
	      <{'ok',_X_File}> when 'true' ->
		  %% Line 271
		  call 'erlang':'statistics'
		      ('runtime')
	      %% Line 272
	      <'error'> when 'true' ->
		  %% Line 273
		  call 'erlang':'exit'
		      ('error')
	      ( <_cor5> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor5})
		-| ['compiler_generated'] )
	    end
'options'/1 =
    %% Line 280
    fun (_cor0) ->
	case _cor0 of
	  <Options0>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      %% Line 281
	      try
		  let <_cor3> =
		      %% Line 282
		      ( fun (_cor1) ->
			    case _cor1 of
			      <'return'> when 'true' ->
				  apply 'short_option'/2
				      ('return', 'true')
			      %% Line 283
			      <'report'> when 'true' ->
				  apply 'short_option'/2
				      ('report', 'true')
			      %% Line 284
			      <{'return',T}> when 'true' ->
				  apply 'short_option'/2
				      ('return', T)
			      %% Line 285
			      <{'report',T}> when 'true' ->
				  apply 'short_option'/2
				      ('report', T)
			      %% Line 286
			      <T> when 'true' ->
				  [T|[]]
			    end
			-| [{'id',{0,0,'-options/1-fun-0-'}}] )
		  in  let <Options> =
			  %% Line 282
			  call 'lists':'flatmap'
			      (_cor3, %% Line 287
				      Options0)
		      in  %% Line 288
			  apply 'options'/3
			      (Options, ['file_attributes'|['includefile'|['parserfile'|['report_errors'|['report_warnings'|['warnings_as_errors'|['return_errors'|['return_warnings'|['time'|['verbose']]]]]]]]]], %% Line 290
																										    [])
	      of <_cor5> ->
		  _cor5
	      catch <_cor8,_cor7,_cor6> ->
		  case <_cor8,_cor7,_cor6> of
		    %% Line 291
		    <'error',_cor10,_cor11> when 'true' ->
			'badarg'
		    ( <_cor8,_cor7,_cor6> when 'true' ->
			  primop 'raise'
			      (_cor6, _cor7)
		      -| ['compiler_generated'] )
		  end
	  %% Line 293
	  <Option> when 'true' ->
	      %% Line 294
	      apply 'options'/1
		  ([Option|[]])
	end
'short_option'/2 =
    %% Line 296
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'return',T> when 'true' ->
	      %% Line 297
	      [{'return_errors',T}|[{'return_warnings',T}|[]]]
	  %% Line 298
	  <'report',T> when 'true' ->
	      %% Line 299
	      [{'report_errors',T}|[{'report_warnings',T}|[]]]
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'short_option',2}}] )
	    -| ['compiler_generated'] )
	end
'options'/3 =
    %% Line 301
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Options0,[Key|Keys],L>
	      when call 'erlang':'is_list'
		    (Options0) ->
	      let <_cor6> =
		  %% Line 302
		  case call 'lists':'member'
			   (Key, Options0) of
		    %% Line 303
		    <'true'> when 'true' ->
			let <_cor3> =
			    %% Line 304
			    apply 'atom_option'/1
				(Key)
			in  let <_cor4> =
				%% Line 304
				call 'lists':'delete'
				    (Key, Options0)
			    in  %% Line 304
				[_cor3|_cor4]
		    %% Line 305
		    <'false'> when 'true' ->
			%% Line 306
			Options0
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor5})
		      -| ['compiler_generated'] )
		  end
	      in  let <_cor13> =
		      %% Line 308
		      case call 'lists':'keyfind'
			       (Key, 1, _cor6) of
			%% Line 309
			<{_cor26,Filename0}>
			    when let <_cor27> =
				  call 'erlang':'=:='
				      (_cor26, Key)
			      in  let <_cor8> =
				      call 'erlang':'=:='
					  (Key, 'includefile')
				  in  let <_cor9> =
					  %% Line 310
					  call 'erlang':'=:='
					      (Key, 'parserfile')
				      in  let <_cor28> =
					      call 'erlang':'or'
						  (_cor8, _cor9)
					  in  call 'erlang':'and'
						  (_cor27, _cor28) ->
			    %% Line 311
			    case apply 'is_filename'/1
				     (Filename0) of
			      %% Line 312
			      <'no'> when 'true' ->
				  %% Line 313
				  'badarg'
			      %% Line 314
			      <Filename> when 'true' ->
				  %% Line 315
				  {'ok',[{Key,Filename}|[]]}
			    end
			%% Line 317
			<KB = {_cor29,Bool}>
			    when let <_cor30> =
				  call 'erlang':'=:='
				      (_cor29, Key)
			      in  let <_cor31> =
				      call 'erlang':'is_boolean'
					  (Bool)
				  in  call 'erlang':'and'
					  (_cor30, _cor31) ->
			    %% Line 318
			    {'ok',[KB|[]]}
			%% Line 319
			<{_cor32,_cor33}>
			    when call 'erlang':'=:='
				  (_cor32,
				   Key) ->
			    %% Line 320
			    'badarg'
			%% Line 321
			<'false'> when 'true' ->
			    let <_cor11> =
				%% Line 322
				apply 'default_option'/1
				    (Key)
			    in  %% Line 322
				{'ok',[{Key,_cor11}|[]]}
			( <_cor12> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor12})
			  -| ['compiler_generated'] )
		      end
		  in  %% Line 324
		      case _cor13 of
			%% Line 325
			<'badarg'> when 'true' ->
			    %% Line 326
			    'badarg'
			%% Line 327
			<{'ok',KeyValueL}> when 'true' ->
			    let <NewOptions> =
				%% Line 328
				call 'lists':'keydelete'
				    (Key, 1, _cor6)
			    in  let <_cor16> =
				    %% Line 329
				    call 'erlang':'++'
					(KeyValueL, L)
				in  %% Line 329
				    apply 'options'/3
					(NewOptions, Keys, _cor16)
			( <_cor17> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor17})
			  -| ['compiler_generated'] )
		      end
	  %% Line 331
	  <[],[],L> when 'true' ->
	      let <_cor22> =
		  %% Line 332
		  ( fun (_cor19,_cor18) ->
			case <_cor19,_cor18> of
			  <{_cor34,'false'},A> when 'true' ->
			      A
			  %% Line 333
			  <{Tag,'true'},A> when 'true' ->
			      [Tag|A]
			  %% Line 334
			  <F,A> when 'true' ->
			      [F|A]
			end
		    -| [{'id',{0,0,'-options/3-fun-0-'}}] )
	      in  %% Line 332
		  call 'lists':'foldl'
		      (_cor22, %% Line 335
			       [], %% Line 335
				   L)
	  %% Line 336
	  <_X_Options,_cor35,_X_L> when 'true' ->
	      %% Line 337
	      'badarg'
	end
'default_option'/1 =
    %% Line 339
    fun (_cor0) ->
	case _cor0 of
	  <'file_attributes'> when 'true' ->
	      'true'
	  %% Line 340
	  <'includefile'> when 'true' ->
	      []
	  %% Line 341
	  <'parserfile'> when 'true' ->
	      []
	  %% Line 342
	  <'report_errors'> when 'true' ->
	      'true'
	  %% Line 343
	  <'report_warnings'> when 'true' ->
	      'true'
	  %% Line 344
	  <'warnings_as_errors'> when 'true' ->
	      'false'
	  %% Line 345
	  <'return_errors'> when 'true' ->
	      'false'
	  %% Line 346
	  <'return_warnings'> when 'true' ->
	      'false'
	  %% Line 347
	  <'time'> when 'true' ->
	      'false'
	  %% Line 348
	  <'verbose'> when 'true' ->
	      'false'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'default_option',1}}] )
	    -| ['compiler_generated'] )
	end
'atom_option'/1 =
    %% Line 350
    fun (_cor0) ->
	case _cor0 of
	  <'file_attributes'> when 'true' ->
	      {'file_attributes','true'}
	  %% Line 351
	  <'report_errors'> when 'true' ->
	      {'report_errors','true'}
	  %% Line 352
	  <'report_warnings'> when 'true' ->
	      {'report_warnings','true'}
	  %% Line 353
	  <'warnings_as_errors'> when 'true' ->
	      {'warnings_as_errors','true'}
	  %% Line 354
	  <'return_errors'> when 'true' ->
	      {'return_errors','true'}
	  %% Line 355
	  <'return_warnings'> when 'true' ->
	      {'return_warnings','true'}
	  %% Line 356
	  <'time'> when 'true' ->
	      {'time','true'}
	  %% Line 357
	  <'verbose'> when 'true' ->
	      {'verbose','true'}
	  %% Line 358
	  <Key> when 'true' ->
	      Key
	end
'is_filename'/1 =
    %% Line 360
    fun (_cor0) ->
	%% Line 361
	try
	    call 'filename':'flatten'
		(_cor0)
	of <_cor1> ->
	    _cor1
	catch <_cor4,_cor3,_cor2> ->
	    case <_cor4,_cor3,_cor2> of
	      %% Line 362
	      <'error',_cor6,_cor7> when 'true' ->
		  'no'
	      ( <_cor4,_cor3,_cor2> when 'true' ->
		    primop 'raise'
			(_cor2, _cor3)
		-| ['compiler_generated'] )
	    end
'shorten_filename'/1 =
    %% Line 365
    fun (_cor0) ->
	%% Line 366
	case call 'file':'get_cwd'
		 () of
	  <{'ok',Cwd}> when 'true' ->
	      %% Line 367
	      case call 'lists':'prefix'
		       (Cwd, _cor0) of
		%% Line 368
		<'false'> when 'true' ->
		    _cor0
		%% Line 369
		<'true'> when 'true' ->
		    let <_cor2> =
			%% Line 370
			call 'erlang':'length'
			    (Cwd)
		    in  %% Line 370
			case call 'lists':'nthtail'
				 (_cor2, _cor0) of
			  %% Line 371
			  <[47|N]> when 'true' ->
			      N
			  %% Line 372
			  <N> when 'true' ->
			      N
			end
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'start'/2 =
    %% Line 376
    fun (_cor1,_cor0) ->
	let <Infile> =
	    %% Line 377
	    apply 'assure_extension'/2
		(_cor1, [46|[121|[114|[108]]]])
	in  %% Line 378
	    case call 'lists':'keyfind'
		     ('parserfile', 1, _cor0) of
	      <{_cor19,Outfilex0}> when 'true' ->
		  %% Line 379
		  case call 'lists':'keyfind'
			   ('includefile', 1, _cor0) of
		    <{_cor20,Includefilex}> when 'true' ->
			let <_cor6> =
			    %% Line 380
			    case Outfilex0 of
			      %% Line 381
			      <[]> when 'true' ->
				  call 'filename':'rootname'
				      (_cor1, [46|[121|[114|[108]]]])
			      %% Line 382
			      <_cor21> when 'true' ->
				  Outfilex0
			    end
			in  let <_cor9> =
				%% Line 384
				case Includefilex of
				  %% Line 385
				  <[]> when 'true' ->
				      []
				  %% Line 386
				  <_cor22> when 'true' ->
				      apply 'assure_extension'/2
					  (Includefilex, [46|[104|[114|[108]]]])
				end
			    in  let <IncludefileVersion> =
				    %% Line 388
				    apply 'includefile_version'/1
					(_cor9)
				in  let <Outfile> =
					%% Line 389
					apply 'assure_extension'/2
					    (_cor6, [46|[101|[114|[108]]]])
				    in  let <_cor13> =
					    %% Line 390
					    call 'filename':'basename'
						(Outfile, [46|[101|[114|[108]]]])
					in  let <Module> =
						%% Line 390
						call 'erlang':'list_to_atom'
						    (_cor13)
					    in  let <_cor16> =
						    %% Line 397
						    call 'lists':'member'
							('verbose', _cor0)
						in  let <_cor15> =
							%% Line 398
							call 'lists':'member'
							    ('file_attributes', _cor0)
						    in  %% Line 391
							{'yecc',Infile,%% Line 392
								       Outfile,_cor9,%% Line 394
										     IncludefileVersion,%% Line 395
													Module,'none',_cor0,_cor16,_cor15,[],[],'false',[],[],0,'undefined','undefined','undefined','undefined','undefined','undefined','undefined','undefined','undefined',[],[],[],[],[],'undefined','undefined',[],[],[],[],[],'none'}
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor4})
		      -| ['compiler_generated'] )
		  end
	      ( <_cor3> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor3})
		-| ['compiler_generated'] )
	    end
'assure_extension'/2 =
    %% Line 400
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 401
	    apply 'strip_extension'/2
		(_cor1, _cor0)
	in  %% Line 401
	    call 'lists':'concat'
		([_cor2|[_cor0|[]]])
'strip_extension'/2 =
    %% Line 404
    fun (_cor1,_cor0) ->
	%% Line 405
	case call 'filename':'extension'
		 (_cor1) of
	  %% Line 406
	  <_cor5>
	      when call 'erlang':'=:='
		    (_cor5,
		     _cor0) ->
	      call 'filename':'rootname'
		  (_cor1)
	  %% Line 407
	  <_X_Other> when 'true' ->
	      _cor1
	end
'infile'/3 =
    %% Line 410
    fun (_cor2,_cor1,_cor0) ->
	let <St0> =
	    %% Line 411
	    apply 'start'/2
		(_cor1, _cor0)
	in  %% Line 412
	    ( case St0 of
		( <( {'yecc',_rec0,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,_cor69}
		     -| ['compiler_generated'] )> when 'true' ->
		      let <_cor20> =
			  case call 'file':'open'
				   (_rec0, ['read'|['read_ahead']]) of
			    %% Line 413
			    <{'ok',Inport}> when 'true' ->
				%% Line 414
				letrec
				    'after$^0'/0 =
					fun () ->
					    let <_cor71> =
						%% Line 419
						call 'file':'close'
						    (Inport)
					    in  %% Line 419
						case _cor71 of
						  <'ok'> when 'true' ->
						      ( _cor71
							-| ['compiler_generated'] )
						  ( <_cor12> when 'true' ->
							primop 'match_fail'
							    ({'badmatch',_cor12})
						    -| ['compiler_generated'] )
						end
				in  try
					let <Encoding> =
					    %% Line 415
					    call 'epp':'set_encoding'
						(Inport)
					in  let <_cor8> =
						%% Line 416
						call 'erlang':'setelement'
						    (17, St0, Inport)
					    in  let <_cor10> =
						    %% Line 416
						    call 'erlang':'setelement'
							(7, _cor8, Encoding)
						in  %% Line 417
						    apply 'outfile'/1
							(_cor10)
				    of <_cor13> ->
					do  ( apply 'after$^0'/0
						  ()
					      -| ['compiler_generated'] )
					    _cor13
				    catch <_cor16,_cor15,_cor14> ->
					do  ( apply 'after$^0'/0
						  ()
					      -| ['compiler_generated'] )
					    primop 'raise'
						(_cor14, _cor15)
			    %% Line 421
			    <{'error',Reason}> when 'true' ->
				%% Line 422
				apply 'add_error'/4
				    (_rec0, 'none', {'file_error',Reason}, St0)
			    ( <_cor19> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor19})
			      -| ['compiler_generated'] )
			  end
		      in  %% Line 424
			  ( case _cor20 of
			      ( <( {'yecc',_cor147,_cor148,_cor149,_cor150,_cor151,_cor152,_cor153,_cor154,_cor155,_rec3,_cor156,_cor157,_cor158,_cor159,_cor160,_cor161,_cor162,_cor163,_cor164,_cor165,_cor166,_cor167,_cor168,_cor169,_cor170,_cor171,_cor172,_cor173,_cor174,_cor175,_cor176,_cor177,_cor178,_cor179,_cor180,_cor181,_cor182}
				   -| ['compiler_generated'] )> when 'true' ->
				    let <_cor22> =
					apply 'werror'/1
					    (_cor20)
				    in  do  case <_rec3,_cor22> of
					      %% Line 425
					      <[],'false'> when 'true' ->
						  'ok'
					      %% Line 426
					      <_fol26,_fol27> when 'true' ->
						  do  ( call 'file':'delete'
							    (_cor148)
							-| ['result_not_wanted'] )
						      'ok'
					    end
					    let <_cor30> =
						%% Line 428
						call 'erlang':'self'
						    ()
					    in  let <_cor29> =
						    %% Line 428
						    apply 'yecc_ret'/1
							(_cor20)
						in  %% Line 428
						    call 'erlang':'!'
							(_cor2, {_cor30,_cor29})
				-| ['compiler_generated'] )
			      ( <_cor183> when 'true' ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {'badrecord','yecc'}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
		  -| ['compiler_generated'] )
		( <_cor70> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','yecc'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	      -| ['compiler_generated'] )
'werror'/1 =
    %% Line 430
    fun (_cor0) ->
	%% Line 431
	( case _cor0 of
	    ( <( {'yecc',_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_rec5,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43}
		 -| ['compiler_generated'] )> when 'true' ->
		  %% Line 432
		  ( case <> of
		      ( <>
			    when call 'erlang':'=/='
				  (_rec5,
				   []) ->
			    call 'lists':'member'
				('warnings_as_errors', _cor14)
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    'false'
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	    ( <_cor44> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','yecc'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'outfile'/1 =
    %% Line 434
    fun (_cor0) ->
	%% Line 435
	( case _cor0 of
	    ( <( {'yecc',_cor20,_rec7,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55}
		 -| ['compiler_generated'] )> when 'true' ->
		  case call 'file':'open'
			   (_rec7, ['write'|['delayed_write']]) of
		    %% Line 436
		    <{'ok',Outport}> when 'true' ->
			%% Line 437
			letrec
			    'after$^0'/0 =
				fun () ->
				    let <_cor57> =
					%% Line 447
					call 'file':'close'
					    (Outport)
				    in  %% Line 447
					case _cor57 of
					  <'ok'> when 'true' ->
					      ( _cor57
						-| ['compiler_generated'] )
					  ( <_cor11> when 'true' ->
						primop 'match_fail'
						    ({'badmatch',_cor11})
					    -| ['compiler_generated'] )
					end
			in  try
				try
				    do  %% Line 439
					apply 'set_encoding'/2
					    (_cor0, Outport)
					let <_cor4> =
					    %% Line 440
					    call 'erlang':'setelement'
						(19, _cor0, 1)
					in  let <_cor6> =
						%% Line 440
						call 'erlang':'setelement'
						    (18, _cor4, Outport)
					    in  %% Line 440
						apply 'generate'/1
						    (_cor6)
				of <_cor7> ->
				    _cor7
				catch <_cor10,_cor9,_cor8> ->
				    case <_cor10,_cor9,_cor8> of
				      %% Line 442
				      <'throw',St1,_cor96> when 'true' ->
					  %% Line 443
					  St1
				      %% Line 444
				      <'exit',Reason,_cor97> when 'true' ->
					  %% Line 445
					  apply 'add_error'/2
					      ({'internal_error',Reason}, _cor0)
				      ( <_cor10,_cor9,_cor8> when 'true' ->
					    primop 'raise'
						(_cor8, _cor9)
					-| ['compiler_generated'] )
				    end
			    of <_cor12> ->
				do  ( apply 'after$^0'/0
					  ()
				      -| ['compiler_generated'] )
				    _cor12
			    catch <_cor15,_cor14,_cor13> ->
				do  ( apply 'after$^0'/0
					  ()
				      -| ['compiler_generated'] )
				    primop 'raise'
					(_cor13, _cor14)
		    %% Line 449
		    <{'error',Reason}> when 'true' ->
			%% Line 450
			apply 'add_error'/4
			    (_rec7, 'none', {'file_error',Reason}, _cor0)
		    ( <_cor18> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor18})
		      -| ['compiler_generated'] )
		  end
	      -| ['compiler_generated'] )
	    ( <_cor56> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','yecc'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'os_process_size'/0 =
    %% Line 453
    fun () ->
	%% Line 454
	case call 'os':'type'
		 () of
	  %% Line 455
	  <{'unix','sunos'}> when 'true' ->
	      let <_cor0> =
		  %% Line 456
		  call 'os':'getpid'
		      ()
	      in  let <_cor1> =
		      %% Line 456
		      call 'erlang':'++'
			  (_cor0, [32|[124|[32|[116|[97|[105|[108|[32|[45|[49]]]]]]]]]])
		  in  let <_cor2> =
			  %% Line 456
			  call 'erlang':'++'
			      ([112|[115|[32|[45|[111|[32|[118|[115|[122|[32|[45|[112|[32]]]]]]]]]]]]], _cor1)
		      in  let <Size> =
			      %% Line 456
			      call 'os':'cmd'
				  (_cor2)
			  in  let <_cor4> =
				  %% Line 457
				  call 'lib':'nonl'
				      (Size)
			      in  %% Line 457
				  call 'erlang':'list_to_integer'
				      (_cor4)
	  %% Line 458
	  <_cor6> when 'true' ->
	      %% Line 459
	      0
	end
'timeit'/3 =
    %% Line 462
    fun (_cor2,_cor1,_cor0) ->
	%% Line 465
	case call 'erlang':'statistics'
		 ('runtime') of
	  <{Before,_cor22}> when 'true' ->
	      let <St> =
		  %% Line 466
		  apply _cor1
		      (_cor0)
	      in  %% Line 467
		  case call 'erlang':'statistics'
			   ('runtime') of
		    <{After,_cor23}> when 'true' ->
			let <_cor8> =
			    %% Line 468
			    call 'erts_debug':'flat_size'
				(St)
			in  let <_cor7> =
				%% Line 468
				call 'erlang':'system_info'
				    ('wordsize')
			    in  let <Mem0> =
				    %% Line 468
				    call 'erlang':'*'
					(_cor8, _cor7)
				in  let <_cor10> =
					%% Line 469
					call 'erlang':'/'
					    (Mem0, 1024)
				    in  let <_cor11> =
					    %% Line 469
					    call 'io_lib':'format'
						([126|[46|[49|[102|[32|[107|[66]]]]]]], [_cor10|[]])
					in  let <Mem> =
						%% Line 469
						call 'lists':'flatten'
						    (_cor11)
					    in  let <_cor13> =
						    %% Line 470
						    apply 'os_process_size'/0
							()
						in  let <_cor14> =
							%% Line 470
							call 'erlang':'/'
							    (_cor13, 1024)
						    in  let <_cor15> =
							    %% Line 470
							    call 'io_lib':'format'
								([126|[46|[49|[102|[32|[77|[66]]]]]]], [_cor14|[]])
							in  let <Sz> =
								%% Line 470
								call 'lists':'flatten'
								    (_cor15)
							    in  let <_cor17> =
								    %% Line 472
								    call 'erlang':'-'
									(After, Before)
								in  let <_cor18> =
									%% Line 472
									call 'erlang':'/'
									    (_cor17, 1000)
								    in  do  %% Line 471
									    call 'io':'fwrite'
										([32|[126|[45|[51|[48|[119|[58|[32|[126|[49|[48|[46|[50|[102|[32|[115|[32|[126|[49|[50|[115|[32|[126|[49|[48|[115|[10]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 472
																												  [_cor2|[_cor18|[Mem|[Sz|[]]]]])
									    %% Line 473
									    St
		    ( <_cor6> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor6})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor4})
	    -| ['compiler_generated'] )
	end
'generate'/1 =
    %% Line 477
    fun (_cor0) ->
	let <St1> =
	    %% Line 478
	    apply 'output_encoding_comment'/1
		(_cor0)
	in  let <Passes> =
		%% Line 479
		[{'parse_grammar',( 'parse_grammar'/1
				    -| [{'id',{0,0,'-generate/1-fun-0-'}}] )}|[{'check_grammar',( 'check_grammar'/1
												  -| [{'id',{0,0,'-generate/1-fun-1-'}}] )}|%% Line 480
																	    [{'states_and_goto_table',( 'states_and_goto_table'/1
																					-| [{'id',{0,0,'-generate/1-fun-2-'}}] )}|[{'parse_actions',( 'parse_actions'/1
																												      -| [{'id',{0,0,'-generate/1-fun-3-'}}] )}|%% Line 481
																																		[{'action_conflicts',( 'action_conflicts'/1
																																				       -| [{'id',{0,0,'-generate/1-fun-4-'}}] )}|[{'write_file',( 'write_file'/1
																																												  -| [{'id',{0,0,'-generate/1-fun-5-'}}] )}|[]]]]]]]
	    in  %% Line 482
		( case St1 of
		    ( <( {'yecc',_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_rec10,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65}
			 -| ['compiler_generated'] )> when 'true' ->
			  let <_cor15> =
			      case call 'lists':'member'
				       ('time', _rec10) of
				%% Line 483
				<'true'> when 'true' ->
				    let <_cor7> =
					%% Line 485
					apply 'format_filename'/2
					    (_cor30, St1)
				    in  do  %% Line 484
					    call 'io':'fwrite'
						(#{#<71>(8,1,'integer',['unsigned'|['big']]),
						   #<101>(8,1,'integer',['unsigned'|['big']]),
						   #<110>(8,1,'integer',['unsigned'|['big']]),
						   #<101>(8,1,'integer',['unsigned'|['big']]),
						   #<114>(8,1,'integer',['unsigned'|['big']]),
						   #<97>(8,1,'integer',['unsigned'|['big']]),
						   #<116>(8,1,'integer',['unsigned'|['big']]),
						   #<105>(8,1,'integer',['unsigned'|['big']]),
						   #<110>(8,1,'integer',['unsigned'|['big']]),
						   #<103>(8,1,'integer',['unsigned'|['big']]),
						   #<32>(8,1,'integer',['unsigned'|['big']]),
						   #<112>(8,1,'integer',['unsigned'|['big']]),
						   #<97>(8,1,'integer',['unsigned'|['big']]),
						   #<114>(8,1,'integer',['unsigned'|['big']]),
						   #<115>(8,1,'integer',['unsigned'|['big']]),
						   #<101>(8,1,'integer',['unsigned'|['big']]),
						   #<114>(8,1,'integer',['unsigned'|['big']]),
						   #<32>(8,1,'integer',['unsigned'|['big']]),
						   #<102>(8,1,'integer',['unsigned'|['big']]),
						   #<114>(8,1,'integer',['unsigned'|['big']]),
						   #<111>(8,1,'integer',['unsigned'|['big']]),
						   #<109>(8,1,'integer',['unsigned'|['big']]),
						   #<32>(8,1,'integer',['unsigned'|['big']]),
						   #<103>(8,1,'integer',['unsigned'|['big']]),
						   #<114>(8,1,'integer',['unsigned'|['big']]),
						   #<97>(8,1,'integer',['unsigned'|['big']]),
						   #<109>(8,1,'integer',['unsigned'|['big']]),
						   #<109>(8,1,'integer',['unsigned'|['big']]),
						   #<97>(8,1,'integer',['unsigned'|['big']]),
						   #<114>(8,1,'integer',['unsigned'|['big']]),
						   #<32>(8,1,'integer',['unsigned'|['big']]),
						   #<105>(8,1,'integer',['unsigned'|['big']]),
						   #<110>(8,1,'integer',['unsigned'|['big']]),
						   #<32>(8,1,'integer',['unsigned'|['big']]),
						   #<126>(8,1,'integer',['unsigned'|['big']]),
						   #<116>(8,1,'integer',['unsigned'|['big']]),
						   #<115>(8,1,'integer',['unsigned'|['big']]),
						   #<10>(8,1,'integer',['unsigned'|['big']])}#, %% Line 485
												[_cor7|[]])
					    %% Line 486
					    ( 'timeit'/3
					      -| [{'id',{0,0,'-generate/1-fun-6-'}}] )
				%% Line 487
				<'false'> when 'true' ->
				    %% Line 488
				    ( fun (_cor10,_cor9,_cor8) ->
					  apply _cor9
					      (_cor8)
				      -| [{'id',{0,0,'-generate/1-fun-7-'}}] )
				( <_cor14> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor14})
				  -| ['compiler_generated'] )
			      end
			  in  let <Fun> =
				  %% Line 490
				  ( fun (_cor25,_cor24) ->
					case <_cor25,_cor24> of
					  <{Name,Fun},St> when 'true' ->
					      let <St2> =
						  %% Line 491
						  apply _cor15
						      (Name, Fun, St)
					      in  %% Line 492
						  case <> of
						    %% Line 493
						    <>
							when ( try
								( case <> of
								    ( <>
									  when ( call ( 'erlang'
										     -| ['compiler_generated'] ):( 'is_record'
														   -| ['compiler_generated'] )
										  (St2,
										   ( 'yecc'
										     -| ['compiler_generated'] ),
										   ( 38
										     -| ['compiler_generated'] ))
									      -| ['compiler_generated'] ) ->
									  let <_cor22> =
									      ( call 'erlang':'element'
										    (11, St2)
										-| ['compiler_generated'] )
									  in  ( call 'erlang':'=:='
										    (_cor22, [])
										-| ['compiler_generated'] )
								      -| ['compiler_generated'] )
								    ( <> when 'true' ->
									  'false'
								      -| ['compiler_generated'] )
								  end
								  -| ['compiler_generated'] )
							    of <Try> ->
								Try
							    catch <T,R> ->
								'false'
							    -| ['compiler_generated'] ) ->
							St2
						    %% Line 494
						    <> when 'true' ->
							call 'erlang':'throw'
							    (St2)
						  end
					  ( <_cor27,_cor26> when 'true' ->
						( primop 'match_fail'
						      ({'function_clause',_cor27,_cor26})
						  -| [{'function_name',{'-generate/1-fun-8-',2}}] )
					    -| ['compiler_generated'] )
					end
				    -| [{'id',{0,0,'-generate/1-fun-8-'}}] )
			      in  %% Line 497
				  call 'lists':'foldl'
				      (Fun, St1, Passes)
		      -| ['compiler_generated'] )
		    ( <_cor66> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','yecc'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
		  -| ['compiler_generated'] )
'parse_grammar'/1 =
    %% Line 499
    fun (_cor0) ->
	%% Line 500
	( case _cor0 of
	    ( <( {'yecc',_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_rec12,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39}
		 -| ['compiler_generated'] )> when 'true' ->
		  apply 'parse_grammar'/3
		      (_rec12, 1, _cor0)
	      -| ['compiler_generated'] )
	    ( <_cor40> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','yecc'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'parse_grammar'/3 =
    %% Line 502
    fun (_cor2,_cor1,_cor0) ->
	%% Line 503
	case apply 'read_grammar'/3
		 (_cor2, _cor0, _cor1) of
	  <{NextLine,Grammar}> when 'true' ->
	      %% Line 504
	      apply 'parse_grammar'/4
		  (Grammar, _cor2, NextLine, _cor0)
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'parse_grammar'/4 =
    %% Line 506
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <'eof',_X_Inport,_X_NextLine,St> when 'true' ->
	      %% Line 507
	      St
	  %% Line 508
	  <{{'symbol',_cor21,'Header'},Ss},Inport,NextLine,St0> when 'true' ->
	      let <_cor8> =
		  %% Line 509
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor6) ->
				case _cor6 of
				  <[{'string',_cor22,S}|_cor5]> when 'true' ->
				      let <_cor7> =
					  apply 'lc$^0'/1
					      (_cor5)
				      in  ( [S|_cor7]
					    -| ['compiler_generated'] )
				  ( <[_cor4|_cor5]> when 'true' ->
					apply 'lc$^0'/1
					    (_cor5)
				    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor6> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor6})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (Ss)
		    -| ['list_comprehension'] )
	      in  %% Line 509
		  case St0 of
		    <{'yecc',_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59}> when 'true' ->
			let <_cor12> =
			    call 'erlang':'setelement'
				(37, St0, _cor8)
			in  %% Line 510
			    apply 'parse_grammar'/3
				(Inport, NextLine, _cor12)
		    ( <_cor60> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','yecc'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 511
	  <{{'symbol',_cor61,'Erlang'},[{'symbol',_cor62,'code'}|[]]},_X_Inport,%% Line 512
										NextLine,%% Line 512
											 St> when 'true' ->
	      %% Line 513
	      case St of
		<{'yecc',_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,_cor69,_cor70,_cor71,_cor72,_cor73,_cor74,_cor75,_cor76,_cor77,_cor78,_cor79,_cor80,_cor81,_cor82,_cor83,_cor84,_cor85,_cor86,_cor87,_cor88,_cor89,_cor90,_cor91,_cor92,_cor93,_cor94,_cor95,_cor96,_cor97,_cor98,_cor99}> when 'true' ->
		    call 'erlang':'setelement'
			(38, St, NextLine)
		( <_cor100> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','yecc'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 514
	  <Grammar,Inport,NextLine,St0> when 'true' ->
	      let <St> =
		  %% Line 515
		  apply 'parse_grammar'/2
		      (Grammar, St0)
	      in  %% Line 516
		  apply 'parse_grammar'/3
		      (Inport, NextLine, St)
	end
'parse_grammar'/2 =
    %% Line 518
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'error',ErrorLine,Error},St> when 'true' ->
	      %% Line 519
	      apply 'add_error'/3
		  (ErrorLine, Error, St)
	  %% Line 520
	  <{'rule',Rule,Tokens},St0> when 'true' ->
	      let <_cor4> =
		  %% Line 521
		  case Rule of
		    %% Line 522
		    <[_cor28|[{'symbol',_cor29,'$empty'}|[]]]> when 'true' ->
			0
		    %% Line 523
		    <_cor30> when 'true' ->
			let <_cor2> =
			    call 'erlang':'length'
				(Rule)
			in  call 'erlang':'-'
				(_cor2, 1)
		  end
	      in  %% Line 525
		  case apply 'check_action'/1
			   (Tokens) of
		    <{IsGuard,IsWellFormed}> when 'true' ->
			%% Line 526
			case apply 'subst_pseudo_vars'/3
				 (Tokens, _cor4, %% Line 528
						 St0) of
			  <{Tokens1,St}> when 'true' ->
			      let <RuleDef> =
				  %% Line 529
				  {'rule','undefined','undefined',Rule,%% Line 530
								       Tokens1,%% Line 531
									       IsGuard,%% Line 532
										       IsWellFormed}
			      in  %% Line 533
				  ( case St of
				      ( <( {'yecc',_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_rec18,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66}
					   -| ['compiler_generated'] )> when 'true' ->
					    let <_rec16> =
						[RuleDef|_rec18]
					    in  call 'erlang':'setelement'
						    (30, St, _rec16)
					-| ['compiler_generated'] )
				      ( <_cor67> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','yecc'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
			  ( <_cor7> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor7})
			    -| ['compiler_generated'] )
			end
		    ( <_cor6> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor6})
		      -| ['compiler_generated'] )
		  end
	  %% Line 534
	  <{'prec',Prec},St> when 'true' ->
	      %% Line 535
	      ( case St of
		  ( <( {'yecc',_cor106,_cor107,_cor108,_cor109,_cor110,_cor111,_cor112,_cor113,_cor114,_cor115,_cor116,_cor117,_cor118,_cor119,_cor120,_cor121,_cor122,_cor123,_cor124,_cor125,_cor126,_cor127,_cor128,_cor129,_cor130,_cor131,_cor132,_rec21,_cor133,_cor134,_cor135,_cor136,_cor137,_cor138,_cor139,_cor140,_cor141}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_rec19> =
			    call 'erlang':'++'
				(Prec, _rec21)
			in  call 'erlang':'setelement'
				(29, St, _rec19)
		    -| ['compiler_generated'] )
		  ( <_cor142> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','yecc'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 536
	  <{{'symbol',_cor181,_cor182},[{'string',Line,String}|[]]},St> when 'true' ->
	      %% Line 537
	      apply 'add_error'/3
		  (Line, {'bad_symbol',String}, St)
	  %% Line 538
	  <{{'symbol',Line,Name},Symbols},St> when 'true' ->
	      let <CF> =
		  %% Line 539
		  ( fun (_cor20) ->
			%% Line 540
			case call 'erlang':'element'
				 (_cor20, St) of
			  %% Line 541
			  <[]> when 'true' ->
			      %% Line 542
			      call 'erlang':'setelement'
				  (_cor20, St, Symbols)
			  %% Line 543
			  <_cor183> when 'true' ->
			      %% Line 544
			      apply 'add_error'/3
				  (Line, {'duplicate_declaration',Name}, St)
			end
		    -| [{'id',{0,0,'-parse_grammar/2-fun-0-'}}] )
	      in  let <_cor23> =
		      %% Line 547
		      call 'erlang':'length'
			  (Symbols)
		  in  let <OneSymbol> =
			  %% Line 547
			  call 'erlang':'=:='
			      (_cor23, 1)
		      in  %% Line 548
			  case Name of
			    %% Line 549
			    <'Nonterminals'> when 'true' ->
				apply CF
				    (27)
			    %% Line 550
			    <'Terminals'> when 'true' ->
				apply CF
				    (26)
			    %% Line 551
			    <'Rootsymbol'>
				when OneSymbol ->
				apply CF
				    (33)
			    %% Line 552
			    <'Endsymbol'>
				when OneSymbol ->
				apply CF
				    (34)
			    %% Line 553
			    <'Expect'>
				when OneSymbol ->
				apply CF
				    (35)
			    %% Line 554
			    <'States'>
				when OneSymbol ->
				apply CF
				    (36)
			    %% Line 555
			    <_cor184> when 'true' ->
				apply 'add_warning'/3
				    (Line, 'bad_declaration', St)
			  end
	  ( <_cor27,_cor26> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor27,_cor26})
		  -| [{'function_name',{'parse_grammar',2}}] )
	    -| ['compiler_generated'] )
	end
'read_grammar'/3 =
    %% Line 558
    fun (_cor2,_cor1,_cor0) ->
	%% Line 559
	case call 'yeccscan':'scan'
		 (_cor2, '', _cor0) of
	  %% Line 560
	  <{'eof',NextLine}> when 'true' ->
	      %% Line 561
	      {NextLine,'eof'}
	  %% Line 562
	  <{'error',{ErrorLine,Mod,What},NextLine}> when 'true' ->
	      %% Line 563
	      {NextLine,{'error',ErrorLine,{'error',Mod,What}}}
	  %% Line 564
	  <{'error','terminated'}> when 'true' ->
	      %% Line 565
	      call 'erlang':'throw'
		  (_cor1)
	  %% Line 566
	  <{'error',_cor24}> when 'true' ->
	      %% Line 567
	      ( case _cor1 of
		  ( <( {'yecc',_rec22,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_cor6> =
			    %% Line 568
			    apply 'add_error'/4
				(_rec22, 'none', 'cannot_parse', _cor1)
			in  %% Line 568
			    call 'erlang':'throw'
				(_cor6)
		    -| ['compiler_generated'] )
		  ( <_cor61> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','yecc'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 569
	  <{'ok',Input,NextLine}> when 'true' ->
	      let <_cor19> =
		  %% Line 570
		  case call 'yeccparser':'parse'
			   (Input) of
		    %% Line 571
		    <{'error',{ErrorLine,Mod,Message}}> when 'true' ->
			%% Line 572
			{'error',ErrorLine,{'error',Mod,Message}}
		    %% Line 573
		    <{'ok',{'rule',Rule,{'erlang_code',Tokens}}}> when 'true' ->
			%% Line 574
			{'rule',Rule,Tokens}
		    %% Line 575
		    <{'ok',Ss = {{'symbol',_cor62,P},%% Line 576
						     [{'symbol',_cor63,I}|OpL]}}> when 'true' ->
			let <A> =
			    %% Line 577
			    apply 'precedence'/1
				(P)
			in  %% Line 578
			    case <> of
			      %% Line 579
			      <>
				  when try
					let <_cor8> =
					    call 'erlang':'=/='
						(A, 'unknown')
					in  let <_cor9> =
						%% Line 580
						call 'erlang':'is_integer'
						    (I)
					    in  let <_cor10> =
						    %% Line 581
						    call 'erlang':'=/='
							(OpL, [])
						in  let <_cor11> =
							call 'erlang':'and'
							    (_cor9, _cor10)
						    in  call 'erlang':'and'
							    (_cor8, _cor11)
				    of <Try> ->
					Try
				    catch <T,R> ->
					'false' ->
				  let <_cor16> =
				      %% Line 582
				      ( letrec
					    'lc$^0'/1 =
						fun (_cor14) ->
						    case _cor14 of
						      <[Op|_cor13]> when 'true' ->
							  let <_cor15> =
							      apply 'lc$^0'/1
								  (_cor13)
							  in  ( [{Op,I,A}|_cor15]
								-| ['compiler_generated'] )
						      <[]> when 'true' ->
							  []
						      ( <_cor14> when 'true' ->
							    ( primop 'match_fail'
								  ({'function_clause',_cor14})
							      -| [{'function_name',{'lc$^0',1}}] )
							-| ['compiler_generated'] )
						    end
					in  apply 'lc$^0'/1
						(OpL)
					-| ['list_comprehension'] )
				  in  %% Line 583
				      {'prec',_cor16}
			      %% Line 584
			      <> when 'true' ->
				  %% Line 585
				  Ss
			    end
		    %% Line 587
		    <{'ok',Ss}> when 'true' ->
			%% Line 588
			Ss
		    ( <_cor18> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor18})
		      -| ['compiler_generated'] )
		  end
	      in  %% Line 570
		  {NextLine,_cor19}
	  ( <_cor20> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor20})
	    -| ['compiler_generated'] )
	end
'precedence'/1 =
    %% Line 592
    fun (_cor0) ->
	case _cor0 of
	  <'Left'> when 'true' ->
	      'left'
	  %% Line 593
	  <'Right'> when 'true' ->
	      'right'
	  %% Line 594
	  <'Unary'> when 'true' ->
	      'unary'
	  %% Line 595
	  <'Nonassoc'> when 'true' ->
	      'nonassoc'
	  %% Line 596
	  <_cor2> when 'true' ->
	      'unknown'
	end
'check_grammar'/1 =
    %% Line 600
    fun (_cor0) ->
	%% Line 602
	( case _cor0 of
	    ( <( {'yecc',_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_rec23,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_cor4> =
		      call 'erlang':'++'
			  (_cor43, [{'symbol','none','$empty'}])
		  in  let <AllSymbols> =
			  call 'erlang':'++'
			      (_rec23, _cor4)
		      in  let <_cor10> =
			      %% Line 603
			      call 'erlang':'setelement'
				  (28, _cor0, AllSymbols)
			  in  let <Cs> =
				  %% Line 604
				  [( 'check_nonterminals'/1
				     -| [{'id',{0,0,'-check_grammar/1-fun-0-'}}] )|[( 'check_terminals'/1
										      -| [{'id',{0,0,'-check_grammar/1-fun-1-'}}] )|%% Line 605
																    [( 'check_rootsymbol'/1
																       -| [{'id',{0,0,'-check_grammar/1-fun-2-'}}] )|[( 'check_endsymbol'/1
																							-| [{'id',{0,0,'-check_grammar/1-fun-3-'}}] )|%% Line 606
																												      [( 'check_expect'/1
																													 -| [{'id',{0,0,'-check_grammar/1-fun-4-'}}] )|[( 'check_states'/1
																																			  -| [{'id',{0,0,'-check_grammar/1-fun-5-'}}] )|%% Line 607
																																									[( 'check_precedences'/1
																																									   -| [{'id',{0,0,'-check_grammar/1-fun-6-'}}] )|[( 'check_rules'/1
																																															    -| [{'id',{0,0,'-check_grammar/1-fun-7-'}}] )|[]]]]]]]]]
			      in  let <_cor17> =
				      %% Line 608
				      ( fun (_cor14,_cor13) ->
					    apply _cor14
						(_cor13)
					-| [{'id',{0,0,'-check_grammar/1-fun-8-'}}] )
				  in  %% Line 608
				      call 'lists':'foldl'
					  (_cor17, _cor10, Cs)
	      -| ['compiler_generated'] )
	    ( <_cor55> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','yecc'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'check_nonterminals'/1 =
    %% Line 610
    fun (_cor0) ->
	%% Line 611
	( case _cor0 of
	    ( <( {'yecc',_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_rec26,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47}
		 -| ['compiler_generated'] )> when 'true' ->
		  case _rec26 of
		    %% Line 612
		    <[]> when 'true' ->
			%% Line 613
			apply 'add_error'/2
			    ('nonterminals_missing', _cor0)
		    %% Line 614
		    <Nonterminals> when 'true' ->
			let <_cor3> =
			    %% Line 615
			    apply 'names'/1
				(Nonterminals)
			in  %% Line 615
			    case apply 'duplicates'/1
				     (_cor3) of
			      <{Unique,Dups}> when 'true' ->
				  let <St1> =
				      %% Line 616
				      apply 'add_warnings'/3
					  (Dups, 'duplicate_nonterminal', _cor0)
				  in  let <St2> =
					  %% Line 617
					  apply 'check_reserved'/2
					      (Unique, St1)
				      in  let <_rec27> =
					      %% Line 618
					      [{}|Unique]
					  in  %% Line 618
					      case St2 of
						<{'yecc',_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,_cor69,_cor70,_cor71,_cor72,_cor73,_cor74,_cor75,_cor76,_cor77,_cor78,_cor79,_cor80,_cor81,_cor82,_cor83,_cor84,_cor85}> when 'true' ->
						    call 'erlang':'setelement'
							(27, St2, _rec27)
						( <_cor86> when 'true' ->
						      ( call ( 'erlang'
							       -| ['compiler_generated'] ):( 'error'
											     -| ['compiler_generated'] )
							    (( {'badrecord','yecc'}
							       -| ['compiler_generated'] ))
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					      end
			      ( <_cor4> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor4})
				-| ['compiler_generated'] )
			    end
		  end
	      -| ['compiler_generated'] )
	    ( <_cor48> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','yecc'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'check_terminals'/1 =
    %% Line 621
    fun (_cor0) ->
	%% Line 622
	( case _cor0 of
	    ( <( {'yecc',_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_rec29,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51}
		 -| ['compiler_generated'] )> when 'true' ->
		  case _rec29 of
		    %% Line 623
		    <[]> when 'true' ->
			%% Line 624
			apply 'add_error'/2
			    ('terminals_missing', _cor0)
		    %% Line 625
		    <Terminals> when 'true' ->
			let <_cor3> =
			    %% Line 626
			    apply 'names'/1
				(Terminals)
			in  %% Line 626
			    case apply 'duplicates'/1
				     (_cor3) of
			      <{Unique,Dups}> when 'true' ->
				  let <St1> =
				      %% Line 627
				      apply 'add_warnings'/3
					  (Dups, 'duplicate_terminal', _cor0)
				  in  %% Line 628
				      ( case St1 of
					  ( <( {'yecc',_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,_cor69,_cor70,_cor71,_cor72,_cor73,_cor74,_cor75,_cor76,_cor77,_rec30,_cor78,_cor79,_cor80,_cor81,_cor82,_cor83,_cor84,_cor85,_cor86,_cor87,_cor88}
					       -| ['compiler_generated'] )> when 'true' ->
						let <Common> =
						    apply 'intersect'/2
							(_rec30, Unique)
						in  let <St2> =
							%% Line 629
							apply 'add_errors'/3
							    (Common, 'symbol_terminal_and_nonterminal', St1)
						    in  let <St3> =
							    %% Line 630
							    apply 'check_reserved'/2
								(Unique, St2)
							in  let <_rec31> =
								%% Line 631
								['$empty'|Unique]
							    in  %% Line 631
								case St3 of
								  <{'yecc',_cor90,_cor91,_cor92,_cor93,_cor94,_cor95,_cor96,_cor97,_cor98,_cor99,_cor100,_cor101,_cor102,_cor103,_cor104,_cor105,_cor106,_cor107,_cor108,_cor109,_cor110,_cor111,_cor112,_cor113,_cor114,_cor115,_cor116,_cor117,_cor118,_cor119,_cor120,_cor121,_cor122,_cor123,_cor124,_cor125,_cor126}> when 'true' ->
								      call 'erlang':'setelement'
									  (26, St3, _rec31)
								  ( <_cor127> when 'true' ->
									( call ( 'erlang'
										 -| ['compiler_generated'] ):( 'error'
													       -| ['compiler_generated'] )
									      (( {'badrecord','yecc'}
										 -| ['compiler_generated'] ))
									  -| ['compiler_generated'] )
								    -| ['compiler_generated'] )
								end
					    -| ['compiler_generated'] )
					  ( <_cor89> when 'true' ->
						( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'error'
										       -| ['compiler_generated'] )
						      (( {'badrecord','yecc'}
							 -| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					end
					-| ['compiler_generated'] )
			      ( <_cor4> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor4})
				-| ['compiler_generated'] )
			    end
		  end
	      -| ['compiler_generated'] )
	    ( <_cor52> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','yecc'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'check_reserved'/2 =
    %% Line 634
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 635
	    apply 'intersect'/2
		(_cor1, ['$empty'|['$end'|['$undefined']]])
	in  %% Line 635
	    apply 'add_errors'/3
		(_cor2, %% Line 636
			'reserved', _cor0)
'check_rootsymbol'/1 =
    %% Line 638
    fun (_cor0) ->
	%% Line 639
	( case _cor0 of
	    ( <( {'yecc',_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_rec33,_cor39,_cor40,_cor41,_cor42,_cor43}
		 -| ['compiler_generated'] )> when 'true' ->
		  case _rec33 of
		    %% Line 640
		    <[]> when 'true' ->
			%% Line 641
			apply 'add_error'/2
			    ('rootsymbol_missing', _cor0)
		    %% Line 642
		    <[{'symbol',Line,SymName}|[]]> when 'true' ->
			%% Line 643
			case apply 'kind_of_symbol'/2
				 (_cor0, SymName) of
			  %% Line 644
			  <'nonterminal'> when 'true' ->
			      %% Line 645
			      call 'erlang':'setelement'
				  (33, _cor0, SymName)
			  %% Line 646
			  <_cor83> when 'true' ->
			      %% Line 647
			      apply 'add_error'/3
				  (Line, {'bad_rootsymbol',SymName}, _cor0)
			end
		    ( <_cor6> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor6})
		      -| ['compiler_generated'] )
		  end
	      -| ['compiler_generated'] )
	    ( <_cor44> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','yecc'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'check_endsymbol'/1 =
    %% Line 651
    fun (_cor0) ->
	%% Line 652
	( case _cor0 of
	    ( <( {'yecc',_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_rec35,_cor42,_cor43,_cor44,_cor45}
		 -| ['compiler_generated'] )> when 'true' ->
		  case _rec35 of
		    %% Line 653
		    <[]> when 'true' ->
			%% Line 654
			call 'erlang':'setelement'
			    (34, _cor0, '$end')
		    %% Line 655
		    <[{'symbol',Line,SymName}|[]]> when 'true' ->
			%% Line 656
			case apply 'kind_of_symbol'/2
				 (_cor0, SymName) of
			  %% Line 657
			  <'nonterminal'> when 'true' ->
			      %% Line 658
			      apply 'add_error'/3
				  (Line, {'endsymbol_is_nonterminal',SymName}, _cor0)
			  %% Line 659
			  <'terminal'> when 'true' ->
			      %% Line 660
			      apply 'add_error'/3
				  (Line, {'endsymbol_is_terminal',SymName}, _cor0)
			  %% Line 661
			  <_cor85> when 'true' ->
			      %% Line 662
			      call 'erlang':'setelement'
				  (34, _cor0, SymName)
			end
		    ( <_cor8> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor8})
		      -| ['compiler_generated'] )
		  end
	      -| ['compiler_generated'] )
	    ( <_cor46> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','yecc'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'check_expect'/1 =
    %% Line 666
    fun (_cor0) ->
	%% Line 667
	( case _cor0 of
	    ( <( {'yecc',_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_rec38,_cor45,_cor46,_cor47}
		 -| ['compiler_generated'] )> when 'true' ->
		  case _rec38 of
		    %% Line 668
		    <[]> when 'true' ->
			%% Line 669
			call 'erlang':'setelement'
			    (35, _cor0, 0)
		    %% Line 670
		    <[{'symbol',_cor87,Expect}|[]]>
			when call 'erlang':'is_integer'
			      (Expect) ->
			%% Line 671
			call 'erlang':'setelement'
			    (35, _cor0, Expect)
		    %% Line 672
		    <[{'symbol',Line,Name}|[]]> when 'true' ->
			let <St1> =
			    %% Line 673
			    apply 'add_error'/3
				(Line, {'bad_expect',Name}, _cor0)
			in  %% Line 674
			    case St1 of
			      <{'yecc',_cor126,_cor127,_cor128,_cor129,_cor130,_cor131,_cor132,_cor133,_cor134,_cor135,_cor136,_cor137,_cor138,_cor139,_cor140,_cor141,_cor142,_cor143,_cor144,_cor145,_cor146,_cor147,_cor148,_cor149,_cor150,_cor151,_cor152,_cor153,_cor154,_cor155,_cor156,_cor157,_cor158,_cor159,_cor160,_cor161,_cor162}> when 'true' ->
				  call 'erlang':'setelement'
				      (35, St1, 0)
			      ( <_cor163> when 'true' ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {'badrecord','yecc'}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
		    ( <_cor10> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor10})
		      -| ['compiler_generated'] )
		  end
	      -| ['compiler_generated'] )
	    ( <_cor48> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','yecc'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'check_states'/1 =
    %% Line 677
    fun (_cor0) ->
	%% Line 678
	( case _cor0 of
	    ( <( {'yecc',_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_rec42,_cor41,_cor42}
		 -| ['compiler_generated'] )> when 'true' ->
		  case _rec42 of
		    %% Line 679
		    <[]> when 'true' ->
			_cor0
		    %% Line 681
		    <[{'symbol',_cor44,NStates}|[]]>
			when call 'erlang':'is_integer'
			      (NStates) ->
			%% Line 682
			call 'erlang':'setelement'
			    (36, _cor0, NStates)
		    %% Line 683
		    <[{'symbol',Line,Name}|[]]> when 'true' ->
			%% Line 684
			apply 'add_error'/3
			    (Line, {'bad_states',Name}, _cor0)
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor5})
		      -| ['compiler_generated'] )
		  end
	      -| ['compiler_generated'] )
	    ( <_cor43> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','yecc'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'check_precedences'/1 =
    %% Line 687
    fun (_cor0) ->
	let <_cor9> =
	    %% Line 689
	    ( fun (_cor6,_cor5) ->
		  case <_cor6,_cor5> of
		    <{{'symbol',Line,Op},_X_I,_X_A},{St,Ps}> when 'true' ->
			%% Line 690
			case call 'lists':'member'
				 (Op, Ps) of
			  %% Line 691
			  <'true'> when 'true' ->
			      let <_cor3> =
				  %% Line 692
				  apply 'add_error'/3
				      (Line, {'duplicate_precedence',Op}, St)
			      in  %% Line 692
				  {_cor3,%% Line 693
					 Ps}
			  %% Line 694
			  <'false'> when 'true' ->
			      %% Line 695
			      {St,[Op|Ps]}
			  ( <_cor4> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor4})
			    -| ['compiler_generated'] )
			end
		    ( <_cor8,_cor7> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor8,_cor7})
			    -| [{'function_name',{'-check_precedences/1-fun-0-',2}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-check_precedences/1-fun-0-'}}] )
	in  %% Line 697
	    ( case _cor0 of
		( <( {'yecc',_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_rec44,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63}
		     -| ['compiler_generated'] )> when 'true' ->
		      case call 'lists':'foldr'
			       (_cor9, {_cor0,[]}, _rec44) of
			<{St1,_cor65}> when 'true' ->
			    let <_cor26> =
				%% Line 698
				( fun (_cor23,_cor22) ->
				      case <_cor23,_cor22> of
					<{{'symbol',Line,Op},I,A},St> when 'true' ->
					    %% Line 699
					    case apply 'kind_of_symbol'/2
						     (St, Op) of
					      %% Line 700
					      <'endsymbol'> when 'true' ->
						  %% Line 701
						  apply 'add_error'/3
						      (Line, {'precedence_op_is_endsymbol',Op}, St)
					      %% Line 702
					      <'unknown'> when 'true' ->
						  %% Line 703
						  apply 'add_error'/3
						      (Line, {'precedence_op_is_unknown',Op}, St)
					      %% Line 704
					      <_cor66> when 'true' ->
						  %% Line 705
						  ( case St of
						      ( <( {'yecc',_cor67,_cor68,_cor69,_cor70,_cor71,_cor72,_cor73,_cor74,_cor75,_cor76,_cor77,_cor78,_cor79,_cor80,_cor81,_cor82,_cor83,_cor84,_cor85,_cor86,_cor87,_cor88,_cor89,_cor90,_cor91,_cor92,_cor93,_rec47,_cor94,_cor95,_cor96,_cor97,_cor98,_cor99,_cor100,_cor101,_cor102}
							   -| ['compiler_generated'] )> when 'true' ->
							    let <_rec45> =
								[{Op,I,A}|_rec47]
							    in  call 'erlang':'setelement'
								    (29, St, _rec45)
							-| ['compiler_generated'] )
						      ( <_cor103> when 'true' ->
							    ( call ( 'erlang'
								     -| ['compiler_generated'] ):( 'error'
												   -| ['compiler_generated'] )
								  (( {'badrecord','yecc'}
								     -| ['compiler_generated'] ))
							      -| ['compiler_generated'] )
							-| ['compiler_generated'] )
						    end
						    -| ['compiler_generated'] )
					    end
					( <_cor25,_cor24> when 'true' ->
					      ( primop 'match_fail'
						    ({'function_clause',_cor25,_cor24})
						-| [{'function_name',{'-check_precedences/1-fun-1-',2}}] )
					  -| ['compiler_generated'] )
				      end
				  -| [{'id',{0,0,'-check_precedences/1-fun-1-'}}] )
			    in  %% Line 707
				case St1 of
				  <{'yecc',_cor142,_cor143,_cor144,_cor145,_cor146,_cor147,_cor148,_cor149,_cor150,_cor151,_cor152,_cor153,_cor154,_cor155,_cor156,_cor157,_cor158,_cor159,_cor160,_cor161,_cor162,_cor163,_cor164,_cor165,_cor166,_cor167,_cor168,_cor169,_cor170,_cor171,_cor172,_cor173,_cor174,_cor175,_cor176,_cor177,_cor178}> when 'true' ->
				      let <_cor15> =
					  call 'erlang':'setelement'
					      (29, St1, [])
				      in  call 'lists':'foldl'
					      (_cor26, _cor15, _cor169)
				  ( <_cor179> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','yecc'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
			( <_cor10> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor10})
			  -| ['compiler_generated'] )
		      end
		  -| ['compiler_generated'] )
		( <_cor64> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','yecc'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	      -| ['compiler_generated'] )
'check_rule'/2 =
    %% Line 709
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Rule0,{St0,Rules}> when 'true' ->
	      %% Line 710
	      ( case Rule0 of
		  ( <( {'rule',_cor20,_cor21,_rec50,_cor22,_cor23,_cor24}
		       -| ['compiler_generated'] )> when 'true' ->
			%% Line 711
			case call 'erlang':'hd'
				 (_rec50) of
			  <{'symbol',HeadLine,Head}> when 'true' ->
			      %% Line 712
			      ( case St0 of
				  ( <( {'yecc',_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_rec51,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61}
				       -| ['compiler_generated'] )> when 'true' ->
					case call 'lists':'member'
						 (Head, _rec51) of
					  %% Line 713
					  <'false'> when 'true' ->
					      let <_cor8> =
						  %% Line 714
						  apply 'add_error'/3
						      (HeadLine, {'undefined_nonterminal',Head}, St0)
					      in  %% Line 714
						  {_cor8,Rules}
					  %% Line 715
					  <'true'> when 'true' ->
					      let <_cor9> =
						  %% Line 716
						  call 'erlang':'tl'
						      (_rec50)
					      in  let <St> =
						      %% Line 716
						      apply 'check_rhs'/2
							  (_cor9, St0)
						  in  let <_rec52> =
							  %% Line 717
							  apply 'names'/1
							      (_rec50)
						      in  let <_cor13> =
							      %% Line 717
							      call 'erlang':'setelement'
								  (4, Rule0, _rec52)
							  in  let <_cor15> =
								  %% Line 717
								  call 'erlang':'setelement'
								      (3, _cor13, HeadLine)
							      in  %% Line 718
								  {St,[_cor15|Rules]}
					  ( <_cor17> when 'true' ->
						primop 'match_fail'
						    ({'case_clause',_cor17})
					    -| ['compiler_generated'] )
					end
				    -| ['compiler_generated'] )
				  ( <_cor62> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','yecc'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			  ( <_cor5> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor5})
			    -| ['compiler_generated'] )
			end
		    -| ['compiler_generated'] )
		  ( <_cor25> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','rule'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_cor19,_cor18> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor19,_cor18})
		  -| [{'function_name',{'check_rule',2}}] )
	    -| ['compiler_generated'] )
	end
'check_rules'/1 =
    %% Line 721
    fun (_cor0) ->
	%% Line 722
	( case _cor0 of
	    ( <( {'yecc',_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_rec54,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58}
		 -| ['compiler_generated'] )> when 'true' ->
		  case call 'lists':'foldl'
			   (( 'check_rule'/2
			      -| [{'id',{0,0,'-check_rules/1-fun-0-'}}] ), {_cor0,[]}, _rec54) of
		    <{St,Rules0}> when 'true' ->
			%% Line 723
			( case St of
			    ( <( {'yecc',_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,_cor69,_cor70,_cor71,_cor72,_cor73,_cor74,_cor75,_cor76,_cor77,_cor78,_cor79,_cor80,_cor81,_cor82,_cor83,_cor84,_cor85,_cor86,_cor87,_rec55,_cor88,_cor89,_cor90,_cor91,_cor92,_cor93,_cor94,_cor95}
				 -| ['compiler_generated'] )> when 'true' ->
				  case _rec55 of
				    %% Line 724
				    <[]> when 'true' ->
					%% Line 725
					apply 'add_error'/2
					    ('no_grammar_rules', St)
				    %% Line 726
				    <_cor97> when 'true' ->
					let <Rule> =
					    %% Line 727
					    {'rule','undefined','none',%% Line 728
								       [{}|[_cor90|[]]],%% Line 729
											[],'undefined','undefined'}
					in  let <Rules1> =
						%% Line 730
						[Rule|Rules0]
					    in  let <_cor15> =
						    %% Line 731
						    ( fun (_cor13) ->
							  case _cor13 of
							    <{R,I}> when 'true' ->
								case R of
								  <{'rule',_cor135,_cor136,_cor137,_cor138,_cor139,_cor140}> when 'true' ->
								      call 'erlang':'setelement'
									  (2, R, I)
								  ( <_cor141> when 'true' ->
									( call ( 'erlang'
										 -| ['compiler_generated'] ):( 'error'
													       -| ['compiler_generated'] )
									      (( {'badrecord','rule'}
										 -| ['compiler_generated'] ))
									  -| ['compiler_generated'] )
								    -| ['compiler_generated'] )
								end
							    ( <_cor14> when 'true' ->
								  ( primop 'match_fail'
									({'function_clause',_cor14})
								    -| [{'function_name',{'-check_rules/1-fun-1-',1}}] )
							      -| ['compiler_generated'] )
							  end
						      -| [{'id',{0,0,'-check_rules/1-fun-1-'}}] )
						in  let <_cor10> =
							%% Line 731
							apply 'count'/2
							    (0, Rules1)
						    in  let <Rules> =
							    %% Line 731
							    call 'lists':'map'
								(_cor15, _cor10)
							in  let <_rec58> =
								%% Line 732
								call 'erlang':'list_to_tuple'
								    (Rules)
							    in  let <_cor19> =
								    %% Line 732
								    call 'erlang':'setelement'
									(31, St, _rec58)
								in  %% Line 732
								    call 'erlang':'setelement'
									(30, _cor19, Rules)
				  end
			      -| ['compiler_generated'] )
			    ( <_cor96> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','yecc'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    ( <_cor3> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor3})
		      -| ['compiler_generated'] )
		  end
	      -| ['compiler_generated'] )
	    ( <_cor59> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','yecc'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'duplicates'/1 =
    %% Line 735
    fun (_cor0) ->
	let <Unique> =
	    %% Line 736
	    call 'lists':'usort'
		(_cor0)
	in  let <_cor2> =
		%% Line 737
		call 'erlang':'--'
		    (_cor0, Unique)
	    in  %% Line 737
		{Unique,_cor2}
'names'/1 =
    %% Line 739
    fun (_cor0) ->
	let <_cor4> =
	    %% Line 740
	    ( fun (_cor2) ->
		  ( case _cor2 of
		      ( <( {'symbol',_cor6,_rec60}
			   -| ['compiler_generated'] )> when 'true' ->
			    _rec60
			-| ['compiler_generated'] )
		      ( <_cor7> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','symbol'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      -| [{'id',{0,0,'-names/1-fun-0-'}}] )
	in  %% Line 740
	    call 'lists':'map'
		(_cor4, _cor0)
'symbol_line'/2 =
    %% Line 742
    fun (_cor1,_cor0) ->
	%% Line 743
	( case _cor0 of
	    ( <( {'yecc',_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_rec61,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42}
		 -| ['compiler_generated'] )> when 'true' ->
		  case apply 'symbol_find'/2
			   (_cor1, _rec61) of
		    <{'symbol',Line,_cor44}> when 'true' ->
			%% Line 744
			Line
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor4})
		      -| ['compiler_generated'] )
		  end
	      -| ['compiler_generated'] )
	    ( <_cor43> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','yecc'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'symbol_member'/2 =
    %% Line 746
    fun (_cor1,_cor0) ->
	%% Line 747
	( case _cor1 of
	    ( <( {'symbol',_cor7,_rec62}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_cor4> =
		      apply 'symbol_find'/2
			  (_rec62, _cor0)
		  in  call 'erlang':'=/='
			  (_cor4, 'false')
	      -| ['compiler_generated'] )
	    ( <_cor8> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','symbol'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'symbol_find'/2 =
    %% Line 749
    fun (_cor1,_cor0) ->
	%% Line 750
	call 'lists':'keyfind'
	    (_cor1, 3, _cor0)
'states_and_goto_table'/1 =
    %% Line 752
    fun (_cor0) ->
	let <St1> =
	    %% Line 753
	    apply 'create_symbol_table'/1
		(_cor0)
	in  let <St> =
		%% Line 754
		apply 'compute_states'/1
		    (St1)
	    in  %% Line 755
		apply 'create_precedence_table'/1
		    (St)
'parse_actions'/1 =
    %% Line 757
    fun (_cor0) ->
	let <_X_> =
	    %% Line 758
	    ( call 'erlang':'erase'
		  ()
	      -| ['result_not_wanted'] )
	in  %% Line 759
	    ( case _cor0 of
		( <( {'yecc',_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_rec63,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45}
		     -| ['compiler_generated'] )> when 'true' ->
		      let <ParseActions> =
			  apply 'compute_parse_actions'/3
			      (_rec63, _cor0, [])
		      in  let <_X_> =
			      %% Line 760
			      ( call 'erlang':'erase'
				    ()
				-| ['result_not_wanted'] )
			  in  let <_cor7> =
				  %% Line 761
				  call 'erlang':'setelement'
				      (23, _cor0, [])
			      in  %% Line 761
				  call 'erlang':'setelement'
				      (20, _cor7, ParseActions)
		  -| ['compiler_generated'] )
		( <_cor46> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','yecc'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	      -| ['compiler_generated'] )
'action_conflicts'/1 =
    %% Line 763
    fun (_cor0) ->
	let <St> =
	    %% Line 764
	    apply 'find_action_conflicts'/1
		(_cor0)
	in  %% Line 765
	    case St of
	      <{'yecc',_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41}> when 'true' ->
		  call 'erlang':'setelement'
		      (13, St, 'true')
	      ( <_cor42> when 'true' ->
		    ( call ( 'erlang'
			     -| ['compiler_generated'] ):( 'error'
							   -| ['compiler_generated'] )
			  (( {'badrecord','yecc'}
			     -| ['compiler_generated'] ))
		      -| ['compiler_generated'] )
		-| ['compiler_generated'] )
	    end
'write_file'/1 =
    %% Line 769
    fun (_cor0) ->
	%% Line 770
	case _cor0 of
	  <{'yecc',_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,ParseActions,_cor53,_cor54,_cor55,_cor56,GotoTab,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,_cor69}> when 'true' ->
	      let <Sorted> =
		  %% Line 771
		  apply 'sort_parse_actions'/1
		      (ParseActions)
	      in  let <StateReprs> =
		      %% Line 772
		      apply 'find_identical_shift_states'/1
			  (Sorted)
		  in  let <StateInfo> =
			  %% Line 773
			  apply 'collect_some_state_info'/2
			      (Sorted, StateReprs)
		      in  let <StateJumps> =
			      %% Line 774
			      apply 'find_partial_shift_states'/2
				  (Sorted, StateReprs)
			  in  let <UserCodeActions> =
				  %% Line 775
				  apply 'find_user_code'/2
				      (Sorted, _cor0)
			      in  %% Line 779
				  case %% Line 780
				       apply 'output_prelude'/3
					   (_cor51, _cor50, _cor0) of
				    <{St10,N_lines,LastErlangCodeLine}> when 'true' ->
					%% Line 781
					( case St10 of
					    ( <( {'yecc',_cor102,_cor103,_cor104,_cor105,_cor106,_cor107,_cor108,_cor109,_cor110,_cor111,_cor112,_cor113,_cor114,_cor115,_cor116,_cor117,_cor118,_rec68,_cor119,_cor120,_cor121,_cor122,_cor123,_cor124,_cor125,_cor126,_cor127,_cor128,_cor129,_cor130,_cor131,_cor132,_cor133,_cor134,_cor135,_cor136,_cor137}
						 -| ['compiler_generated'] )> when 'true' ->
						  let <_rec66> =
						      call 'erlang':'+'
							  (_rec68, N_lines)
						  in  let <_cor14> =
							  call 'erlang':'setelement'
							      (19, St10, _rec66)
						      in  let <St25> =
							      %% Line 782
							      apply 'nl'/1
								  (_cor14)
							  in  %% Line 783
							      ( case St25 of
								  ( <( {'yecc',_cor177,_cor178,_cor179,_cor180,_cor181,_cor182,_cor183,_cor184,_cor185,_cor186,_cor187,_cor188,_cor189,_cor190,_cor191,_cor192,_cor193,_rec69,_cor194,_cor195,_cor196,_cor197,_cor198,_cor199,_cor200,_cor201,_cor202,_cor203,_cor204,_cor205,_cor206,_cor207,_cor208,_cor209,_cor210,_cor211,_cor212}
								       -| ['compiler_generated'] )> when 'true' ->
									let <St30> =
									    apply 'output_file_directive'/3
										(St25, _cor36, _rec69)
									in  let <St40> =
										%% Line 784
										apply 'nl'/1
										    (St30)
									    in  let <St50> =
										    %% Line 785
										    apply 'output_actions'/3
											(St40, StateJumps, StateInfo)
										in  let <_cor27> =
											%% Line 786
											( letrec
											      'lc$^0'/1 =
												  fun (_cor25) ->
												      case _cor25 of
													<[{{From,Symbol},To}|_cor23]> when 'true' ->
													    let <_cor26> =
														apply 'lc$^0'/1
														    (_cor23)
													    in  ( [{Symbol,{From,To}}|_cor26]
														  -| ['compiler_generated'] )
													( <[_cor22|_cor23]> when 'true' ->
													      apply 'lc$^0'/1
														  (_cor23)
													  -| ['compiler_generated'] )
													<[]> when 'true' ->
													    []
													( <_cor25> when 'true' ->
													      ( primop 'match_fail'
														    ({'function_clause',_cor25})
														-| [{'function_name',{'lc$^0',1}}] )
													  -| ['compiler_generated'] )
												      end
											  in  let <_cor24> =
												  call 'ets':'tab2list'
												      (GotoTab)
											      in  apply 'lc$^0'/1
												      (_cor24)
											  -| ['list_comprehension'] )
										    in  let <Go> =
											    %% Line 787
											    apply 'family_with_domain'/2
												(_cor27, _cor58)
											in  let <St60> =
												%% Line 788
												apply 'output_goto'/3
												    (St50, Go, StateInfo)
											    in  let <St70> =
												    %% Line 789
												    apply 'output_inlined'/3
													(St60, UserCodeActions, _cor35)
												in  let <St> =
													%% Line 790
													apply 'nl'/1
													    (St70)
												    in  %% Line 791
													case LastErlangCodeLine of
													  %% Line 794
													  <{'last_erlang_code_line',Last_line}> when 'true' ->
													      %% Line 795
													      apply 'output_file_directive'/3
														  (St, _cor35, Last_line)
													  %% Line 796
													  <'no_erlang_code'> when 'true' ->
													      %% Line 797
													      St
													  ( <_cor33> when 'true' ->
														primop 'match_fail'
														    ({'case_clause',_cor33})
													    -| ['compiler_generated'] )
													end
								    -| ['compiler_generated'] )
								  ( <_cor213> when 'true' ->
									( call ( 'erlang'
										 -| ['compiler_generated'] ):( 'error'
													       -| ['compiler_generated'] )
									      (( {'badrecord','yecc'}
										 -| ['compiler_generated'] ))
									  -| ['compiler_generated'] )
								    -| ['compiler_generated'] )
								end
								-| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					    ( <_cor138> when 'true' ->
						  ( call ( 'erlang'
							   -| ['compiler_generated'] ):( 'error'
											 -| ['compiler_generated'] )
							(( {'badrecord','yecc'}
							   -| ['compiler_generated'] ))
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					  end
					  -| ['compiler_generated'] )
				    ( <_cor8> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor8})
				      -| ['compiler_generated'] )
				  end
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'yecc_ret'/1 =
    %% Line 800
    fun (_cor0) ->
	let <St> =
	    %% Line 801
	    apply 'check_expected'/1
		(_cor0)
	in  do  %% Line 802
		apply 'report_errors'/1
		    (St)
		do  %% Line 803
		    apply 'report_warnings'/1
			(St)
		    %% Line 804
		    ( case St of
			( <( {'yecc',_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_rec70,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52}
			     -| ['compiler_generated'] )> when 'true' ->
			      let <Es> =
				  apply 'pack_errors'/1
				      (_rec70)
			      in  let <Ws> =
				      %% Line 805
				      apply 'pack_warnings'/1
					  (_cor26)
				  in  let <Werror> =
					  %% Line 806
					  apply 'werror'/1
					      (St)
				      in  %% Line 807
					  case <> of
					    %% Line 808
					    <>
						when call 'erlang':'=:='
						      (Werror,
						       'true') ->
						%% Line 809
						apply 'do_error_return'/3
						    (St, Es, Ws)
					    %% Line 810
					    <>
						when call 'erlang':'=:='
						      (Es,
						       []) ->
						%% Line 811
						case call 'lists':'member'
							 ('return_warnings', _cor23) of
						  %% Line 812
						  <'true'> when 'true' ->
						      {'ok',_cor18,Ws}
						  %% Line 813
						  <'false'> when 'true' ->
						      {'ok',_cor18}
						  ( <_cor15> when 'true' ->
							primop 'match_fail'
							    ({'case_clause',_cor15})
						    -| ['compiler_generated'] )
						end
					    %% Line 815
					    <> when 'true' ->
						%% Line 816
						apply 'do_error_return'/3
						    (St, Es, Ws)
					  end
			  -| ['compiler_generated'] )
			( <_cor53> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','yecc'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
'do_error_return'/3 =
    %% Line 819
    fun (_cor2,_cor1,_cor0) ->
	%% Line 820
	( case _cor2 of
	    ( <( {'yecc',_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_rec75,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44}
		 -| ['compiler_generated'] )> when 'true' ->
		  case call 'lists':'member'
			   ('return_errors', _rec75) of
		    %% Line 821
		    <'true'> when 'true' ->
			{'error',_cor1,_cor0}
		    %% Line 822
		    <'false'> when 'true' ->
			'error'
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor5})
		      -| ['compiler_generated'] )
		  end
	      -| ['compiler_generated'] )
	    ( <_cor45> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','yecc'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'check_expected'/1 =
    %% Line 825
    fun (_cor0) ->
	%% Line 828
	case _cor0 of
	  <{'yecc',_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,Done,SR,RR,NStates0,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,ExpSR,ExpStates,_cor49,_cor50}> when 'true' ->
	      let <_cor2> =
		  %% Line 829
		  call 'lists':'usort'
		      (RR)
	      in  let <N_RR> =
		      %% Line 829
		      call 'erlang':'length'
			  (_cor2)
		  in  let <_cor4> =
			  %% Line 830
			  call 'lists':'usort'
			      (SR)
		      in  let <N_SR> =
			      %% Line 830
			      call 'erlang':'length'
				  (_cor4)
			  in  let <_cor10> =
				  %% Line 831
				  case <> of
				    %% Line 832
				    <>
					when let <_cor6> =
					      call 'erlang':'=:='
						  (Done, 'false')
					  in  let <_cor7> =
						  call 'erlang':'is_boolean'
						      (Done)
					      in  call 'erlang':'and'
						      (_cor6, _cor7) ->
					_cor0
				    %% Line 834
				    <>
					when let <_cor8> =
					      call 'erlang':'=:='
						  (N_SR, ExpSR)
					  in  let <_cor9> =
						  call 'erlang':'=:='
						      (N_RR, 0)
					      in  call 'erlang':'and'
						      (_cor8, _cor9) ->
					_cor0
				    %% Line 836
				    <> when 'true' ->
					%% Line 837
					apply 'add_warning'/3
					    ('none', {'conflicts',N_SR,N_RR}, _cor0)
				  end
			      in  let <NStates> =
				      %% Line 839
				      call 'erlang':'+'
					  (NStates0, 1)
				  in  %% Line 840
				      case <> of
					%% Line 841
					<>
					    when try
						  let <_cor13> =
						      call 'erlang':'=:='
							  (Done, 'false')
						  in  let <_cor14> =
							  call 'erlang':'=:='
							      (ExpStates, [])
						      in  let <_cor15> =
							      call 'erlang':'or'
								  (_cor13, _cor14)
							  in  let <_cor16> =
								  call 'erlang':'=:='
								      (NStates, ExpStates)
							      in  let <_cor17> =
								      call 'erlang':'or'
									  (_cor15, _cor16)
								  in  let <_cor18> =
									  call 'erlang':'is_boolean'
									      (Done)
								      in  call 'erlang':'and'
									      (_cor17, _cor18)
					      of <Try> ->
						  Try
					      catch <T,R> ->
						  'false' ->
					    _cor10
					%% Line 843
					<> when 'true' ->
					    %% Line 844
					    apply 'add_warning'/3
						('none', {'n_states',ExpStates,NStates}, _cor10)
				      end
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'pack_errors'/1 =
    %% Line 847
    fun (_cor0) ->
	case _cor0 of
	  <Es = [{File,_cor7}|_cor8]> when 'true' ->
	      let <_cor4> =
		  %% Line 848
		  ( fun (_cor2) ->
			case _cor2 of
			  <{_cor9,E}> when 'true' ->
			      [E|[]]
			  ( <_cor3> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_cor3})
				  -| [{'function_name',{'-pack_errors/1-fun-0-',1}}] )
			    -| ['compiler_generated'] )
			end
		    -| [{'id',{0,0,'-pack_errors/1-fun-0-'}}] )
	      in  let <_cor1> =
		      %% Line 848
		      call 'lists':'sort'
			  (Es)
		  in  let <_cor5> =
			  %% Line 848
			  call 'lists':'flatmap'
			      (_cor4, _cor1)
		      in  %% Line 848
			  [{File,_cor5}|[]]
	  %% Line 849
	  <[]> when 'true' ->
	      %% Line 850
	      []
	  ( <_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6})
		  -| [{'function_name',{'pack_errors',1}}] )
	    -| ['compiler_generated'] )
	end
'pack_warnings'/1 =
    %% Line 852
    fun (_cor0) ->
	case _cor0 of
	  <Ws = [{File,_cor7}|_cor8]> when 'true' ->
	      let <_cor4> =
		  %% Line 853
		  ( fun (_cor2) ->
			case _cor2 of
			  <{_cor9,W}> when 'true' ->
			      [W|[]]
			  ( <_cor3> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_cor3})
				  -| [{'function_name',{'-pack_warnings/1-fun-0-',1}}] )
			    -| ['compiler_generated'] )
			end
		    -| [{'id',{0,0,'-pack_warnings/1-fun-0-'}}] )
	      in  let <_cor1> =
		      %% Line 853
		      call 'lists':'sort'
			  (Ws)
		  in  let <_cor5> =
			  %% Line 853
			  call 'lists':'flatmap'
			      (_cor4, _cor1)
		      in  %% Line 853
			  [{File,_cor5}|[]]
	  %% Line 854
	  <[]> when 'true' ->
	      %% Line 855
	      []
	  ( <_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6})
		  -| [{'function_name',{'pack_warnings',1}}] )
	    -| ['compiler_generated'] )
	end
'report_errors'/1 =
    %% Line 857
    fun (_cor0) ->
	%% Line 858
	( case _cor0 of
	    ( <( {'yecc',_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_rec76,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48}
		 -| ['compiler_generated'] )> when 'true' ->
		  case call 'lists':'member'
			   ('report_errors', _rec76) of
		    %% Line 859
		    <'true'> when 'true' ->
			let <_cor10> =
			    %% Line 860
			    ( fun (_cor8) ->
				  case _cor8 of
				    <{File,{'none',Mod,E}}> when 'true' ->
					let <_cor6> =
					    %% Line 862
					    call Mod:'format_error'
						(E)
					in  %% Line 861
					    call 'io':'fwrite'
						(#{#<126>(8,1,'integer',['unsigned'|['big']]),
						   #<116>(8,1,'integer',['unsigned'|['big']]),
						   #<115>(8,1,'integer',['unsigned'|['big']]),
						   #<58>(8,1,'integer',['unsigned'|['big']]),
						   #<32>(8,1,'integer',['unsigned'|['big']]),
						   #<126>(8,1,'integer',['unsigned'|['big']]),
						   #<116>(8,1,'integer',['unsigned'|['big']]),
						   #<115>(8,1,'integer',['unsigned'|['big']]),
						   #<10>(8,1,'integer',['unsigned'|['big']])}#, %% Line 862
												[File|[_cor6|[]]])
				    %% Line 863
				    <{File,{Line,Mod,E}}> when 'true' ->
					let <_cor7> =
					    %% Line 865
					    call Mod:'format_error'
						(E)
					in  %% Line 864
					    call 'io':'fwrite'
						(#{#<126>(8,1,'integer',['unsigned'|['big']]),
						   #<116>(8,1,'integer',['unsigned'|['big']]),
						   #<115>(8,1,'integer',['unsigned'|['big']]),
						   #<58>(8,1,'integer',['unsigned'|['big']]),
						   #<126>(8,1,'integer',['unsigned'|['big']]),
						   #<119>(8,1,'integer',['unsigned'|['big']]),
						   #<58>(8,1,'integer',['unsigned'|['big']]),
						   #<32>(8,1,'integer',['unsigned'|['big']]),
						   #<126>(8,1,'integer',['unsigned'|['big']]),
						   #<116>(8,1,'integer',['unsigned'|['big']]),
						   #<115>(8,1,'integer',['unsigned'|['big']]),
						   #<10>(8,1,'integer',['unsigned'|['big']])}#, %% Line 865
												[File|[Line|[_cor7|[]]]])
				    ( <_cor9> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor9})
					    -| [{'function_name',{'-report_errors/1-fun-0-',1}}] )
				      -| ['compiler_generated'] )
				  end
			      -| [{'id',{0,0,'-report_errors/1-fun-0-'}}] )
			in  let <_cor5> =
				%% Line 866
				call 'lists':'sort'
				    (_cor21)
			    in  %% Line 860
				call 'lists':'foreach'
				    (_cor10, _cor5)
		    %% Line 867
		    <'false'> when 'true' ->
			%% Line 868
			'ok'
		    ( <_cor11> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor11})
		      -| ['compiler_generated'] )
		  end
	      -| ['compiler_generated'] )
	    ( <_cor49> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','yecc'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'report_warnings'/1 =
    %% Line 871
    fun (_cor0) ->
	%% Line 872
	( case _cor0 of
	    ( <( {'yecc',_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_rec78,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <Werror> =
		      call 'lists':'member'
			  ('warnings_as_errors', _rec78)
		  in  let <_cor5> =
			  %% Line 873
			  case Werror of
			    %% Line 874
			    <'true'> when 'true' ->
				[]
			    %% Line 875
			    <'false'> when 'true' ->
				[87|[97|[114|[110|[105|[110|[103|[58|[32]]]]]]]]]
			    ( <_cor4> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor4})
			      -| ['compiler_generated'] )
			  end
		      in  let <_cor11> =
			      %% Line 877
			      ( case Werror of
				  ( <( 'true'
				       -| ['compiler_generated'] )> when 'true' ->
					call 'lists':'member'
					    ('report_errors', _rec78)
				    -| ['compiler_generated'] )
				  ( <( 'false'
				       -| ['compiler_generated'] )> when 'true' ->
					'false'
				    -| ['compiler_generated'] )
				  ( <_cor7> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {( 'badarg'
						    -| ['compiler_generated'] ),_cor7}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			  in  let <_cor17> =
				  %% Line 878
				  ( case call 'lists':'member'
					     ('report_warnings', _rec78) of
				      ( <( 'true'
					   -| ['compiler_generated'] )> when 'true' ->
					    'true'
					-| ['compiler_generated'] )
				      ( <( 'false'
					   -| ['compiler_generated'] )> when 'true' ->
					    _cor11
					-| ['compiler_generated'] )
				      ( <_cor13> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {( 'badarg'
							-| ['compiler_generated'] ),_cor13}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
			      in  %% Line 878
				  case _cor17 of
				    %% Line 879
				    <'true'> when 'true' ->
					let <_cor25> =
					    %% Line 880
					    ( fun (_cor23) ->
						  case _cor23 of
						    <{File,{'none',Mod,W}}> when 'true' ->
							let <_cor21> =
							    %% Line 883
							    call Mod:'format_error'
								(W)
							in  %% Line 881
							    call 'io':'fwrite'
								(#{#<126>(8,1,'integer',['unsigned'|['big']]),
								   #<116>(8,1,'integer',['unsigned'|['big']]),
								   #<115>(8,1,'integer',['unsigned'|['big']]),
								   #<58>(8,1,'integer',['unsigned'|['big']]),
								   #<32>(8,1,'integer',['unsigned'|['big']]),
								   #<126>(8,1,'integer',['unsigned'|['big']]),
								   #<115>(8,1,'integer',['unsigned'|['big']]),
								   #<126>(8,1,'integer',['unsigned'|['big']]),
								   #<116>(8,1,'integer',['unsigned'|['big']]),
								   #<115>(8,1,'integer',['unsigned'|['big']]),
								   #<10>(8,1,'integer',['unsigned'|['big']])}#, %% Line 882
														[File|[_cor5|%% Line 883
															     [_cor21|[]]]])
						    %% Line 884
						    <{File,{Line,Mod,W}}> when 'true' ->
							let <_cor22> =
							    %% Line 887
							    call Mod:'format_error'
								(W)
							in  %% Line 885
							    call 'io':'fwrite'
								(#{#<126>(8,1,'integer',['unsigned'|['big']]),
								   #<116>(8,1,'integer',['unsigned'|['big']]),
								   #<115>(8,1,'integer',['unsigned'|['big']]),
								   #<58>(8,1,'integer',['unsigned'|['big']]),
								   #<126>(8,1,'integer',['unsigned'|['big']]),
								   #<119>(8,1,'integer',['unsigned'|['big']]),
								   #<58>(8,1,'integer',['unsigned'|['big']]),
								   #<32>(8,1,'integer',['unsigned'|['big']]),
								   #<126>(8,1,'integer',['unsigned'|['big']]),
								   #<115>(8,1,'integer',['unsigned'|['big']]),
								   #<126>(8,1,'integer',['unsigned'|['big']]),
								   #<116>(8,1,'integer',['unsigned'|['big']]),
								   #<115>(8,1,'integer',['unsigned'|['big']]),
								   #<10>(8,1,'integer',['unsigned'|['big']])}#, %% Line 886
														[File|[Line|[_cor5|%% Line 887
																   [_cor22|[]]]]])
						    ( <_cor24> when 'true' ->
							  ( primop 'match_fail'
								({'function_clause',_cor24})
							    -| [{'function_name',{'-report_warnings/1-fun-0-',1}}] )
						      -| ['compiler_generated'] )
						  end
					      -| [{'id',{0,0,'-report_warnings/1-fun-0-'}}] )
					in  let <_cor20> =
						%% Line 888
						call 'lists':'sort'
						    (_cor37)
					    in  %% Line 880
						call 'lists':'foreach'
						    (_cor25, _cor20)
				    %% Line 889
				    <'false'> when 'true' ->
					%% Line 890
					'ok'
				    ( <_cor26> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_cor26})
				      -| ['compiler_generated'] )
				  end
	      -| ['compiler_generated'] )
	    ( <_cor64> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','yecc'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'add_error'/2 =
    %% Line 893
    fun (_cor1,_cor0) ->
	%% Line 894
	apply 'add_error'/3
	    ('none', _cor1, _cor0)
'add_error'/3 =
    %% Line 896
    fun (_cor2,_cor1,_cor0) ->
	%% Line 897
	( case _cor0 of
	    ( <( {'yecc',_rec82,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43}
		 -| ['compiler_generated'] )> when 'true' ->
		  apply 'add_error'/4
		      (_rec82, _cor2, _cor1, _cor0)
	      -| ['compiler_generated'] )
	    ( <_cor44> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','yecc'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'add_error'/4 =
    %% Line 899
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 900
	( case _cor0 of
	    ( <( {'yecc',_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_rec85,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_rec83> =
		      [{_cor3,{_cor2,'yecc',_cor1}}|_rec85]
		  in  call 'erlang':'setelement'
			  (11, _cor0, _rec83)
	      -| ['compiler_generated'] )
	    ( <_cor49> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','yecc'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'add_errors'/3 =
    %% Line 902
    fun (_cor2,_cor1,_cor0) ->
	let <_cor8> =
	    %% Line 903
	    ( fun (_cor5,_cor4) ->
		  let <_cor3> =
		      %% Line 904
		      apply 'symbol_line'/2
			  (_cor5, _cor4)
		  in  %% Line 904
		      apply 'add_error'/3
			  (_cor3, {_cor1,_cor5}, _cor4)
	      -| [{'id',{0,0,'-add_errors/3-fun-0-'}}] )
	in  %% Line 903
	    call 'lists':'foldl'
		(_cor8, _cor0, _cor2)
'add_warning'/3 =
    %% Line 907
    fun (_cor2,_cor1,_cor0) ->
	%% Line 908
	( case _cor0 of
	    ( <( {'yecc',_rec88,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_rec86> =
		      [{_rec88,{_cor2,'yecc',_cor1}}|_cor22]
		  in  call 'erlang':'setelement'
			  (12, _cor0, _rec86)
	      -| ['compiler_generated'] )
	    ( <_cor49> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','yecc'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'add_warnings'/3 =
    %% Line 910
    fun (_cor2,_cor1,_cor0) ->
	let <_cor8> =
	    %% Line 911
	    ( fun (_cor5,_cor4) ->
		  let <_cor3> =
		      %% Line 912
		      apply 'symbol_line'/2
			  (_cor5, _cor4)
		  in  %% Line 912
		      apply 'add_warning'/3
			  (_cor3, {_cor1,_cor5}, _cor4)
	      -| [{'id',{0,0,'-add_warnings/3-fun-0-'}}] )
	in  %% Line 911
	    call 'lists':'foldl'
		(_cor8, _cor0, _cor2)
'check_rhs'/2 =
    %% Line 915
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{'symbol',_cor18,'$empty'}|[]],St> when 'true' ->
	      %% Line 916
	      St
	  %% Line 917
	  <Rhs,St0> when 'true' ->
	      %% Line 918
	      case apply 'symbol_find'/2
		       ('$empty', Rhs) of
		%% Line 919
		<{'symbol',Line,_cor19}> when 'true' ->
		    %% Line 920
		    apply 'add_error'/3
			(Line, 'illegal_empty', St0)
		%% Line 921
		<'false'> when 'true' ->
		    let <_cor14> =
			%% Line 922
			( fun (_cor11,_cor10) ->
			      %% Line 923
			      ( case _cor10 of
				  ( <( {'yecc',_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_rec90,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55}
				       -| ['compiler_generated'] )> when 'true' ->
					case apply 'symbol_member'/2
						 (_cor11, _rec90) of
					  %% Line 924
					  <'true'> when 'true' ->
					      _cor10
					  %% Line 926
					  <'false'> when 'true' ->
					      %% Line 927
					      ( case _cor11 of
						  ( <( {'symbol',_cor57,_rec91}
						       -| ['compiler_generated'] )> when 'true' ->
							let <E> = {'undefined_symbol',_rec91}
							in  %% Line 928
							    apply 'add_error'/3
								(_cor57, E, _cor10)
						    -| ['compiler_generated'] )
						  ( <_cor58> when 'true' ->
							( call ( 'erlang'
								 -| ['compiler_generated'] ):( 'error'
											       -| ['compiler_generated'] )
							      (( {'badrecord','symbol'}
								 -| ['compiler_generated'] ))
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						end
						-| ['compiler_generated'] )
					  ( <_cor9> when 'true' ->
						primop 'match_fail'
						    ({'case_clause',_cor9})
					    -| ['compiler_generated'] )
					end
				    -| ['compiler_generated'] )
				  ( <_cor56> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','yecc'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			  -| [{'id',{0,0,'-check_rhs/2-fun-0-'}}] )
		    in  %% Line 922
			call 'lists':'foldl'
			    (_cor14, %% Line 930
				     St0, %% Line 930
					  Rhs)
		( <_cor15> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor15})
		  -| ['compiler_generated'] )
	      end
	end
'check_action'/1 =
    %% Line 933
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 934
	    apply 'add_roberts_dot'/2
		(_cor0, 0)
	in  %% Line 934
	    case call 'erl_parse':'parse_exprs'
		     (_cor1) of
	      %% Line 935
	      <{'error',_X_Error}> when 'true' ->
		  %% Line 936
		  {'false','false'}
	      %% Line 937
	      <{'ok',[Expr|Exprs]}> when 'true' ->
		  let <_cor4> =
		      %% Line 938
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (Exprs,
				       []) ->
				call 'erl_lint':'is_guard_test'
				    (Expr)
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				'false'
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		  in  %% Line 939
		      {_cor4,'true'}
	      ( <_cor6> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor6})
		-| ['compiler_generated'] )
	    end
'add_roberts_dot'/2 =
    %% Line 942
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],Line> when 'true' ->
	      %% Line 943
	      [{'dot',Line}|[]]
	  %% Line 944
	  <[{'dot',Line}|_cor6],_cor7> when 'true' ->
	      %% Line 945
	      [{'dot',Line}|[]]
	  %% Line 946
	  <[Token|Tokens],_cor8> when 'true' ->
	      let <_cor2> =
		  %% Line 947
		  call 'erlang':'element'
		      (2, Token)
	      in  let <_cor3> =
		      %% Line 947
		      apply 'add_roberts_dot'/2
			  (Tokens, _cor2)
		  in  %% Line 947
		      [Token|_cor3]
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'add_roberts_dot',2}}] )
	    -| ['compiler_generated'] )
	end
'subst_pseudo_vars'/3 =
    %% Line 949
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],_cor22,St> when 'true' ->
	      %% Line 950
	      {[],St}
	  %% Line 951
	  <[H0|T0],NmbrOfDaughters,St0> when 'true' ->
	      %% Line 952
	      case apply 'subst_pseudo_vars'/3
		       (H0, NmbrOfDaughters, St0) of
		<{H,St1}> when 'true' ->
		    %% Line 953
		    case apply 'subst_pseudo_vars'/3
			     (T0, NmbrOfDaughters, St1) of
		      <{T,St}> when 'true' ->
			  %% Line 954
			  {[H|T],St}
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 955
	  <{'atom',Line,Atom},NmbrOfDaughters,St0> when 'true' ->
	      %% Line 956
	      case call 'erlang':'atom_to_list'
		       (Atom) of
		%% Line 957
		<[36|Rest]> when 'true' ->
		    %% Line 958
		    try
			call 'erlang':'list_to_integer'
			    (Rest)
		    of <_cor5> ->
			case _cor5 of
			  %% Line 959
			  <N>
			      when let <_cor6> =
				    call 'erlang':'>'
					(_cor5, 0)
				in  let <_cor7> =
					call 'erlang':'=<'
					    (_cor5, NmbrOfDaughters)
				    in  call 'erlang':'and'
					    (_cor6, _cor7) ->
			      let <_cor8> =
				  %% Line 960
				  [95|[95|Rest]]
			      in  let <_cor9> =
				      %% Line 960
				      call 'erlang':'list_to_atom'
					  (_cor8)
				  in  %% Line 960
				      {{'var',Line,_cor9},St0}
			  %% Line 961
			  <_cor23> when 'true' ->
			      let <St> =
				  %% Line 962
				  apply 'add_error'/3
				      (Line, {'undefined_pseudo_variable',Atom}, %% Line 963
										 St0)
			      in  %% Line 964
				  {{'atom',Line,'$undefined'},St}
			end
		    catch <_cor14,_cor13,_cor12> ->
			case <_cor14,_cor13,_cor12> of
			  %% Line 966
			  <'error',_cor24,_cor25> when 'true' ->
			      {{'atom',Line,Atom},St0}
			  ( <_cor14,_cor13,_cor12> when 'true' ->
				primop 'raise'
				    (_cor12, _cor13)
			    -| ['compiler_generated'] )
			end
		%% Line 968
		<_cor26> when 'true' ->
		    %% Line 969
		    {{'atom',Line,Atom},St0}
	      end
	  %% Line 971
	  <Tuple,NmbrOfDaughters,St0>
	      when call 'erlang':'is_tuple'
		    (Tuple) ->
	      let <_cor16> =
		  %% Line 972
		  call 'erlang':'tuple_to_list'
		      (Tuple)
	      in  %% Line 972
		  case apply 'subst_pseudo_vars'/3
			   (_cor16, NmbrOfDaughters, St0) of
		    <{L,St}> when 'true' ->
			let <_cor18> =
			    %% Line 973
			    call 'erlang':'list_to_tuple'
				(L)
			in  %% Line 973
			    {_cor18,St}
		    ( <_cor17> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor17})
		      -| ['compiler_generated'] )
		  end
	  %% Line 974
	  <Something_else,_cor27,St> when 'true' ->
	      %% Line 975
	      {Something_else,St}
	end
'kind_of_symbol'/2 =
    %% Line 977
    fun (_cor1,_cor0) ->
	%% Line 978
	( case _cor1 of
	    ( <( {'yecc',_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_rec93,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48}
		 -| ['compiler_generated'] )> when 'true' ->
		  case call 'lists':'member'
			   (_cor0, _rec93) of
		    %% Line 979
		    <'false'> when 'true' ->
			%% Line 980
			case call 'lists':'member'
				 (_cor0, _cor37) of
			  %% Line 981
			  <'false'> when 'true' ->
			      %% Line 982
			      case _cor44 of
				%% Line 983
				<_cor124>
				    when call 'erlang':'=:='
					  (_cor44,
					   _cor0) ->
				    %% Line 984
				    'endsymbol'
				%% Line 985
				<_cor125> when 'true' ->
				    %% Line 986
				    'unknown'
			      end
			  %% Line 988
			  <'true'> when 'true' ->
			      %% Line 989
			      'terminal'
			  ( <_cor9> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor9})
			    -| ['compiler_generated'] )
			end
		    %% Line 991
		    <'true'> when 'true' ->
			%% Line 992
			'nonterminal'
		    ( <_cor10> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor10})
		      -| ['compiler_generated'] )
		  end
	      -| ['compiler_generated'] )
	    ( <_cor49> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','yecc'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'compute_states'/1 =
    %% Line 1020
    fun (_cor0) ->
	%% Line 1021
	( case _cor0 of
	    ( <( {'yecc',_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,_cor69,_cor70,_cor71,_cor72,_cor73,_cor74,_cor75,_rec96,_cor76,_cor77,_cor78,_cor79,_cor80,_cor81,_cor82,_cor83,_cor84,_cor85,_cor86,_cor87,_cor88,_cor89,_cor90,_cor91,_cor92}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_cor11> =
		      %% Line 1022
		      ( fun (_cor9) ->
			    case _cor9 of
			      <R = {'rule',_cor94,_cor95,Syms,_cor96,_cor97,_cor98}> when 'true' ->
				  let <_rec97> =
				      %% Line 1023
				      apply 'code_symbols'/2
					  (Syms, _rec96)
				  in  %% Line 1023
				      call 'erlang':'setelement'
					  (4, R, _rec97)
			      ( <_cor10> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_cor10})
				      -| [{'function_name',{'-compute_states/1-fun-0-',1}}] )
				-| ['compiler_generated'] )
			    end
			-| [{'id',{0,0,'-compute_states/1-fun-0-'}}] )
		  in  let <CodedRules> =
			  %% Line 1022
			  call 'lists':'map'
			      (_cor11, _cor84)
		      in  let <CodedNonterminals> =
			      %% Line 1025
			      apply 'code_symbols'/2
				  (_cor81, _rec96)
			  in  let <_rec101> =
				  %% Line 1028
				  call 'erlang':'list_to_tuple'
				      (CodedRules)
			      in  let <_cor18> =
				      %% Line 1028
				      call 'erlang':'setelement'
					  (31, _cor0, _rec101)
				  in  let <_cor19> =
					  %% Line 1027
					  call 'erlang':'setelement'
					      (30, _cor18, CodedRules)
				      in  let <_cor21> =
					      %% Line 1029
					      call 'erlang':'setelement'
						  (27, _cor19, CodedNonterminals)
					  in  %% Line 1030
					      case %% Line 1031
						   apply 'make_rule_index'/2
						       (_cor21, _cor84) of
						<{RuleIndex,RulePointer2Rule}> when 'true' ->
						    let <StateIdTab> =
							%% Line 1033
							call 'ets':'new'
							    ('yecc_state_id', ['set'])
						    in  let <GotoTab> =
							    %% Line 1034
							    call 'ets':'new'
								('yecc_goto', ['bag'])
							in  %% Line 1035
							    ( case _cor21 of
								( <( {'yecc',_cor255,_cor256,_cor257,_cor258,_cor259,_cor260,_cor261,_cor262,_cor263,_cor264,_cor265,_cor266,_cor267,_cor268,_cor269,_cor270,_cor271,_cor272,_cor273,_cor274,_cor275,_cor276,_cor277,_cor278,_cor279,_cor280,_cor281,_cor282,_rec104,_cor283,_cor284,_cor285,_cor286,_cor287,_cor288,_cor289,_cor290}
								     -| ['compiler_generated'] )> when 'true' ->
								      let <RulePointerRhs> =
									  apply 'make_rhs_index'/1
									      (_rec104)
								      in  let <RulePointerInfo> =
									      %% Line 1036
									      apply 'make_rule_pointer_info'/3
										  (_cor21, RulePointerRhs, RuleIndex)
									  in  let <Tables> =
										  %% Line 1038
										  {'tabs',_rec96,'undefined',%% Line 1039
													     StateIdTab,%% Line 1040
															RulePointerRhs,%% Line 1041
																       RulePointerInfo,%% Line 1042
																		       GotoTab}
									      in  let <_X_> =
										      %% Line 1044
										      ( call 'erlang':'erase'
											    ()
											-| ['result_not_wanted'] )
										  in  let <EndsymCode> =
											  %% Line 1045
											  apply 'code_terminal'/2
											      (_cor286, _cor274)
										      in  %% Line 1046
											  case apply 'compute_state'/2
												   ([{EndsymCode,1}|[]], Tables) of
											    <{StateId,State0}> when 'true' ->
												let <StateNum0> =
												    %% Line 1048
												    apply 'first_state'/0
													()
												in  let <FirstState> = {%% Line 1049
													 StateNum0,%% Line 1049
														   State0}
												    in  let <StateTab1> =
													    %% Line 1050
													    apply 'insert_state'/4
														(Tables, {}, FirstState, StateId)
													in  let <_cor44> =
														%% Line 1052
														apply 'get_current_symbols'/1
														    (State0)
													    in  %% Line 1051
														case %% Line 1052
														     apply 'compute_states1'/4
															 ([{StateNum0,_cor44}|[]], %% Line 1053
																		   FirstState, %% Line 1053
																			       StateTab1, %% Line 1053
																					  Tables) of
														  <{StateTab,N}> when 'true' ->
														      %% Line 1054
														      case call 'ets':'delete'
															       (StateIdTab) of
															<'true'> when 'true' ->
															    let <_cor48> =
																%% Line 1056
																call 'erlang':'setelement'
																    (32, _cor0, RulePointer2Rule)
															    in  let <_cor49> =
																    %% Line 1055
																    call 'erlang':'setelement'
																	(25, _cor48, GotoTab)
																in  let <_cor50> =
																	%% Line 1055
																	call 'erlang':'setelement'
																	    (23, _cor49, StateTab)
																    in  let <_cor52> =
																	    %% Line 1055
																	    call 'erlang':'setelement'
																		(16, _cor50, N)
																	in  %% Line 1057
																	    ( case _cor52 of
																		( <( {'yecc',_cor404,_cor405,_cor406,_cor407,_cor408,_cor409,_cor410,_cor411,_cor412,_cor413,_cor414,_cor415,_cor416,_cor417,_cor418,_cor419,_cor420,_cor421,_cor422,_cor423,_rec108,_cor424,_cor425,_cor426,_cor427,_cor428,_cor429,_cor430,_cor431,_cor432,_cor433,_cor434,_cor435,_cor436,_cor437,_cor438,_cor439}
																		     -| ['compiler_generated'] )> when 'true' ->
																		      do  apply 'decode_goto'/2
																			      (GotoTab, _rec108)
																			  %% Line 1058
																			  apply 'check_usage'/1
																			      (_cor52)
																		  -| ['compiler_generated'] )
																		( <_cor440> when 'true' ->
																		      ( call ( 'erlang'
																			       -| ['compiler_generated'] ):( 'error'
																							     -| ['compiler_generated'] )
																			    (( {'badrecord','yecc'}
																			       -| ['compiler_generated'] ))
																			-| ['compiler_generated'] )
																		  -| ['compiler_generated'] )
																	      end
																	      -| ['compiler_generated'] )
															( <_cor46> when 'true' ->
															      primop 'match_fail'
																  ({'badmatch',_cor46})
															  -| ['compiler_generated'] )
														      end
														  ( <_cor45> when 'true' ->
															primop 'match_fail'
															    ({'badmatch',_cor45})
														    -| ['compiler_generated'] )
														end
											    ( <_cor40> when 'true' ->
												  primop 'match_fail'
												      ({'badmatch',_cor40})
											      -| ['compiler_generated'] )
											  end
								  -| ['compiler_generated'] )
								( <_cor291> when 'true' ->
								      ( call ( 'erlang'
									       -| ['compiler_generated'] ):( 'error'
													     -| ['compiler_generated'] )
									    (( {'badrecord','yecc'}
									       -| ['compiler_generated'] ))
									-| ['compiler_generated'] )
								  -| ['compiler_generated'] )
							      end
							      -| ['compiler_generated'] )
						( <_cor25> when 'true' ->
						      primop 'match_fail'
							  ({'badmatch',_cor25})
						  -| ['compiler_generated'] )
					      end
	      -| ['compiler_generated'] )
	    ( <_cor93> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','yecc'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'first_state'/0 =
    %% Line 1060
    fun () ->
	%% Line 1061
	0
'decode_goto'/2 =
    %% Line 1063
    fun (_cor1,_cor0) ->
	let <G> =
	    %% Line 1064
	    call 'ets':'tab2list'
		(_cor1)
	in  do  %% Line 1065
		call 'ets':'delete_all_objects'
		    (_cor1)
		let <_cor6> =
		    %% Line 1067
		    ( fun (_cor4) ->
			  case _cor4 of
			    <{{From,Sym,Next}}> when 'true' ->
				let <_cor3> =
				    %% Line 1068
				    apply 'decode_symbol'/2
					(Sym, _cor0)
				in  %% Line 1068
				    {{From,_cor3},Next}
			    ( <_cor5> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor5})
				    -| [{'function_name',{'-decode_goto/2-fun-0-',1}}] )
			      -| ['compiler_generated'] )
			  end
		      -| [{'id',{0,0,'-decode_goto/2-fun-0-'}}] )
		in  let <_cor7> =
			%% Line 1067
			call 'lists':'map'
			    (_cor6, %% Line 1069
				    G)
		    in  %% Line 1066
			call 'ets':'insert'
			    (_cor1, _cor7)
'check_usage'/1 =
    %% Line 1071
    fun (_cor0) ->
	%% Line 1073
	( case _cor0 of
	    ( <( {'yecc',_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_rec109,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <UsedSymbols> =
		      call 'ets':'select'
			  (_rec109, [{{{'_','$1'},'_'},[],['$1']}])
		  in  let <Syms> =
			  %% Line 1074
			  call 'ordsets':'from_list'
			      ([{}|['$empty'|UsedSymbols]])
		      in  let <NonTerms> =
			      %% Line 1075
			      call 'ordsets':'from_list'
				  (_cor53)
			  in  let <_cor9> =
				  %% Line 1076
				  call 'ordsets':'subtract'
				      (NonTerms, Syms)
			      in  let <UnusedNonTerms> =
				      %% Line 1076
				      call 'ordsets':'to_list'
					  (_cor9)
				  in  let <St1> =
					  %% Line 1077
					  apply 'add_warnings'/3
					      (UnusedNonTerms, 'unused_nonterminal', _cor0)
				      in  let <Terms> =
					      %% Line 1078
					      call 'ordsets':'from_list'
						  (_cor52)
					  in  let <_cor15> =
						  %% Line 1079
						  call 'ordsets':'subtract'
						      (Terms, Syms)
					      in  let <_cor16> =
						      %% Line 1079
						      call 'ordsets':'to_list'
							  (_cor15)
						  in  let <St2> =
							  %% Line 1079
							  apply 'add_warnings'/3
							      (_cor16, %% Line 1080
								       'unused_terminal', %% Line 1080
											  St1)
						      in  let <_cor22> =
							      %% Line 1081
							      ( fun (_cor20) ->
								    case _cor20 of
								      <{'rule',_cor140,_cor141,[Name|_cor142],_cor143,_cor144,_cor145}> when 'true' ->
									  %% Line 1082
									  Name
								      ( <_cor21> when 'true' ->
									    ( primop 'match_fail'
										  ({'function_clause',_cor21})
									      -| [{'function_name',{'-check_usage/1-fun-0-',1}}] )
									-| ['compiler_generated'] )
								    end
								-| [{'id',{0,0,'-check_usage/1-fun-0-'}}] )
							  in  %% Line 1083
							      ( case St2 of
								  ( <( {'yecc',_cor146,_cor147,_cor148,_cor149,_cor150,_cor151,_cor152,_cor153,_cor154,_cor155,_cor156,_cor157,_cor158,_cor159,_cor160,_cor161,_cor162,_cor163,_cor164,_cor165,_cor166,_cor167,_cor168,_cor169,_cor170,_cor171,_cor172,_cor173,_rec112,_cor174,_cor175,_cor176,_cor177,_cor178,_cor179,_cor180,_cor181}
								       -| ['compiler_generated'] )> when 'true' ->
									let <DefinedNonTerminals> =
									    call 'lists':'map'
										(_cor22, _rec112)
									in  let <DefNonTerms> =
										%% Line 1084
										call 'ordsets':'from_list'
										    (DefinedNonTerminals)
									    in  let <UndefNonTerms> =
										    %% Line 1085
										    call 'ordsets':'subtract'
											(NonTerms, DefNonTerms)
										in  let <_cor26> =
											%% Line 1086
											call 'ordsets':'subtract'
											    (UndefNonTerms, %% Line 1087
													    UnusedNonTerms)
										    in  let <_cor27> =
											    %% Line 1086
											    call 'ordsets':'to_list'
												(_cor26)
											in  %% Line 1086
											    apply 'add_errors'/3
												(_cor27, %% Line 1088
													 'missing_syntax_rule', %% Line 1088
																St2)
								    -| ['compiler_generated'] )
								  ( <_cor182> when 'true' ->
									( call ( 'erlang'
										 -| ['compiler_generated'] ):( 'error'
													       -| ['compiler_generated'] )
									      (( {'badrecord','yecc'}
										 -| ['compiler_generated'] ))
									  -| ['compiler_generated'] )
								    -| ['compiler_generated'] )
								end
								-| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	    ( <_cor65> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','yecc'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'lookup_state'/2 =
    %% Line 1092
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 1093
	    call 'erlang':'+'
		(_cor0, 1)
	in  %% Line 1093
	    call 'erlang':'element'
		(_cor2, _cor1)
'insert_state'/4 =
    %% Line 1095
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{'tabs',_cor19,_cor20,StateIdTab,_cor21,_cor22,_cor23},StateTab0,State,StateId> when 'true' ->
	      %% Line 1096
	      case State of
		<{N,_X_Items}> when 'true' ->
		    do  %% Line 1097
			apply 'insert_state_id'/3
			    (StateIdTab, N, StateId)
			let <_cor12> =
			    %% Line 1098
			    case <> of
			      %% Line 1099
			      <>
				  when try
					let <_cor5> =
					    call 'erlang':'tuple_size'
						(StateTab0)
					in  call 'erlang':'>'
						(_cor5, N)
				    of <Try> ->
					Try
				    catch <T,R> ->
					'false' ->
				  %% Line 1100
				  StateTab0
			      %% Line 1101
			      <> when 'true' ->
				  let <_cor10> =
				      %% Line 1102
				      call 'erlang':'tuple_to_list'
					  (StateTab0)
				  in  let <_cor6> =
					  %% Line 1103
					  call 'erlang':'*'
					      (N, 1.50000000000000000000e+00)
				      in  let <_cor7> =
					      %% Line 1103
					      call 'erlang':'+'
						  (1, _cor6)
					  in  let <_cor8> =
						  %% Line 1103
						  call 'erlang':'round'
						      (_cor7)
					      in  let <_cor9> =
						      %% Line 1103
						      call 'lists':'duplicate'
							  (_cor8, [])
						  in  let <_cor11> =
							  %% Line 1102
							  call 'erlang':'++'
							      (_cor10, _cor9)
						      in  %% Line 1102
							  call 'erlang':'list_to_tuple'
							      (_cor11)
			    end
			in  let <_cor14> =
				%% Line 1105
				call 'erlang':'+'
				    (N, 1)
			    in  %% Line 1105
				call 'erlang':'setelement'
				    (_cor14, _cor12, State)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor18,_cor17,_cor16,_cor15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor18,_cor17,_cor16,_cor15})
		  -| [{'function_name',{'insert_state',4}}] )
	    -| ['compiler_generated'] )
	end
'insert_state_id'/3 =
    %% Line 1107
    fun (_cor2,_cor1,_cor0) ->
	let <_cor7> =
	    %% Line 1108
	    call 'ets':'insert'
		(_cor2, {_cor0,_cor1})
	in  %% Line 1108
	    case _cor7 of
	      <'true'> when 'true' ->
		  ( _cor7
		    -| ['compiler_generated'] )
	      ( <_cor3> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor3})
		-| ['compiler_generated'] )
	    end
'compute_states1'/4 =
    %% Line 1110
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[],_X_CurrState = {N,_cor10},StateTab0,_X_Tables> when 'true' ->
	      %% Line 1111
	      {StateTab0,N}
	  %% Line 1112
	  <[{N,Symbols}|Try],CurrState,StateTab,Tables> when 'true' ->
	      %% Line 1113
	      case apply 'lookup_state'/2
		       (StateTab, N) of
		<{_X_N,S}> when 'true' ->
		    let <Seeds> =
			%% Line 1114
			apply 'state_seeds'/2
			    (S, Symbols)
		    in  %% Line 1115
			apply 'compute_states2'/6
			    (Seeds, N, Try, CurrState, StateTab, Tables)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'compute_states1',4}}] )
	    -| ['compiler_generated'] )
	end
'compute_states2'/6 =
    %% Line 1117
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[],_X_N,Try,CurrState,StateTab,Tables> when 'true' ->
	      %% Line 1118
	      apply 'compute_states1'/4
		  (Try, CurrState, StateTab, Tables)
	  %% Line 1119
	  <[{Sym,Seed}|Seeds],N,Try,CurrState,StateTab,Tables> when 'true' ->
	      %% Line 1120
	      case apply 'compute_state'/2
		       (Seed, Tables) of
		<{StateId,NewState}> when 'true' ->
		    %% Line 1121
		    case apply 'check_states'/4
			     (NewState, StateId, StateTab, Tables) of
		      %% Line 1122
		      <'add'> when 'true' ->
			  %% Line 1123
			  case CurrState of
			    <{M,_cor26}> when 'true' ->
				let <CurrentSymbols> =
				    %% Line 1125
				    apply 'get_current_symbols'/1
					(NewState)
				in  let <Next> =
					%% Line 1126
					call 'erlang':'+'
					    (M, 1)
				    in  let <NextState> = {%% Line 1127
					     Next,%% Line 1127
						  NewState}
					in  let <NewStateTab> =
						%% Line 1128
						apply 'insert_state'/4
						    (Tables, StateTab, NextState, StateId)
					    in  do  %% Line 1129
						    apply 'insert_goto'/4
							(Tables, N, Sym, Next)
						    %% Line 1130
						    apply 'compute_states2'/6
							(Seeds, N, [{Next,CurrentSymbols}|Try], %% Line 1131
												NextState, %% Line 1131
													   NewStateTab, %% Line 1131
															Tables)
			    ( <_cor7> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor7})
			      -| ['compiler_generated'] )
			  end
		      %% Line 1132
		      <{'old',M}> when 'true' ->
			  do  %% Line 1134
			      apply 'insert_goto'/4
				  (Tables, N, Sym, M)
			      %% Line 1135
			      apply 'compute_states2'/6
				  (Seeds, N, Try, CurrState, StateTab, Tables)
		      %% Line 1136
		      <{'merge',M,NewCurrent}> when 'true' ->
			  let <_cor16> =
			      %% Line 1138
			      case call 'lists':'keyfind'
				       (M, 1, Try) of
				%% Line 1139
				<'false'> when 'true' ->
				    %% Line 1140
				    [{M,NewCurrent}|Try]
				%% Line 1141
				<{_cor27,OldCurrent}> when 'true' ->
				    %% Line 1142
				    case call 'ordsets':'is_subset'
					     (NewCurrent, OldCurrent) of
				      %% Line 1143
				      <'true'> when 'true' ->
					  %% Line 1144
					  Try
				      %% Line 1145
				      <'false'> when 'true' ->
					  let <_cor12> =
					      %% Line 1146
					      call 'ordsets':'union'
						  (NewCurrent, OldCurrent)
					  in  let <_cor13> =
						  %% Line 1147
						  call 'lists':'keydelete'
						      (M, 1, Try)
					      in  %% Line 1146
						  [{M,_cor12}|_cor13]
				      ( <_cor14> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_cor14})
					-| ['compiler_generated'] )
				    end
				( <_cor15> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor15})
				  -| ['compiler_generated'] )
			      end
			  in  let <NewStateTab> =
				  %% Line 1150
				  apply 'merge_states'/5
				      (NewState, StateTab, Tables, M, StateId)
			      in  do  %% Line 1151
				      apply 'insert_goto'/4
					  (Tables, N, Sym, M)
				      %% Line 1152
				      apply 'compute_states2'/6
					  (Seeds, N, _cor16, CurrState, NewStateTab, Tables)
		      ( <_cor19> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor19})
			-| ['compiler_generated'] )
		    end
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor6})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor25,_cor24,_cor23,_cor22,_cor21,_cor20> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor25,_cor24,_cor23,_cor22,_cor21,_cor20})
		  -| [{'function_name',{'compute_states2',6}}] )
	    -| ['compiler_generated'] )
	end
'insert_goto'/4 =
    %% Line 1155
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1156
	( case _cor3 of
	    ( <( {'tabs',_cor11,_cor12,_cor13,_cor14,_cor15,_rec113}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_cor17> =
		      call 'ets':'insert'
			  (_rec113, {{_cor2,_cor1,_cor0}})
		  in  case _cor17 of
			<'true'> when 'true' ->
			    ( _cor17
			      -| ['compiler_generated'] )
			( <_cor6> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor6})
			  -| ['compiler_generated'] )
		      end
	      -| ['compiler_generated'] )
	    ( <_cor16> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','tabs'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'create_symbol_table'/1 =
    %% Line 1159
    fun (_cor0) ->
	%% Line 1160
	case _cor0 of
	  <{'yecc',_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,Terminals,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,Endsymbol,_cor53,_cor54,_cor55,_cor56}> when 'true' ->
	      let <SymbolTab> =
		  %% Line 1161
		  call 'ets':'new'
		      ('yecc_symbols', [{'keypos',1}])
	      in  let <_cor3> =
		      %% Line 1163
		      call 'lists':'delete'
			  ('$empty', Terminals)
		  in  let <Ts> =
			  %% Line 1163
			  ['$empty'|[Endsymbol|_cor3]]
		      in  let <TsC> =
			      %% Line 1164
			      apply 'count'/2
				  (0, Ts)
			  in  let <_cor12> =
				  %% Line 1165
				  ( fun (_cor10) ->
					case _cor10 of
					  <{NT,I}> when 'true' ->
					      let <_cor9> =
						  call 'erlang':'-'
						      (I)
					      in  {NT,_cor9}
					  ( <_cor11> when 'true' ->
						( primop 'match_fail'
						      ({'function_clause',_cor11})
						  -| [{'function_name',{'-create_symbol_table/1-fun-0-',1}}] )
					    -| ['compiler_generated'] )
					end
				    -| [{'id',{0,0,'-create_symbol_table/1-fun-0-'}}] )
			      in  let <_cor8> =
				      %% Line 1165
				      apply 'count'/2
					  (1, _cor46)
				  in  let <NTsC> =
					  %% Line 1165
					  call 'lists':'map'
					      (_cor12, _cor8)
				      in  let <Cs> =
					      %% Line 1166
					      call 'erlang':'++'
						  (TsC, NTsC)
					  in  %% Line 1167
					      case call 'ets':'insert'
						       (SymbolTab, Cs) of
						<'true'> when 'true' ->
						    let <InvSymTable> =
							%% Line 1169
							call 'ets':'new'
							    ('yecc_inverted_terminals', [{'keypos',2}])
						    in  %% Line 1170
							case call 'ets':'insert'
								 (InvSymTable, Cs) of
							  <'true'> when 'true' ->
							      let <_cor19> =
								  %% Line 1172
								  call 'erlang':'setelement'
								      (22, _cor0, InvSymTable)
							      in  %% Line 1172
								  call 'erlang':'setelement'
								      (21, _cor19, SymbolTab)
							  ( <_cor17> when 'true' ->
								primop 'match_fail'
								    ({'badmatch',_cor17})
							    -| ['compiler_generated'] )
							end
						( <_cor15> when 'true' ->
						      primop 'match_fail'
							  ({'badmatch',_cor15})
						  -| ['compiler_generated'] )
					      end
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'get_current_symbols'/1 =
    %% Line 1174
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 1175
	    apply 'get_current_symbols1'/2
		(_cor0, [])
	in  %% Line 1175
	    call 'lists':'usort'
		(_cor1)
'get_current_symbols1'/2 =
    %% Line 1177
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],Syms> when 'true' ->
	      %% Line 1178
	      Syms
	  %% Line 1179
	  <[{'item',_cor5,_cor6,Rhs}|Items],Syms> when 'true' ->
	      %% Line 1180
	      case Rhs of
		%% Line 1181
		<[]> when 'true' ->
		    %% Line 1182
		    apply 'get_current_symbols1'/2
			(Items, Syms)
		%% Line 1183
		<[Symbol|_cor7]> when 'true' ->
		    %% Line 1184
		    apply 'get_current_symbols1'/2
			(Items, [Symbol|Syms])
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'get_current_symbols1',2}}] )
	    -| ['compiler_generated'] )
	end
'state_seeds'/2 =
    %% Line 1187
    fun (_cor1,_cor0) ->
	let <_cor7> =
	    %% Line 1188
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor4) ->
			  case _cor4 of
			    <[{'item',RP,LA,%% Line 1189
					    [S|_cor12]}|_cor3]> when 'true' ->
				let <_cor5> =
				    call 'erlang':'+'
					(RP, 1)
				in  let <_cor6> =
					%% Line 1189
					apply 'lc$^0'/1
					    (_cor3)
				    in  ( [{S,{LA,_cor5}}|_cor6]
					  -| ['compiler_generated'] )
			    ( <[_cor2|_cor3]> when 'true' ->
				  %% Line 1189
				  apply 'lc$^0'/1
				      (_cor3)
			      -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor4> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor4})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (_cor1)
	      -| ['list_comprehension'] )
	in  let <_cor9> =
		%% Line 1190
		call 'lists':'keysort'
		    (1, _cor7)
	    in  %% Line 1190
		apply 'state_seeds1'/2
		    (_cor9, _cor0)
'state_seeds1'/2 =
    %% Line 1192
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <_X_L,[]> when 'true' ->
	      %% Line 1193
	      []
	  %% Line 1194
	  <L,[Symbol|Symbols]> when 'true' ->
	      %% Line 1195
	      apply 'state_seeds'/4
		  (L, Symbol, Symbols, [])
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'state_seeds1',2}}] )
	    -| ['compiler_generated'] )
	end
'state_seeds'/4 =
    %% Line 1197
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[{Symbol,Item}|L],_cor9,Symbols,Is>
	      when call 'erlang':'=:='
		    (_cor9,
		     Symbol) ->
	      %% Line 1198
	      apply 'state_seeds'/4
		  (L, Symbol, Symbols, [Item|Is])
	  %% Line 1199
	  <[{S,_X_Item}|L],Symbol,Symbols,Is>
	      when call 'erlang':'<'
		    (S,
		     Symbol) ->
	      %% Line 1200
	      apply 'state_seeds'/4
		  (L, Symbol, Symbols, Is)
	  %% Line 1201
	  <L,Symbol,Symbols,Is> when 'true' ->
	      let <_cor4> =
		  %% Line 1202
		  apply 'state_seeds1'/2
		      (L, Symbols)
	      in  %% Line 1202
		  [{Symbol,Is}|_cor4]
	end
'compute_state'/2 =
    %% Line 1204
    fun (_cor1,_cor0) ->
	%% Line 1205
	( case _cor0 of
	    ( <( {'tabs',_cor17,_cor18,_cor19,_cor20,_rec116,_cor21}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_cor7> =
		      %% Line 1206
		      ( fun (_cor5) ->
			    case _cor5 of
			      <{LA,RulePointer}> when 'true' ->
				  call 'erlang':'put'
				      (RulePointer, LA)
			      ( <_cor6> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_cor6})
				      -| [{'function_name',{'-compute_state/2-fun-0-',1}}] )
				-| ['compiler_generated'] )
			    end
			-| [{'id',{0,0,'-compute_state/2-fun-0-'}}] )
		  in  do  %% Line 1206
			  call 'lists':'foreach'
			      (_cor7, _cor1)
			  let <_cor10> =
			      %% Line 1207
			      ( fun (_cor8) ->
				    case _cor8 of
				      <{LA,RP}> when 'true' ->
					  %% Line 1220
					  ( case ( call ( 'erlang'
							  -| ['compiler_generated'] ):( 'element'
											-| ['compiler_generated'] )
						       (RP, _rec116)
						   -| ['compiler_generated'] ) of
					      %% Line 1221
					      ( <( ( Void
						     -| ['compiler_generated'] ) = ( []
										     -| ['compiler_generated'] )
						   -| ['compiler_generated'] )> when ( 'true'
										       -| ['compiler_generated'] ) ->
						    %% Line 1222
						    ( Void
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					      %% Line 1223
					      ( <( {( 'no_union'
						      -| ['compiler_generated'] ),( ExpandingRules
										    -| ['compiler_generated'] ),( NewLookahead
														  -| ['compiler_generated'] )}
						   -| ['compiler_generated'] )> when ( 'true'
										       -| ['compiler_generated'] ) ->
						    %% Line 1224
						    ( apply ( 'compute_closure1'/3
							      -| ['compiler_generated'] )
							  (( ExpandingRules
							     -| ['compiler_generated'] ), ( NewLookahead
											    -| ['compiler_generated'] ), _rec116)
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					      %% Line 1225
					      ( <( {( 'union'
						      -| ['compiler_generated'] ),( ExpandingRules
										    -| ['compiler_generated'] ),( Lookahead0
														  -| ['compiler_generated'] )}
						   -| ['compiler_generated'] )> when ( 'true'
										       -| ['compiler_generated'] ) ->
						    ( let <NewLookahead> =
							  %% Line 2328
							  ( call ( 'erlang'
								   -| ['compiler_generated'] ):( 'bor'
												 -| ['compiler_generated'] )
								(( Lookahead0
								   -| ['compiler_generated'] ), LA)
							    -| ['compiler_generated'] )
						      in  %% Line 1227
							  ( apply ( 'compute_closure1'/3
								    -| ['compiler_generated'] )
								(( ExpandingRules
								   -| ['compiler_generated'] ), ( NewLookahead
												  -| ['compiler_generated'] ), _rec116)
							    -| ['compiler_generated'] )
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					      %% Line 1228
					      ( <( ExpandingRules
						   -| ['compiler_generated'] )> when ( 'true'
										       -| ['compiler_generated'] ) ->
						    %% Line 1229
						    ( apply ( 'compute_closure1'/3
							      -| ['compiler_generated'] )
							  (( ExpandingRules
							     -| ['compiler_generated'] ), LA, _rec116)
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					    end
					    -| ['compiler_generated'] )
				      ( <_cor9> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_cor9})
					      -| [{'function_name',{'-compute_state/2-fun-1-',1}}] )
					-| ['compiler_generated'] )
				    end
				-| [{'id',{0,0,'-compute_state/2-fun-1-'}}] )
			  in  do  %% Line 1207
				  call 'lists':'foreach'
				      (_cor10, _cor1)
				  let <_cor11> =
				      %% Line 1208
				      call 'erlang':'erase'
					  ()
				  in  let <Closure> =
					  %% Line 1208
					  call 'lists':'keysort'
					      (1, _cor11)
				      in  %% Line 1209
					  apply 'state_items'/4
					      (Closure, [], [], _cor20)
	      -| ['compiler_generated'] )
	    ( <_cor22> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','tabs'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'state_items'/4 =
    %% Line 1212
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[{RP,LA}|L],Is,Id,RpRhs> when 'true' ->
	      let <_cor4> =
		  %% Line 1213
		  call 'erlang':'element'
		      (RP, RpRhs)
	      in  let <I> =
		      %% Line 1213
		      {'item',RP,LA,_cor4}
		  in  %% Line 1214
		      apply 'state_items'/4
			  (L, [I|Is], [RP|Id], RpRhs)
	  %% Line 1215
	  <_cor10,Is,Id,_X_RpRhs> when 'true' ->
	      %% Line 1216
	      {Id,Is}
	end
'compute_closure'/3 =
    %% Line 1219
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1220
	case call 'erlang':'element'
		 (_cor1, _cor0) of
	  %% Line 1221
	  <Void = []> when 'true' ->
	      %% Line 1222
	      Void
	  %% Line 1223
	  <{'no_union',ExpandingRules,NewLookahead}> when 'true' ->
	      %% Line 1224
	      apply 'compute_closure1'/3
		  (ExpandingRules, NewLookahead, _cor0)
	  %% Line 1225
	  <{'union',ExpandingRules,Lookahead0}> when 'true' ->
	      let <NewLookahead> =
		  %% Line 2328
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'bor'
							 -| ['compiler_generated'] )
			(Lookahead0, _cor2)
		    -| ['compiler_generated'] )
	      in  %% Line 1227
		  apply 'compute_closure1'/3
		      (ExpandingRules, NewLookahead, _cor0)
	  %% Line 1228
	  <ExpandingRules> when 'true' ->
	      %% Line 1229
	      apply 'compute_closure1'/3
		  (ExpandingRules, _cor2, _cor0)
	end
'compute_closure1'/3 =
    %% Line 1232
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[RulePointer|Tail],NewLookahead,RpInfo> when 'true' ->
	      do  %% Line 1233
		  apply 'compute_closure1'/3
		      (Tail, NewLookahead, RpInfo)
		  %% Line 1234
		  case call 'erlang':'get'
			   (RulePointer) of
		    %% Line 1235
		    <'undefined'> when 'true' ->
			do  %% Line 1236
			    call 'erlang':'put'
				(RulePointer, NewLookahead)
			    ( case ( call ( 'erlang'
					    -| ['compiler_generated'] ):( 'element'
									  -| ['compiler_generated'] )
					 (%% Line 1237
					  RulePointer, %% Line 1237
						       RpInfo)
				     -| ['compiler_generated'] ) of
				( <( ( Void
				       -| ['compiler_generated'] ) = ( []
								       -| ['compiler_generated'] )
				     -| ['compiler_generated'] )> when ( 'true'
									 -| ['compiler_generated'] ) ->
				      ( Void
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				( <( {( 'no_union'
					-| ['compiler_generated'] ),( ExpandingRules
								      -| ['compiler_generated'] ),_fol3840}
				     -| ['compiler_generated'] )> when ( 'true'
									 -| ['compiler_generated'] ) ->
				      ( apply ( 'compute_closure1'/3
						-| ['compiler_generated'] )
					    (( ExpandingRules
					       -| ['compiler_generated'] ), _fol3840, %% Line 1237
										      RpInfo)
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				( <( {( 'union'
					-| ['compiler_generated'] ),( ExpandingRules
								      -| ['compiler_generated'] ),( Lookahead0
												    -| ['compiler_generated'] )}
				     -| ['compiler_generated'] )> when ( 'true'
									 -| ['compiler_generated'] ) ->
				      ( let <_fol3845> =
					    %% Line 2328
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'bor'
										   -| ['compiler_generated'] )
						  (( Lookahead0
						     -| ['compiler_generated'] ), NewLookahead)
					      -| ['compiler_generated'] )
					in  ( apply ( 'compute_closure1'/3
						      -| ['compiler_generated'] )
						  (( ExpandingRules
						     -| ['compiler_generated'] ), _fol3845, %% Line 1237
											    RpInfo)
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				( <( ExpandingRules
				     -| ['compiler_generated'] )> when ( 'true'
									 -| ['compiler_generated'] ) ->
				      ( apply ( 'compute_closure1'/3
						-| ['compiler_generated'] )
					    (( ExpandingRules
					       -| ['compiler_generated'] ), %% Line 1237
									    NewLookahead, %% Line 1237
											  RpInfo)
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
		    %% Line 1238
		    <Lookahead2> when 'true' ->
			let <Lookahead> =
			    %% Line 2328
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'bor'
								   -| ['compiler_generated'] )
				  (Lookahead2, NewLookahead)
			      -| ['compiler_generated'] )
			in  %% Line 1240
			    case <> of
			      %% Line 1241
			      <>
				  when call 'erlang':'=:='
					(Lookahead,
					 Lookahead2) ->
				  %% Line 1242
				  Lookahead2
			      %% Line 1243
			      <> when 'true' ->
				  do  %% Line 1244
				      call 'erlang':'put'
					  (RulePointer, Lookahead)
				      ( case ( call ( 'erlang'
						      -| ['compiler_generated'] ):( 'element'
										    -| ['compiler_generated'] )
						   (%% Line 1245
						    RulePointer, %% Line 1245
								 RpInfo)
					       -| ['compiler_generated'] ) of
					  ( <( ( Void
						 -| ['compiler_generated'] ) = ( []
										 -| ['compiler_generated'] )
					       -| ['compiler_generated'] )> when ( 'true'
										   -| ['compiler_generated'] ) ->
						( Void
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					  ( <( {( 'no_union'
						  -| ['compiler_generated'] ),( ExpandingRules
										-| ['compiler_generated'] ),_fol3855}
					       -| ['compiler_generated'] )> when ( 'true'
										   -| ['compiler_generated'] ) ->
						( apply ( 'compute_closure1'/3
							  -| ['compiler_generated'] )
						      (( ExpandingRules
							 -| ['compiler_generated'] ), _fol3855, %% Line 1245
												RpInfo)
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					  ( <( {( 'union'
						  -| ['compiler_generated'] ),( ExpandingRules
										-| ['compiler_generated'] ),( Lookahead0
													      -| ['compiler_generated'] )}
					       -| ['compiler_generated'] )> when ( 'true'
										   -| ['compiler_generated'] ) ->
						( let <_fol3860> =
						      %% Line 2328
						      ( call ( 'erlang'
							       -| ['compiler_generated'] ):( 'bor'
											     -| ['compiler_generated'] )
							    (( Lookahead0
							       -| ['compiler_generated'] ), NewLookahead)
							-| ['compiler_generated'] )
						  in  ( apply ( 'compute_closure1'/3
								-| ['compiler_generated'] )
							    (( ExpandingRules
							       -| ['compiler_generated'] ), _fol3860, %% Line 1245
												      RpInfo)
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					  ( <( ExpandingRules
					       -| ['compiler_generated'] )> when ( 'true'
										   -| ['compiler_generated'] ) ->
						( apply ( 'compute_closure1'/3
							  -| ['compiler_generated'] )
						      (( ExpandingRules
							 -| ['compiler_generated'] ), %% Line 1245
										      NewLookahead, %% Line 1245
												    RpInfo)
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					end
					-| ['compiler_generated'] )
			    end
		  end
	  %% Line 1248
	  <Nil,_cor8,_X_RpInfo> when 'true' ->
	      %% Line 1249
	      Nil
	end
'check_states'/4 =
    %% Line 1252
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <NewState,StateId,StateTab,{'tabs',_cor14,_cor15,StateIdTab,_cor16,_cor17,_cor18}> when 'true' ->
	      %% Line 1253
	      try
		  call 'ets':'lookup_element'
		      (StateIdTab, StateId, 2)
	      of <_cor4> ->
		  %% Line 1255
		  case apply 'lookup_state'/2
			   (StateTab, _cor4) of
		    <{_X_N,OldState}> when 'true' ->
			%% Line 1256
			apply 'check_state1'/4
			    (NewState, OldState, [], _cor4)
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor5})
		      -| ['compiler_generated'] )
		  end
	      catch <_cor9,_cor8,_cor7> ->
		  case <_cor9,_cor8,_cor7> of
		    %% Line 1257
		    <'error',_cor19,_cor20> when 'true' ->
			'add'
		    ( <_cor9,_cor8,_cor7> when 'true' ->
			  primop 'raise'
			      (_cor7, _cor8)
		      -| ['compiler_generated'] )
		  end
	  ( <_cor13,_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11,_cor10})
		  -| [{'function_name',{'check_states',4}}] )
	    -| ['compiler_generated'] )
	end
'check_state1'/4 =
    %% Line 1260
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[{'item',_cor10,Lookahead1,Rhs}|Items1],%% Line 1261
						   [{'item',_cor11,Lookahead2,_cor12}|Items2],%% Line 1261
											      Symbols,%% Line 1261
												      N> when 'true' ->
	      ( let <_fol3867> =
		    %% Line 2332
		    ( call ( 'erlang'
			     -| ['compiler_generated'] ):( 'band'
							   -| ['compiler_generated'] )
			  (Lookahead1, Lookahead2)
		      -| ['compiler_generated'] )
		in  %% Line 1262
		    case <> of
		      %% Line 1263
		      <>
			  when %% Line 2332
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( '=:='
								   -| ['compiler_generated'] )
				  (_fol3867,
				   Lookahead1)
			      -| ['compiler_generated'] ) ->
			  %% Line 1264
			  apply 'check_state1'/4
			      (Items1, Items2, Symbols, N)
		      %% Line 1265
		      <> when 'true' ->
			  %% Line 1266
			  case Rhs of
			    %% Line 1267
			    <[]> when 'true' ->
				%% Line 1268
				apply 'check_state2'/4
				    (Items1, Items2, Symbols, N)
			    %% Line 1269
			    <[Symbol|_cor13]> when 'true' ->
				%% Line 1270
				apply 'check_state2'/4
				    (Items1, Items2, [Symbol|Symbols], N)
			    ( <_cor4> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor4})
			      -| ['compiler_generated'] )
			  end
		    end
		-| ['compiler_generated'] )
	  %% Line 1273
	  <[],[],_X_Symbols,N> when 'true' ->
	      %% Line 1274
	      {'old',N}
	  ( <_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'check_state1',4}}] )
	    -| ['compiler_generated'] )
	end
'check_state2'/4 =
    %% Line 1276
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[{'item',_cor11,Lookahead1,Rhs}|Items1],%% Line 1277
						   [{'item',_cor12,Lookahead2,_cor13}|Items2],%% Line 1277
											      Symbols,%% Line 1277
												      N> when 'true' ->
	      ( let <_fol3870> =
		    %% Line 2332
		    ( call ( 'erlang'
			     -| ['compiler_generated'] ):( 'band'
							   -| ['compiler_generated'] )
			  (Lookahead1, Lookahead2)
		      -| ['compiler_generated'] )
		in  %% Line 1278
		    case <> of
		      %% Line 1279
		      <>
			  when %% Line 2332
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( '=:='
								   -| ['compiler_generated'] )
				  (_fol3870,
				   Lookahead1)
			      -| ['compiler_generated'] ) ->
			  %% Line 1280
			  apply 'check_state2'/4
			      (Items1, Items2, Symbols, N)
		      %% Line 1281
		      <> when 'true' ->
			  %% Line 1282
			  case Rhs of
			    %% Line 1283
			    <[]> when 'true' ->
				%% Line 1284
				apply 'check_state2'/4
				    (Items1, Items2, Symbols, N)
			    %% Line 1285
			    <[Symbol|_cor14]> when 'true' ->
				%% Line 1286
				apply 'check_state2'/4
				    (Items1, Items2, [Symbol|Symbols], N)
			    ( <_cor4> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor4})
			      -| ['compiler_generated'] )
			  end
		    end
		-| ['compiler_generated'] )
	  %% Line 1289
	  <[],[],Symbols,N> when 'true' ->
	      let <_cor6> =
		  %% Line 1290
		  call 'lists':'usort'
		      (Symbols)
	      in  %% Line 1290
		  {'merge',N,_cor6}
	  ( <_cor10,_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8,_cor7})
		  -| [{'function_name',{'check_state2',4}}] )
	    -| ['compiler_generated'] )
	end
'merge_states'/5 =
    %% Line 1292
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1293
	case apply 'lookup_state'/2
		 (_cor3, _cor1) of
	  <{_X_M,Old_state}> when 'true' ->
	      let <MergedState> =
		  %% Line 1294
		  apply 'merge_states1'/2
		      (_cor4, Old_state)
	      in  %% Line 1295
		  apply 'insert_state'/4
		      (_cor2, _cor3, {_cor1,MergedState}, _cor0)
	  ( <_cor5> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor5})
	    -| ['compiler_generated'] )
	end
'merge_states1'/2 =
    %% Line 1297
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[Item1|Items1],[Item2|Items2]> when 'true' ->
	      %% Line 1298
	      ( case Item1 of
		  ( <( {'item',_cor16,_rec118,_cor17}
		       -| ['compiler_generated'] )> when 'true' ->
			%% Line 1299
			( case Item2 of
			    ( <( {'item',_cor19,_rec119,_cor20}
				 -| ['compiler_generated'] )> when 'true' ->
				  %% Line 1300
				  case <> of
				    %% Line 1301
				    <>
					when call 'erlang':'=:='
					      (_rec118,
					       _rec119) ->
					let <_cor8> =
					    %% Line 1302
					    apply 'merge_states1'/2
						(Items1, Items2)
					in  %% Line 1302
					    [Item1|_cor8]
				    %% Line 1303
				    <> when 'true' ->
					let <_rec120> =
					    %% Line 2328
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'bor'
										   -| ['compiler_generated'] )
						  (_rec118, _rec119)
					      -| ['compiler_generated'] )
					in  let <_cor12> =
						%% Line 1304
						call 'erlang':'setelement'
						    (3, Item1, _rec120)
					    in  let <_cor13> =
						    %% Line 1305
						    apply 'merge_states1'/2
							(Items1, Items2)
						in  %% Line 1304
						    [_cor12|_cor13]
				  end
			      -| ['compiler_generated'] )
			    ( <_cor21> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','item'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  ( <_cor18> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','item'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1307
	  <_cor26,_cor27> when 'true' ->
	      %% Line 1308
	      []
	end
'make_rhs_index'/1 =
    %% Line 1311
    fun (_cor0) ->
	let <_cor3> =
	    %% Line 1312
	    ( fun (_cor1) ->
		  case _cor1 of
		    <{'rule',_cor6,_cor7,[_X_Non|Daughters],_cor8,_cor9,_cor10}> when 'true' ->
			%% Line 1313
			apply 'suffixes0'/1
			    (Daughters)
		    ( <_cor2> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor2})
			    -| [{'function_name',{'-make_rhs_index/1-fun-0-',1}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-make_rhs_index/1-fun-0-'}}] )
	in  let <Index> =
		%% Line 1312
		call 'lists':'flatmap'
		    (_cor3, _cor0)
	    in  %% Line 1315
		call 'erlang':'list_to_tuple'
		    (Index)
'suffixes0'/1 =
    %% Line 1317
    fun (_cor0) ->
	case _cor0 of
	  <[0]> when 'true' ->
	      %% Line 1318
	      [[]|[[]]]
	  %% Line 1319
	  <L> when 'true' ->
	      %% Line 1320
	      apply 'suffixes'/1
		  (L)
	end
'suffixes'/1 =
    %% Line 1322
    fun (_cor0) ->
	case _cor0 of
	  <L = []> when 'true' ->
	      %% Line 1323
	      [L|[]]
	  %% Line 1324
	  <L = [_cor3|T]> when 'true' ->
	      let <_cor1> =
		  %% Line 1325
		  apply 'suffixes'/1
		      (T)
	      in  %% Line 1325
		  [L|_cor1]
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'suffixes',1}}] )
	    -| ['compiler_generated'] )
	end
'make_rule_pointer_info'/3 =
    %% Line 1329
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1330
	( case _cor2 of
	    ( <( {'yecc',_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_rec122,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <LcTab> =
		      %% Line 1331
		      apply 'make_left_corner_table'/1
			  (_cor2)
		  in  let <_cor10> =
			  %% Line 1332
			  ( fun (_cor8) ->
				%% Line 1333
				apply 'rp_info'/4
				    (_cor8, _rec122, LcTab, _cor0)
			    -| [{'id',{0,0,'-make_rule_pointer_info/3-fun-0-'}}] )
		      in  let <_cor7> =
			      %% Line 1334
			      call 'erlang':'tuple_to_list'
				  (_cor1)
			  in  let <LA_index> =
				  %% Line 1332
				  call 'lists':'map'
				      (_cor10, _cor7)
			      in  %% Line 1335
				  call 'erlang':'list_to_tuple'
				      (LA_index)
	      -| ['compiler_generated'] )
	    ( <_cor51> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','yecc'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'rp_info'/4 =
    %% Line 1337
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[],_X_SymbolTab,_X_LcTab,_X_RuleIndex> when 'true' ->
	      %% Line 1338
	      []
	  %% Line 1339
	  <[Category|Followers],SymbolTab,LcTab,RuleIndex> when 'true' ->
	      %% Line 1340
	      case call 'dict':'find'
		       (Category, RuleIndex) of
		%% Line 1341
		<'error'> when 'true' ->
		    %% Line 1342
		    []
		%% Line 1343
		<{'ok',ExpandingRules}>
		    when call 'erlang':'=:='
			  (Followers,
			   []) ->
		    %% Line 1344
		    ExpandingRules
		%% Line 1345
		<{'ok',ExpandingRules}> when 'true' ->
		    %% Line 1346
		    case apply 'make_lookahead'/4
			     (Followers, SymbolTab, LcTab, %% Line 2312
							   ( 0
							     -| ['compiler_generated'] )) of
		      %% Line 1347
		      <{'empty',LA}> when 'true' ->
			  %% Line 1348
			  {'union',ExpandingRules,LA}
		      %% Line 1349
		      <LA> when 'true' ->
			  %% Line 1350
			  {'no_union',ExpandingRules,LA}
		    end
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor6})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor10,_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8,_cor7})
		  -| [{'function_name',{'rp_info',4}}] )
	    -| ['compiler_generated'] )
	end
'make_lookahead'/4 =
    %% Line 1356
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[],_cor12,_cor13,LA> when 'true' ->
	      %% Line 1357
	      {'empty',LA}
	  %% Line 1358
	  <[Symbol|Symbols],SymbolTab,LcTab,LA> when 'true' ->
	      %% Line 1359
	      case call 'dict':'find'
		       (Symbol, LcTab) of
		%% Line 1360
		<{'ok',LeftCorner}> when 'true' ->
		    %% Line 1361
		    case apply 'empty_member'/1
			     (LeftCorner) of
		      %% Line 1362
		      <'true'> when 'true' ->
			  let <_cor4> =
			      %% Line 1364
			      apply 'empty_delete'/1
				  (LeftCorner)
			  in  let <_cor5> =
				  %% Line 2328
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'bor'
									 -| ['compiler_generated'] )
					(_cor4, LA)
				    -| ['compiler_generated'] )
			      in  %% Line 1363
				  apply 'make_lookahead'/4
				      (Symbols, SymbolTab, LcTab, _cor5)
		      %% Line 1365
		      <'false'> when 'true' ->
			  %% Line 2328
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'bor'
								 -| ['compiler_generated'] )
				(LeftCorner, LA)
			    -| ['compiler_generated'] )
		      ( <_cor6> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor6})
			-| ['compiler_generated'] )
		    end
		%% Line 1368
		<'error'> when 'true' ->
		    %% Line 1369
		    apply 'set_add'/2
			(Symbol, LA)
		( <_cor7> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor7})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor11,_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9,_cor8})
		  -| [{'function_name',{'make_lookahead',4}}] )
	    -| ['compiler_generated'] )
	end
'make_left_corner_table'/1 =
    %% Line 1376
    fun (_cor0) ->
	case _cor0 of
	  <St = {'yecc',_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,_cor69,_cor70,_cor71,RulesList,_cor72,_cor73,_cor74,_cor75,_cor76,_cor77,_cor78,_cor79}> when 'true' ->
	      let <SymbolTab> =
		  %% Line 1377
		  apply 'left_corner_symbol_table'/1
		      (St)
	      in  let <_cor4> =
		      %% Line 1378
		      ( fun (_cor2) ->
			    case _cor2 of
			      <{'rule',_cor80,_cor81,[Lhs|Rhs],_cor82,_cor83,_cor84}> when 'true' ->
				  %% Line 1379
				  {Lhs,{Lhs,Rhs}}
			      ( <_cor3> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_cor3})
				      -| [{'function_name',{'-make_left_corner_table/1-fun-0-',1}}] )
				-| ['compiler_generated'] )
			    end
			-| [{'id',{0,0,'-make_left_corner_table/1-fun-0-'}}] )
		  in  let <Rules> =
			  %% Line 1378
			  call 'lists':'map'
			      (_cor4, %% Line 1380
				      RulesList)
		      in  let <_cor6> =
			      %% Line 1381
			      apply 'family'/1
				  (Rules)
			  in  let <LeftHandTab> =
				  %% Line 1381
				  call 'dict':'from_list'
				      (_cor6)
			      in  let <_cor17> =
				      %% Line 1382
				      ( letrec
					    'lc$^0'/1 =
						fun (_cor13) ->
						    case _cor13 of
						      <[{H,{_cor85,Rhs}}|_cor9]>
							  when call 'erlang':'=:='
								(_cor85,
								 H) ->
							  ( letrec
								'lc$^1'/1 =
								    fun (_cor14) ->
									case _cor14 of
									  <[%% Line 1383
									    S|_cor11]> when 'true' ->
									      %% Line 1384
									      ( case <> of
										  ( <>
											when %% Line 2375
											  ( call ( 'erlang'
												   -| ['compiler_generated'] ):( '>='
																 -| ['compiler_generated'] )
												(S,
												 ( 0
												   -| ['compiler_generated'] ))
											    -| ['compiler_generated'] ) ->
											apply 'lc$^1'/1
											    (_cor11)
										    -| ['compiler_generated'] )
										  <> when 'true' ->
										      let <_cor15> =
											  apply 'lc$^1'/1
											      (_cor11)
										      in  ( [{S,H}|_cor15]
											    -| ['compiler_generated'] )
										end
										-| ['list_comprehension'] )
									  <[]> when 'true' ->
									      apply 'lc$^0'/1
										  (_cor9)
									  ( <_cor14> when 'true' ->
										( primop 'match_fail'
										      ({'function_clause',_cor14})
										  -| [{'function_name',{'lc$^1',1}}] )
									    -| ['compiler_generated'] )
									end
							    in  apply 'lc$^1'/1
								    (%% Line 1383
								     Rhs)
							    -| ['list_comprehension'] )
						      ( <[_cor8|_cor9]> when 'true' ->
							    apply 'lc$^0'/1
								(_cor9)
							-| ['compiler_generated'] )
						      <[]> when 'true' ->
							  []
						      ( <_cor13> when 'true' ->
							    ( primop 'match_fail'
								  ({'function_clause',_cor13})
							      -| [{'function_name',{'lc$^0',1}}] )
							-| ['compiler_generated'] )
						    end
					in  apply 'lc$^0'/1
						(Rules)
					-| ['list_comprehension'] )
				  in  let <XL> =
					  %% Line 1385
					  apply 'family_with_domain'/2
					      (_cor17, _cor69)
				      in  let <X> =
					      %% Line 1386
					      call 'dict':'from_list'
						  (XL)
					  in  let <Xref> =
						  %% Line 1387
						  ( fun (_cor23) ->
							call 'dict':'fetch'
							    (_cor23, X)
						    -| [{'id',{0,0,'-make_left_corner_table/1-fun-1-'}}] )
					      in  let <_cor31> =
						      %% Line 1389
						      ( letrec
							    'lc$^2'/1 =
								fun (_cor29) ->
								    case _cor29 of
								      <[{H,_cor123}|_cor28]> when 'true' ->
									  let <_cor30> =
									      apply 'lc$^2'/1
										  (_cor28)
									  in  ( [{H,%% Line 2312
										    ( 0
										      -| ['compiler_generated'] )}|_cor30]
										-| ['compiler_generated'] )
								      ( <[_cor27|_cor28]> when 'true' ->
									    apply 'lc$^2'/1
										(_cor28)
									-| ['compiler_generated'] )
								      <[]> when 'true' ->
									  []
								      ( <_cor29> when 'true' ->
									    ( primop 'match_fail'
										  ({'function_clause',_cor29})
									      -| [{'function_name',{'lc$^2',1}}] )
									-| ['compiler_generated'] )
								    end
							in  apply 'lc$^2'/1
								(XL)
							-| ['list_comprehension'] )
						  in  let <LC0> =
							  %% Line 1389
							  call 'dict':'from_list'
							      (_cor31)
						      in  let <_cor41> =
							      %% Line 1392
							      ( fun (_cor38,_cor37) ->
								    case <_cor38,_cor37> of
								      <{H,{_cor124,[S|_cor125]}},{Q0,LC}>
									  when call 'erlang':'=:='
										(_cor124,
										 H) ->
									  %% Line 1393
									  case call 'ets':'lookup'
										   (SymbolTab, S) of
									    %% Line 1394
									    <[SymbolAndNum = {_cor126,Num}|[]]>
										when call 'erlang':'>='
										      (Num,
										       0) ->
										let <F> =
										    %% Line 1395
										    apply 'set_add_terminal'/2
											(SymbolAndNum, %% Line 2312
												       ( 0
													 -| ['compiler_generated'] ))
										in  let <_cor35> =
											%% Line 1396
											apply Xref
											    (H)
										    in  let <_cor34> =
											    %% Line 1396
											    apply 'upd_first'/3
												(H, F, LC)
											in  %% Line 1396
											    {[_cor35|Q0],_cor34}
									    %% Line 1397
									    <_cor127> when 'true' ->
										%% Line 1398
										{Q0,LC}
									  end
								      ( <_cor40,_cor39> when 'true' ->
									    ( primop 'match_fail'
										  ({'function_clause',_cor40,_cor39})
									      -| [{'function_name',{'-make_left_corner_table/1-fun-2-',2}}] )
									-| ['compiler_generated'] )
								    end
								-| [{'id',{0,0,'-make_left_corner_table/1-fun-2-'}}] )
							  in  %% Line 1391
							      case %% Line 1392
								   call 'lists':'foldl'
								       (_cor41, %% Line 1400
										{[],LC0}, %% Line 1400
											  Rules) of
								<{Q,LC1}> when 'true' ->
								    %% Line 1401
								    apply 'left_corners'/5
									(Q, LC1, LeftHandTab, SymbolTab, Xref)
								( <_cor42> when 'true' ->
								      primop 'match_fail'
									  ({'badmatch',_cor42})
								  -| ['compiler_generated'] )
							      end
	  ( <_cor43> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor43})
		  -| [{'function_name',{'make_left_corner_table',1}}] )
	    -| ['compiler_generated'] )
	end
'left_corners'/5 =
    %% Line 1403
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 1404
	    call 'lists':'append'
		(_cor4)
	in  %% Line 1404
	    case call 'lists':'usort'
		     (_cor5) of
	      %% Line 1405
	      <[]> when 'true' ->
		  _cor3
	      %% Line 1407
	      <Q1> when 'true' ->
		  let <_cor8> =
		      %% Line 1408
		      ( fun (_cor6) ->
			    call 'dict':'fetch'
				(_cor6, _cor2)
			-| [{'id',{0,0,'-left_corners/5-fun-0-'}}] )
		  in  let <Rs> =
			  %% Line 1408
			  call 'lists':'flatmap'
			      (_cor8, Q1)
		      in  %% Line 1409
			  case apply 'left_corners2'/5
				   (Rs, _cor3, [], _cor1, _cor0) of
			    <{LC,Q}> when 'true' ->
				%% Line 1410
				apply 'left_corners'/5
				    (Q, LC, _cor2, _cor1, _cor0)
			    ( <_cor10> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor10})
			      -| ['compiler_generated'] )
			  end
	    end
'left_corners2'/5 =
    %% Line 1413
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[],LC,Q,_X_SymbolTab,_X_Xref> when 'true' ->
	      %% Line 1414
	      {LC,Q}
	  %% Line 1415
	  <[{Head,Rhs}|Rs],LC,Q0,SymbolTab,Xref> when 'true' ->
	      let <Ts> =
		  %% Line 1416
		  apply 'left_corner_rhs'/5
		      (Rhs, Head, LC, %% Line 2312
				      ( 0
					-| ['compiler_generated'] ), SymbolTab)
	      in  let <First0> =
		      %% Line 1417
		      call 'dict':'fetch'
			  (Head, LC)
		  in  ( let <_fol3985> =
			    %% Line 2332
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'band'
								   -| ['compiler_generated'] )
				  (Ts, First0)
			      -| ['compiler_generated'] )
			in  %% Line 1418
			    case <> of
			      %% Line 1419
			      <>
				  when %% Line 2332
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( '=:='
									   -| ['compiler_generated'] )
					  (_fol3985,
					   Ts)
				      -| ['compiler_generated'] ) ->
				  %% Line 1420
				  apply 'left_corners2'/5
				      (Rs, LC, Q0, SymbolTab, Xref)
			      %% Line 1421
			      <> when 'true' ->
				  let <LC1> =
				      %% Line 1422
				      apply 'upd_first'/3
					  (Head, Ts, LC)
				  in  let <_cor9> =
					  %% Line 1423
					  apply Xref
					      (Head)
				      in  %% Line 1423
					  apply 'left_corners2'/5
					      (Rs, LC1, [_cor9|Q0], SymbolTab, Xref)
			    end
			-| ['compiler_generated'] )
	  ( <_cor15,_cor14,_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14,_cor13,_cor12,_cor11})
		  -| [{'function_name',{'left_corners2',5}}] )
	    -| ['compiler_generated'] )
	end
'upd_first'/3 =
    %% Line 1426
    fun (_cor2,_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 1427
	    ( fun (_cor3) ->
		  %% Line 2328
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'bor'
							 -| ['compiler_generated'] )
			(_cor3, _cor1)
		    -| ['compiler_generated'] )
	      -| [{'id',{0,0,'-upd_first/3-fun-0-'}}] )
	in  %% Line 1427
	    call 'dict':'update'
		(_cor2, _cor5, _cor0)
'left_corner_rhs'/5 =
    %% Line 1429
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[S|Ss],Head,LC,Ts,SymbolTab> when 'true' ->
	      %% Line 1430
	      case call 'ets':'lookup'
		       (SymbolTab, S) of
		%% Line 1431
		<[SymbolAndNum = {_cor15,Num}|[]]>
		    when call 'erlang':'>='
			  (Num,
			   0) ->
		    %% Line 1432
		    apply 'set_add_terminal'/2
			(SymbolAndNum, Ts)
		%% Line 1433
		<[_X_NonTerminalSymbol|[]]> when 'true' ->
		    let <First> =
			%% Line 1434
			call 'dict':'fetch'
			    (S, LC)
		    in  %% Line 1435
			case apply 'empty_member'/1
				 (First) of
			  %% Line 1436
			  <'true'> when 'true' ->
			      let <_cor6> =
				  %% Line 1437
				  apply 'empty_delete'/1
				      (First)
			      in  let <NTs> =
				      %% Line 2328
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'bor'
									     -| ['compiler_generated'] )
					    (_cor6, Ts)
					-| ['compiler_generated'] )
				  in  %% Line 1438
				      apply 'left_corner_rhs'/5
					  (Ss, Head, LC, NTs, SymbolTab)
			  %% Line 1439
			  <'false'> when 'true' ->
			      %% Line 2328
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'bor'
								     -| ['compiler_generated'] )
				    (First, Ts)
				-| ['compiler_generated'] )
			  ( <_cor8> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor8})
			    -| ['compiler_generated'] )
			end
		( <_cor9> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor9})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1443
	  <[],_X_Head,_X_LC,Ts,_X_SymbolTab> when 'true' ->
	      %% Line 1444
	      apply 'set_add'/2
		  (0, Ts)
	  ( <_cor14,_cor13,_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12,_cor11,_cor10})
		  -| [{'function_name',{'left_corner_rhs',5}}] )
	    -| ['compiler_generated'] )
	end
'make_rule_index'/2 =
    %% Line 1449
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'yecc',_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,Nonterminals,_cor57,_cor58,%% Line 1450
																											     RulesList,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66},%% Line 1450
																																				RulesListNoCodes> when 'true' ->
	      let <_cor9> =
		  %% Line 1452
		  ( fun (_cor6,_cor5) ->
			case <_cor6,_cor5> of
			  <{'rule',_cor67,_cor68,[Nonterminal|Daughters],_cor69,_cor70,_cor71},I> when 'true' ->
			      let <_cor2> =
				  %% Line 1453
				  call 'erlang':'length'
				      (Daughters)
			      in  let <_cor3> =
				      %% Line 1453
				      call 'erlang':'+'
					  (I, _cor2)
				  in  let <I1> =
					  %% Line 1453
					  call 'erlang':'+'
					      (_cor3, 1)
				      in  %% Line 1454
					  {{Nonterminal,I},I1}
			  ( <_cor8,_cor7> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_cor8,_cor7})
				  -| [{'function_name',{'-make_rule_index/2-fun-0-',2}}] )
			    -| ['compiler_generated'] )
			end
		    -| [{'id',{0,0,'-make_rule_index/2-fun-0-'}}] )
	      in  %% Line 1451
		  case %% Line 1452
		       call 'lists':'mapfoldl'
			   (_cor9, %% Line 1455
				   1, %% Line 1455
				      RulesList) of
		    <{RulesL,_X_N}> when 'true' ->
			let <IndexedTab> =
			    %% Line 1456
			    apply 'family_with_domain'/2
				(RulesL, Nonterminals)
			in  let <_cor19> =
				%% Line 1458
				( letrec
				      'lc$^0'/1 =
					  fun (_cor16) ->
					      case _cor16 of
						<[R = {'rule',_cor72,_cor73,Symbols,_cor74,_cor75,_cor76}|_cor13]> when 'true' ->
						    ( letrec
							  'lc$^1'/1 =
							      fun (_cor17) ->
								  case _cor17 of
								    <[%% Line 1459
								      Foo|_cor15]> when 'true' ->
									let <_cor18> =
									    %% Line 1459
									    apply 'lc$^1'/1
										(_cor15)
									in  ( [{Foo,R}|_cor18]
									      -| ['compiler_generated'] )
								    <[]> when 'true' ->
									apply 'lc$^0'/1
									    (_cor13)
								    ( <_cor17> when 'true' ->
									  ( primop 'match_fail'
										({'function_clause',_cor17})
									    -| [{'function_name',{'lc$^1',1}}] )
								      -| ['compiler_generated'] )
								  end
						      in  apply 'lc$^1'/1
							      (%% Line 1459
							       Symbols)
						      -| ['list_comprehension'] )
						( <[_cor12|_cor13]> when 'true' ->
						      apply 'lc$^0'/1
							  (_cor13)
						  -| ['compiler_generated'] )
						<[]> when 'true' ->
						    []
						( <_cor16> when 'true' ->
						      ( primop 'match_fail'
							    ({'function_clause',_cor16})
							-| [{'function_name',{'lc$^0',1}}] )
						  -| ['compiler_generated'] )
					      end
				  in  apply 'lc$^0'/1
					  (RulesListNoCodes)
				  -| ['list_comprehension'] )
			    in  let <_cor26> =
				    %% Line 1460
				    ( letrec
					  'lc$^2'/1 =
					      fun (_cor24) ->
						  case _cor24 of
						    <[{{_X_Foo,R},I}|_cor22]> when 'true' ->
							let <_cor25> =
							    apply 'lc$^2'/1
								(_cor22)
							in  ( [{I,R}|_cor25]
							      -| ['compiler_generated'] )
						    ( <[_cor21|_cor22]> when 'true' ->
							  apply 'lc$^2'/1
							      (_cor22)
						      -| ['compiler_generated'] )
						    <[]> when 'true' ->
							[]
						    ( <_cor24> when 'true' ->
							  ( primop 'match_fail'
								({'function_clause',_cor24})
							    -| [{'function_name',{'lc$^2',1}}] )
						      -| ['compiler_generated'] )
						  end
				      in  let <_cor23> =
					      apply 'count'/2
						  (1, _cor19)
					  in  apply 'lc$^2'/1
						  (_cor23)
				      -| ['list_comprehension'] )
				in  let <_cor29> =
					%% Line 1461
					call 'dict':'from_list'
					    (IndexedTab)
				    in  let <_cor28> =
					    %% Line 1461
					    call 'dict':'from_list'
						(_cor26)
					in  %% Line 1461
					    {_cor29,_cor28}
		    ( <_cor10> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor10})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor31,_cor30> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor31,_cor30})
		  -| [{'function_name',{'make_rule_index',2}}] )
	    -| ['compiler_generated'] )
	end
'compute_parse_actions'/3 =
    %% Line 1466
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 1467
	    apply 'first_state'/0
		()
	in  %% Line 1467
	    case <> of
	      %% Line 1468
	      <>
		  when call 'erlang':'<'
			(_cor2,
			 _cor3) ->
		  _cor0
	      %% Line 1470
	      <> when 'true' ->
		  %% Line 1471
		  ( case _cor1 of
		      ( <( {'yecc',_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_rec124,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48}
			   -| ['compiler_generated'] )> when 'true' ->
			    case apply 'lookup_state'/2
				     (_rec124, _cor2) of
			      <{_cor50,StateN}>
				  when call 'erlang':'=:='
					(_cor50,
					 _cor2) ->
				  let <Actions> =
				      %% Line 1473
				      apply 'compute_parse_actions1'/3
					  (StateN, _cor2, _cor1)
				  in  let <_cor8> =
					  %% Line 1474
					  call 'erlang':'-'
					      (_cor2, 1)
				      in  %% Line 1474
					  apply 'compute_parse_actions'/3
					      (_cor8, _cor1, [{_cor2,Actions}|_cor0])
			      ( <_cor6> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor6})
				-| ['compiler_generated'] )
			    end
			-| ['compiler_generated'] )
		      ( <_cor49> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','yecc'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	    end
'compute_parse_actions1'/3 =
    %% Line 1477
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],_cor32,_cor33> when 'true' ->
	      %% Line 1478
	      []
	  %% Line 1479
	  <[{'item',RulePointer,%% Line 1480
				Lookahead0,%% Line 1481
					   Rhs}|%% Line 1481
						Items],%% Line 1481
						       N,%% Line 1481
							 St> when 'true' ->
	      %% Line 1482
	      case Rhs of
		%% Line 1483
		<[]> when 'true' ->
		    %% Line 1484
		    ( case St of
			( <( {'yecc',_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_rec125,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,_cor69}
			     -| ['compiler_generated'] )> when 'true' ->
			      let <Lookahead> =
				  apply 'decode_terminals'/2
				      (Lookahead0, _rec125)
			      in  %% Line 1485
				  case apply 'rule'/2
					   (RulePointer, St) of
				    %% Line 1486
				    <{[{}|_cor71],_X_RuleLine,_cor72}> when 'true' ->
					let <_cor6> =
					    %% Line 1488
					    apply 'compute_parse_actions1'/3
						(Items, N, St)
					in  %% Line 1487
					    [{Lookahead,'accept'}|_cor6]
				    %% Line 1492
				    <{[Head|Daughters0],_X_RuleLine,_cor73}> when 'true' ->
					let <Daughters> =
					    %% Line 1493
					    call 'lists':'delete'
						('$empty', Daughters0)
					in  let <_cor10> =
						%% Line 1496
						call 'erlang':'length'
						    (Daughters)
					    in  let <_cor8> =
						    %% Line 1497
						    call 'erlang':'++'
							(Daughters, [Head|[]])
						in  let <_cor9> =
							%% Line 1497
							apply 'get_prec'/2
							    (_cor8, St)
						    in  let <_cor11> =
							    %% Line 1498
							    apply 'compute_parse_actions1'/3
								(Items, N, St)
							in  %% Line 1494
							    [{Lookahead,%% Line 1495
									{'reduce',RulePointer,Head,_cor10,_cor9,'undefined'}}|_cor11]
				    ( <_cor12> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_cor12})
				      -| ['compiler_generated'] )
				  end
			  -| ['compiler_generated'] )
			( <_cor70> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','yecc'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		%% Line 1500
		<[Symbol|Daughters]> when 'true' ->
		    %% Line 1501
		    ( case St of
			( <( {'yecc',_cor74,_cor75,_cor76,_cor77,_cor78,_cor79,_cor80,_cor81,_cor82,_cor83,_cor84,_cor85,_cor86,_cor87,_cor88,_cor89,_cor90,_cor91,_cor92,_rec126,_cor93,_cor94,_cor95,_cor96,_cor97,_cor98,_cor99,_cor100,_cor101,_cor102,_cor103,_cor104,_cor105,_cor106,_cor107,_cor108,_cor109}
			     -| ['compiler_generated'] )> when 'true' ->
			      case <> of
				%% Line 1502
				<>
				    when %% Line 2375
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( '>='
									     -| ['compiler_generated'] )
					    (Symbol,
					     ( 0
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] ) ->
				    let <DecSymbol> =
					%% Line 1503
					apply 'decode_symbol'/2
					    (Symbol, _cor93)
				    in  %% Line 1504
					case apply 'rule'/2
						 (RulePointer, St) of
					  <{[Head|_cor148],_X_RuleLine,_cor149}> when 'true' ->
					      let <_cor20> =
						  %% Line 1508
						  case Daughters of
						    %% Line 1509
						    <[]> when 'true' ->
							apply 'get_prec'/2
							    ([DecSymbol|[Head|[]]], St)
						    %% Line 1510
						    <_cor150> when 'true' ->
							apply 'get_prec'/2
							    ([DecSymbol|[]], St)
						  end
					      in  let <_cor23> =
						      %% Line 1512
						      case Daughters of
							%% Line 1513
							<[]> when 'true' ->
							    'z'
							%% Line 1514
							<_cor151> when 'true' ->
							    'a'
						      end
						  in  let <_cor25> =
							  %% Line 1517
							  apply 'goto'/3
							      (N, DecSymbol, St)
						      in  let <_cor26> =
							      %% Line 1521
							      apply 'compute_parse_actions1'/3
								  (Items, N, St)
							  in  %% Line 1516
							      [{[DecSymbol|[]],%% Line 1517
									       {'shift',_cor25,_cor23,_cor20,%% Line 1520
													     RulePointer}}|_cor26]
					  ( <_cor18> when 'true' ->
						primop 'match_fail'
						    ({'badmatch',_cor18})
					    -| ['compiler_generated'] )
					end
				%% Line 1522
				<> when 'true' ->
				    %% Line 1523
				    apply 'compute_parse_actions1'/3
					(Items, N, St)
			      end
			  -| ['compiler_generated'] )
			( <_cor110> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','yecc'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		( <_cor28> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor28})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor31,_cor30,_cor29> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor31,_cor30,_cor29})
		  -| [{'function_name',{'compute_parse_actions1',3}}] )
	    -| ['compiler_generated'] )
	end
'get_prec'/2 =
    %% Line 1527
    fun (_cor1,_cor0) ->
	%% Line 1528
	( case _cor0 of
	    ( <( {'yecc',_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_rec128,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41}
		 -| ['compiler_generated'] )> when 'true' ->
		  apply 'get_prec1'/3
		      (_cor1, _rec128, {0,'none'})
	      -| ['compiler_generated'] )
	    ( <_cor42> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','yecc'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'get_prec1'/3 =
    %% Line 1530
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],_cor7,P> when 'true' ->
	      %% Line 1531
	      P
	  %% Line 1532
	  <[Symbol|T],PrecTab,P> when 'true' ->
	      %% Line 1533
	      case call 'ets':'lookup'
		       (PrecTab, Symbol) of
		%% Line 1534
		<[]> when 'true' ->
		    %% Line 1535
		    apply 'get_prec1'/3
			(T, PrecTab, P)
		%% Line 1536
		<[{_cor8,N,Ass}|[]]> when 'true' ->
		    %% Line 1537
		    apply 'get_prec1'/3
			(T, PrecTab, {N,Ass})
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'get_prec1',3}}] )
	    -| ['compiler_generated'] )
	end
'create_precedence_table'/1 =
    %% Line 1540
    fun (_cor0) ->
	let <PrecTab> =
	    %% Line 1541
	    call 'ets':'new'
		('yecc_precedences', [])
	in  %% Line 1542
	    ( case _cor0 of
		( <( {'yecc',_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_rec129,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43}
		     -| ['compiler_generated'] )> when 'true' ->
		      case call 'ets':'insert'
			       (PrecTab, _rec129) of
			<'true'> when 'true' ->
			    %% Line 1543
			    call 'erlang':'setelement'
				(24, _cor0, PrecTab)
			( <_cor4> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor4})
			  -| ['compiler_generated'] )
		      end
		  -| ['compiler_generated'] )
		( <_cor44> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','yecc'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	      -| ['compiler_generated'] )
'find_action_conflicts'/1 =
    %% Line 1551
    fun (_cor0) ->
	let <Cxt0> =
	    %% Line 1552
	    {'cxt','undefined','undefined',_cor0,[]}
	in  let <_cor32> =
		%% Line 1554
		( fun (_cor29,_cor28) ->
		      case <_cor29,_cor28> of
			<{N,Actions0},{Cxt1,StateActions}> when 'true' ->
			    let <_cor11> =
				%% Line 1555
				( letrec
				      'lc$^0'/1 =
					  fun (_cor8) ->
					      case _cor8 of
						<[{Lookahead,Act}|_cor5]> when 'true' ->
						    ( letrec
							  'lc$^1'/1 =
							      fun (_cor9) ->
								  case _cor9 of
								    <[%% Line 1556
								      Terminal|_cor7]> when 'true' ->
									let <_cor10> =
									    %% Line 1556
									    apply 'lc$^1'/1
										(_cor7)
									in  ( [{Terminal,Act}|_cor10]
									      -| ['compiler_generated'] )
								    <[]> when 'true' ->
									apply 'lc$^0'/1
									    (_cor5)
								    ( <_cor9> when 'true' ->
									  ( primop 'match_fail'
										({'function_clause',_cor9})
									    -| [{'function_name',{'lc$^1',1}}] )
								      -| ['compiler_generated'] )
								  end
						      in  apply 'lc$^1'/1
							      (%% Line 1556
							       Lookahead)
						      -| ['list_comprehension'] )
						( <[_cor4|_cor5]> when 'true' ->
						      apply 'lc$^0'/1
							  (_cor5)
						  -| ['compiler_generated'] )
						<[]> when 'true' ->
						    []
						( <_cor8> when 'true' ->
						      ( primop 'match_fail'
							    ({'function_clause',_cor8})
							-| [{'function_name',{'lc$^0',1}}] )
						  -| ['compiler_generated'] )
					      end
				  in  apply 'lc$^0'/1
					  (Actions0)
				  -| ['list_comprehension'] )
			    in  let <_cor24> =
				    %% Line 1558
				    ( fun (_cor21,_cor20) ->
					  case <_cor21,_cor20> of
					    <{Terminal,As},{Cxt2,Acts0}> when 'true' ->
						%% Line 1559
						case Cxt2 of
						  <{'cxt',_cor51,_cor52,_cor53,_cor54}> when 'true' ->
						      let <_cor15> =
							  %% Line 1560
							  call 'erlang':'setelement'
							      (3, Cxt2, N)
						      in  let <_cor17> =
							      call 'erlang':'setelement'
								  (2, _cor15, Terminal)
							  in  %% Line 1561
							      case %% Line 1562
								   apply 'find_action_conflicts2'/2
								       (As, _cor17) of
								<{Action,Cxt}> when 'true' ->
								    %% Line 1563
								    {Cxt,[{Action,Terminal}|Acts0]}
								( <_cor19> when 'true' ->
								      primop 'match_fail'
									  ({'badmatch',_cor19})
								  -| ['compiler_generated'] )
							      end
						  ( <_cor55> when 'true' ->
							( call ( 'erlang'
								 -| ['compiler_generated'] ):( 'error'
											       -| ['compiler_generated'] )
							      (( {'badrecord','cxt'}
								 -| ['compiler_generated'] ))
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						end
					    ( <_cor23,_cor22> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor23,_cor22})
						    -| [{'function_name',{'-find_action_conflicts/1-fun-0-',2}}] )
					      -| ['compiler_generated'] )
					  end
				      -| [{'id',{0,0,'-find_action_conflicts/1-fun-0-'}}] )
				in  let <_cor13> =
					%% Line 1564
					apply 'family'/1
					    (_cor11)
				    in  %% Line 1557
					case %% Line 1558
					     call 'lists':'foldl'
						 (_cor24, %% Line 1564
							  {Cxt1,[]}, _cor13) of
					  <{Cxt,Actions}> when 'true' ->
					      let <_cor26> =
						  %% Line 1565
						  apply 'family'/1
						      (Actions)
					      in  let <_cor27> =
						      %% Line 1565
						      apply 'inverse'/1
							  (_cor26)
						  in  %% Line 1565
						      {Cxt,[{N,_cor27}|StateActions]}
					  ( <_cor25> when 'true' ->
						primop 'match_fail'
						    ({'badmatch',_cor25})
					    -| ['compiler_generated'] )
					end
			( <_cor31,_cor30> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor31,_cor30})
				-| [{'function_name',{'-find_action_conflicts/1-fun-1-',2}}] )
			  -| ['compiler_generated'] )
		      end
		  -| [{'id',{0,0,'-find_action_conflicts/1-fun-1-'}}] )
	    in  %% Line 1566
		( case _cor0 of
		    ( <( {'yecc',_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,_cor69,_cor70,_cor71,_cor72,_cor73,_rec132,_cor74,_cor75,_cor76,_cor77,_cor78,_cor79,_cor80,_cor81,_cor82,_cor83,_cor84,_cor85,_cor86,_cor87,_cor88,_cor89,_cor90,_cor91}
			 -| ['compiler_generated'] )> when 'true' ->
			  case call 'lists':'foldl'
				   (_cor32, {Cxt0,[]}, _rec132) of
			    <{{'cxt',_cor93,_cor94,St,Res},NewParseActions0}> when 'true' ->
				do  %% Line 1567
				    case <> of
				      %% Line 1568
				      <>
					  when try
						let <_cor34> =
						    call 'erlang':'length'
							(Res)
						in  let <_cor35> =
							call 'erlang':'>'
							    (_cor34, 0)
						    in  ( case <> of
							    ( <>
								  when ( call ( 'erlang'
									     -| ['compiler_generated'] ):( 'is_record'
													   -| ['compiler_generated'] )
									  (St,
									   ( 'yecc'
									     -| ['compiler_generated'] ),
									   ( 38
									     -| ['compiler_generated'] ))
								      -| ['compiler_generated'] ) ->
								  let <_cor40> =
								      ( call 'erlang':'element'
									    (9, St)
									-| ['compiler_generated'] )
								  in  let <_cor41> =
									  ( call 'erlang':'=:='
										(_cor40, 'true')
									    -| ['compiler_generated'] )
								      in  ( call 'erlang':'and'
										(_cor35, _cor41)
									    -| ['compiler_generated'] )
							      -| ['compiler_generated'] )
							    ( <> when 'true' ->
								  'false'
							      -| ['compiler_generated'] )
							  end
							  -| ['compiler_generated'] )
					    of <Try> ->
						Try
					    catch <T,R> ->
						'false' ->
					  do  %% Line 1569
					      call 'io':'fwrite'
						  (#{#<10>(8,1,'integer',['unsigned'|['big']]),
						     #<42>(8,1,'integer',['unsigned'|['big']]),
						     #<42>(8,1,'integer',['unsigned'|['big']]),
						     #<42>(8,1,'integer',['unsigned'|['big']]),
						     #<32>(8,1,'integer',['unsigned'|['big']]),
						     #<67>(8,1,'integer',['unsigned'|['big']]),
						     #<111>(8,1,'integer',['unsigned'|['big']]),
						     #<110>(8,1,'integer',['unsigned'|['big']]),
						     #<102>(8,1,'integer',['unsigned'|['big']]),
						     #<108>(8,1,'integer',['unsigned'|['big']]),
						     #<105>(8,1,'integer',['unsigned'|['big']]),
						     #<99>(8,1,'integer',['unsigned'|['big']]),
						     #<116>(8,1,'integer',['unsigned'|['big']]),
						     #<115>(8,1,'integer',['unsigned'|['big']]),
						     #<32>(8,1,'integer',['unsigned'|['big']]),
						     #<114>(8,1,'integer',['unsigned'|['big']]),
						     #<101>(8,1,'integer',['unsigned'|['big']]),
						     #<115>(8,1,'integer',['unsigned'|['big']]),
						     #<111>(8,1,'integer',['unsigned'|['big']]),
						     #<108>(8,1,'integer',['unsigned'|['big']]),
						     #<118>(8,1,'integer',['unsigned'|['big']]),
						     #<101>(8,1,'integer',['unsigned'|['big']]),
						     #<100>(8,1,'integer',['unsigned'|['big']]),
						     #<32>(8,1,'integer',['unsigned'|['big']]),
						     #<98>(8,1,'integer',['unsigned'|['big']]),
						     #<121>(8,1,'integer',['unsigned'|['big']]),
						     #<32>(8,1,'integer',['unsigned'|['big']]),
						     #<111>(8,1,'integer',['unsigned'|['big']]),
						     #<112>(8,1,'integer',['unsigned'|['big']]),
						     #<101>(8,1,'integer',['unsigned'|['big']]),
						     #<114>(8,1,'integer',['unsigned'|['big']]),
						     #<97>(8,1,'integer',['unsigned'|['big']]),
						     #<116>(8,1,'integer',['unsigned'|['big']]),
						     #<111>(8,1,'integer',['unsigned'|['big']]),
						     #<114>(8,1,'integer',['unsigned'|['big']]),
						     #<32>(8,1,'integer',['unsigned'|['big']]),
						     #<112>(8,1,'integer',['unsigned'|['big']]),
						     #<114>(8,1,'integer',['unsigned'|['big']]),
						     #<101>(8,1,'integer',['unsigned'|['big']]),
						     #<99>(8,1,'integer',['unsigned'|['big']]),
						     #<101>(8,1,'integer',['unsigned'|['big']]),
						     #<100>(8,1,'integer',['unsigned'|['big']]),
						     #<101>(8,1,'integer',['unsigned'|['big']]),
						     #<110>(8,1,'integer',['unsigned'|['big']]),
						     #<99>(8,1,'integer',['unsigned'|['big']]),
						     #<101>(8,1,'integer',['unsigned'|['big']]),
						     #<115>(8,1,'integer',['unsigned'|['big']]),
						     #<58>(8,1,'integer',['unsigned'|['big']]),
						     #<10>(8,1,'integer',['unsigned'|['big']]),
						     #<10>(8,1,'integer',['unsigned'|['big']])}#)
					      let <_cor46> =
						  %% Line 1571
						  ( fun (_cor44) ->
							case _cor44 of
							  <{Confl,Name}> when 'true' ->
							      %% Line 1572
							      apply 'report_conflict'/4
								  (Confl, St, Name, 'prec')
							  ( <_cor45> when 'true' ->
								( primop 'match_fail'
								      ({'function_clause',_cor45})
								  -| [{'function_name',{'-find_action_conflicts/1-fun-2-',1}}] )
							    -| ['compiler_generated'] )
							end
						    -| [{'id',{0,0,'-find_action_conflicts/1-fun-2-'}}] )
					      in  let <_cor43> =
						      %% Line 1573
						      call 'lists':'reverse'
							  (Res)
						  in  do  %% Line 1571
							  call 'lists':'foreach'
							      (_cor46, _cor43)
							  %% Line 1574
							  call 'io':'fwrite'
							      (#{#<42>(8,1,'integer',['unsigned'|['big']]),
								 #<42>(8,1,'integer',['unsigned'|['big']]),
								 #<42>(8,1,'integer',['unsigned'|['big']]),
								 #<32>(8,1,'integer',['unsigned'|['big']]),
								 #<69>(8,1,'integer',['unsigned'|['big']]),
								 #<110>(8,1,'integer',['unsigned'|['big']]),
								 #<100>(8,1,'integer',['unsigned'|['big']]),
								 #<32>(8,1,'integer',['unsigned'|['big']]),
								 #<111>(8,1,'integer',['unsigned'|['big']]),
								 #<102>(8,1,'integer',['unsigned'|['big']]),
								 #<32>(8,1,'integer',['unsigned'|['big']]),
								 #<114>(8,1,'integer',['unsigned'|['big']]),
								 #<101>(8,1,'integer',['unsigned'|['big']]),
								 #<115>(8,1,'integer',['unsigned'|['big']]),
								 #<111>(8,1,'integer',['unsigned'|['big']]),
								 #<108>(8,1,'integer',['unsigned'|['big']]),
								 #<118>(8,1,'integer',['unsigned'|['big']]),
								 #<101>(8,1,'integer',['unsigned'|['big']]),
								 #<100>(8,1,'integer',['unsigned'|['big']]),
								 #<32>(8,1,'integer',['unsigned'|['big']]),
								 #<99>(8,1,'integer',['unsigned'|['big']]),
								 #<111>(8,1,'integer',['unsigned'|['big']]),
								 #<110>(8,1,'integer',['unsigned'|['big']]),
								 #<102>(8,1,'integer',['unsigned'|['big']]),
								 #<108>(8,1,'integer',['unsigned'|['big']]),
								 #<105>(8,1,'integer',['unsigned'|['big']]),
								 #<99>(8,1,'integer',['unsigned'|['big']]),
								 #<116>(8,1,'integer',['unsigned'|['big']]),
								 #<115>(8,1,'integer',['unsigned'|['big']]),
								 #<10>(8,1,'integer',['unsigned'|['big']]),
								 #<10>(8,1,'integer',['unsigned'|['big']])}#)
				      %% Line 1575
				      <> when 'true' ->
					  'ok'
				    end
				    let <NewParseActions> =
					%% Line 1578
					call 'lists':'reverse'
					    (NewParseActions0)
				    in  %% Line 1579
					case St of
					  <{'yecc',_cor95,_cor96,_cor97,_cor98,_cor99,_cor100,_cor101,_cor102,_cor103,_cor104,_cor105,_cor106,_cor107,_cor108,_cor109,_cor110,_cor111,_cor112,_cor113,_cor114,_cor115,_cor116,_cor117,_cor118,_cor119,_cor120,_cor121,_cor122,_cor123,_cor124,_cor125,_cor126,_cor127,_cor128,_cor129,_cor130,_cor131}> when 'true' ->
					      call 'erlang':'setelement'
						  (20, St, NewParseActions)
					  ( <_cor132> when 'true' ->
						( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'error'
										       -| ['compiler_generated'] )
						      (( {'badrecord','yecc'}
							 -| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					end
			    ( <_cor33> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor33})
			      -| ['compiler_generated'] )
			  end
		      -| ['compiler_generated'] )
		    ( <_cor92> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','yecc'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
		  -| ['compiler_generated'] )
'find_action_conflicts2'/2 =
    %% Line 1581
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[Action|[]],Cxt> when 'true' ->
	      %% Line 1582
	      {Action,Cxt}
	  %% Line 1583
	  <[{'shift',St,Pos,Prec,_cor48}|%% Line 1584
					 [S = {'shift',_cor49,_cor50,_cor51,_cor52}|As]],%% Line 1585
											 Cxt>
	      when let <_cor53> =
		    call 'erlang':'=:='
			(_cor49, %% Line 1584
				 St)
		in  let <_cor2> =
			%% Line 1585
			call 'erlang':'=:='
			    (Pos, 'a')
		    in  let <_cor3> =
			    %% Line 1585
			    call 'erlang':'=:='
				(Prec, {0,'none'})
			in  let <_cor54> =
				%% Line 1585
				call 'erlang':'or'
				    (_cor2, _cor3)
			    in  call 'erlang':'and'
				    (_cor53, _cor54) ->
	      %% Line 1588
	      apply 'find_action_conflicts2'/2
		  ([S|As], Cxt)
	  %% Line 1589
	  <[S1 = {'shift',NewState,'z',_cor55,_cor56}|%% Line 1590
						      [S2 = {'shift',_cor57,_cor58,_cor59,_cor60}|_cor61]],%% Line 1590
													   Cxt>
	      when call 'erlang':'=:='
		    (_cor57,
		     %% Line 1590
		     NewState) ->
	      let <Confl> =
		  %% Line 1592
		  apply 'conflict'/3
		      (S1, S2, Cxt)
	      in  %% Line 1593
		  case Cxt of
		    <{'cxt',_cor62,_cor63,St0,_cor64}> when 'true' ->
			let <St> =
			    %% Line 1594
			    apply 'conflict_error'/2
				(Confl, St0)
			in  let <_cor9> =
				%% Line 1595
				call 'erlang':'setelement'
				    (4, Cxt, St)
			    in  %% Line 1595
				{S1,_cor9}
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor5})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1596
	  <[S = {'shift',_cor70,_cor71,{P1,Ass1},_cor72}|Rs],Cxt0> when 'true' ->
	      %% Line 1597
	      case apply 'find_reduce_reduce'/2
		       (Rs, Cxt0) of
		<{R,Cxt1}> when 'true' ->
		    %% Line 1598
		    case Cxt1 of
		      <{'cxt',_cor73,_cor74,St0,Res0}> when 'true' ->
			  %% Line 1599
			  case R of
			    <{'reduce',_cor75,_cor76,_cor77,{P2,Ass2},_cor78}> when 'true' ->
				let <Confl> =
				    %% Line 1600
				    apply 'conflict'/3
					(R, S, Cxt1)
				in  %% Line 1601
				    case <> of
				      %% Line 1602
				      <>
					  when call 'erlang':'>'
						(P1,
						 P2) ->
					  let <_rec135> =
					      %% Line 1603
					      [{Confl,'shift'}|Res0]
					  in  let <_cor17> =
						  %% Line 1603
						  call 'erlang':'setelement'
						      (5, Cxt1, _rec135)
					      in  %% Line 1603
						  {S,_cor17}
				      %% Line 1604
				      <>
					  when call 'erlang':'>'
						(P2,
						 P1) ->
					  let <_rec137> =
					      %% Line 1605
					      [{Confl,'reduce'}|Res0]
					  in  let <_cor21> =
						  %% Line 1605
						  call 'erlang':'setelement'
						      (5, Cxt1, _rec137)
					      in  %% Line 1605
						  {R,_cor21}
				      %% Line 1606
				      <>
					  when let <_cor22> =
						call 'erlang':'=:='
						    (Ass1, 'left')
					    in  let <_cor23> =
						    call 'erlang':'=:='
							(Ass2, 'left')
						in  call 'erlang':'and'
							(_cor22, _cor23) ->
					  let <_rec139> =
					      %% Line 1607
					      [{Confl,'reduce'}|Res0]
					  in  let <_cor27> =
						  %% Line 1607
						  call 'erlang':'setelement'
						      (5, Cxt1, _rec139)
					      in  %% Line 1607
						  {R,_cor27}
				      %% Line 1608
				      <>
					  when let <_cor28> =
						call 'erlang':'=:='
						    (Ass1, 'right')
					    in  let <_cor29> =
						    call 'erlang':'=:='
							(Ass2, 'right')
						in  call 'erlang':'and'
							(_cor28, _cor29) ->
					  let <_rec141> =
					      %% Line 1609
					      [{Confl,'shift'}|Res0]
					  in  let <_cor33> =
						  %% Line 1609
						  call 'erlang':'setelement'
						      (5, Cxt1, _rec141)
					      in  %% Line 1609
						  {S,_cor33}
				      %% Line 1610
				      <>
					  when let <_cor34> =
						call 'erlang':'=:='
						    (Ass1, 'nonassoc')
					    in  let <_cor35> =
						    call 'erlang':'=:='
							(Ass2, 'nonassoc')
						in  call 'erlang':'and'
							(_cor34, _cor35) ->
					  %% Line 1611
					  {'nonassoc',Cxt1}
				      %% Line 1612
				      <>
					  when let <_cor36> =
						call 'erlang':'=:='
						    (P1, 0)
					    in  let <_cor37> =
						    call 'erlang':'=:='
							(P2, 0)
						in  call 'erlang':'and'
							(_cor36, _cor37) ->
					  do  %% Line 1613
					      apply 'report_conflict'/4
						  (Confl, St0, 'shift', 'default')
					      let <St> =
						  %% Line 1614
						  apply 'add_conflict'/2
						      (Confl, St0)
					      in  let <_cor41> =
						      %% Line 1615
						      call 'erlang':'setelement'
							  (4, Cxt1, St)
						  in  %% Line 1615
						      {S,_cor41}
				      %% Line 1616
				      <> when 'true' ->
					  let <St> =
					      %% Line 1617
					      apply 'conflict_error'/2
						  (Confl, St0)
					  in  let <_cor45> =
						  %% Line 1618
						  call 'erlang':'setelement'
						      (4, Cxt1, St)
					      in  %% Line 1618
						  {S,_cor45}
				    end
			    ( <_cor12> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor12})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor11> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor11})
			-| ['compiler_generated'] )
		    end
		( <_cor10> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor10})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1620
	  <Rs,Cxt0> when 'true' ->
	      %% Line 1621
	      apply 'find_reduce_reduce'/2
		  (Rs, Cxt0)
	end
'find_reduce_reduce'/2 =
    %% Line 1623
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[R|[]],Cxt> when 'true' ->
	      %% Line 1624
	      {R,Cxt}
	  %% Line 1625
	  <[A = 'accept'|[R = {'reduce',_cor22,_cor23,_cor24,_cor25,_cor26}|Rs]],Cxt0> when 'true' ->
	      let <Confl> =
		  %% Line 1626
		  apply 'conflict'/3
		      (R, A, Cxt0)
	      in  %% Line 1627
		  ( case Cxt0 of
		      ( <( {'cxt',_cor27,_cor28,_rec145,_cor29}
			   -| ['compiler_generated'] )> when 'true' ->
			    let <St> =
				apply 'conflict_error'/2
				    (Confl, _rec145)
			    in  let <_cor8> =
				    %% Line 1628
				    call 'erlang':'setelement'
					(4, Cxt0, St)
				in  %% Line 1629
				    apply 'find_reduce_reduce'/2
					([R|Rs], _cor8)
			-| ['compiler_generated'] )
		      ( <_cor30> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','cxt'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  %% Line 1630
	  <[R1 = {'reduce',_cor36,Categ1,_cor37,{P1,_cor38},_cor39}|%% Line 1631
								    [R2 = {'reduce',_cor40,Categ2,_cor41,{P2,_cor42},_cor43}|Rs]],%% Line 1631
																  Cxt0> when 'true' ->
	      %% Line 1632
	      case Cxt0 of
		<{'cxt',_cor44,_cor45,St0,Res0}> when 'true' ->
		    let <Confl> =
			%% Line 1633
			apply 'conflict'/3
			    (R1, R2, Cxt0)
		    in  let <R,Res,St> =
			    %% Line 1635
			    case <> of
			      %% Line 1636
			      <>
				  when call 'erlang':'>'
					(P1,
					 P2) ->
				  %% Line 1637
				  <R1,[{Confl,Categ1}|Res0],St0>
			      %% Line 1638
			      <>
				  when call 'erlang':'>'
					(P2,
					 P1) ->
				  %% Line 1639
				  <R2,[{Confl,Categ2}|Res0],St0>
			      %% Line 1640
			      <> when 'true' ->
				  let <St1> =
				      %% Line 1641
				      apply 'conflict_error'/2
					  (Confl, St0)
				  in  %% Line 1642
				      <R1,Res0,St1>
			    end
			in  let <_cor16> =
				%% Line 1644
				call 'erlang':'setelement'
				    (5, Cxt0, Res)
			    in  let <_cor18> =
				    %% Line 1644
				    call 'erlang':'setelement'
					(4, _cor16, St)
				in  %% Line 1645
				    apply 'find_reduce_reduce'/2
					([R|Rs], _cor18)
		( <_cor10> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor10})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor21,_cor20> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor21,_cor20})
		  -| [{'function_name',{'find_reduce_reduce',2}}] )
	    -| ['compiler_generated'] )
	end
'sort_parse_actions'/1 =
    %% Line 1651
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      %% Line 1652
	      []
	  %% Line 1653
	  <[{N,La_actions}|Tail]> when 'true' ->
	      let <_cor1> =
		  %% Line 1654
		  apply 'sort_parse_actions1'/1
		      (La_actions)
	      in  let <_cor2> =
		      %% Line 1654
		      apply 'sort_parse_actions'/1
			  (Tail)
		  in  %% Line 1654
		      [{N,_cor1}|_cor2]
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'sort_parse_actions',1}}] )
	    -| ['compiler_generated'] )
	end
'sort_parse_actions1'/1 =
    %% Line 1656
    fun (_cor0) ->
	let <_cor3> =
	    %% Line 1657
	    ( fun (_cor1) ->
		  case _cor1 of
		    <{_X_LA,A}> when 'true' ->
			call 'erlang':'=:='
			    (A, 'accept')
		    ( <_cor2> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor2})
			    -| [{'function_name',{'-sort_parse_actions1/1-fun-0-',1}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-sort_parse_actions1/1-fun-0-'}}] )
	in  let <As> =
		%% Line 1657
		call 'lists':'filter'
		    (_cor3, _cor0)
	    in  let <_cor8> =
		    %% Line 1658
		    ( fun (_cor6) ->
			  case _cor6 of
			    <{_X_LA,A}> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'is_record'
								       -| ['compiler_generated'] )
				      (A, 'shift', 5)
				  -| ['compiler_generated'] )
			    ( <_cor7> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor7})
				    -| [{'function_name',{'-sort_parse_actions1/1-fun-1-',1}}] )
			      -| ['compiler_generated'] )
			  end
		      -| [{'id',{0,0,'-sort_parse_actions1/1-fun-1-'}}] )
		in  let <Ss> =
			%% Line 1658
			call 'lists':'filter'
			    (_cor8, _cor0)
		    in  let <_cor13> =
			    %% Line 1659
			    ( fun (_cor11) ->
				  case _cor11 of
				    <{_X_LA,A}> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'is_record'
									       -| ['compiler_generated'] )
					      (A, 'reduce', 6)
					  -| ['compiler_generated'] )
				    ( <_cor12> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor12})
					    -| [{'function_name',{'-sort_parse_actions1/1-fun-2-',1}}] )
				      -| ['compiler_generated'] )
				  end
			      -| [{'id',{0,0,'-sort_parse_actions1/1-fun-2-'}}] )
			in  let <Rs> =
				%% Line 1659
				call 'lists':'filter'
				    (_cor13, _cor0)
			    in  let <_cor17> =
				    %% Line 1660
				    ( fun (_cor15) ->
					  case _cor15 of
					    <{_X_LA,A}> when 'true' ->
						call 'erlang':'=:='
						    (A, 'nonassoc')
					    ( <_cor16> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor16})
						    -| [{'function_name',{'-sort_parse_actions1/1-fun-3-',1}}] )
					      -| ['compiler_generated'] )
					  end
				      -| [{'id',{0,0,'-sort_parse_actions1/1-fun-3-'}}] )
				in  let <Ns> =
					%% Line 1660
					call 'lists':'filter'
					    (_cor17, _cor0)
				    in  let <_cor19> =
					    %% Line 1661
					    call 'erlang':'++'
						(Rs, Ns)
					in  let <_cor20> =
						%% Line 1661
						call 'erlang':'++'
						    (Ss, _cor19)
					    in  %% Line 1661
						call 'erlang':'++'
						    (As, _cor20)
'find_identical_shift_states'/1 =
    %% Line 1665
    fun (_cor0) ->
	let <_cor5> =
	    %% Line 1666
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor3) ->
			  case _cor3 of
			    <[{State,Actions}|_cor2]> when 'true' ->
				let <_cor4> =
				    apply 'lc$^0'/1
					(_cor2)
				in  ( [{Actions,State}|_cor4]
				      -| ['compiler_generated'] )
			    ( <[_cor1|_cor2]> when 'true' ->
				  apply 'lc$^0'/1
				      (_cor2)
			      -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor3> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor3})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (_cor0)
	      -| ['list_comprehension'] )
	in  let <_cor10> =
		%% Line 1667
		( fun (_cor8) ->
		      case _cor8 of
			<{Actions,_X_States}> when 'true' ->
			    %% Line 1668
			    apply 'shift_actions_only'/1
				(Actions)
			( <_cor9> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor9})
				-| [{'function_name',{'-find_identical_shift_states/1-fun-0-',1}}] )
			  -| ['compiler_generated'] )
		      end
		  -| [{'id',{0,0,'-find_identical_shift_states/1-fun-0-'}}] )
	    in  let <_cor7> =
		    %% Line 1669
		    apply 'family'/1
			(_cor5)
		in  %% Line 1667
		    case call 'lists':'partition'
			     (_cor10, _cor7) of
		      <{SO,NotSO}> when 'true' ->
			  let <_cor19> =
			      %% Line 1672
			      ( letrec
				    'lc$^1'/1 =
					fun (_cor16) ->
					    case _cor16 of
					      <[{_X_Actions,States}|_cor13]> when 'true' ->
						  ( letrec
							'lc$^2'/1 =
							    fun (_cor17) ->
								case _cor17 of
								  <[State|_cor15]> when 'true' ->
								      let <_cor18> =
									  apply 'lc$^2'/1
									      (_cor15)
								      in  ( [{State,State}|_cor18]
									    -| ['compiler_generated'] )
								  <[]> when 'true' ->
								      apply 'lc$^1'/1
									  (_cor13)
								  ( <_cor17> when 'true' ->
									( primop 'match_fail'
									      ({'function_clause',_cor17})
									  -| [{'function_name',{'lc$^2',1}}] )
								    -| ['compiler_generated'] )
								end
						    in  apply 'lc$^2'/1
							    (States)
						    -| ['list_comprehension'] )
					      ( <[_cor12|_cor13]> when 'true' ->
						    apply 'lc$^1'/1
							(_cor13)
						-| ['compiler_generated'] )
					      <[]> when 'true' ->
						  []
					      ( <_cor16> when 'true' ->
						    ( primop 'match_fail'
							  ({'function_clause',_cor16})
						      -| [{'function_name',{'lc$^1',1}}] )
						-| ['compiler_generated'] )
					    end
				in  apply 'lc$^1'/1
					(NotSO)
				-| ['list_comprehension'] )
			  in  let <_cor28> =
				  %% Line 1670
				  ( letrec
					'lc$^3'/1 =
					    fun (_cor24) ->
						case _cor24 of
						  <[{_X_Actions,States}|_cor21]> when 'true' ->
						      ( letrec
							    'lc$^4'/1 =
								fun (_cor25) ->
								    case _cor25 of
								      <[State|_cor23]> when 'true' ->
									  let <_cor26> =
									      call 'erlang':'hd'
										  (States)
									  in  let <_cor27> =
										  apply 'lc$^4'/1
										      (_cor23)
									      in  ( [{State,_cor26}|_cor27]
										    -| ['compiler_generated'] )
								      <[]> when 'true' ->
									  apply 'lc$^3'/1
									      (_cor21)
								      ( <_cor25> when 'true' ->
									    ( primop 'match_fail'
										  ({'function_clause',_cor25})
									      -| [{'function_name',{'lc$^4',1}}] )
									-| ['compiler_generated'] )
								    end
							in  apply 'lc$^4'/1
								(States)
							-| ['list_comprehension'] )
						  ( <[_cor20|_cor21]> when 'true' ->
							apply 'lc$^3'/1
							    (_cor21)
						    -| ['compiler_generated'] )
						  <[]> when 'true' ->
						      _cor19
						  ( <_cor24> when 'true' ->
							( primop 'match_fail'
							      ({'function_clause',_cor24})
							  -| [{'function_name',{'lc$^3',1}}] )
						    -| ['compiler_generated'] )
						end
				    in  apply 'lc$^3'/1
					    (SO)
				    -| ['list_comprehension'] )
			      in  %% Line 1673
				  call 'lists':'keysort'
				      (1, _cor28)
		      ( <_cor11> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor11})
			-| ['compiler_generated'] )
		    end
'find_partial_shift_states'/2 =
    %% Line 1681
    fun (_cor1,_cor0) ->
	let <_cor8> =
	    %% Line 1682
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor5) ->
			  case _cor5 of
			    <[{{State,Actions},{_cor104,_cor105}}|_cor3]>
				when let <_cor106> =
				      call 'erlang':'=:='
					  (_cor104, State)
				  in  let <_cor107> =
					  call 'erlang':'=:='
					      (_cor105, State)
				      in  call 'erlang':'and'
					      (_cor106, _cor107) ->
				%% Line 1684
				( case apply 'shift_actions_only'/1
					   (Actions) of
				    <'true'> when 'true' ->
					let <_cor6> =
					    apply 'lc$^0'/1
						(_cor3)
					in  ( [{State,Actions}|_cor6]
					      -| ['compiler_generated'] )
				    ( <'false'> when 'true' ->
					  apply 'lc$^0'/1
					      (_cor3)
				      -| ['compiler_generated'] )
				    ( <_cor7> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_cor7})
				      -| ['compiler_generated'] )
				  end
				  -| ['list_comprehension'] )
			    ( <[_cor2|_cor3]> when 'true' ->
				  apply 'lc$^0'/1
				      (_cor3)
			      -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor5> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor5})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  let <_cor4> =
		      %% Line 1683
		      call 'lists':'zip'
			  (_cor1, _cor0)
		  in  apply 'lc$^0'/1
			  (_cor4)
	      -| ['list_comprehension'] )
	in  let <StateActions> =
		%% Line 1685
		call 'sofs':'family'
		    (_cor8, [{'state',['action']}])
	    in  let <StateAction> =
		    %% Line 1686
		    call 'sofs':'family_to_relation'
			(StateActions)
		in  let <_cor12> =
			%% Line 1689
			call 'sofs':'range'
			    (StateActions)
		    in  let <Parts> =
			    %% Line 1689
			    call 'sofs':'partition'
				(_cor12)
			in  let <PartsL> =
				%% Line 1690
				call 'sofs':'to_external'
				    (Parts)
			    in  let <_cor15> =
				    %% Line 1692
				    call 'erlang':'length'
					(PartsL)
				in  let <_cor16> =
					%% Line 1692
					apply 'seq1'/1
					    (_cor15)
				    in  let <PartNameL> =
					    %% Line 1692
					    call 'lists':'zip'
						(_cor16, PartsL)
					in  let <_cor25> =
						%% Line 1693
						( letrec
						      'lc$^1'/1 =
							  fun (_cor22) ->
							      case _cor22 of
								<[%% Line 1694
								  {PartName,Actions}|_cor19]> when 'true' ->
								    ( letrec
									  'lc$^2'/1 =
									      fun (_cor23) ->
										  case _cor23 of
										    <[%% Line 1695
										      Action|_cor21]> when 'true' ->
											let <_cor24> =
											    %% Line 1695
											    apply 'lc$^2'/1
												(_cor21)
											in  ( [{Action,PartName}|_cor24]
											      -| ['compiler_generated'] )
										    <[]> when 'true' ->
											%% Line 1694
											apply 'lc$^1'/1
											    (_cor19)
										    ( <_cor23> when 'true' ->
											  ( primop 'match_fail'
												({'function_clause',_cor23})
											    -| [{'function_name',{'lc$^2',1}}] )
										      -| ['compiler_generated'] )
										  end
								      in  apply 'lc$^2'/1
									      (%% Line 1695
									       Actions)
								      -| ['list_comprehension'] )
								( <[_cor18|_cor19]> when 'true' ->
								      %% Line 1694
								      apply 'lc$^1'/1
									  (_cor19)
								  -| ['compiler_generated'] )
								<[]> when 'true' ->
								    []
								( <_cor22> when 'true' ->
								      ( primop 'match_fail'
									    ({'function_clause',_cor22})
									-| [{'function_name',{'lc$^1',1}}] )
								  -| ['compiler_generated'] )
							      end
						  in  apply 'lc$^1'/1
							  (%% Line 1694
							   PartNameL)
						  -| ['list_comprehension'] )
					    in  let <ActionPartName> =
						    %% Line 1696
						    call 'sofs':'relation'
							(_cor25, [{'action','partname'}])
						in  let <StatePartName> =
							%% Line 1697
							call 'sofs':'relative_product'
							    (StateAction, ActionPartName)
						    in  let <_cor29> =
							    %% Line 1698
							    call 'sofs':'converse'
								(StatePartName)
							in  let <PartInStates> =
								%% Line 1698
								call 'sofs':'relation_to_family'
								    (_cor29)
							    in  let <PartActions> =
								    %% Line 1701
								    call 'sofs':'family'
									(PartNameL, [{'partname',['action']}])
								in  let <_cor32> =
									%% Line 1703
									call 'sofs':'converse'
									    (StateActions)
								    in  let <PartState> =
									    %% Line 1703
									    call 'sofs':'relative_product'
										(PartActions, _cor32)
									in  let <_cor34> =
										%% Line 1704
										call 'sofs':'domain'
										    (PartActions)
									    in  let <PartStates> =
										    %% Line 1704
										    apply 'sofs_family_with_domain'/2
											(PartState, _cor34)
										in  let <_cor45> =
											%% Line 1706
											( letrec
											      'lc$^3'/1 =
												  fun (_cor41) ->
												      case _cor41 of
													<[%% Line 1709
													  {{Nm,P},{_cor108,S},{_cor109,EqS}}|_cor37]>
													    when let <_cor110> =
														  call 'erlang':'=:='
														      (_cor108, %% Line 1709
																Nm)
													      in  let <_cor111> =
														      call 'erlang':'=:='
															  (_cor109, %% Line 1709
																    Nm)
														  in  call 'erlang':'and'
															  (_cor110, _cor111) ->
													    let <_cor43> =
														%% Line 1707
														call 'erlang':'length'
														    (P)
													    in  let <_cor42> =
														    %% Line 1708
														    call 'ordsets':'from_list'
															(S)
														in  let <_cor44> =
															%% Line 1709
															apply 'lc$^3'/1
															    (_cor37)
														    in  ( [{'part_data',Nm,EqS,P,_cor43,_cor42}|_cor44]
															  -| ['compiler_generated'] )
													( <[_cor36|_cor37]> when 'true' ->
													      %% Line 1709
													      apply 'lc$^3'/1
														  (_cor37)
													  -| ['compiler_generated'] )
													<[]> when 'true' ->
													    []
													( <_cor41> when 'true' ->
													      ( primop 'match_fail'
														    ({'function_clause',_cor41})
														-| [{'function_name',{'lc$^3',1}}] )
													  -| ['compiler_generated'] )
												      end
											  in  let <_cor39> =
												  %% Line 1711
												  call 'sofs':'to_external'
												      (PartInStates)
											      in  let <_cor38> =
												      %% Line 1712
												      call 'sofs':'to_external'
													  (PartStates)
												  in  let <_cor40> =
													  %% Line 1710
													  call 'lists':'zip3'
													      (PartNameL, _cor39, _cor38)
												      in  apply 'lc$^3'/1
													      (_cor40)
											  -| ['list_comprehension'] )
										    in  let <_cor48> =
											    %% Line 1713
											    call 'erlang':'length'
												(_cor45)
											in  let <_cor47> =
												%% Line 1713
												call 'erlang':'length'
												    (PartNameL)
											    in  %% Line 1713
												case call 'erlang':'=:='
													 (_cor48, _cor47) of
												  <'true'> when 'true' ->
												      let <Ps> =
													  %% Line 1714
													  apply 'select_parts'/1
													      (_cor45)
												      in  let <_cor59> =
													      %% Line 1716
													      ( letrec
														    'lc$^4'/1 =
															fun (_cor55) ->
															    case _cor55 of
															      <[%% Line 1717
																{_X_W,{'part_data',_cor112,[],Actions,_cor113,%% Line 1718
																					      States}}|_cor52]> when 'true' ->
																  ( letrec
																	'lc$^5'/1 =
																	    fun (_cor56) ->
																		case _cor56 of
																		  <[%% Line 1719
																		    State|_cor54]> when 'true' ->
																		      let <_cor57> =
																			  call 'erlang':'hd'
																			      (States)
																		      in  let <_cor58> =
																			      %% Line 1719
																			      apply 'lc$^5'/1
																				  (_cor54)
																			  in  ( [{State,Actions,{'jump_some',_cor57}}|_cor58]
																				-| ['compiler_generated'] )
																		  <[]> when 'true' ->
																		      %% Line 1718
																		      apply 'lc$^4'/1
																			  (_cor52)
																		  ( <_cor56> when 'true' ->
																			( primop 'match_fail'
																			      ({'function_clause',_cor56})
																			  -| [{'function_name',{'lc$^5',1}}] )
																		    -| ['compiler_generated'] )
																		end
																    in  apply 'lc$^5'/1
																	    (%% Line 1719
																	     States)
																    -| ['list_comprehension'] )
															      ( <[_cor51|_cor52]> when 'true' ->
																    %% Line 1718
																    apply 'lc$^4'/1
																	(_cor52)
																-| ['compiler_generated'] )
															      <[]> when 'true' ->
																  []
															      ( <_cor55> when 'true' ->
																    ( primop 'match_fail'
																	  ({'function_clause',_cor55})
																      -| [{'function_name',{'lc$^4',1}}] )
																-| ['compiler_generated'] )
															    end
														in  apply 'lc$^4'/1
															(%% Line 1718
															 Ps)
														-| ['list_comprehension'] )
													  in  let <_cor71> =
														  %% Line 1720
														  ( letrec
															'lc$^6'/1 =
															    fun (_cor67) ->
																case _cor67 of
																  <[%% Line 1721
																    {_X_W,{'part_data',_cor114,EqS,Actions,_cor115,%% Line 1722
																						   States}}|_cor62]> when 'true' ->
																      ( letrec
																	    'lc$^7'/1 =
																		fun (_cor68) ->
																		    case _cor68 of
																		      <[%% Line 1723
																			To|_cor64]> when 'true' ->
																			  ( letrec
																				'lc$^8'/1 =
																				    fun (_cor69) ->
																					case _cor69 of
																					  <[%% Line 1724
																					    State|_cor66]>
																					      when %% Line 1725
																						call 'erlang':'=/='
																						    (State,
																						     To) ->
																					      let <_cor70> =
																						  %% Line 1724
																						  apply 'lc$^8'/1
																						      (_cor66)
																					      in  ( [{State,Actions,{'jump_all',To}}|_cor70]
																						    -| ['compiler_generated'] )
																					  ( <[%% Line 1724
																					      State|_cor66]> when 'true' ->
																						%% Line 1724
																						apply 'lc$^8'/1
																						    (_cor66)
																					    -| ['compiler_generated'] )
																					  <[]> when 'true' ->
																					      %% Line 1723
																					      apply 'lc$^7'/1
																						  (_cor64)
																					  ( <_cor69> when 'true' ->
																						( primop 'match_fail'
																						      ({'function_clause',_cor69})
																						  -| [{'function_name',{'lc$^8',1}}] )
																					    -| ['compiler_generated'] )
																					end
																			    in  apply 'lc$^8'/1
																				    (%% Line 1724
																				     States)
																			    -| ['list_comprehension'] )
																		      <[]> when 'true' ->
																			  %% Line 1722
																			  apply 'lc$^6'/1
																			      (_cor62)
																		      ( <_cor68> when 'true' ->
																			    ( primop 'match_fail'
																				  ({'function_clause',_cor68})
																			      -| [{'function_name',{'lc$^7',1}}] )
																			-| ['compiler_generated'] )
																		    end
																	in  apply 'lc$^7'/1
																		(%% Line 1723
																		 EqS)
																	-| ['list_comprehension'] )
																  ( <[_cor61|_cor62]> when 'true' ->
																	%% Line 1722
																	apply 'lc$^6'/1
																	    (_cor62)
																    -| ['compiler_generated'] )
																  <[]> when 'true' ->
																      []
																  ( <_cor67> when 'true' ->
																	( primop 'match_fail'
																	      ({'function_clause',_cor67})
																	  -| [{'function_name',{'lc$^6',1}}] )
																    -| ['compiler_generated'] )
																end
														    in  apply 'lc$^6'/1
															    (%% Line 1722
															     Ps)
														    -| ['list_comprehension'] )
													      in  let <_cor73> =
														      %% Line 1726
														      call 'erlang':'++'
															  (_cor59, _cor71)
														  in  let <J> =
															  %% Line 1726
															  call 'lists':'keysort'
															      (1, _cor73)
														      in  let <_cor79> =
															      %% Line 1728
															      ( letrec
																    'lc$^9'/1 =
																	fun (_cor77) ->
																	    case _cor77 of
																	      <[{S,_cor116,_cor117}|_cor76]> when 'true' ->
																		  let <_cor78> =
																		      apply 'lc$^9'/1
																			  (_cor76)
																		  in  ( [S|_cor78]
																			-| ['compiler_generated'] )
																	      ( <[_cor75|_cor76]> when 'true' ->
																		    apply 'lc$^9'/1
																			(_cor76)
																		-| ['compiler_generated'] )
																	      <[]> when 'true' ->
																		  []
																	      ( <_cor77> when 'true' ->
																		    ( primop 'match_fail'
																			  ({'function_clause',_cor77})
																		      -| [{'function_name',{'lc$^9',1}}] )
																		-| ['compiler_generated'] )
																	    end
																in  apply 'lc$^9'/1
																	(J)
																-| ['list_comprehension'] )
															  in  let <JumpStates> =
																  %% Line 1728
																  call 'ordsets':'from_list'
																      (_cor79)
															      in  let <_cor82> =
																      %% Line 1730
																      call 'sofs':'relation'
																	  (_cor1, [{'state','actions'}])
																  in  let <_cor81> =
																	  %% Line 1731
																	  call 'sofs':'set'
																	      (JumpStates, ['state'])
																      in  %% Line 1729
																	  case %% Line 1730
																	       call 'sofs':'partition'
																		   (1, _cor82, _cor81) of
																	    <{JS,NJS}> when 'true' ->
																		let <_cor91> =
																		    %% Line 1735
																		    ( letrec
																			  'lc$^10'/1 =
																			      fun (_cor88) ->
																				  case _cor88 of
																				    <[%% Line 1736
																				      {{S,Actions},{_cor118,Part,{Tag,ToS}}}|_cor85]>
																					when call 'erlang':'=:='
																					      (_cor118,
																					       %% Line 1736
																					       S) ->
																					let <_cor89> =
																					    call 'erlang':'--'
																						(Actions, Part)
																					in  let <_cor90> =
																						%% Line 1736
																						apply 'lc$^10'/1
																						    (_cor85)
																					    in  ( [{S,{_cor89,{Tag,ToS,Part}}}|_cor90]
																						  -| ['compiler_generated'] )
																				    ( <[_cor84|_cor85]> when 'true' ->
																					  %% Line 1736
																					  apply 'lc$^10'/1
																					      (_cor85)
																				      -| ['compiler_generated'] )
																				    <[]> when 'true' ->
																					[]
																				    ( <_cor88> when 'true' ->
																					  ( primop 'match_fail'
																						({'function_clause',_cor88})
																					    -| [{'function_name',{'lc$^10',1}}] )
																				      -| ['compiler_generated'] )
																				  end
																		      in  let <_cor86> =
																			      %% Line 1737
																			      call 'sofs':'to_external'
																				  (JS)
																			  in  let <_cor87> =
																				  %% Line 1737
																				  call 'lists':'zip'
																				      (_cor86, J)
																			      in  apply 'lc$^10'/1
																				      (_cor87)
																		      -| ['list_comprehension'] )
																		in  let <_cor97> =
																			%% Line 1733
																			( letrec
																			      'lc$^11'/1 =
																				  fun (_cor95) ->
																				      case _cor95 of
																					<[{S,Actions}|_cor93]> when 'true' ->
																					    let <_cor96> =
																						apply 'lc$^11'/1
																						    (_cor93)
																					    in  ( [{S,{Actions,'jump_none'}}|_cor96]
																						  -| ['compiler_generated'] )
																					( <[_cor92|_cor93]> when 'true' ->
																					      apply 'lc$^11'/1
																						  (_cor93)
																					  -| ['compiler_generated'] )
																					<[]> when 'true' ->
																					    _cor91
																					( <_cor95> when 'true' ->
																					      ( primop 'match_fail'
																						    ({'function_clause',_cor95})
																						-| [{'function_name',{'lc$^11',1}}] )
																					  -| ['compiler_generated'] )
																				      end
																			  in  let <_cor94> =
																				  call 'sofs':'to_external'
																				      (NJS)
																			      in  apply 'lc$^11'/1
																				      (_cor94)
																			  -| ['list_comprehension'] )
																		    in  let <_cor100> =
																			    %% Line 1738
																			    call 'erlang':'length'
																				(_cor1)
																			in  let <_cor99> =
																				%% Line 1738
																				call 'erlang':'length'
																				    (_cor97)
																			    in  %% Line 1738
																				case call 'erlang':'=:='
																					 (_cor100, _cor99) of
																				  <'true'> when 'true' ->
																				      %% Line 1739
																				      call 'lists':'keysort'
																					  (1, _cor97)
																				  ( <_cor101> when 'true' ->
																					primop 'match_fail'
																					    ({'badmatch',_cor101})
																				    -| ['compiler_generated'] )
																				end
																	    ( <_cor83> when 'true' ->
																		  primop 'match_fail'
																		      ({'badmatch',_cor83})
																	      -| ['compiler_generated'] )
																	  end
												  ( <_cor49> when 'true' ->
													primop 'match_fail'
													    ({'badmatch',_cor49})
												    -| ['compiler_generated'] )
												end
'select_parts'/1 =
    %% Line 1742
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      %% Line 1743
	      []
	  %% Line 1744
	  <PartDataL> when 'true' ->
	      let <_cor6> =
		  %% Line 1745
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor3) ->
				case _cor3 of
				  <[PD|_cor2]> when 'true' ->
				      let <_cor4> =
					  apply 'score'/1
					      (PD)
				      in  let <_cor5> =
					      apply 'lc$^0'/1
						  (_cor2)
					  in  ( [{_cor4,PD}|_cor5]
						-| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor3> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor3})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (PartDataL)
		    -| ['list_comprehension'] )
	      in  let <_cor8> =
		      %% Line 1746
		      call 'lists':'keysort'
			  (1, _cor6)
		  in  %% Line 1746
		      case call 'lists':'reverse'
			       (_cor8) of
			<[{W,PD}|Ws]> when 'true' ->
			    %% Line 1747
			    case PD of
			      <{'part_data',_cor28,_cor29,_cor30,NActions,S}> when 'true' ->
				  %% Line 1748
				  case <> of
				    %% Line 1749
				    <>
					when call 'erlang':'<'
					      (W,
					       8) ->
					%% Line 1750
					[]
				    %% Line 1751
				    <> when 'true' ->
					let <_cor21> =
					    %% Line 1753
					    ( letrec
						  'lc$^1'/1 =
						      fun (_cor15) ->
							  case _cor15 of
							    <[%% Line 1754
							      {W1,D = {'part_data',_cor31,_cor32,_cor33,_cor34,S0}}|_cor12]>
								when %% Line 1755
								  call 'erlang':'>'
								      (W1,
								       0) ->
								let <_cor14> =
								    %% Line 1756
								    call 'ordsets':'subtract'
									(S0, S)
								in  %% Line 1756
								    ( case <> of
									<>
									    when call 'erlang':'=/='
										  (_cor14,
										   []) ->
									    let <_cor18> =
										call 'erlang':'setelement'
										    (6, D, _cor14)
									    in  let <_cor19> =
										    apply 'lc$^1'/1
											(_cor12)
										in  ( [_cor18|_cor19]
										      -| ['compiler_generated'] )
									( <> when 'true' ->
									      apply 'lc$^1'/1
										  (_cor12)
									  -| ['compiler_generated'] )
								      end
								      -| ['list_comprehension'] )
							    ( <[_cor11|_cor12]> when 'true' ->
								  %% Line 1754
								  apply 'lc$^1'/1
								      (_cor12)
							      -| ['compiler_generated'] )
							    <[]> when 'true' ->
								[]
							    ( <_cor15> when 'true' ->
								  ( primop 'match_fail'
									({'function_clause',_cor15})
								    -| [{'function_name',{'lc$^1',1}}] )
							      -| ['compiler_generated'] )
							  end
					      in  apply 'lc$^1'/1
						      (%% Line 1754
						       Ws)
					      -| ['list_comprehension'] )
					in  %% Line 1757
					    case <> of
					      %% Line 1758
					      <>
						  when let <_cor24> =
							try
							    let <_cor23> =
								call 'erlang':'length'
								    (S)
							    in  call 'erlang':'=:='
								    (_cor23, 1)
							of <Try> ->
							    Try
							catch <T,R> ->
							    'false'
						    in  let <_cor25> =
							    call 'erlang':'=:='
								(NActions, 1)
							in  call 'erlang':'or'
								(_cor24, _cor25) ->
						  %% Line 1759
						  apply 'select_parts'/1
						      (_cor21)
					      %% Line 1760
					      <> when 'true' ->
						  let <_cor26> =
						      %% Line 1761
						      apply 'select_parts'/1
							  (_cor21)
						  in  %% Line 1761
						      [{W,PD}|_cor26]
					    end
				  end
			      ( <_cor10> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor10})
				-| ['compiler_generated'] )
			    end
			( <_cor9> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor9})
			  -| ['compiler_generated'] )
		      end
	end
'score'/1 =
    %% Line 1775
    fun (_cor0) ->
	case _cor0 of
	  <{'part_data',_cor17,[],_cor18,NActions,S}> when 'true' ->
	      let <_cor6> =
		  %% Line 1776
		  call 'erlang':'length'
		      (S)
	      in  let <_cor7> =
		      %% Line 1776
		      call 'erlang':'*'
			  (_cor6, NActions)
		  in  let <_cor8> =
			  %% Line 1776
			  call 'erlang':'*'
			      (_cor7, 28)
		      in  let <_cor3> =
			      %% Line 1776
			      call 'erlang':'*'
				  (NActions, 28)
			  in  let <_cor4> =
				  %% Line 1776
				  call 'erlang':'+'
				      (36, _cor3)
			      in  let <_cor1> =
				      %% Line 1776
				      call 'erlang':'length'
					  (S)
				  in  let <_cor2> =
					  %% Line 1776
					  call 'erlang':'*'
					      (_cor1, 8)
				      in  let <_cor5> =
					      %% Line 1776
					      call 'erlang':'+'
						  (_cor4, _cor2)
					  in  %% Line 1776
					      call 'erlang':'-'
						  (_cor8, _cor5)
	  %% Line 1777
	  <{'part_data',_cor19,_cor20,_cor21,NActions,S}> when 'true' ->
	      let <_cor12> =
		  %% Line 1778
		  call 'erlang':'length'
		      (S)
	      in  let <_cor13> =
		      %% Line 1778
		      call 'erlang':'-'
			  (_cor12, 1)
		  in  let <_cor14> =
			  %% Line 1778
			  call 'erlang':'*'
			      (_cor13, NActions)
		      in  let <_cor15> =
			      %% Line 1778
			      call 'erlang':'*'
				  (_cor14, 28)
			  in  let <_cor9> =
				  %% Line 1778
				  call 'erlang':'length'
				      (S)
			      in  let <_cor10> =
				      %% Line 1778
				      call 'erlang':'-'
					  (_cor9, 1)
				  in  let <_cor11> =
					  %% Line 1778
					  call 'erlang':'*'
					      (8, _cor10)
				      in  %% Line 1778
					  call 'erlang':'-'
					      (_cor15, _cor11)
	  ( <_cor16> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16})
		  -| [{'function_name',{'score',1}}] )
	    -| ['compiler_generated'] )
	end
'shift_actions_only'/1 =
    %% Line 1780
    fun (_cor0) ->
	let <_cor6> =
	    %% Line 1781
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor4) ->
			  case _cor4 of
			    <[{_X_Ts,{'shift',_cor9,_cor10,_cor11,_cor12}}|_cor3]> when 'true' ->
				let <_cor5> =
				    apply 'lc$^0'/1
					(_cor3)
				in  ( ['foo'|_cor5]
				      -| ['compiler_generated'] )
			    ( <[_cor2|_cor3]> when 'true' ->
				  apply 'lc$^0'/1
				      (_cor3)
			      -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor4> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor4})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (_cor0)
	      -| ['list_comprehension'] )
	in  let <_cor7> =
		%% Line 1781
		call 'erlang':'length'
		    (_cor6)
	    in  let <_cor1> =
		    %% Line 1781
		    call 'erlang':'length'
			(_cor0)
		in  %% Line 1781
		    call 'erlang':'=:='
			(_cor7, _cor1)
'collect_some_state_info'/2 =
    %% Line 1783
    fun (_cor1,_cor0) ->
	let <RF> =
	    %% Line 1784
	    ( fun (_cor3) ->
		  case _cor3 of
		    <{_X_LA,A}> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'is_record'
							       -| ['compiler_generated'] )
			      (A, 'reduce', 6)
			  -| ['compiler_generated'] )
		    ( <_cor4> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor4})
			    -| [{'function_name',{'-collect_some_state_info/2-fun-0-',1}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-collect_some_state_info/2-fun-0-'}}] )
	in  let <_cor19> =
		%% Line 1785
		( letrec
		      'lc$^0'/1 =
			  fun (_cor9) ->
			      case _cor9 of
				<[%% Line 1793
				  {{State,LaActions},{_cor23,Repr}}|_cor7]>
				    when call 'erlang':'=:='
					  (_cor23,
					   %% Line 1793
					   State) ->
				    let <RO> =
					%% Line 1787
					call 'lists':'all'
					    (RF, LaActions)
				    in  let <_cor16> =
					    %% Line 1789
					    ( letrec
						  'lc$^1'/1 =
						      fun (_cor13) ->
							  case _cor13 of
							    <[%% Line 1790
							      'true'|_cor12]>
								when %% Line 1790
								  call 'erlang':'=/='
								      (Repr,
								       State) ->
								let <_cor14> =
								    call 'io_lib':'fwrite'
									(#{#<32>(8,1,'integer',['unsigned'|['big']]),
									   #<37>(8,1,'integer',['unsigned'|['big']]),
									   #<37>(8,1,'integer',['unsigned'|['big']]),
									   #<32>(8,1,'integer',['unsigned'|['big']]),
									   #<126>(8,1,'integer',['unsigned'|['big']]),
									   #<119>(8,1,'integer',['unsigned'|['big']]),
									   #<10>(8,1,'integer',['unsigned'|['big']])}#, [State|[]])
								in  let <_cor15> =
									%% Line 1790
									apply 'lc$^1'/1
									    (_cor12)
								    in  ( [_cor14|_cor15]
									  -| ['compiler_generated'] )
							    ( <[_cor11|_cor12]> when 'true' ->
								  %% Line 1790
								  apply 'lc$^1'/1
								      (_cor12)
							      -| ['compiler_generated'] )
							    <[]> when 'true' ->
								[]
							    ( <_cor13> when 'true' ->
								  ( primop 'match_fail'
									({'function_clause',_cor13})
								    -| [{'function_name',{'lc$^1',1}}] )
							      -| ['compiler_generated'] )
							  end
					      in  apply 'lc$^1'/1
						      (%% Line 1790
						       [RO|[]])
					      -| ['list_comprehension'] )
					in  let <_cor18> =
						%% Line 1793
						apply 'lc$^0'/1
						    (_cor7)
					    in  ( [{State,%% Line 1791
							  {'state_info',RO,Repr,_cor16}}|_cor18]
						  -| ['compiler_generated'] )
				( <[_cor6|_cor7]> when 'true' ->
				      %% Line 1793
				      apply 'lc$^0'/1
					  (_cor7)
				  -| ['compiler_generated'] )
				<[]> when 'true' ->
				    []
				( <_cor9> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_cor9})
					-| [{'function_name',{'lc$^0',1}}] )
				  -| ['compiler_generated'] )
			      end
		  in  let <_cor8> =
			  %% Line 1794
			  call 'lists':'zip'
			      (_cor1, _cor0)
		      in  apply 'lc$^0'/1
			      (_cor8)
		  -| ['list_comprehension'] )
	    in  %% Line 1795
		call 'erlang':'list_to_tuple'
		    (_cor19)
'conflict_error'/2 =
    %% Line 1797
    fun (_cor1,_cor0) ->
	let <St1> =
	    %% Line 1798
	    apply 'add_conflict'/2
		(_cor1, _cor0)
	in  %% Line 1799
	    apply 'add_error'/2
		({'conflict',_cor1}, St1)
'report_conflict'/4 =
    %% Line 1801
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1802
	case <> of
	  %% Line 1803
	  <>
	      when ( try
		      ( case <> of
			  ( <>
				when ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'is_record'
									 -| ['compiler_generated'] )
					(_cor2,
					 ( 'yecc'
					   -| ['compiler_generated'] ),
					 ( 38
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] ) ->
				let <_cor8> =
				    ( call 'erlang':'element'
					  (9, _cor2)
				      -| ['compiler_generated'] )
				in  ( call 'erlang':'=:='
					  (_cor8, 'true')
				      -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				'false'
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		  of <Try> ->
		      Try
		  catch <T,R> ->
		      'false'
		  -| ['compiler_generated'] ) ->
	      let <_cor10> =
		  %% Line 1804
		  apply 'format_conflict'/1
		      (_cor3)
	      in  do  %% Line 1804
		      call 'io':'fwrite'
			  (#{#<126>(8,1,'integer',['unsigned'|['big']]),
			     #<115>(8,1,'integer',['unsigned'|['big']]),
			     #<10>(8,1,'integer',['unsigned'|['big']])}#, [_cor10|[]])
		      let <Formated> =
			  %% Line 1805
			  apply 'format_symbol'/1
			      (_cor1)
		      in  %% Line 1806
			  case _cor0 of
			    %% Line 1807
			    <'prec'> when 'true' ->
				%% Line 1808
				call 'io':'fwrite'
				    (#{#<82>(8,1,'integer',['unsigned'|['big']]),
				       #<101>(8,1,'integer',['unsigned'|['big']]),
				       #<115>(8,1,'integer',['unsigned'|['big']]),
				       #<111>(8,1,'integer',['unsigned'|['big']]),
				       #<108>(8,1,'integer',['unsigned'|['big']]),
				       #<118>(8,1,'integer',['unsigned'|['big']]),
				       #<101>(8,1,'integer',['unsigned'|['big']]),
				       #<100>(8,1,'integer',['unsigned'|['big']]),
				       #<32>(8,1,'integer',['unsigned'|['big']]),
				       #<105>(8,1,'integer',['unsigned'|['big']]),
				       #<110>(8,1,'integer',['unsigned'|['big']]),
				       #<32>(8,1,'integer',['unsigned'|['big']]),
				       #<102>(8,1,'integer',['unsigned'|['big']]),
				       #<97>(8,1,'integer',['unsigned'|['big']]),
				       #<118>(8,1,'integer',['unsigned'|['big']]),
				       #<111>(8,1,'integer',['unsigned'|['big']]),
				       #<114>(8,1,'integer',['unsigned'|['big']]),
				       #<32>(8,1,'integer',['unsigned'|['big']]),
				       #<111>(8,1,'integer',['unsigned'|['big']]),
				       #<102>(8,1,'integer',['unsigned'|['big']]),
				       #<32>(8,1,'integer',['unsigned'|['big']]),
				       #<126>(8,1,'integer',['unsigned'|['big']]),
				       #<115>(8,1,'integer',['unsigned'|['big']]),
				       #<46>(8,1,'integer',['unsigned'|['big']]),
				       #<10>(8,1,'integer',['unsigned'|['big']]),
				       #<10>(8,1,'integer',['unsigned'|['big']])}#, [Formated|[]])
			    %% Line 1809
			    <'default'> when 'true' ->
				%% Line 1810
				call 'io':'fwrite'
				    (#{#<67>(8,1,'integer',['unsigned'|['big']]),
				       #<111>(8,1,'integer',['unsigned'|['big']]),
				       #<110>(8,1,'integer',['unsigned'|['big']]),
				       #<102>(8,1,'integer',['unsigned'|['big']]),
				       #<108>(8,1,'integer',['unsigned'|['big']]),
				       #<105>(8,1,'integer',['unsigned'|['big']]),
				       #<99>(8,1,'integer',['unsigned'|['big']]),
				       #<116>(8,1,'integer',['unsigned'|['big']]),
				       #<32>(8,1,'integer',['unsigned'|['big']]),
				       #<114>(8,1,'integer',['unsigned'|['big']]),
				       #<101>(8,1,'integer',['unsigned'|['big']]),
				       #<115>(8,1,'integer',['unsigned'|['big']]),
				       #<111>(8,1,'integer',['unsigned'|['big']]),
				       #<108>(8,1,'integer',['unsigned'|['big']]),
				       #<118>(8,1,'integer',['unsigned'|['big']]),
				       #<101>(8,1,'integer',['unsigned'|['big']]),
				       #<100>(8,1,'integer',['unsigned'|['big']]),
				       #<32>(8,1,'integer',['unsigned'|['big']]),
				       #<105>(8,1,'integer',['unsigned'|['big']]),
				       #<110>(8,1,'integer',['unsigned'|['big']]),
				       #<32>(8,1,'integer',['unsigned'|['big']]),
				       #<102>(8,1,'integer',['unsigned'|['big']]),
				       #<97>(8,1,'integer',['unsigned'|['big']]),
				       #<118>(8,1,'integer',['unsigned'|['big']]),
				       #<111>(8,1,'integer',['unsigned'|['big']]),
				       #<114>(8,1,'integer',['unsigned'|['big']]),
				       #<32>(8,1,'integer',['unsigned'|['big']]),
				       #<111>(8,1,'integer',['unsigned'|['big']]),
				       #<102>(8,1,'integer',['unsigned'|['big']]),
				       #<32>(8,1,'integer',['unsigned'|['big']]),
				       #<126>(8,1,'integer',['unsigned'|['big']]),
				       #<115>(8,1,'integer',['unsigned'|['big']]),
				       #<46>(8,1,'integer',['unsigned'|['big']]),
				       #<10>(8,1,'integer',['unsigned'|['big']]),
				       #<10>(8,1,'integer',['unsigned'|['big']])}#, %% Line 1811
										    [Formated|[]])
			    ( <_cor12> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor12})
			      -| ['compiler_generated'] )
			  end
	  %% Line 1813
	  <> when 'true' ->
	      %% Line 1814
	      'ok'
	end
'add_conflict'/2 =
    %% Line 1817
    fun (_cor1,_cor0) ->
	%% Line 1818
	case _cor1 of
	  %% Line 1819
	  <{Symbol,StateN,_cor20,{'reduce',_cor21,_cor22,_cor23}}> when 'true' ->
	      %% Line 1820
	      ( case _cor0 of
		  ( <( {'yecc',_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_rec154,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_rec152> =
			    [{StateN,Symbol}|_rec154]
			in  call 'erlang':'setelement'
				(15, _cor0, _rec152)
		    -| ['compiler_generated'] )
		  ( <_cor60> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','yecc'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1821
	  <{Symbol,StateN,_cor99,{'accept',_cor100}}> when 'true' ->
	      %% Line 1822
	      ( case _cor0 of
		  ( <( {'yecc',_cor101,_cor102,_cor103,_cor104,_cor105,_cor106,_cor107,_cor108,_cor109,_cor110,_cor111,_cor112,_cor113,_rec157,_cor114,_cor115,_cor116,_cor117,_cor118,_cor119,_cor120,_cor121,_cor122,_cor123,_cor124,_cor125,_cor126,_cor127,_cor128,_cor129,_cor130,_cor131,_cor132,_cor133,_cor134,_cor135,_cor136}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_rec155> =
			    [{StateN,Symbol}|_rec157]
			in  call 'erlang':'setelement'
				(15, _cor0, _rec155)
		    -| ['compiler_generated'] )
		  ( <_cor137> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','yecc'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1823
	  <{Symbol,StateN,_cor176,{'shift',_cor177,_cor178}}> when 'true' ->
	      %% Line 1824
	      ( case _cor0 of
		  ( <( {'yecc',_cor179,_cor180,_cor181,_cor182,_cor183,_cor184,_cor185,_cor186,_cor187,_cor188,_cor189,_cor190,_rec160,_cor191,_cor192,_cor193,_cor194,_cor195,_cor196,_cor197,_cor198,_cor199,_cor200,_cor201,_cor202,_cor203,_cor204,_cor205,_cor206,_cor207,_cor208,_cor209,_cor210,_cor211,_cor212,_cor213,_cor214}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_rec158> =
			    [{StateN,Symbol}|_rec160]
			in  call 'erlang':'setelement'
				(14, _cor0, _rec158)
		    -| ['compiler_generated'] )
		  ( <_cor215> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','yecc'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1825
	  <{_X_Symbol,_X_StateN,{'one_level_up',_cor254,_cor255},_X_Confl}> when 'true' ->
	      _cor0
	  ( <_cor17> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor17})
	    -| ['compiler_generated'] )
	end
'conflict'/3 =
    %% Line 1829
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'shift',_cor19,_cor20,Prec1,RuleNmbr1},%% Line 1830
						   {'shift',_cor21,_cor22,Prec2,RuleNmbr2},%% Line 1830
											   Cxt> when 'true' ->
	      %% Line 1832
	      case Cxt of
		<{'cxt',Symbol,N,St,_cor23}> when 'true' ->
		    %% Line 1833
		    case apply 'rule'/2
			     (RuleNmbr1, St) of
		      <{_cor24,L1,RuleN1}> when 'true' ->
			  %% Line 1834
			  case apply 'rule'/2
				   (RuleNmbr2, St) of
			    <{_cor25,L2,RuleN2}> when 'true' ->
				let <Confl> = {%% Line 1835
				     'one_level_up',%% Line 1835
						    {L1,RuleN1,Prec1},%% Line 1835
								      {L2,RuleN2,Prec2}}
				in  %% Line 1836
				    {Symbol,N,Confl,Confl}
			    ( <_cor5> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor5})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1837
	  <{'reduce',RuleNmbr1,_cor26,_cor27,_cor28,_cor29},NewAction,Cxt> when 'true' ->
	      %% Line 1838
	      case Cxt of
		<{'cxt',Symbol,N,St,_cor30}> when 'true' ->
		    %% Line 1839
		    case apply 'rule'/2
			     (RuleNmbr1, St) of
		      <{R1,RuleLine1,RuleN1}> when 'true' ->
			  let <_cor14> =
			      %% Line 1840
			      case NewAction of
				%% Line 1841
				<'accept'> when 'true' ->
				    %% Line 1842
				    ( case St of
					( <( {'yecc',_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_rec161,_cor62,_cor63,_cor64,_cor65,_cor66}
					     -| ['compiler_generated'] )> when 'true' ->
					      {'accept',_rec161}
					  -| ['compiler_generated'] )
					( <_cor67> when 'true' ->
					      ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'error'
										     -| ['compiler_generated'] )
						    (( {'badrecord','yecc'}
						       -| ['compiler_generated'] ))
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				      end
				      -| ['compiler_generated'] )
				%% Line 1843
				<{'reduce',RuleNmbr2,_cor68,_cor69,_cor70,_cor71}> when 'true' ->
				    %% Line 1844
				    case apply 'rule'/2
					     (RuleNmbr2, St) of
				      <{R2,RuleLine2,RuleN2}> when 'true' ->
					  %% Line 1845
					  {'reduce',R2,RuleN2,RuleLine2}
				      ( <_cor11> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_cor11})
					-| ['compiler_generated'] )
				    end
				%% Line 1846
				<{'shift',NewState,_cor72,_cor73,_cor74}> when 'true' ->
				    let <_cor12> =
					%% Line 1847
					call 'lists':'last'
					    (R1)
				    in  %% Line 1847
					{'shift',NewState,_cor12}
				( <_cor13> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor13})
				  -| ['compiler_generated'] )
			      end
			  in  %% Line 1849
			      {Symbol,N,{R1,RuleN1,RuleLine1},_cor14}
		      ( <_cor8> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor8})
			-| ['compiler_generated'] )
		    end
		( <_cor7> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor7})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor18,_cor17,_cor16> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor18,_cor17,_cor16})
		  -| [{'function_name',{'conflict',3}}] )
	    -| ['compiler_generated'] )
	end
'format_conflict'/1 =
    %% Line 1851
    fun (_cor0) ->
	case _cor0 of
	  <{Symbol,N,_cor22,{'one_level_up',%% Line 1852
					    {L1,RuleN1,{P1,Ass1}},%% Line 1853
								  {L2,RuleN2,{P2,Ass2}}}}> when 'true' ->
	      let <_cor1> =
		  %% Line 1856
		  apply 'format_symbol'/1
		      (Symbol)
	      in  let <S1> =
		      %% Line 1854
		      call 'io_lib':'fwrite'
			  (#{#<67>(8,1,'integer',['unsigned'|['big']]),
			     #<111>(8,1,'integer',['unsigned'|['big']]),
			     #<110>(8,1,'integer',['unsigned'|['big']]),
			     #<102>(8,1,'integer',['unsigned'|['big']]),
			     #<108>(8,1,'integer',['unsigned'|['big']]),
			     #<105>(8,1,'integer',['unsigned'|['big']]),
			     #<99>(8,1,'integer',['unsigned'|['big']]),
			     #<116>(8,1,'integer',['unsigned'|['big']]),
			     #<105>(8,1,'integer',['unsigned'|['big']]),
			     #<110>(8,1,'integer',['unsigned'|['big']]),
			     #<103>(8,1,'integer',['unsigned'|['big']]),
			     #<32>(8,1,'integer',['unsigned'|['big']]),
			     #<112>(8,1,'integer',['unsigned'|['big']]),
			     #<114>(8,1,'integer',['unsigned'|['big']]),
			     #<101>(8,1,'integer',['unsigned'|['big']]),
			     #<99>(8,1,'integer',['unsigned'|['big']]),
			     #<101>(8,1,'integer',['unsigned'|['big']]),
			     #<100>(8,1,'integer',['unsigned'|['big']]),
			     #<101>(8,1,'integer',['unsigned'|['big']]),
			     #<110>(8,1,'integer',['unsigned'|['big']]),
			     #<99>(8,1,'integer',['unsigned'|['big']]),
			     #<101>(8,1,'integer',['unsigned'|['big']]),
			     #<115>(8,1,'integer',['unsigned'|['big']]),
			     #<32>(8,1,'integer',['unsigned'|['big']]),
			     #<111>(8,1,'integer',['unsigned'|['big']]),
			     #<102>(8,1,'integer',['unsigned'|['big']]),
			     #<32>(8,1,'integer',['unsigned'|['big']]),
			     #<115>(8,1,'integer',['unsigned'|['big']]),
			     #<121>(8,1,'integer',['unsigned'|['big']]),
			     #<109>(8,1,'integer',['unsigned'|['big']]),
			     #<98>(8,1,'integer',['unsigned'|['big']]),
			     #<111>(8,1,'integer',['unsigned'|['big']]),
			     #<108>(8,1,'integer',['unsigned'|['big']]),
			     #<115>(8,1,'integer',['unsigned'|['big']]),
			     #<32>(8,1,'integer',['unsigned'|['big']]),
			     #<119>(8,1,'integer',['unsigned'|['big']]),
			     #<104>(8,1,'integer',['unsigned'|['big']]),
			     #<101>(8,1,'integer',['unsigned'|['big']]),
			     #<110>(8,1,'integer',['unsigned'|['big']]),
			     #<32>(8,1,'integer',['unsigned'|['big']]),
			     #<115>(8,1,'integer',['unsigned'|['big']]),
			     #<99>(8,1,'integer',['unsigned'|['big']]),
			     #<97>(8,1,'integer',['unsigned'|['big']]),
			     #<110>(8,1,'integer',['unsigned'|['big']]),
			     #<110>(8,1,'integer',['unsigned'|['big']]),
			     #<105>(8,1,'integer',['unsigned'|['big']]),
			     #<110>(8,1,'integer',['unsigned'|['big']]),
			     #<103>(8,1,'integer',['unsigned'|['big']]),
			     #<32>(8,1,'integer',['unsigned'|['big']]),
			     #<126>(8,1,'integer',['unsigned'|['big']]),
			     #<115>(8,1,'integer',['unsigned'|['big']]),
			     #<32>(8,1,'integer',['unsigned'|['big']]),
			     #<105>(8,1,'integer',['unsigned'|['big']]),
			     #<110>(8,1,'integer',['unsigned'|['big']]),
			     #<32>(8,1,'integer',['unsigned'|['big']]),
			     #<115>(8,1,'integer',['unsigned'|['big']]),
			     #<116>(8,1,'integer',['unsigned'|['big']]),
			     #<97>(8,1,'integer',['unsigned'|['big']]),
			     #<116>(8,1,'integer',['unsigned'|['big']]),
			     #<101>(8,1,'integer',['unsigned'|['big']]),
			     #<32>(8,1,'integer',['unsigned'|['big']]),
			     #<126>(8,1,'integer',['unsigned'|['big']]),
			     #<119>(8,1,'integer',['unsigned'|['big']]),
			     #<58>(8,1,'integer',['unsigned'|['big']]),
			     #<10>(8,1,'integer',['unsigned'|['big']])}#, %% Line 1856
									  [_cor1|[N|[]]])
		  in  let <_cor3> =
			  %% Line 1859
			  apply 'format_assoc'/1
			      (Ass1)
		      in  let <S2> =
			      %% Line 1857
			      call 'io_lib':'fwrite'
				  (#{#<32>(8,1,'integer',['unsigned'|['big']]),
				     #<32>(8,1,'integer',['unsigned'|['big']]),
				     #<32>(8,1,'integer',['unsigned'|['big']]),
				     #<126>(8,1,'integer',['unsigned'|['big']]),
				     #<115>(8,1,'integer',['unsigned'|['big']]),
				     #<32>(8,1,'integer',['unsigned'|['big']]),
				     #<126>(8,1,'integer',['unsigned'|['big']]),
				     #<119>(8,1,'integer',['unsigned'|['big']]),
				     #<32>(8,1,'integer',['unsigned'|['big']]),
				     #<40>(8,1,'integer',['unsigned'|['big']]),
				     #<114>(8,1,'integer',['unsigned'|['big']]),
				     #<117>(8,1,'integer',['unsigned'|['big']]),
				     #<108>(8,1,'integer',['unsigned'|['big']]),
				     #<101>(8,1,'integer',['unsigned'|['big']]),
				     #<32>(8,1,'integer',['unsigned'|['big']]),
				     #<126>(8,1,'integer',['unsigned'|['big']]),
				     #<119>(8,1,'integer',['unsigned'|['big']]),
				     #<32>(8,1,'integer',['unsigned'|['big']]),
				     #<97>(8,1,'integer',['unsigned'|['big']]),
				     #<116>(8,1,'integer',['unsigned'|['big']]),
				     #<32>(8,1,'integer',['unsigned'|['big']]),
				     #<108>(8,1,'integer',['unsigned'|['big']]),
				     #<105>(8,1,'integer',['unsigned'|['big']]),
				     #<110>(8,1,'integer',['unsigned'|['big']]),
				     #<101>(8,1,'integer',['unsigned'|['big']]),
				     #<32>(8,1,'integer',['unsigned'|['big']]),
				     #<126>(8,1,'integer',['unsigned'|['big']]),
				     #<119>(8,1,'integer',['unsigned'|['big']]),
				     #<41>(8,1,'integer',['unsigned'|['big']]),
				     #<10>(8,1,'integer',['unsigned'|['big']]),
				     #<32>(8,1,'integer',['unsigned'|['big']]),
				     #<32>(8,1,'integer',['unsigned'|['big']]),
				     #<32>(8,1,'integer',['unsigned'|['big']]),
				     #<32>(8,1,'integer',['unsigned'|['big']]),
				     #<32>(8,1,'integer',['unsigned'|['big']]),
				     #<32>(8,1,'integer',['unsigned'|['big']]),
				     #<118>(8,1,'integer',['unsigned'|['big']]),
				     #<115>(8,1,'integer',['unsigned'|['big']]),
				     #<46>(8,1,'integer',['unsigned'|['big']]),
				     #<10>(8,1,'integer',['unsigned'|['big']])}#, %% Line 1859
										  [_cor3|[P1|[RuleN1|[L1|[]]]]])
			  in  let <_cor5> =
				  %% Line 1861
				  apply 'format_assoc'/1
				      (Ass2)
			      in  let <S3> =
				      %% Line 1860
				      call 'io_lib':'fwrite'
					  (#{#<32>(8,1,'integer',['unsigned'|['big']]),
					     #<32>(8,1,'integer',['unsigned'|['big']]),
					     #<32>(8,1,'integer',['unsigned'|['big']]),
					     #<126>(8,1,'integer',['unsigned'|['big']]),
					     #<115>(8,1,'integer',['unsigned'|['big']]),
					     #<32>(8,1,'integer',['unsigned'|['big']]),
					     #<126>(8,1,'integer',['unsigned'|['big']]),
					     #<119>(8,1,'integer',['unsigned'|['big']]),
					     #<32>(8,1,'integer',['unsigned'|['big']]),
					     #<40>(8,1,'integer',['unsigned'|['big']]),
					     #<114>(8,1,'integer',['unsigned'|['big']]),
					     #<117>(8,1,'integer',['unsigned'|['big']]),
					     #<108>(8,1,'integer',['unsigned'|['big']]),
					     #<101>(8,1,'integer',['unsigned'|['big']]),
					     #<32>(8,1,'integer',['unsigned'|['big']]),
					     #<126>(8,1,'integer',['unsigned'|['big']]),
					     #<119>(8,1,'integer',['unsigned'|['big']]),
					     #<32>(8,1,'integer',['unsigned'|['big']]),
					     #<97>(8,1,'integer',['unsigned'|['big']]),
					     #<116>(8,1,'integer',['unsigned'|['big']]),
					     #<32>(8,1,'integer',['unsigned'|['big']]),
					     #<108>(8,1,'integer',['unsigned'|['big']]),
					     #<105>(8,1,'integer',['unsigned'|['big']]),
					     #<110>(8,1,'integer',['unsigned'|['big']]),
					     #<101>(8,1,'integer',['unsigned'|['big']]),
					     #<32>(8,1,'integer',['unsigned'|['big']]),
					     #<126>(8,1,'integer',['unsigned'|['big']]),
					     #<119>(8,1,'integer',['unsigned'|['big']]),
					     #<41>(8,1,'integer',['unsigned'|['big']]),
					     #<10>(8,1,'integer',['unsigned'|['big']])}#, %% Line 1861
											  [_cor5|[P2|[RuleN2|[L2|[]]]]])
				  in  %% Line 1862
				      [S1|[S2|[S3|[]]]]
	  %% Line 1863
	  <{Symbol,N,Reduce,Confl}> when 'true' ->
	      let <_cor7> =
		  %% Line 1865
		  apply 'format_symbol'/1
		      (Symbol)
	      in  let <S1> =
		      %% Line 1864
		      call 'io_lib':'fwrite'
			  (#{#<80>(8,1,'integer',['unsigned'|['big']]),
			     #<97>(8,1,'integer',['unsigned'|['big']]),
			     #<114>(8,1,'integer',['unsigned'|['big']]),
			     #<115>(8,1,'integer',['unsigned'|['big']]),
			     #<101>(8,1,'integer',['unsigned'|['big']]),
			     #<32>(8,1,'integer',['unsigned'|['big']]),
			     #<97>(8,1,'integer',['unsigned'|['big']]),
			     #<99>(8,1,'integer',['unsigned'|['big']]),
			     #<116>(8,1,'integer',['unsigned'|['big']]),
			     #<105>(8,1,'integer',['unsigned'|['big']]),
			     #<111>(8,1,'integer',['unsigned'|['big']]),
			     #<110>(8,1,'integer',['unsigned'|['big']]),
			     #<32>(8,1,'integer',['unsigned'|['big']]),
			     #<99>(8,1,'integer',['unsigned'|['big']]),
			     #<111>(8,1,'integer',['unsigned'|['big']]),
			     #<110>(8,1,'integer',['unsigned'|['big']]),
			     #<102>(8,1,'integer',['unsigned'|['big']]),
			     #<108>(8,1,'integer',['unsigned'|['big']]),
			     #<105>(8,1,'integer',['unsigned'|['big']]),
			     #<99>(8,1,'integer',['unsigned'|['big']]),
			     #<116>(8,1,'integer',['unsigned'|['big']]),
			     #<32>(8,1,'integer',['unsigned'|['big']]),
			     #<115>(8,1,'integer',['unsigned'|['big']]),
			     #<99>(8,1,'integer',['unsigned'|['big']]),
			     #<97>(8,1,'integer',['unsigned'|['big']]),
			     #<110>(8,1,'integer',['unsigned'|['big']]),
			     #<110>(8,1,'integer',['unsigned'|['big']]),
			     #<105>(8,1,'integer',['unsigned'|['big']]),
			     #<110>(8,1,'integer',['unsigned'|['big']]),
			     #<103>(8,1,'integer',['unsigned'|['big']]),
			     #<32>(8,1,'integer',['unsigned'|['big']]),
			     #<115>(8,1,'integer',['unsigned'|['big']]),
			     #<121>(8,1,'integer',['unsigned'|['big']]),
			     #<109>(8,1,'integer',['unsigned'|['big']]),
			     #<98>(8,1,'integer',['unsigned'|['big']]),
			     #<111>(8,1,'integer',['unsigned'|['big']]),
			     #<108>(8,1,'integer',['unsigned'|['big']]),
			     #<32>(8,1,'integer',['unsigned'|['big']]),
			     #<126>(8,1,'integer',['unsigned'|['big']]),
			     #<115>(8,1,'integer',['unsigned'|['big']]),
			     #<32>(8,1,'integer',['unsigned'|['big']]),
			     #<105>(8,1,'integer',['unsigned'|['big']]),
			     #<110>(8,1,'integer',['unsigned'|['big']]),
			     #<32>(8,1,'integer',['unsigned'|['big']]),
			     #<115>(8,1,'integer',['unsigned'|['big']]),
			     #<116>(8,1,'integer',['unsigned'|['big']]),
			     #<97>(8,1,'integer',['unsigned'|['big']]),
			     #<116>(8,1,'integer',['unsigned'|['big']]),
			     #<101>(8,1,'integer',['unsigned'|['big']]),
			     #<32>(8,1,'integer',['unsigned'|['big']]),
			     #<126>(8,1,'integer',['unsigned'|['big']]),
			     #<119>(8,1,'integer',['unsigned'|['big']]),
			     #<58>(8,1,'integer',['unsigned'|['big']]),
			     #<10>(8,1,'integer',['unsigned'|['big']])}#, %% Line 1865
									  [_cor7|[N|[]]])
		  in  %% Line 1866
		      case Reduce of
			%% Line 1867
			<{[HR|TR],RuleNmbr,RuleLine}> when 'true' ->
			    let <_cor9> =
				%% Line 1870
				apply 'format_symbol'/1
				    (HR)
			    in  let <_cor10> =
				    %% Line 1870
				    apply 'format_symbols'/1
					(TR)
				in  let <_cor12> =
					%% Line 1868
					call 'io_lib':'fwrite'
					    (#{#<32>(8,1,'integer',['unsigned'|['big']]),
					       #<32>(8,1,'integer',['unsigned'|['big']]),
					       #<32>(8,1,'integer',['unsigned'|['big']]),
					       #<82>(8,1,'integer',['unsigned'|['big']]),
					       #<101>(8,1,'integer',['unsigned'|['big']]),
					       #<100>(8,1,'integer',['unsigned'|['big']]),
					       #<117>(8,1,'integer',['unsigned'|['big']]),
					       #<99>(8,1,'integer',['unsigned'|['big']]),
					       #<101>(8,1,'integer',['unsigned'|['big']]),
					       #<32>(8,1,'integer',['unsigned'|['big']]),
					       #<116>(8,1,'integer',['unsigned'|['big']]),
					       #<111>(8,1,'integer',['unsigned'|['big']]),
					       #<32>(8,1,'integer',['unsigned'|['big']]),
					       #<126>(8,1,'integer',['unsigned'|['big']]),
					       #<115>(8,1,'integer',['unsigned'|['big']]),
					       #<32>(8,1,'integer',['unsigned'|['big']]),
					       #<102>(8,1,'integer',['unsigned'|['big']]),
					       #<114>(8,1,'integer',['unsigned'|['big']]),
					       #<111>(8,1,'integer',['unsigned'|['big']]),
					       #<109>(8,1,'integer',['unsigned'|['big']]),
					       #<32>(8,1,'integer',['unsigned'|['big']]),
					       #<126>(8,1,'integer',['unsigned'|['big']]),
					       #<115>(8,1,'integer',['unsigned'|['big']]),
					       #<32>(8,1,'integer',['unsigned'|['big']]),
					       #<40>(8,1,'integer',['unsigned'|['big']]),
					       #<114>(8,1,'integer',['unsigned'|['big']]),
					       #<117>(8,1,'integer',['unsigned'|['big']]),
					       #<108>(8,1,'integer',['unsigned'|['big']]),
					       #<101>(8,1,'integer',['unsigned'|['big']]),
					       #<32>(8,1,'integer',['unsigned'|['big']]),
					       #<126>(8,1,'integer',['unsigned'|['big']]),
					       #<119>(8,1,'integer',['unsigned'|['big']]),
					       #<32>(8,1,'integer',['unsigned'|['big']]),
					       #<97>(8,1,'integer',['unsigned'|['big']]),
					       #<116>(8,1,'integer',['unsigned'|['big']]),
					       #<32>(8,1,'integer',['unsigned'|['big']]),
					       #<108>(8,1,'integer',['unsigned'|['big']]),
					       #<105>(8,1,'integer',['unsigned'|['big']]),
					       #<110>(8,1,'integer',['unsigned'|['big']]),
					       #<101>(8,1,'integer',['unsigned'|['big']]),
					       #<32>(8,1,'integer',['unsigned'|['big']]),
					       #<126>(8,1,'integer',['unsigned'|['big']]),
					       #<119>(8,1,'integer',['unsigned'|['big']]),
					       #<41>(8,1,'integer',['unsigned'|['big']]),
					       #<10>(8,1,'integer',['unsigned'|['big']]),
					       #<32>(8,1,'integer',['unsigned'|['big']]),
					       #<32>(8,1,'integer',['unsigned'|['big']]),
					       #<32>(8,1,'integer',['unsigned'|['big']]),
					       #<32>(8,1,'integer',['unsigned'|['big']]),
					       #<32>(8,1,'integer',['unsigned'|['big']]),
					       #<32>(8,1,'integer',['unsigned'|['big']]),
					       #<118>(8,1,'integer',['unsigned'|['big']]),
					       #<115>(8,1,'integer',['unsigned'|['big']]),
					       #<46>(8,1,'integer',['unsigned'|['big']]),
					       #<10>(8,1,'integer',['unsigned'|['big']])}#, %% Line 1870
											    [_cor9|[_cor10|%% Line 1871
													   [RuleNmbr|[RuleLine|[]]]]])
				    in  let <_cor19> =
					    %% Line 1873
					    case Confl of
					      %% Line 1874
					      <{'reduce',[HR2|TR2],RuleNmbr2,RuleLine2}> when 'true' ->
						  let <_cor14> =
						      %% Line 1877
						      apply 'format_symbol'/1
							  (HR2)
						  in  let <_cor15> =
							  %% Line 1877
							  apply 'format_symbols'/1
							      (TR2)
						      in  %% Line 1875
							  call 'io_lib':'fwrite'
							      (#{#<32>(8,1,'integer',['unsigned'|['big']]),
								 #<32>(8,1,'integer',['unsigned'|['big']]),
								 #<32>(8,1,'integer',['unsigned'|['big']]),
								 #<114>(8,1,'integer',['unsigned'|['big']]),
								 #<101>(8,1,'integer',['unsigned'|['big']]),
								 #<100>(8,1,'integer',['unsigned'|['big']]),
								 #<117>(8,1,'integer',['unsigned'|['big']]),
								 #<99>(8,1,'integer',['unsigned'|['big']]),
								 #<101>(8,1,'integer',['unsigned'|['big']]),
								 #<32>(8,1,'integer',['unsigned'|['big']]),
								 #<116>(8,1,'integer',['unsigned'|['big']]),
								 #<111>(8,1,'integer',['unsigned'|['big']]),
								 #<32>(8,1,'integer',['unsigned'|['big']]),
								 #<126>(8,1,'integer',['unsigned'|['big']]),
								 #<115>(8,1,'integer',['unsigned'|['big']]),
								 #<32>(8,1,'integer',['unsigned'|['big']]),
								 #<102>(8,1,'integer',['unsigned'|['big']]),
								 #<114>(8,1,'integer',['unsigned'|['big']]),
								 #<111>(8,1,'integer',['unsigned'|['big']]),
								 #<109>(8,1,'integer',['unsigned'|['big']]),
								 #<32>(8,1,'integer',['unsigned'|['big']]),
								 #<126>(8,1,'integer',['unsigned'|['big']]),
								 #<115>(8,1,'integer',['unsigned'|['big']]),
								 #<32>(8,1,'integer',['unsigned'|['big']]),
								 #<40>(8,1,'integer',['unsigned'|['big']]),
								 #<114>(8,1,'integer',['unsigned'|['big']]),
								 #<117>(8,1,'integer',['unsigned'|['big']]),
								 #<108>(8,1,'integer',['unsigned'|['big']]),
								 #<101>(8,1,'integer',['unsigned'|['big']]),
								 #<32>(8,1,'integer',['unsigned'|['big']]),
								 #<126>(8,1,'integer',['unsigned'|['big']]),
								 #<119>(8,1,'integer',['unsigned'|['big']]),
								 #<32>(8,1,'integer',['unsigned'|['big']]),
								 #<97>(8,1,'integer',['unsigned'|['big']]),
								 #<116>(8,1,'integer',['unsigned'|['big']]),
								 #<32>(8,1,'integer',['unsigned'|['big']]),
								 #<108>(8,1,'integer',['unsigned'|['big']]),
								 #<105>(8,1,'integer',['unsigned'|['big']]),
								 #<110>(8,1,'integer',['unsigned'|['big']]),
								 #<101>(8,1,'integer',['unsigned'|['big']]),
								 #<32>(8,1,'integer',['unsigned'|['big']]),
								 #<126>(8,1,'integer',['unsigned'|['big']]),
								 #<119>(8,1,'integer',['unsigned'|['big']]),
								 #<41>(8,1,'integer',['unsigned'|['big']]),
								 #<46>(8,1,'integer',['unsigned'|['big']])}#, %% Line 1877
													      [_cor14|[_cor15|%% Line 1878
															      [RuleNmbr2|[RuleLine2|[]]]]])
					      %% Line 1879
					      <{'shift',NewState,Sym}> when 'true' ->
						  let <_cor16> =
						      %% Line 1882
						      apply 'format_symbol'/1
							  (Sym)
						  in  %% Line 1880
						      call 'io_lib':'fwrite'
							  (#{#<32>(8,1,'integer',['unsigned'|['big']]),
							     #<32>(8,1,'integer',['unsigned'|['big']]),
							     #<32>(8,1,'integer',['unsigned'|['big']]),
							     #<115>(8,1,'integer',['unsigned'|['big']]),
							     #<104>(8,1,'integer',['unsigned'|['big']]),
							     #<105>(8,1,'integer',['unsigned'|['big']]),
							     #<102>(8,1,'integer',['unsigned'|['big']]),
							     #<116>(8,1,'integer',['unsigned'|['big']]),
							     #<32>(8,1,'integer',['unsigned'|['big']]),
							     #<116>(8,1,'integer',['unsigned'|['big']]),
							     #<111>(8,1,'integer',['unsigned'|['big']]),
							     #<32>(8,1,'integer',['unsigned'|['big']]),
							     #<115>(8,1,'integer',['unsigned'|['big']]),
							     #<116>(8,1,'integer',['unsigned'|['big']]),
							     #<97>(8,1,'integer',['unsigned'|['big']]),
							     #<116>(8,1,'integer',['unsigned'|['big']]),
							     #<101>(8,1,'integer',['unsigned'|['big']]),
							     #<32>(8,1,'integer',['unsigned'|['big']]),
							     #<126>(8,1,'integer',['unsigned'|['big']]),
							     #<119>(8,1,'integer',['unsigned'|['big']]),
							     #<44>(8,1,'integer',['unsigned'|['big']]),
							     #<32>(8,1,'integer',['unsigned'|['big']]),
							     #<97>(8,1,'integer',['unsigned'|['big']]),
							     #<100>(8,1,'integer',['unsigned'|['big']]),
							     #<100>(8,1,'integer',['unsigned'|['big']]),
							     #<105>(8,1,'integer',['unsigned'|['big']]),
							     #<110>(8,1,'integer',['unsigned'|['big']]),
							     #<103>(8,1,'integer',['unsigned'|['big']]),
							     #<32>(8,1,'integer',['unsigned'|['big']]),
							     #<114>(8,1,'integer',['unsigned'|['big']]),
							     #<105>(8,1,'integer',['unsigned'|['big']]),
							     #<103>(8,1,'integer',['unsigned'|['big']]),
							     #<104>(8,1,'integer',['unsigned'|['big']]),
							     #<116>(8,1,'integer',['unsigned'|['big']]),
							     #<32>(8,1,'integer',['unsigned'|['big']]),
							     #<115>(8,1,'integer',['unsigned'|['big']]),
							     #<105>(8,1,'integer',['unsigned'|['big']]),
							     #<115>(8,1,'integer',['unsigned'|['big']]),
							     #<116>(8,1,'integer',['unsigned'|['big']]),
							     #<101>(8,1,'integer',['unsigned'|['big']]),
							     #<114>(8,1,'integer',['unsigned'|['big']]),
							     #<115>(8,1,'integer',['unsigned'|['big']]),
							     #<32>(8,1,'integer',['unsigned'|['big']]),
							     #<116>(8,1,'integer',['unsigned'|['big']]),
							     #<111>(8,1,'integer',['unsigned'|['big']]),
							     #<32>(8,1,'integer',['unsigned'|['big']]),
							     #<126>(8,1,'integer',['unsigned'|['big']]),
							     #<115>(8,1,'integer',['unsigned'|['big']]),
							     #<46>(8,1,'integer',['unsigned'|['big']])}#, %% Line 1882
													  [NewState|[_cor16|[]]])
					      %% Line 1883
					      <{'accept',Rootsymbol}> when 'true' ->
						  let <_cor17> =
						      %% Line 1885
						      apply 'format_symbol'/1
							  (Rootsymbol)
						  in  %% Line 1884
						      call 'io_lib':'fwrite'
							  (#{#<32>(8,1,'integer',['unsigned'|['big']]),
							     #<32>(8,1,'integer',['unsigned'|['big']]),
							     #<32>(8,1,'integer',['unsigned'|['big']]),
							     #<114>(8,1,'integer',['unsigned'|['big']]),
							     #<101>(8,1,'integer',['unsigned'|['big']]),
							     #<100>(8,1,'integer',['unsigned'|['big']]),
							     #<117>(8,1,'integer',['unsigned'|['big']]),
							     #<99>(8,1,'integer',['unsigned'|['big']]),
							     #<101>(8,1,'integer',['unsigned'|['big']]),
							     #<32>(8,1,'integer',['unsigned'|['big']]),
							     #<116>(8,1,'integer',['unsigned'|['big']]),
							     #<111>(8,1,'integer',['unsigned'|['big']]),
							     #<32>(8,1,'integer',['unsigned'|['big']]),
							     #<114>(8,1,'integer',['unsigned'|['big']]),
							     #<111>(8,1,'integer',['unsigned'|['big']]),
							     #<111>(8,1,'integer',['unsigned'|['big']]),
							     #<116>(8,1,'integer',['unsigned'|['big']]),
							     #<115>(8,1,'integer',['unsigned'|['big']]),
							     #<121>(8,1,'integer',['unsigned'|['big']]),
							     #<109>(8,1,'integer',['unsigned'|['big']]),
							     #<98>(8,1,'integer',['unsigned'|['big']]),
							     #<111>(8,1,'integer',['unsigned'|['big']]),
							     #<108>(8,1,'integer',['unsigned'|['big']]),
							     #<32>(8,1,'integer',['unsigned'|['big']]),
							     #<126>(8,1,'integer',['unsigned'|['big']]),
							     #<115>(8,1,'integer',['unsigned'|['big']]),
							     #<46>(8,1,'integer',['unsigned'|['big']])}#, %% Line 1885
													  [_cor17|[]])
					      ( <_cor18> when 'true' ->
						    primop 'match_fail'
							({'case_clause',_cor18})
						-| ['compiler_generated'] )
					    end
					in  %% Line 1887
					    [S1|[_cor12|[_cor19|[]]]]
			( <_cor11> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor11})
			  -| ['compiler_generated'] )
		      end
	  ( <_cor21> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor21})
		  -| [{'function_name',{'format_conflict',1}}] )
	    -| ['compiler_generated'] )
	end
'output_prelude'/3 =
    %% Line 1929
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Outport,Inport,St0 = {'yecc',_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,_cor69,_cor70,_cor71,_cor72,_cor73,_cor74,_cor75,_cor76,_cor77,_cor78,_cor79,_cor80,_cor81}>
	      when call 'erlang':'=:='
		    (_cor47,
		     []) ->
	      let <St5> =
		  %% Line 1930
		  apply 'output_header'/1
		      (St0)
	      in  %% Line 1931
		  case St5 of
		    <{'yecc',Infile,_cor82,_cor83,_cor84,Module,_cor85,_cor86,_cor87,_cor88,_cor89,_cor90,_cor91,_cor92,_cor93,_cor94,_cor95,_cor96,_cor97,_cor98,_cor99,_cor100,_cor101,_cor102,_cor103,_cor104,_cor105,_cor106,_cor107,_cor108,_cor109,_cor110,_cor111,_cor112,_cor113,_cor114,_cor115,_cor116}> when 'true' ->
			let <St10> =
			    %% Line 1932
			    apply 'fwrite'/3
				(St5, #{#<45>(8,1,'integer',['unsigned'|['big']]),
					#<109>(8,1,'integer',['unsigned'|['big']]),
					#<111>(8,1,'integer',['unsigned'|['big']]),
					#<100>(8,1,'integer',['unsigned'|['big']]),
					#<117>(8,1,'integer',['unsigned'|['big']]),
					#<108>(8,1,'integer',['unsigned'|['big']]),
					#<101>(8,1,'integer',['unsigned'|['big']]),
					#<40>(8,1,'integer',['unsigned'|['big']]),
					#<126>(8,1,'integer',['unsigned'|['big']]),
					#<119>(8,1,'integer',['unsigned'|['big']]),
					#<41>(8,1,'integer',['unsigned'|['big']]),
					#<46>(8,1,'integer',['unsigned'|['big']]),
					#<10>(8,1,'integer',['unsigned'|['big']])}#, [Module|[]])
			in  let <St20> =
				%% Line 1934
				apply 'fwrite'/3
				    (St10, %% Line 1935
					   #{#<45>(8,1,'integer',['unsigned'|['big']]),
					     #<101>(8,1,'integer',['unsigned'|['big']]),
					     #<120>(8,1,'integer',['unsigned'|['big']]),
					     #<112>(8,1,'integer',['unsigned'|['big']]),
					     #<111>(8,1,'integer',['unsigned'|['big']]),
					     #<114>(8,1,'integer',['unsigned'|['big']]),
					     #<116>(8,1,'integer',['unsigned'|['big']]),
					     #<40>(8,1,'integer',['unsigned'|['big']]),
					     #<91>(8,1,'integer',['unsigned'|['big']]),
					     #<112>(8,1,'integer',['unsigned'|['big']]),
					     #<97>(8,1,'integer',['unsigned'|['big']]),
					     #<114>(8,1,'integer',['unsigned'|['big']]),
					     #<115>(8,1,'integer',['unsigned'|['big']]),
					     #<101>(8,1,'integer',['unsigned'|['big']]),
					     #<47>(8,1,'integer',['unsigned'|['big']]),
					     #<49>(8,1,'integer',['unsigned'|['big']]),
					     #<44>(8,1,'integer',['unsigned'|['big']]),
					     #<32>(8,1,'integer',['unsigned'|['big']]),
					     #<112>(8,1,'integer',['unsigned'|['big']]),
					     #<97>(8,1,'integer',['unsigned'|['big']]),
					     #<114>(8,1,'integer',['unsigned'|['big']]),
					     #<115>(8,1,'integer',['unsigned'|['big']]),
					     #<101>(8,1,'integer',['unsigned'|['big']]),
					     #<95>(8,1,'integer',['unsigned'|['big']]),
					     #<97>(8,1,'integer',['unsigned'|['big']]),
					     #<110>(8,1,'integer',['unsigned'|['big']]),
					     #<100>(8,1,'integer',['unsigned'|['big']]),
					     #<95>(8,1,'integer',['unsigned'|['big']]),
					     #<115>(8,1,'integer',['unsigned'|['big']]),
					     #<99>(8,1,'integer',['unsigned'|['big']]),
					     #<97>(8,1,'integer',['unsigned'|['big']]),
					     #<110>(8,1,'integer',['unsigned'|['big']]),
					     #<47>(8,1,'integer',['unsigned'|['big']]),
					     #<49>(8,1,'integer',['unsigned'|['big']]),
					     #<44>(8,1,'integer',['unsigned'|['big']]),
					     #<32>(8,1,'integer',['unsigned'|['big']]),
					     #<102>(8,1,'integer',['unsigned'|['big']]),
					     #<111>(8,1,'integer',['unsigned'|['big']]),
					     #<114>(8,1,'integer',['unsigned'|['big']]),
					     #<109>(8,1,'integer',['unsigned'|['big']]),
					     #<97>(8,1,'integer',['unsigned'|['big']]),
					     #<116>(8,1,'integer',['unsigned'|['big']]),
					     #<95>(8,1,'integer',['unsigned'|['big']]),
					     #<101>(8,1,'integer',['unsigned'|['big']]),
					     #<114>(8,1,'integer',['unsigned'|['big']]),
					     #<114>(8,1,'integer',['unsigned'|['big']]),
					     #<111>(8,1,'integer',['unsigned'|['big']]),
					     #<114>(8,1,'integer',['unsigned'|['big']]),
					     #<47>(8,1,'integer',['unsigned'|['big']]),
					     #<49>(8,1,'integer',['unsigned'|['big']]),
					     #<93>(8,1,'integer',['unsigned'|['big']]),
					     #<41>(8,1,'integer',['unsigned'|['big']]),
					     #<46>(8,1,'integer',['unsigned'|['big']]),
					     #<10>(8,1,'integer',['unsigned'|['big']])}#, %% Line 1936
											  [])
			    in  %% Line 1938
				( case St20 of
				    ( <( {'yecc',_cor117,_cor118,_cor119,_cor120,_cor121,_cor122,_cor123,_cor124,_cor125,_cor126,_cor127,_cor128,_cor129,_cor130,_cor131,_cor132,_cor133,_cor134,_cor135,_cor136,_cor137,_cor138,_cor139,_cor140,_cor141,_cor142,_cor143,_cor144,_cor145,_cor146,_cor147,_cor148,_cor149,_cor150,_cor151,_cor152,_rec162}
					 -| ['compiler_generated'] )> when 'true' ->
					  let <St25,N_lines_1,LastErlangCodeLine> =
					      case _rec162 of
						%% Line 1939
						<'none'> when 'true' ->
						    %% Line 1940
						    <St20,0,'no_erlang_code'>
						%% Line 1941
						<Next_line> when 'true' ->
						    let <_cor15> =
							%% Line 1942
							call 'erlang':'-'
							    (Next_line, 1)
						    in  let <St_10> =
							    %% Line 1942
							    apply 'output_file_directive'/3
								(St20, Infile, _cor15)
							in  let <Last_line> =
								%% Line 1943
								apply 'include1'/6
								    ([], Inport, Outport, Infile, %% Line 1944
												  Next_line, %% Line 1944
													     St_10)
							    in  let <Nmbr_of_lines> =
								    %% Line 1945
								    call 'erlang':'-'
									(Last_line, Next_line)
								in  %% Line 1946
								    <St_10,Nmbr_of_lines,{'last_erlang_code_line',Last_line}>
					      end
					  in  let <St30> =
						  %% Line 1948
						  apply 'nl'/1
						      (St25)
					      in  let <_cor23> =
						      %% Line 1950
						      call 'code':'lib_dir'
							  ('parsetools')
						  in  let <IncludeFile> =
							  %% Line 1950
							  call 'filename':'join'
							      ([_cor23|[[105|[110|[99|[108|[117|[100|[101]]]]]]]|[[121|[101|[99|[99|[112|[114|[101|[46|[104|[114|[108]]]]]]]]]]]]]])
						      in  let <St> =
							      %% Line 1952
							      apply 'output_file_directive'/3
								  (St30, IncludeFile, 0)
							  in  let <N_lines_2> =
								  %% Line 1953
								  apply 'include'/3
								      (St, IncludeFile, Outport)
							      in  let <_cor27> =
								      %% Line 1954
								      call 'erlang':'+'
									  (N_lines_1, N_lines_2)
								  in  %% Line 1954
								      {St,_cor27,LastErlangCodeLine}
				      -| ['compiler_generated'] )
				    ( <_cor153> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {'badrecord','yecc'}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
		    ( <_cor10> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor10})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1955
	  <Outport,Inport,St0> when 'true' ->
	      let <St5> =
		  %% Line 1956
		  apply 'output_header'/1
		      (St0)
	      in  %% Line 1957
		  case St5 of
		    <{'yecc',Infile,_cor154,Includefile,_cor155,Module,_cor156,_cor157,_cor158,_cor159,_cor160,_cor161,_cor162,_cor163,_cor164,_cor165,_cor166,_cor167,_cor168,_cor169,_cor170,_cor171,_cor172,_cor173,_cor174,_cor175,_cor176,_cor177,_cor178,_cor179,_cor180,_cor181,_cor182,_cor183,_cor184,_cor185,_cor186,_cor187}> when 'true' ->
			let <St10> =
			    %% Line 1958
			    apply 'fwrite'/3
				(St5, #{#<45>(8,1,'integer',['unsigned'|['big']]),
					#<109>(8,1,'integer',['unsigned'|['big']]),
					#<111>(8,1,'integer',['unsigned'|['big']]),
					#<100>(8,1,'integer',['unsigned'|['big']]),
					#<117>(8,1,'integer',['unsigned'|['big']]),
					#<108>(8,1,'integer',['unsigned'|['big']]),
					#<101>(8,1,'integer',['unsigned'|['big']]),
					#<40>(8,1,'integer',['unsigned'|['big']]),
					#<126>(8,1,'integer',['unsigned'|['big']]),
					#<119>(8,1,'integer',['unsigned'|['big']]),
					#<41>(8,1,'integer',['unsigned'|['big']]),
					#<46>(8,1,'integer',['unsigned'|['big']]),
					#<10>(8,1,'integer',['unsigned'|['big']])}#, [Module|[]])
			in  let <St20> =
				%% Line 1959
				apply 'output_file_directive'/3
				    (St10, Includefile, 0)
			    in  let <N_lines_1> =
				    %% Line 1960
				    apply 'include'/3
					(St20, Includefile, Outport)
				in  let <St30> =
					%% Line 1961
					apply 'nl'/1
					    (St20)
				    in  %% Line 1962
					( case St30 of
					    ( <( {'yecc',_cor188,_cor189,_cor190,_cor191,_cor192,_cor193,_cor194,_cor195,_cor196,_cor197,_cor198,_cor199,_cor200,_cor201,_cor202,_cor203,_cor204,_cor205,_cor206,_cor207,_cor208,_cor209,_cor210,_cor211,_cor212,_cor213,_cor214,_cor215,_cor216,_cor217,_cor218,_cor219,_cor220,_cor221,_cor222,_cor223,_rec163}
						 -| ['compiler_generated'] )> when 'true' ->
						  case _rec163 of
						    %% Line 1963
						    <'none'> when 'true' ->
							%% Line 1964
							{St30,N_lines_1,'no_erlang_code'}
						    %% Line 1965
						    <Next_line> when 'true' ->
							let <_cor36> =
							    %% Line 1966
							    call 'erlang':'-'
								(Next_line, 1)
							in  let <St> =
								%% Line 1966
								apply 'output_file_directive'/3
								    (St30, Infile, _cor36)
							    in  let <Last_line> =
								    %% Line 1967
								    apply 'include1'/6
									([], Inport, Outport, Infile, Next_line, St)
								in  let <Nmbr_of_lines> =
									%% Line 1968
									call 'erlang':'-'
									    (Last_line, Next_line)
								    in  let <_cor40> =
									    %% Line 1969
									    call 'erlang':'+'
										(Nmbr_of_lines, N_lines_1)
									in  %% Line 1969
									    {St,_cor40,{'last_erlang_code_line',Last_line}}
						  end
					      -| ['compiler_generated'] )
					    ( <_cor224> when 'true' ->
						  ( call ( 'erlang'
							   -| ['compiler_generated'] ):( 'error'
											 -| ['compiler_generated'] )
							(( {'badrecord','yecc'}
							   -| ['compiler_generated'] ))
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					  end
					  -| ['compiler_generated'] )
		    ( <_cor29> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor29})
		      -| ['compiler_generated'] )
		  end
	end
'output_header'/1 =
    %% Line 1972
    fun (_cor0) ->
	let <_cor7> =
	    %% Line 1973
	    ( fun (_cor4,_cor3) ->
		  apply 'fwrite'/3
		      (_cor3, #{#<126>(8,1,'integer',['unsigned'|['big']]),
				#<116>(8,1,'integer',['unsigned'|['big']]),
				#<115>(8,1,'integer',['unsigned'|['big']]),
				#<10>(8,1,'integer',['unsigned'|['big']])}#, [_cor4|[]])
	      -| [{'id',{0,0,'-output_header/1-fun-0-'}}] )
	in  %% Line 1974
	    ( case _cor0 of
		( <( {'yecc',_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_rec164,_cor44}
		     -| ['compiler_generated'] )> when 'true' ->
		      call 'lists':'foldl'
			  (_cor7, _cor0, _rec164)
		  -| ['compiler_generated'] )
		( <_cor45> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','yecc'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	      -| ['compiler_generated'] )
'output_goto'/3 =
    %% Line 1976
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <St,[{_X_Nonterminal,[]}|Go],StateInfo> when 'true' ->
	      %% Line 1977
	      apply 'output_goto'/3
		  (St, Go, StateInfo)
	  %% Line 1978
	  <St0,[{Nonterminal,List}|Go],StateInfo> when 'true' ->
	      let <F> =
		  %% Line 1979
		  apply 'function_name'/2
		      ('yeccgoto', Nonterminal)
	      in  let <St10> =
		      %% Line 1980
		      apply 'output_goto1'/5
			  (St0, List, F, StateInfo, 'true')
		  in  let <St> =
			  %% Line 1981
			  apply 'output_goto_fini'/3
			      (F, Nonterminal, St10)
		      in  %% Line 1982
			  apply 'output_goto'/3
			      (St, Go, StateInfo)
	  %% Line 1983
	  <St,[],_X_StateInfo> when 'true' ->
	      %% Line 1984
	      St
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'output_goto',3}}] )
	    -| ['compiler_generated'] )
	end
'output_goto1'/5 =
    %% Line 1986
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <St0,[{From,To}|Tail],F,StateInfo,IsFirst> when 'true' ->
	      let <St10> =
		  %% Line 1987
		  apply 'delim'/2
		      (St0, IsFirst)
	      in  %% Line 1988
		  case apply 'lookup_state'/2
			   (StateInfo, To) of
		    <{_cor20,ToInfo}>
			when call 'erlang':'=:='
			      (_cor20,
			       To) ->
			%% Line 1989
			case ToInfo of
			  <{'state_info',RO,Repr,C}> when 'true' ->
			      let <_cor21,FromS,ToS> =
				  %% Line 1990
				  case <> of
				    %% Line 1991
				    <>
					when call 'erlang':'=:='
					      (RO,
					       'true') ->
					let <FromS> =
					    %% Line 1994
					    call 'io_lib':'fwrite'
						([126|[119|[61|[95|[83]]]]], [From|[]])
					in  <%% Line 1995
					     [95|[83]],FromS,%% Line 1995
							     [95|[83]]>
				    %% Line 1996
				    <> when 'true' ->
					let <FromS> =
					    %% Line 1997
					    call 'io_lib':'fwrite'
						([126|[119]], [From|[]])
					in  let <ToS> =
						%% Line 1998
						call 'io_lib':'fwrite'
						    ([126|[119]], [To|[]])
					    in  <ToS,FromS,ToS>
				  end
			      in  let <St20> =
				      %% Line 2000
				      apply 'fwrite'/3
					  (St10, #{#<126>(8,1,'integer',['unsigned'|['big']]),
						   #<119>(8,1,'integer',['unsigned'|['big']]),
						   #<40>(8,1,'integer',['unsigned'|['big']]),
						   #<126>(8,1,'integer',['unsigned'|['big']]),
						   #<115>(8,1,'integer',['unsigned'|['big']]),
						   #<44>(8,1,'integer',['unsigned'|['big']]),
						   #<32>(8,1,'integer',['unsigned'|['big']]),
						   #<67>(8,1,'integer',['unsigned'|['big']]),
						   #<97>(8,1,'integer',['unsigned'|['big']]),
						   #<116>(8,1,'integer',['unsigned'|['big']]),
						   #<44>(8,1,'integer',['unsigned'|['big']]),
						   #<32>(8,1,'integer',['unsigned'|['big']]),
						   #<83>(8,1,'integer',['unsigned'|['big']]),
						   #<115>(8,1,'integer',['unsigned'|['big']]),
						   #<44>(8,1,'integer',['unsigned'|['big']]),
						   #<32>(8,1,'integer',['unsigned'|['big']]),
						   #<83>(8,1,'integer',['unsigned'|['big']]),
						   #<116>(8,1,'integer',['unsigned'|['big']]),
						   #<97>(8,1,'integer',['unsigned'|['big']]),
						   #<99>(8,1,'integer',['unsigned'|['big']]),
						   #<107>(8,1,'integer',['unsigned'|['big']]),
						   #<44>(8,1,'integer',['unsigned'|['big']]),
						   #<32>(8,1,'integer',['unsigned'|['big']]),
						   #<84>(8,1,'integer',['unsigned'|['big']]),
						   #<44>(8,1,'integer',['unsigned'|['big']]),
						   #<32>(8,1,'integer',['unsigned'|['big']]),
						   #<84>(8,1,'integer',['unsigned'|['big']]),
						   #<115>(8,1,'integer',['unsigned'|['big']]),
						   #<44>(8,1,'integer',['unsigned'|['big']]),
						   #<32>(8,1,'integer',['unsigned'|['big']]),
						   #<84>(8,1,'integer',['unsigned'|['big']]),
						   #<122>(8,1,'integer',['unsigned'|['big']]),
						   #<114>(8,1,'integer',['unsigned'|['big']]),
						   #<41>(8,1,'integer',['unsigned'|['big']]),
						   #<32>(8,1,'integer',['unsigned'|['big']]),
						   #<45>(8,1,'integer',['unsigned'|['big']]),
						   #<62>(8,1,'integer',['unsigned'|['big']]),
						   #<10>(8,1,'integer',['unsigned'|['big']])}#, %% Line 2001
												[F|[FromS|[]]])
				  in  let <St30> =
					  %% Line 2002
					  apply 'fwrite'/3
					      (St20, #{#<126>(8,1,'integer',['unsigned'|['big']]),
						       #<115>(8,1,'integer',['unsigned'|['big']])}#, [C|[]])
				      in  let <St> =
					      %% Line 2004
					      apply 'fwrite'/3
						  (St30, #{#<32>(8,1,'integer',['unsigned'|['big']]),
							   #<121>(8,1,'integer',['unsigned'|['big']]),
							   #<101>(8,1,'integer',['unsigned'|['big']]),
							   #<99>(8,1,'integer',['unsigned'|['big']]),
							   #<99>(8,1,'integer',['unsigned'|['big']]),
							   #<112>(8,1,'integer',['unsigned'|['big']]),
							   #<97>(8,1,'integer',['unsigned'|['big']]),
							   #<114>(8,1,'integer',['unsigned'|['big']]),
							   #<115>(8,1,'integer',['unsigned'|['big']]),
							   #<50>(8,1,'integer',['unsigned'|['big']]),
							   #<95>(8,1,'integer',['unsigned'|['big']]),
							   #<126>(8,1,'integer',['unsigned'|['big']]),
							   #<119>(8,1,'integer',['unsigned'|['big']]),
							   #<40>(8,1,'integer',['unsigned'|['big']]),
							   #<126>(8,1,'integer',['unsigned'|['big']]),
							   #<115>(8,1,'integer',['unsigned'|['big']]),
							   #<44>(8,1,'integer',['unsigned'|['big']]),
							   #<32>(8,1,'integer',['unsigned'|['big']]),
							   #<67>(8,1,'integer',['unsigned'|['big']]),
							   #<97>(8,1,'integer',['unsigned'|['big']]),
							   #<116>(8,1,'integer',['unsigned'|['big']]),
							   #<44>(8,1,'integer',['unsigned'|['big']]),
							   #<32>(8,1,'integer',['unsigned'|['big']]),
							   #<83>(8,1,'integer',['unsigned'|['big']]),
							   #<115>(8,1,'integer',['unsigned'|['big']]),
							   #<44>(8,1,'integer',['unsigned'|['big']]),
							   #<32>(8,1,'integer',['unsigned'|['big']]),
							   #<83>(8,1,'integer',['unsigned'|['big']]),
							   #<116>(8,1,'integer',['unsigned'|['big']]),
							   #<97>(8,1,'integer',['unsigned'|['big']]),
							   #<99>(8,1,'integer',['unsigned'|['big']]),
							   #<107>(8,1,'integer',['unsigned'|['big']]),
							   #<44>(8,1,'integer',['unsigned'|['big']]),
							   #<32>(8,1,'integer',['unsigned'|['big']]),
							   #<84>(8,1,'integer',['unsigned'|['big']]),
							   #<44>(8,1,'integer',['unsigned'|['big']]),
							   #<32>(8,1,'integer',['unsigned'|['big']]),
							   #<84>(8,1,'integer',['unsigned'|['big']]),
							   #<115>(8,1,'integer',['unsigned'|['big']]),
							   #<44>(8,1,'integer',['unsigned'|['big']]),
							   #<32>(8,1,'integer',['unsigned'|['big']]),
							   #<84>(8,1,'integer',['unsigned'|['big']]),
							   #<122>(8,1,'integer',['unsigned'|['big']]),
							   #<114>(8,1,'integer',['unsigned'|['big']]),
							   #<41>(8,1,'integer',['unsigned'|['big']])}#, %% Line 2005
													[Repr|[ToS|[]]])
					  in  %% Line 2006
					      apply 'output_goto1'/5
						  (St, Tail, F, StateInfo, 'false')
			  ( <_cor7> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor7})
			    -| ['compiler_generated'] )
			end
		    ( <_cor6> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor6})
		      -| ['compiler_generated'] )
		  end
	  %% Line 2007
	  <St,[],_X_F,_X_StateInfo,_X_IsFirst> when 'true' ->
	      %% Line 2008
	      St
	  ( <_cor19,_cor18,_cor17,_cor16,_cor15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor19,_cor18,_cor17,_cor16,_cor15})
		  -| [{'function_name',{'output_goto1',5}}] )
	    -| ['compiler_generated'] )
	end
'output_goto_fini'/3 =
    %% Line 2010
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <F,NT,St0 = {'yecc',_cor10,_cor11,_cor12,{1,1},_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45}> when 'true' ->
	      let <St10> =
		  %% Line 2012
		  apply 'delim'/2
		      (St0, 'false')
	      in  let <St> =
		      %% Line 2013
		      apply 'fwrite'/3
			  (St10, #{#<126>(8,1,'integer',['unsigned'|['big']]),
				   #<119>(8,1,'integer',['unsigned'|['big']]),
				   #<40>(8,1,'integer',['unsigned'|['big']]),
				   #<83>(8,1,'integer',['unsigned'|['big']]),
				   #<116>(8,1,'integer',['unsigned'|['big']]),
				   #<97>(8,1,'integer',['unsigned'|['big']]),
				   #<116>(8,1,'integer',['unsigned'|['big']]),
				   #<101>(8,1,'integer',['unsigned'|['big']]),
				   #<44>(8,1,'integer',['unsigned'|['big']]),
				   #<32>(8,1,'integer',['unsigned'|['big']]),
				   #<95>(8,1,'integer',['unsigned'|['big']]),
				   #<67>(8,1,'integer',['unsigned'|['big']]),
				   #<97>(8,1,'integer',['unsigned'|['big']]),
				   #<116>(8,1,'integer',['unsigned'|['big']]),
				   #<44>(8,1,'integer',['unsigned'|['big']]),
				   #<32>(8,1,'integer',['unsigned'|['big']]),
				   #<95>(8,1,'integer',['unsigned'|['big']]),
				   #<83>(8,1,'integer',['unsigned'|['big']]),
				   #<115>(8,1,'integer',['unsigned'|['big']]),
				   #<44>(8,1,'integer',['unsigned'|['big']]),
				   #<32>(8,1,'integer',['unsigned'|['big']]),
				   #<95>(8,1,'integer',['unsigned'|['big']]),
				   #<83>(8,1,'integer',['unsigned'|['big']]),
				   #<116>(8,1,'integer',['unsigned'|['big']]),
				   #<97>(8,1,'integer',['unsigned'|['big']]),
				   #<99>(8,1,'integer',['unsigned'|['big']]),
				   #<107>(8,1,'integer',['unsigned'|['big']]),
				   #<44>(8,1,'integer',['unsigned'|['big']]),
				   #<32>(8,1,'integer',['unsigned'|['big']]),
				   #<95>(8,1,'integer',['unsigned'|['big']]),
				   #<84>(8,1,'integer',['unsigned'|['big']]),
				   #<44>(8,1,'integer',['unsigned'|['big']]),
				   #<32>(8,1,'integer',['unsigned'|['big']]),
				   #<95>(8,1,'integer',['unsigned'|['big']]),
				   #<84>(8,1,'integer',['unsigned'|['big']]),
				   #<115>(8,1,'integer',['unsigned'|['big']]),
				   #<44>(8,1,'integer',['unsigned'|['big']]),
				   #<32>(8,1,'integer',['unsigned'|['big']]),
				   #<95>(8,1,'integer',['unsigned'|['big']]),
				   #<84>(8,1,'integer',['unsigned'|['big']]),
				   #<122>(8,1,'integer',['unsigned'|['big']]),
				   #<114>(8,1,'integer',['unsigned'|['big']]),
				   #<41>(8,1,'integer',['unsigned'|['big']]),
				   #<32>(8,1,'integer',['unsigned'|['big']]),
				   #<45>(8,1,'integer',['unsigned'|['big']]),
				   #<62>(8,1,'integer',['unsigned'|['big']]),
				   #<10>(8,1,'integer',['unsigned'|['big']])}#, %% Line 2014
										[F|[]])
		  in  let <_cor5> =
			  %% Line 2016
			  call 'io_lib':'fwrite'
			      (#{#<123>(8,1,'integer',['unsigned'|['big']]),
				 #<126>(8,1,'integer',['unsigned'|['big']]),
				 #<119>(8,1,'integer',['unsigned'|['big']]),
				 #<44>(8,1,'integer',['unsigned'|['big']]),
				 #<32>(8,1,'integer',['unsigned'|['big']]),
				 #<83>(8,1,'integer',['unsigned'|['big']]),
				 #<116>(8,1,'integer',['unsigned'|['big']]),
				 #<97>(8,1,'integer',['unsigned'|['big']]),
				 #<116>(8,1,'integer',['unsigned'|['big']]),
				 #<101>(8,1,'integer',['unsigned'|['big']]),
				 #<44>(8,1,'integer',['unsigned'|['big']]),
				 #<32>(8,1,'integer',['unsigned'|['big']]),
				 #<109>(8,1,'integer',['unsigned'|['big']]),
				 #<105>(8,1,'integer',['unsigned'|['big']]),
				 #<115>(8,1,'integer',['unsigned'|['big']]),
				 #<115>(8,1,'integer',['unsigned'|['big']]),
				 #<105>(8,1,'integer',['unsigned'|['big']]),
				 #<110>(8,1,'integer',['unsigned'|['big']]),
				 #<103>(8,1,'integer',['unsigned'|['big']]),
				 #<95>(8,1,'integer',['unsigned'|['big']]),
				 #<105>(8,1,'integer',['unsigned'|['big']]),
				 #<110>(8,1,'integer',['unsigned'|['big']]),
				 #<95>(8,1,'integer',['unsigned'|['big']]),
				 #<103>(8,1,'integer',['unsigned'|['big']]),
				 #<111>(8,1,'integer',['unsigned'|['big']]),
				 #<116>(8,1,'integer',['unsigned'|['big']]),
				 #<111>(8,1,'integer',['unsigned'|['big']]),
				 #<95>(8,1,'integer',['unsigned'|['big']]),
				 #<116>(8,1,'integer',['unsigned'|['big']]),
				 #<97>(8,1,'integer',['unsigned'|['big']]),
				 #<98>(8,1,'integer',['unsigned'|['big']]),
				 #<108>(8,1,'integer',['unsigned'|['big']]),
				 #<101>(8,1,'integer',['unsigned'|['big']]),
				 #<125>(8,1,'integer',['unsigned'|['big']])}#, [NT|[]])
		      in  let <_cor6> =
			      %% Line 2016
			      call 'erlang':'iolist_to_binary'
				  ([[32|[101|[114|[108|[97|[110|[103|[58|[101|[114|[114|[111|[114|[40|[123|[121|[101|[99|[99|[95|[98|[117|[103|[44|[34]]]]]]]]]]]]]]]]]]]]]]]]]|[[49|[46|[52]]]|[[34|[44]]|[_cor5|[[125|[41|[46|[10|[10]]]]]]]]]])
			  in  %% Line 2015
			      apply 'fwrite'/3
				  (St, _cor6, %% Line 2017
					      [])
	  %% Line 2018
	  <_X_F,_X_NT,St> when 'true' ->
	      %% Line 2019
	      apply 'fwrite'/3
		  (St, #{#<46>(8,1,'integer',['unsigned'|['big']]),
			 #<10>(8,1,'integer',['unsigned'|['big']]),
			 #<10>(8,1,'integer',['unsigned'|['big']])}#, [])
	end
'find_user_code'/2 =
    %% Line 2022
    fun (_cor1,_cor0) ->
	%% Line 2023
	( letrec
	      'lc$^0'/1 =
		  fun (_cor11) ->
		      case _cor11 of
			<[%% Line 2027
			  {State,La_actions}|_cor3]> when 'true' ->
			    ( letrec
				  'lc$^1'/1 =
				      fun (_cor12) ->
					  case _cor12 of
					    <[%% Line 2028
					      {Action,Terminals,RuleNmbr,NmbrOfDaughters}|_cor5]> when 'true' ->
						let <_cor8> =
						    %% Line 2030
						    case apply 'tokens'/2
							     (RuleNmbr, _cor0) of
						      %% Line 2031
						      <[{'var',_cor19,'__1'}|[]]> when 'true' ->
							  call 'erlang':'=/='
							      (NmbrOfDaughters, 1)
						      %% Line 2032
						      <_cor20> when 'true' ->
							  'true'
						    end
						in  %% Line 2030
						    ( case _cor8 of
							<'true'> when 'true' ->
							    ( letrec
								  'lc$^2'/1 =
								      fun (_cor13) ->
									  case _cor13 of
									    <[%% Line 2034
									      Terminal|_cor10]> when 'true' ->
										let <_cor14> =
										    apply 'inlined_function_name'/2
											(State, Terminal)
										in  let <_cor15> =
											%% Line 2034
											apply 'lc$^2'/1
											    (_cor10)
										    in  ( [{'user_code',State,Terminal,_cor14,Action}|_cor15]
											  -| ['compiler_generated'] )
									    <[]> when 'true' ->
										apply 'lc$^1'/1
										    (_cor5)
									    ( <_cor13> when 'true' ->
										  ( primop 'match_fail'
											({'function_clause',_cor13})
										    -| [{'function_name',{'lc$^2',1}}] )
									      -| ['compiler_generated'] )
									  end
							      in  apply 'lc$^2'/1
								      (%% Line 2034
								       Terminals)
							      -| ['list_comprehension'] )
							( <'false'> when 'true' ->
							      apply 'lc$^1'/1
								  (_cor5)
							  -| ['compiler_generated'] )
							( <_cor16> when 'true' ->
							      primop 'match_fail'
								  ({'case_clause',_cor16})
							  -| ['compiler_generated'] )
						      end
						      -| ['list_comprehension'] )
					    ( <[_cor4|_cor5]> when 'true' ->
						  %% Line 2029
						  apply 'lc$^1'/1
						      (_cor5)
					      -| ['compiler_generated'] )
					    <[]> when 'true' ->
						%% Line 2027
						apply 'lc$^0'/1
						    (_cor3)
					    ( <_cor12> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor12})
						    -| [{'function_name',{'lc$^1',1}}] )
					      -| ['compiler_generated'] )
					  end
			      in  let <_cor6> =
				      %% Line 2029
				      apply 'find_user_code2'/1
					  (La_actions)
				  in  apply 'lc$^1'/1
					  (_cor6)
			      -| ['list_comprehension'] )
			( <[_cor2|_cor3]> when 'true' ->
			      %% Line 2027
			      apply 'lc$^0'/1
				  (_cor3)
			  -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_cor11> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor11})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  apply 'lc$^0'/1
		  (_cor1)
	  -| ['list_comprehension'] )
'find_user_code2'/1 =
    %% Line 2036
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      %% Line 2037
	      []
	  %% Line 2038
	  <[{_cor3,Action = {'reduce',RuleNmbr,_cor4,%% Line 2039
						     NmbrOfDaughters,_cor5,_cor6}}|%% Line 2040
										   []]> when 'true' ->
	      %% Line 2042
	      [{Action,[[67|[97|[116]]]],RuleNmbr,NmbrOfDaughters}|[]]
	  %% Line 2043
	  <[{La,Action = {'reduce',RuleNmbr,_cor7,%% Line 2044
						  NmbrOfDaughters,_cor8,_cor9}}|%% Line 2045
										T]> when 'true' ->
	      let <_cor1> =
		  %% Line 2046
		  apply 'find_user_code2'/1
		      (T)
	      in  %% Line 2046
		  [{Action,La,RuleNmbr,NmbrOfDaughters}|_cor1]
	  %% Line 2047
	  <[_cor10|T]> when 'true' ->
	      %% Line 2048
	      apply 'find_user_code2'/1
		  (T)
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'find_user_code2',1}}] )
	    -| ['compiler_generated'] )
	end
'output_actions'/3 =
    %% Line 2050
    fun (_cor2,_cor1,_cor0) ->
	let <_cor19> =
	    %% Line 2054
	    ( letrec
		  'lc$^2'/1 =
		      fun (_cor16) ->
			  case _cor16 of
			    <[{_X_State,{Actions,J}}|_cor4]> when 'true' ->
				( letrec
				      'lc$^3'/1 =
					  fun (_cor17) ->
					      case _cor17 of
						<[%% Line 2055
						  {_X_LA,{'shift',NewState,_cor70,_cor71,_cor72}}|_cor6]> when 'true' ->
						    let <_cor18> =
							%% Line 2055
							apply 'lc$^3'/1
							    (_cor6)
						    in  ( [NewState|_cor18]
							  -| ['compiler_generated'] )
						( <[_cor5|_cor6]> when 'true' ->
						      %% Line 2055
						      apply 'lc$^3'/1
							  (_cor6)
						  -| ['compiler_generated'] )
						<[]> when 'true' ->
						    apply 'lc$^2'/1
							(_cor4)
						( <_cor17> when 'true' ->
						      ( primop 'match_fail'
							    ({'function_clause',_cor17})
							-| [{'function_name',{'lc$^3',1}}] )
						  -| ['compiler_generated'] )
					      end
				  in  let <_cor14> =
					  %% Line 2057
					  ( letrec
						'lc$^0'/1 =
						    fun (_cor11) ->
							case _cor11 of
							  <[{_X_Tag,_X_To,Part}|_cor8]> when 'true' ->
							      ( letrec
								    'lc$^1'/1 =
									fun (_cor12) ->
									    case _cor12 of
									      <[A|_cor10]> when 'true' ->
										  let <_cor13> =
										      apply 'lc$^1'/1
											  (_cor10)
										  in  ( [A|_cor13]
											-| ['compiler_generated'] )
									      <[]> when 'true' ->
										  apply 'lc$^0'/1
										      (_cor8)
									      ( <_cor12> when 'true' ->
										    ( primop 'match_fail'
											  ({'function_clause',_cor12})
										      -| [{'function_name',{'lc$^1',1}}] )
										-| ['compiler_generated'] )
									    end
								in  apply 'lc$^1'/1
									(Part)
								-| ['list_comprehension'] )
							  ( <[_cor7|_cor8]> when 'true' ->
								apply 'lc$^0'/1
								    (_cor8)
							    -| ['compiler_generated'] )
							  <[]> when 'true' ->
							      []
							  ( <_cor11> when 'true' ->
								( primop 'match_fail'
								      ({'function_clause',_cor11})
								  -| [{'function_name',{'lc$^0',1}}] )
							    -| ['compiler_generated'] )
							end
					    in  apply 'lc$^0'/1
						    ([J|[]])
					    -| ['list_comprehension'] )
				      in  let <_cor15> =
					      %% Line 2057
					      call 'erlang':'++'
						  (Actions, _cor14)
					  in  apply 'lc$^3'/1
						  (_cor15)
				  -| ['list_comprehension'] )
			    ( <[_cor3|_cor4]> when 'true' ->
				  apply 'lc$^2'/1
				      (_cor4)
			      -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor16> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor16})
				    -| [{'function_name',{'lc$^2',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^2'/1
		      (_cor1)
	      -| ['list_comprehension'] )
	in  let <Y2CS> =
		%% Line 2058
		call 'ordsets':'from_list'
		    ([0|_cor19])
	    in  let <_cor26> =
		    %% Line 2059
		    ( letrec
			  'lc$^4'/1 =
			      fun (_cor24) ->
				  case _cor24 of
				    <[{S,_cor73}|_cor23]> when 'true' ->
					let <_cor25> =
					    apply 'lc$^4'/1
						(_cor23)
					in  ( [S|_cor25]
					      -| ['compiler_generated'] )
				    ( <[_cor22|_cor23]> when 'true' ->
					  apply 'lc$^4'/1
					      (_cor23)
				      -| ['compiler_generated'] )
				    <[]> when 'true' ->
					[]
				    ( <_cor24> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor24})
					    -| [{'function_name',{'lc$^4',1}}] )
				      -| ['compiler_generated'] )
				  end
		      in  apply 'lc$^4'/1
			      (_cor1)
		      -| ['list_comprehension'] )
		in  let <Y2S> =
			%% Line 2059
			call 'ordsets':'from_list'
			    (_cor26)
		    in  let <NY2CS> =
			    %% Line 2060
			    call 'ordsets':'subtract'
				(Y2S, Y2CS)
			in  let <_cor34> =
				%% Line 2062
				( letrec
				      'lc$^5'/1 =
					  fun (_cor32) ->
					      case _cor32 of
						<[S|_cor30]> when 'true' ->
						    let <_cor33> =
							apply 'lc$^5'/1
							    (_cor30)
						    in  ( [{S,'false'}|_cor33]
							  -| ['compiler_generated'] )
						<[]> when 'true' ->
						    []
						( <_cor32> when 'true' ->
						      ( primop 'match_fail'
							    ({'function_clause',_cor32})
							-| [{'function_name',{'lc$^5',1}}] )
						  -| ['compiler_generated'] )
					      end
				  in  let <_cor31> =
					  call 'ordsets':'to_list'
					      (NY2CS)
				      in  apply 'lc$^5'/1
					      (_cor31)
				  -| ['list_comprehension'] )
			    in  let <_cor40> =
				    %% Line 2061
				    ( letrec
					  'lc$^6'/1 =
					      fun (_cor38) ->
						  case _cor38 of
						    <[S|_cor36]> when 'true' ->
							let <_cor39> =
							    apply 'lc$^6'/1
								(_cor36)
							in  ( [{S,'true'}|_cor39]
							      -| ['compiler_generated'] )
						    <[]> when 'true' ->
							_cor34
						    ( <_cor38> when 'true' ->
							  ( primop 'match_fail'
								({'function_clause',_cor38})
							    -| [{'function_name',{'lc$^6',1}}] )
						      -| ['compiler_generated'] )
						  end
				      in  let <_cor37> =
					      call 'ordsets':'to_list'
						  (Y2CS)
					  in  apply 'lc$^6'/1
						  (_cor37)
				      -| ['list_comprehension'] )
				in  let <_cor48> =
					%% Line 2064
					( letrec
					      'lc$^7'/1 =
						  fun (_cor46) ->
						      case _cor46 of
							<[%% Line 2065
							  {{State,_X_JActions},{_cor74,Called}}|_cor43]>
							    when call 'erlang':'=:='
								  (_cor74,
								   %% Line 2065
								   State) ->
							    let <_cor47> =
								%% Line 2065
								apply 'lc$^7'/1
								    (_cor43)
							    in  ( [{State,Called}|_cor47]
								  -| ['compiler_generated'] )
							( <[_cor42|_cor43]> when 'true' ->
							      %% Line 2065
							      apply 'lc$^7'/1
								  (_cor43)
							  -| ['compiler_generated'] )
							<[]> when 'true' ->
							    []
							( <_cor46> when 'true' ->
							      ( primop 'match_fail'
								    ({'function_clause',_cor46})
								-| [{'function_name',{'lc$^7',1}}] )
							  -| ['compiler_generated'] )
						      end
					  in  let <_cor44> =
						  %% Line 2066
						  call 'lists':'keysort'
						      (1, _cor40)
					      in  let <_cor45> =
						      %% Line 2066
						      call 'lists':'zip'
							  (_cor1, _cor44)
						  in  apply 'lc$^7'/1
							  (_cor45)
					  -| ['list_comprehension'] )
				    in  let <_cor55> =
					    %% Line 2067
					    ( fun (_cor52,_cor51) ->
						  case <_cor52,_cor51> of
						    <{State,Called},St_0> when 'true' ->
							%% Line 2068
							case %% Line 2069
							     apply 'lookup_state'/2
								 (_cor0, State) of
							  <{_cor75,{'state_info',_cor76,IState,_cor77}}>
							      when call 'erlang':'=:='
								    (_cor75,
								     State) ->
							      %% Line 2070
							      apply 'output_state_selection'/4
								  (St_0, State, IState, Called)
							  ( <_cor50> when 'true' ->
								primop 'match_fail'
								    ({'badmatch',_cor50})
							    -| ['compiler_generated'] )
							end
						    ( <_cor54,_cor53> when 'true' ->
							  ( primop 'match_fail'
								({'function_clause',_cor54,_cor53})
							    -| [{'function_name',{'-output_actions/3-fun-0-',2}}] )
						      -| ['compiler_generated'] )
						  end
					      -| [{'id',{0,0,'-output_actions/3-fun-0-'}}] )
					in  let <St10> =
						%% Line 2067
						call 'lists':'foldl'
						    (_cor55, _cor2, _cor48)
					    in  let <St20> =
						    %% Line 2072
						    apply 'fwrite'/3
							(St10, #{#<121>(8,1,'integer',['unsigned'|['big']]),
								 #<101>(8,1,'integer',['unsigned'|['big']]),
								 #<99>(8,1,'integer',['unsigned'|['big']]),
								 #<99>(8,1,'integer',['unsigned'|['big']]),
								 #<112>(8,1,'integer',['unsigned'|['big']]),
								 #<97>(8,1,'integer',['unsigned'|['big']]),
								 #<114>(8,1,'integer',['unsigned'|['big']]),
								 #<115>(8,1,'integer',['unsigned'|['big']]),
								 #<50>(8,1,'integer',['unsigned'|['big']]),
								 #<40>(8,1,'integer',['unsigned'|['big']]),
								 #<79>(8,1,'integer',['unsigned'|['big']]),
								 #<116>(8,1,'integer',['unsigned'|['big']]),
								 #<104>(8,1,'integer',['unsigned'|['big']]),
								 #<101>(8,1,'integer',['unsigned'|['big']]),
								 #<114>(8,1,'integer',['unsigned'|['big']]),
								 #<44>(8,1,'integer',['unsigned'|['big']]),
								 #<32>(8,1,'integer',['unsigned'|['big']]),
								 #<95>(8,1,'integer',['unsigned'|['big']]),
								 #<44>(8,1,'integer',['unsigned'|['big']]),
								 #<32>(8,1,'integer',['unsigned'|['big']]),
								 #<95>(8,1,'integer',['unsigned'|['big']]),
								 #<44>(8,1,'integer',['unsigned'|['big']]),
								 #<32>(8,1,'integer',['unsigned'|['big']]),
								 #<95>(8,1,'integer',['unsigned'|['big']]),
								 #<44>(8,1,'integer',['unsigned'|['big']]),
								 #<32>(8,1,'integer',['unsigned'|['big']]),
								 #<95>(8,1,'integer',['unsigned'|['big']]),
								 #<44>(8,1,'integer',['unsigned'|['big']]),
								 #<32>(8,1,'integer',['unsigned'|['big']]),
								 #<95>(8,1,'integer',['unsigned'|['big']]),
								 #<44>(8,1,'integer',['unsigned'|['big']]),
								 #<32>(8,1,'integer',['unsigned'|['big']]),
								 #<95>(8,1,'integer',['unsigned'|['big']]),
								 #<41>(8,1,'integer',['unsigned'|['big']]),
								 #<32>(8,1,'integer',['unsigned'|['big']]),
								 #<45>(8,1,'integer',['unsigned'|['big']]),
								 #<62>(8,1,'integer',['unsigned'|['big']]),
								 #<10>(8,1,'integer',['unsigned'|['big']])}#, [])
						in  let <_cor58> =
							%% Line 2074
							call 'io_lib':'fwrite'
							    (#{#<123>(8,1,'integer',['unsigned'|['big']]),
							       #<109>(8,1,'integer',['unsigned'|['big']]),
							       #<105>(8,1,'integer',['unsigned'|['big']]),
							       #<115>(8,1,'integer',['unsigned'|['big']]),
							       #<115>(8,1,'integer',['unsigned'|['big']]),
							       #<105>(8,1,'integer',['unsigned'|['big']]),
							       #<110>(8,1,'integer',['unsigned'|['big']]),
							       #<103>(8,1,'integer',['unsigned'|['big']]),
							       #<95>(8,1,'integer',['unsigned'|['big']]),
							       #<115>(8,1,'integer',['unsigned'|['big']]),
							       #<116>(8,1,'integer',['unsigned'|['big']]),
							       #<97>(8,1,'integer',['unsigned'|['big']]),
							       #<116>(8,1,'integer',['unsigned'|['big']]),
							       #<101>(8,1,'integer',['unsigned'|['big']]),
							       #<95>(8,1,'integer',['unsigned'|['big']]),
							       #<105>(8,1,'integer',['unsigned'|['big']]),
							       #<110>(8,1,'integer',['unsigned'|['big']]),
							       #<95>(8,1,'integer',['unsigned'|['big']]),
							       #<97>(8,1,'integer',['unsigned'|['big']]),
							       #<99>(8,1,'integer',['unsigned'|['big']]),
							       #<116>(8,1,'integer',['unsigned'|['big']]),
							       #<105>(8,1,'integer',['unsigned'|['big']]),
							       #<111>(8,1,'integer',['unsigned'|['big']]),
							       #<110>(8,1,'integer',['unsigned'|['big']]),
							       #<95>(8,1,'integer',['unsigned'|['big']]),
							       #<116>(8,1,'integer',['unsigned'|['big']]),
							       #<97>(8,1,'integer',['unsigned'|['big']]),
							       #<98>(8,1,'integer',['unsigned'|['big']]),
							       #<108>(8,1,'integer',['unsigned'|['big']]),
							       #<101>(8,1,'integer',['unsigned'|['big']]),
							       #<44>(8,1,'integer',['unsigned'|['big']]),
							       #<32>(8,1,'integer',['unsigned'|['big']]),
							       #<79>(8,1,'integer',['unsigned'|['big']]),
							       #<116>(8,1,'integer',['unsigned'|['big']]),
							       #<104>(8,1,'integer',['unsigned'|['big']]),
							       #<101>(8,1,'integer',['unsigned'|['big']]),
							       #<114>(8,1,'integer',['unsigned'|['big']]),
							       #<125>(8,1,'integer',['unsigned'|['big']])}#, [])
						    in  let <_cor59> =
							    %% Line 2074
							    call 'erlang':'iolist_to_binary'
								([[32|[101|[114|[108|[97|[110|[103|[58|[101|[114|[114|[111|[114|[40|[123|[121|[101|[99|[99|[95|[98|[117|[103|[44|[34]]]]]]]]]]]]]]]]]]]]]]]]]|[[49|[46|[52]]]|[[34|[44]]|[_cor58|[[125|[41|[46|[10|[10]]]]]]]]]])
							in  let <St> =
								%% Line 2073
								apply 'fwrite'/3
								    (St20, _cor59, %% Line 2075
										   [])
							    in  let <_cor66> =
								    %% Line 2076
								    ( fun (_cor63,_cor62) ->
									  case <_cor63,_cor62> of
									    <{State,JActions},St_0> when 'true' ->
										%% Line 2077
										case %% Line 2078
										     apply 'lookup_state'/2
											 (_cor0, State) of
										  <{_cor78,{'state_info',_cor79,IState,_cor80}}>
										      when call 'erlang':'=:='
											    (_cor78,
											     State) ->
										      %% Line 2079
										      apply 'output_state_actions'/5
											  (St_0, State, IState, %% Line 2080
														JActions, _cor0)
										  ( <_cor61> when 'true' ->
											primop 'match_fail'
											    ({'badmatch',_cor61})
										    -| ['compiler_generated'] )
										end
									    ( <_cor65,_cor64> when 'true' ->
										  ( primop 'match_fail'
											({'function_clause',_cor65,_cor64})
										    -| [{'function_name',{'-output_actions/3-fun-1-',2}}] )
									      -| ['compiler_generated'] )
									  end
								      -| [{'id',{0,0,'-output_actions/3-fun-1-'}}] )
								in  %% Line 2076
								    call 'lists':'foldl'
									(_cor66, %% Line 2081
										 St, _cor1)
'output_state_selection'/4 =
    %% Line 2083
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor8> =
	    %% Line 2084
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor6) ->
			  case _cor6 of
			    <['false'|_cor5]> when 'true' ->
				let <_cor7> =
				    apply 'lc$^0'/1
					(_cor5)
				in  ( [#{#<37>(8,1,'integer',['unsigned'|['big']]),
					 #<37>(8,1,'integer',['unsigned'|['big']]),
					 #<32>(8,1,'integer',['unsigned'|['big']])}#|_cor7]
				      -| ['compiler_generated'] )
			    ( <[_cor4|_cor5]> when 'true' ->
				  apply 'lc$^0'/1
				      (_cor5)
			      -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor6> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor6})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      ([_cor0|[]])
	      -| ['list_comprehension'] )
	in  let <St> =
		%% Line 2085
		apply 'fwrite'/3
		    (_cor3, #{#<126>(8,1,'integer',['unsigned'|['big']]),
			      #<115>(8,1,'integer',['unsigned'|['big']]),
			      #<121>(8,1,'integer',['unsigned'|['big']]),
			      #<101>(8,1,'integer',['unsigned'|['big']]),
			      #<99>(8,1,'integer',['unsigned'|['big']]),
			      #<99>(8,1,'integer',['unsigned'|['big']]),
			      #<112>(8,1,'integer',['unsigned'|['big']]),
			      #<97>(8,1,'integer',['unsigned'|['big']]),
			      #<114>(8,1,'integer',['unsigned'|['big']]),
			      #<115>(8,1,'integer',['unsigned'|['big']]),
			      #<50>(8,1,'integer',['unsigned'|['big']]),
			      #<40>(8,1,'integer',['unsigned'|['big']]),
			      #<126>(8,1,'integer',['unsigned'|['big']]),
			      #<119>(8,1,'integer',['unsigned'|['big']]),
			      #<61>(8,1,'integer',['unsigned'|['big']]),
			      #<83>(8,1,'integer',['unsigned'|['big']]),
			      #<44>(8,1,'integer',['unsigned'|['big']]),
			      #<32>(8,1,'integer',['unsigned'|['big']]),
			      #<67>(8,1,'integer',['unsigned'|['big']]),
			      #<97>(8,1,'integer',['unsigned'|['big']]),
			      #<116>(8,1,'integer',['unsigned'|['big']]),
			      #<44>(8,1,'integer',['unsigned'|['big']]),
			      #<32>(8,1,'integer',['unsigned'|['big']]),
			      #<83>(8,1,'integer',['unsigned'|['big']]),
			      #<115>(8,1,'integer',['unsigned'|['big']]),
			      #<44>(8,1,'integer',['unsigned'|['big']]),
			      #<32>(8,1,'integer',['unsigned'|['big']]),
			      #<83>(8,1,'integer',['unsigned'|['big']]),
			      #<116>(8,1,'integer',['unsigned'|['big']]),
			      #<97>(8,1,'integer',['unsigned'|['big']]),
			      #<99>(8,1,'integer',['unsigned'|['big']]),
			      #<107>(8,1,'integer',['unsigned'|['big']]),
			      #<44>(8,1,'integer',['unsigned'|['big']]),
			      #<32>(8,1,'integer',['unsigned'|['big']]),
			      #<84>(8,1,'integer',['unsigned'|['big']]),
			      #<44>(8,1,'integer',['unsigned'|['big']]),
			      #<32>(8,1,'integer',['unsigned'|['big']]),
			      #<84>(8,1,'integer',['unsigned'|['big']]),
			      #<115>(8,1,'integer',['unsigned'|['big']]),
			      #<44>(8,1,'integer',['unsigned'|['big']]),
			      #<32>(8,1,'integer',['unsigned'|['big']]),
			      #<84>(8,1,'integer',['unsigned'|['big']]),
			      #<122>(8,1,'integer',['unsigned'|['big']]),
			      #<114>(8,1,'integer',['unsigned'|['big']]),
			      #<41>(8,1,'integer',['unsigned'|['big']]),
			      #<32>(8,1,'integer',['unsigned'|['big']]),
			      #<45>(8,1,'integer',['unsigned'|['big']]),
			      #<62>(8,1,'integer',['unsigned'|['big']]),
			      #<10>(8,1,'integer',['unsigned'|['big']])}#, %% Line 2086
									   [_cor8|[_cor2|[]]])
	    in  %% Line 2087
		apply 'fwrite'/3
		    (St, %% Line 2088
			 #{#<126>(8,1,'integer',['unsigned'|['big']]),
			   #<115>(8,1,'integer',['unsigned'|['big']]),
			   #<32>(8,1,'integer',['unsigned'|['big']]),
			   #<121>(8,1,'integer',['unsigned'|['big']]),
			   #<101>(8,1,'integer',['unsigned'|['big']]),
			   #<99>(8,1,'integer',['unsigned'|['big']]),
			   #<99>(8,1,'integer',['unsigned'|['big']]),
			   #<112>(8,1,'integer',['unsigned'|['big']]),
			   #<97>(8,1,'integer',['unsigned'|['big']]),
			   #<114>(8,1,'integer',['unsigned'|['big']]),
			   #<115>(8,1,'integer',['unsigned'|['big']]),
			   #<50>(8,1,'integer',['unsigned'|['big']]),
			   #<95>(8,1,'integer',['unsigned'|['big']]),
			   #<126>(8,1,'integer',['unsigned'|['big']]),
			   #<119>(8,1,'integer',['unsigned'|['big']]),
			   #<40>(8,1,'integer',['unsigned'|['big']]),
			   #<83>(8,1,'integer',['unsigned'|['big']]),
			   #<44>(8,1,'integer',['unsigned'|['big']]),
			   #<32>(8,1,'integer',['unsigned'|['big']]),
			   #<67>(8,1,'integer',['unsigned'|['big']]),
			   #<97>(8,1,'integer',['unsigned'|['big']]),
			   #<116>(8,1,'integer',['unsigned'|['big']]),
			   #<44>(8,1,'integer',['unsigned'|['big']]),
			   #<32>(8,1,'integer',['unsigned'|['big']]),
			   #<83>(8,1,'integer',['unsigned'|['big']]),
			   #<115>(8,1,'integer',['unsigned'|['big']]),
			   #<44>(8,1,'integer',['unsigned'|['big']]),
			   #<32>(8,1,'integer',['unsigned'|['big']]),
			   #<83>(8,1,'integer',['unsigned'|['big']]),
			   #<116>(8,1,'integer',['unsigned'|['big']]),
			   #<97>(8,1,'integer',['unsigned'|['big']]),
			   #<99>(8,1,'integer',['unsigned'|['big']]),
			   #<107>(8,1,'integer',['unsigned'|['big']]),
			   #<44>(8,1,'integer',['unsigned'|['big']]),
			   #<32>(8,1,'integer',['unsigned'|['big']]),
			   #<84>(8,1,'integer',['unsigned'|['big']]),
			   #<44>(8,1,'integer',['unsigned'|['big']]),
			   #<32>(8,1,'integer',['unsigned'|['big']]),
			   #<84>(8,1,'integer',['unsigned'|['big']]),
			   #<115>(8,1,'integer',['unsigned'|['big']]),
			   #<44>(8,1,'integer',['unsigned'|['big']]),
			   #<32>(8,1,'integer',['unsigned'|['big']]),
			   #<84>(8,1,'integer',['unsigned'|['big']]),
			   #<122>(8,1,'integer',['unsigned'|['big']]),
			   #<114>(8,1,'integer',['unsigned'|['big']]),
			   #<41>(8,1,'integer',['unsigned'|['big']]),
			   #<59>(8,1,'integer',['unsigned'|['big']]),
			   #<10>(8,1,'integer',['unsigned'|['big']])}#, %% Line 2089
									[_cor8|[_cor1|[]]])
'output_state_actions'/5 =
    %% Line 2091
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <St,State,_cor16,{Actions,'jump_none'},SI>
	      when call 'erlang':'=:='
		    (_cor16,
		     State) ->
	      %% Line 2092
	      apply 'output_state_actions1'/6
		  (St, State, Actions, 'true', 'normal', SI)
	  %% Line 2093
	  <St0,State,_cor17,{Actions,Jump},SI>
	      when call 'erlang':'=:='
		    (_cor17,
		     State) ->
	      %% Line 2094
	      case Jump of
		<{Tag,To,Common}> when 'true' ->
		    let <_cor8> =
			%% Line 2095
			case Tag of
			  %% Line 2096
			  <'jump_some'> when 'true' ->
			      let <_cor6> =
				  call 'lists':'concat'
				      (['cont_'|[To|[]]])
			      in  call 'erlang':'list_to_atom'
				      (_cor6)
			  %% Line 2097
			  <'jump_all'> when 'true' ->
			      To
			  ( <_cor7> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor7})
			    -| ['compiler_generated'] )
			end
		    in  let <St> =
			    %% Line 2099
			    apply 'output_state_actions1'/6
				(St0, State, Actions, 'true', {'to',_cor8}, SI)
			in  %% Line 2100
			    case <> of
			      %% Line 2101
			      <>
				  when call 'erlang':'=:='
					(To,
					 State) ->
				  %% Line 2102
				  apply 'output_state_actions1'/6
				      (St, _cor8, Common, 'true', 'normal', SI)
			      %% Line 2103
			      <> when 'true' ->
				  %% Line 2104
				  St
			    end
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2106
	  <St,State,JState,_X_XActions,_X_SI> when 'true' ->
	      %% Line 2107
	      apply 'fwrite'/3
		  (St, #{#<37>(8,1,'integer',['unsigned'|['big']]),
			 #<37>(8,1,'integer',['unsigned'|['big']]),
			 #<32>(8,1,'integer',['unsigned'|['big']]),
			 #<121>(8,1,'integer',['unsigned'|['big']]),
			 #<101>(8,1,'integer',['unsigned'|['big']]),
			 #<99>(8,1,'integer',['unsigned'|['big']]),
			 #<99>(8,1,'integer',['unsigned'|['big']]),
			 #<112>(8,1,'integer',['unsigned'|['big']]),
			 #<97>(8,1,'integer',['unsigned'|['big']]),
			 #<114>(8,1,'integer',['unsigned'|['big']]),
			 #<115>(8,1,'integer',['unsigned'|['big']]),
			 #<50>(8,1,'integer',['unsigned'|['big']]),
			 #<95>(8,1,'integer',['unsigned'|['big']]),
			 #<126>(8,1,'integer',['unsigned'|['big']]),
			 #<119>(8,1,'integer',['unsigned'|['big']]),
			 #<58>(8,1,'integer',['unsigned'|['big']]),
			 #<32>(8,1,'integer',['unsigned'|['big']]),
			 #<115>(8,1,'integer',['unsigned'|['big']]),
			 #<101>(8,1,'integer',['unsigned'|['big']]),
			 #<101>(8,1,'integer',['unsigned'|['big']]),
			 #<32>(8,1,'integer',['unsigned'|['big']]),
			 #<121>(8,1,'integer',['unsigned'|['big']]),
			 #<101>(8,1,'integer',['unsigned'|['big']]),
			 #<99>(8,1,'integer',['unsigned'|['big']]),
			 #<99>(8,1,'integer',['unsigned'|['big']]),
			 #<112>(8,1,'integer',['unsigned'|['big']]),
			 #<97>(8,1,'integer',['unsigned'|['big']]),
			 #<114>(8,1,'integer',['unsigned'|['big']]),
			 #<115>(8,1,'integer',['unsigned'|['big']]),
			 #<50>(8,1,'integer',['unsigned'|['big']]),
			 #<95>(8,1,'integer',['unsigned'|['big']]),
			 #<126>(8,1,'integer',['unsigned'|['big']]),
			 #<119>(8,1,'integer',['unsigned'|['big']]),
			 #<10>(8,1,'integer',['unsigned'|['big']]),
			 #<10>(8,1,'integer',['unsigned'|['big']])}#, [State|[JState|[]]])
	end
'output_state_actions1'/6 =
    %% Line 2109
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <St,State,[],IsFirst,'normal',_X_SI> when 'true' ->
	      %% Line 2110
	      apply 'output_state_actions_fini'/3
		  (State, IsFirst, St)
	  %% Line 2111
	  <St0,State,[],IsFirst,{'to',ToS},_X_SI> when 'true' ->
	      let <St> =
		  %% Line 2112
		  apply 'delim'/2
		      (St0, IsFirst)
	      in  %% Line 2113
		  apply 'fwrite'/3
		      (St, %% Line 2114
			   #{#<121>(8,1,'integer',['unsigned'|['big']]),
			     #<101>(8,1,'integer',['unsigned'|['big']]),
			     #<99>(8,1,'integer',['unsigned'|['big']]),
			     #<99>(8,1,'integer',['unsigned'|['big']]),
			     #<112>(8,1,'integer',['unsigned'|['big']]),
			     #<97>(8,1,'integer',['unsigned'|['big']]),
			     #<114>(8,1,'integer',['unsigned'|['big']]),
			     #<115>(8,1,'integer',['unsigned'|['big']]),
			     #<50>(8,1,'integer',['unsigned'|['big']]),
			     #<95>(8,1,'integer',['unsigned'|['big']]),
			     #<126>(8,1,'integer',['unsigned'|['big']]),
			     #<119>(8,1,'integer',['unsigned'|['big']]),
			     #<40>(8,1,'integer',['unsigned'|['big']]),
			     #<83>(8,1,'integer',['unsigned'|['big']]),
			     #<44>(8,1,'integer',['unsigned'|['big']]),
			     #<32>(8,1,'integer',['unsigned'|['big']]),
			     #<67>(8,1,'integer',['unsigned'|['big']]),
			     #<97>(8,1,'integer',['unsigned'|['big']]),
			     #<116>(8,1,'integer',['unsigned'|['big']]),
			     #<44>(8,1,'integer',['unsigned'|['big']]),
			     #<32>(8,1,'integer',['unsigned'|['big']]),
			     #<83>(8,1,'integer',['unsigned'|['big']]),
			     #<115>(8,1,'integer',['unsigned'|['big']]),
			     #<44>(8,1,'integer',['unsigned'|['big']]),
			     #<32>(8,1,'integer',['unsigned'|['big']]),
			     #<83>(8,1,'integer',['unsigned'|['big']]),
			     #<116>(8,1,'integer',['unsigned'|['big']]),
			     #<97>(8,1,'integer',['unsigned'|['big']]),
			     #<99>(8,1,'integer',['unsigned'|['big']]),
			     #<107>(8,1,'integer',['unsigned'|['big']]),
			     #<44>(8,1,'integer',['unsigned'|['big']]),
			     #<32>(8,1,'integer',['unsigned'|['big']]),
			     #<84>(8,1,'integer',['unsigned'|['big']]),
			     #<44>(8,1,'integer',['unsigned'|['big']]),
			     #<32>(8,1,'integer',['unsigned'|['big']]),
			     #<84>(8,1,'integer',['unsigned'|['big']]),
			     #<115>(8,1,'integer',['unsigned'|['big']]),
			     #<44>(8,1,'integer',['unsigned'|['big']]),
			     #<32>(8,1,'integer',['unsigned'|['big']]),
			     #<84>(8,1,'integer',['unsigned'|['big']]),
			     #<122>(8,1,'integer',['unsigned'|['big']]),
			     #<114>(8,1,'integer',['unsigned'|['big']]),
			     #<41>(8,1,'integer',['unsigned'|['big']]),
			     #<32>(8,1,'integer',['unsigned'|['big']]),
			     #<45>(8,1,'integer',['unsigned'|['big']]),
			     #<62>(8,1,'integer',['unsigned'|['big']]),
			     #<10>(8,1,'integer',['unsigned'|['big']]),
			     #<32>(8,1,'integer',['unsigned'|['big']]),
			     #<121>(8,1,'integer',['unsigned'|['big']]),
			     #<101>(8,1,'integer',['unsigned'|['big']]),
			     #<99>(8,1,'integer',['unsigned'|['big']]),
			     #<99>(8,1,'integer',['unsigned'|['big']]),
			     #<112>(8,1,'integer',['unsigned'|['big']]),
			     #<97>(8,1,'integer',['unsigned'|['big']]),
			     #<114>(8,1,'integer',['unsigned'|['big']]),
			     #<115>(8,1,'integer',['unsigned'|['big']]),
			     #<50>(8,1,'integer',['unsigned'|['big']]),
			     #<95>(8,1,'integer',['unsigned'|['big']]),
			     #<126>(8,1,'integer',['unsigned'|['big']]),
			     #<119>(8,1,'integer',['unsigned'|['big']]),
			     #<40>(8,1,'integer',['unsigned'|['big']]),
			     #<83>(8,1,'integer',['unsigned'|['big']]),
			     #<44>(8,1,'integer',['unsigned'|['big']]),
			     #<32>(8,1,'integer',['unsigned'|['big']]),
			     #<67>(8,1,'integer',['unsigned'|['big']]),
			     #<97>(8,1,'integer',['unsigned'|['big']]),
			     #<116>(8,1,'integer',['unsigned'|['big']]),
			     #<44>(8,1,'integer',['unsigned'|['big']]),
			     #<32>(8,1,'integer',['unsigned'|['big']]),
			     #<83>(8,1,'integer',['unsigned'|['big']]),
			     #<115>(8,1,'integer',['unsigned'|['big']]),
			     #<44>(8,1,'integer',['unsigned'|['big']]),
			     #<32>(8,1,'integer',['unsigned'|['big']]),
			     #<83>(8,1,'integer',['unsigned'|['big']]),
			     #<116>(8,1,'integer',['unsigned'|['big']]),
			     #<97>(8,1,'integer',['unsigned'|['big']]),
			     #<99>(8,1,'integer',['unsigned'|['big']]),
			     #<107>(8,1,'integer',['unsigned'|['big']]),
			     #<44>(8,1,'integer',['unsigned'|['big']]),
			     #<32>(8,1,'integer',['unsigned'|['big']]),
			     #<84>(8,1,'integer',['unsigned'|['big']]),
			     #<44>(8,1,'integer',['unsigned'|['big']]),
			     #<32>(8,1,'integer',['unsigned'|['big']]),
			     #<84>(8,1,'integer',['unsigned'|['big']]),
			     #<115>(8,1,'integer',['unsigned'|['big']]),
			     #<44>(8,1,'integer',['unsigned'|['big']]),
			     #<32>(8,1,'integer',['unsigned'|['big']]),
			     #<84>(8,1,'integer',['unsigned'|['big']]),
			     #<122>(8,1,'integer',['unsigned'|['big']]),
			     #<114>(8,1,'integer',['unsigned'|['big']]),
			     #<41>(8,1,'integer',['unsigned'|['big']]),
			     #<46>(8,1,'integer',['unsigned'|['big']]),
			     #<10>(8,1,'integer',['unsigned'|['big']]),
			     #<10>(8,1,'integer',['unsigned'|['big']])}#, %% Line 2116
									  [State|[ToS|[]]])
	  %% Line 2117
	  <St0,State,[{_cor21,Action = {'reduce',_cor22,_cor23,_cor24,_cor25,_cor26}}|[]],%% Line 2118
											  IsFirst,%% Line 2118
												  _X_End,%% Line 2118
													 SI> when 'true' ->
	      let <St> =
		  %% Line 2119
		  apply 'output_reduce'/6
		      (St0, State, [67|[97|[116]]], Action, IsFirst, SI)
	      in  %% Line 2120
		  apply 'fwrite'/3
		      (St, #{#<46>(8,1,'integer',['unsigned'|['big']]),
			     #<10>(8,1,'integer',['unsigned'|['big']]),
			     #<10>(8,1,'integer',['unsigned'|['big']])}#, [])
	  %% Line 2121
	  <St0,State,[{Lookahead,Action}|Tail],%% Line 2122
					       IsFirst,%% Line 2122
						       End,%% Line 2122
							   SI> when 'true' ->
	      let <_cor13> =
		  %% Line 2124
		  ( fun (_cor10,_cor9) ->
			case <_cor10,_cor9> of
			  <Terminal,{IsFst,St_0}> when 'true' ->
			      let <_cor8> =
				  %% Line 2126
				  apply 'output_action'/6
				      (St_0, State, Terminal, Action, IsFst, SI)
			      in  %% Line 2125
				  {'false',_cor8}
			  ( <_cor12,_cor11> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_cor12,_cor11})
				  -| [{'function_name',{'-output_state_actions1/6-fun-0-',2}}] )
			    -| ['compiler_generated'] )
			end
		    -| [{'id',{0,0,'-output_state_actions1/6-fun-0-'}}] )
	      in  %% Line 2123
		  case %% Line 2124
		       call 'lists':'foldl'
			   (_cor13, %% Line 2127
				    {IsFirst,St0}, %% Line 2127
						   Lookahead) of
		    <{_cor27,St}> when 'true' ->
			%% Line 2128
			apply 'output_state_actions1'/6
			    (St, State, Tail, 'false', End, SI)
		    ( <_cor14> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor14})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor20,_cor19,_cor18,_cor17,_cor16,_cor15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor20,_cor19,_cor18,_cor17,_cor16,_cor15})
		  -| [{'function_name',{'output_state_actions1',6}}] )
	    -| ['compiler_generated'] )
	end
'output_action'/6 =
    %% Line 2130
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <St,State,Terminal,Action = {'reduce',_cor18,_cor19,_cor20,_cor21,_cor22},IsFirst,SI> when 'true' ->
	      %% Line 2131
	      apply 'output_reduce'/6
		  (St, State, Terminal, Action, IsFirst, SI)
	  %% Line 2132
	  <St0,State,Terminal,{'shift',NewState,_cor23,_cor24,_cor25},IsFirst,_X_SI> when 'true' ->
	      let <St10> =
		  %% Line 2133
		  apply 'delim'/2
		      (St0, IsFirst)
	      in  let <_cor7> =
		      %% Line 2135
		      apply 'quoted_atom'/1
			  (Terminal)
		  in  let <St> =
			  %% Line 2134
			  apply 'fwrite'/3
			      (St10, #{#<121>(8,1,'integer',['unsigned'|['big']]),
				       #<101>(8,1,'integer',['unsigned'|['big']]),
				       #<99>(8,1,'integer',['unsigned'|['big']]),
				       #<99>(8,1,'integer',['unsigned'|['big']]),
				       #<112>(8,1,'integer',['unsigned'|['big']]),
				       #<97>(8,1,'integer',['unsigned'|['big']]),
				       #<114>(8,1,'integer',['unsigned'|['big']]),
				       #<115>(8,1,'integer',['unsigned'|['big']]),
				       #<50>(8,1,'integer',['unsigned'|['big']]),
				       #<95>(8,1,'integer',['unsigned'|['big']]),
				       #<126>(8,1,'integer',['unsigned'|['big']]),
				       #<119>(8,1,'integer',['unsigned'|['big']]),
				       #<40>(8,1,'integer',['unsigned'|['big']]),
				       #<83>(8,1,'integer',['unsigned'|['big']]),
				       #<44>(8,1,'integer',['unsigned'|['big']]),
				       #<32>(8,1,'integer',['unsigned'|['big']]),
				       #<126>(8,1,'integer',['unsigned'|['big']]),
				       #<115>(8,1,'integer',['unsigned'|['big']]),
				       #<44>(8,1,'integer',['unsigned'|['big']]),
				       #<32>(8,1,'integer',['unsigned'|['big']]),
				       #<83>(8,1,'integer',['unsigned'|['big']]),
				       #<115>(8,1,'integer',['unsigned'|['big']]),
				       #<44>(8,1,'integer',['unsigned'|['big']]),
				       #<32>(8,1,'integer',['unsigned'|['big']]),
				       #<83>(8,1,'integer',['unsigned'|['big']]),
				       #<116>(8,1,'integer',['unsigned'|['big']]),
				       #<97>(8,1,'integer',['unsigned'|['big']]),
				       #<99>(8,1,'integer',['unsigned'|['big']]),
				       #<107>(8,1,'integer',['unsigned'|['big']]),
				       #<44>(8,1,'integer',['unsigned'|['big']]),
				       #<32>(8,1,'integer',['unsigned'|['big']]),
				       #<84>(8,1,'integer',['unsigned'|['big']]),
				       #<44>(8,1,'integer',['unsigned'|['big']]),
				       #<32>(8,1,'integer',['unsigned'|['big']]),
				       #<84>(8,1,'integer',['unsigned'|['big']]),
				       #<115>(8,1,'integer',['unsigned'|['big']]),
				       #<44>(8,1,'integer',['unsigned'|['big']]),
				       #<32>(8,1,'integer',['unsigned'|['big']]),
				       #<84>(8,1,'integer',['unsigned'|['big']]),
				       #<122>(8,1,'integer',['unsigned'|['big']]),
				       #<114>(8,1,'integer',['unsigned'|['big']]),
				       #<41>(8,1,'integer',['unsigned'|['big']]),
				       #<32>(8,1,'integer',['unsigned'|['big']]),
				       #<45>(8,1,'integer',['unsigned'|['big']]),
				       #<62>(8,1,'integer',['unsigned'|['big']]),
				       #<10>(8,1,'integer',['unsigned'|['big']])}#, %% Line 2135
										    [State|[_cor7|[]]])
		      in  %% Line 2136
			  apply 'output_call_to_includefile'/2
			      (NewState, St)
	  %% Line 2137
	  <St0,State,Terminal,'accept',IsFirst,_X_SI> when 'true' ->
	      let <St10> =
		  %% Line 2138
		  apply 'delim'/2
		      (St0, IsFirst)
	      in  let <_cor10> =
		      %% Line 2141
		      apply 'quoted_atom'/1
			  (Terminal)
		  in  let <St> =
			  %% Line 2139
			  apply 'fwrite'/3
			      (St10, %% Line 2140
				     #{#<121>(8,1,'integer',['unsigned'|['big']]),
				       #<101>(8,1,'integer',['unsigned'|['big']]),
				       #<99>(8,1,'integer',['unsigned'|['big']]),
				       #<99>(8,1,'integer',['unsigned'|['big']]),
				       #<112>(8,1,'integer',['unsigned'|['big']]),
				       #<97>(8,1,'integer',['unsigned'|['big']]),
				       #<114>(8,1,'integer',['unsigned'|['big']]),
				       #<115>(8,1,'integer',['unsigned'|['big']]),
				       #<50>(8,1,'integer',['unsigned'|['big']]),
				       #<95>(8,1,'integer',['unsigned'|['big']]),
				       #<126>(8,1,'integer',['unsigned'|['big']]),
				       #<119>(8,1,'integer',['unsigned'|['big']]),
				       #<40>(8,1,'integer',['unsigned'|['big']]),
				       #<95>(8,1,'integer',['unsigned'|['big']]),
				       #<83>(8,1,'integer',['unsigned'|['big']]),
				       #<44>(8,1,'integer',['unsigned'|['big']]),
				       #<32>(8,1,'integer',['unsigned'|['big']]),
				       #<126>(8,1,'integer',['unsigned'|['big']]),
				       #<115>(8,1,'integer',['unsigned'|['big']]),
				       #<44>(8,1,'integer',['unsigned'|['big']]),
				       #<32>(8,1,'integer',['unsigned'|['big']]),
				       #<95>(8,1,'integer',['unsigned'|['big']]),
				       #<83>(8,1,'integer',['unsigned'|['big']]),
				       #<115>(8,1,'integer',['unsigned'|['big']]),
				       #<44>(8,1,'integer',['unsigned'|['big']]),
				       #<32>(8,1,'integer',['unsigned'|['big']]),
				       #<83>(8,1,'integer',['unsigned'|['big']]),
				       #<116>(8,1,'integer',['unsigned'|['big']]),
				       #<97>(8,1,'integer',['unsigned'|['big']]),
				       #<99>(8,1,'integer',['unsigned'|['big']]),
				       #<107>(8,1,'integer',['unsigned'|['big']]),
				       #<44>(8,1,'integer',['unsigned'|['big']]),
				       #<32>(8,1,'integer',['unsigned'|['big']]),
				       #<95>(8,1,'integer',['unsigned'|['big']]),
				       #<84>(8,1,'integer',['unsigned'|['big']]),
				       #<44>(8,1,'integer',['unsigned'|['big']]),
				       #<32>(8,1,'integer',['unsigned'|['big']]),
				       #<95>(8,1,'integer',['unsigned'|['big']]),
				       #<84>(8,1,'integer',['unsigned'|['big']]),
				       #<115>(8,1,'integer',['unsigned'|['big']]),
				       #<44>(8,1,'integer',['unsigned'|['big']]),
				       #<32>(8,1,'integer',['unsigned'|['big']]),
				       #<95>(8,1,'integer',['unsigned'|['big']]),
				       #<84>(8,1,'integer',['unsigned'|['big']]),
				       #<122>(8,1,'integer',['unsigned'|['big']]),
				       #<114>(8,1,'integer',['unsigned'|['big']]),
				       #<41>(8,1,'integer',['unsigned'|['big']]),
				       #<32>(8,1,'integer',['unsigned'|['big']]),
				       #<45>(8,1,'integer',['unsigned'|['big']]),
				       #<62>(8,1,'integer',['unsigned'|['big']]),
				       #<10>(8,1,'integer',['unsigned'|['big']])}#, %% Line 2141
										    [State|[_cor10|[]]])
		      in  %% Line 2142
			  apply 'fwrite'/3
			      (St, #{#<32>(8,1,'integer',['unsigned'|['big']]),
				     #<123>(8,1,'integer',['unsigned'|['big']]),
				     #<111>(8,1,'integer',['unsigned'|['big']]),
				     #<107>(8,1,'integer',['unsigned'|['big']]),
				     #<44>(8,1,'integer',['unsigned'|['big']]),
				     #<32>(8,1,'integer',['unsigned'|['big']]),
				     #<104>(8,1,'integer',['unsigned'|['big']]),
				     #<100>(8,1,'integer',['unsigned'|['big']]),
				     #<40>(8,1,'integer',['unsigned'|['big']]),
				     #<83>(8,1,'integer',['unsigned'|['big']]),
				     #<116>(8,1,'integer',['unsigned'|['big']]),
				     #<97>(8,1,'integer',['unsigned'|['big']]),
				     #<99>(8,1,'integer',['unsigned'|['big']]),
				     #<107>(8,1,'integer',['unsigned'|['big']]),
				     #<41>(8,1,'integer',['unsigned'|['big']]),
				     #<125>(8,1,'integer',['unsigned'|['big']])}#, [])
	  %% Line 2143
	  <St,_X_State,_X_Terminal,'nonassoc',_X_IsFirst,_X_SI> when 'true' ->
	      %% Line 2144
	      St
	  ( <_cor17,_cor16,_cor15,_cor14,_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor17,_cor16,_cor15,_cor14,_cor13,_cor12})
		  -| [{'function_name',{'output_action',6}}] )
	    -| ['compiler_generated'] )
	end
'output_call_to_includefile'/2 =
    %% Line 2146
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <NewState,St = {'yecc',_cor4,_cor5,_cor6,{1,1},_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39}> when 'true' ->
	      %% Line 2148
	      apply 'fwrite'/3
		  (St, #{#<32>(8,1,'integer',['unsigned'|['big']]),
			 #<121>(8,1,'integer',['unsigned'|['big']]),
			 #<101>(8,1,'integer',['unsigned'|['big']]),
			 #<99>(8,1,'integer',['unsigned'|['big']]),
			 #<99>(8,1,'integer',['unsigned'|['big']]),
			 #<112>(8,1,'integer',['unsigned'|['big']]),
			 #<97>(8,1,'integer',['unsigned'|['big']]),
			 #<114>(8,1,'integer',['unsigned'|['big']]),
			 #<115>(8,1,'integer',['unsigned'|['big']]),
			 #<49>(8,1,'integer',['unsigned'|['big']]),
			 #<40>(8,1,'integer',['unsigned'|['big']]),
			 #<84>(8,1,'integer',['unsigned'|['big']]),
			 #<115>(8,1,'integer',['unsigned'|['big']]),
			 #<44>(8,1,'integer',['unsigned'|['big']]),
			 #<32>(8,1,'integer',['unsigned'|['big']]),
			 #<84>(8,1,'integer',['unsigned'|['big']]),
			 #<122>(8,1,'integer',['unsigned'|['big']]),
			 #<114>(8,1,'integer',['unsigned'|['big']]),
			 #<44>(8,1,'integer',['unsigned'|['big']]),
			 #<32>(8,1,'integer',['unsigned'|['big']]),
			 #<126>(8,1,'integer',['unsigned'|['big']]),
			 #<119>(8,1,'integer',['unsigned'|['big']]),
			 #<44>(8,1,'integer',['unsigned'|['big']]),
			 #<32>(8,1,'integer',['unsigned'|['big']]),
			 #<91>(8,1,'integer',['unsigned'|['big']]),
			 #<83>(8,1,'integer',['unsigned'|['big']]),
			 #<32>(8,1,'integer',['unsigned'|['big']]),
			 #<124>(8,1,'integer',['unsigned'|['big']]),
			 #<32>(8,1,'integer',['unsigned'|['big']]),
			 #<83>(8,1,'integer',['unsigned'|['big']]),
			 #<115>(8,1,'integer',['unsigned'|['big']]),
			 #<93>(8,1,'integer',['unsigned'|['big']]),
			 #<44>(8,1,'integer',['unsigned'|['big']]),
			 #<32>(8,1,'integer',['unsigned'|['big']]),
			 #<91>(8,1,'integer',['unsigned'|['big']]),
			 #<84>(8,1,'integer',['unsigned'|['big']]),
			 #<32>(8,1,'integer',['unsigned'|['big']]),
			 #<124>(8,1,'integer',['unsigned'|['big']]),
			 #<32>(8,1,'integer',['unsigned'|['big']]),
			 #<83>(8,1,'integer',['unsigned'|['big']]),
			 #<116>(8,1,'integer',['unsigned'|['big']]),
			 #<97>(8,1,'integer',['unsigned'|['big']]),
			 #<99>(8,1,'integer',['unsigned'|['big']]),
			 #<107>(8,1,'integer',['unsigned'|['big']]),
			 #<93>(8,1,'integer',['unsigned'|['big']]),
			 #<41>(8,1,'integer',['unsigned'|['big']])}#, %% Line 2149
								      [NewState|[]])
	  %% Line 2150
	  <NewState,St> when 'true' ->
	      %% Line 2151
	      apply 'fwrite'/3
		  (St, #{#<32>(8,1,'integer',['unsigned'|['big']]),
			 #<121>(8,1,'integer',['unsigned'|['big']]),
			 #<101>(8,1,'integer',['unsigned'|['big']]),
			 #<99>(8,1,'integer',['unsigned'|['big']]),
			 #<99>(8,1,'integer',['unsigned'|['big']]),
			 #<112>(8,1,'integer',['unsigned'|['big']]),
			 #<97>(8,1,'integer',['unsigned'|['big']]),
			 #<114>(8,1,'integer',['unsigned'|['big']]),
			 #<115>(8,1,'integer',['unsigned'|['big']]),
			 #<49>(8,1,'integer',['unsigned'|['big']]),
			 #<40>(8,1,'integer',['unsigned'|['big']]),
			 #<83>(8,1,'integer',['unsigned'|['big']]),
			 #<44>(8,1,'integer',['unsigned'|['big']]),
			 #<32>(8,1,'integer',['unsigned'|['big']]),
			 #<126>(8,1,'integer',['unsigned'|['big']]),
			 #<119>(8,1,'integer',['unsigned'|['big']]),
			 #<44>(8,1,'integer',['unsigned'|['big']]),
			 #<32>(8,1,'integer',['unsigned'|['big']]),
			 #<83>(8,1,'integer',['unsigned'|['big']]),
			 #<115>(8,1,'integer',['unsigned'|['big']]),
			 #<44>(8,1,'integer',['unsigned'|['big']]),
			 #<32>(8,1,'integer',['unsigned'|['big']]),
			 #<83>(8,1,'integer',['unsigned'|['big']]),
			 #<116>(8,1,'integer',['unsigned'|['big']]),
			 #<97>(8,1,'integer',['unsigned'|['big']]),
			 #<99>(8,1,'integer',['unsigned'|['big']]),
			 #<107>(8,1,'integer',['unsigned'|['big']]),
			 #<44>(8,1,'integer',['unsigned'|['big']]),
			 #<32>(8,1,'integer',['unsigned'|['big']]),
			 #<84>(8,1,'integer',['unsigned'|['big']]),
			 #<44>(8,1,'integer',['unsigned'|['big']]),
			 #<32>(8,1,'integer',['unsigned'|['big']]),
			 #<84>(8,1,'integer',['unsigned'|['big']]),
			 #<115>(8,1,'integer',['unsigned'|['big']]),
			 #<44>(8,1,'integer',['unsigned'|['big']]),
			 #<32>(8,1,'integer',['unsigned'|['big']]),
			 #<84>(8,1,'integer',['unsigned'|['big']]),
			 #<122>(8,1,'integer',['unsigned'|['big']]),
			 #<114>(8,1,'integer',['unsigned'|['big']]),
			 #<41>(8,1,'integer',['unsigned'|['big']])}#, %% Line 2152
								      [NewState|[]])
	end
'output_state_actions_fini'/3 =
    %% Line 2154
    fun (_cor2,_cor1,_cor0) ->
	let <St10> =
	    %% Line 2156
	    apply 'delim'/2
		(_cor0, _cor1)
	in  let <St> =
		%% Line 2157
		apply 'fwrite'/3
		    (St10, #{#<121>(8,1,'integer',['unsigned'|['big']]),
			     #<101>(8,1,'integer',['unsigned'|['big']]),
			     #<99>(8,1,'integer',['unsigned'|['big']]),
			     #<99>(8,1,'integer',['unsigned'|['big']]),
			     #<112>(8,1,'integer',['unsigned'|['big']]),
			     #<97>(8,1,'integer',['unsigned'|['big']]),
			     #<114>(8,1,'integer',['unsigned'|['big']]),
			     #<115>(8,1,'integer',['unsigned'|['big']]),
			     #<50>(8,1,'integer',['unsigned'|['big']]),
			     #<95>(8,1,'integer',['unsigned'|['big']]),
			     #<126>(8,1,'integer',['unsigned'|['big']]),
			     #<119>(8,1,'integer',['unsigned'|['big']]),
			     #<40>(8,1,'integer',['unsigned'|['big']]),
			     #<95>(8,1,'integer',['unsigned'|['big']]),
			     #<44>(8,1,'integer',['unsigned'|['big']]),
			     #<32>(8,1,'integer',['unsigned'|['big']]),
			     #<95>(8,1,'integer',['unsigned'|['big']]),
			     #<44>(8,1,'integer',['unsigned'|['big']]),
			     #<32>(8,1,'integer',['unsigned'|['big']]),
			     #<95>(8,1,'integer',['unsigned'|['big']]),
			     #<44>(8,1,'integer',['unsigned'|['big']]),
			     #<32>(8,1,'integer',['unsigned'|['big']]),
			     #<95>(8,1,'integer',['unsigned'|['big']]),
			     #<44>(8,1,'integer',['unsigned'|['big']]),
			     #<32>(8,1,'integer',['unsigned'|['big']]),
			     #<84>(8,1,'integer',['unsigned'|['big']]),
			     #<44>(8,1,'integer',['unsigned'|['big']]),
			     #<32>(8,1,'integer',['unsigned'|['big']]),
			     #<95>(8,1,'integer',['unsigned'|['big']]),
			     #<44>(8,1,'integer',['unsigned'|['big']]),
			     #<32>(8,1,'integer',['unsigned'|['big']]),
			     #<95>(8,1,'integer',['unsigned'|['big']]),
			     #<41>(8,1,'integer',['unsigned'|['big']]),
			     #<32>(8,1,'integer',['unsigned'|['big']]),
			     #<45>(8,1,'integer',['unsigned'|['big']]),
			     #<62>(8,1,'integer',['unsigned'|['big']]),
			     #<10>(8,1,'integer',['unsigned'|['big']])}#, [_cor2|[]])
	    in  %% Line 2158
		apply 'fwrite'/3
		    (St, #{#<32>(8,1,'integer',['unsigned'|['big']]),
			   #<121>(8,1,'integer',['unsigned'|['big']]),
			   #<101>(8,1,'integer',['unsigned'|['big']]),
			   #<99>(8,1,'integer',['unsigned'|['big']]),
			   #<99>(8,1,'integer',['unsigned'|['big']]),
			   #<101>(8,1,'integer',['unsigned'|['big']]),
			   #<114>(8,1,'integer',['unsigned'|['big']]),
			   #<114>(8,1,'integer',['unsigned'|['big']]),
			   #<111>(8,1,'integer',['unsigned'|['big']]),
			   #<114>(8,1,'integer',['unsigned'|['big']]),
			   #<40>(8,1,'integer',['unsigned'|['big']]),
			   #<84>(8,1,'integer',['unsigned'|['big']]),
			   #<41>(8,1,'integer',['unsigned'|['big']]),
			   #<46>(8,1,'integer',['unsigned'|['big']]),
			   #<10>(8,1,'integer',['unsigned'|['big']]),
			   #<10>(8,1,'integer',['unsigned'|['big']])}#, [])
'output_reduce'/6 =
    %% Line 2160
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <St0,State,Terminal0,%% Line 2161
			       {'reduce',RuleNmbr,%% Line 2162
						  Head,%% Line 2163
						       NmbrOfDaughters,_cor36,_cor37},%% Line 2164
										      IsFirst,%% Line 2164
											      StateInfo> when 'true' ->
	      let <St10> =
		  %% Line 2165
		  apply 'delim'/2
		      (St0, IsFirst)
	      in  let <_cor7> =
		      %% Line 2166
		      case <> of
			%% Line 2167
			<>
			    when call 'erlang':'is_atom'
				  (Terminal0) ->
			    apply 'quoted_atom'/1
				(Terminal0)
			%% Line 2168
			<> when 'true' ->
			    Terminal0
		      end
		  in  let <St20> =
			  %% Line 2170
			  apply 'fwrite'/3
			      (St10, %% Line 2171
				     #{#<121>(8,1,'integer',['unsigned'|['big']]),
				       #<101>(8,1,'integer',['unsigned'|['big']]),
				       #<99>(8,1,'integer',['unsigned'|['big']]),
				       #<99>(8,1,'integer',['unsigned'|['big']]),
				       #<112>(8,1,'integer',['unsigned'|['big']]),
				       #<97>(8,1,'integer',['unsigned'|['big']]),
				       #<114>(8,1,'integer',['unsigned'|['big']]),
				       #<115>(8,1,'integer',['unsigned'|['big']]),
				       #<50>(8,1,'integer',['unsigned'|['big']]),
				       #<95>(8,1,'integer',['unsigned'|['big']]),
				       #<126>(8,1,'integer',['unsigned'|['big']]),
				       #<119>(8,1,'integer',['unsigned'|['big']]),
				       #<40>(8,1,'integer',['unsigned'|['big']]),
				       #<95>(8,1,'integer',['unsigned'|['big']]),
				       #<83>(8,1,'integer',['unsigned'|['big']]),
				       #<44>(8,1,'integer',['unsigned'|['big']]),
				       #<32>(8,1,'integer',['unsigned'|['big']]),
				       #<126>(8,1,'integer',['unsigned'|['big']]),
				       #<115>(8,1,'integer',['unsigned'|['big']]),
				       #<44>(8,1,'integer',['unsigned'|['big']]),
				       #<32>(8,1,'integer',['unsigned'|['big']]),
				       #<83>(8,1,'integer',['unsigned'|['big']]),
				       #<115>(8,1,'integer',['unsigned'|['big']]),
				       #<44>(8,1,'integer',['unsigned'|['big']]),
				       #<32>(8,1,'integer',['unsigned'|['big']]),
				       #<83>(8,1,'integer',['unsigned'|['big']]),
				       #<116>(8,1,'integer',['unsigned'|['big']]),
				       #<97>(8,1,'integer',['unsigned'|['big']]),
				       #<99>(8,1,'integer',['unsigned'|['big']]),
				       #<107>(8,1,'integer',['unsigned'|['big']]),
				       #<44>(8,1,'integer',['unsigned'|['big']]),
				       #<32>(8,1,'integer',['unsigned'|['big']]),
				       #<84>(8,1,'integer',['unsigned'|['big']]),
				       #<44>(8,1,'integer',['unsigned'|['big']]),
				       #<32>(8,1,'integer',['unsigned'|['big']]),
				       #<84>(8,1,'integer',['unsigned'|['big']]),
				       #<115>(8,1,'integer',['unsigned'|['big']]),
				       #<44>(8,1,'integer',['unsigned'|['big']]),
				       #<32>(8,1,'integer',['unsigned'|['big']]),
				       #<84>(8,1,'integer',['unsigned'|['big']]),
				       #<122>(8,1,'integer',['unsigned'|['big']]),
				       #<114>(8,1,'integer',['unsigned'|['big']]),
				       #<41>(8,1,'integer',['unsigned'|['big']]),
				       #<32>(8,1,'integer',['unsigned'|['big']]),
				       #<45>(8,1,'integer',['unsigned'|['big']]),
				       #<62>(8,1,'integer',['unsigned'|['big']]),
				       #<10>(8,1,'integer',['unsigned'|['big']])}#, %% Line 2172
										    [State|[_cor7|[]]])
		      in  let <_cor15,Ns> =
			      %% Line 2174
			      case <> of
				%% Line 2175
				<>
				    when call 'erlang':'<'
					  (NmbrOfDaughters,
					   2) ->
				    %% Line 2177
				    <St20,[83|[115]]>
				%% Line 2178
				<> when 'true' ->
				    let <_cor12> =
					%% Line 2180
					call 'erlang':'-'
					    (NmbrOfDaughters, 1)
				    in  let <_cor13> =
					    %% Line 2180
					    call 'lists':'duplicate'
						(_cor12, [95])
					in  let <Tmp> =
						%% Line 2180
						call 'string':'join'
						    (_cor13, %% Line 2181
							     [44])
					    in  %% Line 2182
						<apply 'fwrite'/3
						     (St20, #{#<32>(8,1,'integer',['unsigned'|['big']]),
							      #<91>(8,1,'integer',['unsigned'|['big']]),
							      #<126>(8,1,'integer',['unsigned'|['big']]),
							      #<115>(8,1,'integer',['unsigned'|['big']]),
							      #<124>(8,1,'integer',['unsigned'|['big']]),
							      #<78>(8,1,'integer',['unsigned'|['big']]),
							      #<115>(8,1,'integer',['unsigned'|['big']]),
							      #<115>(8,1,'integer',['unsigned'|['big']]),
							      #<93>(8,1,'integer',['unsigned'|['big']]),
							      #<32>(8,1,'integer',['unsigned'|['big']]),
							      #<61>(8,1,'integer',['unsigned'|['big']]),
							      #<32>(8,1,'integer',['unsigned'|['big']]),
							      #<83>(8,1,'integer',['unsigned'|['big']]),
							      #<115>(8,1,'integer',['unsigned'|['big']]),
							      #<44>(8,1,'integer',['unsigned'|['big']]),
							      #<10>(8,1,'integer',['unsigned'|['big']])}#, [Tmp|[]]),[78|[115|[115]]]>
			      end
			  in  let <_cor21,NewStack> =
				  %% Line 2184
				  case apply 'tokens'/2
					   (RuleNmbr, _cor15) of
				    %% Line 2185
				    <[{'var',_cor38,'__1'}|[]]>
					when call 'erlang':'=:='
					      (NmbrOfDaughters,
					       1) ->
					%% Line 2187
					<_cor15,[83|[116|[97|[99|[107]]]]]>
				    %% Line 2188
				    <_cor39> when 'true' ->
					let <_cor19> =
					    %% Line 2191
					    apply 'inlined_function_name'/2
						(State, Terminal0)
					in  %% Line 2190
					    <apply 'fwrite'/3
						 (_cor15, #{#<32>(8,1,'integer',['unsigned'|['big']]),
							    #<78>(8,1,'integer',['unsigned'|['big']]),
							    #<101>(8,1,'integer',['unsigned'|['big']]),
							    #<119>(8,1,'integer',['unsigned'|['big']]),
							    #<83>(8,1,'integer',['unsigned'|['big']]),
							    #<116>(8,1,'integer',['unsigned'|['big']]),
							    #<97>(8,1,'integer',['unsigned'|['big']]),
							    #<99>(8,1,'integer',['unsigned'|['big']]),
							    #<107>(8,1,'integer',['unsigned'|['big']]),
							    #<32>(8,1,'integer',['unsigned'|['big']]),
							    #<61>(8,1,'integer',['unsigned'|['big']]),
							    #<32>(8,1,'integer',['unsigned'|['big']]),
							    #<126>(8,1,'integer',['unsigned'|['big']]),
							    #<119>(8,1,'integer',['unsigned'|['big']]),
							    #<40>(8,1,'integer',['unsigned'|['big']]),
							    #<83>(8,1,'integer',['unsigned'|['big']]),
							    #<116>(8,1,'integer',['unsigned'|['big']]),
							    #<97>(8,1,'integer',['unsigned'|['big']]),
							    #<99>(8,1,'integer',['unsigned'|['big']]),
							    #<107>(8,1,'integer',['unsigned'|['big']]),
							    #<41>(8,1,'integer',['unsigned'|['big']]),
							    #<44>(8,1,'integer',['unsigned'|['big']]),
							    #<10>(8,1,'integer',['unsigned'|['big']])}#, %% Line 2191
													 [_cor19|[]]),[78|[101|[119|[83|[116|[97|[99|[107]]]]]]]]>
				  end
			      in  %% Line 2193
				  case <> of
				    %% Line 2194
				    <>
					when call 'erlang':'=:='
					      (NmbrOfDaughters,
					       0) ->
					let <NextState> =
					    %% Line 2195
					    apply 'goto'/3
						(State, Head, _cor21)
					in  %% Line 2196
					    case apply 'lookup_state'/2
						     (StateInfo, NextState) of
					      <{_cor40,I}>
						  when call 'erlang':'=:='
							(_cor40,
							 NextState) ->
						  %% Line 2197
						  case I of
						    <{'state_info',RO,Repr,C}> when 'true' ->
							let <_cor41,NextS> =
							    %% Line 2200
							    case <> of
							      %% Line 2201
							      <>
								  when call 'erlang':'=:='
									(RO,
									 'true') ->
								  <[95|[83]],[95|[83]]>
							      %% Line 2202
							      <> when 'true' ->
								  let <NextS> =
								      call 'io_lib':'fwrite'
									  ([126|[119]], [NextState|[]])
								  in  <NextS,NextS>
							    end
							in  let <St> =
								%% Line 2204
								apply 'fwrite'/3
								    (_cor21, #{#<126>(8,1,'integer',['unsigned'|['big']]),
									       #<115>(8,1,'integer',['unsigned'|['big']])}#, [C|[]])
							    in  %% Line 2206
								apply 'fwrite'/3
								    (St, %% Line 2207
									 #{#<32>(8,1,'integer',['unsigned'|['big']]),
									   #<121>(8,1,'integer',['unsigned'|['big']]),
									   #<101>(8,1,'integer',['unsigned'|['big']]),
									   #<99>(8,1,'integer',['unsigned'|['big']]),
									   #<99>(8,1,'integer',['unsigned'|['big']]),
									   #<112>(8,1,'integer',['unsigned'|['big']]),
									   #<97>(8,1,'integer',['unsigned'|['big']]),
									   #<114>(8,1,'integer',['unsigned'|['big']]),
									   #<115>(8,1,'integer',['unsigned'|['big']]),
									   #<50>(8,1,'integer',['unsigned'|['big']]),
									   #<95>(8,1,'integer',['unsigned'|['big']]),
									   #<126>(8,1,'integer',['unsigned'|['big']]),
									   #<119>(8,1,'integer',['unsigned'|['big']]),
									   #<40>(8,1,'integer',['unsigned'|['big']]),
									   #<126>(8,1,'integer',['unsigned'|['big']]),
									   #<115>(8,1,'integer',['unsigned'|['big']]),
									   #<44>(8,1,'integer',['unsigned'|['big']]),
									   #<32>(8,1,'integer',['unsigned'|['big']]),
									   #<126>(8,1,'integer',['unsigned'|['big']]),
									   #<115>(8,1,'integer',['unsigned'|['big']]),
									   #<44>(8,1,'integer',['unsigned'|['big']]),
									   #<32>(8,1,'integer',['unsigned'|['big']]),
									   #<91>(8,1,'integer',['unsigned'|['big']]),
									   #<126>(8,1,'integer',['unsigned'|['big']]),
									   #<119>(8,1,'integer',['unsigned'|['big']]),
									   #<32>(8,1,'integer',['unsigned'|['big']]),
									   #<124>(8,1,'integer',['unsigned'|['big']]),
									   #<32>(8,1,'integer',['unsigned'|['big']]),
									   #<83>(8,1,'integer',['unsigned'|['big']]),
									   #<115>(8,1,'integer',['unsigned'|['big']]),
									   #<93>(8,1,'integer',['unsigned'|['big']]),
									   #<44>(8,1,'integer',['unsigned'|['big']]),
									   #<32>(8,1,'integer',['unsigned'|['big']]),
									   #<126>(8,1,'integer',['unsigned'|['big']]),
									   #<115>(8,1,'integer',['unsigned'|['big']]),
									   #<44>(8,1,'integer',['unsigned'|['big']]),
									   #<32>(8,1,'integer',['unsigned'|['big']]),
									   #<84>(8,1,'integer',['unsigned'|['big']]),
									   #<44>(8,1,'integer',['unsigned'|['big']]),
									   #<32>(8,1,'integer',['unsigned'|['big']]),
									   #<84>(8,1,'integer',['unsigned'|['big']]),
									   #<115>(8,1,'integer',['unsigned'|['big']]),
									   #<44>(8,1,'integer',['unsigned'|['big']]),
									   #<32>(8,1,'integer',['unsigned'|['big']]),
									   #<84>(8,1,'integer',['unsigned'|['big']]),
									   #<122>(8,1,'integer',['unsigned'|['big']]),
									   #<114>(8,1,'integer',['unsigned'|['big']]),
									   #<41>(8,1,'integer',['unsigned'|['big']])}#, %% Line 2208
															[Repr|[NextS|[_cor7|[State|[NewStack|[]]]]]])
						    ( <_cor25> when 'true' ->
							  primop 'match_fail'
							      ({'badmatch',_cor25})
						      -| ['compiler_generated'] )
						  end
					      ( <_cor24> when 'true' ->
						    primop 'match_fail'
							({'badmatch',_cor24})
						-| ['compiler_generated'] )
					    end
				    %% Line 2209
				    <> when 'true' ->
					let <_cor29> =
					    %% Line 2212
					    apply 'function_name'/2
						('yeccgoto', Head)
					in  %% Line 2210
					    apply 'fwrite'/3
						(_cor21, %% Line 2211
							 #{#<32>(8,1,'integer',['unsigned'|['big']]),
							   #<126>(8,1,'integer',['unsigned'|['big']]),
							   #<119>(8,1,'integer',['unsigned'|['big']]),
							   #<40>(8,1,'integer',['unsigned'|['big']]),
							   #<104>(8,1,'integer',['unsigned'|['big']]),
							   #<100>(8,1,'integer',['unsigned'|['big']]),
							   #<40>(8,1,'integer',['unsigned'|['big']]),
							   #<126>(8,1,'integer',['unsigned'|['big']]),
							   #<115>(8,1,'integer',['unsigned'|['big']]),
							   #<41>(8,1,'integer',['unsigned'|['big']]),
							   #<44>(8,1,'integer',['unsigned'|['big']]),
							   #<32>(8,1,'integer',['unsigned'|['big']]),
							   #<126>(8,1,'integer',['unsigned'|['big']]),
							   #<115>(8,1,'integer',['unsigned'|['big']]),
							   #<44>(8,1,'integer',['unsigned'|['big']]),
							   #<32>(8,1,'integer',['unsigned'|['big']]),
							   #<126>(8,1,'integer',['unsigned'|['big']]),
							   #<115>(8,1,'integer',['unsigned'|['big']]),
							   #<44>(8,1,'integer',['unsigned'|['big']]),
							   #<32>(8,1,'integer',['unsigned'|['big']]),
							   #<126>(8,1,'integer',['unsigned'|['big']]),
							   #<115>(8,1,'integer',['unsigned'|['big']]),
							   #<44>(8,1,'integer',['unsigned'|['big']]),
							   #<32>(8,1,'integer',['unsigned'|['big']]),
							   #<84>(8,1,'integer',['unsigned'|['big']]),
							   #<44>(8,1,'integer',['unsigned'|['big']]),
							   #<32>(8,1,'integer',['unsigned'|['big']]),
							   #<84>(8,1,'integer',['unsigned'|['big']]),
							   #<115>(8,1,'integer',['unsigned'|['big']]),
							   #<44>(8,1,'integer',['unsigned'|['big']]),
							   #<32>(8,1,'integer',['unsigned'|['big']]),
							   #<84>(8,1,'integer',['unsigned'|['big']]),
							   #<122>(8,1,'integer',['unsigned'|['big']]),
							   #<114>(8,1,'integer',['unsigned'|['big']]),
							   #<41>(8,1,'integer',['unsigned'|['big']])}#, %% Line 2212
													[_cor29|[Ns|%% Line 2213
														    [_cor7|[Ns|[NewStack|[]]]]]])
				  end
	  ( <_cor35,_cor34,_cor33,_cor32,_cor31,_cor30> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor35,_cor34,_cor33,_cor32,_cor31,_cor30})
		  -| [{'function_name',{'output_reduce',6}}] )
	    -| ['compiler_generated'] )
	end
'delim'/2 =
    %% Line 2216
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <St,'true'> when 'true' ->
	      %% Line 2217
	      St
	  %% Line 2218
	  <St,'false'> when 'true' ->
	      %% Line 2219
	      apply 'fwrite'/3
		  (St, #{#<59>(8,1,'integer',['unsigned'|['big']]),
			 #<10>(8,1,'integer',['unsigned'|['big']])}#, [])
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'delim',2}}] )
	    -| ['compiler_generated'] )
	end
'quoted_atom'/1 =
    %% Line 2221
    fun (_cor0) ->
	%% Line 2222
	call 'io_lib':'fwrite'
	    (#{#<126>(8,1,'integer',['unsigned'|['big']]),
	       #<119>(8,1,'integer',['unsigned'|['big']])}#, [_cor0|[]])
'output_inlined'/3 =
    %% Line 2224
    fun (_cor2,_cor1,_cor0) ->
	let <_cor7> =
	    %% Line 2225
	    ( fun (_cor4,_cor3) ->
		  case <_cor4,_cor3> of
		    <{'user_code',_cor11,_cor12,InlinedFunctionName,%% Line 2226
								    Action},%% Line 2226
									    St_0> when 'true' ->
			%% Line 2227
			apply 'output_inlined'/4
			    (St_0, InlinedFunctionName, %% Line 2228
							Action, _cor0)
		    ( <_cor6,_cor5> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor6,_cor5})
			    -| [{'function_name',{'-output_inlined/3-fun-0-',2}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-output_inlined/3-fun-0-'}}] )
	in  %% Line 2225
	    call 'lists':'foldl'
		(_cor7, _cor2, _cor1)
'output_inlined'/4 =
    %% Line 2233
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 2234
	case _cor1 of
	  <{'reduce',RuleNmbr,_cor47,N_daughters,_cor48,_cor49}> when 'true' ->
	      %% Line 2235
	      case apply 'get_rule'/2
		       (RuleNmbr, _cor3) of
		<{'rule',_cor50,_cor51,_cor52,Tokens,_cor53,WF}> when 'true' ->
		    let <Line0> =
			%% Line 2236
			apply 'first_line'/1
			    (Tokens)
		    in  let <_cor7> =
			    %% Line 2237
			    apply 'last_line'/1
				(Tokens)
			in  let <NLines> =
				%% Line 2237
				call 'erlang':'-'
				    (_cor7, Line0)
			    in  let <_cor12> =
				    %% Line 2239
				    case <> of
				      %% Line 2240
				      <>
					  when call 'erlang':'=:='
						(WF,
						 'true') ->
					  _cor3
				      %% Line 2242
				      <>
					  when let <_cor9> =
						call 'erlang':'=:='
						    (WF, 'false')
					    in  let <_cor10> =
						    call 'erlang':'is_boolean'
							(WF)
						in  call 'erlang':'and'
							(_cor9, _cor10) ->
					  %% Line 2249
					  case _cor3 of
					    <{'yecc',_cor54,Outfile,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,_cor69,CurLine,_cor70,_cor71,_cor72,_cor73,_cor74,_cor75,_cor76,_cor77,_cor78,_cor79,_cor80,_cor81,_cor82,_cor83,_cor84,_cor85,_cor86,_cor87,_cor88}> when 'true' ->
						%% Line 2250
						apply 'output_file_directive'/3
						    (_cor3, Outfile, CurLine)
					    ( <_cor11> when 'true' ->
						  primop 'match_fail'
						      ({'badmatch',_cor11})
					      -| ['compiler_generated'] )
					  end
				      ( <> when 'true' ->
					    primop 'match_fail'
						('if_clause')
					-| ['compiler_generated'] )
				    end
				in  let <_cor14> =
					%% Line 2253
					call 'erlang':'-'
					    (Line0, 4)
				    in  let <CodeStartLine> =
					    %% Line 2253
					    call 'lists':'max'
						([0|[_cor14|[]]])
					in  let <St10> =
						%% Line 2254
						apply 'fwrite'/3
						    (_cor12, #{#<45>(8,1,'integer',['unsigned'|['big']]),
							       #<99>(8,1,'integer',['unsigned'|['big']]),
							       #<111>(8,1,'integer',['unsigned'|['big']]),
							       #<109>(8,1,'integer',['unsigned'|['big']]),
							       #<112>(8,1,'integer',['unsigned'|['big']]),
							       #<105>(8,1,'integer',['unsigned'|['big']]),
							       #<108>(8,1,'integer',['unsigned'|['big']]),
							       #<101>(8,1,'integer',['unsigned'|['big']]),
							       #<40>(8,1,'integer',['unsigned'|['big']]),
							       #<123>(8,1,'integer',['unsigned'|['big']]),
							       #<105>(8,1,'integer',['unsigned'|['big']]),
							       #<110>(8,1,'integer',['unsigned'|['big']]),
							       #<108>(8,1,'integer',['unsigned'|['big']]),
							       #<105>(8,1,'integer',['unsigned'|['big']]),
							       #<110>(8,1,'integer',['unsigned'|['big']]),
							       #<101>(8,1,'integer',['unsigned'|['big']]),
							       #<44>(8,1,'integer',['unsigned'|['big']]),
							       #<126>(8,1,'integer',['unsigned'|['big']]),
							       #<119>(8,1,'integer',['unsigned'|['big']]),
							       #<47>(8,1,'integer',['unsigned'|['big']]),
							       #<49>(8,1,'integer',['unsigned'|['big']]),
							       #<125>(8,1,'integer',['unsigned'|['big']]),
							       #<41>(8,1,'integer',['unsigned'|['big']]),
							       #<46>(8,1,'integer',['unsigned'|['big']]),
							       #<10>(8,1,'integer',['unsigned'|['big']])}#, [_cor2|[]])
					    in  let <St20> =
						    %% Line 2255
						    apply 'output_file_directive'/3
							(St10, _cor0, CodeStartLine)
						in  let <St30> =
							%% Line 2256
							apply 'fwrite'/3
							    (St20, #{#<126>(8,1,'integer',['unsigned'|['big']]),
								     #<119>(8,1,'integer',['unsigned'|['big']]),
								     #<40>(8,1,'integer',['unsigned'|['big']]),
								     #<95>(8,1,'integer',['unsigned'|['big']]),
								     #<95>(8,1,'integer',['unsigned'|['big']]),
								     #<83>(8,1,'integer',['unsigned'|['big']]),
								     #<116>(8,1,'integer',['unsigned'|['big']]),
								     #<97>(8,1,'integer',['unsigned'|['big']]),
								     #<99>(8,1,'integer',['unsigned'|['big']]),
								     #<107>(8,1,'integer',['unsigned'|['big']]),
								     #<48>(8,1,'integer',['unsigned'|['big']]),
								     #<41>(8,1,'integer',['unsigned'|['big']]),
								     #<32>(8,1,'integer',['unsigned'|['big']]),
								     #<45>(8,1,'integer',['unsigned'|['big']]),
								     #<62>(8,1,'integer',['unsigned'|['big']]),
								     #<10>(8,1,'integer',['unsigned'|['big']])}#, [_cor2|[]])
						    in  let <_cor31,Stack> =
							    %% Line 2259
							    case N_daughters of
							      %% Line 2260
							      <0> when 'true' ->
								  %% Line 2262
								  <St30,[95|[95|[83|[116|[97|[99|[107|[48]]]]]]]]>
							      %% Line 2263
							      <_cor89> when 'true' ->
								  let <_cor25> =
								      %% Line 2265
								      ( fun (_cor23) ->
									    [[44|[95|[95]]]|[_cor23|[]]]
									-| [{'id',{0,0,'-output_inlined/4-fun-0-'}}] )
								  in  let <_cor22> =
									  %% Line 2266
									  call 'lists':'seq'
									      (N_daughters, 1, -1)
								      in  let <_cor26> =
									      %% Line 2265
									      call 'lists':'flatmap'
										  (_cor25, _cor22)
									  in  let <A> =
										  %% Line 2265
										  call 'lists':'concat'
										      (_cor26)
									      in  let <_cor28> =
										      %% Line 2268
										      call 'erlang':'tl'
											  (A)
										  in  let <_cor29> =
											  %% Line 2268
											  call 'lists':'append'
											      ([[91]|[_cor28|[[32|[124|[32|[95|[95|[83|[116|[97|[99|[107|[93]]]]]]]]]]]]]])
										      in  %% Line 2267
											  <apply 'fwrite'/3
											       (St30, #{#<32>(8,1,'integer',['unsigned'|['big']]),
													#<126>(8,1,'integer',['unsigned'|['big']]),
													#<115>(8,1,'integer',['unsigned'|['big']]),
													#<32>(8,1,'integer',['unsigned'|['big']]),
													#<61>(8,1,'integer',['unsigned'|['big']]),
													#<32>(8,1,'integer',['unsigned'|['big']]),
													#<95>(8,1,'integer',['unsigned'|['big']]),
													#<95>(8,1,'integer',['unsigned'|['big']]),
													#<83>(8,1,'integer',['unsigned'|['big']]),
													#<116>(8,1,'integer',['unsigned'|['big']]),
													#<97>(8,1,'integer',['unsigned'|['big']]),
													#<99>(8,1,'integer',['unsigned'|['big']]),
													#<107>(8,1,'integer',['unsigned'|['big']]),
													#<48>(8,1,'integer',['unsigned'|['big']]),
													#<44>(8,1,'integer',['unsigned'|['big']]),
													#<10>(8,1,'integer',['unsigned'|['big']])}#, %% Line 2268
																		     [_cor29|[]]),[95|[95|[83|[116|[97|[99|[107]]]]]]]>
							    end
							in  %% Line 2270
							    ( case _cor31 of
								( <( {'yecc',_cor90,_cor91,_cor92,_cor93,_cor94,_cor95,_cor96,_cor97,_cor98,_cor99,_cor100,_cor101,_cor102,_cor103,_cor104,_cor105,_cor106,_rec167,_cor107,_cor108,_cor109,_cor110,_cor111,_cor112,_cor113,_cor114,_cor115,_cor116,_cor117,_cor118,_cor119,_cor120,_cor121,_cor122,_cor123,_cor124,_cor125}
								     -| ['compiler_generated'] )> when 'true' ->
								      let <_rec165> =
									  call 'erlang':'+'
									      (_rec167, NLines)
								      in  let <_cor38> =
									      call 'erlang':'setelement'
										  (19, _cor31, _rec165)
									  in  %% Line 2272
									      ( case _cor38 of
										  ( <( {'yecc',_cor165,_cor166,_cor167,_cor168,_cor169,_rec168,_cor170,_cor171,_cor172,_cor173,_cor174,_cor175,_cor176,_cor177,_cor178,_cor179,_cor180,_cor181,_cor182,_cor183,_cor184,_cor185,_cor186,_cor187,_cor188,_cor189,_cor190,_cor191,_cor192,_cor193,_cor194,_cor195,_cor196,_cor197,_cor198,_cor199,_cor200}
										       -| ['compiler_generated'] )> when 'true' ->
											let <_cor42> =
											    apply 'pp_tokens'/3
												(Tokens, Line0, _rec168)
											in  apply 'fwrite'/3
												(_cor38, #{#<32>(8,1,'integer',['unsigned'|['big']]),
													   #<91>(8,1,'integer',['unsigned'|['big']]),
													   #<98>(8,1,'integer',['unsigned'|['big']]),
													   #<101>(8,1,'integer',['unsigned'|['big']]),
													   #<103>(8,1,'integer',['unsigned'|['big']]),
													   #<105>(8,1,'integer',['unsigned'|['big']]),
													   #<110>(8,1,'integer',['unsigned'|['big']]),
													   #<10>(8,1,'integer',['unsigned'|['big']]),
													   #<32>(8,1,'integer',['unsigned'|['big']]),
													   #<32>(8,1,'integer',['unsigned'|['big']]),
													   #<126>(8,1,'integer',['unsigned'|['big']]),
													   #<116>(8,1,'integer',['unsigned'|['big']]),
													   #<115>(8,1,'integer',['unsigned'|['big']]),
													   #<10>(8,1,'integer',['unsigned'|['big']]),
													   #<32>(8,1,'integer',['unsigned'|['big']]),
													   #<32>(8,1,'integer',['unsigned'|['big']]),
													   #<101>(8,1,'integer',['unsigned'|['big']]),
													   #<110>(8,1,'integer',['unsigned'|['big']]),
													   #<100>(8,1,'integer',['unsigned'|['big']]),
													   #<32>(8,1,'integer',['unsigned'|['big']]),
													   #<124>(8,1,'integer',['unsigned'|['big']]),
													   #<32>(8,1,'integer',['unsigned'|['big']]),
													   #<126>(8,1,'integer',['unsigned'|['big']]),
													   #<115>(8,1,'integer',['unsigned'|['big']]),
													   #<93>(8,1,'integer',['unsigned'|['big']]),
													   #<46>(8,1,'integer',['unsigned'|['big']]),
													   #<10>(8,1,'integer',['unsigned'|['big']]),
													   #<10>(8,1,'integer',['unsigned'|['big']])}#, [_cor42|[Stack|[]]])
										    -| ['compiler_generated'] )
										  ( <_cor201> when 'true' ->
											( call ( 'erlang'
												 -| ['compiler_generated'] ):( 'error'
															       -| ['compiler_generated'] )
											      (( {'badrecord','yecc'}
												 -| ['compiler_generated'] ))
											  -| ['compiler_generated'] )
										    -| ['compiler_generated'] )
										end
										-| ['compiler_generated'] )
								  -| ['compiler_generated'] )
								( <_cor126> when 'true' ->
								      ( call ( 'erlang'
									       -| ['compiler_generated'] ):( 'error'
													     -| ['compiler_generated'] )
									    (( {'badrecord','yecc'}
									       -| ['compiler_generated'] ))
									-| ['compiler_generated'] )
								  -| ['compiler_generated'] )
							      end
							      -| ['compiler_generated'] )
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor5})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor4})
	    -| ['compiler_generated'] )
	end
'inlined_function_name'/2 =
    %% Line 2274
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <State,[67|[97|[116]]]> when 'true' ->
	      %% Line 2275
	      apply 'inlined_function_name'/2
		  (State, [])
	  %% Line 2276
	  <State,Terminal> when 'true' ->
	      let <_cor2> =
		  %% Line 2277
		  call 'lists':'concat'
		      (['yeccpars2_'|[State|['_'|[Terminal|[]]]]])
	      in  %% Line 2277
		  call 'erlang':'list_to_atom'
		      (_cor2)
	end
'function_name'/2 =
    %% Line 2280
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 2281
	    apply 'quoted_atom'/1
		(_cor0)
	in  let <_cor3> =
		%% Line 2281
		call 'lists':'concat'
		    ([_cor1|['_'|_cor2]])
	    in  %% Line 2281
		call 'erlang':'list_to_atom'
		    (_cor3)
'rule'/2 =
    %% Line 2283
    fun (_cor1,_cor0) ->
	%% Line 2285
	( case _cor0 of
	    ( <( {'yecc',_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_rec169,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42}
		 -| ['compiler_generated'] )> when 'true' ->
		  case call 'dict':'fetch'
			   (_cor1, _rec169) of
		    <{'rule',N,Line,Symbols,_cor44,_cor45,_cor46}> when 'true' ->
			%% Line 2286
			{Symbols,Line,N}
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor4})
		      -| ['compiler_generated'] )
		  end
	      -| ['compiler_generated'] )
	    ( <_cor43> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','yecc'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'get_rule'/2 =
    %% Line 2288
    fun (_cor1,_cor0) ->
	%% Line 2289
	( case _cor0 of
	    ( <( {'yecc',_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_rec170,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41}
		 -| ['compiler_generated'] )> when 'true' ->
		  call 'dict':'fetch'
		      (_cor1, _rec170)
	      -| ['compiler_generated'] )
	    ( <_cor42> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','yecc'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'tokens'/2 =
    %% Line 2291
    fun (_cor1,_cor0) ->
	%% Line 2292
	( case _cor0 of
	    ( <( {'yecc',_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_rec171,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43}
		 -| ['compiler_generated'] )> when 'true' ->
		  %% Line 2293
		  ( case call 'dict':'fetch'
			     (_cor1, _rec171) of
		      ( <( {'rule',_cor45,_cor46,_cor47,_rec172,_cor48,_cor49}
			   -| ['compiler_generated'] )> when 'true' ->
			    _rec172
			-| ['compiler_generated'] )
		      ( <_cor50> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','rule'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	    ( <_cor44> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','yecc'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'goto'/3 =
    %% Line 2295
    fun (_cor2,_cor1,_cor0) ->
	%% Line 2296
	( case _cor0 of
	    ( <( {'yecc',_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_rec173,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44}
		 -| ['compiler_generated'] )> when 'true' ->
		  case call 'ets':'lookup'
			   (_rec173, {_cor2,_cor1}) of
		    %% Line 2297
		    <[{_cor46,To}|[]]> when 'true' ->
			%% Line 2298
			To
		    %% Line 2299
		    <[]> when 'true' ->
			%% Line 2300
			call 'erlang':'error'
			    ({'error_in_goto_table',_cor2,_cor1})
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor5})
		      -| ['compiler_generated'] )
		  end
	      -| ['compiler_generated'] )
	    ( <_cor45> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','yecc'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'set_empty'/0 =
    %% Line 2311
    fun () ->
	%% Line 2312
	0
'set_add'/2 =
    %% Line 2314
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 2315
	    call 'erlang':'bsl'
		(1, _cor1)
	in  %% Line 2315
	    call 'erlang':'bor'
		(_cor2, _cor0)
'set_member'/2 =
    %% Line 2318
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 2319
	    call 'erlang':'bsl'
		(1, _cor1)
	in  let <_cor3> =
		%% Line 2319
		call 'erlang':'band'
		    (_cor2, _cor0)
	    in  %% Line 2319
		call 'erlang':'=/='
		    (_cor3, 0)
'set_delete'/2 =
    %% Line 2323
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 2324
	    call 'erlang':'bsl'
		(1, _cor1)
	in  %% Line 2324
	    call 'erlang':'bxor'
		(_cor2, _cor0)
'set_union'/2 =
    %% Line 2327
    fun (_cor1,_cor0) ->
	%% Line 2328
	call 'erlang':'bor'
	    (_cor1, _cor0)
'set_is_subset'/2 =
    %% Line 2331
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 2332
	    call 'erlang':'band'
		(_cor1, _cor0)
	in  %% Line 2332
	    call 'erlang':'=:='
		(_cor2, _cor1)
'empty_member'/1 =
    %% Line 2334
    fun (_cor0) ->
	( let <_cor3> =
	      ( call ( 'erlang'
		       -| ['compiler_generated'] ):( 'band'
						     -| ['compiler_generated'] )
		    (1, _cor0)
		-| ['compiler_generated'] )
	  in  ( call ( 'erlang'
		       -| ['compiler_generated'] ):( '=/='
						     -| ['compiler_generated'] )
		    (( _cor3
		       -| ['compiler_generated'] ), ( 0
						      -| ['compiler_generated'] ))
		-| ['compiler_generated'] )
	  -| ['compiler_generated'] )
'empty_delete'/1 =
    %% Line 2337
    fun (_cor0) ->
	( call ( 'erlang'
		 -| ['compiler_generated'] ):( 'bxor'
					       -| ['compiler_generated'] )
	      (1, _cor0)
	  -| ['compiler_generated'] )
'code_symbols'/2 =
    %% Line 2340
    fun (_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 2341
	    ( fun (_cor2) ->
		  call 'ets':'lookup_element'
		      (_cor0, _cor2, 2)
	      -| [{'id',{0,0,'-code_symbols/2-fun-0-'}}] )
	in  %% Line 2341
	    call 'lists':'map'
		(_cor4, _cor1)
'decode_symbol'/2 =
    %% Line 2343
    fun (_cor1,_cor0) ->
	%% Line 2344
	call 'ets':'lookup_element'
	    (_cor0, _cor1, 1)
'code_terminal'/2 =
    %% Line 2346
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 2347
	    call 'ets':'lookup_element'
		(_cor0, _cor1, 2)
	in  %% Line 2347
	    apply 'set_add'/2
		(_cor2, 0)
'decode_terminals'/2 =
    %% Line 2349
    fun (_cor1,_cor0) ->
	%% Line 2350
	case call 'erlang':'get'
		 (_cor1) of
	  %% Line 2351
	  <'undefined'> when 'true' ->
	      let <Symbols> =
		  %% Line 2352
		  apply 'decode_terminals'/3
		      (_cor1, 0, _cor0)
	      in  do  %% Line 2353
		      call 'erlang':'put'
			  (_cor1, Symbols)
		      %% Line 2354
		      Symbols
	  %% Line 2355
	  <Symbols> when 'true' ->
	      %% Line 2356
	      Symbols
	end
'decode_terminals'/3 =
    %% Line 2359
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <0,_X_I,_X_InvSymbolTab> when 'true' ->
	      %% Line 2360
	      []
	  %% Line 2361
	  <BM,I,InvSymbolTab> when 'true' ->
	      ( let <_fol4635> =
		    ( call ( 'erlang'
			     -| ['compiler_generated'] ):( 'bsl'
							   -| ['compiler_generated'] )
			  (( 1
			     -| ['compiler_generated'] ), %% Line 2362
							  I)
		      -| ['compiler_generated'] )
		in  ( let <_cor3> =
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'band'
								 -| ['compiler_generated'] )
				(_fol4635, %% Line 2362
					   BM)
			    -| ['compiler_generated'] )
		      in  %% Line 2362
			  case <> of
			    %% Line 2363
			    <>
				when ( call ( 'erlang'
					   -| ['compiler_generated'] ):( '=/='
									 -| ['compiler_generated'] )
					(( _cor3
					   -| ['compiler_generated'] ),
					 ( 0
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] ) ->
				let <_cor3> =
				    %% Line 2364
				    call 'ets':'lookup_element'
					(InvSymbolTab, I, 1)
				in  ( let <_fol4632> =
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'bsl'
										 -| ['compiler_generated'] )
						(( 1
						   -| ['compiler_generated'] ), %% Line 2365
										I)
					    -| ['compiler_generated'] )
				      in  let <_cor5> =
					      ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'bxor'
										     -| ['compiler_generated'] )
						    (_fol4632, %% Line 2365
							       BM)
						-| ['compiler_generated'] )
					  in  let <_cor4> =
						  %% Line 2365
						  call 'erlang':'+'
						      (I, 1)
					      in  let <_cor6> =
						      %% Line 2365
						      apply 'decode_terminals'/3
							  (_cor5, _cor4, InvSymbolTab)
						  in  %% Line 2364
						      [_cor3|_cor6]
				      -| ['compiler_generated'] )
			    %% Line 2366
			    <> when 'true' ->
				let <_cor7> =
				    %% Line 2367
				    call 'erlang':'+'
					(I, 1)
				in  %% Line 2367
				    apply 'decode_terminals'/3
					(BM, _cor7, InvSymbolTab)
			  end
		      -| ['compiler_generated'] )
		-| ['compiler_generated'] )
	end
'set_add_terminal'/2 =
    %% Line 2370
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{_X_Symbol,TerminalNum},BM> when 'true' ->
	      %% Line 2371
	      apply 'set_add'/2
		  (TerminalNum, BM)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'set_add_terminal',2}}] )
	    -| ['compiler_generated'] )
	end
'is_terminal'/2 =
    %% Line 2374
    fun (_cor1,_cor0) ->
	%% Line 2375
	call 'erlang':'>='
	    (_cor0, 0)
'left_corner_symbol_table'/1 =
    %% Line 2377
    fun (_cor0) ->
	%% Line 2378
	( case _cor0 of
	    ( <( {'yecc',_cor3,_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_rec174,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38}
		 -| ['compiler_generated'] )> when 'true' ->
		  _rec174
	      -| ['compiler_generated'] )
	    ( <_cor39> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','yecc'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'intersect'/2 =
    %% Line 2425
    fun (_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 2426
	    call 'ordsets':'from_list'
		(_cor1)
	in  let <_cor2> =
		%% Line 2427
		call 'ordsets':'from_list'
		    (_cor0)
	    in  let <_cor4> =
		    %% Line 2426
		    call 'ordsets':'intersection'
			(_cor3, _cor2)
		in  %% Line 2426
		    call 'ordsets':'to_list'
			(_cor4)
'format_symbols'/1 =
    %% Line 2429
    fun (_cor0) ->
	case _cor0 of
	  <[Sym|Syms]> when 'true' ->
	      let <_cor1> =
		  %% Line 2430
		  apply 'format_symbol'/1
		      (Sym)
	      in  let <_cor2> =
		      %% Line 2430
		      apply 'format_symbols1'/1
			  (Syms)
		  in  %% Line 2430
		      call 'lists':'concat'
			  ([_cor1|_cor2])
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'format_symbols',1}}] )
	    -| ['compiler_generated'] )
	end
'format_symbols1'/1 =
    %% Line 2432
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      %% Line 2433
	      []
	  %% Line 2434
	  <[H|T]> when 'true' ->
	      let <_cor1> =
		  %% Line 2435
		  apply 'format_symbol'/1
		      (H)
	      in  let <_cor2> =
		      %% Line 2435
		      apply 'format_symbols1'/1
			  (T)
		  in  %% Line 2435
		      [[32]|[_cor1|_cor2]]
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'format_symbols1',1}}] )
	    -| ['compiler_generated'] )
	end
'include'/3 =
    %% Line 2437
    fun (_cor2,_cor1,_cor0) ->
	%% Line 2438
	case call 'file':'open'
		 (_cor1, ['read']) of
	  %% Line 2439
	  <{'error',Reason}> when 'true' ->
	      let <_cor3> =
		  %% Line 2440
		  apply 'add_error'/4
		      (_cor1, 'none', {'file_error',Reason}, _cor2)
	      in  %% Line 2440
		  call 'erlang':'throw'
		      (_cor3)
	  %% Line 2441
	  <{'ok',Inport}> when 'true' ->
	      let <_X_> =
		  %% Line 2442
		  ( call 'epp':'set_encoding'
			(Inport)
		    -| ['result_not_wanted'] )
	      in  let <Line> =
		      %% Line 2443
		      call 'io':'get_line'
			  (Inport, '')
		  in  %% Line 2444
		      letrec
			  'after$^0'/0 =
			      fun () ->
				  let <_cor16> =
				      %% Line 2445
				      call 'file':'close'
					  (Inport)
				  in  %% Line 2445
				      case _cor16 of
					<'ok'> when 'true' ->
					    ( _cor16
					      -| ['compiler_generated'] )
					( <_cor7> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_cor7})
					  -| ['compiler_generated'] )
				      end
		      in  try
			      let <_cor6> =
				  apply 'include1'/6
				      (Line, Inport, _cor0, _cor1, 1, _cor2)
			      in  call 'erlang':'-'
				      (_cor6, 1)
			  of <_cor8> ->
			      do  ( apply 'after$^0'/0
					()
				    -| ['compiler_generated'] )
				  _cor8
			  catch <_cor11,_cor10,_cor9> ->
			      do  ( apply 'after$^0'/0
					()
				    -| ['compiler_generated'] )
				  primop 'raise'
				      (_cor9, _cor10)
	  ( <_cor12> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor12})
	    -| ['compiler_generated'] )
	end
'include1'/6 =
    %% Line 2449
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <'eof',_cor18,_cor19,_X_File,L,_X_St> when 'true' ->
	      %% Line 2450
	      L
	  %% Line 2451
	  <_X_Error = {'error',_cor20},_X_Inport,_X_Outport,File,L,St> when 'true' ->
	      let <_cor6> =
		  %% Line 2452
		  apply 'add_error'/4
		      (File, L, 'cannot_parse', St)
	      in  %% Line 2452
		  call 'erlang':'throw'
		      (_cor6)
	  %% Line 2453
	  <Line,Inport,Outport,File,L,St> when 'true' ->
	      let <_cor8> =
		  %% Line 2454
		  case call 'lists':'member'
			   (10, Line) of
		    %% Line 2455
		    <'true'> when 'true' ->
			1
		    %% Line 2456
		    <'false'> when 'true' ->
			0
		    ( <_cor7> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor7})
		      -| ['compiler_generated'] )
		  end
	      in  do  %% Line 2458
		      call 'io':'put_chars'
			  (Outport, Line)
		      let <_cor11> =
			  %% Line 2459
			  call 'io':'get_line'
			      (Inport, '')
		      in  let <_cor10> =
			      %% Line 2459
			      call 'erlang':'+'
				  (L, _cor8)
			  in  %% Line 2459
			      apply 'include1'/6
				  (_cor11, Inport, Outport, File, _cor10, St)
	end
'includefile_version'/1 =
    %% Line 2461
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      %% Line 2462
	      {1,4}
	  %% Line 2463
	  <Includefile> when 'true' ->
	      %% Line 2464
	      case call 'epp':'open'
		       (Includefile, []) of
		%% Line 2465
		<{'ok',Epp}> when 'true' ->
		    %% Line 2466
		    letrec
			'after$^0'/0 =
			    fun () ->
				%% Line 2469
				call 'epp':'close'
				    (Epp)
		    in  try
			    %% Line 2467
			    apply 'parse_file'/1
				(Epp)
			of <_cor1> ->
			    do  ( apply 'after$^0'/0
				      ()
				  -| ['compiler_generated'] )
				_cor1
			catch <_cor4,_cor3,_cor2> ->
			    do  ( apply 'after$^0'/0
				      ()
				  -| ['compiler_generated'] )
				primop 'raise'
				    (_cor2, _cor3)
		%% Line 2471
		<{'error',_X_Error}> when 'true' ->
		    %% Line 2472
		    {1,1}
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor5})
		  -| ['compiler_generated'] )
	      end
	end
'parse_file'/1 =
    %% Line 2475
    fun (_cor0) ->
	%% Line 2476
	case call 'epp':'parse_erl_form'
		 (_cor0) of
	  %% Line 2477
	  <{'ok',{'function',_X_Line,'yeccpars1',7,_X_Clauses}}> when 'true' ->
	      %% Line 2478
	      {1,4}
	  %% Line 2479
	  <{'eof',_X_Line}> when 'true' ->
	      %% Line 2480
	      {1,1}
	  %% Line 2481
	  <_X_Form> when 'true' ->
	      %% Line 2482
	      apply 'parse_file'/1
		  (_cor0)
	end
'pp_tokens'/3 =
    %% Line 2486
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 2487
	    apply 'pp_tokens1'/4
		(_cor2, _cor1, _cor0, [])
	in  %% Line 2487
	    call 'lists':'concat'
		(_cor3)
'pp_tokens1'/4 =
    %% Line 2489
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[],_X_Line0,_X_Enc,_X_T0> when 'true' ->
	      %% Line 2490
	      []
	  %% Line 2491
	  <[T|Ts],Line0,Enc,T0> when 'true' ->
	      let <Line> =
		  %% Line 2492
		  call 'erlang':'element'
		      (2, T)
	      in  let <_cor5> =
		      %% Line 2493
		      apply 'pp_sep'/3
			  (Line, Line0, T0)
		  in  let <_cor6> =
			  %% Line 2493
			  apply 'pp_symbol'/2
			      (T, Enc)
		      in  let <_cor7> =
			      %% Line 2493
			      apply 'pp_tokens1'/4
				  (Ts, Line, Enc, T)
			  in  %% Line 2493
			      [_cor5|[_cor6|_cor7]]
	  ( <_cor11,_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9,_cor8})
		  -| [{'function_name',{'pp_tokens1',4}}] )
	    -| ['compiler_generated'] )
	end
'pp_symbol'/2 =
    %% Line 2495
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'var',_cor4,Var},_X_Enc> when 'true' ->
	      Var
	  %% Line 2496
	  <{'string',_cor5,String},'latin1'> when 'true' ->
	      %% Line 2497
	      call 'io_lib':'write_string_as_latin1'
		  (String)
	  %% Line 2498
	  <{'string',_cor6,String},_X_Enc> when 'true' ->
	      call 'io_lib':'write_string'
		  (String)
	  %% Line 2499
	  <{_cor7,_cor8,Symbol},'latin1'> when 'true' ->
	      call 'io_lib':'fwrite'
		  (#{#<126>(8,1,'integer',['unsigned'|['big']]),
		     #<112>(8,1,'integer',['unsigned'|['big']])}#, [Symbol|[]])
	  %% Line 2500
	  <{_cor9,_cor10,Symbol},_X_Enc> when 'true' ->
	      call 'io_lib':'fwrite'
		  (#{#<126>(8,1,'integer',['unsigned'|['big']]),
		     #<116>(8,1,'integer',['unsigned'|['big']]),
		     #<112>(8,1,'integer',['unsigned'|['big']])}#, [Symbol|[]])
	  %% Line 2501
	  <{Symbol,_cor11},_X_Enc> when 'true' ->
	      Symbol
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'pp_symbol',2}}] )
	    -| ['compiler_generated'] )
	end
'pp_sep'/3 =
    %% Line 2503
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Line,Line0,T0>
	      when call 'erlang':'>'
		    (Line,
		     Line0) ->
	      let <_cor3> =
		  %% Line 2504
		  call 'erlang':'-'
		      (Line, 1)
	      in  let <_cor4> =
		      %% Line 2504
		      apply 'pp_sep'/3
			  (_cor3, Line0, T0)
		  in  %% Line 2504
		      [[10|[32|[32|[32]]]]|_cor4]
	  %% Line 2505
	  <_X_Line,_X_Line0,{'.',_cor8}> when 'true' ->
	      %% Line 2506
	      []
	  %% Line 2507
	  <_X_Line,_X_Line0,_X_T0> when 'true' ->
	      %% Line 2508
	      [32]
	end
'set_encoding'/2 =
    %% Line 2510
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'yecc',_cor7,_cor8,_cor9,_cor10,_cor11,'none',_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42},Port> when 'true' ->
	      let <_cor2> =
		  %% Line 2511
		  call 'epp':'default_encoding'
		      ()
	      in  let <_cor43> =
		      %% Line 2511
		      call 'io':'setopts'
			  (Port, [{'encoding',_cor2}|[]])
		  in  %% Line 2511
		      case _cor43 of
			<'ok'> when 'true' ->
			    ( _cor43
			      -| ['compiler_generated'] )
			( <_cor3> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor3})
			  -| ['compiler_generated'] )
		      end
	  %% Line 2512
	  <{'yecc',_cor44,_cor45,_cor46,_cor47,_cor48,E,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,_cor69,_cor70,_cor71,_cor72,_cor73,_cor74,_cor75,_cor76,_cor77,_cor78,_cor79},Port> when 'true' ->
	      let <_cor80> =
		  %% Line 2513
		  call 'io':'setopts'
		      (Port, [{'encoding',E}|[]])
	      in  %% Line 2513
		  case _cor80 of
		    <'ok'> when 'true' ->
			( _cor80
			  -| ['compiler_generated'] )
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor4})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'set_encoding',2}}] )
	    -| ['compiler_generated'] )
	end
'output_encoding_comment'/1 =
    %% Line 2515
    fun (_cor0) ->
	case _cor0 of
	  <St = {'yecc',_cor3,_cor4,_cor5,_cor6,_cor7,'none',_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38}> when 'true' ->
	      %% Line 2516
	      St
	  %% Line 2517
	  <St = {'yecc',_cor39,_cor40,_cor41,_cor42,_cor43,Encoding,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,_cor69,_cor70,_cor71,_cor72,_cor73,_cor74}> when 'true' ->
	      let <_cor1> =
		  %% Line 2518
		  call 'epp':'encoding_to_string'
		      (Encoding)
	      in  %% Line 2518
		  apply 'fwrite'/3
		      (St, #{#<37>(8,1,'integer',['unsigned'|['big']]),
			     #<37>(8,1,'integer',['unsigned'|['big']]),
			     #<32>(8,1,'integer',['unsigned'|['big']]),
			     #<126>(8,1,'integer',['unsigned'|['big']]),
			     #<115>(8,1,'integer',['unsigned'|['big']]),
			     #<10>(8,1,'integer',['unsigned'|['big']])}#, [_cor1|[]])
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'output_encoding_comment',1}}] )
	    -| ['compiler_generated'] )
	end
'output_file_directive'/3 =
    %% Line 2520
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <St = {'yecc',_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49},Filename,Line>
	      when call 'erlang':'=:='
		    (_cor21,
		     'true') ->
	      let <_cor9> =
		  %% Line 2522
		  apply 'format_filename'/2
		      (Filename, St)
	      in  %% Line 2521
		  apply 'fwrite'/3
		      (St, #{#<45>(8,1,'integer',['unsigned'|['big']]),
			     #<102>(8,1,'integer',['unsigned'|['big']]),
			     #<105>(8,1,'integer',['unsigned'|['big']]),
			     #<108>(8,1,'integer',['unsigned'|['big']]),
			     #<101>(8,1,'integer',['unsigned'|['big']]),
			     #<40>(8,1,'integer',['unsigned'|['big']]),
			     #<126>(8,1,'integer',['unsigned'|['big']]),
			     #<116>(8,1,'integer',['unsigned'|['big']]),
			     #<115>(8,1,'integer',['unsigned'|['big']]),
			     #<44>(8,1,'integer',['unsigned'|['big']]),
			     #<32>(8,1,'integer',['unsigned'|['big']]),
			     #<126>(8,1,'integer',['unsigned'|['big']]),
			     #<119>(8,1,'integer',['unsigned'|['big']]),
			     #<41>(8,1,'integer',['unsigned'|['big']]),
			     #<46>(8,1,'integer',['unsigned'|['big']]),
			     #<10>(8,1,'integer',['unsigned'|['big']])}#, %% Line 2522
									  [_cor9|[Line|[]]])
	  %% Line 2523
	  <St,_X_Filename,_X_Line> when 'true' ->
	      %% Line 2524
	      St
	end
'first_line'/1 =
    %% Line 2526
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 2527
	    call 'erlang':'hd'
		(_cor0)
	in  %% Line 2527
	    call 'erlang':'element'
		(2, _cor1)
'last_line'/1 =
    %% Line 2529
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 2530
	    call 'lists':'last'
		(_cor0)
	in  %% Line 2530
	    call 'erlang':'element'
		(2, _cor1)
'fwrite'/3 =
    %% Line 2533
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <St = {'yecc',_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,Outport,Line,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44},Format,Args> when 'true' ->
	      let <NLines> =
		  %% Line 2534
		  apply 'count_nl'/1
		      (Format)
	      in  do  %% Line 2535
		      call 'io':'fwrite'
			  (Outport, Format, Args)
		      let <_rec175> =
			  %% Line 2536
			  call 'erlang':'+'
			      (Line, NLines)
		      in  %% Line 2536
			  call 'erlang':'setelement'
			      (19, St, _rec175)
	  ( <_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7})
		  -| [{'function_name',{'fwrite',3}}] )
	    -| ['compiler_generated'] )
	end
'count_nl'/1 =
    %% Line 2539
    fun (_cor0) ->
	case ( _cor0
	       -| ['reuse_for_context'] ) of
	  <#{#<10>(8,1,'integer',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      let <_cor1> =
		  %% Line 2540
		  apply 'count_nl'/1
		      (Rest)
	      in  %% Line 2540
		  call 'erlang':'+'
		      (1, _cor1)
	  %% Line 2541
	  <#{#<_cor3>(8,1,'integer',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      %% Line 2542
	      apply 'count_nl'/1
		  (Rest)
	  %% Line 2543
	  <#{}#> when 'true' ->
	      %% Line 2544
	      0
	  ( <_cor2> when 'true' ->
		do  primop 'bs_context_to_binary'
			(_cor2)
		    ( primop 'match_fail'
			  ({'function_clause',_cor2})
		      -| [{'function_name',{'count_nl',1}}] )
	    -| ['compiler_generated'] )
	end
'nl'/1 =
    %% Line 2546
    fun (_cor0) ->
	case _cor0 of
	  <St = {'yecc',_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,Outport,Line,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39}> when 'true' ->
	      do  %% Line 2547
		  call 'io':'nl'
		      (Outport)
		  let <_rec177> =
		      %% Line 2548
		      call 'erlang':'+'
			  (Line, 1)
		  in  %% Line 2548
		      call 'erlang':'setelement'
			  (19, St, _rec177)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'nl',1}}] )
	    -| ['compiler_generated'] )
	end
'format_filename'/2 =
    %% Line 2550
    fun (_cor1,_cor0) ->
	let <Filename> =
	    %% Line 2551
	    call 'filename':'flatten'
		(_cor1)
	in  %% Line 2552
	    ( case _cor0 of
		( <( {'yecc',_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_rec179,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44}
		     -| ['compiler_generated'] )> when 'true' ->
		      let <_cor5> =
			  call 'io':'getopts'
			      (_rec179)
		      in  case call 'lists':'keyfind'
				   ('encoding', 1, _cor5) of
			    %% Line 2553
			    <{'encoding','unicode'}> when 'true' ->
				call 'io_lib':'write_string'
				    (Filename)
			    %% Line 2554
			    <_cor46> when 'true' ->
				call 'io_lib':'write_string_as_latin1'
				    (Filename)
			  end
		  -| ['compiler_generated'] )
		( <_cor45> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','yecc'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	      -| ['compiler_generated'] )
'format_assoc'/1 =
    %% Line 2557
    fun (_cor0) ->
	case _cor0 of
	  <'left'> when 'true' ->
	      %% Line 2558
	      [76|[101|[102|[116]]]]
	  %% Line 2559
	  <'right'> when 'true' ->
	      %% Line 2560
	      [82|[105|[103|[104|[116]]]]]
	  %% Line 2561
	  <'unary'> when 'true' ->
	      %% Line 2562
	      [85|[110|[97|[114|[121]]]]]
	  %% Line 2563
	  <'nonassoc'> when 'true' ->
	      %% Line 2564
	      [78|[111|[110|[97|[115|[115|[111|[99]]]]]]]]
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'format_assoc',1}}] )
	    -| ['compiler_generated'] )
	end
'format_symbol'/1 =
    %% Line 2566
    fun (_cor0) ->
	let <String> =
	    %% Line 2567
	    call 'lists':'concat'
		([_cor0|[]])
	in  %% Line 2568
	    case call 'erl_scan':'string'
		     (String) of
	      %% Line 2569
	      <{'ok',[{'atom',_cor7,_cor8}|[]],_cor9}> when 'true' ->
		  %% Line 2570
		  call 'io_lib':'fwrite'
		      (#{#<126>(8,1,'integer',['unsigned'|['big']]),
			 #<119>(8,1,'integer',['unsigned'|['big']])}#, [_cor0|[]])
	      %% Line 2571
	      <{'ok',[{Word,_cor10}|[]],_cor11}>
		  when let <_cor2> =
			call 'erlang':'=/='
			    (Word, ':')
		    in  let <_cor3> =
			    call 'erlang':'=/='
				(Word, '->')
			in  call 'erlang':'and'
				(_cor2, _cor3) ->
		  %% Line 2572
		  case call 'erl_scan':'reserved_word'
			   (Word) of
		    %% Line 2573
		    <'true'> when 'true' ->
			%% Line 2574
			String
		    %% Line 2575
		    <'false'> when 'true' ->
			%% Line 2576
			call 'io_lib':'fwrite'
			    (#{#<126>(8,1,'integer',['unsigned'|['big']]),
			       #<119>(8,1,'integer',['unsigned'|['big']])}#, [_cor0|[]])
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor4})
		      -| ['compiler_generated'] )
		  end
	      %% Line 2578
	      <{'ok',[{'var',_cor12,_cor13}|[]],_cor14}> when 'true' ->
		  %% Line 2579
		  String
	      %% Line 2580
	      <_cor15> when 'true' ->
		  %% Line 2581
		  call 'io_lib':'fwrite'
		      (#{#<126>(8,1,'integer',['unsigned'|['big']]),
			 #<119>(8,1,'integer',['unsigned'|['big']])}#, [_cor0|[]])
	    end
'inverse'/1 =
    %% Line 2584
    fun (_cor0) ->
	let <_cor5> =
	    %% Line 2585
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor3) ->
			  case _cor3 of
			    <[{B,A}|_cor2]> when 'true' ->
				let <_cor4> =
				    apply 'lc$^0'/1
					(_cor2)
				in  ( [{A,B}|_cor4]
				      -| ['compiler_generated'] )
			    ( <[_cor1|_cor2]> when 'true' ->
				  apply 'lc$^0'/1
				      (_cor2)
			      -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor3> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor3})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (_cor0)
	      -| ['list_comprehension'] )
	in  %% Line 2585
	    call 'lists':'sort'
		(_cor5)
'family'/1 =
    %% Line 2587
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 2588
	    call 'sofs':'relation'
		(_cor0)
	in  let <_cor2> =
		%% Line 2588
		call 'sofs':'relation_to_family'
		    (_cor1)
	    in  %% Line 2588
		call 'sofs':'to_external'
		    (_cor2)
'seq1'/1 =
    %% Line 2590
    fun (_cor0) ->
	case _cor0 of
	  <To>
	      when call 'erlang':'<'
		    (_cor0,
		     1) ->
	      %% Line 2591
	      []
	  %% Line 2592
	  <To> when 'true' ->
	      %% Line 2593
	      call 'lists':'seq'
		  (1, To)
	end
'count'/2 =
    %% Line 2595
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 2596
	    call 'erlang':'length'
		(_cor0)
	in  let <_cor3> =
		%% Line 2596
		call 'erlang':'-'
		    (_cor2, 1)
	    in  let <_cor4> =
		    %% Line 2596
		    call 'erlang':'+'
			(_cor3, _cor1)
		in  let <_cor5> =
			%% Line 2596
			call 'lists':'seq'
			    (_cor1, _cor4)
		    in  %% Line 2596
			call 'lists':'zip'
			    (_cor0, _cor5)
'family_with_domain'/2 =
    %% Line 2598
    fun (_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 2599
	    call 'sofs':'relation'
		(_cor1)
	in  let <_cor2> =
		%% Line 2599
		call 'sofs':'set'
		    (_cor0)
	    in  let <_cor4> =
		    %% Line 2599
		    apply 'sofs_family_with_domain'/2
			(_cor3, _cor2)
		in  %% Line 2599
		    call 'sofs':'to_external'
			(_cor4)
'sofs_family_with_domain'/2 =
    %% Line 2601
    fun (_cor1,_cor0) ->
	let <R> =
	    %% Line 2602
	    call 'sofs':'restriction'
		(_cor1, _cor0)
	in  let <F> =
		%% Line 2603
		call 'sofs':'relation_to_family'
		    (R)
	    in  let <_cor4> =
		    %% Line 2604
		    call 'sofs':'from_term'
			([])
		in  let <FD> =
			%% Line 2604
			call 'sofs':'constant_function'
			    (_cor0, _cor4)
		    in  %% Line 2605
			call 'sofs':'family_union'
			    (F, FD)
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('yecc')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('yecc', _cor0)
end