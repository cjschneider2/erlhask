module 'asn1rt' ['decode'/3,
		 'encode'/2,
		 'encode'/3,
		 'info'/1,
		 'load_driver'/0,
		 'module_info'/0,
		 'module_info'/1,
		 'unload_driver'/0,
		 'utf8_binary_to_list'/1,
		 'utf8_list_to_binary'/1]
    attributes [%% Line 21
		'deprecated' =
		    %% Line 21
		    ['module']]
'encode'/2 =
    %% Line 29
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Module,{Type,Term}> when 'true' ->
	      %% Line 30
	      apply 'encode'/3
		  (Module, Type, Term)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'encode',2}}] )
	    -| ['compiler_generated'] )
	end
'encode'/3 =
    %% Line 32
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    catch
		%% Line 33
		call _cor2:'encode'
		    (_cor1, _cor0)
	in  %% Line 33
	    case _cor3 of
	      %% Line 34
	      <{'EXIT','undef'}> when 'true' ->
		  %% Line 35
		  {'error',{'asn1',{'undef',_cor2,_cor1}}}
	      %% Line 36
	      <Result> when 'true' ->
		  %% Line 37
		  Result
	    end
'decode'/3 =
    %% Line 40
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    catch
		%% Line 41
		call _cor2:'decode'
		    (_cor1, _cor0)
	in  %% Line 41
	    case _cor3 of
	      %% Line 42
	      <{'EXIT','undef'}> when 'true' ->
		  %% Line 43
		  {'error',{'asn1',{'undef',_cor2,_cor1}}}
	      %% Line 44
	      <Result> when 'true' ->
		  %% Line 45
		  Result
	    end
'load_driver'/0 =
    %% Line 49
    fun () ->
	%% Line 50
	'ok'
'unload_driver'/0 =
    %% Line 52
    fun () ->
	%% Line 53
	'ok'
'info'/1 =
    %% Line 55
    fun (_cor0) ->
	let <_cor1> =
	    catch
		%% Line 56
		call _cor0:'info'
		    ()
	in  %% Line 56
	    case _cor1 of
	      %% Line 57
	      <{'EXIT',{'undef',_X_Reason}}> when 'true' ->
		  %% Line 58
		  {'error',{'asn1',{'undef',_cor0,'info'}}}
	      %% Line 59
	      <Result> when 'true' ->
		  %% Line 60
		  {'ok',Result}
	    end
'utf8_binary_to_list'/1 =
    %% Line 69
    fun (_cor0) ->
	case _cor0 of
	  <Bin>
	      when call 'erlang':'is_binary'
		    (_cor0) ->
	      %% Line 70
	      apply 'utf8_binary_to_list'/2
		  (Bin, [])
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'utf8_binary_to_list',1}}] )
	    -| ['compiler_generated'] )
	end
'utf8_binary_to_list'/2 =
    %% Line 72
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <#{}#,Acc> when 'true' ->
	      let <_cor2> =
		  %% Line 73
		  call 'lists':'reverse'
		      (Acc)
	      in  %% Line 73
		  {'ok',_cor2}
	  %% Line 74
	  <Bin,Acc> when 'true' ->
	      let <Len> =
		  %% Line 75
		  apply 'utf8_binary_len'/1
		      (Bin)
	      in  let <_cor4> =
		      catch
			  %% Line 76
			  call 'erlang':'split_binary'
			      (Bin, Len)
		  in  %% Line 76
		      case _cor4 of
			%% Line 77
			<{CharBin,RestBin}> when 'true' ->
			    %% Line 78
			    case apply 'utf8_binary_char'/1
				     (CharBin) of
			      %% Line 79
			      <C>
				  when call 'erlang':'is_integer'
					(C) ->
				  %% Line 80
				  apply 'utf8_binary_to_list'/2
				      (RestBin, [C|Acc])
			      %% Line 81
			      <Err> when 'true' ->
				  Err
			    end
			%% Line 83
			<Err> when 'true' ->
			    {'error',{'asn1',{'bad_encoded_utf8string',Err}}}
		      end
	end
'utf8_binary_len'/1 =
    %% Line 86
    fun (_cor0) ->
	case ( _cor0
	       -| ['reuse_for_context'] ) of
	  <#{#<0>(1,1,'integer',['unsigned'|['big']]),
	     #<_cor2>(7,1,'integer',['unsigned'|['big']]),
	     #<_cor3>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      %% Line 87
	      1
	  %% Line 88
	  <#{#<1>(1,1,'integer',['unsigned'|['big']]),
	     #<1>(1,1,'integer',['unsigned'|['big']]),
	     #<0>(1,1,'integer',['unsigned'|['big']]),
	     #<_cor4>(5,1,'integer',['unsigned'|['big']]),
	     #<_cor5>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      %% Line 89
	      2
	  %% Line 90
	  <#{#<1>(1,1,'integer',['unsigned'|['big']]),
	     #<1>(1,1,'integer',['unsigned'|['big']]),
	     #<1>(1,1,'integer',['unsigned'|['big']]),
	     #<0>(1,1,'integer',['unsigned'|['big']]),
	     #<_cor6>(4,1,'integer',['unsigned'|['big']]),
	     #<_cor7>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      %% Line 91
	      3
	  %% Line 92
	  <#{#<1>(1,1,'integer',['unsigned'|['big']]),
	     #<1>(1,1,'integer',['unsigned'|['big']]),
	     #<1>(1,1,'integer',['unsigned'|['big']]),
	     #<1>(1,1,'integer',['unsigned'|['big']]),
	     #<0>(1,1,'integer',['unsigned'|['big']]),
	     #<_cor8>(3,1,'integer',['unsigned'|['big']]),
	     #<_cor9>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      %% Line 93
	      4
	  %% Line 94
	  <#{#<1>(1,1,'integer',['unsigned'|['big']]),
	     #<1>(1,1,'integer',['unsigned'|['big']]),
	     #<1>(1,1,'integer',['unsigned'|['big']]),
	     #<1>(1,1,'integer',['unsigned'|['big']]),
	     #<1>(1,1,'integer',['unsigned'|['big']]),
	     #<0>(1,1,'integer',['unsigned'|['big']]),
	     #<_cor10>(2,1,'integer',['unsigned'|['big']]),
	     #<_cor11>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      %% Line 95
	      5
	  %% Line 96
	  <#{#<1>(1,1,'integer',['unsigned'|['big']]),
	     #<1>(1,1,'integer',['unsigned'|['big']]),
	     #<1>(1,1,'integer',['unsigned'|['big']]),
	     #<1>(1,1,'integer',['unsigned'|['big']]),
	     #<1>(1,1,'integer',['unsigned'|['big']]),
	     #<1>(1,1,'integer',['unsigned'|['big']]),
	     #<0>(1,1,'integer',['unsigned'|['big']]),
	     #<_cor12>(1,1,'integer',['unsigned'|['big']]),
	     #<_cor13>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      %% Line 97
	      6
	  %% Line 98
	  <Bin> when 'true' ->
	      do  primop 'bs_context_to_binary'
		      (Bin)
		  %% Line 99
		  {'error',{'asn1',{'bad_utf8_length',Bin}}}
	end
'utf8_binary_char'/1 =
    %% Line 101
    fun (_cor0) ->
	case ( _cor0
	       -| ['reuse_for_context'] ) of
	  <#{#<0>(1,1,'integer',['unsigned'|['big']]),
	     #<Int>(7,1,'integer',['unsigned'|['big']])}#> when 'true' ->
	      %% Line 102
	      Int
	  %% Line 103
	  <#{#<_cor10>(2,1,'integer',['unsigned'|['big']]),
	     #<0>(1,1,'integer',['unsigned'|['big']]),
	     #<Int1>(5,1,'integer',['unsigned'|['big']]),
	     #<1>(1,1,'integer',['unsigned'|['big']]),
	     #<0>(1,1,'integer',['unsigned'|['big']]),
	     #<Int2>(6,1,'integer',['unsigned'|['big']])}#> when 'true' ->
	      let <_cor1> =
		  %% Line 104
		  call 'erlang':'bsl'
		      (Int1, 6)
	      in  %% Line 104
		  call 'erlang':'bor'
		      (_cor1, Int2)
	  %% Line 105
	  <#{#<_cor11>(3,1,'integer',['unsigned'|['big']]),
	     #<0>(1,1,'integer',['unsigned'|['big']]),
	     #<Int1>(4,1,'integer',['unsigned'|['big']]),
	     #<1>(1,1,'integer',['unsigned'|['big']]),
	     #<0>(1,1,'integer',['unsigned'|['big']]),
	     #<Int2>(6,1,'integer',['unsigned'|['big']]),
	     #<1>(1,1,'integer',['unsigned'|['big']]),
	     #<0>(1,1,'integer',['unsigned'|['big']]),
	     #<Int3>(6,1,'integer',['unsigned'|['big']])}#> when 'true' ->
	      %% Line 106
	      case #{#<Int1>(4,1,'integer',['unsigned'|['big']]),
		     #<Int2>(6,1,'integer',['unsigned'|['big']]),
		     #<Int3>(6,1,'integer',['unsigned'|['big']])}# of
		<#{#<Res>(16,1,'integer',['unsigned'|['big']])}#> when 'true' ->
		    %% Line 107
		    Res
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 108
	  <#{#<_cor12>(4,1,'integer',['unsigned'|['big']]),
	     #<0>(1,1,'integer',['unsigned'|['big']]),
	     #<Int1>(3,1,'integer',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      %% Line 109
	      case ( Rest
		     -| ['reuse_for_context'] ) of
		<#{#<1>(1,1,'integer',['unsigned'|['big']]),
		   #<0>(1,1,'integer',['unsigned'|['big']]),
		   #<Int2>(6,1,'integer',['unsigned'|['big']]),
		   #<1>(1,1,'integer',['unsigned'|['big']]),
		   #<0>(1,1,'integer',['unsigned'|['big']]),
		   #<Int3>(6,1,'integer',['unsigned'|['big']]),
		   #<1>(1,1,'integer',['unsigned'|['big']]),
		   #<0>(1,1,'integer',['unsigned'|['big']]),
		   #<Int4>(6,1,'integer',['unsigned'|['big']])}#> when 'true' ->
		    %% Line 110
		    case #{#<0>(3,1,'integer',['unsigned'|['big']]),
			   #<Int1>(3,1,'integer',['unsigned'|['big']]),
			   #<Int2>(6,1,'integer',['unsigned'|['big']]),
			   #<Int3>(6,1,'integer',['unsigned'|['big']]),
			   #<Int4>(6,1,'integer',['unsigned'|['big']])}# of
		      <#{#<Res>(24,1,'integer',['unsigned'|['big']])}#> when 'true' ->
			  %% Line 111
			  Res
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
		( <_cor3> when 'true' ->
		      do  primop 'bs_context_to_binary'
			      (_cor3)
			  primop 'match_fail'
			      ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 112
	  <#{#<_cor13>(5,1,'integer',['unsigned'|['big']]),
	     #<0>(1,1,'integer',['unsigned'|['big']]),
	     #<Int1>(2,1,'integer',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      %% Line 113
	      case ( Rest
		     -| ['reuse_for_context'] ) of
		<#{#<1>(1,1,'integer',['unsigned'|['big']]),
		   #<0>(1,1,'integer',['unsigned'|['big']]),
		   #<Int2>(6,1,'integer',['unsigned'|['big']]),
		   #<1>(1,1,'integer',['unsigned'|['big']]),
		   #<0>(1,1,'integer',['unsigned'|['big']]),
		   #<Int3>(6,1,'integer',['unsigned'|['big']]),
		   #<1>(1,1,'integer',['unsigned'|['big']]),
		   #<0>(1,1,'integer',['unsigned'|['big']]),
		   #<Int4>(6,1,'integer',['unsigned'|['big']]),
		   #<1>(1,1,'integer',['unsigned'|['big']]),
		   #<0>(1,1,'integer',['unsigned'|['big']]),
		   #<Int5>(6,1,'integer',['unsigned'|['big']])}#> when 'true' ->
		    %% Line 114
		    case #{#<0>(6,1,'integer',['unsigned'|['big']]),
			   #<Int1>(2,1,'integer',['unsigned'|['big']]),
			   #<Int2>(6,1,'integer',['unsigned'|['big']]),
			   #<Int3>(6,1,'integer',['unsigned'|['big']]),
			   #<Int4>(6,1,'integer',['unsigned'|['big']]),
			   #<Int5>(6,1,'integer',['unsigned'|['big']])}# of
		      <#{#<Res>(32,1,'integer',['unsigned'|['big']])}#> when 'true' ->
			  %% Line 115
			  Res
		      ( <_cor6> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor6})
			-| ['compiler_generated'] )
		    end
		( <_cor5> when 'true' ->
		      do  primop 'bs_context_to_binary'
			      (_cor5)
			  primop 'match_fail'
			      ({'badmatch',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 116
	  <#{#<_cor14>(6,1,'integer',['unsigned'|['big']]),
	     #<0>(1,1,'integer',['unsigned'|['big']]),
	     #<I>(1,1,'integer',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      %% Line 118
	      case ( Rest
		     -| ['reuse_for_context'] ) of
		<#{#<1>(1,1,'integer',['unsigned'|['big']]),
		   #<0>(1,1,'integer',['unsigned'|['big']]),
		   #<Int2>(6,1,'integer',['unsigned'|['big']]),
		   #<1>(1,1,'integer',['unsigned'|['big']]),
		   #<0>(1,1,'integer',['unsigned'|['big']]),
		   #<Int3>(6,1,'integer',['unsigned'|['big']]),
		   #<1>(1,1,'integer',['unsigned'|['big']]),
		   #<0>(1,1,'integer',['unsigned'|['big']]),
		   #<Int4>(6,1,'integer',['unsigned'|['big']]),
		   #<1>(1,1,'integer',['unsigned'|['big']]),
		   #<0>(1,1,'integer',['unsigned'|['big']]),
		   #<Int5>(6,1,'integer',['unsigned'|['big']]),
		   #<1>(1,1,'integer',['unsigned'|['big']]),
		   #<0>(1,1,'integer',['unsigned'|['big']]),
		   #<Int6>(6,1,'integer',['unsigned'|['big']])}#> when 'true' ->
		    %% Line 119
		    case #{#<0>(1,1,'integer',['unsigned'|['big']]),
			   #<I>(1,1,'integer',['unsigned'|['big']]),
			   #<Int2>(6,1,'integer',['unsigned'|['big']]),
			   #<Int3>(6,1,'integer',['unsigned'|['big']]),
			   #<Int4>(6,1,'integer',['unsigned'|['big']]),
			   #<Int5>(6,1,'integer',['unsigned'|['big']]),
			   #<Int6>(6,1,'integer',['unsigned'|['big']])}# of
		      <#{#<Res>(32,1,'integer',['unsigned'|['big']])}#> when 'true' ->
			  %% Line 120
			  Res
		      ( <_cor8> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor8})
			-| ['compiler_generated'] )
		    end
		( <_cor7> when 'true' ->
		      do  primop 'bs_context_to_binary'
			      (_cor7)
			  primop 'match_fail'
			      ({'badmatch',_cor7})
		  -| ['compiler_generated'] )
	      end
	  %% Line 121
	  <Err> when 'true' ->
	      do  primop 'bs_context_to_binary'
		      (Err)
		  %% Line 122
		  {'error',{'asn1',{'bad_utf8_character_encoding',Err}}}
	end
'utf8_list_to_binary'/1 =
    %% Line 137
    fun (_cor0) ->
	%% Line 138
	apply 'utf8_list_to_binary'/2
	    (_cor0, [])
'utf8_list_to_binary'/2 =
    %% Line 140
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],Acc>
	      when call 'erlang':'is_list'
		    (Acc) ->
	      let <_cor2> =
		  %% Line 141
		  call 'lists':'reverse'
		      (Acc)
	      in  let <_cor3> =
		      %% Line 141
		      call 'erlang':'list_to_binary'
			  (_cor2)
		  in  %% Line 141
		      {'ok',_cor3}
	  %% Line 142
	  <[],Acc> when 'true' ->
	      %% Line 143
	      {'error',{'asn1',Acc}}
	  %% Line 144
	  <[H|T],Acc> when 'true' ->
	      let <_cor4> =
		  catch
		      %% Line 145
		      apply 'utf8_encode'/2
			  (H, Acc)
	      in  %% Line 145
		  case _cor4 of
		    %% Line 146
		    <NewAcc>
			when call 'erlang':'is_list'
			      (_cor4) ->
			%% Line 147
			apply 'utf8_list_to_binary'/2
			    (T, NewAcc)
		    %% Line 148
		    <Err> when 'true' ->
			Err
		  end
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6})
		  -| [{'function_name',{'utf8_list_to_binary',2}}] )
	    -| ['compiler_generated'] )
	end
'utf8_encode'/2 =
    %% Line 152
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Int,Acc>
	      when call 'erlang':'<'
		    (Int,
		     128) ->
	      %% Line 155
	      [Int|Acc]
	  %% Line 156
	  <Int,Acc>
	      when call 'erlang':'<'
		    (Int,
		     2048) ->
	      let <_cor2> =
		  %% Line 159
		  call 'erlang':'band'
		      (Int, 63)
	      in  let <_cor3> =
		      %% Line 159
		      call 'erlang':'bor'
			  (128, _cor2)
		  in  let <_cor4> =
			  %% Line 159
			  call 'erlang':'bsr'
			      (Int, 6)
		      in  let <_cor5> =
			      %% Line 159
			      call 'erlang':'bor'
				  (192, _cor4)
			  in  %% Line 159
			      [_cor3|[_cor5|Acc]]
	  %% Line 160
	  <Int,Acc>
	      when call 'erlang':'<'
		    (Int,
		     65536) ->
	      let <_cor6> =
		  %% Line 163
		  call 'erlang':'band'
		      (Int, 63)
	      in  let <_cor7> =
		      %% Line 163
		      call 'erlang':'bor'
			  (128, _cor6)
		  in  let <_cor8> =
			  %% Line 163
			  call 'erlang':'band'
			      (Int, 4032)
		      in  let <_cor9> =
			      %% Line 163
			      call 'erlang':'bsr'
				  (_cor8, 6)
			  in  let <_cor10> =
				  %% Line 163
				  call 'erlang':'bor'
				      (128, _cor9)
			      in  let <_cor11> =
				      %% Line 164
				      call 'erlang':'band'
					  (Int, 61440)
				  in  let <_cor12> =
					  %% Line 164
					  call 'erlang':'bsr'
					      (_cor11, 12)
				      in  let <_cor13> =
					      %% Line 164
					      call 'erlang':'bor'
						  (224, _cor12)
					  in  %% Line 163
					      [_cor7|[_cor10|%% Line 164
							     [_cor13|Acc]]]
	  %% Line 165
	  <Int,Acc>
	      when call 'erlang':'<'
		    (Int,
		     2097152) ->
	      let <_cor14> =
		  %% Line 168
		  call 'erlang':'band'
		      (Int, 63)
	      in  let <_cor15> =
		      %% Line 168
		      call 'erlang':'bor'
			  (128, _cor14)
		  in  let <_cor16> =
			  %% Line 168
			  call 'erlang':'band'
			      (Int, 4032)
		      in  let <_cor17> =
			      %% Line 168
			      call 'erlang':'bsr'
				  (_cor16, 6)
			  in  let <_cor18> =
				  %% Line 168
				  call 'erlang':'bor'
				      (128, _cor17)
			      in  let <_cor19> =
				      %% Line 169
				      call 'erlang':'band'
					  (Int, 258048)
				  in  let <_cor20> =
					  %% Line 169
					  call 'erlang':'bsr'
					      (_cor19, 12)
				      in  let <_cor21> =
					      %% Line 169
					      call 'erlang':'bor'
						  (128, _cor20)
					  in  let <_cor22> =
						  %% Line 170
						  call 'erlang':'band'
						      (Int, 1835008)
					      in  let <_cor23> =
						      %% Line 170
						      call 'erlang':'bsr'
							  (_cor22, 18)
						  in  let <_cor24> =
							  %% Line 170
							  call 'erlang':'bor'
							      (240, _cor23)
						      in  %% Line 168
							  [_cor15|[_cor18|%% Line 169
									  [_cor21|%% Line 170
										  [_cor24|Acc]]]]
	  %% Line 171
	  <Int,Acc>
	      when call 'erlang':'<'
		    (Int,
		     67108864) ->
	      let <_cor25> =
		  %% Line 174
		  call 'erlang':'band'
		      (Int, 63)
	      in  let <_cor26> =
		      %% Line 174
		      call 'erlang':'bor'
			  (128, _cor25)
		  in  let <_cor27> =
			  %% Line 174
			  call 'erlang':'band'
			      (Int, 4032)
		      in  let <_cor28> =
			      %% Line 174
			      call 'erlang':'bsr'
				  (_cor27, 6)
			  in  let <_cor29> =
				  %% Line 174
				  call 'erlang':'bor'
				      (128, _cor28)
			      in  let <_cor30> =
				      %% Line 175
				      call 'erlang':'band'
					  (Int, 258048)
				  in  let <_cor31> =
					  %% Line 175
					  call 'erlang':'bsr'
					      (_cor30, 12)
				      in  let <_cor32> =
					      %% Line 175
					      call 'erlang':'bor'
						  (128, _cor31)
					  in  let <_cor33> =
						  %% Line 175
						  call 'erlang':'band'
						      (Int, 16515072)
					      in  let <_cor34> =
						      %% Line 175
						      call 'erlang':'bsr'
							  (_cor33, 18)
						  in  let <_cor35> =
							  %% Line 175
							  call 'erlang':'bor'
							      (128, _cor34)
						      in  let <_cor36> =
							      %% Line 176
							      call 'erlang':'band'
								  (Int, 50331648)
							  in  let <_cor37> =
								  %% Line 176
								  call 'erlang':'bsr'
								      (_cor36, 24)
							      in  let <_cor38> =
								      %% Line 176
								      call 'erlang':'bor'
									  (248, _cor37)
								  in  %% Line 174
								      [_cor26|[_cor29|%% Line 175
										      [_cor32|[_cor35|%% Line 176
												      [_cor38|Acc]]]]]
	  %% Line 177
	  <Int,Acc> when 'true' ->
	      let <_cor39> =
		  %% Line 180
		  call 'erlang':'band'
		      (Int, 63)
	      in  let <_cor40> =
		      %% Line 180
		      call 'erlang':'bor'
			  (128, _cor39)
		  in  let <_cor41> =
			  %% Line 180
			  call 'erlang':'band'
			      (Int, 4032)
		      in  let <_cor42> =
			      %% Line 180
			      call 'erlang':'bsr'
				  (_cor41, 6)
			  in  let <_cor43> =
				  %% Line 180
				  call 'erlang':'bor'
				      (128, _cor42)
			      in  let <_cor44> =
				      %% Line 181
				      call 'erlang':'band'
					  (Int, 258048)
				  in  let <_cor45> =
					  %% Line 181
					  call 'erlang':'bsr'
					      (_cor44, 12)
				      in  let <_cor46> =
					      %% Line 181
					      call 'erlang':'bor'
						  (128, _cor45)
					  in  let <_cor47> =
						  %% Line 181
						  call 'erlang':'band'
						      (Int, 16515072)
					      in  let <_cor48> =
						      %% Line 181
						      call 'erlang':'bsr'
							  (_cor47, 18)
						  in  let <_cor49> =
							  %% Line 181
							  call 'erlang':'bor'
							      (128, _cor48)
						      in  let <_cor50> =
							      %% Line 182
							      call 'erlang':'band'
								  (Int, 1056964608)
							  in  let <_cor51> =
								  %% Line 182
								  call 'erlang':'bsr'
								      (_cor50, 24)
							      in  let <_cor52> =
								      %% Line 182
								      call 'erlang':'bor'
									  (128, _cor51)
								  in  let <_cor53> =
									  %% Line 183
									  call 'erlang':'band'
									      (Int, 1073741824)
								      in  let <_cor54> =
									      %% Line 183
									      call 'erlang':'bsr'
										  (_cor53, 30)
									  in  let <_cor55> =
										  %% Line 183
										  call 'erlang':'bor'
										      (252, _cor54)
									      in  %% Line 180
										  [_cor40|[_cor43|%% Line 181
												  [_cor46|[_cor49|%% Line 182
														  [_cor52|%% Line 183
															  [_cor55|Acc]]]]]]
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('asn1rt')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('asn1rt', _cor0)
end