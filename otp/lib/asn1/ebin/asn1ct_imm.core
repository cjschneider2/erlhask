module 'asn1ct_imm' ['dec_code_gen'/2,
		     'dec_slim_cg'/2,
		     'effective_constraint'/2,
		     'enc_absent'/3,
		     'enc_append'/1,
		     'enc_cg'/2,
		     'enc_element'/2,
		     'module_info'/0,
		     'module_info'/1,
		     'optimize_alignment'/1,
		     'optimize_alignment'/2,
		     'per_dec_boolean'/0,
		     'per_dec_constrained'/3,
		     'per_dec_enumerated'/2,
		     'per_dec_enumerated'/3,
		     'per_dec_extension_map'/1,
		     'per_dec_integer'/2,
		     'per_dec_k_m_string'/3,
		     'per_dec_length'/3,
		     'per_dec_named_integer'/3,
		     'per_dec_normally_small_number'/1,
		     'per_dec_octet_string'/2,
		     'per_dec_open_type'/1,
		     'per_dec_raw_bitstring'/2,
		     'per_dec_real'/1,
		     'per_dec_restricted_string'/1,
		     'per_enc_bit_string'/4,
		     'per_enc_boolean'/2,
		     'per_enc_choice'/3,
		     'per_enc_enumerated'/3,
		     'per_enc_extension_bit'/2,
		     'per_enc_extensions'/4,
		     'per_enc_integer'/3,
		     'per_enc_integer'/4,
		     'per_enc_k_m_string'/4,
		     'per_enc_legacy_bit_string'/4,
		     'per_enc_legacy_octet_string'/3,
		     'per_enc_null'/2,
		     'per_enc_octet_string'/3,
		     'per_enc_open_type'/2,
		     'per_enc_optional'/3,
		     'per_enc_restricted_string'/3,
		     'per_enc_small_number'/2,
		     'per_enc_sof'/5]
    attributes []
'dec_slim_cg'/2 =
    %% Line 51
    fun (_cor1,_cor0) ->
	%% Line 52
	case apply 'optimize_alignment'/1
		 (_cor1) of
	  <{Imm,_cor13}> when 'true' ->
	      do  %% Line 53
		  call 'asn1ct_name':'new'
		      ('v')
		  let <_cor3> =
		      %% Line 54
		      call 'asn1ct_name':'curr'
			  ('v')
		  in  let <_cor4> =
			  %% Line 54
			  call 'erlang':'atom_to_list'
			      (_cor3)
		      in  %% Line 54
			  case call 'erlang':'++'
				   (_cor4, [64]) of
			    <[H|T]> when 'true' ->
				let <_cor7> =
				    %% Line 55
				    call 'erlang':'-'
					(H, 32)
				in  let <VarBase> =
					%% Line 55
					[_cor7|T]
				    in  let <St0> = {%% Line 56
					     'st',%% Line 56
						  0,%% Line 56
						    VarBase}
					in  %% Line 57
					    case apply 'flatten'/3
						     (Imm, _cor0, St0) of
					      <{Res,Pre,_cor14}> when 'true' ->
						  do  %% Line 58
						      apply 'dcg_list_outside'/1
							  (Pre)
						      %% Line 59
						      Res
					      ( <_cor10> when 'true' ->
						    primop 'match_fail'
							({'badmatch',_cor10})
						-| ['compiler_generated'] )
					    end
			    ( <_cor5> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor5})
			      -| ['compiler_generated'] )
			  end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'dec_code_gen'/2 =
    %% Line 61
    fun (_cor1,_cor0) ->
	do  %% Line 62
	    call 'asn1ct_gen':'emit'
		([[98|[101|[103|[105|[110]]]]]|['nl']])
	    %% Line 63
	    case apply 'dec_slim_cg'/2
		     (_cor1, _cor0) of
	      <{Dst,DstBuf}> when 'true' ->
		  do  %% Line 64
		      call 'asn1ct_gen':'emit'
			  ([[44]|['nl'|%% Line 65
				       [[123]|[Dst|[[44]|[DstBuf|[[125]|['nl'|[[101|[110|[100]]]]]]]]]]]])
		      %% Line 67
		      'ok'
	      ( <_cor2> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor2})
		-| ['compiler_generated'] )
	    end
'optimize_alignment'/1 =
    %% Line 69
    fun (_cor0) ->
	%% Line 70
	apply 'opt_al'/2
	    (_cor0, 'unknown')
'optimize_alignment'/2 =
    %% Line 72
    fun (_cor1,_cor0) ->
	%% Line 73
	apply 'opt_al'/2
	    (_cor1, _cor0)
'per_dec_boolean'/0 =
    %% Line 76
    fun () ->
	%% Line 77
	{'map',{'get_bits',1,[1]},[{0,'false'}|[{1,'true'}]]}
'per_dec_enumerated'/2 =
    %% Line 79
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{V,_cor10}|[]],_X_Aligned> when 'true' ->
	      %% Line 80
	      {'value',V}
	  %% Line 81
	  <NamedList0,Aligned> when 'true' ->
	      let <_cor2> =
		  %% Line 82
		  call 'erlang':'length'
		      (NamedList0)
	      in  let <Ub> =
		      %% Line 82
		      call 'erlang':'-'
			  (_cor2, 1)
		  in  let <Constraint> =
			  %% Line 83
			  [{'ValueRange',{0,Ub}}|[]]
		      in  let <Int> =
			      %% Line 84
			      apply 'per_dec_integer'/2
				  (Constraint, Aligned)
			  in  let <NamedList> =
				  %% Line 85
				  apply 'per_dec_enumerated_fix_list'/3
				      (NamedList0, ['enum_error'], 0)
			      in  let <_cor7> =
				      %% Line 86
				      apply 'opt_map'/2
					  (NamedList, Int)
				  in  %% Line 86
				      {'map',Int,_cor7}
	end
'per_dec_enumerated'/3 =
    %% Line 88
    fun (_cor2,_cor1,_cor0) ->
	let <Base> =
	    %% Line 89
	    apply 'per_dec_enumerated'/2
		(_cor2, _cor0)
	in  let <NamedListExt> =
		%% Line 90
		apply 'per_dec_enumerated_fix_list'/3
		    (_cor1, %% Line 91
			    ['enum_default'], %% Line 91
					      0)
	    in  let <_cor5> =
		    %% Line 92
		    apply 'per_dec_normally_small_number'/1
			(_cor0)
		in  let <Ext> = {%% Line 92
			 'map',_cor5,%% Line 92
				     NamedListExt}
		    in  %% Line 93
			apply 'bit_case'/2
			    (Base, Ext)
'per_dec_extension_map'/1 =
    %% Line 95
    fun (_cor0) ->
	let <Len> =
	    %% Line 96
	    apply 'per_dec_normally_small_length'/1
		(_cor0)
	in  %% Line 97
	    {'get_bits',Len,[1|['bitstring']]}
'per_dec_integer'/2 =
    %% Line 99
    fun (_cor1,_cor0) ->
	let <Constraint> =
	    %% Line 100
	    apply 'effective_constraint'/2
		('integer', _cor1)
	in  %% Line 101
	    apply 'per_dec_integer_1'/2
		(Constraint, _cor0)
'per_dec_length'/3 =
    %% Line 103
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <SingleValue,_cor12,_X_Aligned>
	      when call 'erlang':'is_integer'
		    (SingleValue) ->
	      %% Line 104
	      {'value',SingleValue}
	  %% Line 105
	  <{{Fixed,_cor13},[]},AllowZero,Aligned>
	      when call 'erlang':'=:='
		    (_cor13,
		     Fixed) ->
	      let <_cor4> =
		  %% Line 106
		  apply 'per_dec_length'/3
		      (Fixed, AllowZero, Aligned)
	      in  let <_cor3> =
		      %% Line 107
		      apply 'per_dec_length'/3
			  ('no', AllowZero, Aligned)
		  in  %% Line 106
		      apply 'bit_case'/2
			  (_cor4, _cor3)
	  %% Line 108
	  <{Constr = {_cor14,_cor15},[]},AllowZero,Aligned> when 'true' ->
	      let <_cor6> =
		  %% Line 109
		  apply 'per_dec_length'/3
		      (Constr, AllowZero, Aligned)
	      in  let <_cor5> =
		      %% Line 110
		      apply 'per_dec_length'/3
			  ('no', AllowZero, Aligned)
		  in  %% Line 109
		      apply 'bit_case'/2
			  (_cor6, _cor5)
	  %% Line 111
	  <{Lb,Ub},_X_AllowZero,Aligned>
	      when let <_cor7> =
		    call 'erlang':'is_integer'
			(Lb)
		in  let <_cor8> =
			%% Line 112
			call 'erlang':'is_integer'
			    (Lb)
		    in  call 'erlang':'and'
			    (_cor7, _cor8) ->
	      %% Line 113
	      apply 'per_dec_constrained'/3
		  (Lb, Ub, Aligned)
	  %% Line 114
	  <'no',AllowZero,Aligned> when 'true' ->
	      %% Line 115
	      apply 'decode_unconstrained_length'/2
		  (AllowZero, Aligned)
	  ( <_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9})
		  -| [{'function_name',{'per_dec_length',3}}] )
	    -| ['compiler_generated'] )
	end
'per_dec_named_integer'/3 =
    %% Line 117
    fun (_cor2,_cor1,_cor0) ->
	let <Int> =
	    %% Line 118
	    apply 'per_dec_integer'/2
		(_cor2, _cor0)
	in  let <_cor8> =
		%% Line 119
		( letrec
		      'lc$^0'/1 =
			  fun (_cor6) ->
			      case _cor6 of
				<[{V,K}|_cor5]> when 'true' ->
				    let <_cor7> =
					apply 'lc$^0'/1
					    (_cor5)
				    in  ( [{K,V}|_cor7]
					  -| ['compiler_generated'] )
				( <[_cor4|_cor5]> when 'true' ->
				      apply 'lc$^0'/1
					  (_cor5)
				  -| ['compiler_generated'] )
				<[]> when 'true' ->
				    ['integer_default']
				( <_cor6> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_cor6})
					-| [{'function_name',{'lc$^0',1}}] )
				  -| ['compiler_generated'] )
			      end
		  in  apply 'lc$^0'/1
			  (_cor1)
		  -| ['list_comprehension'] )
	    in  let <_cor10> =
		    %% Line 120
		    apply 'opt_map'/2
			(_cor8, Int)
		in  %% Line 120
		    {'map',Int,_cor10}
'per_dec_k_m_string'/3 =
    %% Line 122
    fun (_cor2,_cor1,_cor0) ->
	let <SzConstr> =
	    %% Line 123
	    apply 'effective_constraint'/2
		('bitstring', _cor1)
	in  let <N> =
		%% Line 124
		apply 'string_num_bits'/3
		    (_cor2, _cor1, _cor0)
	    in  let <Imm> =
		    %% Line 125
		    apply 'dec_string'/4
			(SzConstr, N, _cor0, 'k_m_string')
		in  let <Chars> =
			%% Line 126
			apply 'char_tab'/3
			    (_cor1, _cor2, N)
		    in  %% Line 127
			apply 'convert_string'/3
			    (N, Chars, Imm)
'per_dec_octet_string'/2 =
    %% Line 129
    fun (_cor1,_cor0) ->
	%% Line 130
	apply 'dec_string'/4
	    (_cor1, 8, _cor0, 'OCTET STRING')
'per_dec_raw_bitstring'/2 =
    %% Line 132
    fun (_cor1,_cor0) ->
	%% Line 133
	apply 'dec_string'/4
	    (_cor1, 1, _cor0, 'BIT STRING')
'per_dec_open_type'/1 =
    %% Line 135
    fun (_cor0) ->
	%% Line 136
	apply 'dec_string'/4
	    ('no', 8, _cor0, 'open_type')
'per_dec_real'/1 =
    %% Line 138
    fun (_cor0) ->
	let <Dec> =
	    %% Line 139
	    ( fun (_cor2,_cor1) ->
		  %% Line 140
		  call 'asn1ct_gen':'emit'
		      ([[123]|[{'call','real_common','decode_real',[_cor2|[]]}|%% Line 141
									       ['com'|[_cor1|[[125]]]]]])
	      -| [{'id',{0,0,'-per_dec_real/1-fun-0-'}}] )
	in  let <_cor6> =
		%% Line 144
		apply 'decode_unconstrained_length'/2
		    ('true', _cor0)
	    in  %% Line 143
		{'call',Dec,%% Line 144
			    {'get_bits',_cor6,%% Line 145
					      [8|['binary'|[{'align',_cor0}|[]]]]}}
'per_dec_restricted_string'/1 =
    %% Line 147
    fun (_cor0) ->
	let <DecLen> =
	    %% Line 148
	    apply 'decode_unconstrained_length'/2
		('true', _cor0)
	in  %% Line 149
	    {'get_bits',DecLen,[8|['binary']]}
'per_enc_bit_string'/4 =
    %% Line 155
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Val,[],Constraint0,Aligned> when 'true' ->
	      %% Line 156
	      case apply 'mk_vars'/2
		       ([], ['bits']) of
		<{B,[[]|[Bits|[]]]}> when 'true' ->
		    let <Constraint> =
			%% Line 157
			apply 'effective_constraint'/2
			    ('bitstring', Constraint0)
		    in  let <_cor6> =
			    %% Line 159
			    apply 'per_enc_length'/6
				(Val, 1, Bits, Constraint, Aligned, 'BIT STRING')
			in  %% Line 158
			    call 'erlang':'++'
				(B, [{'call','erlang','bit_size',[Val|[]],Bits}|_cor6])
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 160
	  <Val0,NNL0,Constraint0,Aligned> when 'true' ->
	      %% Line 161
	      case apply 'mk_vars'/2
		       (Val0, ['bs'|['bits'|['positions']]]) of
		<{B,[Val|[Bs|[Bits|[Positions|[]]]]]}> when 'true' ->
		    let <NNL> =
			%% Line 162
			call 'lists':'keysort'
			    (2, NNL0)
		    in  let <Constraint> =
			    %% Line 163
			    apply 'effective_constraint'/2
				('bitstring', Constraint0)
			in  let <_cor11> =
				%% Line 164
				case apply 'constr_min_size'/1
					 (Constraint) of
				  %% Line 165
				  <'no'> when 'true' ->
				      []
				  %% Line 166
				  <Lb> when 'true' ->
				      [Lb|[]]
				end
			    in  let <_cor14> =
				    %% Line 168
				    case _cor11 of
				      %% Line 169
				      <[]> when 'true' ->
					  %% Line 170
					  {'call','per_common','bs_drop_trailing_zeroes',[Val|[]]}
				      %% Line 171
				      <[0]> when 'true' ->
					  %% Line 172
					  {'call','per_common','bs_drop_trailing_zeroes',[Val|[]]}
				      %% Line 173
				      <[Lower|[]]> when 'true' ->
					  %% Line 174
					  {'call','per_common','adjust_trailing_zeroes',[Val|[Lower|[]]]}
				      ( <_cor13> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_cor13})
					-| ['compiler_generated'] )
				    end
				in  let <_cor16> =
					%% Line 177
					apply 'bit_string_name2pos_fun'/2
					    (NNL, Val)
				    in  let <_cor17> =
					    %% Line 183
					    apply 'per_enc_length'/6
						(Bs, 1, Bits, Constraint, Aligned, 'BIT STRING')
					in  %% Line 176
					    call 'erlang':'++'
						(B, [{'try',%% Line 177
							    [_cor16|[]],%% Line 178
									{Positions,%% Line 179
										   [{'call','per_common','bitstring_from_positions',%% Line 180
																    [Positions|_cor11]}|%% Line 180
																			[]]},%% Line 181
																			     [_cor14|[]],%% Line 181
																					 Bs}|%% Line 182
																					     [{'call','erlang','bit_size',[Bs|[]],Bits}|_cor17]])
		( <_cor7> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor7})
		  -| ['compiler_generated'] )
	      end
	end
'per_enc_legacy_bit_string'/4 =
    %% Line 185
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Val0,[],Constraint0,Aligned> when 'true' ->
	      %% Line 186
	      case apply 'mk_vars'/2
		       (Val0, ['bs'|['bits']]) of
		<{B,[Val|[Bs|[Bits|[]]]]}> when 'true' ->
		    let <Constraint> =
			%% Line 187
			apply 'effective_constraint'/2
			    ('bitstring', Constraint0)
		    in  let <_cor7> =
			    %% Line 188
			    case apply 'constr_min_size'/1
				     (Constraint) of
			      %% Line 189
			      <'no'> when 'true' ->
				  []
			      %% Line 190
			      <Lb> when 'true' ->
				  [Lb|[]]
			    end
			in  let <_cor9> =
				%% Line 194
				apply 'per_enc_length'/6
				    (Bs, 1, Bits, Constraint, Aligned, 'BIT STRING')
			    in  %% Line 192
				call 'erlang':'++'
				    (B, [{'call','per_common','to_bitstring',[Val|_cor7],Bs}|%% Line 193
											     [{'call','erlang','bit_size',[Bs|[]],Bits}|_cor9]])
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 195
	  <Val0,NNL0,Constraint0,Aligned> when 'true' ->
	      %% Line 196
	      case apply 'mk_vars'/2
		       (Val0, ['bs'|['bits'|['positions']]]) of
		<{B,[Val|[Bs|[Bits|[Positions|[]]]]]}> when 'true' ->
		    let <NNL> =
			%% Line 197
			call 'lists':'keysort'
			    (2, NNL0)
		    in  let <Constraint> =
			    %% Line 198
			    apply 'effective_constraint'/2
				('bitstring', Constraint0)
			in  let <_cor14> =
				%% Line 199
				case apply 'constr_min_size'/1
					 (Constraint) of
				  %% Line 200
				  <'no'> when 'true' ->
				      []
				  %% Line 201
				  <0> when 'true' ->
				      []
				  %% Line 202
				  <Lb> when 'true' ->
				      [Lb|[]]
				end
			    in  let <_cor16> =
				    %% Line 205
				    apply 'bit_string_name2pos_fun'/2
					(NNL, Val)
				in  let <_cor17> =
					%% Line 211
					apply 'per_enc_length'/6
					    (Bs, 1, Bits, Constraint, Aligned, 'BIT STRING')
				    in  %% Line 204
					call 'erlang':'++'
					    (B, [{'try',%% Line 205
							[_cor16|[]],%% Line 206
								    {Positions,%% Line 207
									       [{'call','per_common','bitstring_from_positions',%% Line 208
																[Positions|_cor14]}|%% Line 208
																		    []]},%% Line 209
																			 [{'call','per_common','to_named_bitstring',[Val|_cor14]}|[]],%% Line 209
																										      Bs}|%% Line 210
																											  [{'call','erlang','bit_size',[Bs|[]],Bits}|_cor17]])
		( <_cor10> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor10})
		  -| ['compiler_generated'] )
	      end
	end
'per_enc_boolean'/2 =
    %% Line 213
    fun (_cor1,_cor0) ->
	%% Line 214
	case apply 'mk_vars'/2
		 (_cor1, []) of
	  <{B,[Val|[]]}> when 'true' ->
	      let <_cor3> =
		  %% Line 215
		  apply 'build_cond'/1
		      ([[{'eq',Val,'false'}|[{'put_bits',0,1,[1]}]]|%% Line 216
								    [[{'eq',Val,'true'}|[{'put_bits',1,1,[1]}]]|[]]])
	      in  %% Line 215
		  call 'erlang':'++'
		      (B, _cor3)
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'per_enc_choice'/3 =
    %% Line 218
    fun (_cor2,_cor1,_cor0) ->
	%% Line 219
	case apply 'mk_vars'/2
		 (_cor2, []) of
	  <{B,[Val|[]]}> when 'true' ->
	      let <_cor9> =
		  %% Line 220
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor6) ->
				case _cor6 of
				  <[{Tag,Imm}|_cor5]> when 'true' ->
				      let <_cor7> =
					  apply 'opt_choice'/1
					      (Imm)
				      in  let <_cor8> =
					      apply 'lc$^0'/1
						  (_cor5)
					  in  ( [[{'eq',Val,Tag}|_cor7]|_cor8]
						-| ['compiler_generated'] )
				  ( <[_cor4|_cor5]> when 'true' ->
					apply 'lc$^0'/1
					    (_cor5)
				    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor6> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor6})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (_cor1)
		    -| ['list_comprehension'] )
	      in  let <_cor11> =
		      %% Line 221
		      apply 'build_cond'/1
			  (_cor9)
		  in  %% Line 221
		      call 'erlang':'++'
			  (B, _cor11)
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'per_enc_enumerated'/3 =
    %% Line 223
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Val0,{Root,Ext},Aligned> when 'true' ->
	      %% Line 224
	      case apply 'mk_vars'/2
		       (Val0, []) of
		<{B,[Val|[]]}> when 'true' ->
		    let <Constr> =
			%% Line 225
			apply 'enumerated_constraint'/1
			    (Root)
		    in  let <RootCs> =
			    %% Line 226
			    apply 'per_enc_enumerated_root'/5
				(Root, [{'put_bits',0,1,[1]}], %% Line 227
							       Val, %% Line 227
								    Constr, %% Line 227
									    Aligned)
			in  let <ExtCs> =
				%% Line 228
				apply 'per_enc_enumerated_ext'/3
				    (Ext, Val, Aligned)
			    in  let <_cor7> =
				    %% Line 229
				    apply 'enumerated_error'/1
					(Val)
				in  let <_cor8> =
					%% Line 229
					call 'erlang':'++'
					    (ExtCs, _cor7)
				    in  let <_cor9> =
					    %% Line 229
					    call 'erlang':'++'
						(RootCs, _cor8)
					in  %% Line 229
					    call 'erlang':'++'
						(B, [{'cond',_cor9}|[]])
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 230
	  <Val0,Root,Aligned> when 'true' ->
	      %% Line 231
	      case apply 'mk_vars'/2
		       (Val0, []) of
		<{B,[Val|[]]}> when 'true' ->
		    let <Constr> =
			%% Line 232
			apply 'enumerated_constraint'/1
			    (Root)
		    in  let <Cs> =
			    %% Line 233
			    apply 'per_enc_enumerated_root'/5
				(Root, [], Val, Constr, Aligned)
			in  let <_cor13> =
				%% Line 234
				apply 'enumerated_error'/1
				    (Val)
			    in  let <_cor14> =
				    %% Line 234
				    call 'erlang':'++'
					(Cs, _cor13)
				in  %% Line 234
				    call 'erlang':'++'
					(B, [{'cond',_cor14}|[]])
		( <_cor10> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor10})
		  -| ['compiler_generated'] )
	      end
	end
'enumerated_error'/1 =
    %% Line 236
    fun (_cor0) ->
	%% Line 237
	[['_'|[{'error',_cor0}|[]]]|[]]
'per_enc_integer'/3 =
    %% Line 239
    fun (_cor2,_cor1,_cor0) ->
	%% Line 240
	case apply 'mk_vars'/2
		 (_cor2, []) of
	  <{B,[Val|[]]}> when 'true' ->
	      let <Constraint> =
		  %% Line 241
		  apply 'effective_constraint'/2
		      ('integer', _cor1)
	      in  let <_cor5> =
		      %% Line 242
		      apply 'per_enc_integer_1'/3
			  (Val, Constraint, _cor0)
		  in  %% Line 242
		      call 'erlang':'++'
			  (B, _cor5)
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'per_enc_integer'/4 =
    %% Line 244
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 245
	case apply 'mk_vars'/2
		 (_cor3, []) of
	  <{B,[Val|[]]}> when 'true' ->
	      let <Constraint> =
		  %% Line 246
		  apply 'effective_constraint'/2
		      ('integer', _cor1)
	      in  let <_cor11> =
		      %% Line 247
		      ( letrec
			    'lc$^0'/1 =
				fun (_cor8) ->
				    case _cor8 of
				      <[%% Line 248
					{N,V}|_cor7]> when 'true' ->
					  let <_cor9> =
					      apply 'per_enc_integer_1'/3
						  (V, Constraint, _cor0)
					  in  let <_cor10> =
						  %% Line 248
						  apply 'lc$^0'/1
						      (_cor7)
					      in  ( [[{'eq',Val,N}|_cor9]|_cor10]
						    -| ['compiler_generated'] )
				      ( <[_cor6|_cor7]> when 'true' ->
					    %% Line 248
					    apply 'lc$^0'/1
						(_cor7)
					-| ['compiler_generated'] )
				      <[]> when 'true' ->
					  []
				      ( <_cor8> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_cor8})
					      -| [{'function_name',{'lc$^0',1}}] )
					-| ['compiler_generated'] )
				    end
			in  apply 'lc$^0'/1
				(_cor2)
			-| ['list_comprehension'] )
		  in  %% Line 249
		      case apply 'per_enc_integer_1'/3
			       (Val, Constraint, _cor0) of
			%% Line 250
			<[{'cond',IntCs}|[]]> when 'true' ->
			    let <_cor13> =
				%% Line 251
				call 'erlang':'++'
				    (_cor11, IntCs)
			    in  %% Line 251
				call 'erlang':'++'
				    (B, [{'cond',_cor13}|[]])
			%% Line 252
			<Other> when 'true' ->
			    let <_cor14> =
				%% Line 253
				call 'erlang':'++'
				    (_cor11, [['_'|Other]|[]])
			    in  %% Line 253
				call 'erlang':'++'
				    (B, [{'cond',_cor14}|[]])
		      end
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor4})
	    -| ['compiler_generated'] )
	end
'per_enc_null'/2 =
    %% Line 256
    fun (_cor1,_cor0) ->
	%% Line 257
	[]
'per_enc_k_m_string'/4 =
    %% Line 259
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 260
	case apply 'mk_vars'/2
		 (_cor3, ['bin'|['len']]) of
	  <{B,[Val|[Bin|[Len|[]]]]}> when 'true' ->
	      let <SzConstraint> =
		  %% Line 261
		  apply 'effective_constraint'/2
		      ('bitstring', _cor1)
	      in  let <Unit> =
		      %% Line 262
		      apply 'string_num_bits'/3
			  (_cor2, _cor1, _cor0)
		  in  let <Chars0> =
			  %% Line 263
			  apply 'char_tab'/3
			      (_cor1, _cor2, Unit)
		      in  let <_cor10> =
			      %% Line 264
			      case Unit of
				%% Line 265
				<16> when 'true' ->
				    %% Line 266
				    {'call','per_common','encode_chars_16bit',[Val|[]],Bin}
				%% Line 267
				<32> when 'true' ->
				    %% Line 268
				    {'call','per_common','encode_big_chars',[Val|[]],Bin}
				%% Line 269
				<8> when 'true' ->
				    %% Line 270
				    {'call','erlang','list_to_binary',[Val|[]],Bin}
				%% Line 271
				<_cor19> when 'true' ->
				    %% Line 272
				    case apply 'enc_char_tab'/1
					     (Chars0) of
				      %% Line 273
				      <'notab'> when 'true' ->
					  %% Line 274
					  {'call','per_common','encode_chars',[Val|[Unit|[]]],Bin}
				      %% Line 275
				      <{'tab',Tab}> when 'true' ->
					  %% Line 276
					  {'call','per_common','encode_chars',[Val|[Unit|[Tab|[]]]],Bin}
				      %% Line 277
				      <{'compact_map',Map}> when 'true' ->
					  %% Line 278
					  {'call','per_common','encode_chars_compact_map',%% Line 279
											  [Val|[Unit|[Map|[]]]],%% Line 279
														Bin}
				      ( <_cor8> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_cor8})
					-| ['compiler_generated'] )
				    end
			      end
			  in  let <_cor14> =
				  %% Line 282
				  case Unit of
				    %% Line 283
				    <8> when 'true' ->
					%% Line 284
					call 'erlang':'++'
					    (B, [_cor10|[{'call','erlang','byte_size',[Bin|[]],Len}|[]]])
				    %% Line 285
				    <_cor20> when 'true' ->
					%% Line 286
					call 'erlang':'++'
					    (B, [{'call','erlang','length',[Val|[]],Len}|[_cor10|[]]])
				  end
			      in  let <_cor12> =
				      %% Line 287
				      apply 'per_enc_length'/6
					  (Bin, Unit, Len, SzConstraint, _cor0, 'k_m_string')
				  in  %% Line 287
				      call 'erlang':'++'
					  (_cor14, _cor12)
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor4})
	    -| ['compiler_generated'] )
	end
'per_enc_open_type'/2 =
    %% Line 289
    fun (_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 290
	    case _cor0 of
	      %% Line 291
	      <'true'> when 'true' ->
		  %% Line 299
		  call 'erlang':'++'
		      (_cor1, [{'put_bits',0,0,[1|['align']]}])
	      %% Line 300
	      <'false'> when 'true' ->
		  _cor1
	      ( <_cor2> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor2})
		-| ['compiler_generated'] )
	    end
	in  %% Line 303
	    case apply 'mk_vars'/2
		     ([], ['output'|['len'|['bin']]]) of
	      <{[],[[]|[Val|[Len|[Bin|[]]]]]}> when 'true' ->
		  let <_cor6> =
		      %% Line 305
		      apply 'enc_mod'/1
			  (_cor0)
		  in  let <_cor7> =
			  %% Line 307
			  apply 'per_enc_length'/4
			      (Bin, 8, Len, _cor0)
		      in  %% Line 304
			  [{'list',_cor3,Val}|%% Line 305
					      [{'call',_cor6,'complete',[Val|[]],Bin}|%% Line 306
										      [{'call','erlang','byte_size',[Bin|[]],Len}|_cor7]]]
	      ( <_cor5> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor5})
		-| ['compiler_generated'] )
	    end
'per_enc_octet_string'/3 =
    %% Line 309
    fun (_cor2,_cor1,_cor0) ->
	%% Line 310
	case apply 'mk_vars'/2
		 ([], ['len']) of
	  <{B,[[]|[Len|[]]]}> when 'true' ->
	      let <Constraint> =
		  %% Line 311
		  apply 'effective_constraint'/2
		      ('bitstring', _cor1)
	      in  let <_cor5> =
		      %% Line 313
		      apply 'per_enc_length'/6
			  (_cor2, 8, Len, Constraint, _cor0, 'OCTET STRING')
		  in  %% Line 312
		      call 'erlang':'++'
			  (B, [{'call','erlang','byte_size',[_cor2|[]],Len}|_cor5])
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'per_enc_legacy_octet_string'/3 =
    %% Line 315
    fun (_cor2,_cor1,_cor0) ->
	%% Line 316
	case apply 'mk_vars'/2
		 (_cor2, ['bin'|['len']]) of
	  <{B,[Val|[Bin|[Len|[]]]]}> when 'true' ->
	      let <Constraint> =
		  %% Line 317
		  apply 'effective_constraint'/2
		      ('bitstring', _cor1)
	      in  let <_cor5> =
		      %% Line 320
		      apply 'per_enc_length'/6
			  (Bin, 8, Len, Constraint, _cor0, 'OCTET STRING')
		  in  %% Line 318
		      call 'erlang':'++'
			  (B, [{'call','erlang','iolist_to_binary',[Val|[]],Bin}|%% Line 319
										 [{'call','erlang','byte_size',[Bin|[]],Len}|_cor5]])
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'per_enc_restricted_string'/3 =
    %% Line 322
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Val0,{M,F},Aligned> when 'true' ->
	      %% Line 323
	      case apply 'mk_vars'/2
		       (Val0, ['bin'|['len']]) of
		<{B,[Val|[Bin|[Len|[]]]]}> when 'true' ->
		    let <_cor4> =
			%% Line 326
			apply 'per_enc_length'/4
			    (Bin, 8, Len, Aligned)
		    in  %% Line 324
			call 'erlang':'++'
			    (B, [{'call',M,F,[Val|[]],Bin}|%% Line 325
							   [{'call','erlang','byte_size',[Bin|[]],Len}|_cor4]])
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'per_enc_restricted_string',3}}] )
	    -| ['compiler_generated'] )
	end
'per_enc_small_number'/2 =
    %% Line 328
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 331
	    apply 'per_enc_unsigned'/2
		(_cor1, _cor0)
	in  %% Line 329
	    apply 'build_cond'/1
		([[{'lt',_cor1,64}|[{'put_bits',_cor1,7,[1]}|[]]]|%% Line 330
								  [['_'|[{'put_bits',1,1,[1]}|_cor2]]|%% Line 331
												      []]])
'per_enc_extension_bit'/2 =
    %% Line 333
    fun (_cor1,_cor0) ->
	%% Line 334
	case apply 'mk_vars'/2
		 (_cor1, []) of
	  <{B,[Val|[]]}> when 'true' ->
	      let <_cor3> =
		  %% Line 335
		  apply 'build_cond'/1
		      ([[{'eq',Val,[]}|[{'put_bits',0,1,[1]}]]|%% Line 336
							       [['_'|[{'put_bits',1,1,[1]}]]]])
	      in  %% Line 335
		  call 'erlang':'++'
		      (B, _cor3)
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'per_enc_extensions'/4 =
    %% Line 338
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Val0,Pos0,NumBits,Aligned>
	      when call 'erlang':'>'
		    (NumBits,
		     0) ->
	      let <Pos> =
		  %% Line 339
		  call 'erlang':'+'
		      (Pos0, 1)
	      in  %% Line 340
		  case apply 'mk_vars'/2
			   (Val0, ['bitmap']) of
		    <{B,[Val|[Bitmap|[]]]}> when 'true' ->
			let <Length> =
			    %% Line 341
			    apply 'per_enc_small_length'/2
				(NumBits, Aligned)
			in  let <_cor8> =
				%% Line 342
				case NumBits of
				  %% Line 343
				  <1> when 'true' ->
				      [{'put_bits',1,1,[1]}]
				  %% Line 344
				  <_cor16> when 'true' ->
				      [{'put_bits',Bitmap,NumBits,[1]}|[]]
				end
			    in  let <_cor10> =
				    %% Line 346
				    call 'erlang':'+'
					(Pos, NumBits)
				in  let <_cor11> =
					%% Line 348
					call 'erlang':'++'
					    (Length, _cor8)
				    in  %% Line 346
					call 'erlang':'++'
					    (B, [{'call','per_common','extension_bitmap',[Val|[Pos|[_cor10|[]]]],Bitmap}|%% Line 347
															 [{'list',[{'cond',[[{'eq',Bitmap,0}|[]]|%% Line 348
																				 [['_'|_cor11]|[]]]}|%% Line 348
																						     []],%% Line 349
																							 {'var',[69|[120|[116|[101|[110|[115|[105|[111|[110|[115]]]]]]]]]]}}|%% Line 349
																															     []]])
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor5})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor15,_cor14,_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14,_cor13,_cor12})
		  -| [{'function_name',{'per_enc_extensions',4}}] )
	    -| ['compiler_generated'] )
	end
'per_enc_optional'/3 =
    %% Line 351
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Val0,{Pos,DefVals},_X_Aligned>
	      when let <_cor3> =
		    call 'erlang':'is_integer'
			(Pos)
		in  let <_cor4> =
			%% Line 352
			call 'erlang':'is_list'
			    (DefVals)
		    in  call 'erlang':'and'
			    (_cor3, _cor4) ->
	      %% Line 353
	      case apply 'enc_element'/2
		       (Pos, Val0) of
		<{B,Val}> when 'true' ->
		    let <_cor12> =
			%% Line 357
			( letrec
			      'lc$^0'/1 =
				  fun (_cor10) ->
				      case _cor10 of
					<[DefVal|_cor9]> when 'true' ->
					    let <_cor11> =
						apply 'lc$^0'/1
						    (_cor9)
					    in  ( [[{'eq',Val,DefVal}|[{'put_bits',0,1,[1]}]]|_cor11]
						  -| ['compiler_generated'] )
					<[]> when 'true' ->
					    [['_'|[{'put_bits',1,1,[1]}]]]
					( <_cor10> when 'true' ->
					      ( primop 'match_fail'
						    ({'function_clause',_cor10})
						-| [{'function_name',{'lc$^0',1}}] )
					  -| ['compiler_generated'] )
				      end
			  in  apply 'lc$^0'/1
				  (DefVals)
			  -| ['list_comprehension'] )
		    in  %% Line 356
			call 'erlang':'++'
			    (B, [{'cond',_cor12}|%% Line 357
						 []])
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 358
	  <Val0,{Pos,{'call',M,F,A}},_X_Aligned>
	      when call 'erlang':'is_integer'
		    (Pos) ->
	      %% Line 359
	      case apply 'enc_element'/2
		       (Pos, Val0) of
		<{B,Val}> when 'true' ->
		    %% Line 360
		    case apply 'mk_vars'/2
			     ([], ['tmp']) of
		      <{[],[[]|[Tmp|[]]]}> when 'true' ->
			  %% Line 363
			  call 'erlang':'++'
			      (B, [{'call',M,F,[Val|A],Tmp}|%% Line 364
							    [{'cond',%% Line 365
								     [[{'eq',Tmp,'true'}|[{'put_bits',0,1,[1]}]]|[['_'|[{'put_bits',1,1,[1]}]]]]}|%% Line 365
																		  []]])
		      ( <_cor14> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor14})
			-| ['compiler_generated'] )
		    end
		( <_cor13> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor13})
		  -| ['compiler_generated'] )
	      end
	  %% Line 366
	  <Val0,Pos,_X_Aligned>
	      when call 'erlang':'is_integer'
		    (Pos) ->
	      %% Line 367
	      case apply 'enc_element'/2
		       (Pos, Val0) of
		<{B,Val}> when 'true' ->
		    %% Line 370
		    call 'erlang':'++'
			(B, [{'cond',[[{'eq',Val,'asn1_NOVALUE'}|[{'put_bits',0,1,[1]}]]|%% Line 371
											 [['_'|[{'put_bits',1,1,[1]}]]]]}|%% Line 371
															  []])
		( <_cor17> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor17})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor22,_cor21,_cor20> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor22,_cor21,_cor20})
		  -| [{'function_name',{'per_enc_optional',3}}] )
	    -| ['compiler_generated'] )
	end
'per_enc_sof'/5 =
    %% Line 373
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 374
	case apply 'mk_vars'/2
		 (_cor4, ['len']) of
	  <{B,[Val|[Len|[]]]}> when 'true' ->
	      let <SzConstraint> =
		  %% Line 375
		  apply 'effective_constraint'/2
		      ('bitstring', _cor3)
	      in  let <LenImm> =
		      %% Line 376
		      apply 'enc_length'/3
			  (Len, SzConstraint, _cor0)
		  in  let <_cor8> =
			  %% Line 377
			  call 'erlang':'atom_to_list'
			      (_cor2)
		      in  let <Lc0> =
			      %% Line 377
			      [{'lc',_cor1,{'var',_cor8},Val}|[]]
			  in  let <Lc> =
				  %% Line 378
				  apply 'opt_lc'/2
				      (Lc0, LenImm)
			      in  let <PreBlock> =
				      %% Line 379
				      call 'erlang':'++'
					  (B, [{'call','erlang','length',[Val|[]],Len}|[]])
				  in  %% Line 380
				      case LenImm of
					%% Line 381
					<[{'cond',[[C|Action]|[]]}|[]]> when 'true' ->
					    let <_cor12> =
						%% Line 382
						call 'erlang':'++'
						    (Action, Lc)
					    in  %% Line 382
						call 'erlang':'++'
						    (PreBlock, [{'cond',[[C|_cor12]|[]]}|[]])
					%% Line 383
					<[Sub = {'sub',_cor21,_cor22,_cor23}|[{'cond',[[C|Action]|[]]}|[]]]> when 'true' ->
					    let <_cor13> =
						%% Line 385
						call 'erlang':'++'
						    (Action, Lc)
					    in  %% Line 384
						call 'erlang':'++'
						    (PreBlock, %% Line 385
							       [Sub|[{'cond',[[C|_cor13]|[]]}|[]]])
					%% Line 386
					<EncLen> when 'true' ->
					    let <_cor14> =
						%% Line 387
						call 'erlang':'++'
						    (EncLen, Lc)
					    in  %% Line 387
						call 'erlang':'++'
						    (PreBlock, _cor14)
				      end
	  ( <_cor5> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor5})
	    -| ['compiler_generated'] )
	end
'enc_absent'/3 =
    %% Line 390
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Val0,{'call',M,F,A},Body> when 'true' ->
	      %% Line 391
	      case apply 'mk_vars'/2
		       (Val0, ['tmp']) of
		<{B,[Var|[Tmp|[]]]}> when 'true' ->
		    %% Line 392
		    call 'erlang':'++'
			(B, [{'call',M,F,[Var|A],Tmp}|%% Line 393
						      [{'cond',%% Line 394
							       [[{'eq',Tmp,'true'}|[]]|[['_'|Body]|[]]]}|%% Line 394
													 []]])
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 395
	  <Val0,AbsVals,Body>
	      when call 'erlang':'is_list'
		    (AbsVals) ->
	      %% Line 396
	      case apply 'mk_vars'/2
		       (Val0, []) of
		<{B,[Var|[]]}> when 'true' ->
		    let <_cor9> =
			%% Line 397
			( letrec
			      'lc$^0'/1 =
				  fun (_cor7) ->
				      case _cor7 of
					<[Aval|_cor6]> when 'true' ->
					    let <_cor8> =
						apply 'lc$^0'/1
						    (_cor6)
					    in  ( [[{'eq',Var,Aval}|[]]|_cor8]
						  -| ['compiler_generated'] )
					<[]> when 'true' ->
					    [['_'|Body]|[]]
					( <_cor7> when 'true' ->
					      ( primop 'match_fail'
						    ({'function_clause',_cor7})
						-| [{'function_name',{'lc$^0',1}}] )
					  -| ['compiler_generated'] )
				      end
			  in  apply 'lc$^0'/1
				  (AbsVals)
			  -| ['list_comprehension'] )
		    in  let <_cor11> =
			    %% Line 398
			    apply 'build_cond'/1
				(_cor9)
			in  %% Line 398
			    call 'erlang':'++'
				(B, _cor11)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor14,_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12})
		  -| [{'function_name',{'enc_absent',3}}] )
	    -| ['compiler_generated'] )
	end
'enc_append'/1 =
    %% Line 400
    fun (_cor0) ->
	case _cor0 of
	  <[[]|T]> when 'true' ->
	      %% Line 401
	      apply 'enc_append'/1
		  (T)
	  %% Line 402
	  <[Pb = [{'put_bits',_cor12,_cor13,_cor14}|_cor15]|T0 = [Imm|T]]> when 'true' ->
	      let <_cor1> =
		  %% Line 403
		  call 'erlang':'++'
		      (Pb, Imm)
	      in  %% Line 403
		  case apply 'opt_choice'/1
			   (_cor1) of
		    %% Line 404
		    <[{'put_bits',_cor16,_cor17,_cor18}|_cor19]> when 'true' ->
			let <_cor2> =
			    %% Line 405
			    apply 'enc_append'/1
				(T0)
			in  %% Line 405
			    [{'block',Pb}|_cor2]
		    %% Line 406
		    <Opt> when 'true' ->
			%% Line 407
			apply 'enc_append'/1
			    ([Opt|T])
		  end
	  %% Line 409
	  <[Imm0|T0 = [Imm1|T]]> when 'true' ->
	      %% Line 410
	      try
		  apply 'combine_imms'/2
		      (Imm0, Imm1)
	      of <_cor4> ->
		  %% Line 412
		  apply 'enc_append'/1
		      ([_cor4|T])
	      catch <_cor8,_cor7,_cor6> ->
		  case <_cor8,_cor7,_cor6> of
		    %% Line 414
		    <'throw','impossible',_cor20> when 'true' ->
			let <_cor9> =
			    %% Line 415
			    apply 'enc_append'/1
				(T0)
			in  %% Line 415
			    [{'block',Imm0}|_cor9]
		    ( <_cor8,_cor7,_cor6> when 'true' ->
			  primop 'raise'
			      (_cor6, _cor7)
		      -| ['compiler_generated'] )
		  end
	  %% Line 417
	  <[H|T]> when 'true' ->
	      let <_cor10> =
		  %% Line 418
		  apply 'enc_append'/1
		      (T)
	      in  %% Line 418
		  [{'block',H}|_cor10]
	  %% Line 419
	  <[]> when 'true' ->
	      []
	  ( <_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11})
		  -| [{'function_name',{'enc_append',1}}] )
	    -| ['compiler_generated'] )
	end
'enc_element'/2 =
    %% Line 421
    fun (_cor1,_cor0) ->
	%% Line 422
	case apply 'mk_vars'/2
		 (_cor0, ['element']) of
	  <{[],[Val|[Dst|[]]]}> when 'true' ->
	      %% Line 423
	      {[{'call','erlang','element',[_cor1|[Val|[]]],Dst}|[]],Dst}
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'enc_cg'/2 =
    %% Line 425
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Imm0,'false'> when 'true' ->
	      let <Imm1> =
		  %% Line 426
		  apply 'enc_cse'/1
		      (Imm0)
	      in  let <Imm2> =
		      %% Line 427
		      apply 'enc_pre_cg'/1
			  (Imm1)
		  in  let <Imm> =
			  %% Line 428
			  apply 'enc_opt'/1
			      (Imm2)
		      in  %% Line 429
			  apply 'enc_cg'/1
			      (Imm)
	  %% Line 430
	  <Imm0,'true'> when 'true' ->
	      let <Imm1> =
		  %% Line 431
		  apply 'enc_cse'/1
		      (Imm0)
	      in  let <Imm2> =
		      %% Line 432
		      apply 'enc_hoist_align'/1
			  (Imm1)
		  in  let <Imm3> =
			  %% Line 433
			  apply 'enc_opt_al'/1
			      (Imm2)
		      in  let <Imm4> =
			      %% Line 434
			      apply 'per_fixup'/1
				  (Imm3)
			  in  let <Imm5> =
				  %% Line 435
				  apply 'enc_pre_cg'/1
				      (Imm4)
			      in  let <Imm> =
				      %% Line 436
				      apply 'enc_opt'/1
					  (Imm5)
				  in  %% Line 437
				      apply 'enc_cg'/1
					  (Imm)
	  ( <_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11})
		  -| [{'function_name',{'enc_cg',2}}] )
	    -| ['compiler_generated'] )
	end
'is_aligned'/3 =
    %% Line 448
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <T,Lb,Ub>
	      when let <_cor3> =
		    call 'erlang':'=:='
			(T, 'OCTET STRING')
		in  let <_cor4> =
			call 'erlang':'=:='
			    (T, 'BIT STRING')
		    in  call 'erlang':'or'
			    (_cor3, _cor4) ->
	      %% Line 451
	      ( case <> of
		  ( <>
			when call 'erlang':'=/='
			      (Lb,
			       Ub) ->
			'true'
		    -| ['compiler_generated'] )
		  ( <> when 'true' ->
			call 'erlang':'>'
			    (Lb, 16)
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 452
	  <'k_m_string',_X_Lb,Ub> when 'true' ->
	      %% Line 456
	      call 'erlang':'>='
		  (Ub, 16)
	  ( <_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7})
		  -| [{'function_name',{'is_aligned',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_string'/4 =
    %% Line 462
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Sv,U,Aligned0,T>
	      when call 'erlang':'is_integer'
		    (Sv) ->
	      let <Bits> =
		  %% Line 463
		  call 'erlang':'*'
		      (U, Sv)
	      in  let <_cor7> =
		      %% Line 464
		      ( case Aligned0 of
			  ( <( 'true'
			       -| ['compiler_generated'] )> when 'true' ->
				apply 'is_aligned'/3
				    (T, Bits, Bits)
			    -| ['compiler_generated'] )
			  ( <( 'false'
			       -| ['compiler_generated'] )> when 'true' ->
				'false'
			    -| ['compiler_generated'] )
			  ( <_cor5> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {( 'badarg'
					    -| ['compiler_generated'] ),_cor5}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		  in  %% Line 465
		      {'get_bits',Sv,[U|['binary'|[{'align',_cor7}|[]]]]}
	  %% Line 466
	  <{{Sv,_cor30},[]},U,Aligned,T>
	      when call 'erlang':'=:='
		    (_cor30,
		     Sv) ->
	      let <_cor10> =
		  %% Line 467
		  apply 'dec_string'/4
		      (Sv, U, Aligned, T)
	      in  let <_cor9> =
		      %% Line 468
		      apply 'dec_string'/4
			  ('no', U, Aligned, T)
		  in  %% Line 467
		      apply 'bit_case'/2
			  (_cor10, _cor9)
	  %% Line 469
	  <{C = {_cor31,_cor32},[]},U,Aligned,T> when 'true' ->
	      let <_cor12> =
		  %% Line 470
		  apply 'dec_string'/4
		      (C, U, Aligned, T)
	      in  let <_cor11> =
		      %% Line 471
		      apply 'dec_string'/4
			  ('no', U, Aligned, T)
		  in  %% Line 470
		      apply 'bit_case'/2
			  (_cor12, _cor11)
	  %% Line 472
	  <{Lb,Ub},U,Aligned0,T> when 'true' ->
	      let <Len> =
		  %% Line 473
		  apply 'per_dec_constrained'/3
		      (Lb, Ub, Aligned0)
	      in  let <_cor18> =
		      %% Line 474
		      ( case Aligned0 of
			  ( <( 'true'
			       -| ['compiler_generated'] )> when 'true' ->
				let <_cor16> =
				    call 'erlang':'*'
					(Lb, U)
				in  let <_cor15> =
					call 'erlang':'*'
					    (Ub, U)
				    in  apply 'is_aligned'/3
					    (T, _cor16, _cor15)
			    -| ['compiler_generated'] )
			  ( <( 'false'
			       -| ['compiler_generated'] )> when 'true' ->
				'false'
			    -| ['compiler_generated'] )
			  ( <_cor14> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {( 'badarg'
					    -| ['compiler_generated'] ),_cor14}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		  in  %% Line 475
		      {'get_bits',Len,[U|['binary'|[{'align',_cor18}|[]]]]}
	  %% Line 476
	  <_cor33,U,Aligned,_X_T> when 'true' ->
	      let <Al> =
		  %% Line 477
		  [{'align',Aligned}|[]]
	      in  let <DecRest> =
		      %% Line 478
		      ( fun (_cor22,_cor21) ->
			    %% Line 479
			    call 'asn1ct_func':'call'
				('per_common', %% Line 480
					       'decode_fragmented', %% Line 481
								    [_cor22|[_cor21|[U|[]]]])
			-| [{'id',{0,0,'-dec_string/4-fun-0-'}}] )
		  in  %% Line 483
		      {'case',[{'test',{'get_bits',1,[1|Al]},0,%% Line 484
							       {'value',{'get_bits',%% Line 485
										    {'get_bits',7,[1]},%% Line 486
												       [U|['binary']]}}}|%% Line 487
															 [{'test',{'get_bits',1,[1|Al]},1,%% Line 488
																			  {'test',{'get_bits',1,[1]},0,%% Line 489
																						       {'value',{'get_bits',%% Line 490
																									    {'get_bits',14,[1]},%% Line 491
																												[U|['binary']]}}}}|%% Line 492
																														   [{'test',{'get_bits',1,[1|Al]},1,%% Line 493
																																		    {'test',{'get_bits',1,[1]},1,%% Line 494
																																						 {'value',{'call',DecRest,{'get_bits',6,[1]}}}}}|%% Line 494
																																												 []]]]}
	end
'per_dec_enumerated_fix_list'/3 =
    %% Line 496
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[{V,_cor8}|T],Tail,N> when 'true' ->
	      let <_cor3> =
		  %% Line 497
		  call 'erlang':'+'
		      (N, 1)
	      in  let <_cor4> =
		      %% Line 497
		      apply 'per_dec_enumerated_fix_list'/3
			  (T, Tail, _cor3)
		  in  %% Line 497
		      [{N,V}|_cor4]
	  %% Line 498
	  <[],Tail,_cor9> when 'true' ->
	      Tail
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'per_dec_enumerated_fix_list',3}}] )
	    -| ['compiler_generated'] )
	end
'per_dec_integer_1'/2 =
    %% Line 500
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{'SingleValue',Value}|[]],_X_Aligned> when 'true' ->
	      %% Line 501
	      {'value',Value}
	  %% Line 502
	  <[{'ValueRange',{Lb,'MAX'}}|[]],Aligned>
	      when call 'erlang':'is_integer'
		    (Lb) ->
	      %% Line 503
	      apply 'per_decode_semi_constrained'/2
		  (Lb, Aligned)
	  %% Line 504
	  <[{'ValueRange',{Lb,Ub}}|[]],Aligned>
	      when let <_cor2> =
		    call 'erlang':'is_integer'
			(Lb)
		in  let <_cor3> =
			%% Line 505
			call 'erlang':'is_integer'
			    (Ub)
		    in  call 'erlang':'and'
			    (_cor2, _cor3) ->
	      %% Line 506
	      apply 'per_dec_constrained'/3
		  (Lb, Ub, Aligned)
	  %% Line 507
	  <[{Constr0 = {_cor9,_cor10},_cor11}|[]],Aligned> when 'true' ->
	      let <Constr> =
		  %% Line 508
		  apply 'effective_constraint'/2
		      ('integer', [Constr0|[]])
	      in  let <_cor6> =
		      %% Line 509
		      apply 'per_dec_integer'/2
			  (Constr, Aligned)
		  in  let <_cor5> =
			  %% Line 510
			  apply 'per_dec_unconstrained'/1
			      (Aligned)
		      in  %% Line 509
			  apply 'bit_case'/2
			      (_cor6, _cor5)
	  %% Line 511
	  <[],Aligned> when 'true' ->
	      %% Line 512
	      apply 'per_dec_unconstrained'/1
		  (Aligned)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'per_dec_integer_1',2}}] )
	    -| ['compiler_generated'] )
	end
'per_dec_unconstrained'/1 =
    %% Line 514
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 515
	    apply 'decode_unconstrained_length'/2
		('false', _cor0)
	in  %% Line 515
	    {'get_bits',_cor1,[8|['signed']]}
'per_dec_constrained'/3 =
    %% Line 517
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Lb,Ub,'false'> when 'true' ->
	      let <_cor3> =
		  %% Line 518
		  call 'erlang':'-'
		      (Ub, Lb)
	      in  let <Range> =
		      %% Line 518
		      call 'erlang':'+'
			  (_cor3, 1)
		  in  let <_cor5> =
			  %% Line 519
			  apply 'uper_num_bits'/1
			      (Range)
		      in  let <Get> =
			      %% Line 519
			      {'get_bits',_cor5,[1]}
			  in  %% Line 520
			      apply 'add_lb'/2
				  (Lb, Get)
	  %% Line 521
	  <Lb,Ub,'true'> when 'true' ->
	      let <_cor7> =
		  %% Line 522
		  call 'erlang':'-'
		      (Ub, Lb)
	      in  let <Range> =
		      %% Line 522
		      call 'erlang':'+'
			  (_cor7, 1)
		  in  let <_cor14> =
			  %% Line 523
			  case <> of
			    %% Line 524
			    <>
				when call 'erlang':'=<'
				      (Range,
				       255) ->
				let <_cor9> =
				    %% Line 525
				    apply 'per_num_bits'/1
					(Range)
				in  %% Line 525
				    {'get_bits',_cor9,[1|['unsigned']]}
			    %% Line 526
			    <>
				when call 'erlang':'=='
				      (Range,
				       256) ->
				%% Line 527
				{'get_bits',1,[8|['unsigned'|[{'align','true'}]]]}
			    %% Line 528
			    <>
				when call 'erlang':'=<'
				      (Range,
				       65536) ->
				%% Line 529
				{'get_bits',2,[8|['unsigned'|[{'align','true'}]]]}
			    %% Line 530
			    <> when 'true' ->
				let <_cor10> =
				    %% Line 531
				    call 'erlang':'-'
					(Range, 1)
				in  let <_cor11> =
					%% Line 531
					call 'binary':'encode_unsigned'
					    (_cor10)
				    in  let <RangeOctLen> =
					    %% Line 531
					    call 'erlang':'byte_size'
						(_cor11)
					in  let <_cor13> =
						%% Line 532
						apply 'per_dec_length'/3
						    ({1,RangeOctLen}, 'false', 'true')
					    in  %% Line 532
						{'get_bits',_cor13,%% Line 533
								   [8|['unsigned'|[{'align','true'}]]]}
			  end
		      in  %% Line 535
			  apply 'add_lb'/2
			      (Lb, _cor14)
	  ( <_cor18,_cor17,_cor16> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor18,_cor17,_cor16})
		  -| [{'function_name',{'per_dec_constrained',3}}] )
	    -| ['compiler_generated'] )
	end
'add_lb'/2 =
    %% Line 537
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <0,Get> when 'true' ->
	      Get
	  %% Line 538
	  <Lb,Get> when 'true' ->
	      {'add',Get,Lb}
	end
'per_dec_normally_small_number'/1 =
    %% Line 540
    fun (_cor0) ->
	let <Unlimited> =
	    %% Line 542
	    apply 'per_decode_semi_constrained'/2
		(0, _cor0)
	in  %% Line 543
	    apply 'bit_case'/2
		({'get_bits',6,[1]}, Unlimited)
'per_dec_normally_small_length'/1 =
    %% Line 545
    fun (_cor0) ->
	let <Unlimited> =
	    %% Line 547
	    apply 'decode_unconstrained_length'/2
		('false', _cor0)
	in  %% Line 548
	    apply 'bit_case'/2
		({'add',{'get_bits',6,[1]},1}, Unlimited)
'per_decode_semi_constrained'/2 =
    %% Line 550
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 551
	    apply 'decode_unconstrained_length'/2
		('false', _cor0)
	in  %% Line 551
	    apply 'add_lb'/2
		(_cor1, {'get_bits',_cor2,[8]})
'bit_case'/2 =
    %% Line 553
    fun (_cor1,_cor0) ->
	%% Line 554
	{'case',[{'test',{'get_bits',1,[1]},0,_cor1}|%% Line 555
						     [{'test',{'get_bits',1,[1]},1,_cor0}|[]]]}
'decode_unconstrained_length'/2 =
    %% Line 557
    fun (_cor1,_cor0) ->
	let <Al> =
	    %% Line 558
	    [{'align',_cor0}|[]]
	in  let <_cor4> =
		%% Line 559
		case _cor1 of
		  %% Line 560
		  <'false'> when 'true' ->
		      ['non_zero']
		  %% Line 561
		  <'true'> when 'true' ->
		      []
		  ( <_cor3> when 'true' ->
			primop 'match_fail'
			    ({'case_clause',_cor3})
		    -| ['compiler_generated'] )
		end
	    in  %% Line 563
		{'case',[{'test',{'get_bits',1,[1|Al]},0,%% Line 564
							 {'value',{'get_bits',7,[1|_cor4]}}}|%% Line 565
											     [{'test',{'get_bits',1,[1|Al]},1,%% Line 566
															      {'test',{'get_bits',1,[1]},0,%% Line 567
																			   {'value',{'get_bits',14,[1|_cor4]}}}}|%% Line 567
																								 []]]}
'uper_num_bits'/1 =
    %% Line 569
    fun (_cor0) ->
	%% Line 570
	apply 'uper_num_bits'/3
	    (_cor0, 1, 0)
'uper_num_bits'/3 =
    %% Line 572
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <N,T,B>
	      when call 'erlang':'=<'
		    (N,
		     T) ->
	      B
	  %% Line 573
	  <N,T,B> when 'true' ->
	      let <_cor4> =
		  call 'erlang':'bsl'
		      (T, 1)
	      in  let <_cor3> =
		      call 'erlang':'+'
			  (B, 1)
		  in  apply 'uper_num_bits'/3
			  (N, _cor4, _cor3)
	end
'per_num_bits'/1 =
    %% Line 575
    fun (_cor0) ->
	case _cor0 of
	  <2> when 'true' ->
	      1
	  %% Line 576
	  <N>
	      when call 'erlang':'=<'
		    (_cor0,
		     4) ->
	      2
	  %% Line 577
	  <N>
	      when call 'erlang':'=<'
		    (_cor0,
		     8) ->
	      3
	  %% Line 578
	  <N>
	      when call 'erlang':'=<'
		    (_cor0,
		     16) ->
	      4
	  %% Line 579
	  <N>
	      when call 'erlang':'=<'
		    (_cor0,
		     32) ->
	      5
	  %% Line 580
	  <N>
	      when call 'erlang':'=<'
		    (_cor0,
		     64) ->
	      6
	  %% Line 581
	  <N>
	      when call 'erlang':'=<'
		    (_cor0,
		     128) ->
	      7
	  %% Line 582
	  <N>
	      when call 'erlang':'=<'
		    (_cor0,
		     255) ->
	      8
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'per_num_bits',1}}] )
	    -| ['compiler_generated'] )
	end
'opt_map'/2 =
    %% Line 584
    fun (_cor1,_cor0) ->
	%% Line 585
	case apply 'matched_range'/1
		 (_cor0) of
	  %% Line 586
	  <'unknown'> when 'true' ->
	      _cor1
	  %% Line 587
	  <{Lb,Ub}> when 'true' ->
	      apply 'opt_map_1'/3
		  (_cor1, Lb, Ub)
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor2})
	    -| ['compiler_generated'] )
	end
'opt_map_1'/3 =
    %% Line 590
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[Pair = {I,_cor13}|T],Lb,Ub> when 'true' ->
	      %% Line 591
	      case <> of
		%% Line 592
		<>
		    when let <_cor3> =
			  call 'erlang':'=:='
			      (I, Lb)
		      in  let <_cor4> =
			      call 'erlang':'=<'
				  (I, Ub)
			  in  call 'erlang':'and'
				  (_cor3, _cor4) ->
		    let <_cor5> =
			%% Line 593
			call 'erlang':'+'
			    (Lb, 1)
		    in  let <_cor6> =
			    %% Line 593
			    apply 'opt_map_1'/3
				(T, _cor5, Ub)
			in  %% Line 593
			    [Pair|_cor6]
		%% Line 594
		<>
		    when let <_cor7> =
			  call 'erlang':'<'
			      (Lb, I)
		      in  let <_cor8> =
			      call 'erlang':'=<'
				  (I, Ub)
			  in  call 'erlang':'and'
				  (_cor7, _cor8) ->
		    let <_cor9> =
			%% Line 595
			apply 'opt_map_1'/3
			    (T, Lb, Ub)
		    in  %% Line 595
			[Pair|_cor9]
		%% Line 596
		<> when 'true' ->
		    %% Line 597
		    apply 'opt_map_1'/3
			(T, Lb, Ub)
	      end
	  %% Line 599
	  <Map,Lb,Ub> when 'true' ->
	      %% Line 600
	      case <> of
		%% Line 601
		<>
		    when call 'erlang':'=<'
			  (Lb,
			   Ub) ->
		    %% Line 602
		    Map
		%% Line 603
		<> when 'true' ->
		    %% Line 604
		    []
	      end
	end
'matched_range'/1 =
    %% Line 607
    fun (_cor0) ->
	case _cor0 of
	  <{'get_bits',Bits0,[U|Flags]}>
	      when call 'erlang':'is_integer'
		    (U) ->
	      let <_cor2> =
		  %% Line 608
		  call 'lists':'member'
		      ('signed', Flags)
	      in  let <_cor4> =
		      %% Line 608
		      ( case _cor2 of
			  ( <'false'> when 'true' ->
				call 'erlang':'is_integer'
				    (Bits0)
			    -| ['compiler_generated'] )
			  ( <'true'> when 'true' ->
				'false'
			    -| ['compiler_generated'] )
			  ( <_cor_variable> when 'true' ->
				call 'erlang':'error'
				    ('badarg')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		  in  %% Line 608
		      case _cor4 of
			%% Line 609
			<'true'> when 'true' ->
			    let <Bits> =
				%% Line 610
				call 'erlang':'*'
				    (U, Bits0)
			    in  let <_cor6> =
				    %% Line 611
				    call 'erlang':'bsl'
					(1, Bits)
				in  let <_cor7> =
					%% Line 611
					call 'erlang':'-'
					    (_cor6, 1)
				    in  %% Line 611
					{0,_cor7}
			%% Line 612
			<'false'> when 'true' ->
			    %% Line 613
			    'unknown'
			( <_cor8> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor8})
			  -| ['compiler_generated'] )
		      end
	  %% Line 615
	  <{'add',Imm,Add}> when 'true' ->
	      %% Line 616
	      case apply 'matched_range'/1
		       (Imm) of
		%% Line 617
		<'unknown'> when 'true' ->
		    'unknown'
		%% Line 618
		<{Lb,Ub}> when 'true' ->
		    let <_cor10> =
			call 'erlang':'+'
			    (Lb, Add)
		    in  let <_cor9> =
			    call 'erlang':'+'
				(Ub, Add)
			in  {_cor10,_cor9}
		( <_cor11> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor11})
		  -| ['compiler_generated'] )
	      end
	  %% Line 620
	  <_X_Op> when 'true' ->
	      'unknown'
	end
'string_num_bits'/3 =
    %% Line 622
    fun (_cor2,_cor1,_cor0) ->
	%% Line 623
	case apply 'get_constraint'/2
		 (_cor1, 'PermittedAlphabet') of
	  %% Line 624
	  <{'SingleValue',Sv}> when 'true' ->
	      let <_cor3> =
		  %% Line 625
		  call 'erlang':'length'
		      (Sv)
	      in  %% Line 625
		  apply 'charbits'/2
		      (_cor3, _cor0)
	  %% Line 626
	  <'no'> when 'true' ->
	      %% Line 627
	      case _cor2 of
		%% Line 628
		<'IA5String'> when 'true' ->
		    %% Line 629
		    apply 'charbits'/2
			(128, _cor0)
		%% Line 630
		<'VisibleString'> when 'true' ->
		    %% Line 631
		    apply 'charbits'/2
			(95, _cor0)
		%% Line 632
		<'PrintableString'> when 'true' ->
		    %% Line 633
		    apply 'charbits'/2
			(74, _cor0)
		%% Line 634
		<'NumericString'> when 'true' ->
		    %% Line 635
		    apply 'charbits'/2
			(11, _cor0)
		%% Line 636
		<'UniversalString'> when 'true' ->
		    %% Line 637
		    32
		%% Line 638
		<'BMPString'> when 'true' ->
		    %% Line 639
		    16
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor5> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor5})
	    -| ['compiler_generated'] )
	end
'charbits'/2 =
    %% Line 643
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <NumChars,'false'> when 'true' ->
	      %% Line 644
	      apply 'uper_num_bits'/1
		  (NumChars)
	  %% Line 645
	  <NumChars,'true'> when 'true' ->
	      let <_cor2> =
		  %% Line 646
		  apply 'uper_num_bits'/1
		      (NumChars)
	      in  let <_cor3> =
		      %% Line 646
		      apply 'uper_num_bits'/1
			  (_cor2)
		  in  %% Line 646
		      call 'erlang':'bsl'
			  (1, _cor3)
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'charbits',2}}] )
	    -| ['compiler_generated'] )
	end
'convert_string'/3 =
    %% Line 648
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <8,'notab',Imm> when 'true' ->
	      %% Line 649
	      {'convert','binary_to_list',Imm}
	  %% Line 650
	  <NumBits,'notab',Imm>
	      when call 'erlang':'<'
		    (NumBits,
		     8) ->
	      let <Dec> =
		  %% Line 651
		  ( fun (_cor4,_cor3) ->
			%% Line 652
			call 'asn1ct_gen':'emit'
			    ([[123]|[{'call','per_common','decode_chars',%% Line 653
									 [_cor4|[NumBits|[]]]}|%% Line 653
											       ['com'|[_cor3|[[125]]]]]])
		    -| [{'id',{0,0,'-convert_string/3-fun-0-'}}] )
	      in  %% Line 655
		  {'call',Dec,Imm}
	  %% Line 656
	  <NumBits,'notab',Imm>
	      when call 'erlang':'=:='
		    (NumBits,
		     16) ->
	      let <Dec> =
		  %% Line 657
		  ( fun (_cor9,_cor8) ->
			%% Line 658
			call 'asn1ct_gen':'emit'
			    ([[123]|[{'call','per_common','decode_chars_16bit',%% Line 659
									       [_cor9|[]]}|%% Line 659
											   ['com'|[_cor8|[[125]]]]]])
		    -| [{'id',{0,0,'-convert_string/3-fun-1-'}}] )
	      in  %% Line 661
		  {'call',Dec,Imm}
	  %% Line 662
	  <NumBits,'notab',Imm> when 'true' ->
	      let <Dec> =
		  %% Line 663
		  ( fun (_cor14,_cor13) ->
			%% Line 664
			call 'asn1ct_gen':'emit'
			    ([[123]|[{'call','per_common','decode_big_chars',%% Line 665
									     [_cor14|[NumBits|[]]]}|%% Line 665
												    ['com'|[_cor13|[[125]]]]]])
		    -| [{'id',{0,0,'-convert_string/3-fun-2-'}}] )
	      in  %% Line 667
		  {'call',Dec,Imm}
	  %% Line 668
	  <NumBits,Chars,Imm> when 'true' ->
	      let <Dec> =
		  %% Line 669
		  ( fun (_cor19,_cor18) ->
			%% Line 670
			call 'asn1ct_gen':'emit'
			    ([[123]|[{'call','per_common','decode_chars',%% Line 671
									 [_cor19|[NumBits|[{'asis',Chars}|[]]]]}|%% Line 671
														 ['com'|[_cor18|[[125]]]]]])
		    -| [{'id',{0,0,'-convert_string/3-fun-3-'}}] )
	      in  %% Line 673
		  {'call',Dec,Imm}
	end
'char_tab'/3 =
    %% Line 675
    fun (_cor2,_cor1,_cor0) ->
	%% Line 676
	case apply 'get_constraint'/2
		 (_cor2, 'PermittedAlphabet') of
	  %% Line 677
	  <{'SingleValue',Sv}> when 'true' ->
	      %% Line 678
	      apply 'char_tab_1'/2
		  (Sv, _cor0)
	  %% Line 679
	  <'no'> when 'true' ->
	      %% Line 680
	      case _cor1 of
		%% Line 681
		<'IA5String'> when 'true' ->
		    %% Line 682
		    'notab'
		%% Line 683
		<'VisibleString'> when 'true' ->
		    %% Line 684
		    'notab'
		%% Line 685
		<'PrintableString'> when 'true' ->
		    %% Line 689
		    apply 'char_tab_1'/2
			([32|[39|[40|[41|[43|[44|[45|[46|[47|[48|[49|[50|[51|[52|[53|[54|[55|[56|[57|[58|[61|[63|[65|[66|[67|[68|[69|[70|[71|[72|[73|[74|[75|[76|[77|[78|[79|[80|[81|[82|[83|[84|[85|[86|[87|[88|[89|[90|[97|[98|[99|[100|[101|[102|[103|[104|[105|[106|[107|[108|[109|[110|[111|[112|[113|[114|[115|[116|[117|[118|[119|[120|[121|[122]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], _cor0)
		%% Line 690
		<'NumericString'> when 'true' ->
		    %% Line 691
		    apply 'char_tab_1'/2
			([32|[48|[49|[50|[51|[52|[53|[54|[55|[56|[57]]]]]]]]]]], _cor0)
		%% Line 692
		<'UniversalString'> when 'true' ->
		    %% Line 693
		    'notab'
		%% Line 694
		<'BMPString'> when 'true' ->
		    %% Line 695
		    'notab'
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor5> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor5})
	    -| ['compiler_generated'] )
	end
'char_tab_1'/2 =
    %% Line 699
    fun (_cor1,_cor0) ->
	let <Max> =
	    %% Line 700
	    call 'lists':'max'
		(_cor1)
	in  let <_cor3> =
		%% Line 701
		call 'erlang':'bsl'
		    (1, _cor0)
	    in  let <BitValMax> =
		    %% Line 701
		    call 'erlang':'-'
			(_cor3, 1)
		in  %% Line 702
		    case <> of
		      %% Line 703
		      <>
			  when call 'erlang':'=<'
				(Max,
				 BitValMax) ->
			  %% Line 704
			  'notab'
		      %% Line 705
		      <> when 'true' ->
			  let <_cor5> =
			      %% Line 706
			      call 'lists':'sort'
				  (_cor1)
			  in  %% Line 706
			      call 'erlang':'list_to_tuple'
				  (_cor5)
		    end
'opt_al'/2 =
    %% Line 713
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'get_bits',E0,Opts0},A0> when 'true' ->
	      %% Line 714
	      case apply 'opt_al'/2
		       (E0, A0) of
		<{E,A1}> when 'true' ->
		    let <Opts> =
			%% Line 715
			apply 'opt_al_1'/2
			    (A1, Opts0)
		    in  let <A> =
			    %% Line 716
			    apply 'update_al'/3
				(A1, E, Opts)
			in  %% Line 717
			    {{'get_bits',E,Opts},A}
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 718
	  <{'call',Fun,E0},A0> when 'true' ->
	      %% Line 719
	      case apply 'opt_al'/2
		       (E0, A0) of
		<{E,A}> when 'true' ->
		    %% Line 720
		    {{'call',Fun,E},A}
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 721
	  <{'convert',Op,E0},A0> when 'true' ->
	      %% Line 722
	      case apply 'opt_al'/2
		       (E0, A0) of
		<{E,A}> when 'true' ->
		    %% Line 723
		    {{'convert',Op,E},A}
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor6})
		  -| ['compiler_generated'] )
	      end
	  %% Line 724
	  <Term = {'value',V},A>
	      when let <_cor7> =
		    call 'erlang':'is_integer'
			(V)
		in  let <_cor8> =
			call 'erlang':'is_atom'
			    (V)
		    in  call 'erlang':'or'
			    (_cor7, _cor8) ->
	      %% Line 725
	      {Term,A}
	  %% Line 726
	  <{'value',E0},A0> when 'true' ->
	      %% Line 727
	      case apply 'opt_al'/2
		       (E0, A0) of
		<{E,A}> when 'true' ->
		    %% Line 728
		    {{'value',E},A}
		( <_cor9> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor9})
		  -| ['compiler_generated'] )
	      end
	  %% Line 729
	  <{'add',E0,I},A0>
	      when call 'erlang':'is_integer'
		    (I) ->
	      %% Line 730
	      case apply 'opt_al'/2
		       (E0, A0) of
		<{E,A}> when 'true' ->
		    %% Line 731
		    {{'add',E,I},A}
		( <_cor10> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor10})
		  -| ['compiler_generated'] )
	      end
	  %% Line 732
	  <{'test',E0,V,B0},A0> when 'true' ->
	      %% Line 733
	      case apply 'opt_al'/2
		       (E0, A0) of
		<{E,A1}> when 'true' ->
		    %% Line 734
		    case apply 'opt_al'/2
			     (B0, A1) of
		      <{B,A2}> when 'true' ->
			  %% Line 735
			  {{'test',E,V,B},A2}
		      ( <_cor12> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor12})
			-| ['compiler_generated'] )
		    end
		( <_cor11> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor11})
		  -| ['compiler_generated'] )
	      end
	  %% Line 736
	  <{'case',Cs0},A0> when 'true' ->
	      %% Line 737
	      case apply 'opt_al_cs'/2
		       (Cs0, A0) of
		<{Cs,A}> when 'true' ->
		    %% Line 738
		    {{'case',Cs},A}
		( <_cor13> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor13})
		  -| ['compiler_generated'] )
	      end
	  %% Line 739
	  <{'map',E0,Cs},A0> when 'true' ->
	      %% Line 740
	      case apply 'opt_al'/2
		       (E0, A0) of
		<{E,A}> when 'true' ->
		    %% Line 741
		    {{'map',E,Cs},A}
		( <_cor14> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor14})
		  -| ['compiler_generated'] )
	      end
	  %% Line 742
	  <I,A>
	      when call 'erlang':'is_integer'
		    (I) ->
	      %% Line 743
	      {I,A}
	  ( <_cor16,_cor15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15})
		  -| [{'function_name',{'opt_al',2}}] )
	    -| ['compiler_generated'] )
	end
'opt_al_cs'/2 =
    %% Line 745
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[C0|Cs0],A0> when 'true' ->
	      %% Line 746
	      case apply 'opt_al'/2
		       (C0, A0) of
		<{C,A1}> when 'true' ->
		    %% Line 747
		    case apply 'opt_al_cs'/2
			     (Cs0, A0) of
		      <{Cs,A2}> when 'true' ->
			  let <_cor4> =
			      %% Line 748
			      apply 'merge_al'/2
				  (A1, A2)
			  in  %% Line 748
			      {[C|Cs],_cor4}
		      ( <_cor3> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor3})
			-| ['compiler_generated'] )
		    end
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 749
	  <[],_cor7> when 'true' ->
	      {[],'none'}
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'opt_al_cs',2}}] )
	    -| ['compiler_generated'] )
	end
'merge_al'/2 =
    %% Line 751
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'unknown',_cor7> when 'true' ->
	      'unknown'
	  %% Line 752
	  <Other,'none'> when 'true' ->
	      Other
	  %% Line 753
	  <_cor8,'unknown'> when 'true' ->
	      'unknown'
	  %% Line 754
	  <I0,I1> when 'true' ->
	      let <_cor3> =
		  %% Line 755
		  call 'erlang':'rem'
		      (I0, 8)
	      in  let <_cor2> =
		      %% Line 755
		      call 'erlang':'rem'
			  (I1, 8)
		  in  %% Line 755
		      case <_cor3,_cor2> of
			%% Line 756
			<I,_cor9>
			    when call 'erlang':'=:='
				  (_cor9,
				   I) ->
			    I
			%% Line 757
			<_cor10,_cor11> when 'true' ->
			    'unknown'
		      end
	end
'opt_al_1'/2 =
    %% Line 760
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'unknown',Opts> when 'true' ->
	      %% Line 761
	      Opts
	  %% Line 762
	  <A,Opts0> when 'true' ->
	      %% Line 763
	      case apply 'alignment'/1
		       (Opts0) of
		%% Line 764
		<'none'> when 'true' ->
		    %% Line 765
		    Opts0
		%% Line 766
		<'full'> when 'true' ->
		    %% Line 767
		    case call 'erlang':'rem'
			     (A, 8) of
		      %% Line 768
		      <0> when 'true' ->
			  %% Line 770
			  call 'proplists':'delete'
			      ('align', Opts0)
		      %% Line 771
		      <Bits> when 'true' ->
			  let <Opts1> =
			      %% Line 773
			      call 'proplists':'delete'
				  ('align', Opts0)
			  in  let <_cor3> =
				  %% Line 774
				  call 'erlang':'-'
				      (8, Bits)
			      in  %% Line 774
				  [{'align',_cor3}|Opts1]
		    end
		%% Line 776
		<_cor8>
		    when call 'erlang':'=:='
			  (_cor8,
			   A) ->
		    %% Line 777
		    Opts0
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor5})
		  -| ['compiler_generated'] )
	      end
	end
'update_al'/3 =
    %% Line 780
    fun (_cor2,_cor1,_cor0) ->
	let <_cor6> =
	    %% Line 781
	    case apply 'alignment'/1
		     (_cor0) of
	      %% Line 782
	      <'none'> when 'true' ->
		  _cor2
	      %% Line 783
	      <'full'> when 'true' ->
		  0
	      %% Line 784
	      <Bits>
		  when call 'erlang':'is_integer'
			(_cor2) ->
		  let <_cor3> =
		      %% Line 785
		      call 'erlang':'+'
			  (_cor2, Bits)
		  in  let <_cor21> =
			  %% Line 785
			  call 'erlang':'rem'
			      (_cor3, 8)
		      in  %% Line 785
			  case _cor21 of
			    <0> when 'true' ->
				( _cor21
				  -| ['compiler_generated'] )
			    ( <_cor4> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor4})
			      -| ['compiler_generated'] )
			  end
	      %% Line 786
	      <_cor22> when 'true' ->
		  %% Line 787
		  0
	    end
	in  let <_cor12> =
		%% Line 789
		( letrec
		      'lc$^0'/1 =
			  fun (_cor10) ->
			      case _cor10 of
				<[U|_cor9]>
				    when call 'erlang':'is_integer'
					  (U) ->
				    let <_cor11> =
					apply 'lc$^0'/1
					    (_cor9)
				    in  ( [U|_cor11]
					  -| ['compiler_generated'] )
				( <[U|_cor9]> when 'true' ->
				      apply 'lc$^0'/1
					  (_cor9)
				  -| ['compiler_generated'] )
				<[]> when 'true' ->
				    []
				( <_cor10> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_cor10})
					-| [{'function_name',{'lc$^0',1}}] )
				  -| ['compiler_generated'] )
			      end
		  in  apply 'lc$^0'/1
			  (_cor0)
		  -| ['list_comprehension'] )
	    in  %% Line 789
		case _cor12 of
		  <[U|[]]> when 'true' ->
		      %% Line 790
		      case <> of
			%% Line 791
			<>
			    when try
				  let <_cor14> =
				      call 'erlang':'rem'
					  (U, 8)
				  in  call 'erlang':'=:='
					  (_cor14, 0)
			      of <Try> ->
				  Try
			      catch <T,R> ->
				  'false' ->
			    _cor6
			%% Line 792
			<>
			    when let <_cor15> =
				  call 'erlang':'is_integer'
				      (_cor6)
			      in  let <_cor16> =
				      call 'erlang':'is_integer'
					  (_cor1)
				  in  call 'erlang':'and'
					  (_cor15, _cor16) ->
			    let <_cor17> =
				call 'erlang':'*'
				    (U, _cor1)
			    in  call 'erlang':'+'
				    (_cor6, _cor17)
			%% Line 793
			<> when 'true' ->
			    'unknown'
		      end
		  ( <_cor13> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_cor13})
		    -| ['compiler_generated'] )
		end
'flatten'/3 =
    %% Line 800
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'get_bits',I,U},Buf0,St0>
	      when call 'erlang':'is_integer'
		    (I) ->
	      %% Line 801
	      case apply 'new_var_pair'/1
		       (St0) of
		<{Dst,St}> when 'true' ->
		    let <Gb> =
			%% Line 802
			{'get_bits',{I,Buf0},U,Dst}
		    in  %% Line 803
			apply 'flatten_align'/3
			    (Gb, [], St)
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 804
	  <{'get_bits',E0,U},Buf0,St0> when 'true' ->
	      %% Line 805
	      case apply 'flatten'/3
		       (E0, Buf0, St0) of
		<{E,Pre,St1}> when 'true' ->
		    %% Line 806
		    case apply 'new_var_pair'/1
			     (St1) of
		      <{Dst,St2}> when 'true' ->
			  let <Gb> =
			      %% Line 807
			      {'get_bits',E,U,Dst}
			  in  %% Line 808
			      apply 'flatten_align'/3
				  (Gb, Pre, St2)
		      ( <_cor6> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor6})
			-| ['compiler_generated'] )
		    end
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 809
	  <{'test',{'get_bits',I,U},V,E0},Buf0,St0>
	      when call 'erlang':'is_integer'
		    (I) ->
	      %% Line 810
	      case apply 'new_var'/2
		       ([66|[117|[102]]], St0) of
		<{DstBuf0,St1}> when 'true' ->
		    let <Gb> =
			%% Line 811
			{'get_bits',{I,Buf0},U,{V,DstBuf0}}
		    in  %% Line 812
			case apply 'flatten_align'/3
				 (Gb, [], St1) of
			  <{{_X_Dst,DstBuf},Pre0,St2}> when 'true' ->
			      %% Line 813
			      case apply 'flatten'/3
				       (E0, DstBuf, St2) of
				<{E,Pre1,St3}> when 'true' ->
				    let <_cor12> =
					%% Line 814
					call 'erlang':'++'
					    (Pre0, Pre1)
				    in  %% Line 814
					{E,_cor12,St3}
				( <_cor11> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor11})
				  -| ['compiler_generated'] )
			      end
			  ( <_cor10> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor10})
			    -| ['compiler_generated'] )
			end
		( <_cor8> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor8})
		  -| ['compiler_generated'] )
	      end
	  %% Line 815
	  <{'add',E0,I},Buf0,St0> when 'true' ->
	      %% Line 816
	      case apply 'flatten'/3
		       (E0, Buf0, St0) of
		<{{Src,Buf},Pre,St1}> when 'true' ->
		    %% Line 817
		    case apply 'new_var'/2
			     ([65|[100|[100]]], St1) of
		      <{Dst,St}> when 'true' ->
			  let <_cor15> =
			      %% Line 818
			      call 'erlang':'++'
				  (Pre, [{'add',Src,I,Dst}|[]])
			  in  %% Line 818
			      {{Dst,Buf},_cor15,St}
		      ( <_cor14> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor14})
			-| ['compiler_generated'] )
		    end
		( <_cor13> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor13})
		  -| ['compiler_generated'] )
	      end
	  %% Line 819
	  <{'case',Cs0},Buf0,St0> when 'true' ->
	      %% Line 820
	      case apply 'new_var_pair'/1
		       (St0) of
		<{Dst,St1}> when 'true' ->
		    %% Line 821
		    case apply 'flatten_cs'/3
			     (Cs0, Buf0, St1) of
		      <{Cs1,St}> when 'true' ->
			  %% Line 822
			  case apply 'flatten_hoist_align'/1
				   (Cs1) of
			    <{Al,Cs2}> when 'true' ->
				let <_cor19> =
				    %% Line 823
				    call 'erlang':'++'
					(Al, [{'case',Buf0,Cs2,Dst}|[]])
				in  %% Line 823
				    {Dst,_cor19,St}
			    ( <_cor18> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor18})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor17> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor17})
			-| ['compiler_generated'] )
		    end
		( <_cor16> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor16})
		  -| ['compiler_generated'] )
	      end
	  %% Line 824
	  <{'map',E0,Cs0},Buf0,St0> when 'true' ->
	      %% Line 825
	      case apply 'flatten'/3
		       (E0, Buf0, St0) of
		<{{E,DstBuf},Pre,St1}> when 'true' ->
		    %% Line 826
		    case apply 'new_var'/2
			     ([73|[110|[116]]], St1) of
		      <{Dst,St2}> when 'true' ->
			  let <Cs> =
			      %% Line 827
			      apply 'flatten_map_cs'/2
				  (Cs0, E)
			  in  let <_cor23> =
				  %% Line 828
				  call 'erlang':'++'
				      (Pre, [{'map',E,Cs,{Dst,DstBuf}}|[]])
			      in  %% Line 828
				  {{Dst,DstBuf},_cor23,St2}
		      ( <_cor21> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor21})
			-| ['compiler_generated'] )
		    end
		( <_cor20> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor20})
		  -| ['compiler_generated'] )
	      end
	  %% Line 829
	  <{'value',V},Buf0,St0>
	      when call 'erlang':'is_atom'
		    (V) ->
	      let <_cor24> =
		  %% Line 830
		  call 'erlang':'atom_to_list'
		      (V)
	      in  let <_cor25> =
		      %% Line 830
		      call 'erlang':'++'
			  (_cor24, [39])
		  in  let <_cor26> =
			  %% Line 830
			  [39|_cor25]
		      in  %% Line 830
			  {{_cor26,Buf0},[],St0}
	  %% Line 831
	  <{'value',V0},Buf0,St0>
	      when call 'erlang':'is_integer'
		    (V0) ->
	      %% Line 832
	      {{V0,Buf0},[],St0}
	  %% Line 833
	  <{'value',V0},Buf0,St0> when 'true' ->
	      %% Line 834
	      apply 'flatten'/3
		  (V0, Buf0, St0)
	  %% Line 835
	  <{'convert',Op,E0},Buf0,St0> when 'true' ->
	      %% Line 836
	      case apply 'flatten'/3
		       (E0, Buf0, St0) of
		<{{E,Buf},Pre,St1}> when 'true' ->
		    %% Line 837
		    case apply 'new_var'/2
			     ([67|[111|[110|[118]]]], St1) of
		      <{Dst,St2}> when 'true' ->
			  let <_cor29> =
			      %% Line 838
			      call 'erlang':'++'
				  (Pre, [{'convert',Op,E,Dst}|[]])
			  in  %% Line 838
			      {{Dst,Buf},_cor29,St2}
		      ( <_cor28> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor28})
			-| ['compiler_generated'] )
		    end
		( <_cor27> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor27})
		  -| ['compiler_generated'] )
	      end
	  %% Line 839
	  <{'call',Fun,E0},Buf0,St0> when 'true' ->
	      %% Line 840
	      case apply 'flatten'/3
		       (E0, Buf0, St0) of
		<{Src,Pre,St1}> when 'true' ->
		    %% Line 841
		    case apply 'new_var_pair'/1
			     (St1) of
		      <{Dst,St2}> when 'true' ->
			  let <_cor32> =
			      %% Line 842
			      call 'erlang':'++'
				  (Pre, [{'call',Fun,Src,Dst}|[]])
			  in  %% Line 842
			      {Dst,_cor32,St2}
		      ( <_cor31> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor31})
			-| ['compiler_generated'] )
		    end
		( <_cor30> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor30})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor35,_cor34,_cor33> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor35,_cor34,_cor33})
		  -| [{'function_name',{'flatten',3}}] )
	    -| ['compiler_generated'] )
	end
'flatten_cs'/3 =
    %% Line 844
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[C0|Cs0],Buf,St0> when 'true' ->
	      %% Line 845
	      case apply 'flatten'/3
		       (C0, Buf, St0) of
		<{C,Pre,St1}> when 'true' ->
		    %% Line 846
		    case apply 'flatten_cs'/3
			     (Cs0, Buf, St0) of
		      <{Cs,St2}> when 'true' ->
			  %% Line 847
			  ( case St1 of
			      ( <( {'st',_rec2,_cor18}
				   -| ['compiler_generated'] )> when 'true' ->
				    ( case St2 of
					( <( {'st',_rec3,_cor20}
					     -| ['compiler_generated'] )> when 'true' ->
					      let <_rec0> =
						  call 'erlang':'max'
						      (_rec2, _rec3)
					      in  let <_cor12> =
						      call 'erlang':'setelement'
							  (2, St2, _rec0)
						  in  let <_cor14> =
							  %% Line 848
							  call 'erlang':'++'
							      (Pre, [{'return',C}|[]])
						      in  %% Line 848
							  {[_cor14|Cs],_cor12}
					  -| ['compiler_generated'] )
					( <_cor21> when 'true' ->
					      ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'error'
										     -| ['compiler_generated'] )
						    (( {'badrecord','st'}
						       -| ['compiler_generated'] ))
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				      end
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			      ( <_cor19> when 'true' ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {'badrecord','st'}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 849
	  <[],_cor25,St> when 'true' ->
	      {[],St}
	  ( <_cor17,_cor16,_cor15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor17,_cor16,_cor15})
		  -| [{'function_name',{'flatten_cs',3}}] )
	    -| ['compiler_generated'] )
	end
'flatten_map_cs'/2 =
    %% Line 851
    fun (_cor1,_cor0) ->
	%% Line 852
	apply 'flatten_map_cs_1'/2
	    (_cor1, {_cor0,_cor1})
'flatten_map_cs_1'/2 =
    %% Line 854
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{K,V}|Cs],DefData> when 'true' ->
	      let <_cor2> =
		  %% Line 855
		  apply 'flatten_map_cs_1'/2
		      (Cs, DefData)
	      in  %% Line 855
		  [{{'asis',K},{'asis',V}}|_cor2]
	  %% Line 856
	  <['integer_default'],{Int,_cor11}> when 'true' ->
	      %% Line 857
	      [{'_',Int}|[]]
	  %% Line 858
	  <['enum_default'],{Int,_cor12}> when 'true' ->
	      %% Line 859
	      [{'_',[[123|[97|[115|[110|[49|[95|[101|[110|[117|[109|[44]]]]]]]]]]]|[Int|[[125]]]]}|[]]
	  %% Line 860
	  <['enum_error'],{Var,Cs}> when 'true' ->
	      let <_cor7> =
		  %% Line 861
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor5) ->
				case _cor5 of
				  <[{_cor13,V}|_cor4]> when 'true' ->
				      let <_cor6> =
					  apply 'lc$^0'/1
					      (_cor4)
				      in  ( [V|_cor6]
					    -| ['compiler_generated'] )
				  ( <[_cor3|_cor4]> when 'true' ->
					apply 'lc$^0'/1
					    (_cor4)
				    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor5> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor5})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (Cs)
		    -| ['list_comprehension'] )
	      in  %% Line 862
		  [{'_',[[101|[120|[105|[116|[40|[123|[101|[114|[114|[111|[114|[44|[123|[97|[115|[110|[49|[44|[123|[100|[101|[99|[111|[100|[101|[95|[101|[110|[117|[109|[101|[114|[97|[116|[101|[100|[44|[123]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[Var|[[44]|%% Line 863
																															       [{'asis',_cor7}|[[125|[125|[125|[125|[41]]]]]]]]]]}|%% Line 863
																																						   []]
	  %% Line 864
	  <[],_cor14> when 'true' ->
	      []
	  ( <_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9})
		  -| [{'function_name',{'flatten_map_cs_1',2}}] )
	    -| ['compiler_generated'] )
	end
'flatten_hoist_align'/1 =
    %% Line 866
    fun (_cor0) ->
	case _cor0 of
	  <[[Ab = {'align_bits',_cor2,_cor3}|T]|Cs]> when 'true' ->
	      %% Line 867
	      apply 'flatten_hoist_align_1'/3
		  (Cs, Ab, [T|[]])
	  %% Line 868
	  <Cs> when 'true' ->
	      {[],Cs}
	end
'flatten_hoist_align_1'/3 =
    %% Line 870
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[[Ab|T]|Cs],_cor7,Acc>
	      when call 'erlang':'=:='
		    (_cor7,
		     Ab) ->
	      %% Line 871
	      apply 'flatten_hoist_align_1'/3
		  (Cs, Ab, [T|Acc])
	  %% Line 872
	  <[],Ab,Acc> when 'true' ->
	      let <_cor3> =
		  %% Line 873
		  call 'lists':'reverse'
		      (Acc)
	      in  %% Line 873
		  {[Ab|[]],_cor3}
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'flatten_hoist_align_1',3}}] )
	    -| ['compiler_generated'] )
	end
'flatten_align'/3 =
    %% Line 875
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Gb0 = {'get_bits',{SrcBits,SrcBuf},U,Dst},Pre,St0> when 'true' ->
	      %% Line 876
	      case apply 'alignment'/1
		       (U) of
		%% Line 877
		<'none'> when 'true' ->
		    let <_cor3> =
			%% Line 878
			call 'erlang':'++'
			    (Pre, [Gb0|[]])
		    in  %% Line 878
			apply 'flatten_align_1'/4
			    (U, Dst, _cor3, St0)
		%% Line 879
		<'full'> when 'true' ->
		    %% Line 880
		    case apply 'new_var'/2
			     ([80|[97|[100]]], St0) of
		      <{PadBits,St1}> when 'true' ->
			  %% Line 881
			  case apply 'new_var'/2
				   ([66|[117|[102]]], St1) of
			    <{DstBuf,St2}> when 'true' ->
				let <Ab> = {%% Line 882
				     'align_bits',%% Line 882
						  SrcBuf,%% Line 882
							 PadBits}
				in  let <Agb> =
					%% Line 883
					{'get_bits',{PadBits,SrcBuf},[1],{'_',DstBuf}}
				    in  let <Gb> =
					    %% Line 884
					    {'get_bits',{SrcBits,DstBuf},U,Dst}
					in  let <_cor9> =
						%% Line 885
						call 'erlang':'++'
						    (Pre, [Ab|[Agb|[Gb|[]]]])
					    in  %% Line 885
						apply 'flatten_align_1'/4
						    (U, Dst, _cor9, St2)
			    ( <_cor5> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor5})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
		%% Line 886
		<PadBits>
		    when let <_cor10> =
			  call 'erlang':'is_integer'
			      (PadBits)
		      in  let <_cor11> =
			      call 'erlang':'>'
				  (PadBits, 0)
			  in  call 'erlang':'and'
				  (_cor10, _cor11) ->
		    %% Line 887
		    case apply 'new_var'/2
			     ([66|[117|[102]]], St0) of
		      <{DstBuf,St1}> when 'true' ->
			  let <Agb> =
			      %% Line 888
			      {'get_bits',{PadBits,SrcBuf},[1],{'_',DstBuf}}
			  in  let <Gb> =
				  %% Line 889
				  {'get_bits',{SrcBits,DstBuf},U,Dst}
			      in  let <_cor15> =
				      %% Line 890
				      call 'erlang':'++'
					  (Pre, [Agb|[Gb|[]]])
				  in  %% Line 890
				      apply 'flatten_align_1'/4
					  (U, Dst, _cor15, St1)
		      ( <_cor12> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor12})
			-| ['compiler_generated'] )
		    end
		( <_cor16> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor16})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor19,_cor18,_cor17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor19,_cor18,_cor17})
		  -| [{'function_name',{'flatten_align',3}}] )
	    -| ['compiler_generated'] )
	end
'flatten_align_1'/4 =
    %% Line 893
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <U,Dst = {D,_cor10},Pre,St> when 'true' ->
	      %% Line 894
	      case apply 'is_non_zero'/1
		       (U) of
		%% Line 895
		<'false'> when 'true' ->
		    %% Line 896
		    {Dst,Pre,St}
		%% Line 897
		<'true'> when 'true' ->
		    let <_cor4> =
			%% Line 898
			call 'erlang':'++'
			    (Pre, [{'non_zero',D}|[]])
		    in  %% Line 898
			{Dst,_cor4,St}
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor5})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'flatten_align_1',4}}] )
	    -| ['compiler_generated'] )
	end
'new_var_pair'/1 =
    %% Line 901
    fun (_cor0) ->
	%% Line 902
	case apply 'new_var'/2
		 ([86], _cor0) of
	  <{Var,St1}> when 'true' ->
	      %% Line 903
	      case apply 'new_var'/2
		       ([66|[117|[102]]], St1) of
		<{Buf,St2}> when 'true' ->
		    %% Line 904
		    {{Var,Buf},St2}
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'new_var'/2 =
    %% Line 906
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Tag,St = {'st',N,VarBase}> when 'true' ->
	      let <_cor6> =
		  %% Line 907
		  call 'erlang':'integer_to_list'
		      (N)
	      in  let <_cor7> =
		      %% Line 907
		      call 'erlang':'++'
			  (Tag, _cor6)
		  in  let <_cor8> =
			  %% Line 907
			  call 'erlang':'++'
			      (VarBase, _cor7)
		      in  let <_rec4> =
			      %% Line 907
			      call 'erlang':'+'
				  (N, 1)
			  in  let <_cor5> =
				  %% Line 907
				  call 'erlang':'setelement'
				      (2, St, _rec4)
			      in  %% Line 907
				  {_cor8,_cor5}
	  ( <_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9})
		  -| [{'function_name',{'new_var',2}}] )
	    -| ['compiler_generated'] )
	end
'alignment'/1 =
    %% Line 909
    fun (_cor0) ->
	case _cor0 of
	  <[{'align','false'}|_cor2]> when 'true' ->
	      'none'
	  %% Line 910
	  <[{'align','true'}|_cor3]> when 'true' ->
	      'full'
	  %% Line 911
	  <[{'align',Bits}|_cor4]> when 'true' ->
	      Bits
	  %% Line 912
	  <[_cor5|T]> when 'true' ->
	      apply 'alignment'/1
		  (T)
	  %% Line 913
	  <[]> when 'true' ->
	      'none'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'alignment',1}}] )
	    -| ['compiler_generated'] )
	end
'is_non_zero'/1 =
    %% Line 915
    fun (_cor0) ->
	%% Line 916
	call 'lists':'member'
	    ('non_zero', _cor0)
'dcg_list_outside'/1 =
    %% Line 922
    fun (_cor0) ->
	case _cor0 of
	  <[{'align_bits',Buf,SzVar}|T]> when 'true' ->
	      do  %% Line 923
		  call 'asn1ct_gen':'emit'
		      ([SzVar|[[32|[61|[32|[98|[105|[116|[95|[115|[105|[122|[101|[40]]]]]]]]]]]]|[Buf|[[41|[32|[98|[97|[110|[100|[32|[55]]]]]]]]]]]])
		  %% Line 924
		  apply 'iter_dcg_list_outside'/1
		      (T)
	  %% Line 925
	  <[{'case',Buf,Cs,Dst}|T]> when 'true' ->
	      do  %% Line 926
		  apply 'dcg_case'/3
		      (Buf, Cs, Dst)
		  %% Line 927
		  apply 'iter_dcg_list_outside'/1
		      (T)
	  %% Line 928
	  <[{'map',Val,Cs,Dst}|T]> when 'true' ->
	      do  %% Line 929
		  apply 'dcg_map'/3
		      (Val, Cs, Dst)
		  %% Line 930
		  apply 'iter_dcg_list_outside'/1
		      (T)
	  %% Line 931
	  <[{'add',S1,S2,Dst}|T]> when 'true' ->
	      do  %% Line 932
		  call 'asn1ct_gen':'emit'
		      ([Dst|[[32|[61|[32]]]|[S1|[[32|[43|[32]]]|[S2|[]]]]]])
		  %% Line 933
		  apply 'iter_dcg_list_outside'/1
		      (T)
	  %% Line 934
	  <[{'return',{V,Buf}}|T]> when 'true' ->
	      do  %% Line 935
		  call 'asn1ct_gen':'emit'
		      ([[123]|[V|[[44]|[Buf|[[125]]]]]])
		  %% Line 936
		  apply 'iter_dcg_list_outside'/1
		      (T)
	  %% Line 937
	  <[{'call',Fun,{V,Buf},{Dst,DstBuf}}|T]> when 'true' ->
	      do  %% Line 938
		  call 'asn1ct_gen':'emit'
		      ([[123]|[Dst|[[44]|[DstBuf|[[125|[32|[32|[61|[32]]]]]]]]]])
		  do  %% Line 939
		      apply Fun
			  (V, Buf)
		      %% Line 940
		      apply 'iter_dcg_list_outside'/1
			  (T)
	  %% Line 941
	  <[{'convert',{M,F},V,Dst}|T]> when 'true' ->
	      do  %% Line 942
		  call 'asn1ct_gen':'emit'
		      ([Dst|[[32|[61|[32]]]|[{'asis',M}|[[58]|[{'asis',F}|[[40]|[V|[[41]]]]]]]]])
		  %% Line 943
		  apply 'iter_dcg_list_outside'/1
		      (T)
	  %% Line 944
	  <[{'convert',Op,V,Dst}|T]> when 'true' ->
	      do  %% Line 945
		  call 'asn1ct_gen':'emit'
		      ([Dst|[[32|[61|[32]]]|[Op|[[40]|[V|[[41]]]]]]])
		  %% Line 946
		  apply 'iter_dcg_list_outside'/1
		      (T)
	  %% Line 947
	  <L0 = [{'get_bits',{_cor3,Buf0},_cor4,_cor5}|_cor6]> when 'true' ->
	      do  %% Line 948
		  call 'asn1ct_gen':'emit'
		      ([60|[60]])
		  %% Line 949
		  case apply 'dcg_list_inside'/2
			   (L0, 'buf') of
		    <{L,Buf}> when 'true' ->
			do  %% Line 950
			    call 'asn1ct_gen':'emit'
				([Buf|[[47|[98|[105|[116|[115|[116|[114|[105|[110|[103|[62|[62|[32|[61|[32]]]]]]]]]]]]]]]|[Buf0|[]]]])
			    %% Line 951
			    apply 'iter_dcg_list_outside'/1
				(L)
		    ( <_cor1> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor1})
		      -| ['compiler_generated'] )
		  end
	  %% Line 952
	  <[]> when 'true' ->
	      do  %% Line 953
		  call 'asn1ct_gen':'emit'
		      ([105|[103|[110|[111|[114|[101]]]]]])
		  %% Line 954
		  'ok'
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'dcg_list_outside',1}}] )
	    -| ['compiler_generated'] )
	end
'iter_dcg_list_outside'/1 =
    %% Line 956
    fun (_cor0) ->
	case _cor0 of
	  <T = [_cor2|_cor3]> when 'true' ->
	      do  %% Line 957
		  call 'asn1ct_gen':'emit'
		      ([[44]|['nl']])
		  %% Line 958
		  apply 'dcg_list_outside'/1
		      (T)
	  %% Line 959
	  <[]> when 'true' ->
	      'ok'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'iter_dcg_list_outside',1}}] )
	    -| ['compiler_generated'] )
	end
'dcg_case'/3 =
    %% Line 961
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Buf,Cs,{Dst,DstBuf}> when 'true' ->
	      do  %% Line 962
		  call 'asn1ct_gen':'emit'
		      ([[123]|[Dst|[[44]|[DstBuf|[[125|[32|[61|[32|[99|[97|[115|[101|[32]]]]]]]]]|[Buf|[[32|[111|[102]]]|['nl']]]]]]]])
		  do  %% Line 963
		      apply 'dcg_case_cs'/1
			  (Cs)
		      %% Line 964
		      call 'asn1ct_gen':'emit'
			  ([101|[110|[100]]])
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'dcg_case',3}}] )
	    -| ['compiler_generated'] )
	end
'dcg_case_cs'/1 =
    %% Line 966
    fun (_cor0) ->
	case _cor0 of
	  <[C|Cs]> when 'true' ->
	      do  %% Line 967
		  call 'asn1ct_gen':'emit'
		      ([60|[60]])
		  %% Line 968
		  case apply 'dcg_list_inside'/2
			   (C, 'buf') of
		    <{T0,DstBuf}> when 'true' ->
			do  %% Line 969
			    call 'asn1ct_gen':'emit'
				([DstBuf|[[47|[98|[105|[116|[115|[116|[114|[105|[110|[103|[62|[62]]]]]]]]]]]]]])
			    let <T1> =
				%% Line 970
				apply 'dcg_guard'/1
				    (T0)
			    in  do  %% Line 971
				    apply 'dcg_list_outside'/1
					(T1)
				    do  %% Line 972
					case Cs of
					  %% Line 973
					  <[]> when 'true' ->
					      call 'asn1ct_gen':'emit'
						  (['nl'])
					  %% Line 974
					  <[_cor5|_cor6]> when 'true' ->
					      call 'asn1ct_gen':'emit'
						  ([[59]|['nl']])
					  ( <_cor3> when 'true' ->
						primop 'match_fail'
						    ({'case_clause',_cor3})
					    -| ['compiler_generated'] )
					end
					%% Line 976
					apply 'dcg_case_cs'/1
					    (Cs)
		    ( <_cor1> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor1})
		      -| ['compiler_generated'] )
		  end
	  %% Line 977
	  <[]> when 'true' ->
	      'ok'
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'dcg_case_cs',1}}] )
	    -| ['compiler_generated'] )
	end
'dcg_guard'/1 =
    %% Line 979
    fun (_cor0) ->
	case _cor0 of
	  <[{'non_zero',Src}|T]> when 'true' ->
	      do  %% Line 980
		  call 'asn1ct_gen':'emit'
		      ([[32|[119|[104|[101|[110|[32]]]]]]|[Src|[[32|[61|[47|[61|[32|[48|[32|[45|[62]]]]]]]]]|['nl']]]])
		  %% Line 981
		  T
	  %% Line 982
	  <T> when 'true' ->
	      do  %% Line 983
		  call 'asn1ct_gen':'emit'
		      ([[32|[45|[62]]]|['nl']])
		  %% Line 984
		  T
	end
'dcg_map'/3 =
    %% Line 986
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Val,Cs,{Dst,_cor6}> when 'true' ->
	      do  %% Line 987
		  call 'asn1ct_gen':'emit'
		      ([Dst|[[32|[61|[32|[99|[97|[115|[101|[32]]]]]]]]|[Val|[[32|[111|[102]]]|['nl']]]]])
		  do  %% Line 988
		      apply 'dcg_map_cs'/1
			  (Cs)
		      %% Line 989
		      call 'asn1ct_gen':'emit'
			  ([101|[110|[100]]])
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'dcg_map',3}}] )
	    -| ['compiler_generated'] )
	end
'dcg_map_cs'/1 =
    %% Line 991
    fun (_cor0) ->
	case _cor0 of
	  <[{K,V}|[]]> when 'true' ->
	      %% Line 992
	      call 'asn1ct_gen':'emit'
		  ([K|[[32|[45|[62|[32]]]]|[V|['nl']]]])
	  %% Line 993
	  <[{K,V}|Cs]> when 'true' ->
	      do  %% Line 994
		  call 'asn1ct_gen':'emit'
		      ([K|[[32|[45|[62|[32]]]]|[V|[[59]|['nl']]]]])
		  %% Line 995
		  apply 'dcg_map_cs'/1
		      (Cs)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'dcg_map_cs',1}}] )
	    -| ['compiler_generated'] )
	end
'dcg_list_inside'/2 =
    %% Line 997
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{'get_bits',{Sz,_cor6},Fl0,{Dst,DstBuf}}|T],_cor7> when 'true' ->
	      let <Fl> =
		  %% Line 998
		  apply 'bit_flags'/2
		      (Fl0, [])
	      in  let <_cor3> =
		      %% Line 999
		      apply 'mk_dest'/1
			  (Dst)
		  in  do  %% Line 999
			  call 'asn1ct_gen':'emit'
			      ([_cor3|[[58]|[Sz|[Fl|[[44]]]]]])
			  %% Line 1000
			  apply 'dcg_list_inside'/2
			      (T, DstBuf)
	  %% Line 1001
	  <L,Dst> when 'true' ->
	      {L,Dst}
	end
'bit_flags'/2 =
    %% Line 1003
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{'align',_cor9}|T],Acc> when 'true' ->
	      %% Line 1004
	      apply 'bit_flags'/2
		  (T, Acc)
	  %% Line 1005
	  <['non_zero'|T],Acc> when 'true' ->
	      %% Line 1006
	      apply 'bit_flags'/2
		  (T, Acc)
	  %% Line 1007
	  <[U|T],Acc>
	      when call 'erlang':'is_integer'
		    (U) ->
	      let <_cor2> =
		  %% Line 1008
		  call 'erlang':'integer_to_list'
		      (U)
	      in  let <_cor3> =
		      %% Line 1008
		      call 'erlang':'++'
			  ([117|[110|[105|[116|[58]]]]], _cor2)
		  in  %% Line 1008
		      apply 'bit_flags'/2
			  (T, [_cor3|Acc])
	  %% Line 1009
	  <[H|T],Acc> when 'true' ->
	      let <_cor4> =
		  %% Line 1010
		  call 'erlang':'atom_to_list'
		      (H)
	      in  %% Line 1010
		  apply 'bit_flags'/2
		      (T, [_cor4|Acc])
	  %% Line 1011
	  <[],[]> when 'true' ->
	      %% Line 1012
	      []
	  %% Line 1013
	  <[],Acc> when 'true' ->
	      %% Line 1014
	      case apply 'bit_flags_1'/2
		       (Acc, []) of
		%% Line 1015
		<[117|[110|[105|[116|[58|[49]]]]]]> when 'true' ->
		    []
		%% Line 1016
		<_fol117> when 'true' ->
		    ( [47|_fol117]
		      -| ['compiler_generated'] )
	      end
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'bit_flags',2}}] )
	    -| ['compiler_generated'] )
	end
'bit_flags_1'/2 =
    %% Line 1020
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[H|T],Sep> when 'true' ->
	      let <_cor2> =
		  %% Line 1021
		  apply 'bit_flags_1'/2
		      (T, [45])
	      in  let <_cor3> =
		      %% Line 1021
		      call 'erlang':'++'
			  (H, _cor2)
		  in  %% Line 1021
		      call 'erlang':'++'
			  (Sep, _cor3)
	  %% Line 1022
	  <[],_cor6> when 'true' ->
	      []
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'bit_flags_1',2}}] )
	    -| ['compiler_generated'] )
	end
'mk_dest'/1 =
    %% Line 1024
    fun (_cor0) ->
	case _cor0 of
	  <I>
	      when call 'erlang':'is_integer'
		    (_cor0) ->
	      %% Line 1025
	      call 'erlang':'integer_to_list'
		  (I)
	  %% Line 1026
	  <S> when 'true' ->
	      S
	end
'split_off_nonbuilding'/1 =
    %% Line 1032
    fun (_cor0) ->
	%% Line 1033
	call 'lists':'splitwith'
	    (( 'is_nonbuilding'/1
	       -| [{'id',{0,0,'-split_off_nonbuilding/1-fun-0-'}}] ), _cor0)
'is_nonbuilding'/1 =
    %% Line 1035
    fun (_cor0) ->
	case _cor0 of
	  <{'assign',_cor2,_cor3}> when 'true' ->
	      'true'
	  %% Line 1036
	  <{'call',_cor4,_cor5,_cor6,_cor7}> when 'true' ->
	      'true'
	  %% Line 1037
	  <{'lc',_cor8,_cor9,_cor10,_cor11}> when 'true' ->
	      'true'
	  %% Line 1038
	  <{'set',_cor12,_cor13}> when 'true' ->
	      'true'
	  %% Line 1039
	  <{'list',_cor14,_cor15}> when 'true' ->
	      'true'
	  %% Line 1040
	  <{'sub',_cor16,_cor17,_cor18}> when 'true' ->
	      'true'
	  %% Line 1041
	  <{'try',_cor19,_cor20,_cor21,_cor22}> when 'true' ->
	      'true'
	  %% Line 1042
	  <_cor23> when 'true' ->
	      'false'
	end
'mk_vars'/2 =
    %% Line 1044
    fun (_cor1,_cor0) ->
	do  %% Line 1045
	    call 'asn1ct_name':'new'
		('enc')
	    let <Curr> =
		%% Line 1046
		call 'asn1ct_name':'curr'
		    ('enc')
	    in  %% Line 1047
		case call 'erlang':'atom_to_list'
			 (Curr) of
		  <[H|T]> when 'true' ->
		      let <_cor5> =
			  %% Line 1048
			  call 'erlang':'-'
			      (H, 32)
		      in  let <_cor6> =
			      %% Line 1048
			      call 'erlang':'++'
				  (T, [64])
			  in  let <Base> =
				  %% Line 1048
				  [_cor5|_cor6]
			      in  %% Line 1049
				  case _cor1 of
				    %% Line 1050
				    <{'var',Name}>
					when call 'erlang':'is_list'
					      (Name) ->
					let <_cor8> =
					    %% Line 1051
					    apply 'mk_vars_1'/2
						(Base, _cor0)
					in  %% Line 1051
					    {[],[_cor1|_cor8]}
				    %% Line 1052
				    <[]> when 'true' ->
					let <_cor9> =
					    %% Line 1053
					    apply 'mk_vars_1'/2
						(Base, _cor0)
					in  %% Line 1053
					    {[],[_cor1|_cor9]}
				    %% Line 1054
				    <_cor14>
					when call 'erlang':'is_integer'
					      (_cor1) ->
					let <_cor10> =
					    %% Line 1055
					    apply 'mk_vars_1'/2
						(Base, _cor0)
					in  %% Line 1055
					    {[],[_cor1|_cor10]}
				    ( <_cor11> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_cor11})
				      -| ['compiler_generated'] )
				  end
		  ( <_cor3> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_cor3})
		    -| ['compiler_generated'] )
		end
'mk_vars_1'/2 =
    %% Line 1058
    fun (_cor1,_cor0) ->
	%% Line 1059
	( letrec
	      'lc$^0'/1 =
		  fun (_cor4) ->
		      case _cor4 of
			<[V|_cor3]> when 'true' ->
			    let <_cor5> =
				apply 'mk_var'/2
				    (_cor1, V)
			    in  let <_cor6> =
				    apply 'lc$^0'/1
					(_cor3)
				in  ( [_cor5|_cor6]
				      -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_cor4> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor4})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  apply 'lc$^0'/1
		  (_cor0)
	  -| ['list_comprehension'] )
'mk_var'/2 =
    %% Line 1061
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 1062
	    call 'erlang':'atom_to_list'
		(_cor0)
	in  let <_cor3> =
		%% Line 1062
		call 'erlang':'++'
		    (_cor1, _cor2)
	    in  %% Line 1062
		{'var',_cor3}
'per_enc_integer_1'/3 =
    %% Line 1064
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Val,[],Aligned> when 'true' ->
	      let <_cor3> =
		  %% Line 1065
		  apply 'per_enc_unconstrained'/2
		      (Val, Aligned)
	      in  %% Line 1065
		  [{'cond',[['_'|_cor3]|[]]}|[]]
	  %% Line 1066
	  <Val,[{Constr = {'SingleValue',Svs = [_cor22|_cor23]},[]}|[]],Aligned> when 'true' ->
	      %% Line 1077
	      case apply 'effective_constraint'/2
		       ('integer', [Constr|[]]) of
		<[{'ValueRange',{Lb,Ub}}|[]]> when 'true' ->
		    let <_cor10> =
			%% Line 1078
			( letrec
			      'lc$^0'/1 =
				  fun (_cor7) ->
				      case _cor7 of
					<[%% Line 1081
					  Sv|_cor6]> when 'true' ->
					    %% Line 1079
					    case apply 'per_enc_constrained'/4
						     (Sv, Lb, Ub, Aligned) of
					      <{[],_cor24,Put}> when 'true' ->
						  let <_cor9> =
						      %% Line 1081
						      apply 'lc$^0'/1
							  (_cor6)
						  in  ( [%% Line 1080
							 [{'eq',Val,Sv}|[{'put_bits',0,1,[1]}|Put]]|_cor9]
							-| ['compiler_generated'] )
					      ( <_cor8> when 'true' ->
						    primop 'match_fail'
							({'badmatch',_cor8})
						-| ['compiler_generated'] )
					    end
					<[]> when 'true' ->
					    []
					( <_cor7> when 'true' ->
					      ( primop 'match_fail'
						    ({'function_clause',_cor7})
						-| [{'function_name',{'lc$^0',1}}] )
					  -| ['compiler_generated'] )
				      end
			  in  apply 'lc$^0'/1
				  (%% Line 1081
				   Svs)
			  -| ['list_comprehension'] )
		    in  let <_cor12> =
			    %% Line 1083
			    apply 'per_enc_unconstrained'/2
				(Val, Aligned)
			in  let <Cs> =
				%% Line 1082
				call 'erlang':'++'
				    (_cor10, [['_'|[{'put_bits',1,1,[1]}|_cor12]]|%% Line 1083
										  []])
			    in  %% Line 1084
				apply 'build_cond'/1
				    (Cs)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1085
	  <Val0,[{Constr = {_cor25,_cor26},[]}|[]],Aligned> when 'true' ->
	      %% Line 1086
	      case apply 'per_enc_integer_2'/3
		       (Val0, Constr, Aligned) of
		<{Prefix,Check,Action}> when 'true' ->
		    let <_cor15> =
			%% Line 1089
			apply 'per_enc_unconstrained'/2
			    (Val0, Aligned)
		    in  let <_cor16> =
			    %% Line 1087
			    apply 'build_cond'/1
				([[Check|[{'put_bits',0,1,[1]}|Action]]|%% Line 1088
									[['_'|[{'put_bits',1,1,[1]}|_cor15]]|%% Line 1089
													     []]])
			in  %% Line 1087
			    call 'erlang':'++'
				(Prefix, _cor16)
		( <_cor14> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor14})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1090
	  <Val0,[Constr|[]],Aligned> when 'true' ->
	      %% Line 1091
	      case apply 'per_enc_integer_2'/3
		       (Val0, Constr, Aligned) of
		<{Prefix,Check,Action}> when 'true' ->
		    let <_cor18> =
			%% Line 1092
			apply 'build_cond'/1
			    ([[Check|Action]|%% Line 1093
					     [['_'|[{'error',Val0}|[]]]|[]]])
		    in  %% Line 1092
			call 'erlang':'++'
			    (Prefix, _cor18)
		( <_cor17> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor17})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor21,_cor20,_cor19> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor21,_cor20,_cor19})
		  -| [{'function_name',{'per_enc_integer_1',3}}] )
	    -| ['compiler_generated'] )
	end
'per_enc_integer_2'/3 =
    %% Line 1095
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Val,{'SingleValue',Sv},Aligned>
	      when call 'erlang':'is_integer'
		    (Sv) ->
	      %% Line 1096
	      apply 'per_enc_constrained'/4
		  (Val, Sv, Sv, Aligned)
	  %% Line 1097
	  <Val0,{'ValueRange',{Lb,'MAX'}},Aligned>
	      when %% Line 1098
		call 'erlang':'is_integer'
		    (Lb) ->
	      %% Line 1099
	      case apply 'sub_lb'/2
		       (Val0, Lb) of
		<{Prefix,Val}> when 'true' ->
		    let <_cor4> =
			%% Line 1100
			apply 'per_enc_unsigned'/2
			    (Val, Aligned)
		    in  %% Line 1100
			{Prefix,{'ge',Val,0},_cor4}
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1101
	  <Val,{'ValueRange',{Lb,Ub}},Aligned>
	      when let <_cor5> =
		    %% Line 1102
		    call 'erlang':'is_integer'
			(Lb)
		in  let <_cor6> =
			%% Line 1102
			call 'erlang':'is_integer'
			    (Ub)
		    in  %% Line 1102
			call 'erlang':'and'
			    (_cor5, _cor6) ->
	      %% Line 1103
	      apply 'per_enc_constrained'/4
		  (Val, Lb, Ub, Aligned)
	  ( <_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7})
		  -| [{'function_name',{'per_enc_integer_2',3}}] )
	    -| ['compiler_generated'] )
	end
'per_enc_constrained'/4 =
    %% Line 1105
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Val,Sv,_cor38,_X_Aligned>
	      when call 'erlang':'=:='
		    (_cor38,
		     Sv) ->
	      %% Line 1106
	      {[],{'eq',Val,Sv},[]}
	  %% Line 1107
	  <Val0,Lb,Ub,'false'> when 'true' ->
	      %% Line 1108
	      case apply 'sub_lb'/2
		       (Val0, Lb) of
		<{Prefix,Val}> when 'true' ->
		    let <_cor5> =
			%% Line 1109
			call 'erlang':'-'
			    (Ub, Lb)
		    in  let <Range> =
			    %% Line 1109
			    call 'erlang':'+'
				(_cor5, 1)
			in  let <NumBits> =
				%% Line 1110
				apply 'uper_num_bits'/1
				    (Range)
			    in  let <Check> = {%% Line 1111
				     'ult',%% Line 1111
					   Val,%% Line 1111
					       Range}
				in  let <Put> =
					%% Line 1112
					[{'put_bits',Val,NumBits,[1]}|[]]
				    in  %% Line 1113
					{Prefix,Check,Put}
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1114
	  <Val0,Lb,Ub,'true'> when 'true' ->
	      %% Line 1115
	      case apply 'sub_lb'/2
		       (Val0, Lb) of
		<{Prefix,Val}> when 'true' ->
		    let <_cor11> =
			%% Line 1116
			call 'erlang':'-'
			    (Ub, Lb)
		    in  let <Range> =
			    %% Line 1116
			    call 'erlang':'+'
				(_cor11, 1)
			in  %% Line 1117
			    case <> of
			      %% Line 1118
			      <>
				  when call 'erlang':'<'
					(Range,
					 256) ->
				  let <NumBits> =
				      %% Line 1119
				      apply 'per_num_bits'/1
					  (Range)
				  in  let <Check> = {%% Line 1120
					   'ult',%% Line 1120
						 Val,%% Line 1120
						     Range}
				      in  let <Put> =
					      %% Line 1121
					      [{'put_bits',Val,NumBits,[1]}|[]]
					  in  %% Line 1122
					      {Prefix,Check,Put}
			      %% Line 1123
			      <>
				  when call 'erlang':'=:='
					(Range,
					 256) ->
				  let <Check> = {%% Line 1125
				       'ult',%% Line 1125
					     Val,%% Line 1125
						 Range}
				  in  let <Put> =
					  %% Line 1126
					  [{'put_bits',Val,8,[1|['align']]}|[]]
				      in  %% Line 1127
					  {Prefix,Check,Put}
			      %% Line 1128
			      <>
				  when call 'erlang':'=<'
					(Range,
					 65536) ->
				  let <Check> = {%% Line 1129
				       'ult',%% Line 1129
					     Val,%% Line 1129
						 Range}
				  in  let <Put> =
					  %% Line 1130
					  [{'put_bits',Val,16,[1|['align']]}|[]]
				      in  %% Line 1131
					  {Prefix,Check,Put}
			      %% Line 1132
			      <> when 'true' ->
				  %% Line 1133
				  case Val of
				    <{'var',VarBase}> when 'true' ->
					let <_cor22> =
					    %% Line 1134
					    call 'erlang':'++'
						(VarBase, [64|[98|[105|[110]]]])
					in  let <Bin> = {%% Line 1134
						 'var',_cor22}
					    in  let <_cor24> =
						    %% Line 1135
						    call 'erlang':'++'
							(VarBase, [64|[98|[105|[110|[95|[115|[105|[122|[101|[48]]]]]]]]]])
						in  let <BinSize0> = {%% Line 1135
							 'var',_cor24}
						    in  let <_cor26> =
							    %% Line 1136
							    call 'erlang':'++'
								(VarBase, [64|[98|[105|[110|[95|[115|[105|[122|[101]]]]]]]]])
							in  let <BinSize> = {%% Line 1136
								 'var',_cor26}
							    in  let <Check> = {%% Line 1137
								     'ult',%% Line 1137
									   Val,%% Line 1137
									       Range}
								in  let <_cor29> =
									%% Line 1138
									call 'erlang':'-'
									    (Range, 1)
								    in  let <_cor30> =
									    %% Line 1138
									    call 'binary':'encode_unsigned'
										(_cor29)
									in  let <RangeOctsLen> =
										%% Line 1138
										call 'erlang':'byte_size'
										    (_cor30)
									    in  let <BitsNeeded> =
										    %% Line 1139
										    apply 'per_num_bits'/1
											(RangeOctsLen)
										in  let <Enc> =
											%% Line 1140
											[{'call','binary','encode_unsigned',[Val|[]],Bin}|%% Line 1141
																	  [{'call','erlang','byte_size',[Bin|[]],BinSize0}|%% Line 1142
																							   [{'sub',BinSize0,1,BinSize}|%% Line 1143
																										       [{'cond',[['_'|%% Line 1144
																												      [{'put_bits',BinSize,BitsNeeded,[1]}|%% Line 1145
																																	   [{'put_bits',Bin,'binary',[8|['align']]}|[]]]]|%% Line 1145
																																							  []]}|%% Line 1145
																																							       []]]]]
										    in  %% Line 1146
											{Prefix,Check,Enc}
				    ( <_cor21> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor21})
				      -| ['compiler_generated'] )
				  end
			    end
		( <_cor10> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor10})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor37,_cor36,_cor35,_cor34> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor37,_cor36,_cor35,_cor34})
		  -| [{'function_name',{'per_enc_constrained',4}}] )
	    -| ['compiler_generated'] )
	end
'per_enc_unconstrained'/2 =
    %% Line 1149
    fun (_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 1150
	    case _cor0 of
	      %% Line 1151
	      <'false'> when 'true' ->
		  []
	      %% Line 1152
	      <'true'> when 'true' ->
		  [{'put_bits',0,0,[1|['align']]}]
	      ( <_cor2> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor2})
		-| ['compiler_generated'] )
	    end
	in  %% Line 1153
	    call 'erlang':'++'
		(_cor3, [{'call','per_common','encode_unconstrained_number',[_cor1|[]]}|[]])
'per_enc_unsigned'/2 =
    %% Line 1155
    fun (_cor1,_cor0) ->
	%% Line 1156
	case <> of
	  %% Line 1164
	  <>
	      when call 'erlang':'is_integer'
		    (_cor1) ->
	      let <Bin> =
		  %% Line 1165
		  call 'binary':'encode_unsigned'
		      (_cor1)
	      in  let <Len> =
		      %% Line 1166
		      call 'erlang':'byte_size'
			  (Bin)
		  in  %% Line 1167
		      apply 'per_enc_length'/4
			  (Bin, 8, Len, _cor0)
	  %% Line 1157
	  <> when 'true' ->
	      %% Line 1158
	      case _cor1 of
		<{'var',VarBase}> when 'true' ->
		    let <_cor3> =
			%% Line 1159
			call 'erlang':'++'
			    (VarBase, [64|[98|[105|[110]]]])
		    in  let <Bin> = {%% Line 1159
			     'var',_cor3}
			in  let <_cor5> =
				%% Line 1160
				call 'erlang':'++'
				    (VarBase, [64|[98|[105|[110|[95|[115|[105|[122|[101]]]]]]]]])
			    in  let <BinSize> = {%% Line 1160
				     'var',_cor5}
				in  let <_cor7> =
					%% Line 1163
					apply 'per_enc_length'/4
					    (Bin, 8, BinSize, _cor0)
				    in  %% Line 1161
					[{'call','binary','encode_unsigned',[_cor1|[]],Bin}|%% Line 1162
											    [{'call','erlang','byte_size',[Bin|[]],BinSize}|_cor7]]
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	end
'per_enc_length'/4 =
    %% Line 1171
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <U> =
	    %% Line 1172
	    apply 'unit'/2
		(1, _cor0)
	in  let <PutBits> =
		%% Line 1173
		apply 'put_bits_binary'/3
		    (_cor3, _cor2, _cor0)
	    in  let <EncFragmented> =
		    %% Line 1174
		    {'call','per_common','encode_fragmented',[_cor3|[_cor2|[]]]}
		in  let <_cor8> =
			%% Line 1175
			case _cor0 of
			  %% Line 1176
			  <'false'> when 'true' ->
			      []
			  %% Line 1177
			  <'true'> when 'true' ->
			      [{'put_bits',0,0,[1|['align']]}]
			  ( <_cor7> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor7})
			    -| ['compiler_generated'] )
			end
		    in  let <_cor10> =
			    %% Line 1183
			    call 'erlang':'++'
				(_cor8, [EncFragmented|[]])
			in  %% Line 1179
			    apply 'build_cond'/1
				([[{'lt',_cor1,128}|%% Line 1180
						    [{'put_bits',_cor1,8,U}|[PutBits|[]]]]|%% Line 1181
											   [[{'lt',_cor1,16384}|%% Line 1182
														[{'put_bits',2,2,U}|[{'put_bits',_cor1,14,[1]}|[PutBits|[]]]]]|%% Line 1183
																					       [['_'|_cor10]|[]]]])
'per_enc_length'/6 =
    %% Line 1185
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Bin,Unit,Len,'no',Aligned,_X_Type> when 'true' ->
	      %% Line 1186
	      apply 'per_enc_length'/4
		  (Bin, Unit, Len, Aligned)
	  %% Line 1187
	  <Bin,Unit,Len,{{Lb,Ub},[]},Aligned,Type> when 'true' ->
	      %% Line 1188
	      case apply 'per_enc_constrained'/4
		       (Len, Lb, Ub, Aligned) of
		<{Prefix,Check,PutLen}> when 'true' ->
		    let <_cor9> =
			%% Line 1190
			call 'erlang':'*'
			    (Lb, Unit)
		    in  let <_cor8> =
			    %% Line 1190
			    call 'erlang':'*'
				(Ub, Unit)
			in  let <U> =
				%% Line 1190
				apply 'unit'/5
				    (Unit, Aligned, Type, _cor9, _cor8)
			    in  let <PutBits> =
				    %% Line 1191
				    [{'put_bits',Bin,'binary',U}|[]]
				in  %% Line 1192
				    case apply 'per_enc_length'/4
					     (Bin, Unit, Len, Aligned) of
				      <[{'cond',ExtConds0}|[]]> when 'true' ->
					  let <ExtConds> =
					      %% Line 1194
					      apply 'prepend_to_cond'/2
						  (ExtConds0, {'put_bits',1,1,[1]})
					  in  let <_cor15> =
						  %% Line 1195
						  call 'erlang':'++'
						      (PutLen, PutBits)
					      in  %% Line 1195
						  apply 'build_length_cond'/2
						      (Prefix, [[Check|[{'put_bits',0,1,[1]}|_cor15]]|ExtConds])
				      ( <_cor12> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_cor12})
					-| ['compiler_generated'] )
				    end
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor6})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1196
	  <Bin,Unit,Len,{Lb,Ub},Aligned,Type>
	      when %% Line 1197
		call 'erlang':'is_integer'
		    (Lb) ->
	      %% Line 1198
	      case apply 'per_enc_constrained'/4
		       (Len, Lb, Ub, Aligned) of
		<{Prefix,Check,PutLen}> when 'true' ->
		    let <_cor18> =
			%% Line 1199
			call 'erlang':'*'
			    (Lb, Unit)
		    in  let <_cor17> =
			    %% Line 1199
			    call 'erlang':'*'
				(Ub, Unit)
			in  let <U> =
				%% Line 1199
				apply 'unit'/5
				    (Unit, Aligned, Type, _cor18, _cor17)
			    in  let <PutBits> =
				    %% Line 1200
				    [{'put_bits',Bin,'binary',U}|[]]
				in  let <_cor21> =
					%% Line 1201
					call 'erlang':'++'
					    (PutLen, PutBits)
				    in  %% Line 1201
					apply 'build_length_cond'/2
					    (Prefix, [[Check|_cor21]|[]])
		( <_cor16> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor16})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1202
	  <Bin,Unit0,Len,Sv,Aligned,Type>
	      when call 'erlang':'is_integer'
		    (Sv) ->
	      let <NumBits> =
		  %% Line 1203
		  call 'erlang':'*'
		      (Sv, Unit0)
	      in  let <_cor24> =
		      %% Line 1204
		      case call 'erlang':'rem'
			       (NumBits, 8) of
			%% Line 1205
			<0> when 'true' ->
			    %% Line 1207
			    8
			%% Line 1208
			<_cor34> when 'true' ->
			    %% Line 1209
			    Unit0
		      end
		  in  let <U> =
			  %% Line 1211
			  apply 'unit'/5
			      (_cor24, Aligned, Type, NumBits, NumBits)
		      in  let <Pb> =
			      %% Line 1212
			      {'put_bits',Bin,'binary',U}
			  in  %% Line 1213
			      [{'cond',[[{'eq',Len,Sv}|[Pb|[]]]|[]]}|[]]
	  ( <_cor33,_cor32,_cor31,_cor30,_cor29,_cor28> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor33,_cor32,_cor31,_cor30,_cor29,_cor28})
		  -| [{'function_name',{'per_enc_length',6}}] )
	    -| ['compiler_generated'] )
	end
'enc_length'/3 =
    %% Line 1215
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Len,'no',Aligned> when 'true' ->
	      let <U> =
		  %% Line 1216
		  apply 'unit'/2
		      (1, Aligned)
	      in  %% Line 1217
		  apply 'build_cond'/1
		      ([[{'lt',Len,128}|%% Line 1218
					[{'put_bits',Len,8,U}|[]]]|%% Line 1219
								   [[{'lt',Len,16384}|%% Line 1220
										      [{'put_bits',2,2,U}|[{'put_bits',Len,14,[1]}|[]]]]|%% Line 1220
																	 []]])
	  %% Line 1221
	  <Len,{{Lb,Ub},[]},Aligned> when 'true' ->
	      %% Line 1222
	      case apply 'per_enc_constrained'/4
		       (Len, Lb, Ub, Aligned) of
		<{Prefix,Check,PutLen}> when 'true' ->
		    %% Line 1224
		    case apply 'enc_length'/3
			     (Len, 'no', Aligned) of
		      <[{'cond',ExtConds0}|[]]> when 'true' ->
			  let <ExtConds> =
			      %% Line 1226
			      apply 'prepend_to_cond'/2
				  (ExtConds0, {'put_bits',1,1,[1]})
			  in  %% Line 1227
			      apply 'build_length_cond'/2
				  (Prefix, [[Check|[{'put_bits',0,1,[1]}|PutLen]]|ExtConds])
		      ( <_cor6> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor6})
			-| ['compiler_generated'] )
		    end
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1228
	  <Len,{Lb,Ub},Aligned>
	      when call 'erlang':'is_integer'
		    (Lb) ->
	      %% Line 1229
	      case apply 'per_enc_constrained'/4
		       (Len, Lb, Ub, Aligned) of
		<{Prefix,Check,PutLen}> when 'true' ->
		    %% Line 1230
		    apply 'build_length_cond'/2
			(Prefix, [[Check|PutLen]|[]])
		( <_cor9> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor9})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1231
	  <Len,Sv,_X_Aligned>
	      when call 'erlang':'is_integer'
		    (Sv) ->
	      %% Line 1232
	      [{'cond',[[{'eq',Len,Sv}|[]]|[]]}|[]]
	  ( <_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10})
		  -| [{'function_name',{'enc_length',3}}] )
	    -| ['compiler_generated'] )
	end
'put_bits_binary'/3 =
    %% Line 1234
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Bin,_X_Unit,Aligned>
	      when call 'erlang':'is_binary'
		    (Bin) ->
	      let <Sz> =
		  %% Line 1235
		  call 'erlang':'byte_size'
		      (Bin)
	      in  %% Line 1236
		  case ( Bin
			 -| ['reuse_for_context'] ) of
		    <#{#<Int>(Sz,8,'integer',['unsigned'|['big']])}#> when 'true' ->
			let <_cor6> =
			    %% Line 1237
			    call 'erlang':'*'
				(8, Sz)
			in  let <_cor5> =
				%% Line 1237
				apply 'unit'/2
				    (1, Aligned)
			    in  %% Line 1237
				{'put_bits',Int,_cor6,_cor5}
		    ( <_cor4> when 'true' ->
			  do  primop 'bs_context_to_binary'
				  (_cor4)
			      primop 'match_fail'
				  ({'badmatch',_cor4})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1238
	  <Bin,Unit,Aligned> when 'true' ->
	      let <_cor7> =
		  %% Line 1239
		  apply 'unit'/2
		      (Unit, Aligned)
	      in  %% Line 1239
		  {'put_bits',Bin,'binary',_cor7}
	end
'sub_lb'/2 =
    %% Line 1241
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Val,0> when 'true' ->
	      %% Line 1242
	      {[],Val}
	  %% Line 1243
	  <Val0 = {'var',Var},Lb> when 'true' ->
	      let <_cor2> =
		  %% Line 1244
		  call 'erlang':'++'
		      (Var, [64|[115|[117|[98]]]])
	      in  let <Val> = {%% Line 1244
		       'var',_cor2}
		  in  %% Line 1245
		      {[{'sub',Val0,Lb,Val}|[]],Val}
	  %% Line 1246
	  <Val,Lb>
	      when call 'erlang':'is_integer'
		    (Val) ->
	      let <_cor4> =
		  %% Line 1247
		  call 'erlang':'-'
		      (Val, Lb)
	      in  %% Line 1247
		  {[],_cor4}
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'sub_lb',2}}] )
	    -| ['compiler_generated'] )
	end
'build_length_cond'/2 =
    %% Line 1249
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Prefix = [{'sub',Var0,Base,Var}|[]],Cs> when 'true' ->
	      let <_cor2> =
		  %% Line 1251
		  apply 'opt_length_nzlb'/3
		      (Cs, {Var0,Var,Base}, 0)
	      in  %% Line 1251
		  call 'erlang':'++'
		      (Prefix, [{'cond',_cor2}|[]])
	  %% Line 1252
	  <[],Cs> when 'true' ->
	      let <_cor3> =
		  %% Line 1254
		  apply 'opt_length_zlb'/2
		      (Cs, 0)
	      in  %% Line 1254
		  [{'cond',_cor3}|[]]
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'build_length_cond',2}}] )
	    -| ['compiler_generated'] )
	end
'opt_length_zlb'/2 =
    %% Line 1256
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[[{'ult',Var,Val}|Actions]|T],Ub> when 'true' ->
	      %% Line 1260
	      apply 'opt_length_zlb'/2
		  ([[{'lt',Var,Val}|Actions]|T], Ub)
	  %% Line 1261
	  <[H = [{'lt',_cor7,Val}|_cor8]|T],Ub> when 'true' ->
	      %% Line 1262
	      case <> of
		%% Line 1263
		<>
		    when call 'erlang':'=<'
			  (Val,
			   Ub) ->
		    %% Line 1265
		    apply 'opt_length_zlb'/2
			(T, Ub)
		%% Line 1266
		<> when 'true' ->
		    let <_cor2> =
			%% Line 1267
			call 'erlang':'max'
			    (Ub, Val)
		    in  let <_cor3> =
			    %% Line 1267
			    apply 'opt_length_zlb'/2
				(T, _cor2)
			in  %% Line 1267
			    [H|_cor3]
	      end
	  %% Line 1269
	  <[H|T],Ub> when 'true' ->
	      let <_cor4> =
		  %% Line 1270
		  apply 'opt_length_zlb'/2
		      (T, Ub)
	      in  %% Line 1270
		  [H|_cor4]
	  %% Line 1271
	  <[],_cor9> when 'true' ->
	      []
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'opt_length_zlb',2}}] )
	    -| ['compiler_generated'] )
	end
'opt_length_nzlb'/3 =
    %% Line 1273
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[H = [{'ult',Var,Val}|_cor10]|T],St = {_cor11,_cor12,Base},_X_Ub>
	      when call 'erlang':'=:='
		    (_cor12,
		     Var) ->
	      let <_cor3> =
		  %% Line 1274
		  call 'erlang':'+'
		      (Base, Val)
	      in  let <_cor4> =
		      %% Line 1274
		      apply 'opt_length_nzlb'/3
			  (T, St, _cor3)
		  in  %% Line 1274
		      [H|_cor4]
	  %% Line 1275
	  <[H = [{'lt',Var0,Val}|_cor13]|T],St = {_cor14,_cor15,_cor16},Ub>
	      when call 'erlang':'=:='
		    (_cor14,
		     Var0) ->
	      %% Line 1276
	      case <> of
		%% Line 1277
		<>
		    when call 'erlang':'=<'
			  (Val,
			   Ub) ->
		    %% Line 1279
		    apply 'opt_length_nzlb'/3
			(T, St, Ub)
		%% Line 1280
		<> when 'true' ->
		    let <_cor5> =
			%% Line 1281
			apply 'opt_length_nzlb'/3
			    (T, St, Val)
		    in  %% Line 1281
			[H|_cor5]
	      end
	  %% Line 1283
	  <[H|T],St,Ub> when 'true' ->
	      let <_cor6> =
		  %% Line 1284
		  apply 'opt_length_nzlb'/3
		      (T, St, Ub)
	      in  %% Line 1284
		  [H|_cor6]
	  %% Line 1285
	  <[],_cor17,_cor18> when 'true' ->
	      []
	  ( <_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7})
		  -| [{'function_name',{'opt_length_nzlb',3}}] )
	    -| ['compiler_generated'] )
	end
'build_cond'/1 =
    %% Line 1287
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 1288
	    call 'gb_sets':'empty'
		()
	in  %% Line 1288
	    case apply 'eval_cond'/2
		     (_cor0, _cor1) of
	      %% Line 1289
	      <[['_'|Actions]|[]]> when 'true' ->
		  %% Line 1290
		  Actions
	      %% Line 1291
	      <Conds> when 'true' ->
		  %% Line 1292
		  [{'cond',Conds}|[]]
	    end
'eval_cond'/2 =
    %% Line 1295
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[['_'|[{'cond',Cs}|[]]]|[]],Seen> when 'true' ->
	      %% Line 1296
	      apply 'eval_cond'/2
		  (Cs, Seen)
	  %% Line 1297
	  <[H = [Cond|Actions]|T],Seen0> when 'true' ->
	      %% Line 1298
	      case call 'gb_sets':'is_element'
		       (Cond, Seen0) of
		%% Line 1299
		<'false'> when 'true' ->
		    let <Seen> =
			%% Line 1300
			call 'gb_sets':'insert'
			    (Cond, Seen0)
		    in  %% Line 1301
			case apply 'eval_cond_1'/1
				 (Cond) of
			  %% Line 1302
			  <'false'> when 'true' ->
			      %% Line 1303
			      apply 'eval_cond'/2
				  (T, Seen)
			  %% Line 1304
			  <'true'> when 'true' ->
			      %% Line 1305
			      [['_'|Actions]|[]]
			  %% Line 1306
			  <'maybe'> when 'true' ->
			      let <_cor3> =
				  %% Line 1307
				  apply 'eval_cond'/2
				      (T, Seen)
			      in  %% Line 1307
				  [H|_cor3]
			  ( <_cor4> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor4})
			    -| ['compiler_generated'] )
			end
		%% Line 1309
		<'true'> when 'true' ->
		    %% Line 1310
		    apply 'eval_cond'/2
			(T, Seen0)
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1312
	  <[],_cor8> when 'true' ->
	      []
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6})
		  -| [{'function_name',{'eval_cond',2}}] )
	    -| ['compiler_generated'] )
	end
'eval_cond_1'/1 =
    %% Line 1314
    fun (_cor0) ->
	case _cor0 of
	  <{'ult',I,N}>
	      when let <_cor1> =
		    call 'erlang':'is_integer'
			(I)
		in  let <_cor2> =
			call 'erlang':'is_integer'
			    (N)
		    in  call 'erlang':'and'
			    (_cor1, _cor2) ->
	      %% Line 1315
	      ( case <> of
		  ( <>
			when call 'erlang':'=<'
			      (0,
			       I) ->
			call 'erlang':'<'
			    (I, N)
		    -| ['compiler_generated'] )
		  ( <> when 'true' ->
			'false'
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1316
	  <{'eq',[],[]}> when 'true' ->
	      %% Line 1317
	      'true'
	  %% Line 1318
	  <{'eq',I,N}>
	      when let <_cor5> =
		    call 'erlang':'is_integer'
			(I)
		in  let <_cor6> =
			call 'erlang':'is_integer'
			    (N)
		    in  call 'erlang':'and'
			    (_cor5, _cor6) ->
	      %% Line 1319
	      call 'erlang':'=:='
		  (I, N)
	  %% Line 1320
	  <{'ge',I,N}>
	      when let <_cor7> =
		    call 'erlang':'is_integer'
			(I)
		in  let <_cor8> =
			call 'erlang':'is_integer'
			    (N)
		    in  call 'erlang':'and'
			    (_cor7, _cor8) ->
	      %% Line 1321
	      call 'erlang':'>='
		  (I, N)
	  %% Line 1322
	  <{'lt',I,N}>
	      when let <_cor9> =
		    call 'erlang':'is_integer'
			(I)
		in  let <_cor10> =
			call 'erlang':'is_integer'
			    (N)
		    in  call 'erlang':'and'
			    (_cor9, _cor10) ->
	      %% Line 1323
	      call 'erlang':'<'
		  (I, N)
	  %% Line 1324
	  <_cor12> when 'true' ->
	      'maybe'
	end
'prepend_to_cond'/2 =
    %% Line 1326
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[H|T],Code> when 'true' ->
	      let <_cor2> =
		  %% Line 1327
		  apply 'prepend_to_cond_1'/2
		      (H, Code)
	      in  let <_cor3> =
		      %% Line 1327
		      apply 'prepend_to_cond'/2
			  (T, Code)
		  in  %% Line 1327
		      [_cor2|_cor3]
	  %% Line 1328
	  <[],_cor6> when 'true' ->
	      []
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'prepend_to_cond',2}}] )
	    -| ['compiler_generated'] )
	end
'prepend_to_cond_1'/2 =
    %% Line 1330
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[Check|T],Code> when 'true' ->
	      %% Line 1331
	      [Check|[Code|T]]
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'prepend_to_cond_1',2}}] )
	    -| ['compiler_generated'] )
	end
'enc_char_tab'/1 =
    %% Line 1333
    fun (_cor0) ->
	case _cor0 of
	  <'notab'> when 'true' ->
	      %% Line 1334
	      'notab'
	  %% Line 1335
	  <Tab0> when 'true' ->
	      let <Tab1> =
		  %% Line 1336
		  call 'erlang':'tuple_to_list'
		      (Tab0)
	      in  let <First> =
		      %% Line 1337
		      call 'erlang':'hd'
			  (Tab1)
		  in  let <Tab> =
			  %% Line 1338
			  apply 'enc_char_tab_1'/3
			      (Tab1, First, 0)
		      in  %% Line 1339
			  case call 'lists':'member'
				   ('ill', Tab) of
			    %% Line 1340
			    <'false'> when 'true' ->
				let <_cor4> =
				    %% Line 1341
				    call 'erlang':'tuple_size'
					(Tab0)
				in  %% Line 1341
				    {'compact_map',{First,_cor4}}
			    %% Line 1342
			    <'true'> when 'true' ->
				let <_cor6> =
				    %% Line 1343
				    call 'erlang':'-'
					(First, 1)
				in  let <_cor5> =
					%% Line 1343
					call 'erlang':'list_to_tuple'
					    (Tab)
				    in  %% Line 1343
					{'tab',{_cor6,_cor5}}
			    ( <_cor7> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor7})
			      -| ['compiler_generated'] )
			  end
	end
'enc_char_tab_1'/3 =
    %% Line 1346
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[H|T],_cor11,I>
	      when call 'erlang':'=:='
		    (_cor11,
		     H) ->
	      let <_cor4> =
		  %% Line 1347
		  call 'erlang':'+'
		      (H, 1)
	      in  let <_cor3> =
		      %% Line 1347
		      call 'erlang':'+'
			  (I, 1)
		  in  let <_cor5> =
			  %% Line 1347
			  apply 'enc_char_tab_1'/3
			      (T, _cor4, _cor3)
		      in  %% Line 1347
			  [I|_cor5]
	  %% Line 1348
	  <T = [_cor12|_cor13],H,I> when 'true' ->
	      let <_cor6> =
		  %% Line 1349
		  call 'erlang':'+'
		      (H, 1)
	      in  let <_cor7> =
		      %% Line 1349
		      apply 'enc_char_tab_1'/3
			  (T, _cor6, I)
		  in  %% Line 1349
		      ['ill'|_cor7]
	  %% Line 1350
	  <[],_cor14,_cor15> when 'true' ->
	      []
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'enc_char_tab_1',3}}] )
	    -| ['compiler_generated'] )
	end
'enumerated_constraint'/1 =
    %% Line 1352
    fun (_cor0) ->
	case _cor0 of
	  <[_cor4|[]]> when 'true' ->
	      %% Line 1353
	      [{'SingleValue',0}]
	  %% Line 1354
	  <Root> when 'true' ->
	      let <_cor1> =
		  %% Line 1355
		  call 'erlang':'length'
		      (Root)
	      in  let <_cor2> =
		      %% Line 1355
		      call 'erlang':'-'
			  (_cor1, 1)
		  in  %% Line 1355
		      [{'ValueRange',{0,_cor2}}|[]]
	end
'per_enc_enumerated_root'/5 =
    %% Line 1357
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1358
	apply 'per_enc_enumerated_root_1'/6
	    (_cor4, _cor3, _cor2, _cor1, _cor0, 0)
'per_enc_enumerated_root_1'/6 =
    %% Line 1360
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[{H,_cor16}|T],Prefix,Val,Constr,Aligned,N> when 'true' ->
	      let <_cor6> =
		  %% Line 1361
		  apply 'per_enc_integer_1'/3
		      (N, Constr, Aligned)
	      in  let <_cor7> =
		      %% Line 1361
		      call 'erlang':'++'
			  (Prefix, _cor6)
		  in  let <_cor8> =
			  %% Line 1362
			  call 'erlang':'+'
			      (N, 1)
		      in  let <_cor9> =
			      %% Line 1362
			      apply 'per_enc_enumerated_root_1'/6
				  (T, Prefix, Val, Constr, Aligned, _cor8)
			  in  %% Line 1361
			      [[{'eq',Val,H}|_cor7]|_cor9]
	  %% Line 1363
	  <[],_cor17,_cor18,_cor19,_cor20,_cor21> when 'true' ->
	      []
	  ( <_cor15,_cor14,_cor13,_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14,_cor13,_cor12,_cor11,_cor10})
		  -| [{'function_name',{'per_enc_enumerated_root_1',6}}] )
	    -| ['compiler_generated'] )
	end
'per_enc_enumerated_ext'/3 =
    %% Line 1365
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1366
	apply 'per_enc_enumerated_ext_1'/4
	    (_cor2, _cor1, _cor0, 0)
'per_enc_enumerated_ext_1'/4 =
    %% Line 1368
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[{H,_cor11}|T],Val,Aligned,N> when 'true' ->
	      let <_cor4> =
		  %% Line 1369
		  apply 'per_enc_small_number'/2
		      (N, Aligned)
	      in  let <_cor5> =
		      %% Line 1370
		      call 'erlang':'+'
			  (N, 1)
		  in  let <_cor6> =
			  %% Line 1370
			  apply 'per_enc_enumerated_ext_1'/4
			      (T, Val, Aligned, _cor5)
		      in  %% Line 1369
			  [[{'eq',Val,H}|[{'put_bits',1,1,[1]}|_cor4]]|_cor6]
	  %% Line 1371
	  <[],_cor12,_cor13,_cor14> when 'true' ->
	      []
	  ( <_cor10,_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8,_cor7})
		  -| [{'function_name',{'per_enc_enumerated_ext_1',4}}] )
	    -| ['compiler_generated'] )
	end
'per_enc_small_length'/2 =
    %% Line 1373
    fun (_cor1,_cor0) ->
	%% Line 1374
	case apply 'sub_lb'/2
		 (_cor1, 1) of
	  <{Sub,Val}> when 'true' ->
	      let <U> =
		  %% Line 1375
		  apply 'unit'/2
		      (1, _cor0)
	      in  let <_cor4> =
		      %% Line 1376
		      apply 'build_cond'/1
			  ([[{'lt',Val,64}|[{'put_bits',Val,7,[1]}|[]]]|%% Line 1377
									[[{'lt',_cor1,128}|[{'put_bits',1,1,[1]}|%% Line 1378
														 [{'put_bits',_cor1,8,U}|[]]]]|%% Line 1379
																	       [['_'|[{'put_bits',1,1,[1]}|%% Line 1380
																					   [{'put_bits',2,2,U}|[{'put_bits',_cor1,14,[1]}|[]]]]]|%% Line 1380
																												 []]]])
		  in  %% Line 1376
		      call 'erlang':'++'
			  (Sub, _cor4)
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'constr_min_size'/1 =
    %% Line 1382
    fun (_cor0) ->
	case _cor0 of
	  <'no'> when 'true' ->
	      'no'
	  %% Line 1383
	  <{{Lb,_cor2},[]}>
	      when call 'erlang':'is_integer'
		    (Lb) ->
	      Lb
	  %% Line 1384
	  <{Lb,_cor3}>
	      when call 'erlang':'is_integer'
		    (Lb) ->
	      Lb
	  %% Line 1385
	  <Sv>
	      when call 'erlang':'is_integer'
		    (_cor0) ->
	      Sv
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'constr_min_size',1}}] )
	    -| ['compiler_generated'] )
	end
'enc_mod'/1 =
    %% Line 1387
    fun (_cor0) ->
	case _cor0 of
	  <'false'> when 'true' ->
	      'uper'
	  %% Line 1388
	  <'true'> when 'true' ->
	      'per'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'enc_mod',1}}] )
	    -| ['compiler_generated'] )
	end
'unit'/2 =
    %% Line 1390
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <U,'false'> when 'true' ->
	      [U|[]]
	  %% Line 1391
	  <U,'true'> when 'true' ->
	      [U|['align']]
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'unit',2}}] )
	    -| ['compiler_generated'] )
	end
'unit'/5 =
    %% Line 1393
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor7> =
	    %% Line 1394
	    ( case _cor3 of
		( <( 'true'
		     -| ['compiler_generated'] )> when 'true' ->
		      apply 'is_aligned'/3
			  (_cor2, _cor1, _cor0)
		  -| ['compiler_generated'] )
		( <( 'false'
		     -| ['compiler_generated'] )> when 'true' ->
		      'false'
		  -| ['compiler_generated'] )
		( <_cor5> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {( 'badarg'
				  -| ['compiler_generated'] ),_cor5}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	      -| ['compiler_generated'] )
	in  %% Line 1394
	    case _cor7 of
	      %% Line 1395
	      <'true'> when 'true' ->
		  [_cor4|['align']]
	      %% Line 1396
	      <'false'> when 'true' ->
		  [_cor4|[]]
	      ( <_cor8> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor8})
		-| ['compiler_generated'] )
	    end
'opt_choice'/1 =
    %% Line 1399
    fun (_cor0) ->
	let <_cor3> =
	    %% Line 1400
	    ( fun (_cor1) ->
		  case _cor1 of
		    <{'put_bits',V,_cor12,_cor13}>
			when call 'erlang':'is_integer'
			      (V) ->
			%% Line 1401
			'true'
		    %% Line 1402
		    <_cor14> when 'true' ->
			%% Line 1403
			'false'
		  end
	      -| [{'id',{0,0,'-opt_choice/1-fun-0-'}}] )
	in  %% Line 1400
	    case call 'lists':'splitwith'
		     (_cor3, _cor0) of
	      <{Pb,T0}> when 'true' ->
		  %% Line 1405
		  try
		      %% Line 1406
		      case apply 'split_off_nonbuilding'/1
			       (T0) of
			<{Prefix,T}> when 'true' ->
			    let <_cor6> =
				%% Line 1407
				apply 'opt_choice_1'/2
				    (T, Pb)
			    in  %% Line 1407
				call 'erlang':'++'
				    (Prefix, _cor6)
			( <_cor5> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor5})
			  -| ['compiler_generated'] )
		      end
		  of <_cor7> ->
		      _cor7
		  catch <_cor10,_cor9,_cor8> ->
		      case <_cor10,_cor9,_cor8> of
			%% Line 1409
			<'throw','impossible',_cor15> when 'true' ->
			    _cor0
			( <_cor10,_cor9,_cor8> when 'true' ->
			      primop 'raise'
				  (_cor8, _cor9)
			  -| ['compiler_generated'] )
		      end
	      ( <_cor4> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor4})
		-| ['compiler_generated'] )
	    end
'opt_choice_1'/2 =
    %% Line 1413
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{'cond',Cs0}|[]],Pb> when 'true' ->
	      %% Line 1414
	      case Cs0 of
		%% Line 1415
		<[[C|Act]|[]]> when 'true' ->
		    let <_cor2> =
			%% Line 1416
			call 'erlang':'++'
			    (Pb, Act)
		    in  %% Line 1416
			[{'cond',[[C|_cor2]|[]]}|[]]
		%% Line 1417
		<[[C|Act]|[Error = ['_'|[{'error',_cor8}|[]]]|[]]]> when 'true' ->
		    let <_cor3> =
			%% Line 1418
			call 'erlang':'++'
			    (Pb, Act)
		    in  %% Line 1418
			[{'cond',[[C|_cor3]|[Error|[]]]}|[]]
		%% Line 1419
		<_cor9> when 'true' ->
		    let <_cor4> =
			%% Line 1420
			apply 'opt_choice_2'/2
			    (Cs0, Pb)
		    in  %% Line 1420
			[{'cond',_cor4}|[]]
	      end
	  %% Line 1422
	  <_cor10,_cor11> when 'true' ->
	      call 'erlang':'throw'
		  ('impossible')
	end
'opt_choice_2'/2 =
    %% Line 1424
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[[C|Act = [{'put_bits',_cor7,_cor8,_cor9}|_cor10]]|T],Pb> when 'true' ->
	      let <_cor2> =
		  %% Line 1425
		  call 'erlang':'++'
		      (Pb, Act)
	      in  let <_cor3> =
		      %% Line 1425
		      apply 'opt_choice_2'/2
			  (T, Pb)
		  in  %% Line 1425
		      [[C|_cor2]|_cor3]
	  %% Line 1426
	  <[H = [_cor11|[{'error',_cor12}|[]]]|T],Pb> when 'true' ->
	      let <_cor4> =
		  %% Line 1427
		  apply 'opt_choice_2'/2
		      (T, Pb)
	      in  %% Line 1427
		  [H|_cor4]
	  %% Line 1428
	  <[_cor13|_cor14],_cor15> when 'true' ->
	      %% Line 1429
	      call 'erlang':'throw'
		  ('impossible')
	  %% Line 1430
	  <[],_cor16> when 'true' ->
	      []
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'opt_choice_2',2}}] )
	    -| ['compiler_generated'] )
	end
'opt_lc'/2 =
    %% Line 1436
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Lc = [{'lc',[{'call','erlang','iolist_to_binary',[Var|[]],Bin}|%% Line 1437
									  [{'call','erlang','byte_size',[_cor27|[]],LenVar}|%% Line 1438
															    [{'cond',[[{'eq',_cor28,Len}|[{'put_bits',_cor29,_cor30,[_cor31|Align]}|[]]]|[]]}|[]]]],_cor32,%% Line 1439
																											   Val}|%% Line 1439
																												[]],%% Line 1439
																												    LenImm>
	      when let <_cor37> =
		    call 'erlang':'=:='
			(_cor27, %% Line 1437
				 Bin)
		in  let <_cor35> =
			call 'erlang':'=:='
			    (_cor28, %% Line 1438
				     LenVar)
		    in  let <_cor33> =
			    call 'erlang':'=:='
				(_cor29, %% Line 1438
					 Bin)
			in  let <_cor34> =
				call 'erlang':'=:='
				    (_cor32, %% Line 1439
					     Var)
			    in  let <_cor36> =
				    call 'erlang':'and'
					(_cor33, _cor34)
				in  let <_cor38> =
					call 'erlang':'and'
					    (_cor35, _cor36)
				    in  call 'erlang':'and'
					    (_cor37, _cor38) ->
	      let <_cor2> =
		  %% Line 1449
		  apply 'mk_val'/1
		      (Var)
	      in  let <_cor3> =
		      %% Line 1449
		      call 'erlang':'++'
			  (_cor2, [41])
		  in  let <_cor4> =
			  %% Line 1449
			  call 'erlang':'++'
			      ([108|[101|[110|[103|[116|[104|[40]]]]]]], _cor3)
		      in  let <_cor5> =
			      %% Line 1450
			      apply 'mk_val'/1
				  (Var)
			  in  let <_cor6> =
				  %% Line 1450
				  call 'erlang':'++'
				      (_cor5, [41])
			      in  let <_cor7> =
				      %% Line 1450
				      call 'erlang':'++'
					  ([98|[121|[116|[101|[95|[115|[105|[122|[101|[40]]]]]]]]]], _cor6)
				  in  let <CheckImm> =
					  %% Line 1449
					  [{'cond',[[{'eq',{'expr',_cor4},Len}|[]]|%% Line 1450
										   [[{'eq',{'expr',_cor7},Len}|[]]|[]]]}|%% Line 1450
															 []]
				      in  let <_cor10> =
					      %% Line 1451
					      case Align of
						%% Line 1452
						<[]> when 'true' ->
						    %% Line 1453
						    []
						%% Line 1454
						<['align']> when 'true' ->
						    %% Line 1455
						    [{'put_bits',0,0,[1|Align]}|[]]
						( <_cor9> when 'true' ->
						      primop 'match_fail'
							  ({'case_clause',_cor9})
						  -| ['compiler_generated'] )
					      end
					  in  let <_cor16> =
						  %% Line 1457
						  ( case <> of
						      ( <>
							    when call 'erlang':'=:='
								  (_cor10,
								   []) ->
							    'true'
							-| ['compiler_generated'] )
						      ( <> when 'true' ->
							    %% Line 1458
							    ( case apply 'is_end_aligned'/1
								       (LenImm) of
								( <( 'true'
								     -| ['compiler_generated'] )> when 'true' ->
								      'true'
								  -| ['compiler_generated'] )
								( <( 'false'
								     -| ['compiler_generated'] )> when 'true' ->
								      %% Line 1459
								      apply 'lb_is_nonzero'/1
									  (LenImm)
								  -| ['compiler_generated'] )
								( <_cor13> when 'true' ->
								      ( call ( 'erlang'
									       -| ['compiler_generated'] ):( 'error'
													     -| ['compiler_generated'] )
									    (( {( 'badarg'
										  -| ['compiler_generated'] ),_cor13}
									       -| ['compiler_generated'] ))
									-| ['compiler_generated'] )
								  -| ['compiler_generated'] )
							      end
							      -| ['compiler_generated'] )
							-| ['compiler_generated'] )
						    end
						    -| ['compiler_generated'] )
					      in  %% Line 1457
						  case _cor16 of
						    %% Line 1460
						    <'false'> when 'true' ->
							%% Line 1466
							Lc
						    %% Line 1467
						    <'true'> when 'true' ->
							%% Line 1476
							call 'erlang':'++'
							    (_cor10, [{'lc',CheckImm,Var,Val,{'var',[95]}}|%% Line 1477
													   [{'call','erlang','iolist_to_binary',[Val|[]]}|[]]])
						    ( <_cor17> when 'true' ->
							  primop 'match_fail'
							      ({'case_clause',_cor17})
						      -| ['compiler_generated'] )
						  end
	  %% Line 1479
	  <Lc = [{'lc',ElementImm0,V,L}|[]],LenImm> when 'true' ->
	      %% Line 1488
	      case apply 'enc_opt_al_1'/2
		       (ElementImm0, 0) of
		%% Line 1489
		<{ElementImm,0}> when 'true' ->
		    let <_cor22> =
			%% Line 1490
			( case apply 'is_end_aligned'/1
				   (LenImm) of
			    ( <( 'true'
				 -| ['compiler_generated'] )> when 'true' ->
				  'true'
			      -| ['compiler_generated'] )
			    ( <( 'false'
				 -| ['compiler_generated'] )> when 'true' ->
				  %% Line 1491
				  ( case apply 'is_beginning_aligned'/1
					     (ElementImm0) of
				      ( <( 'true'
					   -| ['compiler_generated'] )> when 'true' ->
					    %% Line 1492
					    apply 'lb_is_nonzero'/1
						(LenImm)
					-| ['compiler_generated'] )
				      ( <( 'false'
					   -| ['compiler_generated'] )> when 'true' ->
					    'false'
					-| ['compiler_generated'] )
				      ( <_cor19> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {( 'badarg'
							-| ['compiler_generated'] ),_cor19}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			    ( <_cor18> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {( 'badarg'
					      -| ['compiler_generated'] ),_cor18}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    in  %% Line 1490
			case _cor22 of
			  %% Line 1493
			  <'false'> when 'true' ->
			      %% Line 1503
			      Lc
			  %% Line 1504
			  <'true'> when 'true' ->
			      %% Line 1511
			      [{'put_bits',0,0,[1|['align']]}|[{'lc',ElementImm,V,L}|[]]]
			  ( <_cor23> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor23})
			    -| ['compiler_generated'] )
			end
		%% Line 1513
		<_cor39> when 'true' ->
		    %% Line 1520
		    Lc
	      end
	  ( <_cor26,_cor25> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor26,_cor25})
		  -| [{'function_name',{'opt_lc',2}}] )
	    -| ['compiler_generated'] )
	end
'is_beginning_aligned'/1 =
    %% Line 1523
    fun (_cor0) ->
	case _cor0 of
	  <[{'cond',Cs}|[]]> when 'true' ->
	      let <_cor3> =
		  %% Line 1524
		  ( fun (_cor1) ->
			case _cor1 of
			  <[_cor7|Act]> when 'true' ->
			      apply 'is_beginning_aligned'/1
				  (Act)
			  ( <_cor2> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_cor2})
				  -| [{'function_name',{'-is_beginning_aligned/1-fun-0-',1}}] )
			    -| ['compiler_generated'] )
			end
		    -| [{'id',{0,0,'-is_beginning_aligned/1-fun-0-'}}] )
	      in  %% Line 1524
		  call 'lists':'all'
		      (_cor3, Cs)
	  %% Line 1525
	  <[{'error',_cor8}|_cor9]> when 'true' ->
	      'true'
	  %% Line 1526
	  <[{'put_bits',_cor10,_cor11,U}|_cor12]> when 'true' ->
	      %% Line 1527
	      case U of
		%% Line 1528
		<[_cor13|['align']]> when 'true' ->
		    'true'
		%% Line 1529
		<[_cor14|[]]> when 'true' ->
		    'false'
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1531
	  <Imm0> when 'true' ->
	      %% Line 1532
	      case apply 'split_off_nonbuilding'/1
		       (Imm0) of
		%% Line 1533
		<{[],_cor15}> when 'true' ->
		    'false'
		%% Line 1534
		<{[_cor16|_cor17],Imm}> when 'true' ->
		    apply 'is_beginning_aligned'/1
			(Imm)
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor5})
		  -| ['compiler_generated'] )
	      end
	end
'is_end_aligned'/1 =
    %% Line 1537
    fun (_cor0) ->
	%% Line 1538
	case apply 'enc_opt_al_1'/2
		 (_cor0, 'unknown') of
	  %% Line 1539
	  <{_cor3,0}> when 'true' ->
	      'true'
	  %% Line 1540
	  <{_cor4,_cor5}> when 'true' ->
	      'false'
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor1})
	    -| ['compiler_generated'] )
	end
'lb_is_nonzero'/1 =
    %% Line 1543
    fun (_cor0) ->
	case _cor0 of
	  <[{'sub',_cor2,_cor3,_cor4}|_cor5]> when 'true' ->
	      'true'
	  %% Line 1544
	  <_cor6> when 'true' ->
	      'false'
	end
'combine_imms'/2 =
    %% Line 1550
    fun (_cor1,_cor0) ->
	%% Line 1551
	case apply 'split_off_nonbuilding'/1
		 (_cor1) of
	  <{Prefix0,ImmA}> when 'true' ->
	      %% Line 1552
	      case apply 'split_off_nonbuilding'/1
		       (_cor0) of
		<{Prefix1,ImmB}> when 'true' ->
		    let <Prefix> =
			%% Line 1553
			call 'erlang':'++'
			    (Prefix0, Prefix1)
		    in  let <_cor5> =
			    %% Line 1554
			    call 'erlang':'++'
				(ImmA, ImmB)
			in  let <Combined> =
				%% Line 1554
				apply 'do_combine'/2
				    (_cor5, 3.00000000000000000000e+00)
			    in  %% Line 1555
				call 'erlang':'++'
				    (Prefix, Combined)
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'do_combine'/2 =
    %% Line 1557
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[Imm = {'error',_cor15}|_cor16],_X_Budget> when 'true' ->
	      %% Line 1558
	      [Imm|[]]
	  %% Line 1559
	  <[{'cond',Cs0}|T],Budget0> when 'true' ->
	      let <_cor2> =
		  %% Line 1560
		  apply 'num_clauses'/2
		      (Cs0, 0)
	      in  let <Budget> =
		      %% Line 1560
		      apply 'debit'/2
			  (Budget0, _cor2)
		  in  let <_cor10> =
			  %% Line 1561
			  ( letrec
				'lc$^0'/1 =
				    fun (_cor6) ->
					case _cor6 of
					  <[[C|Act]|_cor5]> when 'true' ->
					      let <_cor7> =
						  call 'erlang':'++'
						      (Act, T)
					      in  let <_cor8> =
						      apply 'do_combine'/2
							  (_cor7, Budget)
						  in  let <_cor9> =
							  apply 'lc$^0'/1
							      (_cor5)
						      in  ( [[C|_cor8]|_cor9]
							    -| ['compiler_generated'] )
					  ( <[_cor4|_cor5]> when 'true' ->
						apply 'lc$^0'/1
						    (_cor5)
					    -| ['compiler_generated'] )
					  <[]> when 'true' ->
					      []
					  ( <_cor6> when 'true' ->
						( primop 'match_fail'
						      ({'function_clause',_cor6})
						  -| [{'function_name',{'lc$^0',1}}] )
					    -| ['compiler_generated'] )
					end
			    in  apply 'lc$^0'/1
				    (Cs0)
			    -| ['list_comprehension'] )
		      in  %% Line 1562
			  [{'cond',_cor10}|[]]
	  %% Line 1563
	  <L = [{'put_bits',V,_cor17,_cor18}|_cor19],Budget>
	      when call 'erlang':'is_integer'
		    (V) ->
	      %% Line 1564
	      case apply 'collect_put_bits'/1
		       (L) of
		<{Pb,T}> when 'true' ->
		    %% Line 1565
		    apply 'do_combine_put_bits'/3
			(Pb, T, Budget)
		( <_cor12> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor12})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1566
	  <_cor20,_cor21> when 'true' ->
	      %% Line 1567
	      call 'erlang':'throw'
		  ('impossible')
	end
'do_combine_put_bits'/3 =
    %% Line 1569
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Pb,[],_X_Budget> when 'true' ->
	      %% Line 1570
	      Pb
	  %% Line 1571
	  <Pb,[{'cond',Cs0}|T],Budget> when 'true' ->
	      let <_cor11> =
		  %% Line 1572
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor5) ->
				case _cor5 of
				  <[%% Line 1577
				    [C|Act]|_cor4]> when 'true' ->
				      let <_cor9> =
					  case Act of
					    %% Line 1573
					    <[{'error',_cor16}|[]]> when 'true' ->
						%% Line 1574
						[C|Act]
					    %% Line 1575
					    <_cor17> when 'true' ->
						let <_cor6> =
						    %% Line 1576
						    call 'erlang':'++'
							(Pb, Act)
						in  let <_cor7> =
							%% Line 1576
							apply 'do_combine'/2
							    (_cor6, Budget)
						    in  %% Line 1576
							[C|_cor7]
					  end
				      in  let <_cor10> =
					      %% Line 1577
					      apply 'lc$^0'/1
						  (_cor4)
					  in  ( [_cor9|_cor10]
						-| ['compiler_generated'] )
				  ( <[_cor3|_cor4]> when 'true' ->
					%% Line 1577
					apply 'lc$^0'/1
					    (_cor4)
				    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor5> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor5})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (%% Line 1577
			     Cs0)
		    -| ['list_comprehension'] )
	      in  %% Line 1578
		  apply 'do_combine'/2
		      ([{'cond',_cor11}|T], Budget)
	  %% Line 1579
	  <_cor18,_cor19,_cor20> when 'true' ->
	      %% Line 1580
	      call 'erlang':'throw'
		  ('impossible')
	end
'debit'/2 =
    %% Line 1582
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 1583
	    apply 'log2'/1
		(_cor0)
	in  %% Line 1583
	    case call 'erlang':'-'
		     (_cor1, _cor2) of
	      %% Line 1584
	      <Budget>
		  when call 'erlang':'>'
			(Budget,
			 0.00000000000000000000e+00) ->
		  %% Line 1585
		  Budget
	      %% Line 1586
	      <_cor6> when 'true' ->
		  %% Line 1587
		  call 'erlang':'throw'
		      ('impossible')
	    end
'num_clauses'/2 =
    %% Line 1590
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[[_cor5|[{'error',_cor6}|[]]]|T],N> when 'true' ->
	      %% Line 1591
	      apply 'num_clauses'/2
		  (T, N)
	  %% Line 1592
	  <[_cor7|T],N> when 'true' ->
	      let <_cor2> =
		  %% Line 1593
		  call 'erlang':'+'
		      (N, 1)
	      in  %% Line 1593
		  apply 'num_clauses'/2
		      (T, _cor2)
	  %% Line 1594
	  <[],N> when 'true' ->
	      N
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'num_clauses',2}}] )
	    -| ['compiler_generated'] )
	end
'log2'/1 =
    %% Line 1596
    fun (_cor0) ->
	let <_cor2> =
	    %% Line 1597
	    call 'math':'log'
		(_cor0)
	in  %% Line 1597
	    call 'erlang':'/'
		(_cor2, 6.93147180559945286227e-01)
'collect_put_bits'/1 =
    %% Line 1599
    fun (_cor0) ->
	let <_cor3> =
	    %% Line 1600
	    ( fun (_cor1) ->
		  case _cor1 of
		    <{'put_bits',V,_cor5,_cor6}>
			when call 'erlang':'is_integer'
			      (V) ->
			'true'
		    %% Line 1601
		    <_cor7> when 'true' ->
			'false'
		  end
	      -| [{'id',{0,0,'-collect_put_bits/1-fun-0-'}}] )
	in  %% Line 1600
	    call 'lists':'splitwith'
		(_cor3, _cor0)
'enc_cse'/1 =
    %% Line 1609
    fun (_cor0) ->
	case _cor0 of
	  <[H = {'call','erlang','element',Args,V}|T]> when 'true' ->
	      let <_cor1> =
		  %% Line 1610
		  apply 'enc_cse_1'/3
		      (T, Args, V)
	      in  %% Line 1610
		  [H|_cor1]
	  %% Line 1611
	  <Imm> when 'true' ->
	      Imm
	end
'enc_cse_1'/3 =
    %% Line 1613
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[{'call','erlang','element',Args,Dst}|T],_cor10,V>
	      when call 'erlang':'=:='
		    (_cor10,
		     Args) ->
	      let <_cor3> =
		  %% Line 1614
		  apply 'enc_cse_1'/3
		      (T, Args, V)
	      in  %% Line 1614
		  [{'set',V,Dst}|_cor3]
	  %% Line 1615
	  <[{'block',Bl}|T],Args,V> when 'true' ->
	      let <_cor4> =
		  %% Line 1616
		  apply 'enc_cse_1'/3
		      (Bl, Args, V)
	      in  let <_cor5> =
		      %% Line 1616
		      apply 'enc_cse_1'/3
			  (T, Args, V)
		  in  %% Line 1616
		      [{'block',_cor4}|_cor5]
	  %% Line 1617
	  <[H|T],Args,V> when 'true' ->
	      let <_cor6> =
		  %% Line 1618
		  apply 'enc_cse_1'/3
		      (T, Args, V)
	      in  %% Line 1618
		  [H|_cor6]
	  %% Line 1619
	  <[],_cor11,_cor12> when 'true' ->
	      []
	  ( <_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7})
		  -| [{'function_name',{'enc_cse_1',3}}] )
	    -| ['compiler_generated'] )
	end
'enc_pre_cg'/1 =
    %% Line 1626
    fun (_cor0) ->
	%% Line 1627
	apply 'enc_pre_cg_1'/3
	    (_cor0, 'outside_list', 'in_seq')
'enc_pre_cg_1'/3 =
    %% Line 1629
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],_X_StL,_X_StB> when 'true' ->
	      %% Line 1630
	      'nil'
	  %% Line 1631
	  <[H|[]],StL,StB> when 'true' ->
	      %% Line 1632
	      apply 'enc_pre_cg_2'/3
		  (H, StL, StB)
	  %% Line 1633
	  <[H0|T0],StL,StB> when 'true' ->
	      %% Line 1634
	      case apply 'is_nonbuilding'/1
		       (H0) of
		%% Line 1635
		<'true'> when 'true' ->
		    let <H> =
			%% Line 1636
			apply 'enc_pre_cg_nonbuilding'/2
			    (H0, StL)
		    in  let <_cor4> =
			    %% Line 1637
			    apply 'enc_pre_cg_1'/3
				(T0, StL, 'in_seq')
			in  let <Seq> = {%% Line 1637
				 'seq',%% Line 1637
				       H,_cor4}
			    in  %% Line 1638
				case StB of
				  %% Line 1639
				  <'outside_seq'> when 'true' ->
				      {'block',Seq}
				  %% Line 1640
				  <'in_seq'> when 'true' ->
				      Seq
				  ( <_cor6> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor6})
				    -| ['compiler_generated'] )
				end
		%% Line 1642
		<'false'> when 'true' ->
		    let <H> =
			%% Line 1643
			apply 'enc_pre_cg_2'/3
			    (H0, 'in_head', 'outside_seq')
		    in  let <T> =
			    %% Line 1644
			    apply 'enc_pre_cg_1'/3
				(T0, 'in_tail', 'outside_seq')
			in  %% Line 1645
			    apply 'enc_make_cons'/2
				(H, T)
		( <_cor9> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor9})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10})
		  -| [{'function_name',{'enc_pre_cg_1',3}}] )
	    -| ['compiler_generated'] )
	end
'enc_pre_cg_2'/3 =
    %% Line 1648
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'align',StL,_X_StB> when 'true' ->
	      %% Line 1649
	      case StL of
		%% Line 1650
		<'in_head'> when 'true' ->
		    'align'
		%% Line 1651
		<'in_tail'> when 'true' ->
		    {'cons','align','nil'}
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1653
	  <Imm = {'apply',_cor16,_cor17},_cor18,_cor19> when 'true' ->
	      %% Line 1654
	      Imm
	  %% Line 1655
	  <{'block',Bl0},StL,StB> when 'true' ->
	      %% Line 1656
	      apply 'enc_pre_cg_1'/3
		  (Bl0, StL, StB)
	  %% Line 1657
	  <Imm = {'call',_cor20,_cor21,_cor22},_cor23,_cor24> when 'true' ->
	      %% Line 1658
	      Imm
	  %% Line 1659
	  <Imm = {'call_gen',_cor25,_cor26,_cor27,_cor28,_cor29},_cor30,_cor31> when 'true' ->
	      %% Line 1660
	      Imm
	  %% Line 1661
	  <{'cond',Cs0},StL,_X_StB> when 'true' ->
	      let <_cor9> =
		  %% Line 1662
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor6) ->
				case _cor6 of
				  <[[C|Act]|_cor5]> when 'true' ->
				      let <_cor7> =
					  apply 'enc_pre_cg_1'/3
					      (Act, StL, 'outside_seq')
				      in  let <_cor8> =
					      apply 'lc$^0'/1
						  (_cor5)
					  in  ( [{C,_cor7}|_cor8]
						-| ['compiler_generated'] )
				  ( <[_cor4|_cor5]> when 'true' ->
					apply 'lc$^0'/1
					    (_cor5)
				    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor6> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor6})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (Cs0)
		    -| ['list_comprehension'] )
	      in  %% Line 1663
		  {'cond',_cor9}
	  %% Line 1664
	  <E = {'error',_cor32},_cor33,_cor34> when 'true' ->
	      %% Line 1665
	      E
	  %% Line 1666
	  <{'lc',B0,V,L},StL,_X_StB> when 'true' ->
	      let <B> =
		  %% Line 1667
		  apply 'enc_pre_cg_1'/3
		      (B0, StL, 'outside_seq')
	      in  %% Line 1668
		  {'lc',B,V,L}
	  %% Line 1669
	  <{'put_bits',V,8,[1]},StL,_X_StB> when 'true' ->
	      %% Line 1670
	      case StL of
		%% Line 1671
		<'in_head'> when 'true' ->
		    {'integer',V}
		%% Line 1672
		<'in_tail'> when 'true' ->
		    {'cons',{'integer',V},'nil'}
		%% Line 1673
		<'outside_list'> when 'true' ->
		    {'cons',{'integer',V},'nil'}
		( <_cor12> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor12})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1675
	  <{'put_bits',V,'binary',_cor35},_X_StL,_X_StB> when 'true' ->
	      %% Line 1676
	      V
	  %% Line 1677
	  <PutBits = {'put_bits',_cor36,_cor37,[_cor38|[]]},_X_StL,_X_StB> when 'true' ->
	      %% Line 1678
	      {'binary',[PutBits|[]]}
	  %% Line 1679
	  <Imm = {'var',_cor39},_cor40,_cor41> when 'true' ->
	      Imm
	  ( <_cor15,_cor14,_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14,_cor13})
		  -| [{'function_name',{'enc_pre_cg_2',3}}] )
	    -| ['compiler_generated'] )
	end
'enc_make_cons'/2 =
    %% Line 1681
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'binary',H},{'binary',T}> when 'true' ->
	      let <_cor2> =
		  %% Line 1682
		  call 'erlang':'++'
		      (H, T)
	      in  %% Line 1682
		  {'binary',_cor2}
	  %% Line 1683
	  <{'binary',H0},{'cons',{'binary',H1},T}> when 'true' ->
	      let <_cor3> =
		  %% Line 1684
		  call 'erlang':'++'
		      (H0, H1)
	      in  %% Line 1684
		  apply 'enc_make_cons'/2
		      ({'binary',_cor3}, T)
	  %% Line 1685
	  <{'binary',H},{'cons',{'integer',Int},T}> when 'true' ->
	      let <_cor4> =
		  %% Line 1686
		  call 'erlang':'++'
		      (H, [{'put_bits',Int,8,[1]}|[]])
	      in  %% Line 1686
		  apply 'enc_make_cons'/2
		      ({'binary',_cor4}, T)
	  %% Line 1687
	  <{'integer',Int},{'binary',T}> when 'true' ->
	      %% Line 1688
	      {'binary',[{'put_bits',Int,8,[1]}|T]}
	  %% Line 1689
	  <{'integer',Int},{'cons',{'binary',H},T}> when 'true' ->
	      %% Line 1690
	      apply 'enc_make_cons'/2
		  ({'binary',[{'put_bits',Int,8,[1]}|H]}, T)
	  %% Line 1691
	  <H,T> when 'true' ->
	      %% Line 1692
	      {'cons',H,T}
	end
'enc_pre_cg_nonbuilding'/2 =
    %% Line 1694
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'lc',B0,Var,List,Dst},StL> when 'true' ->
	      let <B> =
		  %% Line 1695
		  apply 'enc_pre_cg_1'/3
		      (B0, StL, 'outside_seq')
	      in  %% Line 1696
		  {'lc',B,Var,List,Dst}
	  %% Line 1697
	  <{'list',List0,Dst},_X_StL> when 'true' ->
	      let <List> =
		  %% Line 1698
		  apply 'enc_pre_cg_1'/3
		      (List0, 'outside_list', 'outside_seq')
	      in  %% Line 1699
		  {'list',List,Dst}
	  %% Line 1700
	  <{'try',Try0,{P,Succ0},Else0,Dst},StL> when 'true' ->
	      let <Try> =
		  %% Line 1701
		  apply 'enc_pre_cg_1'/3
		      (Try0, StL, 'outside_seq')
	      in  let <Succ> =
		      %% Line 1702
		      apply 'enc_pre_cg_1'/3
			  (Succ0, StL, 'outside_seq')
		  in  let <Else> =
			  %% Line 1703
			  apply 'enc_pre_cg_1'/3
			      (Else0, StL, 'outside_seq')
		      in  %% Line 1704
			  {'try',Try,{P,Succ},Else,Dst}
	  %% Line 1705
	  <Imm,_cor9> when 'true' ->
	      Imm
	end
'enc_opt'/1 =
    %% Line 1736
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 1737
	    call 'gb_trees':'empty'
		()
	in  %% Line 1737
	    case apply 'enc_opt'/2
		     (_cor0, {'ost',_cor1,'undefined'}) of
	      <{Imm,_cor4}> when 'true' ->
		  %% Line 1738
		  Imm
	      ( <_cor2> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor2})
		-| ['compiler_generated'] )
	    end
'enc_opt'/2 =
    %% Line 1740
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'align',St> when 'true' ->
	      let <_rec6> =
		  %% Line 1741
		  apply 't_align'/1
		      ({0,7})
	      in  %% Line 1741
		  case St of
		    <{'ost',_cor227,_cor228}> when 'true' ->
			let <_cor5> =
			    call 'erlang':'setelement'
				(3, St, _rec6)
			in  {'align',_cor5}
		    ( <_cor229> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','ost'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 1742
	  <{'apply',What,As},St> when 'true' ->
	      let <_cor10> =
		  %% Line 1743
		  apply 'subst_list'/2
		      (As, St)
	      in  let <_rec8> =
		      %% Line 1743
		      apply 't_any'/0
			  ()
		  in  %% Line 1743
		      case St of
			<{'ost',_cor230,_cor231}> when 'true' ->
			    let <_cor9> =
				call 'erlang':'setelement'
				    (3, St, _rec8)
			    in  {{'apply',What,_cor10},_cor9}
			( <_cor232> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','ost'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
	  %% Line 1744
	  <Imm = {'assign',_cor233,_cor234},St> when 'true' ->
	      %% Line 1745
	      {Imm,St}
	  %% Line 1746
	  <{'binary',PutBits0},St> when 'true' ->
	      let <_cor16> =
		  %% Line 1747
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor13) ->
				case _cor13 of
				  <[%% Line 1748
				    {'put_bits',V,Sz,F}|_cor12]> when 'true' ->
				      let <_cor14> =
					  apply 'subst'/2
					      (V, St)
				      in  let <_cor15> =
					      %% Line 1748
					      apply 'lc$^0'/1
						  (_cor12)
					  in  ( [{'put_bits',_cor14,Sz,F}|_cor15]
						-| ['compiler_generated'] )
				  ( <[_cor11|_cor12]> when 'true' ->
					%% Line 1748
					apply 'lc$^0'/1
					    (_cor12)
				    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor13> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor13})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (%% Line 1748
			     PutBits0)
		    -| ['list_comprehension'] )
	      in  let <_cor22> =
		      %% Line 1749
		      ( fun (_cor19,_cor18) ->
			    case <_cor19,_cor18> of
			      <{'put_bits',_cor235,Bits,_cor236},Sum> when 'true' ->
				  %% Line 1750
				  call 'erlang':'+'
				      (Sum, Bits)
			      ( <_cor21,_cor20> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_cor21,_cor20})
				      -| [{'function_name',{'-enc_opt/2-fun-0-',2}}] )
				-| ['compiler_generated'] )
			    end
			-| [{'id',{0,0,'-enc_opt/2-fun-0-'}}] )
		  in  let <NumBits> =
			  %% Line 1749
			  call 'lists':'foldl'
			      (_cor22, %% Line 1751
				       0, _cor16)
		      in  let <_rec10> =
			      %% Line 1752
			      apply 't_bitstring'/1
				  (NumBits)
			  in  %% Line 1752
			      case St of
				<{'ost',_cor237,_cor238}> when 'true' ->
				    let <_cor27> =
					call 'erlang':'setelement'
					    (3, St, _rec10)
				    in  {{'binary',_cor16},_cor27}
				( <_cor239> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {'badrecord','ost'}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
	  %% Line 1753
	  <{'block',Bl0},St0> when 'true' ->
	      %% Line 1754
	      case apply 'enc_opt'/2
		       (Bl0, St0) of
		<{Bl,St}> when 'true' ->
		    %% Line 1755
		    {{'block',Bl},St}
		( <_cor28> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor28})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1756
	  <Imm = {'call','binary','encode_unsigned',[Int|[]],Bin},St0> when 'true' ->
	      let <Type> =
		  %% Line 1757
		  apply 'get_type'/2
		      (Int, St0)
	      in  let <_cor37> =
		      %% Line 1758
		      case apply 't_range'/1
			       (Type) of
			%% Line 1759
			<'any'> when 'true' ->
			    let <_cor30> =
				%% Line 1760
				apply 't_binary'/0
				    ()
			    in  %% Line 1760
				apply 'set_type'/3
				    (Bin, _cor30, St0)
			%% Line 1761
			<{Lb0,Ub0}> when 'true' ->
			    let <_cor31> =
				%% Line 1762
				call 'binary':'encode_unsigned'
				    (Lb0)
			    in  let <Lb> =
				    %% Line 1762
				    call 'erlang':'bit_size'
					(_cor31)
				in  let <_cor33> =
					%% Line 1763
					call 'binary':'encode_unsigned'
					    (Ub0)
				    in  let <Ub> =
					    %% Line 1763
					    call 'erlang':'bit_size'
						(_cor33)
					in  let <_cor35> =
						%% Line 1764
						apply 't_binary'/1
						    ({Lb,Ub})
					    in  %% Line 1764
						apply 'set_type'/3
						    (Bin, _cor35, St0)
			( <_cor36> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor36})
			  -| ['compiler_generated'] )
		      end
		  in  %% Line 1766
		      {Imm,_cor37}
	  %% Line 1767
	  <Imm0 = {'call','erlang','bit_size',[Bin|[]],Dst},St0> when 'true' ->
	      let <Type> =
		  %% Line 1768
		  apply 'get_type'/2
		      (Bin, St0)
	      in  %% Line 1769
		  case apply 't_range'/1
			   (Type) of
		    %% Line 1770
		    <'any'> when 'true' ->
			let <_cor40> =
			    %% Line 1771
			    apply 't_bitstring'/0
				()
			in  let <St1> =
				%% Line 1771
				apply 'set_type'/3
				    (Bin, _cor40, St0)
			    in  let <_cor46> =
				    %% Line 1773
				    ( fun (_cor43,_cor42) ->
					  %% Line 1774
					  apply 'bit_size_propagate'/3
					      (Bin, _cor43, _cor42)
				      -| [{'id',{0,0,'-enc_opt/2-fun-1-'}}] )
				in  let <St> =
					%% Line 1772
					apply 'propagate'/3
					    (Dst, _cor46, %% Line 1775
							  St1)
				    in  %% Line 1776
					{Imm0,St}
		    %% Line 1777
		    <Range = {Lb,Ub}> when 'true' ->
			let <_cor48> =
			    %% Line 1778
			    apply 't_integer'/1
				(Range)
			in  let <St> =
				%% Line 1778
				apply 'set_type'/3
				    (Dst, _cor48, St0)
			    in  let <_cor51> =
				    %% Line 1779
				    case Lb of
				      %% Line 1780
				      <_cor240>
					  when call 'erlang':'=:='
						(Lb,
						 Ub) ->
					  'none'
				      %% Line 1781
				      <_cor241> when 'true' ->
					  Imm0
				    end
				in  %% Line 1783
				    {_cor51,St}
		    ( <_cor53> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor53})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1785
	  <Imm0 = {'call','erlang','byte_size',[Bin|[]],Dst},St0> when 'true' ->
	      let <Type> =
		  %% Line 1786
		  apply 'get_type'/2
		      (Bin, St0)
	      in  %% Line 1787
		  case apply 't_range'/1
			   (Type) of
		    %% Line 1788
		    <'any'> when 'true' ->
			let <_cor55> =
			    %% Line 1789
			    apply 't_binary'/0
				()
			in  let <St1> =
				%% Line 1789
				apply 'set_type'/3
				    (Bin, _cor55, St0)
			    in  let <_cor61> =
				    %% Line 1791
				    ( fun (_cor58,_cor57) ->
					  %% Line 1792
					  apply 'byte_size_propagate'/3
					      (Bin, _cor58, _cor57)
				      -| [{'id',{0,0,'-enc_opt/2-fun-2-'}}] )
				in  let <St> =
					%% Line 1790
					apply 'propagate'/3
					    (Dst, _cor61, %% Line 1793
							  St1)
				    in  %% Line 1794
					{Imm0,St}
		    %% Line 1795
		    <{Lb0,Ub0}> when 'true' ->
			let <_cor63> =
			    %% Line 1796
			    call 'erlang':'+'
				(Lb0, 7)
			in  let <Lb> =
				%% Line 1796
				call 'erlang':'div'
				    (_cor63, 8)
			    in  let <_cor65> =
				    %% Line 1797
				    call 'erlang':'+'
					(Ub0, 7)
				in  let <Ub> =
					%% Line 1797
					call 'erlang':'div'
					    (_cor65, 8)
				    in  let <_cor67> =
					    %% Line 1798
					    apply 't_integer'/1
						({Lb,Ub})
					in  let <St> =
						%% Line 1798
						apply 'set_type'/3
						    (Dst, _cor67, St0)
					    in  let <_cor70> =
						    %% Line 1799
						    case Lb of
						      %% Line 1800
						      <_cor242>
							  when call 'erlang':'=:='
								(Lb,
								 Ub) ->
							  'none'
						      %% Line 1801
						      <_cor243> when 'true' ->
							  Imm0
						    end
						in  %% Line 1803
						    {_cor70,St}
		    ( <_cor72> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor72})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1805
	  <Imm = {'call','erlang','iolist_to_binary',_cor244},St> when 'true' ->
	      let <_rec12> =
		  %% Line 1806
		  apply 't_binary'/0
		      ()
	      in  %% Line 1806
		  case St of
		    <{'ost',_cor245,_cor246}> when 'true' ->
			let <_cor76> =
			    call 'erlang':'setelement'
				(3, St, _rec12)
			in  {Imm,_cor76}
		    ( <_cor247> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','ost'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 1807
	  <Imm0 = {'call','erlang','length',[List|[]],Dst},St0> when 'true' ->
	      let <_cor81> =
		  %% Line 1809
		  ( fun (_cor78,_cor77) ->
			%% Line 1810
			apply 'length_propagate'/3
			    (List, _cor78, _cor77)
		    -| [{'id',{0,0,'-enc_opt/2-fun-3-'}}] )
	      in  let <St1> =
		      %% Line 1808
		      apply 'propagate'/3
			  (Dst, _cor81, %% Line 1811
					St0)
		  in  %% Line 1812
		      {Imm0,St1}
	  %% Line 1813
	  <{'call','per','complete',[Data|[]],Dst},St0> when 'true' ->
	      let <Type> =
		  %% Line 1814
		  apply 'get_type'/2
		      (Data, St0)
	      in  let <_cor84> =
		      %% Line 1815
		      apply 't_range'/1
			  (Type)
		  in  let <_cor85> =
			  %% Line 1815
			  apply 't_binary'/1
			      (_cor84)
		      in  let <St> =
			      %% Line 1815
			      apply 'set_type'/3
				  (Dst, _cor85, St0)
			  in  %% Line 1816
			      case apply 't_type'/1
				       (Type) of
				%% Line 1817
				<'binary'> when 'true' ->
				    %% Line 1818
				    {{'set',Data,Dst},St}
				%% Line 1819
				<'bitlist'> when 'true' ->
				    %% Line 1826
				    {{'call','erlang','list_to_bitstring',[Data|[]],Dst},St}
				%% Line 1827
				<'iolist'> when 'true' ->
				    %% Line 1828
				    {{'call','erlang','iolist_to_binary',[Data|[]],Dst},St}
				%% Line 1829
				<'nil'> when 'true' ->
				    let <Imm> =
					%% Line 1830
					{'list',{'binary',[{'put_bits',0,8,[1]}]},Dst}
				    in  %% Line 1831
					apply 'enc_opt'/2
					    (Imm, St0)
				%% Line 1832
				<_cor248> when 'true' ->
				    %% Line 1833
				    {{'call','per','complete',[Data|[]],Dst},St}
			      end
	  %% Line 1835
	  <{'call','uper','complete',[Data|[]],Dst},St0> when 'true' ->
	      let <Type> =
		  %% Line 1836
		  apply 'get_type'/2
		      (Data, St0)
	      in  let <_cor90> =
		      %% Line 1837
		      apply 't_range'/1
			  (Type)
		  in  let <_cor91> =
			  %% Line 1837
			  apply 't_binary'/1
			      (_cor90)
		      in  let <St> =
			      %% Line 1837
			      apply 'set_type'/3
				  (Dst, _cor91, St0)
			  in  %% Line 1838
			      case apply 't_type'/1
				       (Type) of
				%% Line 1839
				<'binary'> when 'true' ->
				    %% Line 1840
				    {{'set',Data,Dst},St0}
				%% Line 1841
				<'iolist'> when 'true' ->
				    %% Line 1842
				    {{'call','erlang','iolist_to_binary',[Data|[]],Dst},St}
				%% Line 1843
				<'nil'> when 'true' ->
				    let <Imm> =
					%% Line 1844
					{'list',{'binary',[{'put_bits',0,8,[1]}]},Dst}
				    in  %% Line 1845
					apply 'enc_opt'/2
					    (Imm, St0)
				%% Line 1846
				<_cor249> when 'true' ->
				    %% Line 1848
				    {{'call','uper','complete',[Data|[]],Dst},St}
			      end
	  %% Line 1850
	  <Imm = {'call','per_common','encode_chars',[List|[NumBits|_cor250]],Dst},St0> when 'true' ->
	      let <_cor95> =
		  %% Line 1853
		  apply 't_bitstring'/0
		      ()
	      in  let <St1> =
		      %% Line 1853
		      apply 'set_type'/3
			  (Dst, _cor95, St0)
		  in  let <_cor101> =
			  %% Line 1855
			  ( fun (_cor98,_cor97) ->
				%% Line 1856
				apply 'char_propagate'/4
				    (Dst, _cor98, NumBits, _cor97)
			    -| [{'id',{0,0,'-enc_opt/2-fun-4-'}}] )
		      in  let <St> =
			      %% Line 1854
			      apply 'propagate'/3
				  (List, _cor101, %% Line 1857
						  St1)
			  in  %% Line 1858
			      {Imm,St}
	  %% Line 1859
	  <Imm = {'call','per_common','encode_chars_16bit',[List|[]],Dst},St0> when 'true' ->
	      let <_cor103> =
		  %% Line 1860
		  apply 't_binary'/0
		      ()
	      in  let <St1> =
		      %% Line 1860
		      apply 'set_type'/3
			  (Dst, _cor103, St0)
		  in  let <_cor109> =
			  %% Line 1862
			  ( fun (_cor106,_cor105) ->
				%% Line 1863
				apply 'char_propagate'/4
				    (Dst, _cor106, 16, _cor105)
			    -| [{'id',{0,0,'-enc_opt/2-fun-5-'}}] )
		      in  let <St> =
			      %% Line 1861
			      apply 'propagate'/3
				  (List, _cor109, %% Line 1864
						  St1)
			  in  %% Line 1865
			      {Imm,St}
	  %% Line 1866
	  <Imm = {'call','per_common','encode_big_chars',[List|[]],Dst},St0> when 'true' ->
	      let <_cor111> =
		  %% Line 1867
		  apply 't_binary'/0
		      ()
	      in  let <St1> =
		      %% Line 1867
		      apply 'set_type'/3
			  (Dst, _cor111, St0)
		  in  let <_cor117> =
			  %% Line 1869
			  ( fun (_cor114,_cor113) ->
				%% Line 1870
				apply 'char_propagate'/4
				    (Dst, _cor114, 32, _cor113)
			    -| [{'id',{0,0,'-enc_opt/2-fun-6-'}}] )
		      in  let <St> =
			      %% Line 1868
			      apply 'propagate'/3
				  (List, _cor117, %% Line 1871
						  St1)
			  in  %% Line 1872
			      {Imm,St}
	  %% Line 1873
	  <Imm = {'call','per_common','encode_fragmented',[_cor251|[Unit|[]]]},St> when 'true' ->
	      let <_cor120> =
		  %% Line 1874
		  case call 'erlang':'rem'
			   (Unit, 8) of
		    %% Line 1875
		    <0> when 'true' ->
			apply 't_iolist'/0
			    ()
		    %% Line 1876
		    <_cor252> when 'true' ->
			apply 't_bitlist'/0
			    ()
		  end
	      in  %% Line 1878
		  case St of
		    <{'ost',_cor253,_cor254}> when 'true' ->
			let <_cor124> =
			    call 'erlang':'setelement'
				(3, St, _cor120)
			in  {Imm,_cor124}
		    ( <_cor255> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','ost'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 1879
	  <Imm = {'call','per_common','encode_unconstrained_number',_cor256},St> when 'true' ->
	      let <_rec15> =
		  %% Line 1880
		  apply 't_iolist'/0
		      ()
	      in  %% Line 1880
		  case St of
		    <{'ost',_cor257,_cor258}> when 'true' ->
			let <_cor128> =
			    call 'erlang':'setelement'
				(3, St, _rec15)
			in  {Imm,_cor128}
		    ( <_cor259> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','ost'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 1881
	  <Imm = {'call','per_common','bitstring_from_positions',_cor260},St> when 'true' ->
	      let <_rec17> =
		  %% Line 1882
		  apply 't_bitstring'/0
		      ()
	      in  %% Line 1882
		  case St of
		    <{'ost',_cor261,_cor262}> when 'true' ->
			let <_cor132> =
			    call 'erlang':'setelement'
				(3, St, _rec17)
			in  {Imm,_cor132}
		    ( <_cor263> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','ost'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 1883
	  <Imm = {'call','per_common','to_named_bitstring',_cor264},St> when 'true' ->
	      let <_rec19> =
		  %% Line 1884
		  apply 't_bitstring'/0
		      ()
	      in  %% Line 1884
		  case St of
		    <{'ost',_cor265,_cor266}> when 'true' ->
			let <_cor136> =
			    call 'erlang':'setelement'
				(3, St, _rec19)
			in  {Imm,_cor136}
		    ( <_cor267> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','ost'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 1885
	  <Imm = {'call',_cor268,_cor269,_cor270},St> when 'true' ->
	      let <_rec21> =
		  %% Line 1886
		  apply 't_any'/0
		      ()
	      in  %% Line 1886
		  case St of
		    <{'ost',_cor271,_cor272}> when 'true' ->
			let <_cor140> =
			    call 'erlang':'setelement'
				(3, St, _rec21)
			in  {Imm,_cor140}
		    ( <_cor273> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','ost'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 1887
	  <Imm = {'call',_cor274,_cor275,_cor276,_cor277},St> when 'true' ->
	      %% Line 1888
	      case St of
		<{'ost',_cor278,_cor279}> when 'true' ->
		    let <_cor143> =
			call 'erlang':'setelement'
			    (3, St, 'undefined')
		    in  {Imm,_cor143}
		( <_cor280> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','ost'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 1889
	  <{'call_gen',N,K,F,L,As},St> when 'true' ->
	      let <_cor148> =
		  %% Line 1890
		  apply 'subst'/2
		      (As, St)
	      in  let <_rec24> =
		      %% Line 1890
		      apply 't_any'/0
			  ()
		  in  %% Line 1890
		      case St of
			<{'ost',_cor281,_cor282}> when 'true' ->
			    let <_cor147> =
				call 'erlang':'setelement'
				    (3, St, _rec24)
			    in  {{'call_gen',N,K,F,L,_cor148},_cor147}
			( <_cor283> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','ost'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
	  %% Line 1891
	  <{'cond',Cs0},St0> when 'true' ->
	      %% Line 1892
	      case apply 'enc_opt_cs'/2
		       (Cs0, St0) of
		%% Line 1893
		<[{'_',Imm,Type}|[]]> when 'true' ->
		    %% Line 1894
		    case St0 of
		      <{'ost',_cor284,_cor285}> when 'true' ->
			  let <_cor151> =
			      call 'erlang':'setelement'
				  (3, St0, Type)
			  in  {Imm,_cor151}
		      ( <_cor286> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','ost'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		%% Line 1895
		<[{Cond,Imm,Type0}|Cs1]> when 'true' ->
		    %% Line 1896
		    case apply 'enc_opt_cond_1'/3
			     (Cs1, Type0, [{Cond,Imm}|[]]) of
		      <{Cs,Type}> when 'true' ->
			  %% Line 1897
			  case St0 of
			    <{'ost',_cor287,_cor288}> when 'true' ->
				let <_cor155> =
				    call 'erlang':'setelement'
					(3, St0, Type)
				in  {{'cond',Cs},_cor155}
			    ( <_cor289> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','ost'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
		      ( <_cor152> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor152})
			-| ['compiler_generated'] )
		    end
		( <_cor156> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor156})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1899
	  <{'cons',H0,T0},St0> when 'true' ->
	      %% Line 1900
	      case apply 'enc_opt'/2
		       (H0, St0) of
		<{H,St1 = {'ost',_cor290,TypeH}}> when 'true' ->
		    %% Line 1901
		    case apply 'enc_opt'/2
			     (T0, St1) of
		      <{T,St = {'ost',_cor291,TypeT}}> when 'true' ->
			  let <_rec28> =
			      %% Line 1902
			      apply 't_cons'/2
				  (TypeH, TypeT)
			  in  let <_cor162> =
				  %% Line 1902
				  call 'erlang':'setelement'
				      (3, St, _rec28)
			      in  %% Line 1902
				  {{'cons',H,T},_cor162}
		      ( <_cor158> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor158})
			-| ['compiler_generated'] )
		    end
		( <_cor157> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor157})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1903
	  <Imm = {'error',_cor295},St> when 'true' ->
	      let <_rec30> =
		  %% Line 1904
		  apply 't_any'/0
		      ()
	      in  %% Line 1904
		  case St of
		    <{'ost',_cor296,_cor297}> when 'true' ->
			let <_cor166> =
			    call 'erlang':'setelement'
				(3, St, _rec30)
			in  {Imm,_cor166}
		    ( <_cor298> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','ost'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 1905
	  <{'integer',V},St> when 'true' ->
	      let <_cor171> =
		  %% Line 1906
		  apply 'subst'/2
		      (V, St)
	      in  let <_rec32> =
		      %% Line 1906
		      apply 't_integer'/0
			  ()
		  in  %% Line 1906
		      case St of
			<{'ost',_cor299,_cor300}> when 'true' ->
			    let <_cor170> =
				call 'erlang':'setelement'
				    (3, St, _rec32)
			    in  {{'integer',_cor171},_cor170}
			( <_cor301> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','ost'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
	  %% Line 1907
	  <{'lc',E0,B,C},St> when 'true' ->
	      %% Line 1908
	      case apply 'enc_opt'/2
		       (E0, St) of
		<{E,_cor302}> when 'true' ->
		    let <_rec34> =
			%% Line 1909
			apply 't_any'/0
			    ()
		    in  %% Line 1909
			case St of
			  <{'ost',_cor303,_cor304}> when 'true' ->
			      let <_cor176> =
				  call 'erlang':'setelement'
				      (3, St, _rec34)
			      in  {{'lc',E,B,C},_cor176}
			  ( <_cor305> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','ost'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
		( <_cor172> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor172})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1910
	  <{'lc',E0,B,C,Dst},St> when 'true' ->
	      %% Line 1911
	      case apply 'enc_opt'/2
		       (E0, St) of
		<{E,_cor306}> when 'true' ->
		    %% Line 1912
		    case St of
		      <{'ost',_cor307,_cor308}> when 'true' ->
			  let <_cor180> =
			      call 'erlang':'setelement'
				  (3, St, 'undefined')
			  in  {{'lc',E,B,C,Dst},_cor180}
		      ( <_cor309> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','ost'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		( <_cor177> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor177})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1913
	  <{'list',Imm0,Dst},St0> when 'true' ->
	      %% Line 1914
	      case apply 'enc_opt'/2
		       (Imm0, St0) of
		<{Imm,St1 = {'ost',_cor310,Type}}> when 'true' ->
		    let <St> =
			%% Line 1915
			apply 'set_type'/3
			    (Dst, Type, St1)
		    in  %% Line 1916
			case St of
			  <{'ost',_cor311,_cor312}> when 'true' ->
			      let <_cor185> =
				  call 'erlang':'setelement'
				      (3, St, 'undefined')
			      in  {{'list',Imm,Dst},_cor185}
			  ( <_cor313> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','ost'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
		( <_cor181> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor181})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1917
	  <'nil',St> when 'true' ->
	      let <_rec38> =
		  %% Line 1918
		  apply 't_nil'/0
		      ()
	      in  %% Line 1918
		  case St of
		    <{'ost',_cor314,_cor315}> when 'true' ->
			let <_cor189> =
			    call 'erlang':'setelement'
				(3, St, _rec38)
			in  {'nil',_cor189}
		    ( <_cor316> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','ost'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 1919
	  <{'seq',H0,T0},St0> when 'true' ->
	      %% Line 1920
	      case apply 'enc_opt'/2
		       (H0, St0) of
		<{H,St1}> when 'true' ->
		    %% Line 1921
		    case apply 'enc_opt'/2
			     (T0, St1) of
		      <{T,St}> when 'true' ->
			  %% Line 1922
			  case <H,T> of
			    %% Line 1923
			    <'none',_cor317> when 'true' ->
				%% Line 1924
				{T,St}
			    %% Line 1925
			    <{'list',Imm,Data},%% Line 1926
					       {'seq',{'call','per','complete',[_cor318|[]],_cor319},_cor320}>
				when call 'erlang':'=:='
				      (_cor318,
				       %% Line 1926
				       Data) ->
				let <_cor192> =
				    %% Line 1928
				    apply 'remove_trailing_align'/1
					(Imm)
				in  %% Line 1928
				    {{'seq',{'list',_cor192,Data},T},St}
			    %% Line 1929
			    <_cor321,_cor322> when 'true' ->
				%% Line 1930
				{{'seq',H,T},St}
			  end
		      ( <_cor191> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor191})
			-| ['compiler_generated'] )
		    end
		( <_cor190> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor190})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1932
	  <Imm = {'set',_cor323,_cor324},St> when 'true' ->
	      %% Line 1933
	      case St of
		<{'ost',_cor325,_cor326}> when 'true' ->
		    let <_cor196> =
			call 'erlang':'setelement'
			    (3, St, 'undefined')
		    in  {Imm,_cor196}
		( <_cor327> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','ost'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 1934
	  <{'sub',Src0,Int,Dst},St0> when 'true' ->
	      let <Src> =
		  %% Line 1935
		  apply 'subst'/2
		      (Src0, St0)
	      in  let <Type> =
		      %% Line 1936
		      apply 'get_type'/2
			  (Src, St0)
		  in  let <_cor209> =
			  %% Line 1937
			  case apply 't_range'/1
				   (Type) of
			    %% Line 1938
			    <'any'> when 'true' ->
				let <_cor204> =
				    %% Line 1940
				    ( fun (_cor201,_cor200) ->
					  let <_cor199> =
					      %% Line 1941
					      apply 't_add'/2
						  (_cor201, Int)
					  in  %% Line 1941
					      apply 'set_type'/3
						  (Src, _cor199, _cor200)
				      -| [{'id',{0,0,'-enc_opt/2-fun-7-'}}] )
				in  %% Line 1939
				    apply 'propagate'/3
					(Dst, _cor204, %% Line 1943
						       St0)
			    %% Line 1944
			    <{Lb,Ub}> when 'true' ->
				let <_cor206> =
				    %% Line 1945
				    call 'erlang':'-'
					(Lb, Int)
				in  let <_cor205> =
					%% Line 1945
					call 'erlang':'-'
					    (Ub, Int)
				    in  let <_cor207> =
					    %% Line 1945
					    apply 't_integer'/1
						({_cor206,_cor205})
					in  %% Line 1945
					    apply 'set_type'/3
						(Dst, _cor207, St0)
			    ( <_cor208> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor208})
			      -| ['compiler_generated'] )
			  end
		      in  %% Line 1947
			  case _cor209 of
			    <{'ost',_cor328,_cor329}> when 'true' ->
				let <_cor213> =
				    call 'erlang':'setelement'
					(3, _cor209, 'undefined')
				in  {{'sub',Src,Int,Dst},_cor213}
			    ( <_cor330> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','ost'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
	  %% Line 1948
	  <{'try',Try0,{P,Succ0},Else0,Dst},St0> when 'true' ->
	      %% Line 1949
	      case apply 'enc_opt'/2
		       (Try0, St0) of
		<{Try,_cor331}> when 'true' ->
		    %% Line 1950
		    case apply 'enc_opt'/2
			     (Succ0, St0) of
		      <{Succ,_cor332}> when 'true' ->
			  %% Line 1951
			  case apply 'enc_opt'/2
				   (Else0, St0) of
			    <{Else,_cor333}> when 'true' ->
				%% Line 1952
				case St0 of
				  <{'ost',_cor334,_cor335}> when 'true' ->
				      let <_cor219> =
					  call 'erlang':'setelement'
					      (3, St0, 'undefined')
				      in  {{'try',Try,{P,Succ},Else,Dst},_cor219}
				  ( <_cor336> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','ost'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
			    ( <_cor216> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor216})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor215> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor215})
			-| ['compiler_generated'] )
		    end
		( <_cor214> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor214})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1953
	  <Imm = {'var',_cor337},St> when 'true' ->
	      let <Type> =
		  %% Line 1954
		  apply 'get_type'/2
		      (Imm, St)
	      in  let <_cor224> =
		      %% Line 1955
		      apply 'subst'/2
			  (Imm, St)
		  in  %% Line 1955
		      case St of
			<{'ost',_cor338,_cor339}> when 'true' ->
			    let <_cor223> =
				call 'erlang':'setelement'
				    (3, St, Type)
			    in  {_cor224,_cor223}
			( <_cor340> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','ost'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
	  ( <_cor226,_cor225> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor226,_cor225})
		  -| [{'function_name',{'enc_opt',2}}] )
	    -| ['compiler_generated'] )
	end
'remove_trailing_align'/1 =
    %% Line 1957
    fun (_cor0) ->
	case _cor0 of
	  <{'block',Bl}> when 'true' ->
	      let <_cor1> =
		  %% Line 1958
		  apply 'remove_trailing_align'/1
		      (Bl)
	      in  %% Line 1958
		  {'block',_cor1}
	  %% Line 1959
	  <{'cons',H,{'cons','align','nil'}}> when 'true' ->
	      %% Line 1960
	      H
	  %% Line 1961
	  <{'seq',H,T}> when 'true' ->
	      let <_cor2> =
		  %% Line 1962
		  apply 'remove_trailing_align'/1
		      (T)
	      in  %% Line 1962
		  {'seq',H,_cor2}
	  %% Line 1963
	  <Imm> when 'true' ->
	      Imm
	end
'bit_size_propagate'/3 =
    %% Line 1965
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1966
	case apply 't_range'/1
		 (_cor1) of
	  %% Line 1967
	  <'any'> when 'true' ->
	      _cor0
	  %% Line 1969
	  <{Lb,Ub}> when 'true' ->
	      let <_cor3> =
		  %% Line 1970
		  apply 't_bitstring'/1
		      ({Lb,Ub})
	      in  %% Line 1970
		  apply 'set_type'/3
		      (_cor2, _cor3, _cor0)
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor4})
	    -| ['compiler_generated'] )
	end
'byte_size_propagate'/3 =
    %% Line 1973
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1974
	case apply 't_range'/1
		 (_cor1) of
	  %% Line 1975
	  <'any'> when 'true' ->
	      _cor0
	  %% Line 1977
	  <{Lb,Ub}> when 'true' ->
	      let <_cor4> =
		  %% Line 1978
		  call 'erlang':'*'
		      (Lb, 8)
	      in  let <_cor3> =
		      %% Line 1978
		      call 'erlang':'*'
			  (Ub, 8)
		  in  let <_cor5> =
			  %% Line 1978
			  apply 't_binary'/1
			      ({_cor4,_cor3})
		      in  %% Line 1978
			  apply 'set_type'/3
			      (_cor2, _cor5, _cor0)
	  ( <_cor6> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor6})
	    -| ['compiler_generated'] )
	end
'char_propagate'/4 =
    %% Line 1981
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1982
	case apply 't_range'/1
		 (_cor2) of
	  %% Line 1983
	  <'any'> when 'true' ->
	      _cor0
	  %% Line 1985
	  <{Sz,_cor19}>
	      when let <_cor20> =
		    call 'erlang':'=:='
			(_cor19, Sz)
		in  let <_cor21> =
			try
			    let <_cor4> =
				call 'erlang':'*'
				    (Sz, _cor1)
			    in  let <_cor5> =
				    call 'erlang':'rem'
					(_cor4, 8)
				in  call 'erlang':'=:='
					(_cor5, 0)
			of <Try> ->
			    Try
			catch <T,R> ->
			    'false'
		    in  call 'erlang':'and'
			    (_cor20, _cor21) ->
	      let <Bits> =
		  %% Line 1986
		  call 'erlang':'*'
		      (Sz, _cor1)
	      in  let <_cor7> =
		      %% Line 1987
		      apply 't_binary'/1
			  ({Bits,Bits})
		  in  %% Line 1987
		      apply 'set_type'/3
			  (_cor3, _cor7, _cor0)
	  %% Line 1988
	  <{Lb,Ub}> when 'true' ->
	      let <_cor9> =
		  %% Line 1989
		  call 'erlang':'*'
		      (Lb, _cor1)
	      in  let <_cor8> =
		      %% Line 1989
		      call 'erlang':'*'
			  (Ub, _cor1)
		  in  let <Range> = {_cor9,_cor8}
		      in  %% Line 1990
			  case call 'erlang':'rem'
				   (_cor1, 8) of
			    %% Line 1991
			    <0> when 'true' ->
				let <_cor11> =
				    %% Line 1992
				    apply 't_binary'/1
					(Range)
				in  %% Line 1992
				    apply 'set_type'/3
					(_cor3, _cor11, _cor0)
			    %% Line 1993
			    <_cor22> when 'true' ->
				let <_cor12> =
				    %% Line 1994
				    apply 't_bitstring'/1
					(Range)
				in  %% Line 1994
				    apply 'set_type'/3
					(_cor3, _cor12, _cor0)
			  end
	  ( <_cor14> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor14})
	    -| ['compiler_generated'] )
	end
'length_propagate'/3 =
    %% Line 1998
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 1999
	    apply 't_range'/1
		(_cor1)
	in  let <_cor4> =
		%% Line 1999
		apply 't_list'/1
		    (_cor3)
	    in  %% Line 1999
		apply 'set_type'/3
		    (_cor2, _cor4, _cor0)
'enc_opt_cond_1'/3 =
    %% Line 2001
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[{Cond,Imm = {'error',_cor8},_cor9}|T],St,Acc> when 'true' ->
	      %% Line 2002
	      apply 'enc_opt_cond_1'/3
		  (T, St, [{Cond,Imm}|Acc])
	  %% Line 2003
	  <[{Cond,Imm,Curr0}|T],Curr1,Acc> when 'true' ->
	      let <Curr> =
		  %% Line 2004
		  apply 't_join'/2
		      (Curr0, Curr1)
	      in  %% Line 2005
		  apply 'enc_opt_cond_1'/3
		      (T, Curr, [{Cond,Imm}|Acc])
	  %% Line 2006
	  <[],St,Acc> when 'true' ->
	      let <_cor4> =
		  %% Line 2007
		  call 'lists':'reverse'
		      (Acc)
	      in  %% Line 2007
		  {_cor4,St}
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'enc_opt_cond_1',3}}] )
	    -| ['compiler_generated'] )
	end
'enc_opt_cs'/2 =
    %% Line 2009
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{Cond,Imm0}|T],St0> when 'true' ->
	      %% Line 2010
	      case apply 'eo_eval_cond'/2
		       (Cond, St0) of
		%% Line 2011
		<'false'> when 'true' ->
		    %% Line 2012
		    apply 'enc_opt_cs'/2
			(T, St0)
		%% Line 2013
		<'true'> when 'true' ->
		    %% Line 2014
		    case apply 'enc_opt'/2
			     (Imm0, St0) of
		      <{Imm,{'ost',_cor9,Type}}> when 'true' ->
			  %% Line 2015
			  [{'_',Imm,Type}|[]]
		      ( <_cor2> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor2})
			-| ['compiler_generated'] )
		    end
		%% Line 2016
		<'maybe'> when 'true' ->
		    let <St> =
			%% Line 2017
			apply 'update_type_info'/2
			    (Cond, St0)
		    in  %% Line 2018
			case apply 'enc_opt'/2
				 (Imm0, St) of
			  <{Imm,{'ost',_cor10,Type}}> when 'true' ->
			      let <_cor5> =
				  %% Line 2019
				  apply 'enc_opt_cs'/2
				      (T, St0)
			      in  %% Line 2019
				  [{Cond,Imm,Type}|_cor5]
			  ( <_cor4> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor4})
			    -| ['compiler_generated'] )
			end
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor6})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2021
	  <[],_cor11> when 'true' ->
	      []
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'enc_opt_cs',2}}] )
	    -| ['compiler_generated'] )
	end
'eo_eval_cond'/2 =
    %% Line 2023
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'_',_cor6> when 'true' ->
	      %% Line 2024
	      'true'
	  %% Line 2025
	  <{Op,Var = {'var',_cor7},Val},St> when 'true' ->
	      let <Type> =
		  %% Line 2026
		  apply 'get_type'/2
		      (Var, St)
	      in  %% Line 2027
		  case apply 't_range'/1
			   (Type) of
		    %% Line 2028
		    <'any'> when 'true' ->
			'maybe'
		    %% Line 2029
		    <Range = {_cor8,_cor9}> when 'true' ->
			apply 'eval_cond_range'/3
			    (Op, Range, Val)
		    ( <_cor3> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor3})
		      -| ['compiler_generated'] )
		  end
	  %% Line 2031
	  <{_X_Op,{'expr',_cor10},_X_Val},_X_St> when 'true' ->
	      'maybe'
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'eo_eval_cond',2}}] )
	    -| ['compiler_generated'] )
	end
'eval_cond_range'/3 =
    %% Line 2033
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'lt',{Lb,Ub},Val> when 'true' ->
	      %% Line 2034
	      case <> of
		%% Line 2035
		<>
		    when call 'erlang':'<'
			  (Ub,
			   Val) ->
		    'true'
		%% Line 2036
		<>
		    when call 'erlang':'=<'
			  (Val,
			   Lb) ->
		    'false'
		%% Line 2037
		<> when 'true' ->
		    'maybe'
	      end
	  %% Line 2039
	  <_X_Op,_X_Range,_X_Val> when 'true' ->
	      'maybe'
	end
'update_type_info'/2 =
    %% Line 2041
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'ult',Var = {'var',_cor15},Val},St> when 'true' ->
	      let <_cor2> =
		  %% Line 2042
		  call 'erlang':'-'
		      (Val, 1)
	      in  let <Int> =
		      %% Line 2042
		      apply 't_integer'/1
			  ({0,_cor2})
		  in  let <_cor4> =
			  %% Line 2043
			  apply 'get_type'/2
			      (Var, St)
		      in  let <Type> =
			      %% Line 2043
			      apply 't_meet'/2
				  (_cor4, Int)
			  in  %% Line 2044
			      apply 'set_type'/3
				  (Var, Type, St)
	  %% Line 2045
	  <{'lt',Var = {'var',_cor16},Val},St> when 'true' ->
	      let <_cor6> =
		  %% Line 2046
		  call 'erlang':'-'
		      (Val, 1)
	      in  let <Int> =
		      %% Line 2046
		      apply 't_integer'/1
			  ({0,_cor6})
		  in  let <_cor8> =
			  %% Line 2047
			  apply 'get_type'/2
			      (Var, St)
		      in  let <Type> =
			      %% Line 2047
			      apply 't_meet'/2
				  (_cor8, Int)
			  in  %% Line 2048
			      apply 'set_type'/3
				  (Var, Type, St)
	  %% Line 2049
	  <{'eq',Var = {'var',_cor17},Val},St>
	      when call 'erlang':'is_integer'
		    (Val) ->
	      let <Int> =
		  %% Line 2050
		  apply 't_integer'/1
		      (Val)
	      in  let <_cor11> =
		      %% Line 2051
		      apply 'get_type'/2
			  (Var, St)
		  in  let <Type> =
			  %% Line 2051
			  apply 't_meet'/2
			      (_cor11, Int)
		      in  %% Line 2052
			  apply 'set_type'/3
			      (Var, Type, St)
	  %% Line 2053
	  <{'eq',_cor18,_cor19},St> when 'true' ->
	      %% Line 2054
	      St
	  %% Line 2055
	  <{'ge',_cor20,_cor21},St> when 'true' ->
	      St
	  ( <_cor14,_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13})
		  -| [{'function_name',{'update_type_info',2}}] )
	    -| ['compiler_generated'] )
	end
'subst_list'/2 =
    %% Line 2057
    fun (_cor1,_cor0) ->
	%% Line 2058
	( letrec
	      'lc$^0'/1 =
		  fun (_cor4) ->
		      case _cor4 of
			<[A|_cor3]> when 'true' ->
			    let <_cor5> =
				apply 'subst'/2
				    (A, _cor0)
			    in  let <_cor6> =
				    apply 'lc$^0'/1
					(_cor3)
				in  ( [_cor5|_cor6]
				      -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_cor4> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor4})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  apply 'lc$^0'/1
		  (_cor1)
	  -| ['list_comprehension'] )
'subst'/2 =
    %% Line 2060
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Var = {'var',_cor7},St> when 'true' ->
	      let <Type> =
		  %% Line 2061
		  apply 'get_type'/2
		      (Var, St)
	      in  %% Line 2062
		  case apply 't_type'/1
			   (Type) of
		    %% Line 2063
		    <'integer'> when 'true' ->
			%% Line 2064
			case apply 't_range'/1
				 (Type) of
			  %% Line 2065
			  <'any'> when 'true' ->
			      Var
			  %% Line 2066
			  <{Val,_cor8}>
			      when call 'erlang':'=:='
				    (_cor8,
				     Val) ->
			      Val
			  %% Line 2067
			  <{_cor9,_cor10}> when 'true' ->
			      Var
			  ( <_cor3> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor3})
			    -| ['compiler_generated'] )
			end
		    %% Line 2069
		    <_cor11> when 'true' ->
			%% Line 2070
			Var
		  end
	  %% Line 2072
	  <V,_X_St> when 'true' ->
	      V
	end
'set_type'/3 =
    %% Line 2074
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'var',Var},Type = {_cor15,_cor16},St0 = {'ost',Sym0,_cor17}> when 'true' ->
	      let <Sym1> =
		  %% Line 2075
		  call 'gb_trees':'enter'
		      (Var, Type, Sym0)
	      in  %% Line 2076
		  case call 'gb_trees':'lookup'
			   ({'propagate',Var}, Sym1) of
		    %% Line 2077
		    <'none'> when 'true' ->
			%% Line 2078
			call 'erlang':'setelement'
			    (2, St0, Sym1)
		    %% Line 2079
		    <{'value',Propagate}> when 'true' ->
			let <Sym> =
			    %% Line 2080
			    call 'gb_trees':'delete'
				({'propagate',Var}, Sym1)
			in  let <_cor9> =
				%% Line 2081
				call 'erlang':'setelement'
				    (2, St0, Sym)
			    in  %% Line 2082
				apply Propagate
				    (Type, _cor9)
		    ( <_cor11> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor11})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor14,_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12})
		  -| [{'function_name',{'set_type',3}}] )
	    -| ['compiler_generated'] )
	end
'get_type'/2 =
    %% Line 2085
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'var',V},{'ost',Sym,_cor5}> when 'true' ->
	      %% Line 2086
	      case call 'gb_trees':'lookup'
		       (V, Sym) of
		%% Line 2087
		<'none'> when 'true' ->
		    apply 't_any'/0
			()
		%% Line 2088
		<{'value',T}> when 'true' ->
		    T
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'get_type',2}}] )
	    -| ['compiler_generated'] )
	end
'propagate'/3 =
    %% Line 2091
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'var',Var},Propagate,St = {'ost',Sym0,_cor9}>
	      when call 'erlang':'is_function'
		    (Propagate,
		     2) ->
	      let <Sym> =
		  %% Line 2092
		  call 'gb_trees':'enter'
		      ({'propagate',Var}, Propagate, Sym0)
	      in  %% Line 2093
		  call 'erlang':'setelement'
		      (2, St, Sym)
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'propagate',3}}] )
	    -| ['compiler_generated'] )
	end
't_align'/1 =
    %% Line 2133
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 2134
	    apply 't__range'/1
		(_cor0)
	in  %% Line 2134
	    {'align',_cor1}
't_any'/0 =
    %% Line 2136
    fun () ->
	%% Line 2137
	{'any','any'}
't_binary'/0 =
    %% Line 2139
    fun () ->
	%% Line 2140
	{'binary','any'}
't_binary'/1 =
    %% Line 2142
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 2143
	    apply 't__range'/1
		(_cor0)
	in  %% Line 2143
	    {'binary',_cor1}
't_bitlist'/0 =
    %% Line 2145
    fun () ->
	%% Line 2146
	{'bitlist','any'}
't_bitstring'/0 =
    %% Line 2148
    fun () ->
	%% Line 2149
	{'bitstring','any'}
't_bitstring'/1 =
    %% Line 2151
    fun (_cor0) ->
	%% Line 2152
	case apply 't__range'/1
		 (_cor0) of
	  %% Line 2153
	  <Range = {Bits,_cor4}>
	      when let <_cor5> =
		    call 'erlang':'=:='
			(_cor4, Bits)
		in  let <_cor6> =
			try
			    let <_cor1> =
				call 'erlang':'rem'
				    (Bits, 8)
			    in  call 'erlang':'=:='
				    (_cor1, 0)
			of <Try> ->
			    Try
			catch <T,R> ->
			    'false'
		    in  call 'erlang':'and'
			    (_cor5, _cor6) ->
	      %% Line 2154
	      {'binary',Range}
	  %% Line 2155
	  <Range> when 'true' ->
	      %% Line 2156
	      {'bitstring',Range}
	end
't_add'/2 =
    %% Line 2159
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'integer',{Lb,Ub}},N> when 'true' ->
	      let <_cor3> =
		  %% Line 2160
		  call 'erlang':'+'
		      (Lb, N)
	      in  let <_cor2> =
		      %% Line 2160
		      call 'erlang':'+'
			  (Ub, N)
		  in  %% Line 2160
		      {'integer',{_cor3,_cor2}}
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'t_add',2}}] )
	    -| ['compiler_generated'] )
	end
't_cons'/2 =
    %% Line 2162
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <T1 = {_cor12,_cor13},T2 = {_cor14,_cor15}> when 'true' ->
	      let <_cor3> =
		  %% Line 2163
		  apply 't__cons_type'/1
		      (T1)
	      in  let <_cor2> =
		      %% Line 2163
		      apply 't__cons_type'/1
			  (T2)
		  in  let <_cor5> =
			  %% Line 2163
			  case <_cor3,_cor2> of
			    %% Line 2164
			    <_cor16,'any'> when 'true' ->
				'any'
			    %% Line 2165
			    <'any',_cor17> when 'true' ->
				'any'
			    %% Line 2166
			    <'align',_cor18> when 'true' ->
				'align'
			    %% Line 2167
			    <_cor19,'align'> when 'true' ->
				'align'
			    %% Line 2168
			    <'binary','binary'> when 'true' ->
				'iolist'
			    %% Line 2169
			    <'binary','bitstring'> when 'true' ->
				'bitlist'
			    %% Line 2170
			    <'bitstring','binary'> when 'true' ->
				'bitlist'
			    %% Line 2171
			    <'bitstring','bitstring'> when 'true' ->
				'bitlist'
			    ( <_fol221,_fol222> when 'true' ->
				  let <_cor4> = {_fol221,_fol222}
				  in  primop 'match_fail'
					  ({'case_clause',_cor4})
			      -| ['compiler_generated'] )
			  end
		      in  let <_cor8> =
			      %% Line 2173
			      apply 't__cons_range'/1
				  (T1)
			  in  let <_cor7> =
				  %% Line 2173
				  apply 't__cons_range'/1
				      (T2)
			      in  let <_cor9> =
				      %% Line 2173
				      apply 't__cons_ranges'/2
					  (_cor8, _cor7)
				  in  %% Line 2173
				      {_cor5,_cor9}
	  ( <_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10})
		  -| [{'function_name',{'t_cons',2}}] )
	    -| ['compiler_generated'] )
	end
't_integer'/0 =
    %% Line 2175
    fun () ->
	%% Line 2176
	{'integer','any'}
't_integer'/1 =
    %% Line 2178
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 2179
	    apply 't__range'/1
		(_cor0)
	in  %% Line 2179
	    {'integer',_cor1}
't_iolist'/0 =
    %% Line 2181
    fun () ->
	%% Line 2182
	{'iolist','any'}
't_list'/1 =
    %% Line 2184
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 2185
	    apply 't__range'/1
		(_cor0)
	in  %% Line 2185
	    {'list',_cor1}
't_nil'/0 =
    %% Line 2187
    fun () ->
	%% Line 2188
	{'nil',{0,0}}
't_meet'/2 =
    %% Line 2190
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{T1,Range1},{T2,Range2}> when 'true' ->
	      let <_cor3> =
		  %% Line 2191
		  apply 't_meet_types'/2
		      (T1, T2)
	      in  let <_cor2> =
		      %% Line 2191
		      apply 't_meet_ranges'/2
			  (Range1, Range2)
		  in  %% Line 2191
		      {_cor3,_cor2}
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'t_meet',2}}] )
	    -| ['compiler_generated'] )
	end
't_meet_types'/2 =
    %% Line 2193
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'integer','integer'> when 'true' ->
	      'integer'
	  %% Line 2194
	  <'any','integer'> when 'true' ->
	      'integer'
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'t_meet_types',2}}] )
	    -| ['compiler_generated'] )
	end
't_meet_ranges'/2 =
    %% Line 2196
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'any',Range> when 'true' ->
	      %% Line 2197
	      Range
	  %% Line 2198
	  <{Lb1,Ub1},{Lb2,Ub2}> when 'true' ->
	      %% Line 2199
	      case <> of
		%% Line 2200
		<>
		    when let <_cor2> =
			  call 'erlang':'=<'
			      (Lb1, Ub2)
		      in  let <_cor3> =
			      call 'erlang':'=<'
				  (Lb2, Ub1)
			  in  call 'erlang':'and'
				  (_cor2, _cor3) ->
		    let <_cor4> =
			%% Line 2201
			call 'erlang':'max'
			    (Lb1, Lb2)
		    in  %% Line 2201
			{_cor4,Ub1}
		%% Line 2202
		<>
		    when let <_cor5> =
			  call 'erlang':'=<'
			      (Lb2, Ub1)
		      in  let <_cor6> =
			      call 'erlang':'=<'
				  (Lb1, Ub2)
			  in  call 'erlang':'and'
				  (_cor5, _cor6) ->
		    let <_cor7> =
			%% Line 2203
			call 'erlang':'max'
			    (Lb1, Lb2)
		    in  %% Line 2203
			{_cor7,Ub2}
		( <> when 'true' ->
		      primop 'match_fail'
			  ('if_clause')
		  -| ['compiler_generated'] )
	      end
	  ( <_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8})
		  -| [{'function_name',{'t_meet_ranges',2}}] )
	    -| ['compiler_generated'] )
	end
't_join'/2 =
    %% Line 2206
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{T1,Range1},{T2,Range2}> when 'true' ->
	      let <_cor2> =
		  %% Line 2207
		  call 'lists':'sort'
		      ([T1|[T2|[]]])
	      in  let <T> =
		      %% Line 2207
		      apply 't_join_types'/1
			  (_cor2)
		  in  let <Range> =
			  %% Line 2208
			  apply 't_join_ranges'/2
			      (Range1, Range2)
		      in  %% Line 2209
			  {T,Range}
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'t_join',2}}] )
	    -| ['compiler_generated'] )
	end
't_join_ranges'/2 =
    %% Line 2211
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{Lb1,Ub1},{Lb2,Ub2}> when 'true' ->
	      let <_cor3> =
		  %% Line 2212
		  call 'erlang':'min'
		      (Lb1, Lb2)
	      in  let <_cor2> =
		      %% Line 2212
		      call 'erlang':'max'
			  (Ub1, Ub2)
		  in  %% Line 2212
		      {_cor3,_cor2}
	  %% Line 2213
	  <'any',_cor6> when 'true' ->
	      'any'
	  %% Line 2214
	  <_cor7,'any'> when 'true' ->
	      'any'
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'t_join_ranges',2}}] )
	    -| ['compiler_generated'] )
	end
't_join_types'/1 =
    %% Line 2216
    fun (_cor0) ->
	case _cor0 of
	  <[T|[_cor2|[]]]>
	      when call 'erlang':'=:='
		    (_cor2,
		     T) ->
	      T
	  %% Line 2217
	  <['align'|['any']]> when 'true' ->
	      'any'
	  %% Line 2218
	  <['align'|[_cor3|[]]]> when 'true' ->
	      'align'
	  %% Line 2219
	  <['any'|[_cor4|[]]]> when 'true' ->
	      'any'
	  %% Line 2220
	  <['bitlist'|['bitstring']]> when 'true' ->
	      'any'
	  %% Line 2221
	  <['bitlist'|['integer']]> when 'true' ->
	      'any'
	  %% Line 2222
	  <['bitlist'|['iolist']]> when 'true' ->
	      'bitlist'
	  %% Line 2223
	  <['bitlist'|['nil']]> when 'true' ->
	      'bitlist'
	  %% Line 2224
	  <['binary'|['bitlist']]> when 'true' ->
	      'bitlist'
	  %% Line 2225
	  <['binary'|['bitstring']]> when 'true' ->
	      'bitstring'
	  %% Line 2226
	  <['binary'|['integer']]> when 'true' ->
	      'binary'
	  %% Line 2227
	  <['binary'|['iolist']]> when 'true' ->
	      'iolist'
	  %% Line 2228
	  <['binary'|['nil']]> when 'true' ->
	      'iolist'
	  %% Line 2229
	  <['bitstring'|['integer']]> when 'true' ->
	      'any'
	  %% Line 2230
	  <['bitstring'|['iolist']]> when 'true' ->
	      'any'
	  %% Line 2231
	  <['bitstring'|['nil']]> when 'true' ->
	      'any'
	  %% Line 2232
	  <['integer'|[_cor5|[]]]> when 'true' ->
	      'any'
	  %% Line 2233
	  <['iolist'|['nil']]> when 'true' ->
	      'iolist'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'t_join_types',1}}] )
	    -| ['compiler_generated'] )
	end
't_type'/1 =
    %% Line 2235
    fun (_cor0) ->
	case _cor0 of
	  <{T,_cor2}> when 'true' ->
	      T
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'t_type',1}}] )
	    -| ['compiler_generated'] )
	end
't_range'/1 =
    %% Line 2237
    fun (_cor0) ->
	case _cor0 of
	  <{_cor2,Range}> when 'true' ->
	      Range
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'t_range',1}}] )
	    -| ['compiler_generated'] )
	end
't__cons_type'/1 =
    %% Line 2239
    fun (_cor0) ->
	case _cor0 of
	  <{'align',_cor2}> when 'true' ->
	      'align'
	  %% Line 2240
	  <{'any',_cor3}> when 'true' ->
	      'any'
	  %% Line 2241
	  <{'binary',_cor4}> when 'true' ->
	      'binary'
	  %% Line 2242
	  <{'bitstring',_cor5}> when 'true' ->
	      'bitstring'
	  %% Line 2243
	  <{'bitlist',_cor6}> when 'true' ->
	      'bitstring'
	  %% Line 2244
	  <{'integer',_cor7}> when 'true' ->
	      'binary'
	  %% Line 2245
	  <{'iolist',_cor8}> when 'true' ->
	      'binary'
	  %% Line 2246
	  <{'nil',_cor9}> when 'true' ->
	      'binary'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'t__cons_type',1}}] )
	    -| ['compiler_generated'] )
	end
't__cons_range'/1 =
    %% Line 2248
    fun (_cor0) ->
	case _cor0 of
	  <{'integer',_cor2}> when 'true' ->
	      {8,8}
	  %% Line 2249
	  <{_cor3,Range}> when 'true' ->
	      Range
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'t__cons_range',1}}] )
	    -| ['compiler_generated'] )
	end
't__cons_ranges'/2 =
    %% Line 2251
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{Lb1,Ub1},{Lb2,Ub2}> when 'true' ->
	      let <_cor3> =
		  %% Line 2252
		  call 'erlang':'+'
		      (Lb1, Lb2)
	      in  let <_cor2> =
		      %% Line 2252
		      call 'erlang':'+'
			  (Ub1, Ub2)
		  in  %% Line 2252
		      {_cor3,_cor2}
	  %% Line 2253
	  <'any',_cor6> when 'true' ->
	      'any'
	  %% Line 2254
	  <_cor7,'any'> when 'true' ->
	      'any'
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'t__cons_ranges',2}}] )
	    -| ['compiler_generated'] )
	end
't__range'/1 =
    %% Line 2256
    fun (_cor0) ->
	case _cor0 of
	  <Range = {Lb,Ub}>
	      when let <_cor1> =
		    call 'erlang':'is_integer'
			(Lb)
		in  let <_cor2> =
			call 'erlang':'is_integer'
			    (Ub)
		    in  call 'erlang':'and'
			    (_cor1, _cor2) ->
	      %% Line 2257
	      Range
	  %% Line 2258
	  <'any'> when 'true' ->
	      %% Line 2259
	      'any'
	  %% Line 2260
	  <Val>
	      when call 'erlang':'is_integer'
		    (_cor0) ->
	      %% Line 2261
	      {Val,Val}
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'t__range',1}}] )
	    -| ['compiler_generated'] )
	end
'enc_cg'/1 =
    %% Line 2268
    fun (_cor0) ->
	case _cor0 of
	  <Cons = {'cons',_cor40,_cor41}> when 'true' ->
	      %% Line 2269
	      apply 'enc_cg_cons'/1
		  (Cons)
	  %% Line 2270
	  <{'block',Imm}> when 'true' ->
	      do  %% Line 2271
		  call 'asn1ct_gen':'emit'
		      ([[98|[101|[103|[105|[110]]]]]|['nl']])
		  do  %% Line 2272
		      apply 'enc_cg'/1
			  (Imm)
		      %% Line 2273
		      call 'asn1ct_gen':'emit'
			  (['nl'|[[101|[110|[100]]]]])
	  %% Line 2275
	  <{'seq',First,Then}> when 'true' ->
	      do  %% Line 2276
		  apply 'enc_cg'/1
		      (First)
		  do  %% Line 2277
		      call 'asn1ct_gen':'emit'
			  (['com'|['nl']])
		      %% Line 2278
		      apply 'enc_cg'/1
			  (Then)
	  %% Line 2279
	  <'align'> when 'true' ->
	      %% Line 2280
	      call 'asn1ct_gen':'emit'
		  ('align')
	  %% Line 2281
	  <{'apply',F0,As0}> when 'true' ->
	      let <As> =
		  %% Line 2282
		  apply 'enc_call_args'/2
		      (As0, [])
	      in  %% Line 2283
		  case F0 of
		    %% Line 2284
		    <{'local',F,_cor42}>
			when call 'erlang':'is_atom'
			      (F) ->
			%% Line 2285
			call 'asn1ct_gen':'emit'
			    ([{'asis',F}|[[40]|[As|[[41]]]]])
		    %% Line 2286
		    <{M,F,_cor43}> when 'true' ->
			%% Line 2287
			call 'asn1ct_gen':'emit'
			    ([{'asis',M}|[[58]|[{'asis',F}|[[40]|[As|[[41]]]]]]])
		    ( <_cor2> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor2})
		      -| ['compiler_generated'] )
		  end
	  %% Line 2289
	  <{'assign',Dst0,Expr}> when 'true' ->
	      let <Dst> =
		  %% Line 2290
		  apply 'mk_val'/1
		      (Dst0)
	      in  %% Line 2291
		  call 'asn1ct_gen':'emit'
		      ([Dst|[[32|[61|[32]]]|[Expr|[]]]])
	  %% Line 2292
	  <{'binary',PutBits}> when 'true' ->
	      let <_cor4> =
		  %% Line 2293
		  apply 'enc_cg_put_bits'/2
		      (PutBits, [])
	      in  %% Line 2293
		  call 'asn1ct_gen':'emit'
		      ([[60|[60]]|[_cor4|[[62|[62]]]]])
	  %% Line 2294
	  <{'call',M,F,As0}> when 'true' ->
	      let <_cor10> =
		  %% Line 2295
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor7) ->
				case _cor7 of
				  <[A|_cor6]> when 'true' ->
				      let <_cor8> =
					  apply 'mk_val'/1
					      (A)
				      in  let <_cor9> =
					      apply 'lc$^0'/1
						  (_cor6)
					  in  ( [_cor8|_cor9]
						-| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor7> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor7})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (As0)
		    -| ['list_comprehension'] )
	      in  %% Line 2296
		  call 'asn1ct_func':'call'
		      (M, F, _cor10)
	  %% Line 2297
	  <{'call',M,F,As0,Dst}> when 'true' ->
	      let <_cor17> =
		  %% Line 2298
		  ( letrec
			'lc$^1'/1 =
			    fun (_cor14) ->
				case _cor14 of
				  <[A|_cor13]> when 'true' ->
				      let <_cor15> =
					  apply 'mk_val'/1
					      (A)
				      in  let <_cor16> =
					      apply 'lc$^1'/1
						  (_cor13)
					  in  ( [_cor15|_cor16]
						-| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor14> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor14})
					  -| [{'function_name',{'lc$^1',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^1'/1
			    (As0)
		    -| ['list_comprehension'] )
	      in  let <_cor19> =
		      %% Line 2299
		      apply 'mk_val'/1
			  (Dst)
		  in  do  %% Line 2299
			  call 'asn1ct_gen':'emit'
			      ([_cor19|[[32|[61|[32]]]]])
			  %% Line 2300
			  call 'asn1ct_func':'call'
			      (M, F, _cor17)
	  %% Line 2301
	  <{'call_gen',Prefix,Key,Gen,_cor44,As0}> when 'true' ->
	      let <_cor25> =
		  %% Line 2302
		  ( letrec
			'lc$^2'/1 =
			    fun (_cor22) ->
				case _cor22 of
				  <[A|_cor21]> when 'true' ->
				      let <_cor23> =
					  apply 'mk_val'/1
					      (A)
				      in  let <_cor24> =
					      apply 'lc$^2'/1
						  (_cor21)
					  in  ( [_cor23|_cor24]
						-| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor22> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor22})
					  -| [{'function_name',{'lc$^2',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^2'/1
			    (As0)
		    -| ['list_comprehension'] )
	      in  %% Line 2303
		  call 'asn1ct_func':'call_gen'
		      (Prefix, Key, Gen, _cor25)
	  %% Line 2304
	  <{'cond',Cs}> when 'true' ->
	      %% Line 2305
	      apply 'enc_cg_cond'/1
		  (Cs)
	  %% Line 2306
	  <{'error',Error}>
	      when call 'erlang':'is_function'
		    (Error,
		     0) ->
	      %% Line 2307
	      apply Error
		  ()
	  %% Line 2308
	  <{'error',Var0}> when 'true' ->
	      let <Var> =
		  %% Line 2309
		  apply 'mk_val'/1
		      (Var0)
	      in  %% Line 2310
		  call 'asn1ct_gen':'emit'
		      ([[101|[120|[105|[116|[40|[123|[101|[114|[114|[111|[114|[44|[123|[97|[115|[110|[49|[44|[123|[105|[108|[108|[101|[103|[97|[108|[95|[118|[97|[108|[117|[101|[44]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[Var|[[125|[125|[125|[41]]]]]]])
	  %% Line 2311
	  <{'integer',Int}> when 'true' ->
	      let <_cor28> =
		  %% Line 2312
		  apply 'mk_val'/1
		      (Int)
	      in  %% Line 2312
		  call 'asn1ct_gen':'emit'
		      (_cor28)
	  %% Line 2313
	  <{'lc',Body,Var,List}> when 'true' ->
	      do  %% Line 2314
		  call 'asn1ct_gen':'emit'
		      ([91])
		  do  %% Line 2315
		      apply 'enc_cg'/1
			  (Body)
		      let <_cor29> =
			  %% Line 2316
			  apply 'mk_val'/1
			      (Var)
		      in  let <_cor30> =
			      %% Line 2316
			      apply 'mk_val'/1
				  (List)
			  in  %% Line 2316
			      call 'asn1ct_gen':'emit'
				  ([[32|[124|[124|[32]]]]|[_cor29|[[32|[60|[45|[32]]]]|[_cor30|[[93]]]]]])
	  %% Line 2317
	  <{'lc',Body,Var,List,Dst}> when 'true' ->
	      let <_cor31> =
		  %% Line 2318
		  apply 'mk_val'/1
		      (Dst)
	      in  do  %% Line 2318
		      call 'asn1ct_gen':'emit'
			  ([_cor31|[[32|[61|[32|[91]]]]]])
		      do  %% Line 2319
			  apply 'enc_cg'/1
			      (Body)
			  let <_cor32> =
			      %% Line 2320
			      apply 'mk_val'/1
				  (Var)
			  in  let <_cor33> =
				  %% Line 2320
				  apply 'mk_val'/1
				      (List)
			      in  %% Line 2320
				  call 'asn1ct_gen':'emit'
				      ([[32|[124|[124|[32]]]]|[_cor32|[[32|[60|[45|[32]]]]|[_cor33|[[93]]]]]])
	  %% Line 2321
	  <{'list',List,Dst}> when 'true' ->
	      let <_cor34> =
		  %% Line 2322
		  apply 'mk_val'/1
		      (Dst)
	      in  do  %% Line 2322
		      call 'asn1ct_gen':'emit'
			  ([_cor34|[[32|[61|[32]]]]])
		      %% Line 2323
		      apply 'enc_cg'/1
			  (List)
	  %% Line 2324
	  <'nil'> when 'true' ->
	      %% Line 2325
	      call 'asn1ct_gen':'emit'
		  ([91|[93]])
	  %% Line 2326
	  <{'sub',Src0,Int,Dst0}> when 'true' ->
	      let <Src> =
		  %% Line 2327
		  apply 'mk_val'/1
		      (Src0)
	      in  let <Dst> =
		      %% Line 2328
		      apply 'mk_val'/1
			  (Dst0)
		  in  %% Line 2329
		      call 'asn1ct_gen':'emit'
			  ([Dst|[[32|[61|[32]]]|[Src|[[32|[45|[32]]]|[Int|[]]]]]])
	  %% Line 2330
	  <{'set',{'var',Src},{'var',Dst}}> when 'true' ->
	      %% Line 2331
	      call 'asn1ct_gen':'emit'
		  ([Dst|[[32|[61|[32]]]|[Src|[]]]])
	  %% Line 2332
	  <{'try',Try,{P,Succ},Else,Dst}> when 'true' ->
	      let <_cor37> =
		  %% Line 2333
		  apply 'mk_val'/1
		      (Dst)
	      in  do  %% Line 2333
		      call 'asn1ct_gen':'emit'
			  ([_cor37|[[32|[61|[32|[116|[114|[121|[32]]]]]]]]])
		      do  %% Line 2334
			  apply 'enc_cg'/1
			      (Try)
			  let <_cor38> =
			      %% Line 2336
			      apply 'mk_val'/1
				  (P)
			  in  do  %% Line 2335
				  call 'asn1ct_gen':'emit'
				      ([[32|[111|[102]]]|['nl'|%% Line 2336
							       [_cor38|[[32|[45|[62]]]|['nl']]]]])
				  do  %% Line 2337
				      apply 'enc_cg'/1
					  (Succ)
				      do  %% Line 2338
					  call 'asn1ct_gen':'emit'
					      (['nl'|[[99|[97|[116|[99|[104|[32|[116|[104|[114|[111|[119|[58|[105|[110|[118|[97|[108|[105|[100|[32|[45|[62]]]]]]]]]]]]]]]]]]]]]]|['nl']]])
					  do  %% Line 2340
					      apply 'enc_cg'/1
						  (Else)
					      %% Line 2341
					      call 'asn1ct_gen':'emit'
						  (['nl'|[[101|[110|[100]]]]])
	  %% Line 2343
	  <{'var',V}> when 'true' ->
	      %% Line 2344
	      call 'asn1ct_gen':'emit'
		  (V)
	  ( <_cor39> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor39})
		  -| [{'function_name',{'enc_cg',1}}] )
	    -| ['compiler_generated'] )
	end
'enc_cg_cons'/1 =
    %% Line 2346
    fun (_cor0) ->
	do  %% Line 2347
	    call 'asn1ct_gen':'emit'
		([91])
	    do  %% Line 2348
		apply 'enc_cg_cons_1'/1
		    (_cor0)
		%% Line 2349
		call 'asn1ct_gen':'emit'
		    ([93])
'enc_cg_cons_1'/1 =
    %% Line 2351
    fun (_cor0) ->
	case _cor0 of
	  <{'cons',H,T = {'cons',_cor2,_cor3}}> when 'true' ->
	      do  %% Line 2352
		  apply 'enc_cg'/1
		      (H)
		  do  %% Line 2353
		      call 'asn1ct_gen':'emit'
			  (['com'|['nl']])
		      %% Line 2354
		      apply 'enc_cg_cons_1'/1
			  (T)
	  %% Line 2355
	  <{'cons',H,'nil'}> when 'true' ->
	      %% Line 2356
	      apply 'enc_cg'/1
		  (H)
	  %% Line 2357
	  <{'cons',H,T}> when 'true' ->
	      do  %% Line 2358
		  apply 'enc_cg'/1
		      (H)
		  do  %% Line 2359
		      call 'asn1ct_gen':'emit'
			  ([124])
		      %% Line 2360
		      apply 'enc_cg'/1
			  (T)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'enc_cg_cons_1',1}}] )
	    -| ['compiler_generated'] )
	end
'enc_call_args'/2 =
    %% Line 2362
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[A|As],Sep> when 'true' ->
	      let <_cor2> =
		  %% Line 2363
		  apply 'mk_val'/1
		      (A)
	      in  let <_cor3> =
		      %% Line 2363
		      apply 'enc_call_args'/2
			  (As, [44|[32]])
		  in  %% Line 2363
		      [Sep|[_cor2|_cor3]]
	  %% Line 2364
	  <[],_cor6> when 'true' ->
	      []
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'enc_call_args',2}}] )
	    -| ['compiler_generated'] )
	end
'enc_cg_cond'/1 =
    %% Line 2366
    fun (_cor0) ->
	do  %% Line 2367
	    call 'asn1ct_gen':'emit'
		([105|[102|[32]]])
	    do  %% Line 2368
		apply 'enc_cg_cond'/2
		    (_cor0, [])
		%% Line 2369
		call 'asn1ct_gen':'emit'
		    (['nl'|[[101|[110|[100]]]]])
'enc_cg_cond'/2 =
    %% Line 2372
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[C|Cs],Sep> when 'true' ->
	      do  %% Line 2373
		  call 'asn1ct_gen':'emit'
		      (Sep)
		  do  %% Line 2374
		      apply 'enc_cg_cond_1'/1
			  (C)
		      %% Line 2375
		      apply 'enc_cg_cond'/2
			  (Cs, [[59]|['nl']])
	  %% Line 2376
	  <[],_cor4> when 'true' ->
	      'ok'
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'enc_cg_cond',2}}] )
	    -| ['compiler_generated'] )
	end
'enc_cg_cond_1'/1 =
    %% Line 2378
    fun (_cor0) ->
	case _cor0 of
	  <{Cond,Action}> when 'true' ->
	      do  %% Line 2379
		  apply 'enc_cond_term'/1
		      (Cond)
		  do  %% Line 2380
		      call 'asn1ct_gen':'emit'
			  ([[32|[45|[62]]]|['nl']])
		      %% Line 2381
		      apply 'enc_cg'/1
			  (Action)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'enc_cg_cond_1',1}}] )
	    -| ['compiler_generated'] )
	end
'enc_cond_term'/1 =
    %% Line 2383
    fun (_cor0) ->
	case _cor0 of
	  <'_'> when 'true' ->
	      %% Line 2384
	      call 'asn1ct_gen':'emit'
		  ([116|[114|[117|[101]]]])
	  %% Line 2385
	  <{'ult',Var0,Int}> when 'true' ->
	      let <Var> =
		  %% Line 2386
		  apply 'mk_val'/1
		      (Var0)
	      in  let <N> =
		      %% Line 2387
		      apply 'uper_num_bits'/1
			  (Int)
		  in  %% Line 2388
		      case call 'erlang':'bsl'
			       (1, N) of
			%% Line 2389
			<_cor8>
			    when call 'erlang':'=:='
				  (_cor8,
				   Int) ->
			    %% Line 2390
			    call 'asn1ct_gen':'emit'
				([Var|[[32|[98|[115|[114|[32]]]]]|[N|[[32|[61|[58|[61|[32|[48]]]]]]]]]])
			%% Line 2391
			<_cor9> when 'true' ->
			    %% Line 2392
			    call 'asn1ct_gen':'emit'
				([[48|[32|[61|[60|[32]]]]]|[Var|[[44|[32]]|[Var|[[32|[60|[32]]]|[Int|[]]]]]]])
		      end
	  %% Line 2394
	  <{'eq',Var0,Term}> when 'true' ->
	      let <Var> =
		  %% Line 2395
		  apply 'mk_val'/1
		      (Var0)
	      in  %% Line 2396
		  call 'asn1ct_gen':'emit'
		      ([Var|[[32|[61|[58|[61|[32]]]]]|[{'asis',Term}|[]]]])
	  %% Line 2397
	  <{'ge',Var0,Int}> when 'true' ->
	      let <Var> =
		  %% Line 2398
		  apply 'mk_val'/1
		      (Var0)
	      in  %% Line 2399
		  call 'asn1ct_gen':'emit'
		      ([Var|[[32|[62|[61|[32]]]]|[Int|[]]]])
	  %% Line 2400
	  <{'lt',Var0,Int}> when 'true' ->
	      let <Var> =
		  %% Line 2401
		  apply 'mk_val'/1
		      (Var0)
	      in  %% Line 2402
		  call 'asn1ct_gen':'emit'
		      ([Var|[[32|[60|[32]]]|[Int|[]]]])
	  ( <_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7})
		  -| [{'function_name',{'enc_cond_term',1}}] )
	    -| ['compiler_generated'] )
	end
'enc_cg_put_bits'/2 =
    %% Line 2404
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{'put_bits',Val0,N,[1]}|T],Sep> when 'true' ->
	      let <Val> =
		  %% Line 2405
		  apply 'mk_val'/1
		      (Val0)
	      in  let <_cor3> =
		      %% Line 2406
		      call 'erlang':'integer_to_list'
			  (N)
		  in  let <_cor4> =
			  %% Line 2406
			  apply 'enc_cg_put_bits'/2
			      (T, [44])
		      in  %% Line 2406
			  [[Sep|[Val|[[58]|[_cor3|[]]]]]|_cor4]
	  %% Line 2407
	  <[],_cor7> when 'true' ->
	      []
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'enc_cg_put_bits',2}}] )
	    -| ['compiler_generated'] )
	end
'mk_val'/1 =
    %% Line 2409
    fun (_cor0) ->
	case _cor0 of
	  <{'var',Str}> when 'true' ->
	      Str
	  %% Line 2410
	  <{'expr',Str}> when 'true' ->
	      Str
	  %% Line 2411
	  <Int>
	      when call 'erlang':'is_integer'
		    (_cor0) ->
	      call 'erlang':'integer_to_list'
		  (Int)
	  %% Line 2412
	  <Other> when 'true' ->
	      {'asis',Other}
	end
'bit_string_name2pos_fun'/2 =
    %% Line 2419
    fun (_cor1,_cor0) ->
	let <_cor6> =
	    %% Line 2421
	    ( fun (_cor3,_cor2) ->
		  apply 'gen_name2pos'/3
		      (_cor3, _cor2, _cor1)
	      -| [{'id',{0,0,'-bit_string_name2pos_fun/2-fun-0-'}}] )
	in  %% Line 2420
	    {'call_gen',[98|[105|[116|[95|[115|[116|[114|[105|[110|[103|[95|[110|[97|[109|[101|[50|[112|[111|[115|[95]]]]]]]]]]]]]]]]]]]],_cor1,_cor6,%% Line 2421
																		      [],%% Line 2421
																			 [_cor0|[]]}
'gen_name2pos'/3 =
    %% Line 2423
    fun (_cor2,_cor1,_cor0) ->
	let <Cs0> =
	    %% Line 2424
	    apply 'gen_name2pos_cs'/2
		(_cor0, _cor1)
	in  let <_cor4> =
		%% Line 2425
		apply 'bit_clause'/1
		    (_cor1)
	    in  let <_cor5> =
		    %% Line 2425
		    apply 'nil_clause'/0
			()
		in  let <_cor6> =
			%% Line 2425
			apply 'invalid_clause'/0
			    ()
		    in  let <Cs> =
			    %% Line 2425
			    call 'erlang':'++'
				(Cs0, [_cor4|[_cor5|[_cor6|[]]]])
			in  let <F> =
				%% Line 2426
				{'function',1,_cor1,1,Cs}
			    in  let <_cor9> =
				    %% Line 2427
				    call 'erl_pp':'function'
					(F)
				in  %% Line 2427
				    call 'file':'write'
					(_cor2, [_cor9|[]])
'gen_name2pos_cs'/2 =
    %% Line 2429
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{K,V}|T],Name> when 'true' ->
	      let <P> =
		  %% Line 2430
		  [{'cons',0,{'atom',0,K},{'var',0,'T'}}|[]]
	      in  let <B> =
		      %% Line 2431
		      [{'cons',0,{'integer',0,V},{'call',0,{'atom',0,Name},[{'var',0,'T'}]}}|[]]
		  in  let <_cor4> =
			  %% Line 2432
			  apply 'gen_name2pos_cs'/2
			      (T, Name)
		      in  %% Line 2432
			  [{'clause',0,P,[],B}|_cor4]
	  %% Line 2433
	  <[],_cor7> when 'true' ->
	      []
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'gen_name2pos_cs',2}}] )
	    -| ['compiler_generated'] )
	end
'bit_clause'/1 =
    %% Line 2435
    fun (_cor0) ->
	let <B> =
	    %% Line 2440
	    [{'cons',0,{'var',0,'Pos'},{'call',0,{'atom',0,_cor0},[{'var',0,'T'}]}}|[]]
	in  %% Line 2441
	    {'clause',0,[{'cons',0,{'tuple',0,[{'atom',0,'bit'}|[{'var',0,'Pos'}]]},{'var',0,'T'}}],[[{'call',0,{'atom',0,'is_integer'},[{'var',0,'Pos'}]}]],B}
'nil_clause'/0 =
    %% Line 2443
    fun () ->
	%% Line 2445
	{'clause',0,[{'nil',0}],[],[{'nil',0}]}
'invalid_clause'/0 =
    %% Line 2447
    fun () ->
	%% Line 2450
	{'clause',0,[{'var',0,'_'}],[],[{'call',0,{'atom',0,'throw'},[{'atom',0,'invalid'}]}]}
'enc_hoist_align'/1 =
    %% Line 2482
    fun (_cor0) ->
	let <Imm> =
	    %% Line 2483
	    apply 'enc_hoist_align_reverse'/2
		(_cor0, [])
	in  %% Line 2484
	    apply 'enc_hoist_align'/3
		(Imm, 'false', [])
'enc_hoist_align_reverse'/2 =
    %% Line 2486
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[H|T],Acc> when 'true' ->
	      %% Line 2487
	      case apply 'enc_opt_al_1'/2
		       ([H|[]], 0) of
		%% Line 2488
		<{[_cor5|[]],_cor6}>
		    when call 'erlang':'=:='
			  (_cor5,
			   H) ->
		    %% Line 2489
		    apply 'enc_hoist_align_reverse'/2
			(T, [H|Acc])
		%% Line 2490
		<{_cor7,_cor8}> when 'true' ->
		    %% Line 2491
		    call 'lists':'reverse'
			(T, [H|['stop'|Acc]])
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2493
	  <[],Acc> when 'true' ->
	      Acc
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'enc_hoist_align_reverse',2}}] )
	    -| ['compiler_generated'] )
	end
'enc_hoist_align'/3 =
    %% Line 2495
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <['stop'|T],_X_Aligned,Acc> when 'true' ->
	      %% Line 2496
	      call 'lists':'reverse'
		  (T, Acc)
	  %% Line 2497
	  <[{'block',Bl0}|T],Aligned,Acc> when 'true' ->
	      let <_cor4> =
		  %% Line 2498
		  case Aligned of
		    %% Line 2499
		    <'false'> when 'true' ->
			Bl0
		    %% Line 2500
		    <'true'> when 'true' ->
			apply 'enc_hoist_block'/1
			    (Bl0)
		    ( <_cor3> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor3})
		      -| ['compiler_generated'] )
		  end
	      in  %% Line 2502
		  case apply 'is_beginning_aligned'/1
			   (_cor4) of
		    %% Line 2503
		    <'false'> when 'true' ->
			%% Line 2504
			apply 'enc_hoist_align'/3
			    (T, 'false', [{'block',_cor4}|Acc])
		    %% Line 2505
		    <'true'> when 'true' ->
			%% Line 2506
			apply 'enc_hoist_align'/3
			    (T, 'true', [{'put_bits',0,0,[1|['align']]}|%% Line 2507
									[{'block',_cor4}|Acc]])
		    ( <_cor6> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor6})
		      -| ['compiler_generated'] )
		  end
	  %% Line 2509
	  <[H|T],_cor10,Acc> when 'true' ->
	      %% Line 2510
	      apply 'enc_hoist_align'/3
		  (T, 'false', [H|Acc])
	  %% Line 2511
	  <[],_cor11,Acc> when 'true' ->
	      Acc
	  ( <_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7})
		  -| [{'function_name',{'enc_hoist_align',3}}] )
	    -| ['compiler_generated'] )
	end
'enc_hoist_block'/1 =
    %% Line 2513
    fun (_cor0) ->
	%% Line 2514
	try
	    let <_cor1> =
		%% Line 2515
		call 'lists':'reverse'
		    (_cor0)
	    in  %% Line 2515
		apply 'enc_hoist_block_1'/1
		    (_cor1)
	of <_cor2> ->
	    _cor2
	catch <_cor5,_cor4,_cor3> ->
	    case <_cor5,_cor4,_cor3> of
	      %% Line 2517
	      <'throw','impossible',_cor7> when 'true' ->
		  _cor0
	      ( <_cor5,_cor4,_cor3> when 'true' ->
		    primop 'raise'
			(_cor3, _cor4)
		-| ['compiler_generated'] )
	    end
'enc_hoist_block_1'/1 =
    %% Line 2521
    fun (_cor0) ->
	case _cor0 of
	  <[{'cond',Cs0}|T]> when 'true' ->
	      let <_cor6> =
		  %% Line 2522
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor3) ->
				case _cor3 of
				  <[[C|Act]|_cor2]> when 'true' ->
				      let <_cor4> =
					  apply 'enc_hoist_block_2'/1
					      (Act)
				      in  let <_cor5> =
					      apply 'lc$^0'/1
						  (_cor2)
					  in  ( [[C|_cor4]|_cor5]
						-| ['compiler_generated'] )
				  ( <[_cor1|_cor2]> when 'true' ->
					apply 'lc$^0'/1
					    (_cor2)
				    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor3> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor3})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (Cs0)
		    -| ['list_comprehension'] )
	      in  let <H> = {%% Line 2523
		       'cond',_cor6}
		  in  %% Line 2524
		      call 'lists':'reverse'
			  (T, [H|[]])
	  %% Line 2525
	  <_cor10> when 'true' ->
	      %% Line 2526
	      call 'erlang':'throw'
		  ('impossible')
	end
'enc_hoist_block_2'/1 =
    %% Line 2528
    fun (_cor0) ->
	case _cor0 of
	  <L = [{'cond',_cor3}|_cor4]> when 'true' ->
	      %% Line 2529
	      apply 'enc_hoist_block'/1
		  (L)
	  %% Line 2530
	  <L = [{'error',_cor5}|[]]> when 'true' ->
	      %% Line 2531
	      L
	  %% Line 2532
	  <[]> when 'true' ->
	      %% Line 2533
	      [{'put_bits',0,0,[1|['align']]}]
	  %% Line 2534
	  <L> when 'true' ->
	      %% Line 2535
	      case call 'lists':'last'
		       (L) of
		%% Line 2536
		<{'put_bits',_cor6,_cor7,_cor8}> when 'true' ->
		    %% Line 2537
		    call 'erlang':'++'
			(L, [{'put_bits',0,0,[1|['align']]}])
		%% Line 2538
		<_cor9> when 'true' ->
		    %% Line 2539
		    call 'erlang':'throw'
			('impossible')
	      end
	end
'enc_opt_al'/1 =
    %% Line 2546
    fun (_cor0) ->
	%% Line 2547
	case apply 'enc_opt_al_1'/2
		 (_cor0, 'unknown') of
	  <{Imm,_cor3}> when 'true' ->
	      %% Line 2548
	      Imm
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'enc_opt_al_1'/2 =
    %% Line 2550
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[H0|T0],Al0> when 'true' ->
	      %% Line 2551
	      case apply 'enc_opt_al'/2
		       (H0, Al0) of
		<{H,Al1}> when 'true' ->
		    %% Line 2552
		    case apply 'enc_opt_al_1'/2
			     (T0, Al1) of
		      <{T,Al}> when 'true' ->
			  let <_cor4> =
			      %% Line 2553
			      call 'erlang':'++'
				  (H, T)
			  in  %% Line 2553
			      {_cor4,Al}
		      ( <_cor3> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor3})
			-| ['compiler_generated'] )
		    end
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2554
	  <[],Al> when 'true' ->
	      {[],Al}
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'enc_opt_al_1',2}}] )
	    -| ['compiler_generated'] )
	end
'enc_opt_al'/2 =
    %% Line 2556
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Imm = {'assign',_cor33,_cor34},Al> when 'true' ->
	      %% Line 2557
	      {[Imm|[]],Al}
	  %% Line 2558
	  <{'block',Bl0},Al0> when 'true' ->
	      %% Line 2559
	      case apply 'enc_opt_al_1'/2
		       (Bl0, Al0) of
		<{Bl,Al}> when 'true' ->
		    %% Line 2560
		    {[{'block',Bl}|[]],Al}
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2561
	  <Imm = {'call','erlang','iolist_to_binary',[_cor35|[]]},Al> when 'true' ->
	      %% Line 2562
	      {[Imm|[]],Al}
	  %% Line 2563
	  <Call = {'call','per_common','encode_fragmented',[_cor36|[U|[]]]},Al> when 'true' ->
	      %% Line 2564
	      case call 'erlang':'rem'
		       (U, 8) of
		%% Line 2565
		<0> when 'true' ->
		    {[Call|[]],Al}
		%% Line 2566
		<_cor37> when 'true' ->
		    {[Call|[]],'unknown'}
	      end
	  %% Line 2568
	  <Call = {'call','per_common','encode_unconstrained_number',[_cor38|[]]},_cor39> when 'true' ->
	      %% Line 2569
	      {[Call|[]],0}
	  %% Line 2570
	  <Call = {'call',_cor40,_cor41,_cor42,_cor43},Al> when 'true' ->
	      %% Line 2571
	      {[Call|[]],Al}
	  %% Line 2572
	  <{'cond',Cs0},Al0> when 'true' ->
	      %% Line 2573
	      case apply 'enc_opt_al_cond'/2
		       (Cs0, Al0) of
		<{Cs,Al}> when 'true' ->
		    %% Line 2574
		    {[{'cond',Cs}|[]],Al}
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2575
	  <Imm = {'error',_cor44},Al> when 'true' ->
	      %% Line 2576
	      {[Imm|[]],Al}
	  %% Line 2577
	  <{'list',Imm0,Dst},Al> when 'true' ->
	      let <Imm1> =
		  %% Line 2578
		  apply 'enc_opt_hoist_align'/1
		      (Imm0)
	      in  %% Line 2579
		  case apply 'enc_opt_al_1'/2
			   (Imm1, 0) of
		    <{Imm,_cor45}> when 'true' ->
			%% Line 2580
			{[{'list',Imm,Dst}|[]],Al}
		    ( <_cor6> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor6})
		      -| ['compiler_generated'] )
		  end
	  %% Line 2581
	  <{'put_bits',V,N,[U|['align']]},Al0>
	      when try
		    let <_cor7> =
			call 'erlang':'rem'
			    (Al0, 8)
		    in  call 'erlang':'=:='
			    (_cor7, 0)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor11> =
		  %% Line 2582
		  case <> of
		    %% Line 2583
		    <>
			when call 'erlang':'is_integer'
			      (N) ->
			call 'erlang':'*'
			    (N, U)
		    %% Line 2584
		    <>
			when try
			      let <_cor8> =
				  call 'erlang':'=:='
				      (N, 'binary')
			      in  let <_cor9> =
				      call 'erlang':'rem'
					  (U, 8)
				  in  let <_cor10> =
					  call 'erlang':'=:='
					      (_cor9, 0)
				      in  call 'erlang':'and'
					      (_cor8, _cor10)
			  of <Try> ->
			      Try
			  catch <T,R> ->
			      'false' ->
			0
		    %% Line 2585
		    <> when 'true' ->
			'unknown'
		  end
	      in  %% Line 2587
		  {[{'put_bits',V,N,[U|[]]}|[]],_cor11}
	  %% Line 2588
	  <{'put_bits',V,'binary',[U|['align']]},Al0>
	      when call 'erlang':'is_integer'
		    (Al0) ->
	      let <_cor13> =
		  %% Line 2589
		  call 'erlang':'rem'
		      (Al0, 8)
	      in  let <N> =
		      %% Line 2589
		      call 'erlang':'-'
			  (8, _cor13)
		  in  let <_cor16> =
			  %% Line 2590
			  case call 'erlang':'rem'
				   (U, 8) of
			    %% Line 2591
			    <0> when 'true' ->
				0
			    %% Line 2592
			    <_cor46> when 'true' ->
				'unknown'
			  end
		      in  %% Line 2594
			  {[{'put_bits',0,N,[1]}|[{'put_bits',V,'binary',[U|[]]}|[]]],_cor16}
	  %% Line 2595
	  <{'put_bits',V,N0,[U|['align']]},Al0>
	      when let <_cor18> =
		    call 'erlang':'is_integer'
			(N0)
		in  let <_cor19> =
			call 'erlang':'is_integer'
			    (Al0)
		    in  call 'erlang':'and'
			    (_cor18, _cor19) ->
	      let <_cor20> =
		  %% Line 2596
		  call 'erlang':'rem'
		      (Al0, 8)
	      in  let <_cor21> =
		      %% Line 2596
		      call 'erlang':'-'
			  (8, _cor20)
		  in  let <N> =
			  %% Line 2596
			  call 'erlang':'+'
			      (N0, _cor21)
		      in  let <Al> =
			      %% Line 2597
			      call 'erlang':'*'
				  (N0, U)
			  in  %% Line 2598
			      {[{'put_bits',V,N,[1]}|[]],Al}
	  %% Line 2599
	  <PutBits = {'put_bits',_cor47,N,[U|['align']]},_cor48>
	      when call 'erlang':'is_integer'
		    (N) ->
	      let <_cor24> =
		  %% Line 2600
		  call 'erlang':'*'
		      (N, U)
	      in  %% Line 2600
		  {[PutBits|[]],_cor24}
	  %% Line 2601
	  <PutBits = {'put_bits',_cor49,'binary',[U|['align']]},_cor50>
	      when try
		    let <_cor25> =
			call 'erlang':'rem'
			    (U, 8)
		    in  call 'erlang':'=:='
			    (_cor25, 0)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 2602
	      {[PutBits|[]],0}
	  %% Line 2603
	  <PutBits = {'put_bits',_cor51,N,[U|[]]},Al>
	      when let <_cor26> =
		    call 'erlang':'is_integer'
			(N)
		in  let <_cor27> =
			call 'erlang':'is_integer'
			    (Al)
		    in  call 'erlang':'and'
			    (_cor26, _cor27) ->
	      let <_cor28> =
		  %% Line 2604
		  call 'erlang':'*'
		      (N, U)
	      in  let <_cor29> =
		      %% Line 2604
		      call 'erlang':'+'
			  (Al, _cor28)
		  in  %% Line 2604
		      {[PutBits|[]],_cor29}
	  %% Line 2605
	  <PutBits = {'put_bits',_cor52,'binary',[U|[]]},Al>
	      when try
		    let <_cor30> =
			call 'erlang':'rem'
			    (U, 8)
		    in  call 'erlang':'=:='
			    (_cor30, 0)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 2606
	      {[PutBits|[]],Al}
	  %% Line 2607
	  <Imm = {'set',_cor53,_cor54},Al> when 'true' ->
	      %% Line 2608
	      {[Imm|[]],Al}
	  %% Line 2609
	  <Imm = {'sub',_cor55,_cor56,_cor57},Al> when 'true' ->
	      %% Line 2610
	      {[Imm|[]],Al}
	  %% Line 2611
	  <Imm = {'try',_cor58,_cor59,_cor60,_cor61},Al> when 'true' ->
	      %% Line 2612
	      {[Imm|[]],Al}
	  %% Line 2613
	  <Imm,_cor62> when 'true' ->
	      %% Line 2614
	      {[Imm|[]],'unknown'}
	end
'enc_opt_al_cond'/2 =
    %% Line 2616
    fun (_cor1,_cor0) ->
	%% Line 2617
	apply 'enc_opt_al_cond_1'/4
	    (_cor1, _cor0, [], [])
'enc_opt_al_cond_1'/4 =
    %% Line 2619
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[C = ['_'|[{'error',_cor15}|[]]]|Cs],Al,CAcc,AAcc> when 'true' ->
	      %% Line 2620
	      apply 'enc_opt_al_cond_1'/4
		  (Cs, Al, [C|CAcc], AAcc)
	  %% Line 2621
	  <[[C|Act0]|Cs0],Al0,CAcc,AAcc> when 'true' ->
	      %% Line 2622
	      case apply 'enc_opt_al_1'/2
		       (Act0, Al0) of
		<{Act,Al1}> when 'true' ->
		    let <_cor5> =
			%% Line 2623
			case <> of
			  %% Line 2624
			  <>
			      when call 'erlang':'=:='
				    (Al1,
				     'unknown') ->
			      Al1
			  %% Line 2625
			  <> when 'true' ->
			      call 'erlang':'rem'
				  (Al1, 8)
			end
		    in  %% Line 2627
			apply 'enc_opt_al_cond_1'/4
			    (Cs0, Al0, [[C|Act]|CAcc], [_cor5|AAcc])
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2628
	  <[],_cor16,CAcc,AAcc> when 'true' ->
	      let <_cor8> =
		  %% Line 2629
		  case call 'lists':'usort'
			   (AAcc) of
		    %% Line 2630
		    <[]> when 'true' ->
			'unknown'
		    %% Line 2631
		    <[Al0|[]]> when 'true' ->
			Al0
		    %% Line 2632
		    <[_cor17|_cor18]> when 'true' ->
			'unknown'
		    ( <_cor7> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor7})
		      -| ['compiler_generated'] )
		  end
	      in  let <_cor10> =
		      %% Line 2634
		      call 'lists':'reverse'
			  (CAcc)
		  in  %% Line 2634
		      {_cor10,_cor8}
	  ( <_cor14,_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12,_cor11})
		  -| [{'function_name',{'enc_opt_al_cond_1',4}}] )
	    -| ['compiler_generated'] )
	end
'enc_opt_hoist_align'/1 =
    %% Line 2636
    fun (_cor0) ->
	case _cor0 of
	  <Imm = [{'cond',Cs0}|[{'put_bits',0,0,[1|['align']]}]]> when 'true' ->
	      %% Line 2637
	      try
		  let <_cor6> =
		      %% Line 2638
		      ( letrec
			    'lc$^0'/1 =
				fun (_cor3) ->
				    case _cor3 of
				      <[C|_cor2]> when 'true' ->
					  let <_cor4> =
					      apply 'insert_align_last'/1
						  (C)
					  in  let <_cor5> =
						  apply 'lc$^0'/1
						      (_cor2)
					      in  ( [_cor4|_cor5]
						    -| ['compiler_generated'] )
				      <[]> when 'true' ->
					  []
				      ( <_cor3> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_cor3})
					      -| [{'function_name',{'lc$^0',1}}] )
					-| ['compiler_generated'] )
				    end
			in  apply 'lc$^0'/1
				(Cs0)
			-| ['list_comprehension'] )
		  in  %% Line 2639
		      [{'cond',_cor6}|[]]
	      of <_cor8> ->
		  _cor8
	      catch <_cor11,_cor10,_cor9> ->
		  case <_cor11,_cor10,_cor9> of
		    %% Line 2641
		    <'throw','impossible',_cor13> when 'true' ->
			%% Line 2642
			Imm
		    ( <_cor11,_cor10,_cor9> when 'true' ->
			  primop 'raise'
			      (_cor9, _cor10)
		      -| ['compiler_generated'] )
		  end
	  %% Line 2644
	  <Imm> when 'true' ->
	      Imm
	end
'insert_align_last'/1 =
    %% Line 2646
    fun (_cor0) ->
	case _cor0 of
	  <C = [_cor4|[{'error',_cor5}|[]]]> when 'true' ->
	      %% Line 2647
	      C
	  %% Line 2648
	  <[H|T]> when 'true' ->
	      %% Line 2649
	      case call 'lists':'last'
		       (T) of
		%% Line 2650
		<{'put_bits',_cor6,_cor7,_cor8}> when 'true' ->
		    let <_cor1> =
			%% Line 2651
			call 'erlang':'++'
			    (T, [{'put_bits',0,0,[1|['align']]}])
		    in  %% Line 2651
			[H|_cor1]
		%% Line 2652
		<_cor9> when 'true' ->
		    %% Line 2653
		    call 'erlang':'throw'
			('impossible')
	      end
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'insert_align_last',1}}] )
	    -| ['compiler_generated'] )
	end
'per_fixup'/1 =
    %% Line 2662
    fun (_cor0) ->
	case _cor0 of
	  <[H = {'apply',_cor31,_cor32}|T]> when 'true' ->
	      let <_cor1> =
		  %% Line 2663
		  apply 'per_fixup'/1
		      (T)
	      in  %% Line 2663
		  [H|_cor1]
	  %% Line 2664
	  <[{'block',Block}|T]> when 'true' ->
	      let <_cor2> =
		  %% Line 2665
		  apply 'per_fixup'/1
		      (Block)
	      in  let <_cor3> =
		      %% Line 2665
		      apply 'per_fixup'/1
			  (T)
		  in  %% Line 2665
		      [{'block',_cor2}|_cor3]
	  %% Line 2666
	  <[H = {'assign',_cor33,_cor34}|T]> when 'true' ->
	      let <_cor4> =
		  %% Line 2667
		  apply 'per_fixup'/1
		      (T)
	      in  %% Line 2667
		  [H|_cor4]
	  %% Line 2668
	  <[{'cond',Cs0}|T]> when 'true' ->
	      let <_cor10> =
		  %% Line 2669
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor7) ->
				case _cor7 of
				  <[[C|Act]|_cor6]> when 'true' ->
				      let <_cor8> =
					  apply 'per_fixup'/1
					      (Act)
				      in  let <_cor9> =
					      apply 'lc$^0'/1
						  (_cor6)
					  in  ( [[C|_cor8]|_cor9]
						-| ['compiler_generated'] )
				  ( <[_cor5|_cor6]> when 'true' ->
					apply 'lc$^0'/1
					    (_cor6)
				    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor7> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor7})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (Cs0)
		    -| ['list_comprehension'] )
	      in  let <_cor12> =
		      %% Line 2670
		      apply 'per_fixup'/1
			  (T)
		  in  %% Line 2670
		      [{'cond',_cor10}|_cor12]
	  %% Line 2671
	  <[H = {'call',_cor35,_cor36,_cor37}|T]> when 'true' ->
	      let <_cor13> =
		  %% Line 2672
		  apply 'per_fixup'/1
		      (T)
	      in  %% Line 2672
		  [H|_cor13]
	  %% Line 2673
	  <[H = {'call',_cor38,_cor39,_cor40,_cor41}|T]> when 'true' ->
	      let <_cor14> =
		  %% Line 2674
		  apply 'per_fixup'/1
		      (T)
	      in  %% Line 2674
		  [H|_cor14]
	  %% Line 2675
	  <[H = {'call_gen',_cor42,_cor43,_cor44,_cor45,_cor46}|T]> when 'true' ->
	      let <_cor15> =
		  %% Line 2676
		  apply 'per_fixup'/1
		      (T)
	      in  %% Line 2676
		  [H|_cor15]
	  %% Line 2677
	  <[H = {'error',_cor47}|T]> when 'true' ->
	      let <_cor16> =
		  %% Line 2678
		  apply 'per_fixup'/1
		      (T)
	      in  %% Line 2678
		  [H|_cor16]
	  %% Line 2679
	  <[{'lc',B,V,L}|T]> when 'true' ->
	      let <_cor17> =
		  %% Line 2680
		  apply 'per_fixup'/1
		      (B)
	      in  let <_cor18> =
		      %% Line 2680
		      apply 'per_fixup'/1
			  (T)
		  in  %% Line 2680
		      [{'lc',_cor17,V,L}|_cor18]
	  %% Line 2681
	  <[{'lc',B,V,L,Dst}|T]> when 'true' ->
	      let <_cor19> =
		  %% Line 2682
		  apply 'per_fixup'/1
		      (B)
	      in  let <_cor20> =
		      %% Line 2682
		      apply 'per_fixup'/1
			  (T)
		  in  %% Line 2682
		      [{'lc',_cor19,V,L,Dst}|_cor20]
	  %% Line 2683
	  <[{'list',Imm,Dst}|T]> when 'true' ->
	      let <_cor21> =
		  %% Line 2684
		  apply 'per_fixup'/1
		      (Imm)
	      in  let <_cor22> =
		      %% Line 2684
		      apply 'per_fixup'/1
			  (T)
		  in  %% Line 2684
		      [{'list',_cor21,Dst}|_cor22]
	  %% Line 2685
	  <[H = {'set',_cor48,_cor49}|T]> when 'true' ->
	      let <_cor23> =
		  %% Line 2686
		  apply 'per_fixup'/1
		      (T)
	      in  %% Line 2686
		  [H|_cor23]
	  %% Line 2687
	  <[H = {'sub',_cor50,_cor51,_cor52}|T]> when 'true' ->
	      let <_cor24> =
		  %% Line 2688
		  apply 'per_fixup'/1
		      (T)
	      in  %% Line 2688
		  [H|_cor24]
	  %% Line 2689
	  <[{'try',Try0,{P,Succ0},Else0,Dst}|T]> when 'true' ->
	      let <Try> =
		  %% Line 2690
		  apply 'per_fixup'/1
		      (Try0)
	      in  let <Succ> =
		      %% Line 2691
		      apply 'per_fixup'/1
			  (Succ0)
		  in  let <Else> =
			  %% Line 2692
			  apply 'per_fixup'/1
			      (Else0)
		      in  let <_cor28> =
			      %% Line 2693
			      apply 'per_fixup'/1
				  (T)
			  in  %% Line 2693
			      [{'try',Try,{P,Succ},Else,Dst}|_cor28]
	  %% Line 2694
	  <L = [{'put_bits',_cor53,_cor54,_cor55}|_cor56]> when 'true' ->
	      %% Line 2695
	      apply 'fixup_put_bits'/1
		  (L)
	  %% Line 2696
	  <[H = {'var',_cor57}|T]> when 'true' ->
	      let <_cor29> =
		  %% Line 2697
		  apply 'per_fixup'/1
		      (T)
	      in  %% Line 2697
		  [H|_cor29]
	  %% Line 2698
	  <[]> when 'true' ->
	      []
	  ( <_cor30> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor30})
		  -| [{'function_name',{'per_fixup',1}}] )
	    -| ['compiler_generated'] )
	end
'fixup_put_bits'/1 =
    %% Line 2700
    fun (_cor0) ->
	case _cor0 of
	  <[{'put_bits',0,0,[_cor5|['align']]}|T]> when 'true' ->
	      let <_cor1> =
		  %% Line 2701
		  apply 'fixup_put_bits'/1
		      (T)
	      in  %% Line 2701
		  ['align'|_cor1]
	  %% Line 2702
	  <[{'put_bits',0,0,_cor6}|T]> when 'true' ->
	      %% Line 2703
	      apply 'fixup_put_bits'/1
		  (T)
	  %% Line 2704
	  <[{'put_bits',V,N,[U|['align']]}|T]> when 'true' ->
	      let <_cor2> =
		  %% Line 2705
		  apply 'fixup_put_bits'/1
		      (T)
	      in  %% Line 2705
		  ['align'|[{'put_bits',V,N,[U|[]]}|_cor2]]
	  %% Line 2706
	  <[H = {'put_bits',_cor7,_cor8,_cor9}|T]> when 'true' ->
	      let <_cor3> =
		  %% Line 2707
		  apply 'fixup_put_bits'/1
		      (T)
	      in  %% Line 2707
		  [H|_cor3]
	  %% Line 2708
	  <Other> when 'true' ->
	      apply 'per_fixup'/1
		  (Other)
	end
'effective_constraint'/2 =
    %% Line 2723
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'integer',[{Root = {_cor13,_cor14},_cor15}|_X_Rest]> when 'true' ->
	      %% Line 2726
	      [{Root,[]}|[]]
	  %% Line 2727
	  <'integer',C> when 'true' ->
	      let <SVs> =
		  %% Line 2728
		  apply 'get_constraints'/2
		      (C, 'SingleValue')
	      in  let <SV> =
		      %% Line 2729
		      apply 'effective_constr'/2
			  ('SingleValue', SVs)
		  in  let <VRs> =
			  %% Line 2730
			  apply 'get_constraints'/2
			      (C, 'ValueRange')
		      in  let <VR> =
			      %% Line 2731
			      apply 'effective_constr'/2
				  ('ValueRange', VRs)
			  in  %% Line 2732
			      apply 'greatest_common_range'/2
				  (SV, VR)
	  %% Line 2733
	  <'bitstring',C> when 'true' ->
	      %% Line 2734
	      case apply 'get_constraint'/2
		       (C, 'SizeConstraint') of
		%% Line 2735
		<Range = {{Lb,Ub},[]}>
		    when call 'erlang':'is_integer'
			  (Lb) ->
		    %% Line 2736
		    case <> of
		      %% Line 2737
		      <>
			  when let <_cor6> =
				call 'erlang':'is_integer'
				    (Ub)
			    in  let <_cor7> =
				    call 'erlang':'<'
					(Ub, 65536)
				in  call 'erlang':'and'
					(_cor6, _cor7) ->
			  %% Line 2738
			  Range
		      %% Line 2739
		      <> when 'true' ->
			  %% Line 2740
			  'no'
		    end
		%% Line 2742
		<Range = {Lb,Ub}>
		    when call 'erlang':'is_integer'
			  (Lb) ->
		    %% Line 2743
		    case <> of
		      %% Line 2744
		      <>
			  when let <_cor8> =
				call 'erlang':'is_integer'
				    (Ub)
			    in  let <_cor9> =
				    call 'erlang':'<'
					(Ub, 65536)
				in  call 'erlang':'and'
					(_cor8, _cor9) ->
			  %% Line 2745
			  case <> of
			    %% Line 2746
			    <>
				when call 'erlang':'=:='
				      (Lb,
				       Ub) ->
				Lb
			    %% Line 2747
			    <> when 'true' ->
				Range
			  end
		      %% Line 2749
		      <> when 'true' ->
			  %% Line 2750
			  'no'
		    end
		%% Line 2752
		<'no'> when 'true' ->
		    %% Line 2753
		    'no'
		( <_cor10> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor10})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11})
		  -| [{'function_name',{'effective_constraint',2}}] )
	    -| ['compiler_generated'] )
	end
'effective_constr'/2 =
    %% Line 2756
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <_cor22,[]> when 'true' ->
	      []
	  %% Line 2757
	  <'SingleValue',List> when 'true' ->
	      let <_cor4> =
		  %% Line 2758
		  ( fun (_cor2) ->
			call 'erlang':'element'
			    (2, _cor2)
		    -| [{'id',{0,0,'-effective_constr/2-fun-0-'}}] )
	      in  let <_cor5> =
		      %% Line 2758
		      call 'lists':'map'
			  (_cor4, List)
		  in  let <SVList> =
			  %% Line 2758
			  call 'lists':'flatten'
			      (_cor5)
		      in  %% Line 2761
			  case call 'lists':'usort'
				   (SVList) of
			    %% Line 2762
			    <[N|[]]> when 'true' ->
				%% Line 2763
				[{'SingleValue',N}|[]]
			    %% Line 2764
			    <L = [_cor23|_cor24]> when 'true' ->
				let <_cor8> =
				    %% Line 2765
				    apply 'least_Lb'/1
					(L)
				in  let <_cor7> =
					%% Line 2765
					apply 'greatest_Ub'/1
					    (L)
				    in  %% Line 2765
					[{'ValueRange',{_cor8,_cor7}}|[]]
			    ( <_cor9> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor9})
			      -| ['compiler_generated'] )
			  end
	  %% Line 2767
	  <'ValueRange',List> when 'true' ->
	      let <_cor12> =
		  %% Line 2768
		  ( fun (_cor10) ->
			case _cor10 of
			  <{_cor25,{Lb,_cor26}}> when 'true' ->
			      Lb
			  ( <_cor11> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_cor11})
				  -| [{'function_name',{'-effective_constr/2-fun-1-',1}}] )
			    -| ['compiler_generated'] )
			end
		    -| [{'id',{0,0,'-effective_constr/2-fun-1-'}}] )
	      in  let <LBs> =
		      %% Line 2768
		      call 'lists':'map'
			  (_cor12, List)
		  in  let <_cor16> =
			  %% Line 2769
			  ( fun (_cor14) ->
				case _cor14 of
				  <{_cor27,{_cor28,Ub}}> when 'true' ->
				      Ub
				  ( <_cor15> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor15})
					  -| [{'function_name',{'-effective_constr/2-fun-2-',1}}] )
				    -| ['compiler_generated'] )
				end
			    -| [{'id',{0,0,'-effective_constr/2-fun-2-'}}] )
		      in  let <UBs> =
			      %% Line 2769
			      call 'lists':'map'
				  (_cor16, List)
			  in  let <Lb> =
				  %% Line 2770
				  apply 'least_Lb'/1
				      (LBs)
			      in  let <_cor19> =
				      %% Line 2771
				      call 'lists':'max'
					  (UBs)
				  in  %% Line 2771
				      [{'ValueRange',{Lb,_cor19}}|[]]
	  ( <_cor21,_cor20> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor21,_cor20})
		  -| [{'function_name',{'effective_constr',2}}] )
	    -| ['compiler_generated'] )
	end
'greatest_common_range'/2 =
    %% Line 2773
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],VR> when 'true' ->
	      %% Line 2774
	      VR
	  %% Line 2775
	  <SV,[]> when 'true' ->
	      %% Line 2776
	      SV
	  %% Line 2777
	  <[{_cor12,Int}|[]],[{_cor13,{'MIN',Ub}}|[]]>
	      when let <_cor2> =
		    %% Line 2778
		    call 'erlang':'is_integer'
			(Int)
		in  let <_cor3> =
			%% Line 2778
			call 'erlang':'>'
			    (Int, Ub)
		    in  %% Line 2778
			call 'erlang':'and'
			    (_cor2, _cor3) ->
	      %% Line 2779
	      [{'ValueRange',{'MIN',Int}}|[]]
	  %% Line 2780
	  <[{_cor14,Int}|[]],[{_cor15,{Lb,Ub}}|[]]>
	      when let <_cor4> =
		    %% Line 2781
		    call 'erlang':'is_integer'
			(Int)
		in  let <_cor5> =
			%% Line 2781
			call 'erlang':'<'
			    (Int, Lb)
		    in  %% Line 2781
			call 'erlang':'and'
			    (_cor4, _cor5) ->
	      %% Line 2782
	      [{'ValueRange',{Int,Ub}}|[]]
	  %% Line 2783
	  <[{_cor16,Int}|[]],VR = [{_cor17,{_X_Lb,_X_Ub}}|[]]>
	      when call 'erlang':'is_integer'
		    (Int) ->
	      %% Line 2784
	      VR
	  %% Line 2785
	  <[{_cor18,L}|[]],[{_cor19,{Lb,Ub}}|[]]>
	      when call 'erlang':'is_list'
		    (L) ->
	      let <Min> =
		  %% Line 2786
		  apply 'least_Lb'/1
		      ([Lb|L])
	      in  let <Max> =
		      %% Line 2787
		      apply 'greatest_Ub'/1
			  ([Ub|L])
		  in  %% Line 2788
		      [{'ValueRange',{Min,Max}}|[]]
	  %% Line 2789
	  <[{_cor20,{Lb1,Ub1}}|[]],[{_cor21,{Lb2,Ub2}}|[]]> when 'true' ->
	      let <Min> =
		  %% Line 2790
		  apply 'least_Lb'/1
		      ([Lb1|[Lb2|[]]])
	      in  let <Max> =
		      %% Line 2791
		      apply 'greatest_Ub'/1
			  ([Ub1|[Ub2|[]]])
		  in  %% Line 2792
		      [{'ValueRange',{Min,Max}}|[]]
	  ( <_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10})
		  -| [{'function_name',{'greatest_common_range',2}}] )
	    -| ['compiler_generated'] )
	end
'least_Lb'/1 =
    %% Line 2795
    fun (_cor0) ->
	%% Line 2796
	case call 'lists':'member'
		 ('MIN', _cor0) of
	  %% Line 2797
	  <'true'> when 'true' ->
	      'MIN'
	  %% Line 2798
	  <'false'> when 'true' ->
	      call 'lists':'min'
		  (_cor0)
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor1})
	    -| ['compiler_generated'] )
	end
'greatest_Ub'/1 =
    %% Line 2801
    fun (_cor0) ->
	%% Line 2802
	case call 'lists':'member'
		 ('MAX', _cor0) of
	  %% Line 2803
	  <'true'> when 'true' ->
	      'MAX'
	  %% Line 2804
	  <'false'> when 'true' ->
	      call 'lists':'max'
		  (_cor0)
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor1})
	    -| ['compiler_generated'] )
	end
'get_constraint'/2 =
    %% Line 2807
    fun (_cor1,_cor0) ->
	%% Line 2808
	case call 'lists':'keyfind'
		 (_cor0, 1, _cor1) of
	  %% Line 2809
	  <'false'> when 'true' ->
	      'no'
	  %% Line 2810
	  <{_cor5,V}> when 'true' ->
	      V
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor2})
	    -| ['compiler_generated'] )
	end
'get_constraints'/2 =
    %% Line 2813
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[Pair = {Key,_cor5}|T],_cor6>
	      when call 'erlang':'=:='
		    (_cor6,
		     Key) ->
	      let <_cor2> =
		  %% Line 2814
		  apply 'get_constraints'/2
		      (T, Key)
	      in  %% Line 2814
		  [Pair|_cor2]
	  %% Line 2815
	  <[_cor7|T],Key> when 'true' ->
	      %% Line 2816
	      apply 'get_constraints'/2
		  (T, Key)
	  %% Line 2817
	  <[],_cor8> when 'true' ->
	      []
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'get_constraints',2}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('asn1ct_imm')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('asn1ct_imm', _cor0)
end