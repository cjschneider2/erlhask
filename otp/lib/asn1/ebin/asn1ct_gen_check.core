module 'asn1ct_gen_check' ['emit'/3,
			   'module_info'/0,
			   'module_info'/1]
    attributes []
'emit'/3 =
    %% Line 28
    fun (_cor2,_cor1,_cor0) ->
	let <Key> = {_cor2,_cor1}
	in  let <Gen> =
		%% Line 30
		( fun (_cor6,_cor5) ->
		      let <_cor4> =
			  %% Line 31
			  apply 'gen'/3
			      (_cor5, _cor2, _cor1)
		      in  %% Line 31
			  call 'file':'write'
			      (_cor6, _cor4)
		  -| [{'id',{0,0,'-emit/3-fun-0-'}}] )
	    in  do  %% Line 33
		    call 'asn1ct_gen':'emit'
			([32|[99|[97|[115|[101|[32]]]]]])
		    do  %% Line 34
			call 'asn1ct_func':'call_gen'
			    ([105|[115|[95|[100|[101|[102|[97|[117|[108|[116|[95]]]]]]]]]]], Key, Gen, [_cor0|[]])
			%% Line 35
			call 'asn1ct_gen':'emit'
			    ([[32|[111|[102]]]|['nl'|[[116|[114|[117|[101|[32|[45|[62|[32|[123|[91|[93|[44|[48|[125|[59]]]]]]]]]]]]]]]|['nl'|[[102|[97|[108|[115|[101|[32|[45|[62]]]]]]]]|['nl']]]]]])
'gen'/3 =
    %% Line 39
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Name,{'type',_cor11,T,_cor12,_cor13,_cor14},Default> when 'true' ->
	      let <NameStr> =
		  %% Line 40
		  call 'erlang':'atom_to_list'
		      (Name)
	      in  let <_cor7> =
		      %% Line 42
		      case apply 'do_gen'/2
			       (T, Default) of
			%% Line 43
			<{'literal',Literal}> when 'true' ->
			    let <_cor4> =
				%% Line 44
				apply 'term2str'/1
				    (Literal)
			    in  %% Line 44
				[NameStr|[[40]|[_cor4|[[41|[32|[45|[62|[10]]]]]|[[116|[114|[117|[101|[59|[10]]]]]]|%% Line 45
														   [NameStr|[[40|[95|[41|[32|[45|[62|[10]]]]]]]|[[102|[97|[108|[115|[101|[46|[10|[10]]]]]]]]]]]]]]]]
			%% Line 46
			<{'exception',Func,Args}> when 'true' ->
			    let <_cor5> =
				%% Line 48
				apply 'arg2str'/1
				    (Args)
			    in  %% Line 47
				[NameStr|[[40|[86|[97|[108|[117|[101|[41|[32|[45|[62|[10]]]]]]]]]]]|%% Line 48
												    [[116|[114|[121|[32]]]]|[Func|[[40|[86|[97|[108|[117|[101]]]]]]|[_cor5|[[41|[32|[111|[102|[10]]]]]|[[95|[32|[45|[62|[32|[116|[114|[117|[101|[10|[99|[97|[116|[99|[104|[32|[116|[104|[114|[111|[119|[58|[102|[97|[108|[115|[101|[32|[45|[62|[32|[102|[97|[108|[115|[101|[10|[101|[110|[100|[46|[10|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
			( <_cor6> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor6})
			  -| ['compiler_generated'] )
		      end
		  in  %% Line 41
		      [NameStr|[[40|[97|[115|[110|[49|[95|[68|[69|[70|[65|[85|[76|[84|[41|[32|[45|[62|[10]]]]]]]]]]]]]]]]]]|%% Line 42
															    [[116|[114|[117|[101|[59|[10]]]]]]|_cor7]]]
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'gen',3}}] )
	    -| ['compiler_generated'] )
	end
'do_gen'/2 =
    %% Line 54
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <_cor36,'asn1_NOVALUE'> when 'true' ->
	      %% Line 55
	      {'literal','asn1_NOVALUE'}
	  %% Line 56
	  <{'Externaltypereference',_cor37,M,T},Default> when 'true' ->
	      %% Line 57
	      case call 'asn1_db':'dbget'
		       (M, T) of
		<{'typedef',_cor38,_cor39,_cor40,{'type',_cor41,Td,_cor42,_cor43,_cor44}}> when 'true' ->
		    %% Line 58
		    apply 'do_gen'/2
			(Td, Default)
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 59
	  <'BOOLEAN',Default> when 'true' ->
	      %% Line 60
	      {'literal',Default}
	  %% Line 61
	  <{'BIT STRING',[]},Default> when 'true' ->
	      %% Line 62
	      case call 'erlang':'is_bitstring'
		       (Default) of
		<'true'> when 'true' ->
		    %% Line 63
		    case call 'asn1ct':'use_legacy_types'
			     () of
		      %% Line 64
		      <'false'> when 'true' ->
			  %% Line 65
			  {'literal',Default}
		      %% Line 66
		      <'true'> when 'true' ->
			  let <_cor4> =
			      %% Line 67
			      apply 'need'/2
				  ('check_legacy_bitstring', 2)
			  in  %% Line 67
			      {'exception',_cor4,[Default|[]]}
		      ( <_cor5> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor5})
			-| ['compiler_generated'] )
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 69
	  <{'BIT STRING',NBL = [_cor45|_cor46]},Default> when 'true' ->
	      %% Line 70
	      apply 'do_named_bitstring'/2
		  (NBL, Default)
	  %% Line 71
	  <{'ENUMERATED',_cor47},Default> when 'true' ->
	      %% Line 72
	      {'literal',Default}
	  %% Line 73
	  <'INTEGER',Default> when 'true' ->
	      %% Line 74
	      {'literal',Default}
	  %% Line 75
	  <{'INTEGER',NNL},Default> when 'true' ->
	      let <_cor6> =
		  %% Line 76
		  apply 'need'/2
		      ('check_int', 3)
	      in  %% Line 76
		  {'exception',_cor6,[Default|[NNL|[]]]}
	  %% Line 77
	  <'NULL',Default> when 'true' ->
	      %% Line 78
	      {'literal',Default}
	  %% Line 79
	  <'OCTET STRING',Default> when 'true' ->
	      %% Line 80
	      case call 'erlang':'is_binary'
		       (Default) of
		<'true'> when 'true' ->
		    %% Line 81
		    case call 'asn1ct':'use_legacy_types'
			     () of
		      %% Line 82
		      <'false'> when 'true' ->
			  %% Line 83
			  {'literal',Default}
		      %% Line 84
		      <'true'> when 'true' ->
			  let <_cor8> =
			      %% Line 85
			      apply 'need'/2
				  ('check_octetstring', 2)
			  in  %% Line 85
			      {'exception',_cor8,[Default|[]]}
		      ( <_cor9> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor9})
			-| ['compiler_generated'] )
		    end
		( <_cor7> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor7})
		  -| ['compiler_generated'] )
	      end
	  %% Line 87
	  <'OBJECT IDENTIFIER',Default0> when 'true' ->
	      let <Default> =
		  %% Line 88
		  apply 'pre_process_oid'/1
		      (Default0)
	      in  let <_cor11> =
		      %% Line 89
		      apply 'need'/2
			  ('check_objectidentifier', 2)
		  in  %% Line 89
		      {'exception',_cor11,[Default|[]]}
	  %% Line 90
	  <{'CHOICE',Cs},Default> when 'true' ->
	      %% Line 91
	      case Default of
		<{Tag,Value}> when 'true' ->
		    let <_cor17> =
			%% Line 92
			( letrec
			      'lc$^0'/1 =
				  fun (_cor15) ->
				      case _cor15 of
					<[{'ComponentType',_cor48,T,Type,_cor49,_cor50,_cor51}|_cor14]>
					    when %% Line 93
					      call 'erlang':'=:='
						  (T,
						   Tag) ->
					    let <_cor16> =
						apply 'lc$^0'/1
						    (_cor14)
					    in  ( [Type|_cor16]
						  -| ['compiler_generated'] )
					( <[_cor13|_cor14]> when 'true' ->
					      apply 'lc$^0'/1
						  (_cor14)
					  -| ['compiler_generated'] )
					<[]> when 'true' ->
					    []
					( <_cor15> when 'true' ->
					      ( primop 'match_fail'
						    ({'function_clause',_cor15})
						-| [{'function_name',{'lc$^0',1}}] )
					  -| ['compiler_generated'] )
				      end
			  in  apply 'lc$^0'/1
				  (Cs)
			  -| ['list_comprehension'] )
		    in  %% Line 92
			case _cor17 of
			  <[Type|[]]> when 'true' ->
			      %% Line 94
			      ( case Type of
				  ( <( {'type',_cor52,_rec0,_cor53,_cor54,_cor55}
				       -| ['compiler_generated'] )> when 'true' ->
					case apply 'do_gen'/2
						 (_rec0, Value) of
					  %% Line 95
					  <{'literal',Lit}> when 'true' ->
					      %% Line 96
					      {'literal',{Tag,Lit}}
					  %% Line 97
					  <{'exception',Func0,Args}> when 'true' ->
					      let <Key> = {%% Line 98
						   Tag,%% Line 98
						       Func0,%% Line 98
							     Args}
					      in  let <Gen> =
						      %% Line 99
						      ( fun (_cor25,_cor24) ->
							    let <S> =
								%% Line 100
								apply 'gen_choice'/4
								    (_cor24, Tag, Func0, Args)
							    in  let <_cor57> =
								    %% Line 101
								    call 'file':'write'
									(_cor25, S)
								in  %% Line 101
								    case _cor57 of
								      <'ok'> when 'true' ->
									  ( _cor57
									    -| ['compiler_generated'] )
								      ( <_cor23> when 'true' ->
									    primop 'match_fail'
										({'badmatch',_cor23})
									-| ['compiler_generated'] )
								    end
							-| [{'id',{0,0,'-do_gen/2-fun-0-'}}] )
						  in  let <Func> =
							  %% Line 103
							  call 'asn1ct_func':'call_gen'
							      ([105|[115|[95|[100|[101|[102|[97|[117|[108|[116|[95|[99|[104|[111|[105|[99|[101]]]]]]]]]]]]]]]]], Key, Gen)
						      in  let <_cor30> =
							      %% Line 104
							      call 'erlang':'atom_to_list'
								  (Func)
							  in  %% Line 104
							      {'exception',_cor30,[]}
					  ( <_cor31> when 'true' ->
						primop 'match_fail'
						    ({'case_clause',_cor31})
					    -| ['compiler_generated'] )
					end
				    -| ['compiler_generated'] )
				  ( <_cor56> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','type'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			  ( <_cor18> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor18})
			    -| ['compiler_generated'] )
			end
		( <_cor12> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor12})
		  -| ['compiler_generated'] )
	      end
	  %% Line 106
	  <{'SEQUENCE',_cor58,_cor59,_cor60,Cs},Default> when 'true' ->
	      %% Line 107
	      apply 'do_seq_set'/2
		  (Cs, Default)
	  %% Line 108
	  <{'SEQUENCE OF',Type},Default> when 'true' ->
	      %% Line 109
	      apply 'do_sof'/2
		  (Type, Default)
	  %% Line 110
	  <{'SET',_cor61,_cor62,_cor63,Cs},Default> when 'true' ->
	      %% Line 111
	      apply 'do_seq_set'/2
		  (Cs, Default)
	  %% Line 112
	  <{'SET OF',Type},Default> when 'true' ->
	      %% Line 113
	      apply 'do_sof'/2
		  (Type, Default)
	  %% Line 114
	  <Type,Default> when 'true' ->
	      %% Line 115
	      case call 'asn1ct_gen':'unify_if_string'
		       (Type) of
		%% Line 116
		<'restrictedstring'> when 'true' ->
		    let <_cor32> =
			%% Line 117
			apply 'need'/2
			    ('check_restrictedstring', 2)
		    in  %% Line 117
			{'exception',_cor32,[Default|[]]}
		%% Line 118
		<_cor64> when 'true' ->
		    %% Line 120
		    {'literal',Default}
	      end
	end
'do_named_bitstring'/2 =
    %% Line 123
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <NBL,Default0>
	      when call 'erlang':'is_list'
		    (Default0) ->
	      let <Default> =
		  %% Line 124
		  call 'lists':'sort'
		      (Default0)
	      in  let <Bs> =
		      %% Line 125
		      call 'asn1ct_gen':'named_bitstring_value'
			  (Default, NBL)
		  in  let <_cor5> =
			  %% Line 126
			  case call 'asn1ct':'use_legacy_types'
				   () of
			    %% Line 127
			    <'false'> when 'true' ->
				'check_named_bitstring'
			    %% Line 128
			    <'true'> when 'true' ->
				'check_legacy_named_bitstring'
			    ( <_cor4> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor4})
			      -| ['compiler_generated'] )
			  end
		      in  let <_cor8> =
			      %% Line 130
			      apply 'need'/2
				  (_cor5, 4)
			  in  let <_cor7> =
				  %% Line 130
				  call 'erlang':'bit_size'
				      (Bs)
			      in  %% Line 130
				  {'exception',_cor8,[Default|[Bs|[_cor7|[]]]]}
	  %% Line 131
	  <_cor16,Default>
	      when call 'erlang':'is_bitstring'
		    (Default) ->
	      let <_cor10> =
		  %% Line 132
		  case call 'asn1ct':'use_legacy_types'
			   () of
		    %% Line 133
		    <'false'> when 'true' ->
			'check_named_bitstring'
		    %% Line 134
		    <'true'> when 'true' ->
			'check_legacy_named_bitstring'
		    ( <_cor9> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor9})
		      -| ['compiler_generated'] )
		  end
	      in  let <_cor13> =
		      %% Line 136
		      apply 'need'/2
			  (_cor10, 3)
		  in  let <_cor12> =
			  %% Line 136
			  call 'erlang':'bit_size'
			      (Default)
		      in  %% Line 136
			  {'exception',_cor13,[Default|[_cor12|[]]]}
	  ( <_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14})
		  -| [{'function_name',{'do_named_bitstring',2}}] )
	    -| ['compiler_generated'] )
	end
'do_seq_set'/2 =
    %% Line 138
    fun (_cor1,_cor0) ->
	let <Tag> =
	    %% Line 139
	    call 'erlang':'element'
		(1, _cor0)
	in  let <_cor7> =
		%% Line 140
		( letrec
		      'lc$^0'/1 =
			  fun (_cor5) ->
			      case _cor5 of
				<[{'ComponentType',_cor31,_cor32,T,_cor33,_cor34,_cor35}|_cor4]> when 'true' ->
				    let <_cor6> =
					apply 'lc$^0'/1
					    (_cor4)
				    in  ( [T|_cor6]
					  -| ['compiler_generated'] )
				( <[_cor3|_cor4]> when 'true' ->
				      apply 'lc$^0'/1
					  (_cor4)
				  -| ['compiler_generated'] )
				<[]> when 'true' ->
				    []
				( <_cor5> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_cor5})
					-| [{'function_name',{'lc$^0',1}}] )
				  -| ['compiler_generated'] )
			      end
		  in  apply 'lc$^0'/1
			  (_cor1)
		  -| ['list_comprehension'] )
	    in  let <_cor9> =
		    %% Line 141
		    call 'erlang':'tuple_to_list'
			(_cor0)
		in  let <_cor10> =
			%% Line 141
			call 'erlang':'tl'
			    (_cor9)
		    in  let <Cs> =
			    %% Line 141
			    apply 'components'/2
				(_cor7, _cor10)
			in  %% Line 142
			    case apply 'are_all_literals'/1
				     (Cs) of
			      %% Line 143
			      <'true'> when 'true' ->
				  let <_cor16> =
				      %% Line 144
				      ( letrec
					    'lc$^1'/1 =
						fun (_cor14) ->
						    case _cor14 of
						      <[{'literal',L}|_cor13]> when 'true' ->
							  let <_cor15> =
							      apply 'lc$^1'/1
								  (_cor13)
							  in  ( [L|_cor15]
								-| ['compiler_generated'] )
						      ( <[_cor12|_cor13]> when 'true' ->
							    apply 'lc$^1'/1
								(_cor13)
							-| ['compiler_generated'] )
						      <[]> when 'true' ->
							  []
						      ( <_cor14> when 'true' ->
							    ( primop 'match_fail'
								  ({'function_clause',_cor14})
							      -| [{'function_name',{'lc$^1',1}}] )
							-| ['compiler_generated'] )
						    end
					in  apply 'lc$^1'/1
						(Cs)
					-| ['list_comprehension'] )
				  in  let <Literal> =
					  %% Line 144
					  call 'erlang':'list_to_tuple'
					      ([Tag|_cor16])
				      in  %% Line 145
					  {'literal',Literal}
			      %% Line 146
			      <'false'> when 'true' ->
				  let <Key> = {%% Line 147
				       Cs,_cor0}
				  in  let <Gen> =
					  %% Line 148
					  ( fun (_cor22,_cor21) ->
						let <S> =
						    %% Line 149
						    apply 'gen_components'/3
							(_cor21, Tag, Cs)
						in  let <_cor36> =
							%% Line 150
							call 'file':'write'
							    (_cor22, S)
						    in  %% Line 150
							case _cor36 of
							  <'ok'> when 'true' ->
							      ( _cor36
								-| ['compiler_generated'] )
							  ( <_cor20> when 'true' ->
								primop 'match_fail'
								    ({'badmatch',_cor20})
							    -| ['compiler_generated'] )
							end
					    -| [{'id',{0,0,'-do_seq_set/2-fun-0-'}}] )
				      in  let <Func> =
					      %% Line 152
					      call 'asn1ct_func':'call_gen'
						  ([105|[115|[95|[100|[101|[102|[97|[117|[108|[116|[95|[99|[115|[95]]]]]]]]]]]]]], Key, Gen)
					  in  let <_cor27> =
						  %% Line 153
						  call 'erlang':'atom_to_list'
						      (Func)
					      in  %% Line 153
						  {'exception',_cor27,[]}
			      ( <_cor28> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor28})
				-| ['compiler_generated'] )
			    end
'do_sof'/2 =
    %% Line 156
    fun (_cor1,_cor0) ->
	let <Default> =
	    %% Line 157
	    call 'lists':'sort'
		(_cor0)
	in  let <_cor3> =
		%% Line 158
		call 'erlang':'length'
		    (Default)
	    in  let <Cs0> =
		    %% Line 158
		    call 'lists':'duplicate'
			(_cor3, _cor1)
		in  let <Cs> =
			%% Line 159
			apply 'components'/2
			    (Cs0, Default)
		    in  %% Line 160
			case apply 'are_all_literals'/1
				 (Cs) of
			  %% Line 161
			  <'true'> when 'true' ->
			      let <_cor10> =
				  %% Line 162
				  ( letrec
					'lc$^0'/1 =
					    fun (_cor8) ->
						case _cor8 of
						  <[{'literal',Lit}|_cor7]> when 'true' ->
						      let <_cor9> =
							  apply 'lc$^0'/1
							      (_cor7)
						      in  ( [Lit|_cor9]
							    -| ['compiler_generated'] )
						  ( <[_cor6|_cor7]> when 'true' ->
							apply 'lc$^0'/1
							    (_cor7)
						    -| ['compiler_generated'] )
						  <[]> when 'true' ->
						      []
						  ( <_cor8> when 'true' ->
							( primop 'match_fail'
							      ({'function_clause',_cor8})
							  -| [{'function_name',{'lc$^0',1}}] )
						    -| ['compiler_generated'] )
						end
				    in  apply 'lc$^0'/1
					    (Cs)
				    -| ['list_comprehension'] )
			      in  let <_cor12> =
				      %% Line 163
				      apply 'need'/2
					  ('check_literal_sof', 2)
				  in  %% Line 163
				      {'exception',_cor12,[_cor10|[]]}
			  %% Line 164
			  <'false'> when 'true' ->
			      let <Gen> =
				  %% Line 166
				  ( fun (_cor17,_cor16) ->
					let <S> =
					    %% Line 167
					    apply 'gen_sof'/2
						(_cor16, Cs)
					in  let <_cor26> =
						%% Line 168
						call 'file':'write'
						    (_cor17, S)
					    in  %% Line 168
						case _cor26 of
						  <'ok'> when 'true' ->
						      ( _cor26
							-| ['compiler_generated'] )
						  ( <_cor15> when 'true' ->
							primop 'match_fail'
							    ({'badmatch',_cor15})
						    -| ['compiler_generated'] )
						end
				    -| [{'id',{0,0,'-do_sof/2-fun-0-'}}] )
			      in  let <Func> =
				      %% Line 170
				      call 'asn1ct_func':'call_gen'
					  ([105|[115|[95|[100|[101|[102|[97|[117|[108|[116|[95|[115|[111|[102]]]]]]]]]]]]]], Cs, Gen)
				  in  let <_cor22> =
					  %% Line 171
					  call 'erlang':'atom_to_list'
					      (Func)
				      in  %% Line 171
					  {'exception',_cor22,[]}
			  ( <_cor23> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor23})
			    -| ['compiler_generated'] )
			end
'are_all_literals'/1 =
    %% Line 174
    fun (_cor0) ->
	case _cor0 of
	  <[{'literal',_cor2}|T]> when 'true' ->
	      %% Line 175
	      apply 'are_all_literals'/1
		  (T)
	  %% Line 176
	  <[_cor3|_cor4]> when 'true' ->
	      %% Line 177
	      'false'
	  %% Line 178
	  <[]> when 'true' ->
	      'true'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'are_all_literals',1}}] )
	    -| ['compiler_generated'] )
	end
'gen_components'/3 =
    %% Line 180
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 181
	    call 'erlang':'atom_to_list'
		(_cor2)
	in  let <_cor4> =
		%% Line 183
		apply 'term2str'/1
		    (_cor1)
	    in  let <_cor5> =
		    %% Line 183
		    apply 'gen_cs_1'/3
			(_cor0, 1, [])
		in  %% Line 181
		    [_cor3|[[40|[86|[97|[108|[117|[101|[41|[32|[45|[62|[10]]]]]]]]]]]|%% Line 182
										      [[99|[97|[115|[101|[32|[86|[97|[108|[117|[101|[32|[111|[102|[10]]]]]]]]]]]]]]|%% Line 183
																				    [[123]|[_cor4|_cor5]]]]]
'gen_cs_1'/3 =
    %% Line 185
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[{'literal',Lit}|T],I,Acc> when 'true' ->
	      let <_cor3> =
		  %% Line 186
		  apply 'term2str'/1
		      (Lit)
	      in  let <_cor4> =
		      %% Line 186
		      apply 'gen_cs_1'/3
			  (T, I, Acc)
		  in  %% Line 186
		      [[44|[10]]|[_cor3|_cor4]]
	  %% Line 187
	  <[H|T],I,Acc> when 'true' ->
	      let <_cor5> =
		  %% Line 188
		  call 'erlang':'integer_to_list'
		      (I)
	      in  let <Var> =
		      %% Line 188
		      [69|_cor5]
		  in  let <_cor7> =
			  %% Line 189
			  call 'erlang':'+'
			      (I, 1)
		      in  let <_cor8> =
			      %% Line 189
			      apply 'gen_cs_1'/3
				  (T, _cor7, [{Var,H}|Acc])
			  in  %% Line 189
			      [[44|[10]]|[Var|_cor8]]
	  %% Line 190
	  <[],_cor13,Acc> when 'true' ->
	      let <_cor9> =
		  %% Line 191
		  apply 'gen_cs_2'/2
		      (Acc, [])
	      in  %% Line 191
		  [[125|[32|[45|[62|[10]]]]]|_cor9]
	  ( <_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10})
		  -| [{'function_name',{'gen_cs_1',3}}] )
	    -| ['compiler_generated'] )
	end
'gen_cs_2'/2 =
    %% Line 193
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{Var,{'exception',Func,Args}}|T],Sep> when 'true' ->
	      let <_cor2> =
		  %% Line 194
		  apply 'arg2str'/1
		      (Args)
	      in  let <_cor3> =
		      %% Line 194
		      apply 'gen_cs_2'/2
			  (T, [44|[10]])
		  in  %% Line 194
		      [Sep|[Func|[[40]|[Var|[_cor2|[[41]|_cor3]]]]]]
	  %% Line 195
	  <[],_cor6> when 'true' ->
	      %% Line 196
	      [[59|[10]]|[[95|[32|[45|[62|[10|[116|[104|[114|[111|[119|[40|[102|[97|[108|[115|[101|[41|[10|[101|[110|[100|[46|[10]]]]]]]]]]]]]]]]]]]]]]]]]
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'gen_cs_2',2}}] )
	    -| ['compiler_generated'] )
	end
'gen_sof'/2 =
    %% Line 201
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 202
	    call 'erlang':'atom_to_list'
		(_cor1)
	in  let <_cor3> =
		%% Line 204
		call 'erlang':'length'
		    (_cor0)
	    in  let <_cor4> =
		    %% Line 204
		    call 'erlang':'integer_to_list'
			(_cor3)
		in  let <_cor5> =
			%% Line 207
			apply 'gen_sof_1'/2
			    (_cor0, 1)
		    in  %% Line 202
			[_cor2|[[40|[86|[97|[108|[117|[101|[41|[32|[45|[62|[10]]]]]]]]]]]|%% Line 203
											  [[99|[97|[115|[101|[32|[108|[101|[110|[103|[116|[104|[40|[86|[97|[108|[117|[101|[41|[32|[111|[102|[10]]]]]]]]]]]]]]]]]]]]]]|%% Line 204
																										      [_cor4|[[32|[45|[62|[32|[111|[107|[59|[10|[95|[32|[45|[62|[32|[116|[104|[114|[111|[119|[40|[102|[97|[108|[115|[101|[41|[10|[101|[110|[100|[44|[10|[84|[48|[32|[61|[32|[108|[105|[115|[116|[115|[58|[115|[111|[114|[116|[40|[86|[97|[108|[117|[101|[41]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|_cor5]]]]]
'gen_sof_1'/2 =
    %% Line 209
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{'exception',Func,Args}|Cs],I> when 'true' ->
	      let <NumStr> =
		  %% Line 210
		  call 'erlang':'integer_to_list'
		      (I)
	      in  let <H> =
		      %% Line 211
		      [72|NumStr]
		  in  let <T> =
			  %% Line 212
			  [84|NumStr]
		      in  let <_cor5> =
			      %% Line 213
			      call 'erlang':'-'
				  (I, 1)
			  in  let <_cor6> =
				  %% Line 213
				  call 'erlang':'integer_to_list'
				      (_cor5)
			      in  let <Prev> =
				      %% Line 213
				      [84|_cor6]
				  in  let <_cor9> =
					  %% Line 215
					  case Cs of
					    %% Line 216
					    <[]> when 'true' ->
						[]
					    %% Line 217
					    <[_cor15|_cor16]> when 'true' ->
						[[124]|[T|[]]]
					    ( <_cor8> when 'true' ->
						  primop 'match_fail'
						      ({'case_clause',_cor8})
					      -| ['compiler_generated'] )
					  end
				      in  let <_cor10> =
					      %% Line 219
					      apply 'arg2str'/1
						  (Args)
					  in  let <_cor11> =
						  %% Line 219
						  call 'erlang':'+'
						      (I, 1)
					      in  let <_cor12> =
						      %% Line 219
						      apply 'gen_sof_1'/2
							  (Cs, _cor11)
						  in  %% Line 214
						      [[44|[10]]|%% Line 215
								 [[91]|[H|[_cor9|%% Line 218
										 [[93|[32|[61|[32]]]]|[Prev|[[44|[10]]|%% Line 219
														       [Func|[[40]|[H|[_cor10|[[41]|_cor12]]]]]]]]]]]]
	  %% Line 220
	  <[],_cor17> when 'true' ->
	      %% Line 221
	      [46|[10]]
	  ( <_cor14,_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13})
		  -| [{'function_name',{'gen_sof_1',2}}] )
	    -| ['compiler_generated'] )
	end
'components'/2 =
    %% Line 223
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{'type',_cor6,Def,_cor7,_cor8,_cor9}|Ts],[V|Vs]> when 'true' ->
	      let <_cor2> =
		  %% Line 224
		  apply 'do_gen'/2
		      (Def, V)
	      in  let <_cor3> =
		      %% Line 224
		      apply 'components'/2
			  (Ts, Vs)
		  in  %% Line 224
		      [_cor2|_cor3]
	  %% Line 225
	  <[],[]> when 'true' ->
	      []
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'components',2}}] )
	    -| ['compiler_generated'] )
	end
'gen_choice'/4 =
    %% Line 227
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <NameStr> =
	    %% Line 228
	    call 'erlang':'atom_to_list'
		(_cor3)
	in  let <_cor5> =
		%% Line 229
		apply 'term2str'/1
		    (_cor2)
	    in  let <_cor6> =
		    %% Line 230
		    apply 'arg2str'/1
			(_cor0)
		in  %% Line 229
		    [NameStr|[[40|[123]]|[_cor5|[[44|[86|[97|[108|[117|[101|[125|[41|[32|[45|[62|[10|[32]]]]]]]]]]]]]|%% Line 230
														      [_cor1|[[40|[86|[97|[108|[117|[101]]]]]]|[_cor6|[[41|[59|[10]]]|%% Line 231
																						      [NameStr|[[40|[95|[41|[32|[45|[62|[10|[32|[116|[104|[114|[111|[119|[40|[102|[97|[108|[115|[101|[41|[46|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
'pre_process_oid'/1 =
    %% Line 234
    fun (_cor0) ->
	let <Reserved> =
	    %% Line 235
	    apply 'reserved_oid'/0
		()
	in  let <_cor2> =
		%% Line 236
		call 'erlang':'tuple_to_list'
		    (_cor0)
	    in  %% Line 236
		apply 'pre_process_oid'/3
		    (_cor2, Reserved, [])
'pre_process_oid'/3 =
    %% Line 238
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Tail = [H|T],Res0,Acc> when 'true' ->
	      %% Line 239
	      case call 'lists':'keyfind'
		       (H, 2, Res0) of
		%% Line 240
		<'false'> when 'true' ->
		    let <_cor3> =
			%% Line 241
			call 'lists':'reverse'
			    (Acc)
		    in  %% Line 241
			{_cor3,Tail}
		%% Line 242
		<{Names0,_cor12,Res}>
		    when call 'erlang':'=:='
			  (_cor12,
			   H) ->
		    let <_cor5> =
			%% Line 243
			case <> of
			  %% Line 245
			  <>
			      when call 'erlang':'is_list'
				    (Names0) ->
			      Names0
			  %% Line 244
			  <> when 'true' ->
			      [Names0|[]]
			end
		    in  let <Keys> =
			    %% Line 247
			    [H|_cor5]
			in  %% Line 248
			    apply 'pre_process_oid'/3
				(T, Res, [Keys|Acc])
		( <_cor8> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor8})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9})
		  -| [{'function_name',{'pre_process_oid',3}}] )
	    -| ['compiler_generated'] )
	end
'reserved_oid'/0 =
    %% Line 251
    fun () ->
	%% Line 252
	[{['itu-t'|['ccitt']],0,[{'recommendation',0,[]}|[{'question',1,[]}|[{'administration',2,[]}|[{'network-operator',3,[]}|[{'identified-organization',4,[]}]]]]]}|[{'iso',1,[{'standard',0,[]}|[{'member-body',2,[]}|[{'identified-organization',3,[]}]]]}|[{['joint-iso-itu-t'|['joint-iso-ccitt']],2,[]}]]]
'arg2str'/1 =
    %% Line 263
    fun (_cor0) ->
	%% Line 264
	( letrec
	      'lc$^0'/1 =
		  fun (_cor3) ->
		      case _cor3 of
			<[Arg|_cor2]> when 'true' ->
			    let <_cor4> =
				apply 'term2str'/1
				    (Arg)
			    in  let <_cor5> =
				    [44|[32|_cor4]]
				in  let <_cor6> =
					apply 'lc$^0'/1
					    (_cor2)
				    in  ( [_cor5|_cor6]
					  -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_cor3> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor3})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  apply 'lc$^0'/1
		  (_cor0)
	  -| ['list_comprehension'] )
'term2str'/1 =
    %% Line 266
    fun (_cor0) ->
	%% Line 267
	call 'io_lib':'format'
	    ([126|[119]], [_cor0|[]])
'need'/2 =
    %% Line 269
    fun (_cor1,_cor0) ->
	do  %% Line 270
	    call 'asn1ct_func':'need'
		({'check',_cor1,_cor0})
	    %% Line 271
	    call 'erlang':'atom_to_list'
		(_cor1)
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('asn1ct_gen_check')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('asn1ct_gen_check', _cor0)
end