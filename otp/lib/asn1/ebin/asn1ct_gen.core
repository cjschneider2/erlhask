module 'asn1ct_gen' ['close_output_file'/0,
		     'conform_value'/2,
		     'constructed_suffix'/2,
		     'ct_gen_module'/1,
		     'def_to_tag'/1,
		     'demit'/1,
		     'emit'/1,
		     'gen_decode_constructed'/4,
		     'gen_encode_constructed'/4,
		     'get_constraint'/2,
		     'get_inner'/1,
		     'get_record_name_prefix'/0,
		     'index2suffix'/1,
		     'insert_once'/2,
		     'list2name'/1,
		     'list2rname'/1,
		     'mk_var'/1,
		     'module_info'/0,
		     'module_info'/1,
		     'named_bitstring_value'/2,
		     'open_output_file'/1,
		     'pgen'/5,
		     'prim_bif'/1,
		     'type'/1,
		     'un_hyphen_var'/1,
		     'unify_if_string'/1]
    attributes []
'pgen'/5 =
    %% Line 56
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 57
	apply 'pgen_module'/6
	    (_cor4, _cor3, _cor2, _cor1, _cor0, 'true')
'pgen_module'/6 =
    %% Line 60
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <OutFile,Erules,Module,TypeOrVal = %% Line 61
					     {Types,_X_Values,_X_Ptypes,_X_Classes,_X_Objects,_X_ObjectSets},%% Line 62
													     Options,%% Line 62
														     Indent> when 'true' ->
	      let <_cor11> =
		  %% Line 63
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor9) ->
				case _cor9 of
				  <[{'n2n',CName}|_cor7]> when 'true' ->
				      let <_cor10> =
					  apply 'lc$^0'/1
					      (_cor7)
				      in  ( [CName|_cor10]
					    -| ['compiler_generated'] )
				  ( <[_cor6|_cor7]> when 'true' ->
					apply 'lc$^0'/1
					    (_cor7)
				    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor9> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor9})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  let <_cor8> =
			    call 'erlang':'get'
				('encoding_options')
			in  apply 'lc$^0'/1
				(_cor8)
		    -| ['list_comprehension'] )
	      in  do  %% Line 64
		      case call 'erlang':'--'
			       (_cor11, Types) of
			%% Line 65
			<[]> when 'true' ->
			    'ok'
			%% Line 67
			<UnmatchedTypes> when 'true' ->
			    %% Line 68
			    call 'erlang':'exit'
				({[78|[111|[110|[32|[101|[120|[105|[115|[116|[105|[110|[103|[32|[69|[78|[85|[77|[69|[82|[65|[84|[73|[79|[78|[32|[116|[121|[112|[101|[115|[32|[117|[115|[101|[100|[32|[105|[110|[32|[110|[50|[110|[32|[111|[112|[116|[105|[111|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],%% Line 69
																																						    UnmatchedTypes})
		      end
		      do  %% Line 71
			  call 'erlang':'put'
			      ('outfile', OutFile)
			  let <HrlGenerated> =
			      %% Line 72
			      apply 'pgen_hrl'/5
				  (Erules, Module, TypeOrVal, Options, Indent)
			  in  do  %% Line 73
				  call 'asn1ct_name':'start'
				      ()
				  let <ErlFile> =
				      %% Line 74
				      call 'lists':'concat'
					  ([OutFile|[[46|[101|[114|[108]]]]]])
				  in  let <_X_> =
					  %% Line 75
					  apply 'open_output_file'/1
					      (ErlFile)
				      in  do  %% Line 76
					      call 'asn1ct_func':'start_link'
						  ()
					      do  %% Line 77
						  apply 'gen_head'/3
						      (Erules, Module, HrlGenerated)
						  do  %% Line 78
						      apply 'pgen_exports'/3
							  (Erules, Module, TypeOrVal)
						      do  %% Line 79
							  apply 'pgen_dispatcher'/3
							      (Erules, Module, TypeOrVal)
							  do  %% Line 80
							      apply 'pgen_info'/0
								  ()
							      do  %% Line 81
								  apply 'pgen_typeorval'/4
								      (Erules, Module, _cor11, TypeOrVal)
								  do  %% Line 82
								      apply 'pgen_partial_incomplete_decode'/1
									  (Erules)
								      do  %% Line 85
									  apply 'emit'/1
									      (['nl'|[[37|[37|[37]]]|['nl'|[[37|[37|[37|[32|[82|[117|[110|[45|[116|[105|[109|[101|[32|[102|[117|[110|[99|[116|[105|[111|[110|[115|[46]]]]]]]]]]]]]]]]]]]]]]]|['nl'|[[37|[37|[37]]]|['nl']]]]]]])
									  do  %% Line 89
									      apply 'dialyzer_suppressions'/1
										  (Erules)
									      let <Fd> =
										  %% Line 90
										  call 'erlang':'get'
										      ('gen_file_out')
									      in  do  %% Line 91
										      call 'asn1ct_func':'generate'
											  (Fd)
										      do  %% Line 92
											  apply 'close_output_file'/0
											      ()
											  let <_X_> =
											      %% Line 93
											      ( call 'erlang':'erase'
												    ('outfile')
												-| ['result_not_wanted'] )
											  in  %% Line 94
											      call 'asn1ct':'verbose'
												  ([45|[45|[126|[112|[45|[45|[126|[110]]]]]]]], [{'generated',ErlFile}|[]], Options)
	  ( <_cor24,_cor23,_cor22,_cor21,_cor20,_cor19> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor24,_cor23,_cor22,_cor21,_cor20,_cor19})
		  -| [{'function_name',{'pgen_module',6}}] )
	    -| ['compiler_generated'] )
	end
'dialyzer_suppressions'/1 =
    %% Line 96
    fun (_cor0) ->
	do  %% Line 97
	    apply 'emit'/1
		(['nl'|[{'asis','dialyzer-suppressions'}|[[40|[65|[114|[103|[41|[32|[45|[62]]]]]]]]|['nl']]]])
	    let <Rtmod> =
		%% Line 99
		apply 'ct_gen_module'/1
		    (_cor0)
	    in  %% Line 100
		call Rtmod:'dialyzer_suppressions'
		    (_cor0)
'pgen_typeorval'/4 =
    %% Line 102
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Erules,Module,N2nConvEnums,{Types,Values,_X_Ptypes,_X_Classes,Objects,ObjectSets}> when 'true' ->
	      let <Rtmod> =
		  %% Line 103
		  apply 'ct_gen_module'/1
		      (Erules)
	      in  do  %% Line 104
		      apply 'pgen_types'/5
			  (Rtmod, Erules, N2nConvEnums, Module, Types)
		      do  %% Line 105
			  apply 'pgen_values'/3
			      (Erules, Module, Values)
			  do  %% Line 106
			      apply 'pgen_objects'/4
				  (Rtmod, Erules, Module, Objects)
			      do  %% Line 107
				  apply 'pgen_objectsets'/4
				      (Rtmod, Erules, Module, ObjectSets)
				  %% Line 108
				  apply 'pgen_partial_decode'/3
				      (Rtmod, Erules, Module)
	  ( <_cor8,_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6,_cor5})
		  -| [{'function_name',{'pgen_typeorval',4}}] )
	    -| ['compiler_generated'] )
	end
'pgen_values'/3 =
    %% Line 110
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <_cor7,_cor8,[]> when 'true' ->
	      %% Line 111
	      'true'
	  %% Line 112
	  <Erules,Module,[H|T]> when 'true' ->
	      let <Valuedef> =
		  %% Line 113
		  call 'asn1_db':'dbget'
		      (Module, H)
	      in  do  %% Line 114
		      apply 'gen_value'/1
			  (Valuedef)
		      %% Line 115
		      apply 'pgen_values'/3
			  (Erules, Module, T)
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'pgen_values',3}}] )
	    -| ['compiler_generated'] )
	end
'pgen_types'/5 =
    %% Line 117
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <_cor12,_cor13,_cor14,_cor15,[]> when 'true' ->
	      %% Line 118
	      'true'
	  %% Line 119
	  <Rtmod,Erules,N2nConvEnums,Module,[H|T]> when 'true' ->
	      do  %% Line 120
		  call 'asn1ct_name':'clear'
		      ()
		  let <Typedef> =
		      %% Line 121
		      call 'asn1_db':'dbget'
			  (Module, H)
		  in  do  %% Line 122
			  call Rtmod:'gen_encode'
			      (Erules, Typedef)
			  do  %% Line 123
			      call 'asn1ct_name':'clear'
				  ()
			      do  %% Line 124
				  call Rtmod:'gen_decode'
				      (Erules, Typedef)
				  do  %% Line 125
				      case call 'lists':'member'
					       (H, N2nConvEnums) of
					%% Line 126
					<'true'> when 'true' ->
					    %% Line 127
					    apply 'pgen_n2nconversion'/2
						(Erules, Typedef)
					%% Line 128
					<_cor16> when 'true' ->
					    'ok'
				      end
				      %% Line 131
				      apply 'pgen_types'/5
					  (Rtmod, Erules, N2nConvEnums, Module, T)
	  ( <_cor11,_cor10,_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9,_cor8,_cor7})
		  -| [{'function_name',{'pgen_types',5}}] )
	    -| ['compiler_generated'] )
	end
'pgen_n2nconversion'/2 =
    %% Line 134
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <_X_Erules,{'typedef',_cor5,_cor6,TypeName,{'type',_cor7,{'ENUMERATED',{NN1,NN2}},_cor8,_cor9,_cor10}}> when 'true' ->
	      let <NN> =
		  %% Line 135
		  call 'erlang':'++'
		      (NN1, NN2)
	      in  do  %% Line 136
		      apply 'pgen_name2numfunc'/3
			  (TypeName, NN, 'extension_marker')
		      %% Line 137
		      apply 'pgen_num2namefunc'/3
			  (TypeName, NN, 'extension_marker')
	  %% Line 139
	  <_X_Erules,{'typedef',_cor11,_cor12,TypeName,{'type',_cor13,{'ENUMERATED',NN},_cor14,_cor15,_cor16}}> when 'true' ->
	      do  %% Line 140
		  apply 'pgen_name2numfunc'/3
		      (TypeName, NN, 'no_extension_marker')
		  %% Line 141
		  apply 'pgen_num2namefunc'/3
		      (TypeName, NN, 'no_extension_marker')
	  %% Line 142
	  <_X_Erules,_cor17> when 'true' ->
	      %% Line 143
	      'true'
	end
'pgen_name2numfunc'/3 =
    %% Line 145
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <_X_TypeName,[],_cor6> when 'true' ->
	      %% Line 146
	      'true'
	  %% Line 147
	  <TypeName,[{Atom,Number}|[]],'extension_marker'> when 'true' ->
	      do  %% Line 148
		  apply 'emit'/1
		      ([[110|[97|[109|[101|[50|[110|[117|[109|[95]]]]]]]]]|[TypeName|[[40]|[{'asis',Atom}|[[41|[32|[45|[62]]]]|[Number|[[59]|['nl']]]]]]]])
		  %% Line 149
		  apply 'emit'/1
		      ([[110|[97|[109|[101|[50|[110|[117|[109|[95]]]]]]]]]|[TypeName|[[40|[123|[97|[115|[110|[49|[95|[101|[110|[117|[109|[44|[32|[78|[117|[109|[125|[41|[32|[45|[62|[32|[78|[117|[109|[46]]]]]]]]]]]]]]]]]]]]]]]]]]|['nl'|['nl']]]]])
	  %% Line 150
	  <TypeName,[{Atom,Number}|[]],_cor7> when 'true' ->
	      %% Line 151
	      apply 'emit'/1
		  ([[110|[97|[109|[101|[50|[110|[117|[109|[95]]]]]]]]]|[TypeName|[[40]|[{'asis',Atom}|[[41|[32|[45|[62]]]]|[Number|[[46]|['nl'|['nl']]]]]]]]])
	  %% Line 152
	  <TypeName,[{Atom,Number}|NNRest],EM> when 'true' ->
	      do  %% Line 153
		  apply 'emit'/1
		      ([[110|[97|[109|[101|[50|[110|[117|[109|[95]]]]]]]]]|[TypeName|[[40]|[{'asis',Atom}|[[41|[32|[45|[62]]]]|[Number|[[59]|['nl']]]]]]]])
		  %% Line 154
		  apply 'pgen_name2numfunc'/3
		      (TypeName, NNRest, EM)
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'pgen_name2numfunc',3}}] )
	    -| ['compiler_generated'] )
	end
'pgen_num2namefunc'/3 =
    %% Line 156
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <_X_TypeName,[],_cor6> when 'true' ->
	      %% Line 157
	      'true'
	  %% Line 158
	  <TypeName,[{Atom,Number}|[]],'extension_marker'> when 'true' ->
	      do  %% Line 159
		  apply 'emit'/1
		      ([[110|[117|[109|[50|[110|[97|[109|[101|[95]]]]]]]]]|[TypeName|[[40]|[Number|[[41|[32|[45|[62]]]]|[{'asis',Atom}|[[59]|['nl']]]]]]]])
		  %% Line 160
		  apply 'emit'/1
		      ([[110|[117|[109|[50|[110|[97|[109|[101|[95]]]]]]]]]|[TypeName|[[40|[69|[120|[116|[101|[110|[115|[105|[111|[110|[78|[117|[109|[41|[32|[45|[62|[32|[123|[97|[115|[110|[49|[95|[101|[110|[117|[109|[44|[32|[69|[120|[116|[101|[110|[115|[105|[111|[110|[78|[117|[109|[125|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|['nl'|['nl']]]]])
	  %% Line 161
	  <TypeName,[{Atom,Number}|[]],_cor7> when 'true' ->
	      %% Line 162
	      apply 'emit'/1
		  ([[110|[117|[109|[50|[110|[97|[109|[101|[95]]]]]]]]]|[TypeName|[[40]|[Number|[[41|[32|[45|[62]]]]|[{'asis',Atom}|[[46]|['nl'|['nl']]]]]]]]])
	  %% Line 163
	  <TypeName,[{Atom,Number}|NNRest],EM> when 'true' ->
	      do  %% Line 164
		  apply 'emit'/1
		      ([[110|[117|[109|[50|[110|[97|[109|[101|[95]]]]]]]]]|[TypeName|[[40]|[Number|[[41|[32|[45|[62]]]]|[{'asis',Atom}|[[59]|['nl']]]]]]]])
		  %% Line 165
		  apply 'pgen_num2namefunc'/3
		      (TypeName, NNRest, EM)
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'pgen_num2namefunc',3}}] )
	    -| ['compiler_generated'] )
	end
'pgen_objects'/4 =
    %% Line 167
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <_cor9,_cor10,_cor11,[]> when 'true' ->
	      %% Line 168
	      'true'
	  %% Line 169
	  <Rtmod,Erules,Module,[H|T]> when 'true' ->
	      do  %% Line 170
		  call 'asn1ct_name':'clear'
		      ()
		  let <Typedef> =
		      %% Line 171
		      call 'asn1_db':'dbget'
			  (Module, H)
		  in  do  %% Line 172
			  call Rtmod:'gen_obj_code'
			      (Erules, Module, Typedef)
			  %% Line 173
			  apply 'pgen_objects'/4
			      (Rtmod, Erules, Module, T)
	  ( <_cor8,_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6,_cor5})
		  -| [{'function_name',{'pgen_objects',4}}] )
	    -| ['compiler_generated'] )
	end
'pgen_objectsets'/4 =
    %% Line 175
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <_cor9,_cor10,_cor11,[]> when 'true' ->
	      %% Line 176
	      'true'
	  %% Line 177
	  <Rtmod,Erules,Module,[H|T]> when 'true' ->
	      do  %% Line 178
		  call 'asn1ct_name':'clear'
		      ()
		  let <TypeDef> =
		      %% Line 179
		      call 'asn1_db':'dbget'
			  (Module, H)
		  in  do  %% Line 180
			  call Rtmod:'gen_objectset_code'
			      (Erules, TypeDef)
			  %% Line 181
			  apply 'pgen_objectsets'/4
			      (Rtmod, Erules, Module, T)
	  ( <_cor8,_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6,_cor5})
		  -| [{'function_name',{'pgen_objectsets',4}}] )
	    -| ['compiler_generated'] )
	end
'pgen_partial_decode'/3 =
    %% Line 183
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Rtmod,Erule,Module>
	      when call 'erlang':'=:='
		    (Erule,
		     'ber') ->
	      do  %% Line 184
		  apply 'pgen_partial_inc_dec'/3
		      (Rtmod, Erule, Module)
		  %% Line 185
		  apply 'pgen_partial_dec'/3
		      (Rtmod, Erule, Module)
	  %% Line 186
	  <_cor6,_cor7,_cor8> when 'true' ->
	      %% Line 187
	      'ok'
	end
'pgen_partial_inc_dec'/3 =
    %% Line 189
    fun (_cor2,_cor1,_cor0) ->
	%% Line 191
	case call 'asn1ct':'get_gen_state_field'
		 ('inc_type_pattern') of
	  %% Line 192
	  <'undefined'> when 'true' ->
	      %% Line 194
	      'ok'
	  %% Line 197
	  <ConfList> when 'true' ->
	      let <_cor5> =
		  %% Line 198
		  ( fun (_cor3) ->
			case _cor3 of
			  <{_cor11,P}> when 'true' ->
			      P
			  ( <_cor4> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_cor4})
				  -| [{'function_name',{'-pgen_partial_inc_dec/3-fun-0-',1}}] )
			    -| ['compiler_generated'] )
			end
		    -| [{'id',{0,0,'-pgen_partial_inc_dec/3-fun-0-'}}] )
	      in  let <PatternLists> =
		      %% Line 198
		      call 'lists':'map'
			  (_cor5, ConfList)
		  in  do  %% Line 199
			  apply 'pgen_partial_inc_dec1'/4
			      (_cor2, _cor1, _cor0, PatternLists)
			  %% Line 200
			  apply 'gen_partial_inc_dec_refed_funcs'/2
			      (_cor2, _cor1)
	end
'pgen_partial_inc_dec1'/4 =
    %% Line 205
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Rtmod,Erules,Module,[P|Ps]> when 'true' ->
	      let <TopTypeName> =
		  %% Line 206
		  call 'asn1ct':'partial_inc_dec_toptype'
		      (P)
	      in  let <TypeDef> =
		      %% Line 207
		      call 'asn1_db':'dbget'
			  (Module, TopTypeName)
		  in  do  %% Line 208
			  call 'asn1ct_name':'clear'
			      ()
			  do  %% Line 209
			      call 'asn1ct':'update_gen_state'
				  ('namelist', P)
			      do  %% Line 210
				  call 'asn1ct':'update_gen_state'
				      ('active', 'true')
				  do  %% Line 211
				      call 'asn1ct':'update_gen_state'
					  ('prefix', [100|[101|[99|[45|[105|[110|[99|[45]]]]]]]])
				      do  %% Line 212
					  case call 'asn1ct':'maybe_saved_sindex'
						   (TopTypeName, P) of
					    %% Line 213
					    <I>
						when let <_cor6> =
						      call 'erlang':'is_integer'
							  (I)
						  in  let <_cor7> =
							  call 'erlang':'>'
							      (I, 0)
						      in  call 'erlang':'and'
							      (_cor6, _cor7) ->
						%% Line 215
						call 'asn1ct':'set_current_sindex'
						    (I)
					    %% Line 216
					    <_X_I> when 'true' ->
						do  %% Line 217
						    call 'asn1ct':'set_current_sindex'
							(0)
						    'ok'
					  end
					  do  %% Line 221
					      call Rtmod:'gen_decode'
						  (Erules, TypeDef)
					      do  %% Line 222
						  apply 'gen_dec_part_inner_constr'/4
						      (Rtmod, Erules, TypeDef, [TopTypeName|[]])
						  %% Line 223
						  apply 'pgen_partial_inc_dec1'/4
						      (Rtmod, Erules, Module, Ps)
	  %% Line 224
	  <_cor13,_cor14,_cor15,[]> when 'true' ->
	      %% Line 225
	      'ok'
	  ( <_cor12,_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10,_cor9})
		  -| [{'function_name',{'pgen_partial_inc_dec1',4}}] )
	    -| ['compiler_generated'] )
	end
'gen_partial_inc_dec_refed_funcs'/2 =
    %% Line 227
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Rtmod,Erule>
	      when call 'erlang':'=:='
		    (Erule,
		     'ber') ->
	      %% Line 228
	      case call 'asn1ct':'next_refed_func'
		       () of
		%% Line 229
		<[]> when 'true' ->
		    %% Line 230
		    'ok'
		%% Line 231
		<{{'Externaltypereference',_cor8,M,Name},Sindex,Pattern}> when 'true' ->
		    let <TypeDef> =
			%% Line 232
			call 'asn1_db':'dbget'
			    (M, Name)
		    in  do  %% Line 233
			    call 'asn1ct':'update_gen_state'
				('namelist', Pattern)
			    do  %% Line 234
				call 'asn1ct':'set_current_sindex'
				    (Sindex)
				do  %% Line 235
				    call Rtmod:'gen_inc_decode'
					(Erule, TypeDef)
				    do  %% Line 236
					apply 'gen_dec_part_inner_constr'/4
					    (Rtmod, Erule, TypeDef, [Name|[]])
					%% Line 237
					apply 'gen_partial_inc_dec_refed_funcs'/2
					    (Rtmod, Erule)
		%% Line 238
		<{Name,Sindex,Pattern,Type}> when 'true' ->
		    let <_cor3> =
			%% Line 239
			call 'asn1ct_gen':'list2name'
			    (Name)
		    in  let <TypeDef> =
			    %% Line 239
			    {'typedef','false','undefined',_cor3,Type}
			in  do  %% Line 240
				call 'asn1ct':'update_gen_state'
				    ('namelist', Pattern)
				do  %% Line 241
				    call 'asn1ct':'set_current_sindex'
					(Sindex)
				    do  %% Line 242
					call Rtmod:'gen_inc_decode'
					    (Erule, TypeDef)
					do  %% Line 243
					    apply 'gen_dec_part_inner_constr'/4
						(Rtmod, Erule, TypeDef, Name)
					    %% Line 244
					    apply 'gen_partial_inc_dec_refed_funcs'/2
						(Rtmod, Erule)
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 246
	  <_cor9,_cor10> when 'true' ->
	      %% Line 247
	      'ok'
	end
'pgen_partial_dec'/3 =
    %% Line 249
    fun (_cor2,_cor1,_cor0) ->
	let <Type_pattern> =
	    %% Line 250
	    call 'asn1ct':'get_gen_state_field'
		('type_pattern')
	in  do  %% Line 253
		apply 'pgen_partial_types'/2
		    (_cor1, Type_pattern)
		%% Line 254
		'ok'
'pgen_partial_types'/2 =
    %% Line 256
    fun (_cor1,_cor0) ->
	let <Options> =
	    %% Line 258
	    call 'erlang':'get'
		('encoding_options')
	in  %% Line 259
	    case call 'lists':'member'
		     ('asn1config', Options) of
	      %% Line 260
	      <'true'> when 'true' ->
		  %% Line 261
		  apply 'pgen_partial_types1'/2
		      (_cor1, _cor0)
	      %% Line 262
	      <_cor6> when 'true' ->
		  'ok'
	    end
'pgen_partial_types1'/2 =
    %% Line 266
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Erules,[{FuncName,[TopType|RestTypes]}|Rest]> when 'true' ->
	      let <CurrMod> =
		  %% Line 268
		  call 'erlang':'get'
		      ('currmod')
	      in  let <TypeDef> =
		      %% Line 269
		      call 'asn1_db':'dbget'
			  (CurrMod, TopType)
		  in  %% Line 271
		      ( case TypeDef of
			  ( <( {'typedef',_cor8,_cor9,_rec0,_cor10}
			       -| ['compiler_generated'] )> when 'true' ->
				do  apply 'traverse_type_structure'/5
					(Erules, TypeDef, RestTypes, FuncName, _rec0)
				    %% Line 272
				    apply 'pgen_partial_types1'/2
					(Erules, Rest)
			    -| ['compiler_generated'] )
			  ( <_cor11> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','typedef'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
	  %% Line 273
	  <_cor12,[]> when 'true' ->
	      %% Line 274
	      'ok'
	  %% Line 275
	  <_cor13,'undefined'> when 'true' ->
	      %% Line 276
	      'ok'
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6})
		  -| [{'function_name',{'pgen_partial_types1',2}}] )
	    -| ['compiler_generated'] )
	end
'traverse_type_structure'/5 =
    %% Line 281
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Erules,Type,[],FuncName,TopTypeName> when 'true' ->
	      let <Ctmod> =
		  %% Line 283
		  apply 'ct_gen_module'/1
		      (Erules)
	      in  let <_cor7> =
		      %% Line 285
		      case Type of
			%% Line 286
			<{'type',_cor67,_cor68,_cor69,_cor70,_cor71}> when 'true' ->
			    %% Line 287
			    {'typedef','false','undefined',TopTypeName,Type}
			%% Line 288
			<{'typedef',_cor72,_cor73,_cor74,_cor75}> when 'true' ->
			    Type
			( <_cor6> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor6})
			  -| ['compiler_generated'] )
		      end
		  in  %% Line 290
		      call Ctmod:'gen_decode_selected'
			  (Erules, _cor7, FuncName)
	  %% Line 291
	  <Erules,{'type',_cor76,Def,_cor77,_cor78,_cor79},[[N|[]]|[]],FuncName,TopTypeName>
	      when %% Line 292
		call 'erlang':'is_integer'
		    (N) ->
	      %% Line 295
	      case call 'asn1ct_gen':'get_inner'
		       (Def) of
		%% Line 296
		<'SEQUENCE OF'> when 'true' ->
		    %% Line 297
		    case Def of
		      <{_cor80,Type}> when 'true' ->
			  %% Line 298
			  apply 'traverse_type_structure'/5
			      (Erules, Type, [], FuncName, TopTypeName)
		      ( <_cor10> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor10})
			-| ['compiler_generated'] )
		    end
		%% Line 299
		<WrongType> when 'true' ->
		    %% Line 300
		    call 'erlang':'exit'
			({'error',{'configuration_file_error',[N|[]],[111|[110|[108|[121|[32|[102|[111|[114|[32|[83|[69|[81|[85|[69|[78|[67|[69|[32|[79|[70|[32|[99|[111|[109|[112|[111|[110|[101|[110|[116|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],WrongType}})
	      end
	  %% Line 302
	  <Erules,Type,[[N|[]]|Ts],FuncName,TopTypeName>
	      when %% Line 303
		call 'erlang':'is_integer'
		    (N) ->
	      %% Line 304
	      apply 'traverse_type_structure'/5
		  (Erules, Type, Ts, FuncName, TopTypeName)
	  %% Line 305
	  <Erules,{'type',_cor81,Def,_cor82,_cor83,_cor84},[T|Ts],FuncName,TopTypeName> when 'true' ->
	      %% Line 307
	      case call 'asn1ct_gen':'get_inner'
		       (Def) of
		%% Line 308
		<'SET'> when 'true' ->
		    %% Line 309
		    case Def of
		      <{'SET',_cor85,_cor86,_cor87,Components}> when 'true' ->
			  %% Line 311
			  ( case apply 'get_component'/2
				     (T, Components) of
			      ( <( {'ComponentType',_cor88,_cor89,_rec1,_cor90,_cor91,_cor92}
				   -| ['compiler_generated'] )> when 'true' ->
				    apply 'traverse_type_structure'/5
					(Erules, _rec1, Ts, %% Line 312
							    FuncName, %% Line 312
								      [T|TopTypeName])
				-| ['compiler_generated'] )
			      ( <_cor93> when 'true' ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {'badrecord','ComponentType'}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
		      ( <_cor13> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor13})
			-| ['compiler_generated'] )
		    end
		%% Line 313
		<'SEQUENCE'> when 'true' ->
		    %% Line 314
		    case Def of
		      <{'SEQUENCE',_cor94,_cor95,_cor96,Components}> when 'true' ->
			  %% Line 316
			  ( case apply 'get_component'/2
				     (T, Components) of
			      ( <( {'ComponentType',_cor97,_cor98,_rec2,_cor99,_cor100,_cor101}
				   -| ['compiler_generated'] )> when 'true' ->
				    apply 'traverse_type_structure'/5
					(Erules, _rec2, Ts, %% Line 317
							    FuncName, %% Line 317
								      [T|TopTypeName])
				-| ['compiler_generated'] )
			      ( <_cor102> when 'true' ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {'badrecord','ComponentType'}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
		      ( <_cor17> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor17})
			-| ['compiler_generated'] )
		    end
		%% Line 318
		<'CHOICE'> when 'true' ->
		    %% Line 319
		    case Def of
		      <{_cor103,Components}> when 'true' ->
			  %% Line 321
			  ( case apply 'get_component'/2
				     (T, Components) of
			      ( <( {'ComponentType',_cor104,_cor105,_rec3,_cor106,_cor107,_cor108}
				   -| ['compiler_generated'] )> when 'true' ->
				    apply 'traverse_type_structure'/5
					(Erules, _rec3, Ts, %% Line 322
							    FuncName, %% Line 322
								      [T|TopTypeName])
				-| ['compiler_generated'] )
			      ( <_cor109> when 'true' ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {'badrecord','ComponentType'}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
		      ( <_cor21> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor21})
			-| ['compiler_generated'] )
		    end
		%% Line 323
		<'SEQUENCE OF'> when 'true' ->
		    %% Line 324
		    case Def of
		      <{_cor110,Type}> when 'true' ->
			  %% Line 325
			  apply 'traverse_SO_type_structure'/5
			      (Erules, Type, [T|Ts], FuncName, %% Line 326
							       TopTypeName)
		      ( <_cor25> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor25})
			-| ['compiler_generated'] )
		    end
		%% Line 327
		<'SET OF'> when 'true' ->
		    %% Line 328
		    case Def of
		      <{_cor111,Type}> when 'true' ->
			  %% Line 329
			  apply 'traverse_SO_type_structure'/5
			      (Erules, Type, [T|Ts], FuncName, %% Line 330
							       TopTypeName)
		      ( <_cor26> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor26})
			-| ['compiler_generated'] )
		    end
		%% Line 331
		<{'Externaltypereference',_cor112,M,TName}> when 'true' ->
		    let <TypeDef> =
			%% Line 332
			call 'asn1_db':'dbget'
			    (M, TName)
		    in  %% Line 334
			( case TypeDef of
			    ( <( {'typedef',_cor113,_cor114,_rec4,_cor115}
				 -| ['compiler_generated'] )> when 'true' ->
				  apply 'traverse_type_structure'/5
				      (Erules, TypeDef, [T|Ts], FuncName, [_rec4|[]])
			      -| ['compiler_generated'] )
			    ( <_cor116> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','typedef'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		%% Line 335
		<_cor117> when 'true' ->
		    %% Line 336
		    apply 'traverse_type_structure'/5
			(Erules, Def, Ts, FuncName, [T|TopTypeName])
	      end
	  %% Line 338
	  <Erules,{'typedef',_cor118,_cor119,_cor120,Def},[T|Ts],FuncName,%% Line 339
									  TopTypeName> when 'true' ->
	      %% Line 340
	      ( case Def of
		  ( <( {'type',_cor121,_rec5,_cor122,_cor123,_cor124}
		       -| ['compiler_generated'] )> when 'true' ->
			%% Line 341
			case call 'asn1ct_gen':'get_inner'
				 (_rec5) of
			  %% Line 342
			  <'SET'> when 'true' ->
			      %% Line 343
			      case _rec5 of
				<{'SET',_cor131,_cor132,_cor133,Components}> when 'true' ->
				    %% Line 345
				    ( case apply 'get_component'/2
					       (T, Components) of
					( <( {'ComponentType',_cor134,_cor135,_rec7,_cor136,_cor137,_cor138}
					     -| ['compiler_generated'] )> when 'true' ->
					      apply 'traverse_type_structure'/5
						  (Erules, _rec7, Ts, %% Line 346
								      FuncName, %% Line 346
										[T|TopTypeName])
					  -| ['compiler_generated'] )
					( <_cor139> when 'true' ->
					      ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'error'
										     -| ['compiler_generated'] )
						    (( {'badrecord','ComponentType'}
						       -| ['compiler_generated'] ))
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				      end
				      -| ['compiler_generated'] )
				( <_cor36> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor36})
				  -| ['compiler_generated'] )
			      end
			  %% Line 347
			  <'SEQUENCE'> when 'true' ->
			      %% Line 348
			      case _rec5 of
				<{'SEQUENCE',_cor145,_cor146,_cor147,Components}> when 'true' ->
				    %% Line 350
				    ( case apply 'get_component'/2
					       (T, Components) of
					( <( {'ComponentType',_cor148,_cor149,_rec9,_cor150,_cor151,_cor152}
					     -| ['compiler_generated'] )> when 'true' ->
					      apply 'traverse_type_structure'/5
						  (Erules, _rec9, Ts, %% Line 351
								      FuncName, %% Line 351
										[T|TopTypeName])
					  -| ['compiler_generated'] )
					( <_cor153> when 'true' ->
					      ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'error'
										     -| ['compiler_generated'] )
						    (( {'badrecord','ComponentType'}
						       -| ['compiler_generated'] ))
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				      end
				      -| ['compiler_generated'] )
				( <_cor42> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor42})
				  -| ['compiler_generated'] )
			      end
			  %% Line 352
			  <'CHOICE'> when 'true' ->
			      %% Line 353
			      case _rec5 of
				<{_cor159,Components}> when 'true' ->
				    %% Line 355
				    ( case apply 'get_component'/2
					       (T, Components) of
					( <( {'ComponentType',_cor160,_cor161,_rec11,_cor162,_cor163,_cor164}
					     -| ['compiler_generated'] )> when 'true' ->
					      apply 'traverse_type_structure'/5
						  (Erules, _rec11, Ts, %% Line 356
								       FuncName, %% Line 356
										 [T|TopTypeName])
					  -| ['compiler_generated'] )
					( <_cor165> when 'true' ->
					      ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'error'
										     -| ['compiler_generated'] )
						    (( {'badrecord','ComponentType'}
						       -| ['compiler_generated'] ))
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				      end
				      -| ['compiler_generated'] )
				( <_cor48> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor48})
				  -| ['compiler_generated'] )
			      end
			  %% Line 357
			  <'SEQUENCE OF'> when 'true' ->
			      %% Line 358
			      case _rec5 of
				<{_cor171,Type}> when 'true' ->
				    %% Line 359
				    apply 'traverse_SO_type_structure'/5
					(Erules, Type, [T|Ts], FuncName, %% Line 360
									 TopTypeName)
				( <_cor54> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor54})
				  -| ['compiler_generated'] )
			      end
			  %% Line 361
			  <'SET OF'> when 'true' ->
			      %% Line 362
			      case _rec5 of
				<{_cor177,Type}> when 'true' ->
				    %% Line 363
				    apply 'traverse_SO_type_structure'/5
					(Erules, Type, [T|Ts], FuncName, %% Line 364
									 TopTypeName)
				( <_cor57> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor57})
				  -| ['compiler_generated'] )
			      end
			  %% Line 365
			  <{'Externaltypereference',_cor178,M,TName}> when 'true' ->
			      let <TypeDef> =
				  %% Line 366
				  call 'asn1_db':'dbget'
				      (M, TName)
			      in  %% Line 368
				  ( case TypeDef of
				      ( <( {'typedef',_cor179,_cor180,_rec14,_cor181}
					   -| ['compiler_generated'] )> when 'true' ->
					    apply 'traverse_type_structure'/5
						(Erules, TypeDef, [T|Ts], FuncName, [_rec14|[]])
					-| ['compiler_generated'] )
				      ( <_cor182> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','typedef'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
			  %% Line 369
			  <_cor183> when 'true' ->
			      %% Line 371
			      apply 'traverse_type_structure'/5
				  (Erules, Def, Ts, FuncName, [T|TopTypeName])
			end
		    -| ['compiler_generated'] )
		  ( <_cor125> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','type'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_cor66,_cor65,_cor64,_cor63,_cor62> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor66,_cor65,_cor64,_cor63,_cor62})
		  -| [{'function_name',{'traverse_type_structure',5}}] )
	    -| ['compiler_generated'] )
	end
'traverse_SO_type_structure'/5 =
    %% Line 374
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Erules,Type,[N|Rest],FuncName,TopTypeName>
	      when %% Line 375
		call 'erlang':'is_integer'
		    (N) ->
	      %% Line 376
	      apply 'traverse_type_structure'/5
		  (Erules, Type, Rest, FuncName, TopTypeName)
	  %% Line 377
	  <Erules,Type,TypeList,FuncName,TopTypeName> when 'true' ->
	      %% Line 378
	      apply 'traverse_type_structure'/5
		  (Erules, Type, TypeList, FuncName, TopTypeName)
	end
'get_component'/2 =
    %% Line 380
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Name,{C1,C2}>
	      when let <_cor2> =
		    call 'erlang':'is_list'
			(C1)
		in  let <_cor3> =
			call 'erlang':'is_list'
			    (C2)
		    in  call 'erlang':'and'
			    (_cor2, _cor3) ->
	      let <_cor4> =
		  %% Line 381
		  call 'erlang':'++'
		      (C1, C2)
	      in  %% Line 381
		  apply 'get_component'/2
		      (Name, _cor4)
	  %% Line 382
	  <Name,[C = {'ComponentType',_cor7,_cor8,_cor9,_cor10,_cor11,_cor12}|_X_Cs]>
	      when call 'erlang':'=:='
		    (_cor8,
		     Name) ->
	      %% Line 383
	      C
	  %% Line 384
	  <Name,[_X_C|Cs]> when 'true' ->
	      %% Line 385
	      apply 'get_component'/2
		  (Name, Cs)
	  %% Line 386
	  <Name,_cor13> when 'true' ->
	      %% Line 387
	      call 'erlang':'throw'
		  ({'error',{'asn1',{'internal_error',Name}}})
	end
'gen_dec_part_inner_constr'/4 =
    %% Line 393
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 394
	( case _cor1 of
	    ( <( {'typedef',_cor36,_cor37,_cor38,_rec15}
		 -| ['compiler_generated'] )> when 'true' ->
		  %% Line 395
		  ( case _rec15 of
		      ( <( {'type',_cor40,_rec16,_cor41,_cor42,_cor43}
			   -| ['compiler_generated'] )> when 'true' ->
			    let <InnerType> =
				call 'asn1ct_gen':'get_inner'
				    (_rec16)
			    in  %% Line 396
				case InnerType of
				  %% Line 397
				  <'SET'> when 'true' ->
				      %% Line 398
				      case _rec16 of
					<{'SET',_cor50,_cor51,_cor52,Components}> when 'true' ->
					    %% Line 399
					    apply 'gen_dec_part_inner_types'/4
						(_cor3, _cor2, Components, _cor0)
					( <_cor12> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_cor12})
					  -| ['compiler_generated'] )
				      end
				  %% Line 401
				  <'SEQUENCE'> when 'true' ->
				      %% Line 402
				      case _rec16 of
					<{'SEQUENCE',_cor58,_cor59,_cor60,Components}> when 'true' ->
					    %% Line 403
					    apply 'gen_dec_part_inner_types'/4
						(_cor3, _cor2, Components, _cor0)
					( <_cor15> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_cor15})
					  -| ['compiler_generated'] )
				      end
				  %% Line 404
				  <'CHOICE'> when 'true' ->
				      %% Line 405
				      case _rec16 of
					<{_cor66,Components}> when 'true' ->
					    %% Line 406
					    apply 'gen_dec_part_inner_types'/4
						(_cor3, _cor2, Components, _cor0)
					( <_cor18> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_cor18})
					  -| ['compiler_generated'] )
				      end
				  %% Line 407
				  <'SEQUENCE OF'> when 'true' ->
				      %% Line 410
				      case _rec16 of
					<{_cor72,Type}> when 'true' ->
					    %% Line 411
					    ( case Type of
						( <( {'type',_cor73,_rec21,_cor74,_cor75,_cor76}
						     -| ['compiler_generated'] )> when 'true' ->
						      let <NameSuffix> =
							  apply 'constructed_suffix'/2
							      (InnerType, _rec21)
						      in  do  %% Line 412
							      call 'asn1ct_name':'clear'
								  ()
							      %% Line 413
							      call _cor3:'gen_decode'
								  (_cor2, [NameSuffix|_cor0], Type)
						  -| ['compiler_generated'] )
						( <_cor77> when 'true' ->
						      ( call ( 'erlang'
							       -| ['compiler_generated'] ):( 'error'
											     -| ['compiler_generated'] )
							    (( {'badrecord','type'}
							       -| ['compiler_generated'] ))
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					      end
					      -| ['compiler_generated'] )
					( <_cor21> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_cor21})
					  -| ['compiler_generated'] )
				      end
				  %% Line 415
				  <'SET OF'> when 'true' ->
				      %% Line 416
				      case _rec16 of
					<{_cor83,Type}> when 'true' ->
					    %% Line 417
					    ( case Type of
						( <( {'type',_cor84,_rec23,_cor85,_cor86,_cor87}
						     -| ['compiler_generated'] )> when 'true' ->
						      let <NameSuffix> =
							  apply 'constructed_suffix'/2
							      (InnerType, _rec23)
						      in  do  %% Line 418
							      call 'asn1ct_name':'clear'
								  ()
							      %% Line 419
							      call _cor3:'gen_decode'
								  (_cor2, [NameSuffix|_cor0], Type)
						  -| ['compiler_generated'] )
						( <_cor88> when 'true' ->
						      ( call ( 'erlang'
							       -| ['compiler_generated'] ):( 'error'
											     -| ['compiler_generated'] )
							    (( {'badrecord','type'}
							       -| ['compiler_generated'] ))
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					      end
					      -| ['compiler_generated'] )
					( <_cor27> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_cor27})
					  -| ['compiler_generated'] )
				      end
				  %% Line 420
				  <_cor89> when 'true' ->
				      %% Line 421
				      'ok'
				end
			-| ['compiler_generated'] )
		      ( <_cor44> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','type'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	    ( <_cor39> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','typedef'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'gen_dec_part_inner_types'/4 =
    %% Line 424
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Rtmod,Erules,[ComponentType|Rest],TypeName> when 'true' ->
	      do  %% Line 425
		  call 'asn1ct_name':'clear'
		      ()
		  do  %% Line 426
		      call Rtmod:'gen_decode'
			  (Erules, TypeName, ComponentType)
		      %% Line 427
		      apply 'gen_dec_part_inner_types'/4
			  (Rtmod, Erules, Rest, TypeName)
	  %% Line 428
	  <Rtmod,Erules,{Comps1,Comps2},TypeName>
	      when let <_cor4> =
		    %% Line 429
		    call 'erlang':'is_list'
			(Comps1)
		in  let <_cor5> =
			%% Line 429
			call 'erlang':'is_list'
			    (Comps2)
		    in  %% Line 429
			call 'erlang':'and'
			    (_cor4, _cor5) ->
	      let <_cor6> =
		  %% Line 430
		  call 'erlang':'++'
		      (Comps1, Comps2)
	      in  %% Line 430
		  apply 'gen_dec_part_inner_types'/4
		      (Rtmod, Erules, _cor6, TypeName)
	  %% Line 431
	  <_cor11,_cor12,[],_cor13> when 'true' ->
	      %% Line 432
	      'ok'
	  ( <_cor10,_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8,_cor7})
		  -| [{'function_name',{'gen_dec_part_inner_types',4}}] )
	    -| ['compiler_generated'] )
	end
'pgen_partial_incomplete_decode'/1 =
    %% Line 435
    fun (_cor0) ->
	%% Line 436
	case call 'asn1ct':'get_gen_state_field'
		 ('active') of
	  %% Line 437
	  <'true'> when 'true' ->
	      do  %% Line 438
		  apply 'pgen_partial_incomplete_decode1'/1
		      (_cor0)
		  %% Line 439
		  call 'asn1ct':'reset_gen_state'
		      ()
	  %% Line 440
	  <_cor3> when 'true' ->
	      %% Line 441
	      'ok'
	end
'pgen_partial_incomplete_decode1'/1 =
    %% Line 443
    fun (_cor0) ->
	case _cor0 of
	  <'ber'> when 'true' ->
	      do  %% Line 444
		  case call 'asn1ct':'read_config_data'
			   ('partial_incomplete_decode') of
		    %% Line 445
		    <'undefined'> when 'true' ->
			'ok'
		    %% Line 447
		    <Data> when 'true' ->
			%% Line 448
			call 'lists':'foreach'
			    (( 'emit_partial_incomplete_decode'/1
			       -| [{'id',{0,0,'-pgen_partial_incomplete_decode1/1-fun-0-'}}] ), Data)
		  end
		  let <GeneratedFs> =
		      %% Line 450
		      call 'asn1ct':'get_gen_state_field'
			  ('gen_refed_funcs')
		  in  %% Line 452
		      apply 'gen_part_decode_funcs'/2
			  (GeneratedFs, 0)
	  %% Line 453
	  <_cor4> when 'true' ->
	      'ok'
	end
'emit_partial_incomplete_decode'/1 =
    %% Line 455
    fun (_cor0) ->
	case _cor0 of
	  <{FuncName,TopType,Pattern}> when 'true' ->
	      let <TypePattern> =
		  %% Line 456
		  call 'asn1ct':'get_gen_state_field'
		      ('inc_type_pattern')
	      in  %% Line 458
		  case call 'lists':'keysearch'
			   (FuncName, 1, TypePattern) of
		    %% Line 459
		    <{'value',{_cor11,TP}}> when 'true' ->
			let <_cor8> =
			    %% Line 463
			    case call 'asn1ct':'maybe_saved_sindex'
				     (TopType, TP) of
			      %% Line 464
			      <I>
				  when let <_cor5> =
					call 'erlang':'is_integer'
					    (I)
				    in  let <_cor6> =
					    call 'erlang':'>'
						(I, 0)
					in  call 'erlang':'and'
						(_cor5, _cor6) ->
				  %% Line 465
				  call 'lists':'concat'
				      ([TopType|[[95]|[I|[]]]])
			      %% Line 466
			      <_cor13> when 'true' ->
				  %% Line 467
				  call 'erlang':'atom_to_list'
				      (TopType)
			    end
			in  %% Line 469
			    apply 'emit'/1
				([{'asis',FuncName}|[[40|[66|[121|[116|[101|[115|[41|[32|[45|[62]]]]]]]]]]|['nl'|%% Line 470
														 [[32|[32|[100|[101|[99|[111|[100|[101|[95|[112|[97|[114|[116|[105|[97|[108|[95|[105|[110|[99|[111|[109|[112|[108|[101|[116|[101|[40|[39]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[_cor8|[[39|[44|[66|[121|[116|[101|[115|[44]]]]]]]]|[{'asis',Pattern}|[[41|[46]]|['nl']]]]]]]]])
		    %% Line 460
		    <_cor12> when 'true' ->
			call 'erlang':'exit'
			    ({'error',{'asn1_internal_error','exclusive_decode'}})
		  end
	  %% Line 471
	  <D> when 'true' ->
	      %% Line 472
	      call 'erlang':'throw'
		  ({'error',{'asn1',{[98|[97|[100|[32|[100|[97|[116|[97|[32|[105|[110|[32|[97|[115|[110|[49|[99|[111|[110|[102|[105|[103|[32|[102|[105|[108|[101]]]]]]]]]]]]]]]]]]]]]]]]]]],D}}})
	end
'gen_part_decode_funcs'/2 =
    %% Line 474
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[Data = {Name,_cor14,_cor15,Type}|GeneratedFs],N> when 'true' ->
	      %% Line 476
	      ( case Type of
		  ( <( {'type',_cor16,_rec24,_cor17,_cor18,_cor19}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_cor7> =
			    case _rec24 of
			      %% Line 477
			      <{'ObjectClassFieldType',_cor21,_cor22,_cor23,OCFTType}> when 'true' ->
				  %% Line 478
				  OCFTType
			      %% Line 479
			      <_cor24> when 'true' ->
				  %% Line 480
				  apply 'get_inner'/1
				      (_rec24)
			    end
			in  let <WhatKind> =
				%% Line 482
				apply 'type'/1
				    (_cor7)
			    in  let <TypeName> =
				    %% Line 483
				    apply 'list2name'/1
					(Name)
				in  do  %% Line 484
					case <> of
					  %% Line 485
					  <>
					      when call 'erlang':'>'
						    (N,
						     0) ->
					      apply 'emit'/1
						  ([[59]|['nl']])
					  %% Line 486
					  <> when 'true' ->
					      'ok'
					end
					do  %% Line 488
					    apply 'emit'/1
						([[100|[101|[99|[111|[100|[101|[95|[105|[110|[99|[95|[100|[105|[115|[112|[40|[39]]]]]]]]]]]]]]]]]|[TypeName|[[39|[44|[68|[97|[116|[97|[41|[32|[45|[62]]]]]]]]]]|['nl']]]])
					    do  %% Line 489
						apply 'gen_part_decode_funcs'/3
						    (WhatKind, TypeName, Data)
						let <_cor11> =
						    %% Line 490
						    call 'erlang':'+'
							(N, 1)
						in  %% Line 490
						    apply 'gen_part_decode_funcs'/2
							(GeneratedFs, _cor11)
		    -| ['compiler_generated'] )
		  ( <_cor20> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','type'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 491
	  <[_X_H|T],N> when 'true' ->
	      %% Line 492
	      apply 'gen_part_decode_funcs'/2
		  (T, N)
	  %% Line 493
	  <[],N> when 'true' ->
	      %% Line 494
	      case <> of
		%% Line 495
		<>
		    when call 'erlang':'>'
			  (N,
			   0) ->
		    %% Line 496
		    apply 'emit'/1
			([[46]|['nl']])
		%% Line 497
		<> when 'true' ->
		    %% Line 498
		    'ok'
	      end
	  ( <_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12})
		  -| [{'function_name',{'gen_part_decode_funcs',2}}] )
	    -| ['compiler_generated'] )
	end
'gen_part_decode_funcs'/3 =
    %% Line 501
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'Externaltypereference',_cor15,M,T},%% Line 502
						_X_TypeName,%% Line 502
							    Data> when 'true' ->
	      %% Line 503
	      case call 'asn1_db':'dbget'
		       (M, T) of
		<{'typedef',_cor16,_cor17,_cor18,TS}> when 'true' ->
		    %% Line 505
		    ( case TS of
			( <( {'type',_cor19,_rec26,_cor20,_cor21,_cor22}
			     -| ['compiler_generated'] )> when 'true' ->
			      let <_cor9> =
				  case _rec26 of
				    %% Line 506
				    <{'ObjectClassFieldType',_cor24,_cor25,_cor26,OCFTType}> when 'true' ->
					%% Line 507
					OCFTType
				    %% Line 508
				    <_cor27> when 'true' ->
					%% Line 509
					apply 'get_inner'/1
					    (_rec26)
				  end
			      in  let <WhatKind> =
				      %% Line 511
				      apply 'type'/1
					  (_cor9)
				  in  %% Line 512
				      apply 'gen_part_decode_funcs'/3
					  (WhatKind, [T|[]], Data)
			  -| ['compiler_generated'] )
			( <_cor23> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','type'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 513
	  <{'constructed','bif'},TypeName,%% Line 514
					  {_X_Name,'parts',Tag,_X_Type}> when 'true' ->
	      %% Line 515
	      apply 'emit'/1
		  ([[32|[32|[99|[97|[115|[101|[32|[68|[97|[116|[97|[32|[111|[102]]]]]]]]]]]]]]|['nl'|%% Line 516
												     [[32|[32|[32|[32|[76|[32|[119|[104|[101|[110|[32|[105|[115|[95|[108|[105|[115|[116|[40|[76|[41|[32|[45|[62]]]]]]]]]]]]]]]]]]]]]]]]|['nl'|%% Line 517
																													      [[32|[32|[32|[32|[32|[32|[39|[100|[101|[99|[95]]]]]]]]]]]|[TypeName|[[39|[40|[108|[105|[115|[116|[115|[58|[109|[97|[112|[40|[102|[117|[110|[40|[88|[41|[32|[45|[62|[32|[101|[108|[101|[109|[101|[110|[116|[40|[49|[44|[32]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|%% Line 518
																																																													 [{'call','ber','ber_decode_erlang',[[88]]}|[[41|[32|[101|[110|[100|[44|[32|[76|[41|[44]]]]]]]]]]|[{'asis',Tag}|[[41|[59]]|['nl'|%% Line 519
																																																																													 [[32|[32|[32|[32|[95|[32|[45|[62]]]]]]]]|['nl'|%% Line 520
																																																																																			[[32|[32|[32|[32|[32|[32|[91|[82|[101|[115|[93|[32|[61|[32|[39|[100|[101|[99|[95]]]]]]]]]]]]]]]]]]]|[TypeName|[[39|[40|[91|[68|[97|[116|[97|[93|[44]]]]]]]]]|[{'asis',Tag}|[[41|[44]]|['nl'|[[32|[32|[32|[32|[32|[32|[82|[101|[115]]]]]]]]]|['nl'|[[32|[32|[101|[110|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]])
	  %% Line 523
	  <WhatKind,_X_TypeName,{_X_Name,'parts',_X_Tag,_X_Type}> when 'true' ->
	      %% Line 524
	      call 'erlang':'throw'
		  ({'error',{'asn1',{[111|[110|[108|[121|[32|[83|[69|[81|[85|[69|[78|[67|[69|[32|[79|[70|[47|[83|[69|[84|[32|[79|[70|[32|[109|[97|[121|[32|[104|[97|[118|[101|[32|[116|[104|[101|[32|[112|[97|[114|[116|[105|[97|[108|[32|[105|[110|[99|[111|[109|[112|[108|[101|[116|[101|[32|[100|[105|[114|[101|[99|[116|[105|[118|[101|[32|[39|[112|[97|[114|[116|[115|[39|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],WhatKind}}})
	  %% Line 525
	  <{'constructed','bif'},TypeName,%% Line 526
					  {_X_Name,'undecoded',Tag,_X_Type}> when 'true' ->
	      %% Line 527
	      apply 'emit'/1
		  ([[32|[32|[39|[100|[101|[99|[95]]]]]]]|[TypeName|[[39|[40|[68|[97|[116|[97|[44]]]]]]]|[{'asis',Tag}|[[41]]]]]])
	  %% Line 528
	  <{'primitive','bif'},_X_TypeName,%% Line 529
					   {_X_Name,'undecoded',Tag,Type}> when 'true' ->
	      %% Line 530
	      call 'asn1ct_gen_ber_bin_v2':'gen_dec_prim'
		  (Type, [68|[97|[116|[97]]]], Tag)
	  %% Line 531
	  <WhatKind,_X_TypeName,{_cor33,Directive,_cor34,_cor35}> when 'true' ->
	      %% Line 532
	      call 'erlang':'throw'
		  ({'error',{'asn1',{[78|[111|[116|[32|[105|[109|[112|[108|[101|[109|[101|[110|[116|[101|[100|[32|[121|[101|[116]]]]]]]]]]]]]]]]]]],WhatKind,[32|[112|[97|[114|[116|[105|[97|[108|[32|[105|[110|[99|[111|[109|[112|[108|[101|[116|[101|[32|[100|[105|[114|[101|[99|[116|[105|[118|[101|[58]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],Directive}}})
	  ( <_cor14,_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12})
		  -| [{'function_name',{'gen_part_decode_funcs',3}}] )
	    -| ['compiler_generated'] )
	end
'gen_types'/3 =
    %% Line 535
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Erules,Tname,{RootL1,ExtList,RootL2}>
	      when let <_cor3> =
		    %% Line 536
		    call 'erlang':'is_list'
			(RootL1)
		in  let <_cor4> =
			%% Line 536
			call 'erlang':'is_list'
			    (RootL2)
		    in  %% Line 536
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 537
		  apply 'gen_types'/3
		      (Erules, Tname, RootL1)
		  let <Rtmod> =
		      %% Line 538
		      apply 'ct_gen_module'/1
			  (Erules)
		  in  let <_cor6> =
			  %% Line 539
			  call Rtmod:'extaddgroup2sequence'
			      (ExtList)
		      in  do  %% Line 539
			      apply 'gen_types'/3
				  (Erules, Tname, _cor6)
			      %% Line 540
			      apply 'gen_types'/3
				  (Erules, Tname, RootL2)
	  %% Line 541
	  <Erules,Tname,{RootList,ExtList}>
	      when call 'erlang':'is_list'
		    (RootList) ->
	      do  %% Line 542
		  apply 'gen_types'/3
		      (Erules, Tname, RootList)
		  let <Rtmod> =
		      %% Line 543
		      apply 'ct_gen_module'/1
			  (Erules)
		  in  let <_cor8> =
			  %% Line 544
			  call Rtmod:'extaddgroup2sequence'
			      (ExtList)
		      in  %% Line 544
			  apply 'gen_types'/3
			      (Erules, Tname, _cor8)
	  %% Line 545
	  <Erules,Tname,[{'EXTENSIONMARK',_cor14,_cor15}|Rest]> when 'true' ->
	      %% Line 546
	      apply 'gen_types'/3
		  (Erules, Tname, Rest)
	  %% Line 547
	  <Erules,Tname,[ComponentType|Rest]> when 'true' ->
	      let <Rtmod> =
		  %% Line 548
		  apply 'ct_gen_module'/1
		      (Erules)
	      in  do  %% Line 549
		      call 'asn1ct_name':'clear'
			  ()
		      do  %% Line 550
			  call Rtmod:'gen_encode'
			      (Erules, Tname, ComponentType)
			  do  %% Line 551
			      call 'asn1ct_name':'clear'
				  ()
			      do  %% Line 552
				  call Rtmod:'gen_decode'
				      (Erules, Tname, ComponentType)
				  %% Line 553
				  apply 'gen_types'/3
				      (Erules, Tname, Rest)
	  %% Line 554
	  <_cor16,_cor17,[]> when 'true' ->
	      %% Line 555
	      'true'
	  %% Line 556
	  <Erules,Tname,Type = {'type',_cor18,_cor19,_cor20,_cor21,_cor22}> when ( 'true'
										   -| ['compiler_generated'] ) ->
	      let <Rtmod> =
		  %% Line 557
		  apply 'ct_gen_module'/1
		      (Erules)
	      in  do  %% Line 558
		      call 'asn1ct_name':'clear'
			  ()
		      do  %% Line 559
			  call Rtmod:'gen_encode'
			      (Erules, Tname, Type)
			  do  %% Line 560
			      call 'asn1ct_name':'clear'
				  ()
			      %% Line 561
			      call Rtmod:'gen_decode'
				  (Erules, Tname, Type)
	  ( <_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11})
		  -| [{'function_name',{'gen_types',3}}] )
	    -| ['compiler_generated'] )
	end
'mk_var'/1 =
    %% Line 567
    fun (_cor0) ->
	case _cor0 of
	  <X>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      let <_cor1> =
		  %% Line 568
		  call 'erlang':'atom_to_list'
		      (X)
	      in  let <_cor2> =
		      %% Line 568
		      apply 'mk_var'/1
			  (_cor1)
		  in  %% Line 568
		      call 'erlang':'list_to_atom'
			  (_cor2)
	  %% Line 570
	  <[H|T]> when 'true' ->
	      let <_cor3> =
		  %% Line 571
		  call 'erlang':'-'
		      (H, 32)
	      in  %% Line 571
		  [_cor3|T]
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'mk_var',1}}] )
	    -| ['compiler_generated'] )
	end
'un_hyphen_var'/1 =
    %% Line 575
    fun (_cor0) ->
	case _cor0 of
	  <X>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      let <_cor1> =
		  %% Line 576
		  call 'erlang':'atom_to_list'
		      (X)
	      in  let <_cor2> =
		      %% Line 576
		      apply 'un_hyphen_var'/1
			  (_cor1)
		  in  %% Line 576
		      call 'erlang':'list_to_atom'
			  (_cor2)
	  %% Line 577
	  <[45|T]> when 'true' ->
	      let <_cor3> =
		  %% Line 578
		  apply 'un_hyphen_var'/1
		      (T)
	      in  %% Line 578
		  [95|_cor3]
	  %% Line 579
	  <[H|T]> when 'true' ->
	      let <_cor4> =
		  %% Line 580
		  apply 'un_hyphen_var'/1
		      (T)
	      in  %% Line 580
		  [H|_cor4]
	  %% Line 581
	  <[]> when 'true' ->
	      %% Line 582
	      []
	  ( <_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5})
		  -| [{'function_name',{'un_hyphen_var',1}}] )
	    -| ['compiler_generated'] )
	end
'gen_value'/1 =
    %% Line 590
    fun (_cor0) ->
	case _cor0 of
	  <Value = {'valuedef',_cor7,_cor8,_cor9,_cor10,_cor11,_cor12}> when ( 'true'
									       -| ['compiler_generated'] ) ->
	      do  %% Line 592
		  apply 'emit'/1
		      ({[39],_cor9,[39|[40|[41|[32|[45|[62]]]]]],'nl'})
		  %% Line 594
		  apply 'emit'/1
		      ([{'asis',_cor11}|[[46]|['nl'|['nl']]]])
	  ( <_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6})
		  -| [{'function_name',{'gen_value',1}}] )
	    -| ['compiler_generated'] )
	end
'gen_encode_constructed'/4 =
    %% Line 596
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Erules,Typename,InnerType,D = {'type',_cor33,_cor34,_cor35,_cor36,_cor37}> when ( 'true'
											     -| ['compiler_generated'] ) ->
	      let <Rtmod> =
		  %% Line 597
		  apply 'ct_constructed_module'/1
		      (Erules)
	      in  %% Line 598
		  case InnerType of
		    %% Line 599
		    <'SET'> when 'true' ->
			do  %% Line 600
			    call Rtmod:'gen_encode_set'
				(Erules, Typename, D)
			    %% Line 601
			    case _cor34 of
			      <{'SET',_cor43,_cor44,_cor45,Components}> when 'true' ->
				  %% Line 602
				  apply 'gen_types'/3
				      (Erules, Typename, Components)
			      ( <_cor7> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor7})
				-| ['compiler_generated'] )
			    end
		    %% Line 603
		    <'SEQUENCE'> when 'true' ->
			do  %% Line 604
			    call Rtmod:'gen_encode_sequence'
				(Erules, Typename, D)
			    %% Line 605
			    case _cor34 of
			      <{'SEQUENCE',_cor51,_cor52,_cor53,Components}> when 'true' ->
				  %% Line 606
				  apply 'gen_types'/3
				      (Erules, Typename, Components)
			      ( <_cor10> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor10})
				-| ['compiler_generated'] )
			    end
		    %% Line 607
		    <'CHOICE'> when 'true' ->
			do  %% Line 608
			    call Rtmod:'gen_encode_choice'
				(Erules, Typename, D)
			    %% Line 609
			    case _cor34 of
			      <{_cor59,Components}> when 'true' ->
				  %% Line 610
				  apply 'gen_types'/3
				      (Erules, Typename, Components)
			      ( <_cor13> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor13})
				-| ['compiler_generated'] )
			    end
		    %% Line 611
		    <'SEQUENCE OF'> when 'true' ->
			do  %% Line 612
			    call Rtmod:'gen_encode_sof'
				(Erules, Typename, InnerType, D)
			    %% Line 613
			    case _cor34 of
			      <{_cor65,Type}> when 'true' ->
				  %% Line 614
				  ( case Type of
				      ( <( {'type',_cor66,_rec34,_cor67,_cor68,_cor69}
					   -| ['compiler_generated'] )> when 'true' ->
					    let <NameSuffix> =
						call 'asn1ct_gen':'constructed_suffix'
						    (InnerType, _rec34)
					    in  %% Line 615
						apply 'gen_types'/3
						    (Erules, [NameSuffix|Typename], Type)
					-| ['compiler_generated'] )
				      ( <_cor70> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','type'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
			      ( <_cor16> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor16})
				-| ['compiler_generated'] )
			    end
		    %% Line 616
		    <'SET OF'> when 'true' ->
			do  %% Line 617
			    call Rtmod:'gen_encode_sof'
				(Erules, Typename, InnerType, D)
			    %% Line 618
			    case _cor34 of
			      <{_cor76,Type}> when 'true' ->
				  %% Line 619
				  ( case Type of
				      ( <( {'type',_cor77,_rec36,_cor78,_cor79,_cor80}
					   -| ['compiler_generated'] )> when 'true' ->
					    let <NameSuffix> =
						call 'asn1ct_gen':'constructed_suffix'
						    (InnerType, _rec36)
					    in  %% Line 620
						apply 'gen_types'/3
						    (Erules, [NameSuffix|Typename], Type)
					-| ['compiler_generated'] )
				      ( <_cor81> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','type'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
			      ( <_cor22> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor22})
				-| ['compiler_generated'] )
			    end
		    %% Line 621
		    <_cor82> when 'true' ->
			%% Line 622
			call 'erlang':'exit'
			    ({'nyi',InnerType})
		  end
	  %% Line 624
	  <Erules,Typename,InnerType,D = {'typedef',_cor83,_cor84,_cor85,_cor86}> when %% Line 625
										       ( 'true'
											 -| ['compiler_generated'] ) ->
	      %% Line 626
	      apply 'gen_encode_constructed'/4
		  (Erules, Typename, InnerType, _cor86)
	  ( <_cor32,_cor31,_cor30,_cor29> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor32,_cor31,_cor30,_cor29})
		  -| [{'function_name',{'gen_encode_constructed',4}}] )
	    -| ['compiler_generated'] )
	end
'gen_decode_constructed'/4 =
    %% Line 628
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Erules,Typename,InnerType,D = {'type',_cor12,_cor13,_cor14,_cor15,_cor16}> when ( 'true'
											     -| ['compiler_generated'] ) ->
	      let <Rtmod> =
		  %% Line 629
		  apply 'ct_constructed_module'/1
		      (Erules)
	      in  do  %% Line 630
		      call 'asn1ct':'step_in_constructed'
			  ()
		      %% Line 631
		      case InnerType of
			%% Line 632
			<'SET'> when 'true' ->
			    %% Line 633
			    call Rtmod:'gen_decode_set'
				(Erules, Typename, D)
			%% Line 634
			<'SEQUENCE'> when 'true' ->
			    %% Line 635
			    call Rtmod:'gen_decode_sequence'
				(Erules, Typename, D)
			%% Line 636
			<'CHOICE'> when 'true' ->
			    %% Line 637
			    call Rtmod:'gen_decode_choice'
				(Erules, Typename, D)
			%% Line 638
			<'SEQUENCE OF'> when 'true' ->
			    %% Line 639
			    call Rtmod:'gen_decode_sof'
				(Erules, Typename, InnerType, D)
			%% Line 640
			<'SET OF'> when 'true' ->
			    %% Line 641
			    call Rtmod:'gen_decode_sof'
				(Erules, Typename, InnerType, D)
			%% Line 642
			<_cor17> when 'true' ->
			    %% Line 643
			    call 'erlang':'exit'
				({'nyi',InnerType})
		      end
	  %% Line 647
	  <Erules,Typename,InnerType,D = {'typedef',_cor18,_cor19,_cor20,_cor21}> when ( 'true'
											 -| ['compiler_generated'] ) ->
	      %% Line 648
	      apply 'gen_decode_constructed'/4
		  (Erules, Typename, InnerType, _cor21)
	  ( <_cor11,_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9,_cor8})
		  -| [{'function_name',{'gen_decode_constructed',4}}] )
	    -| ['compiler_generated'] )
	end
'pgen_exports'/3 =
    %% Line 651
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Erules,_X_Module,{Types,Values,_cor21,_cor22,Objects,ObjectSets}> when 'true' ->
	      do  %% Line 652
		  apply 'emit'/1
		      ([[45|[101|[120|[112|[111|[114|[116|[40|[91|[101|[110|[99|[111|[100|[105|[110|[103|[95|[114|[117|[108|[101|[47|[48|[44|[98|[105|[116|[95|[115|[116|[114|[105|[110|[103|[95|[102|[111|[114|[109|[97|[116|[47|[48|[44]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|['nl'|[[32|[32|[32|[32|[32|[32|[32|[32|[32|[108|[101|[103|[97|[99|[121|[95|[101|[114|[108|[97|[110|[103|[95|[116|[121|[112|[101|[115|[47|[48|[93|[41|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|['nl']]]])
		  do  %% Line 654
		      apply 'emit'/1
			  ([[45|[101|[120|[112|[111|[114|[116|[40|[91]]]]]]]]]|[{'asis','dialyzer-suppressions'}|[[47|[49|[93|[41|[46]]]]]|['nl']]]])
		      do  %% Line 655
			  case Types of
			    %% Line 656
			    <[]> when 'true' ->
				'ok'
			    %% Line 657
			    <_cor23> when 'true' ->
				do  %% Line 658
				    apply 'emit'/1
					({[45|[101|[120|[112|[111|[114|[116|[40|[91]]]]]]]]],'nl'})
				    do  %% Line 659
					case Erules of
					  %% Line 660
					  <'ber'> when 'true' ->
					      %% Line 661
					      apply 'gen_exports1'/3
						  (Types, [101|[110|[99|[95]]]], 2)
					  %% Line 662
					  <_cor24> when 'true' ->
					      %% Line 663
					      apply 'gen_exports1'/3
						  (Types, [101|[110|[99|[95]]]], 1)
					end
					do  %% Line 665
					    apply 'emit'/1
						({[45|[101|[120|[112|[111|[114|[116|[40|[91]]]]]]]]],'nl'})
					    %% Line 666
					    case Erules of
					      %% Line 667
					      <'ber'> when 'true' ->
						  %% Line 668
						  apply 'gen_exports1'/3
						      (Types, [100|[101|[99|[95]]]], 2)
					      %% Line 669
					      <_cor25> when 'true' ->
						  %% Line 670
						  apply 'gen_exports1'/3
						      (Types, [100|[101|[99|[95]]]], 1)
					    end
			  end
			  let <_cor11> =
			      %% Line 673
			      ( letrec
				    'lc$^0'/1 =
					fun (_cor9) ->
					    case _cor9 of
					      <[{'n2n',X}|_cor7]> when 'true' ->
						  let <_cor10> =
						      apply 'lc$^0'/1
							  (_cor7)
						  in  ( [X|_cor10]
							-| ['compiler_generated'] )
					      ( <[_cor6|_cor7]> when 'true' ->
						    apply 'lc$^0'/1
							(_cor7)
						-| ['compiler_generated'] )
					      <[]> when 'true' ->
						  []
					      ( <_cor9> when 'true' ->
						    ( primop 'match_fail'
							  ({'function_clause',_cor9})
						      -| [{'function_name',{'lc$^0',1}}] )
						-| ['compiler_generated'] )
					    end
				in  let <_cor8> =
					call 'erlang':'get'
					    ('encoding_options')
				    in  apply 'lc$^0'/1
					    (_cor8)
				-| ['list_comprehension'] )
			  in  do  %% Line 673
				  case _cor11 of
				    %% Line 674
				    <[]> when 'true' ->
					'ok'
				    %% Line 675
				    <A2nNames> when 'true' ->
					do  %% Line 676
					    apply 'emit'/1
						({[45|[101|[120|[112|[111|[114|[116|[40|[91]]]]]]]]],'nl'})
					    do  %% Line 677
						apply 'gen_exports1'/3
						    (A2nNames, [110|[97|[109|[101|[50|[110|[117|[109|[95]]]]]]]]], 1)
						do  %% Line 678
						    apply 'emit'/1
							({[45|[101|[120|[112|[111|[114|[116|[40|[91]]]]]]]]],'nl'})
						    %% Line 679
						    apply 'gen_exports1'/3
							(A2nNames, [110|[117|[109|[50|[110|[97|[109|[101|[95]]]]]]]]], 1)
				  end
				  do  %% Line 681
				      case Values of
					%% Line 682
					<[]> when 'true' ->
					    'ok'
					%% Line 683
					<_cor26> when 'true' ->
					    do  %% Line 684
						apply 'emit'/1
						    ({[45|[101|[120|[112|[111|[114|[116|[40|[91]]]]]]]]],'nl'})
						%% Line 685
						apply 'gen_exports1'/3
						    (Values, [], 0)
				      end
				      do  %% Line 687
					  case Objects of
					    %% Line 688
					    <[]> when 'true' ->
						'ok'
					    %% Line 689
					    <_cor27> when 'true' ->
						%% Line 690
						case apply 'erule'/1
							 (Erules) of
						  %% Line 691
						  <'per'> when 'true' ->
						      'ok'
						  %% Line 693
						  <'ber'> when 'true' ->
						      do  %% Line 694
							  apply 'emit'/1
							      ({[45|[101|[120|[112|[111|[114|[116|[40|[91]]]]]]]]],'nl'})
							  do  %% Line 695
							      apply 'gen_exports1'/3
								  (Objects, [101|[110|[99|[95]]]], 3)
							      do  %% Line 696
								  apply 'emit'/1
								      ({[45|[101|[120|[112|[111|[114|[116|[40|[91]]]]]]]]],'nl'})
								  %% Line 697
								  apply 'gen_exports1'/3
								      (Objects, [100|[101|[99|[95]]]], 3)
						  ( <_cor14> when 'true' ->
							primop 'match_fail'
							    ({'case_clause',_cor14})
						    -| ['compiler_generated'] )
						end
					  end
					  do  %% Line 700
					      case ObjectSets of
						%% Line 701
						<[]> when 'true' ->
						    'ok'
						%% Line 702
						<_cor28> when 'true' ->
						    %% Line 703
						    case apply 'erule'/1
							     (Erules) of
						      %% Line 704
						      <'per'> when 'true' ->
							  'ok'
						      %% Line 706
						      <'ber'> when 'true' ->
							  do  %% Line 707
							      apply 'emit'/1
								  ({[45|[101|[120|[112|[111|[114|[116|[40|[91]]]]]]]]],'nl'})
							      do  %% Line 708
								  apply 'gen_exports1'/3
								      (ObjectSets, [103|[101|[116|[101|[110|[99|[95]]]]]]], 1)
								  do  %% Line 709
								      apply 'emit'/1
									  ({[45|[101|[120|[112|[111|[114|[116|[40|[91]]]]]]]]],'nl'})
								      %% Line 710
								      apply 'gen_exports1'/3
									  (ObjectSets, [103|[101|[116|[100|[101|[99|[95]]]]]]], 1)
						      ( <_cor16> when 'true' ->
							    primop 'match_fail'
								({'case_clause',_cor16})
							-| ['compiler_generated'] )
						    end
					      end
					      do  %% Line 713
						  apply 'emit'/1
						      ({[45|[101|[120|[112|[111|[114|[116|[40|[91|[105|[110|[102|[111|[47|[48|[93|[41|[46]]]]]]]]]]]]]]]]]],'nl'})
						  do  %% Line 714
						      apply 'gen_partial_inc_decode_exports'/0
							  ()
						      do  %% Line 715
							  apply 'gen_selected_decode_exports'/0
							      ()
							  %% Line 716
							  apply 'emit'/1
							      ({'nl','nl'})
	  ( <_cor20,_cor19,_cor18> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor20,_cor19,_cor18})
		  -| [{'function_name',{'pgen_exports',3}}] )
	    -| ['compiler_generated'] )
	end
'gen_exports1'/3 =
    %% Line 718
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[F1|[F2|T]],Prefix,Arity> when 'true' ->
	      do  %% Line 719
		  apply 'emit'/1
		      ({[39],Prefix,F1,[39|[47]],Arity,'com','nl'})
		  %% Line 720
		  apply 'gen_exports1'/3
		      ([F2|T], Prefix, Arity)
	  %% Line 721
	  <[Flast|_X_T],Prefix,Arity> when 'true' ->
	      %% Line 722
	      apply 'emit'/1
		  ({[39],Prefix,Flast,[39|[47]],Arity,'nl',[93|[41|[46]]],'nl','nl'})
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'gen_exports1',3}}] )
	    -| ['compiler_generated'] )
	end
'gen_partial_inc_decode_exports'/0 =
    %% Line 724
    fun () ->
	let <_cor1> =
	    %% Line 725
	    call 'asn1ct':'read_config_data'
		('partial_incomplete_decode')
	in  let <_cor0> =
		%% Line 726
		call 'asn1ct':'get_gen_state_field'
		    ('inc_type_pattern')
	    in  %% Line 725
		case <_cor1,_cor0> of
		  %% Line 727
		  <'undefined',_cor3> when 'true' ->
		      %% Line 728
		      'ok'
		  %% Line 729
		  <_cor4,'undefined'> when 'true' ->
		      %% Line 730
		      'ok'
		  %% Line 731
		  <Data,_cor5> when 'true' ->
		      do  %% Line 732
			  apply 'gen_partial_inc_decode_exports'/1
			      (Data)
			  %% Line 733
			  apply 'emit'/1
			      ([[45|[101|[120|[112|[111|[114|[116|[40|[91|[100|[101|[99|[111|[100|[101|[95|[112|[97|[114|[116|[47|[50|[93|[41|[46]]]]]]]]]]]]]]]]]]]]]]]]]|['nl']])
		end
'gen_partial_inc_decode_exports'/1 =
    %% Line 735
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      %% Line 736
	      'ok'
	  %% Line 737
	  <[{Name,_cor2,_cor3}|Rest]> when 'true' ->
	      do  %% Line 738
		  apply 'emit'/1
		      ([[45|[101|[120|[112|[111|[114|[116|[40|[91]]]]]]]]]|[Name|[[47|[49]]]]])
		  %% Line 739
		  apply 'gen_partial_inc_decode_exports1'/1
		      (Rest)
	  %% Line 740
	  <[_cor4|Rest]> when 'true' ->
	      %% Line 741
	      apply 'gen_partial_inc_decode_exports'/1
		  (Rest)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'gen_partial_inc_decode_exports',1}}] )
	    -| ['compiler_generated'] )
	end
'gen_partial_inc_decode_exports1'/1 =
    %% Line 743
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      %% Line 744
	      apply 'emit'/1
		  ([[93|[41|[46]]]|['nl']])
	  %% Line 745
	  <[{Name,_cor2,_cor3}|Rest]> when 'true' ->
	      do  %% Line 746
		  apply 'emit'/1
		      ([[44|[32]]|[Name|[[47|[49]]]]])
		  %% Line 747
		  apply 'gen_partial_inc_decode_exports1'/1
		      (Rest)
	  %% Line 748
	  <[_cor4|Rest]> when 'true' ->
	      %% Line 749
	      apply 'gen_partial_inc_decode_exports1'/1
		  (Rest)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'gen_partial_inc_decode_exports1',1}}] )
	    -| ['compiler_generated'] )
	end
'gen_selected_decode_exports'/0 =
    %% Line 751
    fun () ->
	%% Line 752
	case call 'asn1ct':'get_gen_state_field'
		 ('type_pattern') of
	  %% Line 753
	  <'undefined'> when 'true' ->
	      %% Line 754
	      'ok'
	  %% Line 755
	  <L> when 'true' ->
	      %% Line 756
	      apply 'gen_selected_decode_exports'/1
		  (L)
	end
'gen_selected_decode_exports'/1 =
    %% Line 759
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      %% Line 760
	      'ok'
	  %% Line 761
	  <[{FuncName,_cor2}|Rest]> when 'true' ->
	      do  %% Line 762
		  apply 'emit'/1
		      ([[45|[101|[120|[112|[111|[114|[116|[40|[91]]]]]]]]]|[FuncName|[[47|[49]]]]])
		  %% Line 763
		  apply 'gen_selected_decode_exports1'/1
		      (Rest)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'gen_selected_decode_exports',1}}] )
	    -| ['compiler_generated'] )
	end
'gen_selected_decode_exports1'/1 =
    %% Line 764
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      %% Line 765
	      apply 'emit'/1
		  ([[93|[41|[46]]]|['nl'|['nl']]])
	  %% Line 766
	  <[{FuncName,_cor2}|Rest]> when 'true' ->
	      do  %% Line 767
		  apply 'emit'/1
		      ([[44]|['nl'|[[32|[32|[32|[32|[32|[32|[32|[32|[32|[32]]]]]]]]]]|[FuncName|[[47|[49]]]]]]])
		  %% Line 768
		  apply 'gen_selected_decode_exports1'/1
		      (Rest)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'gen_selected_decode_exports1',1}}] )
	    -| ['compiler_generated'] )
	end
'pgen_dispatcher'/3 =
    %% Line 770
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Erules,_X_Module,{[],_X_Values,_cor28,_cor29,_X_Objects,_X_ObjectSets}> when 'true' ->
	      %% Line 771
	      apply 'gen_info_functions'/1
		  (Erules)
	  %% Line 772
	  <Erules,_X_Module,{Types,_X_Values,_cor30,_cor31,_X_Objects,_X_ObjectSets}> when 'true' ->
	      do  %% Line 773
		  apply 'emit'/1
		      ([[45|[101|[120|[112|[111|[114|[116|[40|[91|[101|[110|[99|[111|[100|[101|[47|[50|[44|[100|[101|[99|[111|[100|[101|[47|[50|[93|[41|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|['nl'|['nl']]])
		  do  %% Line 774
		      apply 'gen_info_functions'/1
			  (Erules)
		      let <Options> =
			  %% Line 776
			  call 'erlang':'get'
			      ('encoding_options')
		      in  let <NoFinalPadding> =
			      %% Line 777
			      call 'lists':'member'
				  ('no_final_padding', Options)
			  in  let <NoOkWrapper> =
				  %% Line 778
				  call 'proplists':'get_bool'
				      ('no_ok_wrapper', Options)
			      in  let <_cor7> =
				      %% Line 780
				      case Erules of
					%% Line 781
					<'per'> when 'true' ->
					    do  %% Line 782
						call 'asn1ct_func':'need'
						    ({Erules,'complete',1})
						%% Line 783
						[99|[111|[109|[112|[108|[101|[116|[101|[40|[101|[110|[99|[111|[100|[101|[95|[100|[105|[115|[112|[40|[84|[121|[112|[101|[44|[32|[68|[97|[116|[97|[41|[41]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
					%% Line 784
					<'ber'> when 'true' ->
					    %% Line 785
					    [105|[111|[108|[105|[115|[116|[95|[116|[111|[95|[98|[105|[110|[97|[114|[121|[40|[101|[108|[101|[109|[101|[110|[116|[40|[49|[44|[32|[101|[110|[99|[111|[100|[101|[95|[100|[105|[115|[112|[40|[84|[121|[112|[101|[44|[32|[68|[97|[116|[97|[41|[41|[41]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
					%% Line 786
					<'uper'>
					    when call 'erlang':'=:='
						  (NoFinalPadding,
						   'true') ->
					    do  %% Line 787
						call 'asn1ct_func':'need'
						    ({Erules,'complete_NFP',1})
						%% Line 788
						[99|[111|[109|[112|[108|[101|[116|[101|[95|[78|[70|[80|[40|[101|[110|[99|[111|[100|[101|[95|[100|[105|[115|[112|[40|[84|[121|[112|[101|[44|[32|[68|[97|[116|[97|[41|[41]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
					%% Line 789
					<'uper'> when 'true' ->
					    do  %% Line 790
						call 'asn1ct_func':'need'
						    ({Erules,'complete',1})
						%% Line 791
						[99|[111|[109|[112|[108|[101|[116|[101|[40|[101|[110|[99|[111|[100|[101|[95|[100|[105|[115|[112|[40|[84|[121|[112|[101|[44|[32|[68|[97|[116|[97|[41|[41]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
					( <_cor6> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_cor6})
					  -| ['compiler_generated'] )
				      end
				  in  do  %% Line 794
					  apply 'emit'/1
					      ([[101|[110|[99|[111|[100|[101|[40|[84|[121|[112|[101|[44|[32|[68|[97|[116|[97|[41|[32|[45|[62]]]]]]]]]]]]]]]]]]]]]|['nl']])
					  do  %% Line 795
					      case NoOkWrapper of
						%% Line 796
						<'true'> when 'true' ->
						    %% Line 797
						    apply 'emit'/1
							([[32|[32]]|[_cor7|[[46]]]])
						%% Line 798
						<'false'> when 'true' ->
						    let <_cor9> =
							%% Line 802
							apply 'try_catch'/0
							    ()
						    in  %% Line 799
							apply 'emit'/1
							    ([[116|[114|[121|[32]]]]|[_cor7|[[32|[111|[102]]]|['nl'|%% Line 800
														    [[32|[32|[66|[121|[116|[101|[115|[32|[45|[62]]]]]]]]]]|['nl'|%% Line 801
																						 [[32|[32|[32|[32|[123|[111|[107|[44|[66|[121|[116|[101|[115|[125]]]]]]]]]]]]]]|['nl'|%% Line 802
																																      [_cor9|[]]]]]]]]]])
						( <_cor10> when 'true' ->
						      primop 'match_fail'
							  ({'case_clause',_cor10})
						  -| ['compiler_generated'] )
					      end
					      do  %% Line 804
						  apply 'emit'/1
						      (['nl'|['nl']])
						  let <Return_rest> =
						      %% Line 806
						      call 'proplists':'get_bool'
							  ('undec_rest', Options)
						  in  let <_cor13> =
							  %% Line 807
							  case <Erules,Return_rest> of
							    %% Line 808
							    <'ber','true'> when 'true' ->
								[68|[97|[116|[97|[48]]]]]
							    %% Line 809
							    <_fol252,_fol253> when 'true' ->
								[68|[97|[116|[97]]]]
							  end
						      in  do  %% Line 812
							      apply 'emit'/1
								  ([[100|[101|[99|[111|[100|[101|[40|[84|[121|[112|[101|[44]]]]]]]]]]]]|[_cor13|[[41|[32|[45|[62]]]]|['nl']]]])
							      let <_cor16> =
								  %% Line 814
								  case <Erules,Return_rest> of
								    %% Line 815
								    <'ber','false'> when 'true' ->
									do  %% Line 816
									    call 'asn1ct_func':'need'
										({'ber','ber_decode_nif',1})
									    %% Line 817
									    [101|[108|[101|[109|[101|[110|[116|[40|[49|[44|[32|[98|[101|[114|[95|[100|[101|[99|[111|[100|[101|[95|[110|[105|[102|[40|[68|[97|[116|[97|[41|[41]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
								    %% Line 818
								    <'ber','true'> when 'true' ->
									do  %% Line 819
									    call 'asn1ct_func':'need'
										({'ber','ber_decode_nif',1})
									    do  %% Line 820
										apply 'emit'/1
										    ([[123|[68|[97|[116|[97|[44|[82|[101|[115|[116|[125|[32|[61|[32|[98|[101|[114|[95|[100|[101|[99|[111|[100|[101|[95|[110|[105|[102|[40|[68|[97|[116|[97|[48|[41|[44]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|['nl']])
										%% Line 821
										[68|[97|[116|[97]]]]
								    %% Line 822
								    <_fol256,_fol257> when 'true' ->
									%% Line 823
									[68|[97|[116|[97]]]]
								  end
							      in  let <_cor19> =
								      %% Line 825
								      case NoOkWrapper of
									%% Line 826
									<'false'> when 'true' ->
									    [116|[114|[121]]]
									%% Line 827
									<'true'> when 'true' ->
									    [99|[97|[115|[101]]]]
									( <_cor18> when 'true' ->
									      primop 'match_fail'
										  ({'case_clause',_cor18})
									  -| ['compiler_generated'] )
								      end
								  in  do  %% Line 825
									  apply 'emit'/1
									      ([_cor19|%% Line 828
										       [[32|[100|[101|[99|[111|[100|[101|[95|[100|[105|[115|[112|[40|[84|[121|[112|[101|[44|[32]]]]]]]]]]]]]]]]]]]|[_cor16|[[41|[32|[111|[102]]]]|['nl']]]]])
									  do  %% Line 829
									      case apply 'erule'/1
										       (Erules) of
										%% Line 830
										<'ber'> when 'true' ->
										    %% Line 831
										    apply 'emit'/1
											([[32|[32|[82|[101|[115|[117|[108|[116|[32|[45|[62]]]]]]]]]]]|['nl']])
										%% Line 832
										<'per'> when 'true' ->
										    %% Line 833
										    apply 'emit'/1
											([[32|[32|[123|[82|[101|[115|[117|[108|[116|[44|[82|[101|[115|[116|[125|[32|[45|[62]]]]]]]]]]]]]]]]]]|['nl']])
										( <_cor20> when 'true' ->
										      primop 'match_fail'
											  ({'case_clause',_cor20})
										  -| ['compiler_generated'] )
									      end
									      do  %% Line 835
										  case Return_rest of
										    %% Line 836
										    <'false'> when 'true' ->
											apply 'result_line'/2
											    (NoOkWrapper, [[82|[101|[115|[117|[108|[116]]]]]]])
										    %% Line 837
										    <'true'> when 'true' ->
											apply 'result_line'/2
											    (NoOkWrapper, [[82|[101|[115|[117|[108|[116]]]]]]|[[82|[101|[115|[116]]]]]])
										    ( <_cor21> when 'true' ->
											  primop 'match_fail'
											      ({'case_clause',_cor21})
										      -| ['compiler_generated'] )
										  end
										  do  %% Line 839
										      case NoOkWrapper of
											%% Line 840
											<'false'> when 'true' ->
											    let <_cor22> =
												%% Line 841
												apply 'try_catch'/0
												    ()
											    in  %% Line 841
												apply 'emit'/1
												    (['nl'|[_cor22|['nl'|['nl']]]])
											%% Line 842
											<'true'> when 'true' ->
											    %% Line 843
											    apply 'emit'/1
												(['nl'|[[101|[110|[100|[46]]]]|['nl'|['nl']]]])
											( <_cor23> when 'true' ->
											      primop 'match_fail'
												  ({'case_clause',_cor23})
											  -| ['compiler_generated'] )
										      end
										      do  %% Line 846
											  apply 'gen_decode_partial_incomplete'/1
											      (Erules)
											  do  %% Line 848
											      case Erules of
												%% Line 849
												<'ber'> when 'true' ->
												    do  %% Line 850
													apply 'gen_dispatcher'/4
													    (Types, [101|[110|[99|[111|[100|[101|[95|[100|[105|[115|[112]]]]]]]]]]], [101|[110|[99|[95]]]], [])
													do  %% Line 851
													    apply 'gen_dispatcher'/4
														(Types, [100|[101|[99|[111|[100|[101|[95|[100|[105|[115|[112]]]]]]]]]]], [100|[101|[99|[95]]]], [])
													    %% Line 852
													    apply 'gen_partial_inc_dispatcher'/0
														()
												%% Line 853
												<_X_PerOrPer_bin> when 'true' ->
												    do  %% Line 854
													apply 'gen_dispatcher'/4
													    (Types, [101|[110|[99|[111|[100|[101|[95|[100|[105|[115|[112]]]]]]]]]]], [101|[110|[99|[95]]]], [])
													%% Line 855
													apply 'gen_dispatcher'/4
													    (Types, [100|[101|[99|[111|[100|[101|[95|[100|[105|[115|[112]]]]]]]]]]], [100|[101|[99|[95]]]], [])
											      end
											      %% Line 857
											      apply 'emit'/1
												  (['nl'|['nl']])
	  ( <_cor27,_cor26,_cor25> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor27,_cor26,_cor25})
		  -| [{'function_name',{'pgen_dispatcher',3}}] )
	    -| ['compiler_generated'] )
	end
'result_line'/2 =
    %% Line 859
    fun (_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 860
	    case _cor1 of
	      %% Line 861
	      <'false'> when 'true' ->
		  apply 'result_line_1'/1
		      ([[111|[107]]|_cor0])
	      %% Line 862
	      <'true'> when 'true' ->
		  apply 'result_line_1'/1
		      (_cor0)
	      ( <_cor2> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor2})
		-| ['compiler_generated'] )
	    end
	in  let <S> =
		%% Line 860
		[[32|[32|[32|[32]]]]|_cor3]
	    in  let <_cor5> =
		    %% Line 864
		    call 'lists':'flatten'
			(S)
		in  %% Line 864
		    apply 'emit'/1
			(_cor5)
'result_line_1'/1 =
    %% Line 866
    fun (_cor0) ->
	case _cor0 of
	  <[SingleItem|[]]> when 'true' ->
	      %% Line 867
	      SingleItem
	  %% Line 868
	  <Items> when 'true' ->
	      let <_cor1> =
		  %% Line 869
		  call 'string':'join'
		      (Items, [44])
	      in  %% Line 869
		  [[123]|[_cor1|[[125]]]]
	end
'try_catch'/0 =
    %% Line 871
    fun () ->
	%% Line 872
	[[32|[32|[99|[97|[116|[99|[104]]]]]]]|['nl'|[[32|[32|[32|[32|[67|[108|[97|[115|[115|[58|[69|[120|[99|[101|[112|[116|[105|[111|[110|[32|[119|[104|[101|[110|[32|[67|[108|[97|[115|[115|[32|[61|[58|[61|[32|[101|[114|[114|[111|[114|[59|[32|[67|[108|[97|[115|[115|[32|[61|[58|[61|[32|[101|[120|[105|[116|[32|[45|[62]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|['nl'|[[32|[32|[32|[32|[32|[32|[99|[97|[115|[101|[32|[69|[120|[99|[101|[112|[116|[105|[111|[110|[32|[111|[102]]]]]]]]]]]]]]]]]]]]]]]|['nl'|[[32|[32|[32|[32|[32|[32|[32|[32|[123|[101|[114|[114|[111|[114|[44|[82|[101|[97|[115|[111|[110|[125|[61|[69|[114|[114|[111|[114|[32|[45|[62]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|['nl'|[[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[69|[114|[114|[111|[114|[59]]]]]]]]]]]]]]]]|['nl'|[[32|[32|[32|[32|[32|[32|[32|[32|[82|[101|[97|[115|[111|[110|[32|[45|[62]]]]]]]]]]]]]]]]]|['nl'|[[32|[32|[32|[32|[32|[32|[32|[32|[32|[123|[101|[114|[114|[111|[114|[44|[123|[97|[115|[110|[49|[44|[82|[101|[97|[115|[111|[110|[125|[125]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|['nl'|[[32|[32|[32|[32|[32|[32|[101|[110|[100]]]]]]]]]|['nl'|[[101|[110|[100|[46]]]]]]]]]]]]]]]]]]]]]
'gen_info_functions'/1 =
    %% Line 882
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 886
	    call 'asn1ct':'get_bit_string_format'
		()
	in  let <_cor2> =
		%% Line 888
		call 'asn1ct':'use_legacy_types'
		    ()
	    in  %% Line 883
		apply 'emit'/1
		    ([[101|[110|[99|[111|[100|[105|[110|[103|[95|[114|[117|[108|[101|[40|[41|[32|[45|[62|[32]]]]]]]]]]]]]]]]]]]|%% Line 884
																[{'asis',_cor0}|[[46]|['nl'|['nl'|%% Line 885
																				  [[98|[105|[116|[95|[115|[116|[114|[105|[110|[103|[95|[102|[111|[114|[109|[97|[116|[40|[41|[32|[45|[62|[32]]]]]]]]]]]]]]]]]]]]]]]|%% Line 886
																																				   [{'asis',_cor1}|[[46]|['nl'|['nl'|%% Line 887
																																								     [[108|[101|[103|[97|[99|[121|[95|[101|[114|[108|[97|[110|[103|[95|[116|[121|[112|[101|[115|[40|[41|[32|[45|[62|[32]]]]]]]]]]]]]]]]]]]]]]]]]|%% Line 888
																																																										 [{'asis',_cor2}|[[46]|['nl'|['nl']]]]]]]]]]]]]]])
'gen_decode_partial_incomplete'/1 =
    %% Line 890
    fun (_cor0) ->
	case _cor0 of
	  <'ber'> when 'true' ->
	      let <_cor2> =
		  %% Line 891
		  call 'asn1ct':'read_config_data'
		      ('partial_incomplete_decode')
	      in  let <_cor1> =
		      %% Line 892
		      call 'asn1ct':'get_gen_state_field'
			  ('inc_type_pattern')
		  in  %% Line 891
		      case <_cor2,_cor1> of
			%% Line 893
			<'undefined',_cor6> when 'true' ->
			    %% Line 894
			    'ok'
			%% Line 895
			<_cor7,'undefined'> when 'true' ->
			    %% Line 896
			    'ok'
			%% Line 897
			<_fol263,_fol264> when 'true' ->
			    let <EmitCaseClauses> =
				%% Line 899
				( fun () ->
				      %% Line 900
				      apply 'emit'/1
					  ([[32|[32|[32|[123|[39|[69|[88|[73|[84|[39|[44|[123|[101|[114|[114|[111|[114|[44|[82|[101|[97|[115|[111|[110|[125|[125|[32|[45|[62]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|['nl'|[[32|[32|[32|[32|[32|[32|[123|[101|[114|[114|[111|[114|[44|[82|[101|[97|[115|[111|[110|[125|[59]]]]]]]]]]]]]]]]]]]]]|['nl'|[[32|[32|[32|[32|[123|[39|[69|[88|[73|[84|[39|[44|[82|[101|[97|[115|[111|[110|[125|[32|[45|[62]]]]]]]]]]]]]]]]]]]]]]|['nl'|[[32|[32|[32|[32|[32|[32|[123|[101|[114|[114|[111|[114|[44|[123|[97|[115|[110|[49|[44|[82|[101|[97|[115|[111|[110|[125|[125|[59]]]]]]]]]]]]]]]]]]]]]]]]]]]]|['nl'|[[32|[32|[32|[32|[82|[101|[115|[117|[108|[116|[32|[45|[62]]]]]]]]]]]]]|['nl'|[[32|[32|[32|[32|[32|[32|[123|[111|[107|[44|[82|[101|[115|[117|[108|[116|[125]]]]]]]]]]]]]]]]]|['nl'|[[32|[32|[101|[110|[100]]]]]]]]]]]]]]]]]])
				  -| [{'id',{0,0,'-gen_decode_partial_incomplete/1-fun-0-'}}] )
			    in  do  %% Line 908
				    apply 'emit'/1
					([[100|[101|[99|[111|[100|[101|[95|[112|[97|[114|[116|[105|[97|[108|[95|[105|[110|[99|[111|[109|[112|[108|[101|[116|[101|[40|[84|[121|[112|[101|[44|[68|[97|[116|[97|[48|[44]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[[80|[97|[116|[116|[101|[114|[110|[41|[32|[45|[62]]]]]]]]]]]|['nl']]])
				    do  %% Line 910
					apply 'emit'/1
					    ([[32|[32|[123|[68|[97|[116|[97|[44|[95|[82|[101|[115|[116|[66|[105|[110|[125|[32|[61]]]]]]]]]]]]]]]]]]]|['nl'|[[32|[32|[32|[32]]]]|[{'call','ber','decode_primitive_incomplete',[[80|[97|[116|[116|[101|[114|[110]]]]]]]|[[68|[97|[116|[97|[48]]]]]]]}|['com'|['nl'|[[32|[32|[99|[97|[115|[101|[32|[99|[97|[116|[99|[104|[32|[100|[101|[99|[111|[100|[101|[95|[112|[97|[114|[116|[105|[97|[108|[95|[105|[110|[99|[95|[100|[105|[115|[112|[40|[84|[121|[112|[101|[44]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[[68|[97|[116|[97|[41|[32|[111|[102]]]]]]]]|['nl']]]]]]]]])
					do  %% Line 915
					    apply EmitCaseClauses
						()
					    do  %% Line 916
						apply 'emit'/1
						    ([[46]|['nl'|['nl']]])
						do  %% Line 917
						    apply 'emit'/1
							([[100|[101|[99|[111|[100|[101|[95|[112|[97|[114|[116|[40|[84|[121|[112|[101|[44|[32|[68|[97|[116|[97|[48|[41|[32|[119|[104|[101|[110|[32|[105|[115|[95|[98|[105|[110|[97|[114|[121|[40|[68|[97|[116|[97|[48|[41|[32|[45|[62]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|['nl']])
						    do  %% Line 919
							apply 'emit'/1
							    ([[32|[32|[99|[97|[115|[101|[32|[99|[97|[116|[99|[104|[32|[100|[101|[99|[111|[100|[101|[95|[105|[110|[99|[95|[100|[105|[115|[112|[40|[84|[121|[112|[101|[44|[101|[108|[101|[109|[101|[110|[116|[40|[49|[44|[32]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[{'call','ber','ber_decode_nif',[[68|[97|[116|[97|[48]]]]]]}|[[41|[41|[32|[111|[102]]]]]|['nl']]]])
							do  %% Line 921
							    apply EmitCaseClauses
								()
							    do  %% Line 922
								apply 'emit'/1
								    ([[59]|['nl']])
								do  %% Line 923
								    apply 'emit'/1
									([[100|[101|[99|[111|[100|[101|[95|[112|[97|[114|[116|[40|[84|[121|[112|[101|[44|[32|[68|[97|[116|[97|[48|[41|[32|[45|[62]]]]]]]]]]]]]]]]]]]]]]]]]]]|['nl']])
								    do  %% Line 924
									apply 'emit'/1
									    ([[32|[32|[99|[97|[115|[101|[32|[99|[97|[116|[99|[104|[32|[100|[101|[99|[111|[100|[101|[95|[105|[110|[99|[95|[100|[105|[115|[112|[40|[84|[121|[112|[101|[44|[32|[68|[97|[116|[97|[48|[41|[32|[111|[102]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|['nl']])
									do  %% Line 925
									    apply EmitCaseClauses
										()
									    %% Line 926
									    apply 'emit'/1
										([[46]|['nl'|['nl']]])
		      end
	  %% Line 928
	  <_X_Erule> when 'true' ->
	      %% Line 929
	      'ok'
	end
'gen_partial_inc_dispatcher'/0 =
    %% Line 931
    fun () ->
	let <_cor1> =
	    %% Line 932
	    call 'asn1ct':'read_config_data'
		('partial_incomplete_decode')
	in  let <_cor0> =
		%% Line 933
		call 'asn1ct':'get_gen_state_field'
		    ('inc_type_pattern')
	    in  %% Line 932
		case <_cor1,_cor0> of
		  %% Line 934
		  <'undefined',_cor3> when 'true' ->
		      %% Line 935
		      'ok'
		  %% Line 936
		  <_cor4,'undefined'> when 'true' ->
		      %% Line 937
		      'ok'
		  %% Line 938
		  <Data1,Data2> when 'true' ->
		      %% Line 940
		      apply 'gen_partial_inc_dispatcher'/3
			  (Data1, Data2, [])
		end
'gen_partial_inc_dispatcher'/3 =
    %% Line 943
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[{FuncName,TopType,_X_Pattern}|Rest],TypePattern,Sep> when 'true' ->
	      %% Line 945
	      case call 'lists':'keysearch'
		       (FuncName, 1, TypePattern) of
		%% Line 946
		<{'value',{_cor17,TP}}> when 'true' ->
		    let <FuncName2> =
			%% Line 949
			call 'asn1ct':'maybe_rename_function'
			    ('inc_disp', TopType, TP)
		    in  let <_cor10> =
			    %% Line 951
			    case call 'asn1ct':'maybe_saved_sindex'
				     (TopType, TP) of
			      %% Line 952
			      <I>
				  when let <_cor7> =
					call 'erlang':'is_integer'
					    (I)
				    in  let <_cor8> =
					    call 'erlang':'>'
						(I, 0)
					in  call 'erlang':'and'
						(_cor7, _cor8) ->
				  %% Line 953
				  call 'lists':'concat'
				      ([TopType|[[95]|[I|[]]]])
			      %% Line 954
			      <_cor19> when 'true' ->
				  %% Line 955
				  call 'erlang':'atom_to_list'
				      (TopType)
			    end
			in  let <_cor12> =
				%% Line 959
				call 'lists':'concat'
				    ([[100|[101|[99|[45|[105|[110|[99|[45]]]]]]]]|[FuncName2|[]]])
			    in  let <_cor13> =
				    %% Line 959
				    call 'erlang':'list_to_atom'
					(_cor12)
				in  do  %% Line 957
					apply 'emit'/1
					    ([Sep|%% Line 958
						  [[100|[101|[99|[111|[100|[101|[95|[112|[97|[114|[116|[105|[97|[108|[95|[105|[110|[99|[95|[100|[105|[115|[112|[40|[39]]]]]]]]]]]]]]]]]]]]]]]]]|[_cor10|[[39|[44|[68|[97|[116|[97|[41|[32|[45|[62]]]]]]]]]]|['nl'|%% Line 959
																																  [[32|[32]]|[{'asis',_cor13}|%% Line 960
																																			      [[40|[68|[97|[116|[97|[41]]]]]]]]]]]]]])
					%% Line 961
					apply 'gen_partial_inc_dispatcher'/3
					    (Rest, TypePattern, [59|[10]])
		%% Line 947
		<_cor18> when 'true' ->
		    call 'erlang':'exit'
			({'error',{'asn1_internal_error','exclusive_decode'}})
	      end
	  %% Line 962
	  <[],_cor20,_cor21> when 'true' ->
	      %% Line 963
	      apply 'emit'/1
		  ([[46]|['nl']])
	  ( <_cor16,_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15,_cor14})
		  -| [{'function_name',{'gen_partial_inc_dispatcher',3}}] )
	    -| ['compiler_generated'] )
	end
'gen_dispatcher'/4 =
    %% Line 965
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[F1|[F2|T]],FuncName,Prefix,ExtraArg> when 'true' ->
	      do  %% Line 966
		  apply 'emit'/1
		      ([FuncName|[[40|[39]]|[F1|[[39|[44|[68|[97|[116|[97|[41|[32|[45|[62|[32|[39]]]]]]]]]]]]|[Prefix|[F1|[[39|[40|[68|[97|[116|[97]]]]]]|[ExtraArg|[[41]|[[59]|['nl']]]]]]]]]]])
		  %% Line 967
		  apply 'gen_dispatcher'/4
		      ([F2|T], FuncName, Prefix, ExtraArg)
	  %% Line 968
	  <[Flast|_X_T],FuncName,Prefix,ExtraArg> when 'true' ->
	      do  %% Line 969
		  apply 'emit'/1
		      ([FuncName|[[40|[39]]|[Flast|[[39|[44|[68|[97|[116|[97|[41|[32|[45|[62|[32|[39]]]]]]]]]]]]|[Prefix|[Flast|[[39|[40|[68|[97|[116|[97]]]]]]|[ExtraArg|[[41]|[[59]|['nl']]]]]]]]]]])
		  %% Line 970
		  apply 'emit'/1
		      ([FuncName|[[40]|[[84|[121|[112|[101]]]]|[[44|[95|[68|[97|[116|[97|[41|[32|[45|[62|[32|[101|[120|[105|[116|[40|[123|[101|[114|[114|[111|[114|[44|[123|[97|[115|[110|[49|[44|[123|[117|[110|[100|[101|[102|[105|[110|[101|[100|[95|[116|[121|[112|[101|[44|[84|[121|[112|[101|[125|[125|[125|[41|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|['nl'|['nl'|['nl']]]]]]])
	  ( <_cor7,_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5,_cor4})
		  -| [{'function_name',{'gen_dispatcher',4}}] )
	    -| ['compiler_generated'] )
	end
'pgen_info'/0 =
    %% Line 972
    fun () ->
	%% Line 973
	apply 'emit'/1
	    ([[105|[110|[102|[111|[40|[41|[32|[45|[62]]]]]]]]]|['nl'|[[32|[32|[32|[99|[97|[115|[101|[32|[63|[77|[79|[68|[85|[76|[69|[58|[109|[111|[100|[117|[108|[101|[95|[105|[110|[102|[111|[40|[97|[116|[116|[114|[105|[98|[117|[116|[101|[115|[41|[32|[111|[102]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|['nl'|[[32|[32|[32|[32|[32|[65|[116|[116|[114|[105|[98|[117|[116|[101|[115|[32|[119|[104|[101|[110|[32|[105|[115|[95|[108|[105|[115|[116|[40|[65|[116|[116|[114|[105|[98|[117|[116|[101|[115|[41|[32|[45|[62]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|['nl'|[[32|[32|[32|[32|[32|[32|[32|[99|[97|[115|[101|[32|[108|[105|[115|[116|[115|[58|[107|[101|[121|[102|[105|[110|[100|[40|[97|[115|[110|[49|[95|[105|[110|[102|[111|[44|[32|[49|[44|[32|[65|[116|[116|[114|[105|[98|[117|[116|[101|[115|[41|[32|[111|[102]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|['nl'|[[32|[32|[32|[32|[32|[32|[32|[32|[32|[123|[95|[44|[73|[110|[102|[111|[125|[32|[119|[104|[101|[110|[32|[105|[115|[95|[108|[105|[115|[116|[40|[73|[110|[102|[111|[41|[32|[45|[62]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|['nl'|[[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[73|[110|[102|[111|[59]]]]]]]]]]]]]]]]|['nl'|[[32|[32|[32|[32|[32|[32|[32|[32|[32|[95|[32|[45|[62]]]]]]]]]]]]]|['nl'|[[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[91|[93]]]]]]]]]]]]]|['nl'|[[32|[32|[32|[32|[32|[32|[32|[101|[110|[100|[59]]]]]]]]]]]|['nl'|[[32|[32|[32|[32|[32|[95|[32|[45|[62]]]]]]]]]|['nl'|[[32|[32|[32|[32|[32|[32|[32|[91|[93]]]]]]]]]|['nl'|[[32|[32|[32|[101|[110|[100|[46]]]]]]]|['nl']]]]]]]]]]]]]]]]]]]]]]]])
'open_hrl'/2 =
    %% Line 986
    fun (_cor1,_cor0) ->
	let <File> =
	    %% Line 987
	    call 'lists':'concat'
		([_cor1|[[46|[104|[114|[108]]]]]])
	in  let <_X_> =
		%% Line 988
		apply 'open_output_file'/1
		    (File)
	    in  do  %% Line 989
		    apply 'gen_hrlhead'/1
			(_cor0)
		    let <Protector> =
			%% Line 990
			apply 'hrl_protector'/1
			    (_cor1)
		    in  %% Line 991
			apply 'emit'/1
			    ([[45|[105|[102|[110|[100|[101|[102|[40]]]]]]]]|[Protector|[[41|[46|[10]]]|%% Line 992
												       [[45|[100|[101|[102|[105|[110|[101|[40]]]]]]]]|[Protector|[[44|[32|[116|[114|[117|[101|[41|[46|[10|[10]]]]]]]]]]]]]]]])
'hrl_protector'/1 =
    %% Line 995
    fun (_cor0) ->
	let <BaseName> =
	    %% Line 996
	    call 'filename':'basename'
		(_cor0)
	in  let <_cor2> =
		%% Line 997
		call 'string':'to_upper'
		    (BaseName)
	    in  let <_cor3> =
		    %% Line 997
		    call 'erlang':'++'
			(_cor2, [95|[72|[82|[76|[95]]]]])
		in  let <P> =
			%% Line 997
			[95|_cor3]
		    in  %% Line 998
			( letrec
			      'lc$^0'/1 =
				  fun (_cor7) ->
				      case _cor7 of
					<[%% Line 1003
					  C|_cor6]> when 'true' ->
					    let <_cor14> =
						case <> of
						  %% Line 999
						  <>
						      when let <_cor8> =
							    call 'erlang':'=<'
								(65, C)
							in  let <_cor9> =
								call 'erlang':'=<'
								    (C, 90)
							    in  call 'erlang':'and'
								    (_cor8, _cor9) ->
						      C
						  %% Line 1000
						  <>
						      when let <_cor10> =
							    call 'erlang':'=<'
								(97, C)
							in  let <_cor11> =
								call 'erlang':'=<'
								    (C, 97)
							    in  call 'erlang':'and'
								    (_cor10, _cor11) ->
						      C
						  %% Line 1001
						  <>
						      when let <_cor12> =
							    call 'erlang':'=<'
								(48, C)
							in  let <_cor13> =
								call 'erlang':'=<'
								    (C, 57)
							    in  call 'erlang':'and'
								    (_cor12, _cor13) ->
						      C
						  %% Line 1002
						  <> when 'true' ->
						      95
						end
					    in  let <_cor15> =
						    %% Line 1003
						    apply 'lc$^0'/1
							(_cor6)
						in  ( [_cor14|_cor15]
						      -| ['compiler_generated'] )
					<[]> when 'true' ->
					    []
					( <_cor7> when 'true' ->
					      ( primop 'match_fail'
						    ({'function_clause',_cor7})
						-| [{'function_name',{'lc$^0',1}}] )
					  -| ['compiler_generated'] )
				      end
			  in  apply 'lc$^0'/1
				  (%% Line 1003
				   P)
			  -| ['list_comprehension'] )
'demit'/1 =
    %% Line 1010
    fun (_cor0) ->
	%% Line 1011
	case call 'erlang':'get'
		 ('asndebug') of
	  %% Line 1012
	  <'true'> when 'true' ->
	      apply 'emit'/1
		  (_cor0)
	  %% Line 1013
	  <_cor3> when 'true' ->
	      'true'
	end
'emit'/1 =
    %% Line 1017
    fun (_cor0) ->
	let <_cor2> =
	    %% Line 1018
	    call 'erlang':'get'
		('gen_file_out')
	in  let <_cor1> =
		%% Line 1018
		apply 'do_emit'/1
		    (_cor0)
	    in  let <_cor5> =
		    %% Line 1018
		    call 'file':'write'
			(_cor2, _cor1)
		in  %% Line 1018
		    case _cor5 of
		      <'ok'> when 'true' ->
			  ( _cor5
			    -| ['compiler_generated'] )
		      ( <_cor3> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor3})
			-| ['compiler_generated'] )
		    end
'do_emit'/1 =
    %% Line 1020
    fun (_cor0) ->
	case _cor0 of
	  <{'external',_X_M,T}> when 'true' ->
	      %% Line 1021
	      apply 'do_emit'/1
		  (T)
	  %% Line 1023
	  <{'prev',Variable}>
	      when call 'erlang':'is_atom'
		    (Variable) ->
	      let <_cor1> =
		  %% Line 1024
		  call 'asn1ct_name':'prev'
		      (Variable)
	      in  %% Line 1024
		  apply 'do_emit'/1
		      ({'var',_cor1})
	  %% Line 1026
	  <{'next',Variable}>
	      when call 'erlang':'is_atom'
		    (Variable) ->
	      let <_cor2> =
		  %% Line 1027
		  call 'asn1ct_name':'next'
		      (Variable)
	      in  %% Line 1027
		  apply 'do_emit'/1
		      ({'var',_cor2})
	  %% Line 1029
	  <{'curr',Variable}>
	      when call 'erlang':'is_atom'
		    (Variable) ->
	      let <_cor3> =
		  %% Line 1030
		  call 'asn1ct_name':'curr'
		      (Variable)
	      in  %% Line 1030
		  apply 'do_emit'/1
		      ({'var',_cor3})
	  %% Line 1032
	  <{'var',Variable}>
	      when call 'erlang':'is_atom'
		    (Variable) ->
	      %% Line 1033
	      case call 'erlang':'atom_to_list'
		       (Variable) of
		<[Head|V]> when 'true' ->
		    let <_cor5> =
			%% Line 1034
			call 'erlang':'-'
			    (Head, 32)
		    in  %% Line 1034
			[_cor5|V]
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1036
	  <{'var',Variable}> when 'true' ->
	      %% Line 1037
	      case Variable of
		<[Head|V]> when 'true' ->
		    let <_cor7> =
			%% Line 1038
			call 'erlang':'-'
			    (Head, 32)
		    in  %% Line 1038
			[_cor7|V]
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor6})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1040
	  <{'asis',What}> when 'true' ->
	      %% Line 1041
	      call 'io_lib':'format'
		  ([126|[119]], [What|[]])
	  %% Line 1043
	  <{'call',M,F,A}> when 'true' ->
	      let <_cor8> =
		  %% Line 1044
		  call 'erlang':'length'
		      (A)
	      in  let <MFA> = {%% Line 1044
		       M,%% Line 1044
			 F,_cor8}
		  in  do  %% Line 1045
			  call 'asn1ct_func':'need'
			      (MFA)
			  let <_cor10> =
			      %% Line 1046
			      call 'erlang':'atom_to_list'
				  (F)
			  in  let <_cor11> =
				  %% Line 1046
				  apply 'call_args'/2
				      (A, [])
			      in  %% Line 1046
				  [_cor10|[[40]|[_cor11|[41]]]]
	  %% Line 1048
	  <'nl'> when 'true' ->
	      %% Line 1049
	      [10]
	  %% Line 1051
	  <'com'> when 'true' ->
	      %% Line 1052
	      [44]
	  %% Line 1054
	  <'tab'> when 'true' ->
	      %% Line 1055
	      [32|[32|[32|[32|[32]]]]]
	  %% Line 1057
	  <What>
	      when call 'erlang':'is_integer'
		    (_cor0) ->
	      %% Line 1058
	      call 'erlang':'integer_to_list'
		  (What)
	  %% Line 1060
	  <What>
	      when try
		    let <_cor12> =
			call 'erlang':'is_list'
			    (_cor0)
		    in  let <_cor13> =
			    call 'erlang':'hd'
				(_cor0)
			in  let <_cor14> =
				call 'erlang':'is_integer'
				    (_cor13)
			    in  call 'erlang':'and'
				    (_cor12, _cor14)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 1061
	      What
	  %% Line 1063
	  <What>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      %% Line 1064
	      call 'erlang':'atom_to_list'
		  (What)
	  %% Line 1066
	  <What>
	      when call 'erlang':'is_tuple'
		    (_cor0) ->
	      %% Line 1067
	      ( letrec
		    'lc$^0'/1 =
			fun (_cor18) ->
			    case _cor18 of
			      <[E|_cor16]> when 'true' ->
				  let <_cor19> =
				      apply 'do_emit'/1
					  (E)
				  in  let <_cor20> =
					  apply 'lc$^0'/1
					      (_cor16)
				      in  ( [_cor19|_cor20]
					    -| ['compiler_generated'] )
			      <[]> when 'true' ->
				  []
			      ( <_cor18> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_cor18})
				      -| [{'function_name',{'lc$^0',1}}] )
				-| ['compiler_generated'] )
			    end
		in  let <_cor17> =
			call 'erlang':'tuple_to_list'
			    (What)
		    in  apply 'lc$^0'/1
			    (_cor17)
		-| ['list_comprehension'] )
	  %% Line 1069
	  <What>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      %% Line 1070
	      ( letrec
		    'lc$^1'/1 =
			fun (_cor23) ->
			    case _cor23 of
			      <[E|_cor22]> when 'true' ->
				  let <_cor24> =
				      apply 'do_emit'/1
					  (E)
				  in  let <_cor25> =
					  apply 'lc$^1'/1
					      (_cor22)
				      in  ( [_cor24|_cor25]
					    -| ['compiler_generated'] )
			      <[]> when 'true' ->
				  []
			      ( <_cor23> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_cor23})
				      -| [{'function_name',{'lc$^1',1}}] )
				-| ['compiler_generated'] )
			    end
		in  apply 'lc$^1'/1
			(What)
		-| ['list_comprehension'] )
	  ( <_cor26> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor26})
		  -| [{'function_name',{'do_emit',1}}] )
	    -| ['compiler_generated'] )
	end
'call_args'/2 =
    %% Line 1072
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[A|As],Sep> when 'true' ->
	      let <_cor2> =
		  %% Line 1073
		  apply 'do_emit'/1
		      (A)
	      in  let <_cor3> =
		      %% Line 1073
		      apply 'call_args'/2
			  (As, [44|[32]])
		  in  %% Line 1073
		      [Sep|[_cor2|_cor3]]
	  %% Line 1074
	  <[],_cor6> when 'true' ->
	      []
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'call_args',2}}] )
	    -| ['compiler_generated'] )
	end
'open_output_file'/1 =
    %% Line 1076
    fun (_cor0) ->
	%% Line 1077
	case call 'file':'open'
		 (_cor0, ['write'|['raw'|['delayed_write']]]) of
	  %% Line 1078
	  <{'ok',Fd}> when 'true' ->
	      do  %% Line 1079
		  call 'erlang':'put'
		      ('gen_file_out', Fd)
		  %% Line 1080
		  Fd
	  %% Line 1081
	  <{'error',Reason}> when 'true' ->
	      do  %% Line 1082
		  call 'io':'format'
		      ([42|[42|[32|[67|[97|[110|[39|[116|[32|[111|[112|[101|[110|[32|[102|[105|[108|[101|[32|[126|[112|[32|[126|[110]]]]]]]]]]]]]]]]]]]]]]]], [_cor0|[]])
		  %% Line 1083
		  call 'erlang':'exit'
		      ({'error',Reason})
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor1})
	    -| ['compiler_generated'] )
	end
'close_output_file'/0 =
    %% Line 1086
    fun () ->
	let <_cor0> =
	    %% Line 1087
	    call 'erlang':'erase'
		('gen_file_out')
	in  let <_cor2> =
		%% Line 1087
		call 'file':'close'
		    (_cor0)
	    in  %% Line 1087
		case _cor2 of
		  <'ok'> when 'true' ->
		      ( _cor2
			-| ['compiler_generated'] )
		  ( <_cor1> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_cor1})
		    -| ['compiler_generated'] )
		end
'pgen_hrl'/5 =
    %% Line 1089
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	do  %% Line 1090
	    call 'erlang':'put'
		('currmod', _cor3)
	    %% Line 1091
	    case _cor2 of
	      <{Types,Values,Ptypes,_cor23,_cor24,_cor25}> when 'true' ->
		  let <_cor6> =
		      %% Line 1093
		      call 'erlang':'++'
			  (Ptypes, Types)
		  in  let <_cor11> =
			  %% Line 1093
			  case apply 'pgen_hrltypes'/4
				   (_cor4, _cor3, _cor6, 0) of
			    %% Line 1094
			    <0> when 'true' ->
				%% Line 1095
				case Values of
				  %% Line 1096
				  <[]> when 'true' ->
				      %% Line 1097
				      0
				  %% Line 1098
				  <_cor26> when 'true' ->
				      let <_cor8> =
					  %% Line 1099
					  call 'erlang':'get'
					      ('outfile')
				      in  let <_cor7> =
					      %% Line 1099
					      call 'erlang':'get'
						  ('currmod')
					  in  do  %% Line 1099
						  apply 'open_hrl'/2
						      (_cor8, _cor7)
						  do  %% Line 1100
						      apply 'pgen_macros'/3
							  (_cor4, _cor3, Values)
						      %% Line 1101
						      1
				end
			    %% Line 1103
			    <X> when 'true' ->
				do  %% Line 1104
				    apply 'pgen_macros'/3
					(_cor4, _cor3, Values)
				    %% Line 1105
				    X
			  end
		      in  %% Line 1107
			  case _cor11 of
			    %% Line 1108
			    <0> when 'true' ->
				%% Line 1109
				0
			    %% Line 1110
			    <Y> when 'true' ->
				let <_cor13> =
				    %% Line 1111
				    call 'erlang':'get'
					('outfile')
				in  let <Protector> =
					%% Line 1111
					apply 'hrl_protector'/1
					    (_cor13)
				    in  do  %% Line 1112
					    apply 'emit'/1
						([[45|[101|[110|[100|[105|[102|[46|[32|[37|[37|[32]]]]]]]]]]]|[Protector|[[10]]]])
					    do  %% Line 1113
						apply 'close_output_file'/0
						    ()
						let <_cor15> =
						    %% Line 1115
						    call 'erlang':'get'
							('outfile')
						in  let <_cor16> =
							%% Line 1115
							call 'lists':'concat'
							    ([_cor15|[[46|[104|[114|[108]]]]]])
						    in  do  %% Line 1114
							    call 'asn1ct':'verbose'
								([45|[45|[126|[112|[45|[45|[126|[110]]]]]]]], %% Line 1115
													      [{'generated',_cor16}|[]], _cor1)
							    %% Line 1117
							    Y
			  end
	      ( <_cor5> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor5})
		-| ['compiler_generated'] )
	    end
'pgen_macros'/3 =
    %% Line 1120
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <_cor7,_cor8,[]> when 'true' ->
	      %% Line 1121
	      'true'
	  %% Line 1122
	  <Erules,Module,[H|T]> when 'true' ->
	      let <Valuedef> =
		  %% Line 1123
		  call 'asn1_db':'dbget'
		      (Module, H)
	      in  do  %% Line 1124
		      apply 'gen_macro'/1
			  (Valuedef)
		      %% Line 1125
		      apply 'pgen_macros'/3
			  (Erules, Module, T)
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'pgen_macros',3}}] )
	    -| ['compiler_generated'] )
	end
'pgen_hrltypes'/4 =
    %% Line 1127
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <_cor11,_cor12,[],NumRecords> when 'true' ->
	      %% Line 1128
	      NumRecords
	  %% Line 1129
	  <Erules,Module,[H|T],NumRecords> when 'true' ->
	      let <Typedef> =
		  %% Line 1131
		  call 'asn1_db':'dbget'
		      (Module, H)
	      in  let <AddNumRecords> =
		      %% Line 1132
		      apply 'gen_record'/2
			  (Typedef, NumRecords)
		  in  let <_cor6> =
			  %% Line 1133
			  call 'erlang':'+'
			      (NumRecords, AddNumRecords)
		      in  %% Line 1133
			  apply 'pgen_hrltypes'/4
			      (Erules, Module, T, _cor6)
	  ( <_cor10,_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8,_cor7})
		  -| [{'function_name',{'pgen_hrltypes',4}}] )
	    -| ['compiler_generated'] )
	end
'gen_macro'/1 =
    %% Line 1137
    fun (_cor0) ->
	case _cor0 of
	  <Value = {'valuedef',_cor7,_cor8,_cor9,_cor10,_cor11,_cor12}> when ( 'true'
									       -| ['compiler_generated'] ) ->
	      let <Prefix> =
		  %% Line 1138
		  apply 'get_macro_name_prefix'/0
		      ()
	      in  %% Line 1139
		  apply 'emit'/1
		      ({[45|[100|[101|[102|[105|[110|[101|[40|[39]]]]]]]]],Prefix,_cor9,[39|[44|[32]]],%% Line 1140
												       {'asis',_cor11},%% Line 1140
														       [41|[46]],%% Line 1140
																 'nl'})
	  ( <_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6})
		  -| [{'function_name',{'gen_macro',1}}] )
	    -| ['compiler_generated'] )
	end
'gen_record'/2 =
    %% Line 1147
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Tdef = {'typedef',_cor16,_cor17,_cor18,_cor19},NumRecords> when ( 'true'
									     -| ['compiler_generated'] ) ->
	      let <Name> =
		  %% Line 1148
		  [_cor18|[]]
	      in  %% Line 1150
		  apply 'gen_record'/4
		      ('type', Name, _cor19, NumRecords)
	  %% Line 1152
	  <Tdef = {'ptypedef',_cor28,_cor29,_cor30,_cor31,_cor32},NumRecords> when ( 'true'
										     -| ['compiler_generated'] ) ->
	      let <Name> =
		  %% Line 1153
		  [_cor30|[]]
	      in  %% Line 1155
		  apply 'gen_record'/4
		      ('ptype', Name, _cor32, NumRecords)
	  ( <_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14})
		  -| [{'function_name',{'gen_record',2}}] )
	    -| ['compiler_generated'] )
	end
'gen_record'/4 =
    %% Line 1157
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <TorPtype,Name,[{'ComponentType',_cor57,Cname,Type,_cor58,_cor59,_cor60}|T],Num> when 'true' ->
	      let <Num2> =
		  %% Line 1158
		  apply 'gen_record'/4
		      (TorPtype, [Cname|Name], Type, Num)
	      in  %% Line 1159
		  apply 'gen_record'/4
		      (TorPtype, Name, T, Num2)
	  %% Line 1160
	  <TorPtype,Name,{Clist1,Clist2},Num>
	      when let <_cor5> =
		    %% Line 1161
		    call 'erlang':'is_list'
			(Clist1)
		in  let <_cor6> =
			%% Line 1161
			call 'erlang':'is_list'
			    (Clist2)
		    in  %% Line 1161
			call 'erlang':'and'
			    (_cor5, _cor6) ->
	      let <_cor7> =
		  %% Line 1162
		  call 'erlang':'++'
		      (Clist1, Clist2)
	      in  %% Line 1162
		  apply 'gen_record'/4
		      (TorPtype, Name, _cor7, Num)
	  %% Line 1163
	  <TorPtype,Name,{Clist1,EClist,Clist2},Num>
	      when %% Line 1164
		try
		    let <_cor8> =
			call 'erlang':'is_list'
			    (Clist1)
		    in  let <_cor9> =
			    call 'erlang':'is_list'
				(EClist)
			in  let <_cor10> =
				call 'erlang':'is_list'
				    (Clist2)
			    in  let <_cor11> =
				    call 'erlang':'and'
					(_cor9, _cor10)
				in  call 'erlang':'and'
					(_cor8, _cor11)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor12> =
		  %% Line 1165
		  call 'erlang':'++'
		      (EClist, Clist2)
	      in  let <_cor13> =
		      %% Line 1165
		      call 'erlang':'++'
			  (Clist1, _cor12)
		  in  %% Line 1165
		      apply 'gen_record'/4
			  (TorPtype, Name, _cor13, Num)
	  %% Line 1166
	  <TorPtype,Name,[_cor61|T],Num> when 'true' ->
	      %% Line 1167
	      apply 'gen_record'/4
		  (TorPtype, Name, T, Num)
	  %% Line 1168
	  <_X_TorPtype,_X_Name,[],Num> when 'true' ->
	      %% Line 1169
	      Num
	  %% Line 1171
	  <TorPtype,Name,Type = {'type',_cor62,_cor63,_cor64,_cor65,_cor66},Num> when ( 'true'
											-| ['compiler_generated'] ) ->
	      let <_cor34> =
		  %% Line 1173
		  case _cor63 of
		    %% Line 1174
		    <Seq = {'SEQUENCE',_cor72,_cor73,_cor74,_cor75}> when ( 'true'
									    -| ['compiler_generated'] ) ->
			%% Line 1175
			case _cor72 of
			  %% Line 1176
			  <'false'> when 'true' ->
			      %% Line 1177
			      {'record',_cor75}
			  %% Line 1180
			  <_cor84> when 'true' ->
			      %% Line 1181
			      {'record',_cor75}
			end
		    %% Line 1183
		    <Set = {'SET',_cor89,_cor90,_cor91,_cor92}> when ( 'true'
								       -| ['compiler_generated'] ) ->
			%% Line 1184
			case _cor89 of
			  %% Line 1185
			  <'false'> when 'true' ->
			      let <_cor28> =
				  %% Line 1186
				  apply 'to_textual_order'/1
				      (_cor92)
			      in  %% Line 1186
				  {'record',_cor28}
			  %% Line 1187
			  <_X_Pname>
			      when call 'erlang':'=:='
				    (TorPtype,
				     'type') ->
			      %% Line 1188
			      'false'
			  %% Line 1189
			  <_cor101> when 'true' ->
			      let <_cor31> =
				  %% Line 1190
				  apply 'to_textual_order'/1
				      (_cor92)
			      in  %% Line 1190
				  {'record',_cor31}
			end
		    %% Line 1194
		    <{'CHOICE',_X_CompList}> when 'true' ->
			{'inner',_cor63}
		    %% Line 1195
		    <{'SEQUENCE OF',_X_CompList}> when 'true' ->
			{['SEQOF'|Name],_cor63}
		    %% Line 1196
		    <{'SET OF',_X_CompList}> when 'true' ->
			{['SETOF'|Name],_cor63}
		    %% Line 1197
		    <_cor106> when 'true' ->
			'false'
		  end
	      in  %% Line 1199
		  case _cor34 of
		    %% Line 1200
		    <'false'> when 'true' ->
			Num
		    %% Line 1201
		    <{'record',CompList}> when 'true' ->
			do  %% Line 1202
			    case Num of
			      %% Line 1203
			      <0> when 'true' ->
				  let <_cor37> =
				      call 'erlang':'get'
					  ('outfile')
				  in  let <_cor36> =
					  call 'erlang':'get'
					      ('currmod')
				      in  apply 'open_hrl'/2
					      (_cor37, _cor36)
			      %% Line 1204
			      <_cor107> when 'true' ->
				  'ok'
			    end
			    let <Prefix> =
				%% Line 1206
				apply 'get_record_name_prefix'/0
				    ()
			    in  let <_cor40> =
				    %% Line 1207
				    apply 'list2name'/1
					(Name)
				in  do  %% Line 1207
					apply 'emit'/1
					    ({[45|[114|[101|[99|[111|[114|[100|[40|[39]]]]]]]]],Prefix,_cor40,[39|[44|[123]]],'nl'})
					let <_cor42> =
					    %% Line 1208
					    case CompList of
					      %% Line 1209
					      <_cor108>
						  when call 'erlang':'is_list'
							(CompList) ->
						  %% Line 1210
						  CompList
					      %% Line 1211
					      <{Rl,_cor109}> when 'true' ->
						  Rl
					      %% Line 1212
					      <{Rl1,_X_Ext,_X_Rl2}> when 'true' ->
						  Rl1
					      ( <_cor41> when 'true' ->
						    primop 'match_fail'
							({'case_clause',_cor41})
						-| ['compiler_generated'] )
					    end
					in  do  %% Line 1214
						apply 'gen_record2'/3
						    (Name, 'SEQUENCE', _cor42)
						let <_cor49> =
						    %% Line 1216
						    case CompList of
						      %% Line 1217
						      <{CompList1,[]}> when 'true' ->
							  do  %% Line 1218
							      apply 'emit'/1
								  ({[125|[41|[46|[32|[37|[32|[119|[105|[116|[104|[32|[101|[120|[116|[101|[110|[115|[105|[111|[110|[32|[109|[97|[114|[107]]]]]]]]]]]]]]]]]]]]]]]]],'nl','nl'})
							      %% Line 1219
							      CompList1
						      %% Line 1220
						      <{Tr,ExtensionList2}> when 'true' ->
							  do  %% Line 1221
							      case Tr of
								%% Line 1222
								<[]> when 'true' ->
								    'ok'
								%% Line 1223
								<_cor110> when 'true' ->
								    apply 'emit'/1
									({[44],'nl'})
							      end
							      do  %% Line 1225
								  apply 'emit'/1
								      ({[37|[37|[32|[119|[105|[116|[104|[32|[101|[120|[116|[101|[110|[115|[105|[111|[110|[115]]]]]]]]]]]]]]]]]],'nl'})
								  do  %% Line 1226
								      apply 'gen_record2'/5
									  (Name, 'SEQUENCE', ExtensionList2, %% Line 1227
													     [], %% Line 1227
														 'ext')
								      do  %% Line 1228
									  apply 'emit'/1
									      ({[125|[41|[46]]],'nl','nl'})
									  %% Line 1229
									  call 'erlang':'++'
									      (Tr, ExtensionList2)
						      %% Line 1230
						      <{Rootl1,Extl,Rootl2}> when 'true' ->
							  do  %% Line 1231
							      case Rootl1 of
								%% Line 1232
								<[]> when 'true' ->
								    'ok'
								%% Line 1233
								<_cor111> when 'true' ->
								    apply 'emit'/1
									([[44]|['nl']])
							      end
							      do  %% Line 1235
								  apply 'emit'/1
								      ([[37|[37|[32|[119|[105|[116|[104|[32|[101|[120|[116|[101|[110|[115|[105|[111|[110|[115]]]]]]]]]]]]]]]]]]|['nl']])
								  do  %% Line 1236
								      apply 'gen_record2'/5
									  (Name, 'SEQUENCE', Extl, [], 'ext')
								      do  %% Line 1237
									  case Extl of
									    %% Line 1238
									    <[_X_H|_cor112]>
										when call 'erlang':'=/='
										      (Rootl2,
										       []) ->
										apply 'emit'/1
										    ([[44]|['nl']])
									    %% Line 1239
									    <_cor113> when 'true' ->
										'ok'
									  end
									  do  %% Line 1241
									      apply 'emit'/1
										  ([[37|[37|[32|[101|[110|[100|[32|[111|[102|[32|[101|[120|[116|[101|[110|[115|[105|[111|[110|[115]]]]]]]]]]]]]]]]]]]]|['nl']])
									      do  %% Line 1242
										  apply 'gen_record2'/5
										      (Name, 'SEQUENCE', Rootl2, [], 'noext')
										  do  %% Line 1243
										      apply 'emit'/1
											  ([[125|[41|[46]]]|['nl'|['nl']]])
										      let <_cor47> =
											  %% Line 1244
											  call 'erlang':'++'
											      (Extl, Rootl2)
										      in  %% Line 1244
											  call 'erlang':'++'
											      (Rootl1, _cor47)
						      %% Line 1245
						      <_cor114> when 'true' ->
							  do  %% Line 1246
							      apply 'emit'/1
								  ({[125|[41|[46]]],'nl','nl'})
							      %% Line 1247
							      CompList
						    end
						in  let <_cor51> =
							%% Line 1249
							call 'erlang':'+'
							    (Num, 1)
						    in  %% Line 1249
							apply 'gen_record'/4
							    (TorPtype, Name, _cor49, _cor51)
		    %% Line 1250
		    <{'inner',{'CHOICE',CompList}}> when 'true' ->
			%% Line 1251
			apply 'gen_record'/4
			    (TorPtype, Name, CompList, Num)
		    %% Line 1252
		    <{NewName,{_cor115,CompList}}> when 'true' ->
			%% Line 1253
			apply 'gen_record'/4
			    (TorPtype, NewName, CompList, Num)
		    ( <_cor52> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor52})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1255
	  <_cor116,_cor117,_cor118,NumRecords> when 'true' ->
	      %% Line 1256
	      NumRecords
	end
'gen_head'/3 =
    %% Line 1258
    fun (_cor2,_cor1,_cor0) ->
	let <Options> =
	    %% Line 1259
	    call 'erlang':'get'
		('encoding_options')
	in  do  %% Line 1260
		case _cor2 of
		  %% Line 1261
		  <'per'> when 'true' ->
		      let <_cor4> =
			  %% Line 1264
			  call 'asn1ct':'vsn'
			      ()
		      in  %% Line 1262
			  apply 'emit'/1
			      ([[37|[37|[32|[71|[101|[110|[101|[114|[97|[116|[101|[100|[32|[98|[121|[32|[116|[104|[101|[32|[69|[114|[108|[97|[110|[103|[32|[65|[83|[78|[46|[49|[32|[80|[69|[82|[45|[99|[111|[109|[112|[105|[108|[101|[114|[32|[118|[101|[114|[115|[105|[111|[110|[44|[32|[117|[116|[105|[108|[105|[122|[105|[110|[103|[32|[98|[105|[116|[45|[115|[121|[110|[116|[97|[120|[58]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|%% Line 1264
																																																									 [_cor4|['nl']]])
		  %% Line 1265
		  <'ber'> when 'true' ->
		      let <_cor5> =
			  %% Line 1268
			  call 'asn1ct':'vsn'
			      ()
		      in  %% Line 1266
			  apply 'emit'/1
			      ([[37|[37|[32|[71|[101|[110|[101|[114|[97|[116|[101|[100|[32|[98|[121|[32|[116|[104|[101|[32|[69|[114|[108|[97|[110|[103|[32|[65|[83|[78|[46|[49|[32|[66|[69|[82|[95|[86|[50|[45|[99|[111|[109|[112|[105|[108|[101|[114|[32|[118|[101|[114|[115|[105|[111|[110|[44|[32|[117|[116|[105|[108|[105|[122|[105|[110|[103|[32|[98|[105|[116|[45|[115|[121|[110|[116|[97|[120|[58]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|%% Line 1268
																																																											[_cor5|['nl']]])
		  %% Line 1269
		  <'uper'> when 'true' ->
		      let <_cor6> =
			  %% Line 1272
			  call 'asn1ct':'vsn'
			      ()
		      in  %% Line 1270
			  apply 'emit'/1
			      ([[37|[37|[32|[71|[101|[110|[101|[114|[97|[116|[101|[100|[32|[98|[121|[32|[116|[104|[101|[32|[69|[114|[108|[97|[110|[103|[32|[65|[83|[78|[46|[49|[32|[85|[78|[65|[76|[73|[71|[78|[69|[68|[32|[80|[69|[82|[45|[99|[111|[109|[112|[105|[108|[101|[114|[32|[118|[101|[114|[115|[105|[111|[110|[44|[32|[117|[116|[105|[108|[105|[122|[105|[110|[103|[32|[98|[105|[116|[45|[115|[121|[110|[116|[97|[120|[58]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|%% Line 1272
																																																															   [_cor6|['nl']]])
		  ( <_cor7> when 'true' ->
			primop 'match_fail'
			    ({'case_clause',_cor7})
		    -| ['compiler_generated'] )
		end
		do  %% Line 1274
		    apply 'emit'/1
			({[37|[37|[32|[80|[117|[114|[112|[111|[115|[101|[58|[32|[101|[110|[99|[111|[100|[101|[114|[32|[97|[110|[100|[32|[100|[101|[99|[111|[100|[101|[114|[32|[116|[111|[32|[116|[104|[101|[32|[116|[121|[112|[101|[115|[32|[105|[110|[32|[109|[111|[100|[32]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],_cor1,'nl','nl'})
		    do  %% Line 1275
			apply 'emit'/1
			    ({[45|[109|[111|[100|[117|[108|[101|[40|[39]]]]]]]]],_cor1,[39|[41|[46]]],'nl'})
			do  %% Line 1276
			    call 'erlang':'put'
				('currmod', _cor1)
			    do  %% Line 1277
				apply 'emit'/1
				    ({[45|[99|[111|[109|[112|[105|[108|[101|[40|[110|[111|[119|[97|[114|[110|[95|[117|[110|[117|[115|[101|[100|[95|[118|[97|[114|[115|[41|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]],'nl'})
				do  %% Line 1278
				    case _cor0 of
				      %% Line 1279
				      <0> when 'true' ->
					  'ok'
				      %% Line 1280
				      <_cor14> when 'true' ->
					  apply 'emit'/1
					      ({[45|[105|[110|[99|[108|[117|[100|[101|[40|[34]]]]]]]]]],_cor1,[46|[104|[114|[108|[34|[41|[46]]]]]]],'nl'})
				    end
				    let <_cor9> =
					%% Line 1282
					call 'asn1ct':'vsn'
					    ()
				    in  let <_cor10> =
					    %% Line 1284
					    call 'io_lib':'format'
						([126|[112]], [Options|[]])
					in  %% Line 1282
					    apply 'emit'/1
						([[45|[97|[115|[110|[49|[95|[105|[110|[102|[111|[40|[91|[123|[118|[115|[110|[44|[39]]]]]]]]]]]]]]]]]]|[_cor9|[[39|[125|[44]]]|['nl'|%% Line 1283
																						    [[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[123|[109|[111|[100|[117|[108|[101|[44|[39]]]]]]]]]]]]]]]]]]]]]|[_cor1|[[39|[125|[44]]]|['nl'|%% Line 1284
																																								   [[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[123|[111|[112|[116|[105|[111|[110|[115|[44]]]]]]]]]]]]]]]]]]]]]|[_cor10|[[125|[93|[41|[46]]]]|['nl'|['nl']]]]]]]]]]]]])
'gen_hrlhead'/1 =
    %% Line 1287
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 1288
	    call 'asn1ct':'vsn'
		()
	in  do  %% Line 1288
		apply 'emit'/1
		    ({[37|[37|[32|[71|[101|[110|[101|[114|[97|[116|[101|[100|[32|[98|[121|[32|[116|[104|[101|[32|[69|[114|[108|[97|[110|[103|[32|[65|[83|[78|[46|[49|[32|[99|[111|[109|[112|[105|[108|[101|[114|[32|[118|[101|[114|[115|[105|[111|[110|[58]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],_cor1,'nl'})
		do  %% Line 1289
		    apply 'emit'/1
			({[37|[37|[32|[80|[117|[114|[112|[111|[115|[101|[58|[32|[69|[114|[108|[97|[110|[103|[32|[114|[101|[99|[111|[114|[100|[32|[100|[101|[102|[105|[110|[105|[116|[105|[111|[110|[115|[32|[102|[111|[114|[32|[101|[97|[99|[104|[32|[110|[97|[109|[101|[100|[32|[97|[110|[100|[32|[117|[110|[110|[97|[109|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],'nl'})
		    do  %% Line 1290
			apply 'emit'/1
			    ({[37|[37|[32|[83|[69|[81|[85|[69|[78|[67|[69|[32|[97|[110|[100|[32|[83|[69|[84|[44|[32|[97|[110|[100|[32|[109|[97|[99|[114|[111|[32|[100|[101|[102|[105|[110|[105|[116|[105|[111|[110|[115|[32|[102|[111|[114|[32|[101|[97|[99|[104|[32|[118|[97|[108|[117|[101]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],'nl'})
			do  %% Line 1291
			    apply 'emit'/1
				({[37|[37|[32|[100|[101|[102|[105|[110|[105|[116|[105|[111|[110|[44|[105|[110|[32|[109|[111|[100|[117|[108|[101|[32]]]]]]]]]]]]]]]]]]]]]]]],_cor0,'nl','nl'})
			    %% Line 1292
			    apply 'emit'/1
				({'nl','nl'})
'gen_record2'/3 =
    %% Line 1294
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1295
	apply 'gen_record2'/5
	    (_cor2, _cor1, _cor0, [], 'noext')
'gen_record2'/5 =
    %% Line 1297
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <_X_Name,_X_SeqOrSet,[],_X_Com,_X_Extension> when 'true' ->
	      %% Line 1298
	      'true'
	  %% Line 1299
	  <_X_Name,_X_SeqOrSet,[H = {'ComponentType',_cor10,Cname,_cor11,_cor12,_cor13,_cor14}|[]],Com,Extension> when 'true' ->
	      do  %% Line 1300
		  apply 'emit'/1
		      (Com)
		  do  %% Line 1301
		      apply 'emit'/1
			  ({'asis',Cname})
		      %% Line 1302
		      apply 'gen_record_default'/2
			  (H, Extension)
	  %% Line 1303
	  <Name,SeqOrSet,[H = {'ComponentType',_cor15,Cname,_cor16,_cor17,_cor18,_cor19}|T],Com,Extension> when 'true' ->
	      do  %% Line 1304
		  apply 'emit'/1
		      (Com)
		  do  %% Line 1305
		      apply 'emit'/1
			  ({'asis',Cname})
		      do  %% Line 1306
			  apply 'gen_record_default'/2
			      (H, Extension)
			  %% Line 1307
			  apply 'gen_record2'/5
			      (Name, SeqOrSet, T, [44|[32]], Extension)
	  %% Line 1308
	  <Name,SeqOrSet,[_cor20|T],Com,Extension> when 'true' ->
	      %% Line 1310
	      apply 'gen_record2'/5
		  (Name, SeqOrSet, T, Com, Extension)
	  ( <_cor9,_cor8,_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7,_cor6,_cor5})
		  -| [{'function_name',{'gen_record2',5}}] )
	    -| ['compiler_generated'] )
	end
'gen_record_default'/2 =
    %% Line 1312
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'ComponentType',_cor4,_cor5,_cor6,'OPTIONAL',_cor7,_cor8},_cor9> when 'true' ->
	      %% Line 1313
	      apply 'emit'/1
		  ([32|[61|[32|[97|[115|[110|[49|[95|[78|[79|[86|[65|[76|[85|[69]]]]]]]]]]]]]]])
	  %% Line 1314
	  <{'ComponentType',_cor10,_cor11,_cor12,{'DEFAULT',_cor13},_cor14,_cor15},_cor16> when 'true' ->
	      %% Line 1315
	      apply 'emit'/1
		  ([32|[61|[32|[97|[115|[110|[49|[95|[68|[69|[70|[65|[85|[76|[84]]]]]]]]]]]]]]])
	  %% Line 1316
	  <_cor17,_cor18> when 'true' ->
	      %% Line 1317
	      'true'
	end
'to_textual_order'/1 =
    %% Line 1320
    fun (_cor0) ->
	case _cor0 of
	  <{Root,Ext}> when 'true' ->
	      let <_cor1> =
		  %% Line 1321
		  apply 'to_textual_order'/1
		      (Root)
	      in  %% Line 1321
		  {_cor1,Ext}
	  %% Line 1322
	  <Cs = {_X_R1,_X_Ext,_X_R2}> when 'true' ->
	      %% Line 1323
	      Cs
	  %% Line 1324
	  <Cs = [{'ComponentType',_cor3,_cor4,_cor5,_cor6,_cor7,'undefined'}|_cor8]> when 'true' ->
	      %% Line 1325
	      Cs
	  %% Line 1326
	  <Cs>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      %% Line 1327
	      call 'lists':'keysort'
		  (7, Cs)
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'to_textual_order',1}}] )
	    -| ['compiler_generated'] )
	end
'insert_once'/2 =
    %% Line 1329
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 1330
	    call 'erlang':'element'
		(1, _cor0)
	in  %% Line 1330
	    case call 'asn1ct_table':'lookup'
		     (_cor1, _cor2) of
	      %% Line 1331
	      <[]> when 'true' ->
		  %% Line 1332
		  call 'asn1ct_table':'insert'
		      (_cor1, _cor0)
	      %% Line 1333
	      <_cor6> when 'true' ->
		  'false'
	    end
'unify_if_string'/1 =
    %% Line 1336
    fun (_cor0) ->
	%% Line 1337
	case _cor0 of
	  %% Line 1338
	  <'NumericString'> when 'true' ->
	      %% Line 1339
	      'restrictedstring'
	  %% Line 1340
	  <'PrintableString'> when 'true' ->
	      %% Line 1341
	      'restrictedstring'
	  %% Line 1342
	  <'TeletexString'> when 'true' ->
	      %% Line 1343
	      'restrictedstring'
	  %% Line 1344
	  <'T61String'> when 'true' ->
	      %% Line 1345
	      'restrictedstring'
	  %% Line 1346
	  <'VideotexString'> when 'true' ->
	      %% Line 1347
	      'restrictedstring'
	  %% Line 1348
	  <'IA5String'> when 'true' ->
	      %% Line 1349
	      'restrictedstring'
	  %% Line 1350
	  <'UTCTime'> when 'true' ->
	      %% Line 1351
	      'restrictedstring'
	  %% Line 1352
	  <'GeneralizedTime'> when 'true' ->
	      %% Line 1353
	      'restrictedstring'
	  %% Line 1354
	  <'GraphicString'> when 'true' ->
	      %% Line 1355
	      'restrictedstring'
	  %% Line 1356
	  <'VisibleString'> when 'true' ->
	      %% Line 1357
	      'restrictedstring'
	  %% Line 1358
	  <'GeneralString'> when 'true' ->
	      %% Line 1359
	      'restrictedstring'
	  %% Line 1360
	  <'UniversalString'> when 'true' ->
	      %% Line 1361
	      'restrictedstring'
	  %% Line 1362
	  <'BMPString'> when 'true' ->
	      %% Line 1363
	      'restrictedstring'
	  %% Line 1364
	  <'UTF8String'> when 'true' ->
	      %% Line 1365
	      'restrictedstring'
	  %% Line 1366
	  <Other> when 'true' ->
	      Other
	end
'conform_value'/2 =
    %% Line 1369
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'type',_cor13,{'BIT STRING',[]},_cor14,_cor15,_cor16},Bs> when 'true' ->
	      %% Line 1370
	      case call 'asn1ct':'get_bit_string_format'
		       () of
		%% Line 1371
		<'compact'>
		    when call 'erlang':'is_binary'
			  (Bs) ->
		    %% Line 1372
		    {0,Bs}
		%% Line 1373
		<'compact'>
		    when call 'erlang':'is_bitstring'
			  (Bs) ->
		    let <Sz> =
			%% Line 1374
			call 'erlang':'bit_size'
			    (Bs)
		    in  let <_cor3> =
			    %% Line 1375
			    call 'erlang':'bit_size'
				(Bs)
			in  let <Unused> =
				%% Line 1375
				call 'erlang':'-'
				    (8, _cor3)
			    in  let <_cor5> =
				    %% Line 1376
				    #{#<Bs>(Sz,1,'binary',['unsigned'|['big']]),
				      #<0>(Unused,1,'integer',['unsigned'|['big']])}#
				in  %% Line 1376
				    {Unused,_cor5}
		%% Line 1377
		<'legacy'> when 'true' ->
		    %% Line 1378
		    ( letrec
			  'lc$^0'/1 =
			      fun (_cor7) ->
				  case ( _cor7
					 -| ['reuse_for_context'] ) of
				    <#{#<B>(1,1,'integer',['unsigned'|['big']]),
				       #<_cor6>('all',1,'binary',['unsigned'|['big']])}#> when 'true' ->
					let <_cor8> =
					    apply 'lc$^0'/1
						(_cor6)
					in  ( [B|_cor8]
					      -| ['compiler_generated'] )
				    <#{#<_cor6>('all',1,'binary',['unsigned'|['big']])}#> when 'true' ->
					[]
				    ( <_cor7> when 'true' ->
					  do  primop 'bs_context_to_binary'
						  (_cor7)
					      ( primop 'match_fail'
						    ({'function_clause',_cor7})
						-| [{'function_name',{'lc$^0',1}}] )
				      -| ['compiler_generated'] )
				  end
		      in  apply 'lc$^0'/1
			      (Bs)
		      -| ['list_comprehension'] )
		%% Line 1379
		<'bitstring'>
		    when call 'erlang':'is_bitstring'
			  (Bs) ->
		    %% Line 1380
		    Bs
		( <_cor9> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor9})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1382
	  <{'type',_cor17,'OCTET STRING',_cor18,_cor19,_cor20},String> when 'true' ->
	      %% Line 1383
	      case call 'asn1ct':'use_legacy_types'
		       () of
		%% Line 1384
		<'false'> when 'true' ->
		    String
		%% Line 1385
		<'true'> when 'true' ->
		    call 'erlang':'binary_to_list'
			(String)
		( <_cor10> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor10})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1387
	  <_cor21,Value> when 'true' ->
	      Value
	end
'named_bitstring_value'/2 =
    %% Line 1389
    fun (_cor1,_cor0) ->
	let <_cor8> =
	    %% Line 1390
	    ( fun (_cor5,_cor4) ->
		  %% Line 1391
		  case call 'lists':'keyfind'
			   (_cor5, 1, _cor0) of
		    <{_cor12,Pos}>
			when call 'erlang':'=:='
			      (_cor12,
			       _cor5) ->
			let <_cor3> =
			    %% Line 1392
			    call 'erlang':'bsl'
				(1, Pos)
			in  %% Line 1392
			    call 'erlang':'bor'
				(_cor4, _cor3)
		    ( <_cor2> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor2})
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-named_bitstring_value/2-fun-0-'}}] )
	in  let <Int> =
		%% Line 1390
		call 'lists':'foldl'
		    (_cor8, %% Line 1393
			    0, _cor1)
	    in  %% Line 1394
		apply 'named_bitstring_value_1'/2
		    (#{}#, Int)
'named_bitstring_value_1'/2 =
    %% Line 1396
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Bs,0> when 'true' ->
	      %% Line 1397
	      Bs
	  %% Line 1398
	  <Bs,Int> when 'true' ->
	      let <B> =
		  %% Line 1399
		  call 'erlang':'band'
		      (Int, 1)
	      in  let <_cor4> =
		      %% Line 1400
		      #{#<Bs>('all',1,'binary',['unsigned'|['big']]),
			#<B>(1,1,'integer',['unsigned'|['big']])}#
		  in  let <_cor3> =
			  %% Line 1400
			  call 'erlang':'bsr'
			      (Int, 1)
		      in  %% Line 1400
			  apply 'named_bitstring_value_1'/2
			      (_cor4, _cor3)
	end
'get_inner'/1 =
    %% Line 1402
    fun (_cor0) ->
	case _cor0 of
	  <A>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      A
	  %% Line 1403
	  <Ext = {'Externaltypereference',_cor13,_cor14,_cor15}> when ( 'true'
									-| ['compiler_generated'] ) ->
	      Ext
	  %% Line 1404
	  <{'fixedtypevaluefield',_cor16,Type}> when 'true' ->
	      %% Line 1405
	      case <> of
		%% Line 1406
		<>
		    when ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'is_record'
							     -| ['compiler_generated'] )
			    (Type,
			     'type',
			     6)
			-| ['compiler_generated'] ) ->
		    %% Line 1407
		    ( case Type of
			( <( {'type',_cor17,_rec52,_cor18,_cor19,_cor20}
			     -| ['compiler_generated'] )> when 'true' ->
			      apply 'get_inner'/1
				  (_rec52)
			  -| ['compiler_generated'] )
			( <_cor21> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','type'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		%% Line 1408
		<> when 'true' ->
		    %% Line 1409
		    apply 'get_inner'/1
			(Type)
	      end
	  %% Line 1411
	  <{'typefield',TypeName}> when 'true' ->
	      %% Line 1412
	      TypeName
	  %% Line 1413
	  <{'ObjectClassFieldType',_cor22,_cor23,_cor24,Type}> when 'true' ->
	      %% Line 1415
	      Type
	  %% Line 1416
	  <T>
	      when call 'erlang':'is_tuple'
		    (_cor0) ->
	      %% Line 1417
	      case call 'erlang':'element'
		       (1, T) of
		%% Line 1418
		<Tuple>
		    when try
			  let <_cor3> =
			      call 'erlang':'is_tuple'
				  (Tuple)
			  in  let <_cor4> =
				  call 'erlang':'element'
				      (1, Tuple)
			      in  let <_cor5> =
				      call 'erlang':'=:='
					  (_cor4, 'objectclass')
				  in  call 'erlang':'and'
					  (_cor3, _cor5)
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false' ->
		    let <_cor7> =
			catch
			    let <_cor6> =
				%% Line 1419
				call 'erlang':'element'
				    (2, T)
			    in  %% Line 1419
				call 'lists':'last'
				    (_cor6)
		    in  %% Line 1419
			case _cor7 of
			  %% Line 1420
			  <{'valuefieldreference',FieldName}> when 'true' ->
			      let <_cor8> =
				  %% Line 1421
				  call 'erlang':'element'
				      (2, Tuple)
			      in  %% Line 1421
				  apply 'get_fieldtype'/2
				      (_cor8, FieldName)
			  %% Line 1422
			  <{'typefieldreference',FieldName}> when 'true' ->
			      let <_cor9> =
				  %% Line 1423
				  call 'erlang':'element'
				      (2, Tuple)
			      in  %% Line 1423
				  apply 'get_fieldtype'/2
				      (_cor9, FieldName)
			  %% Line 1424
			  <{'EXIT',Reason}> when 'true' ->
			      %% Line 1425
			      call 'erlang':'throw'
				  ({'asn1',{'internal error in get_inner/1',Reason}})
			  ( <_cor10> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor10})
			    -| ['compiler_generated'] )
			end
		%% Line 1427
		<_cor25> when 'true' ->
		    call 'erlang':'element'
			(1, T)
	      end
	  ( <_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12})
		  -| [{'function_name',{'get_inner',1}}] )
	    -| ['compiler_generated'] )
	end
'type'/1 =
    %% Line 1434
    fun (_cor0) ->
	case _cor0 of
	  <X = {'Externaltypereference',_cor7,_cor8,_cor9}> when ( 'true'
								   -| ['compiler_generated'] ) ->
	      %% Line 1435
	      X
	  %% Line 1436
	  <'ASN1_OPEN_TYPE'> when 'true' ->
	      %% Line 1437
	      'ASN1_OPEN_TYPE'
	  %% Line 1438
	  <{'fixedtypevaluefield',_X_Name,Type = {'type',_cor10,_cor11,_cor12,_cor13,_cor14}}> when ( 'true'
												      -| ['compiler_generated'] ) ->
	      let <_cor3> =
		  %% Line 1439
		  apply 'get_inner'/1
		      (_cor11)
	      in  %% Line 1439
		  apply 'type'/1
		      (_cor3)
	  %% Line 1440
	  <{'typefield',_cor20}> when 'true' ->
	      %% Line 1441
	      'ASN1_OPEN_TYPE'
	  %% Line 1442
	  <X> when 'true' ->
	      %% Line 1443
	      case apply 'prim_bif'/1
		       (X) of
		%% Line 1444
		<'true'> when 'true' ->
		    %% Line 1445
		    {'primitive','bif'}
		%% Line 1446
		<'false'> when 'true' ->
		    %% Line 1447
		    case apply 'construct_bif'/1
			     (X) of
		      %% Line 1448
		      <'true'> when 'true' ->
			  %% Line 1449
			  {'constructed','bif'}
		      %% Line 1450
		      <'false'> when 'true' ->
			  %% Line 1451
			  {'undefined','user'}
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor4})
			-| ['compiler_generated'] )
		    end
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor5})
		  -| ['compiler_generated'] )
	      end
	end
'prim_bif'/1 =
    %% Line 1455
    fun (_cor0) ->
	%% Line 1456
	call 'lists':'member'
	    (_cor0, ['INTEGER'|['ENUMERATED'|['REAL'|['OBJECT IDENTIFIER'|['RELATIVE-OID'|['NULL'|['BIT STRING'|['OCTET STRING'|['ObjectDescriptor'|['NumericString'|['TeletexString'|['T61String'|['VideotexString'|['UTCTime'|['GeneralizedTime'|['GraphicString'|['VisibleString'|['GeneralString'|['PrintableString'|['IA5String'|['UniversalString'|['UTF8String'|['BMPString'|['ENUMERATED'|['BOOLEAN']]]]]]]]]]]]]]]]]]]]]]]]])
'construct_bif'/1 =
    %% Line 1482
    fun (_cor0) ->
	%% Line 1483
	call 'lists':'member'
	    (_cor0, ['SEQUENCE'|['SEQUENCE OF'|['CHOICE'|['SET'|['SET OF']]]]])
'def_to_tag'/1 =
    %% Line 1489
    fun (_cor0) ->
	case _cor0 of
	  <{'tag',Class,Number,_cor8,_cor9}> when 'true' ->
	      %% Line 1490
	      {Class,Number}
	  %% Line 1491
	  <{'ObjectClassFieldType',_cor10,_cor11,_cor12,Type}> when 'true' ->
	      %% Line 1492
	      case Type of
		%% Line 1493
		<T>
		    when try
			  let <_cor1> =
			      call 'erlang':'is_tuple'
				  (Type)
			  in  let <_cor2> =
				  call 'erlang':'element'
				      (1, Type)
			      in  let <_cor3> =
				      call 'erlang':'=:='
					  (_cor2, 'fixedtypevaluefield')
				  in  call 'erlang':'and'
					  (_cor1, _cor3)
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false' ->
		    let <_cor4> =
			%% Line 1494
			apply 'get_inner'/1
			    (Type)
		    in  %% Line 1494
			{'UNIVERSAL',_cor4}
		%% Line 1495
		<_cor13> when 'true' ->
		    %% Line 1496
		    []
	      end
	  %% Line 1498
	  <Def> when 'true' ->
	      let <_cor6> =
		  %% Line 1499
		  apply 'get_inner'/1
		      (Def)
	      in  %% Line 1499
		  {'UNIVERSAL',_cor6}
	end
'get_fieldtype'/2 =
    %% Line 1504
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],_X_FieldName> when 'true' ->
	      %% Line 1505
	      {'no_type','no_name'}
	  %% Line 1506
	  <[Field|Rest],FieldName> when 'true' ->
	      %% Line 1507
	      case call 'erlang':'element'
		       (2, Field) of
		%% Line 1508
		<_cor9>
		    when call 'erlang':'=:='
			  (_cor9,
			   FieldName) ->
		    %% Line 1509
		    case call 'erlang':'element'
			     (1, Field) of
		      %% Line 1510
		      <'fixedtypevaluefield'> when 'true' ->
			  let <_cor3> =
			      %% Line 1511
			      call 'erlang':'element'
				  (1, Field)
			  in  let <_cor2> =
				  %% Line 1511
				  call 'erlang':'element'
				      (3, Field)
			      in  %% Line 1511
				  {_cor3,FieldName,_cor2}
		      %% Line 1512
		      <_cor10> when 'true' ->
			  let <_cor4> =
			      %% Line 1513
			      call 'erlang':'element'
				  (1, Field)
			  in  %% Line 1513
			      {_cor4,FieldName}
		    end
		%% Line 1515
		<_cor11> when 'true' ->
		    %% Line 1516
		    apply 'get_fieldtype'/2
			(Rest, FieldName)
	      end
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'get_fieldtype',2}}] )
	    -| ['compiler_generated'] )
	end
'list2name'/1 =
    %% Line 1526
    fun (_cor0) ->
	let <NewL> =
	    %% Line 1527
	    apply 'list2name1'/1
		(_cor0)
	in  let <_cor2> =
		%% Line 1528
		call 'lists':'reverse'
		    (NewL)
	    in  %% Line 1528
		call 'lists':'concat'
		    (_cor2)
'list2name1'/1 =
    %% Line 1530
    fun (_cor0) ->
	case _cor0 of
	  <[{'ptype',H1}|[H2|T]]> when 'true' ->
	      let <_cor1> =
		  %% Line 1531
		  apply 'list2name'/1
		      ([H2|T])
	      in  %% Line 1531
		  [H1|[[95]|[_cor1|[]]]]
	  %% Line 1532
	  <[H1|[H2|T]]> when 'true' ->
	      let <_cor2> =
		  %% Line 1533
		  apply 'list2name'/1
		      ([H2|T])
	      in  %% Line 1533
		  [H1|[[95]|[_cor2|[]]]]
	  %% Line 1534
	  <[{'ptype',H}|_X_T]> when 'true' ->
	      %% Line 1535
	      [H|[]]
	  %% Line 1536
	  <[H|_X_T]> when 'true' ->
	      %% Line 1537
	      [H|[]]
	  %% Line 1538
	  <[]> when 'true' ->
	      %% Line 1539
	      []
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'list2name1',1}}] )
	    -| ['compiler_generated'] )
	end
'list2rname'/1 =
    %% Line 1547
    fun (_cor0) ->
	let <NewL> =
	    %% Line 1548
	    apply 'list2rname1'/1
		(_cor0)
	in  let <_cor2> =
		%% Line 1549
		call 'lists':'reverse'
		    (NewL)
	    in  %% Line 1549
		call 'lists':'concat'
		    (_cor2)
'list2rname1'/1 =
    %% Line 1551
    fun (_cor0) ->
	case _cor0 of
	  <[{'ptype',H1}|[_X_H2|_X_T]]> when 'true' ->
	      %% Line 1552
	      [H1|[]]
	  %% Line 1553
	  <[H1|[H2|T]]> when 'true' ->
	      let <_cor1> =
		  %% Line 1554
		  apply 'list2name'/1
		      ([H2|T])
	      in  %% Line 1554
		  [H1|[[95]|[_cor1|[]]]]
	  %% Line 1555
	  <[{'ptype',H}|_X_T]> when 'true' ->
	      %% Line 1556
	      [H|[]]
	  %% Line 1557
	  <[H|_X_T]> when 'true' ->
	      %% Line 1558
	      [H|[]]
	  %% Line 1559
	  <[]> when 'true' ->
	      %% Line 1560
	      []
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'list2rname1',1}}] )
	    -| ['compiler_generated'] )
	end
'constructed_suffix'/2 =
    %% Line 1564
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <_cor4,{'SEQUENCE',Ptypename,_cor5,_cor6,_cor7}>
	      when call 'erlang':'=/='
		    (Ptypename,
		     'false') ->
	      %% Line 1565
	      {'ptype',Ptypename}
	  %% Line 1566
	  <_cor8,{'SET',Ptypename,_cor9,_cor10,_cor11}>
	      when call 'erlang':'=/='
		    (Ptypename,
		     'false') ->
	      %% Line 1567
	      {'ptype',Ptypename}
	  %% Line 1568
	  <'SEQUENCE OF',_cor12> when 'true' ->
	      %% Line 1569
	      'SEQOF'
	  %% Line 1570
	  <'SET OF',_cor13> when 'true' ->
	      %% Line 1571
	      'SETOF'
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'constructed_suffix',2}}] )
	    -| ['compiler_generated'] )
	end
'erule'/1 =
    %% Line 1573
    fun (_cor0) ->
	case _cor0 of
	  <'ber'> when 'true' ->
	      'ber'
	  %% Line 1574
	  <'per'> when 'true' ->
	      'per'
	  %% Line 1575
	  <'uper'> when 'true' ->
	      'per'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'erule',1}}] )
	    -| ['compiler_generated'] )
	end
'index2suffix'/1 =
    %% Line 1577
    fun (_cor0) ->
	case _cor0 of
	  <0> when 'true' ->
	      %% Line 1578
	      []
	  %% Line 1579
	  <N> when 'true' ->
	      %% Line 1580
	      call 'lists':'concat'
		  ([[95]|[N|[]]])
	end
'ct_gen_module'/1 =
    %% Line 1582
    fun (_cor0) ->
	case _cor0 of
	  <'ber'> when 'true' ->
	      %% Line 1583
	      'asn1ct_gen_ber_bin_v2'
	  %% Line 1584
	  <'per'> when 'true' ->
	      %% Line 1585
	      'asn1ct_gen_per'
	  %% Line 1586
	  <'uper'> when 'true' ->
	      %% Line 1587
	      'asn1ct_gen_per'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'ct_gen_module',1}}] )
	    -| ['compiler_generated'] )
	end
'ct_constructed_module'/1 =
    %% Line 1589
    fun (_cor0) ->
	case _cor0 of
	  <'ber'> when 'true' ->
	      %% Line 1590
	      'asn1ct_constructed_ber_bin_v2'
	  %% Line 1591
	  <'per'> when 'true' ->
	      %% Line 1592
	      'asn1ct_constructed_per'
	  %% Line 1593
	  <'uper'> when 'true' ->
	      %% Line 1594
	      'asn1ct_constructed_per'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'ct_constructed_module',1}}] )
	    -| ['compiler_generated'] )
	end
'get_constraint'/2 =
    %% Line 1596
    fun (_cor1,_cor0) ->
	%% Line 1597
	case call 'lists':'keysearch'
		 (_cor0, 1, _cor1) of
	  %% Line 1598
	  <'false'> when 'true' ->
	      %% Line 1599
	      'no'
	  %% Line 1600
	  <{'value',{_cor5,V}}> when 'true' ->
	      %% Line 1601
	      V
	  %% Line 1602
	  <{'value',Cnstr}> when 'true' ->
	      %% Line 1603
	      Cnstr
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor2})
	    -| ['compiler_generated'] )
	end
'get_record_name_prefix'/0 =
    %% Line 1606
    fun () ->
	let <_cor0> =
	    %% Line 1607
	    call 'erlang':'get'
		('encoding_options')
	in  %% Line 1607
	    case call 'lists':'keysearch'
		     ('record_name_prefix', 1, _cor0) of
	      %% Line 1608
	      <'false'> when 'true' ->
		  %% Line 1609
		  []
	      %% Line 1610
	      <{'value',{_cor2,Prefix}}> when 'true' ->
		  %% Line 1611
		  Prefix
	      ( <_cor1> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor1})
		-| ['compiler_generated'] )
	    end
'get_macro_name_prefix'/0 =
    %% Line 1614
    fun () ->
	let <_cor0> =
	    %% Line 1615
	    call 'erlang':'get'
		('encoding_options')
	in  %% Line 1615
	    case call 'lists':'keysearch'
		     ('macro_name_prefix', 1, _cor0) of
	      %% Line 1616
	      <'false'> when 'true' ->
		  %% Line 1617
		  []
	      %% Line 1618
	      <{'value',{_cor2,Prefix}}> when 'true' ->
		  %% Line 1619
		  Prefix
	      ( <_cor1> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor1})
		-| ['compiler_generated'] )
	    end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('asn1ct_gen')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('asn1ct_gen', _cor0)
end