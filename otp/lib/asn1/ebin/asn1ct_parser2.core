module 'asn1ct_parser2' ['module_info'/0,
			 'module_info'/1,
			 'parse'/1]
    attributes []
'parse'/1 =
    %% Line 31
    fun (_cor0) ->
	let <_cor1> =
	    catch
		%% Line 32
		apply 'parse_ModuleDefinition'/1
		    (_cor0)
	in  %% Line 32
	    case _cor1 of
	      %% Line 33
	      <{'EXIT',Reason}> when 'true' ->
		  let <_cor3> =
		      %% Line 34
		      call 'erlang':'get'
			  ('asn1_module')
		  in  let <_cor2> =
			  %% Line 36
			  call 'erlang':'hd'
			      (_cor0)
		      in  %% Line 34
			  {'error',{{'undefined',_cor3,%% Line 35
						       ['internal'|['error'|['when'|['parsing'|['module'|['definition'|[Reason|[]]]]]]]]},_cor2}}
	      %% Line 37
	      <{'asn1_error',Reason}> when 'true' ->
		  let <_cor4> =
		      %% Line 38
		      call 'erlang':'hd'
			  (_cor0)
		  in  %% Line 38
		      {'error',{Reason,_cor4}}
	      %% Line 39
	      <{ModuleDefinition,Rest1}> when 'true' ->
		  %% Line 40
		  case apply 'parse_AssignmentList'/1
			   (Rest1) of
		    <{Types,Rest2}> when 'true' ->
			do  %% Line 41
			    apply 'clean_process_dictionary'/0
				()
			    %% Line 42
			    case Rest2 of
			      %% Line 43
			      <[{'END',_cor18}|_X_Rest3]> when 'true' ->
				  %% Line 44
				  case ModuleDefinition of
				    <{'module',_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26}> when 'true' ->
					let <_cor8> =
					    call 'erlang':'setelement'
						(9, ModuleDefinition, Types)
					in  {'ok',_cor8}
				    ( <_cor27> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {'badrecord','module'}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
			      %% Line 45
			      <_cor28> when 'true' ->
				  let <_cor13> =
				      %% Line 46
				      call 'erlang':'hd'
					  (Rest2)
				  in  let <_cor14> =
					  %% Line 46
					  apply 'get_line'/1
					      (_cor13)
				      in  let <_cor12> =
					      %% Line 46
					      call 'erlang':'get'
						  ('asn1_module')
					  in  let <_cor10> =
						  %% Line 47
						  call 'erlang':'hd'
						      (Rest2)
					      in  let <_cor11> =
						      %% Line 47
						      apply 'get_token'/1
							  (_cor10)
						  in  let <_cor9> =
							  %% Line 48
							  call 'erlang':'hd'
							      (Rest2)
						      in  %% Line 46
							  {'error',{{_cor14,_cor12,%% Line 47
										   ['got'|[_cor11|['expected'|['END']]]]},_cor9}}
			    end
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor5})
		      -| ['compiler_generated'] )
		  end
	      ( <_cor16> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor16})
		-| ['compiler_generated'] )
	    end
'clean_process_dictionary'/0 =
    %% Line 52
    fun () ->
	let <Mod> =
	    %% Line 53
	    call 'erlang':'erase'
		('asn1_module')
	in  let <_X_> =
		%% Line 54
		( call 'erlang':'erase'
		      ({Mod,'imports'})
		  -| ['result_not_wanted'] )
	    in  let <_X_> =
		    %% Line 55
		    ( call 'erlang':'erase'
			  ('tagdefault')
		      -| ['result_not_wanted'] )
		in  do  %% Line 56
			( call 'erlang':'erase'
			      ('extensiondefault')
			  -| ['result_not_wanted'] )
			%% Line 57
			'ok'
'parse_ModuleDefinition'/1 =
    %% Line 59
    fun (_cor0) ->
	case _cor0 of
	  <[{'typereference',L1,ModuleIdentifier}|Rest0]> when 'true' ->
	      do  %% Line 60
		  call 'erlang':'put'
		      ('asn1_module', ModuleIdentifier)
		  let <_cor2> =
		      %% Line 62
		      case Rest0 of
			%% Line 63
			<[{'{',_cor33}|_X_Rest01]> when 'true' ->
			    %% Line 64
			    apply 'parse_ObjectIdentifierValue'/1
				(Rest0)
			%% Line 65
			<_cor34> when 'true' ->
			    %% Line 66
			    {[],Rest0}
		      end
		  in  %% Line 61
		      case _cor2 of
			<{_X_DefinitiveIdentifier,Rest02}> when 'true' ->
			    %% Line 68
			    case Rest02 of
			      %% Line 69
			      <[{'DEFINITIONS',_cor35}|Rest03]> when 'true' ->
				  let <TagDefault,Rest2> =
				      %% Line 77
				      case Rest03 of
					%% Line 78
					<[{'EXPLICIT',_X_L3}|[{'TAGS',_X_L4}|Rest1]]> when 'true' ->
					    do  %% Line 79
						call 'erlang':'put'
						    ('tagdefault', 'EXPLICIT')
						%% Line 79
						<'EXPLICIT',Rest1>
					%% Line 80
					<[{'IMPLICIT',_X_L3}|[{'TAGS',_X_L4}|Rest1]]> when 'true' ->
					    do  %% Line 81
						call 'erlang':'put'
						    ('tagdefault', 'IMPLICIT')
						%% Line 81
						<'IMPLICIT',Rest1>
					%% Line 82
					<[{'AUTOMATIC',_X_L3}|[{'TAGS',_X_L4}|Rest1]]> when 'true' ->
					    do  %% Line 83
						call 'erlang':'put'
						    ('tagdefault', 'AUTOMATIC')
						%% Line 83
						<'AUTOMATIC',Rest1>
					%% Line 84
					<Rest1> when 'true' ->
					    do  %% Line 85
						call 'erlang':'put'
						    ('tagdefault', 'EXPLICIT')
						%% Line 85
						<'EXPLICIT',Rest1>
				      end
				  in  let <ExtensionDefault,Rest3> =
					  %% Line 88
					  case Rest2 of
					    %% Line 89
					    <[{'EXTENSIBILITY',_X_L5}|[{'IMPLIED',_X_L6}|Rest21]]> when 'true' ->
						do  %% Line 90
						    call 'erlang':'put'
							('extensiondefault', 'IMPLIED')
						    %% Line 90
						    <'IMPLIED',Rest21>
					    %% Line 91
					    <_cor37> when 'true' ->
						do  %% Line 92
						    call 'erlang':'put'
							('extensiondefault', 'undefined')
						    %% Line 92
						    <'undefined',Rest2>
					  end
				      in  %% Line 94
					  case Rest3 of
					    %% Line 95
					    <[{'::=',_X_L7}|[{'BEGIN',_X_L8}|Rest4]]> when 'true' ->
						%% Line 96
						case apply 'parse_Exports'/1
							 (Rest4) of
						  <{Exports,Rest5}> when 'true' ->
						      %% Line 97
						      case apply 'parse_Imports'/1
							       (Rest5) of
							<{{'imports',Imports},Rest6}> when 'true' ->
							    let <_cor20> =
								%% Line 98
								call 'erlang':'get'
								    ('asn1_module')
							    in  do  %% Line 98
								    call 'erlang':'put'
									({_cor20,'imports'}, Imports)
								    %% Line 99
								    {{'module',L1,%% Line 100
										  ModuleIdentifier,%% Line 101
												   [],%% Line 102
												      TagDefault,%% Line 104
														 Exports,%% Line 105
															 {'imports',Imports},%% Line 103
																	     ExtensionDefault,'undefined'},%% Line 105
																					   Rest6}
							( <_cor19> when 'true' ->
							      primop 'match_fail'
								  ({'badmatch',_cor19})
							  -| ['compiler_generated'] )
						      end
						  ( <_cor18> when 'true' ->
							primop 'match_fail'
							    ({'badmatch',_cor18})
						    -| ['compiler_generated'] )
						end
					    %% Line 106
					    <_cor38> when 'true' ->
						let <_cor24> =
						    call 'erlang':'hd'
							(Rest3)
						in  let <_cor25> =
							apply 'get_line'/1
							    (_cor24)
						    in  let <_cor23> =
							    call 'erlang':'get'
								('asn1_module')
							in  let <_cor21> =
								%% Line 107
								call 'erlang':'hd'
								    (Rest3)
							    in  let <_cor22> =
								    %% Line 107
								    apply 'get_token'/1
									(_cor21)
								in  call 'erlang':'throw'
									({'asn1_error',{_cor25,_cor23,%% Line 107
												      ['got'|[_cor22|['expected'|[[58|[58|[61|[32|[66|[69|[71|[73|[78]]]]]]]]]]]]]}})
					  end
			      %% Line 71
			      <_cor36> when 'true' ->
				  let <_cor7> =
				      %% Line 72
				      call 'erlang':'hd'
					  (Rest02)
				  in  let <_cor8> =
					  %% Line 72
					  apply 'get_line'/1
					      (_cor7)
				      in  let <_cor6> =
					      %% Line 72
					      call 'erlang':'get'
						  ('asn1_module')
					  in  let <_cor4> =
						  %% Line 73
						  call 'erlang':'hd'
						      (Rest02)
					      in  let <_cor5> =
						      %% Line 73
						      apply 'get_token'/1
							  (_cor4)
						  in  %% Line 72
						      call 'erlang':'throw'
							  ({'asn1_error',{_cor8,_cor6,%% Line 73
										      ['got'|[_cor5|%% Line 74
												    ['expected'|['DEFINITIONS']]]]}})
			    end
			( <_cor3> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor3})
			  -| ['compiler_generated'] )
		      end
	  %% Line 109
	  <Tokens> when 'true' ->
	      let <_cor30> =
		  %% Line 110
		  call 'erlang':'hd'
		      (Tokens)
	      in  let <_cor31> =
		      %% Line 110
		      apply 'get_line'/1
			  (_cor30)
		  in  let <_cor29> =
			  %% Line 110
			  call 'erlang':'get'
			      ('asn1_module')
		      in  let <_cor27> =
			      %% Line 111
			      call 'erlang':'hd'
				  (Tokens)
			  in  let <_cor28> =
				  %% Line 111
				  apply 'get_token'/1
				      (_cor27)
			      in  %% Line 110
				  call 'erlang':'throw'
				      ({'asn1_error',{_cor31,_cor29,%% Line 111
								    ['got'|[_cor28|['expected'|['typereference']]]]}})
	end
'parse_Exports'/1 =
    %% Line 113
    fun (_cor0) ->
	case _cor0 of
	  <[{'EXPORTS',_X_L1}|[{';',_X_L2}|Rest]]> when 'true' ->
	      %% Line 114
	      {{'exports',[]},Rest}
	  %% Line 115
	  <[{'EXPORTS',_X_L1}|Rest]> when 'true' ->
	      %% Line 116
	      case apply 'parse_SymbolList'/1
		       (Rest) of
		<{SymbolList,Rest2}> when 'true' ->
		    %% Line 117
		    case Rest2 of
		      %% Line 118
		      <[{';',_cor9}|Rest3]> when 'true' ->
			  %% Line 119
			  {{'exports',SymbolList},Rest3}
		      %% Line 120
		      <_cor10> when 'true' ->
			  let <_cor5> =
			      %% Line 121
			      call 'erlang':'hd'
				  (Rest2)
			  in  let <_cor6> =
				  %% Line 121
				  apply 'get_line'/1
				      (_cor5)
			      in  let <_cor4> =
				      %% Line 121
				      call 'erlang':'get'
					  ('asn1_module')
				  in  let <_cor2> =
					  %% Line 122
					  call 'erlang':'hd'
					      (Rest2)
				      in  let <_cor3> =
					      %% Line 122
					      apply 'get_token'/1
						  (_cor2)
					  in  %% Line 121
					      call 'erlang':'throw'
						  ({'asn1_error',{_cor6,_cor4,%% Line 122
									      ['got'|[_cor3|['expected'|[';']]]]}})
		    end
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 124
	  <Rest> when 'true' ->
	      %% Line 125
	      {{'exports','all'},Rest}
	end
'parse_SymbolList'/1 =
    %% Line 127
    fun (_cor0) ->
	%% Line 128
	apply 'parse_SymbolList'/2
	    (_cor0, [])
'parse_SymbolList'/2 =
    %% Line 130
    fun (_cor1,_cor0) ->
	%% Line 131
	case apply 'parse_Symbol'/1
		 (_cor1) of
	  <{Symbol,Rest}> when 'true' ->
	      %% Line 132
	      case Rest of
		%% Line 133
		<[{',',_X_L1}|Rest2]> when 'true' ->
		    %% Line 134
		    apply 'parse_SymbolList'/2
			(Rest2, [Symbol|_cor0])
		%% Line 135
		<Rest2> when 'true' ->
		    let <_cor3> =
			%% Line 136
			call 'lists':'reverse'
			    ([Symbol|_cor0])
		    in  %% Line 136
			{_cor3,Rest2}
	      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'parse_Symbol'/1 =
    %% Line 139
    fun (_cor0) ->
	%% Line 140
	apply 'parse_Reference'/1
	    (_cor0)
'parse_Reference'/1 =
    %% Line 142
    fun (_cor0) ->
	case _cor0 of
	  <[{'typereference',L1,TrefName}|[{'{',_X_L2}|[{'}',_X_L3}|Rest]]]> when 'true' ->
	      let <_cor1> =
		  %% Line 144
		  apply 'tref2Exttref'/2
		      (L1, TrefName)
	      in  %% Line 144
		  {_cor1,Rest}
	  %% Line 145
	  <[Tref1 = {'typereference',_cor13,_cor14}|[{'.',_cor15}|[Tref2 = {'typereference',_cor16,_cor17}|%% Line 146
													   [{'{',_X_L2}|[{'}',_X_L3}|Rest]]]]]> when 'true' ->
	      let <_cor3> =
		  %% Line 148
		  apply 'tref2Exttref'/1
		      (Tref1)
	      in  let <_cor2> =
		      %% Line 148
		      apply 'tref2Exttref'/1
			  (Tref2)
		  in  %% Line 148
		      {{_cor3,_cor2},Rest}
	  %% Line 149
	  <[Tref = {'typereference',_X_L1,_X_TrefName}|Rest]> when 'true' ->
	      let <_cor4> =
		  %% Line 150
		  apply 'tref2Exttref'/1
		      (Tref)
	      in  %% Line 150
		  {_cor4,Rest}
	  %% Line 151
	  <[Vref = {'identifier',_X_L1,_X_VName}|[{'{',_X_L2}|[{'}',_X_L3}|Rest]]]> when 'true' ->
	      let <_cor5> =
		  %% Line 152
		  apply 'identifier2Extvalueref'/1
		      (Vref)
	      in  %% Line 152
		  {_cor5,Rest}
	  %% Line 153
	  <[Vref = {'identifier',_X_L1,_X_VName}|Rest]> when 'true' ->
	      let <_cor6> =
		  %% Line 154
		  apply 'identifier2Extvalueref'/1
		      (Vref)
	      in  %% Line 154
		  {_cor6,Rest}
	  %% Line 155
	  <Tokens> when 'true' ->
	      let <_cor10> =
		  %% Line 156
		  call 'erlang':'hd'
		      (Tokens)
	      in  let <_cor11> =
		      %% Line 156
		      apply 'get_line'/1
			  (_cor10)
		  in  let <_cor9> =
			  %% Line 156
			  call 'erlang':'get'
			      ('asn1_module')
		      in  let <_cor7> =
			      %% Line 157
			      call 'erlang':'hd'
				  (Tokens)
			  in  let <_cor8> =
				  %% Line 157
				  apply 'get_token'/1
				      (_cor7)
			      in  %% Line 156
				  call 'erlang':'throw'
				      ({'asn1_error',{_cor11,_cor9,%% Line 157
								   ['got'|[_cor8|['expected'|[['typereference'|['identifier']]]]]]}})
	end
'parse_Imports'/1 =
    %% Line 160
    fun (_cor0) ->
	case _cor0 of
	  <[{'IMPORTS',_X_L1}|[{';',_X_L2}|Rest]]> when 'true' ->
	      %% Line 161
	      {{'imports',[]},Rest}
	  %% Line 162
	  <[{'IMPORTS',_X_L1}|Rest]> when 'true' ->
	      %% Line 163
	      case apply 'parse_SymbolsFromModuleList'/1
		       (Rest) of
		<{SymbolsFromModuleList,Rest2}> when 'true' ->
		    %% Line 164
		    case Rest2 of
		      %% Line 165
		      <[{';',_X_L2}|Rest3]> when 'true' ->
			  %% Line 166
			  {{'imports',SymbolsFromModuleList},Rest3}
		      %% Line 167
		      <Rest3> when 'true' ->
			  let <_cor5> =
			      %% Line 168
			      call 'erlang':'hd'
				  (Rest3)
			  in  let <_cor6> =
				  %% Line 168
				  apply 'get_line'/1
				      (_cor5)
			      in  let <_cor4> =
				      %% Line 168
				      call 'erlang':'get'
					  ('asn1_module')
				  in  let <_cor2> =
					  %% Line 169
					  call 'erlang':'hd'
					      (Rest3)
				      in  let <_cor3> =
					      %% Line 169
					      apply 'get_token'/1
						  (_cor2)
					  in  %% Line 168
					      call 'erlang':'throw'
						  ({'asn1_error',{_cor6,_cor4,%% Line 169
									      ['got'|[_cor3|['expected'|[';']]]]}})
		    end
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 171
	  <Tokens> when 'true' ->
	      %% Line 172
	      {{'imports',[]},Tokens}
	end
'parse_SymbolsFromModuleList'/1 =
    %% Line 174
    fun (_cor0) ->
	%% Line 175
	apply 'parse_SymbolsFromModuleList'/2
	    (_cor0, [])
'parse_SymbolsFromModuleList'/2 =
    %% Line 177
    fun (_cor1,_cor0) ->
	%% Line 178
	case apply 'parse_SymbolsFromModule'/1
		 (_cor1) of
	  <{SymbolsFromModule,Rest}> when 'true' ->
	      let <_cor3> =
		  catch
		      %% Line 179
		      apply 'parse_SymbolsFromModule'/1
			  (Rest)
	      in  %% Line 179
		  case _cor3 of
		    %% Line 180
		    <{Sl = {'SymbolsFromModule',_cor8,_cor9,_cor10},_X_Rest2}> when ( 'true'
										      -| ['compiler_generated'] ) ->
			%% Line 181
			apply 'parse_SymbolsFromModuleList'/2
			    (Rest, [SymbolsFromModule|_cor0])
		    %% Line 182
		    <_cor11> when 'true' ->
			let <_cor4> =
			    %% Line 183
			    call 'lists':'reverse'
				([SymbolsFromModule|_cor0])
			in  %% Line 183
			    {_cor4,Rest}
		  end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'parse_SymbolsFromModule'/1 =
    %% Line 186
    fun (_cor0) ->
	let <SetRefModuleName> =
	    %% Line 188
	    ( fun (_cor7) ->
		  %% Line 189
		  ( fun (_cor5) ->
			case _cor5 of
			  <X = {'Externaltypereference',_cor34,_cor35,_cor36}> when ( 'true'
										      -| ['compiler_generated'] ) ->
			      %% Line 190
			      call 'erlang':'setelement'
				  (3, X, _cor7)
			  %% Line 191
			  <X = {'Externalvaluereference',_cor41,_cor42,_cor43}> when ( 'true'
										       -| ['compiler_generated'] ) ->
			      %% Line 192
			      call 'erlang':'setelement'
				  (3, X, _cor7)
			  ( <_cor6> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_cor6})
				  -| [{'function_name',{'-parse_SymbolsFromModule/1-fun-0-',1}}] )
			    -| ['compiler_generated'] )
			end
		    -| [{'id',{0,0,'-parse_SymbolsFromModule/1-fun-0-'}}] )
	      -| [{'id',{0,0,'-parse_SymbolsFromModule/1-fun-1-'}}] )
	in  %% Line 195
	    case apply 'parse_SymbolList'/1
		     (_cor0) of
	      <{SymbolList,Rest}> when 'true' ->
		  %% Line 196
		  case Rest of
		    %% Line 197
		    <[{'FROM',_X_L1}|[Tref = {'typereference',_cor48,Name}|[Ref = {'identifier',_X_L2,_X_Id}|[C = {',',_cor49}|Rest2]]]]> when 'true' ->
			let <_cor11> =
			    %% Line 198
			    apply SetRefModuleName
				(Name)
			in  let <NewSymbolList> =
				%% Line 198
				call 'lists':'map'
				    (_cor11, SymbolList)
			    in  let <_cor13> =
				    %% Line 200
				    apply 'tref2Exttref'/1
					(Tref)
				in  %% Line 199
				    {{'SymbolsFromModule',NewSymbolList,_cor13,'undefined'},%% Line 200
											    [Ref|[C|Rest2]]}
		    %% Line 205
		    <[{'FROM',_X_L1}|[Tref = {'typereference',_cor50,Name}|[Ref = {'identifier',_X_L2,_X_Id}|[From = {'FROM',_cor51}|Rest2]]]]> when 'true' ->
			let <_cor14> =
			    %% Line 206
			    apply SetRefModuleName
				(Name)
			in  let <NewSymbolList> =
				%% Line 206
				call 'lists':'map'
				    (_cor14, SymbolList)
			    in  let <_cor16> =
				    %% Line 208
				    apply 'tref2Exttref'/1
					(Tref)
				in  %% Line 207
				    {{'SymbolsFromModule',NewSymbolList,_cor16,'undefined'},%% Line 208
											    [Ref|[From|Rest2]]}
		    %% Line 209
		    <[{'FROM',_X_L1}|[Tref = {'typereference',_cor52,Name}|[{'identifier',_X_L2,_X_Id}|Rest2]]]> when 'true' ->
			let <_cor17> =
			    %% Line 210
			    apply SetRefModuleName
				(Name)
			in  let <NewSymbolList> =
				%% Line 210
				call 'lists':'map'
				    (_cor17, SymbolList)
			    in  let <_cor19> =
				    %% Line 212
				    apply 'tref2Exttref'/1
					(Tref)
				in  %% Line 211
				    {{'SymbolsFromModule',NewSymbolList,_cor19,'undefined'},%% Line 212
											    Rest2}
		    %% Line 213
		    <[{'FROM',_X_L1}|[Tref = {'typereference',_cor53,Name}|[Brace = {'{',_cor54}|Rest2]]]> when 'true' ->
			%% Line 214
			case apply 'parse_ObjectIdentifierValue'/1
				 ([Brace|Rest2]) of
			  <{_X_ObjIdVal,Rest3}> when 'true' ->
			      let <_cor21> =
				  %% Line 215
				  apply SetRefModuleName
				      (Name)
			      in  let <NewSymbolList> =
				      %% Line 215
				      call 'lists':'map'
					  (_cor21, SymbolList)
				  in  let <_cor23> =
					  %% Line 217
					  apply 'tref2Exttref'/1
					      (Tref)
				      in  %% Line 216
					  {{'SymbolsFromModule',NewSymbolList,_cor23,'undefined'},%% Line 217
												  Rest3}
			  ( <_cor20> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor20})
			    -| ['compiler_generated'] )
			end
		    %% Line 218
		    <[{'FROM',_X_L1}|[Tref = {'typereference',_cor55,Name}|Rest2]]> when 'true' ->
			let <_cor24> =
			    %% Line 219
			    apply SetRefModuleName
				(Name)
			in  let <NewSymbolList> =
				%% Line 219
				call 'lists':'map'
				    (_cor24, SymbolList)
			    in  let <_cor26> =
				    %% Line 221
				    apply 'tref2Exttref'/1
					(Tref)
				in  %% Line 220
				    {{'SymbolsFromModule',NewSymbolList,_cor26,'undefined'},%% Line 221
											    Rest2}
		    %% Line 222
		    <_cor56> when 'true' ->
			let <_cor30> =
			    %% Line 223
			    call 'erlang':'hd'
				(Rest)
			in  let <_cor31> =
				%% Line 223
				apply 'get_line'/1
				    (_cor30)
			    in  let <_cor29> =
				    %% Line 223
				    call 'erlang':'get'
					('asn1_module')
				in  let <_cor27> =
					%% Line 224
					call 'erlang':'hd'
					    (Rest)
				    in  let <_cor28> =
					    %% Line 224
					    apply 'get_token'/1
						(_cor27)
					in  %% Line 223
					    call 'erlang':'throw'
						({'asn1_error',{_cor31,_cor29,%% Line 224
									      ['got'|[_cor28|['expected'|[['FROM typerefernece identifier ,'|['FROM typereference identifier'|['FROM typereference {'|['FROM typereference']]]]]]]]}})
		  end
	      ( <_cor10> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor10})
		-| ['compiler_generated'] )
	    end
'parse_ObjectIdentifierValue'/1 =
    %% Line 231
    fun (_cor0) ->
	case _cor0 of
	  <[{'{',_cor2}|Rest]> when 'true' ->
	      %% Line 232
	      apply 'parse_ObjectIdentifierValue'/2
		  (Rest, [])
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'parse_ObjectIdentifierValue',1}}] )
	    -| ['compiler_generated'] )
	end
'parse_ObjectIdentifierValue'/2 =
    %% Line 234
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{'number',_cor9,Num}|Rest],Acc> when 'true' ->
	      %% Line 235
	      apply 'parse_ObjectIdentifierValue'/2
		  (Rest, [Num|Acc])
	  %% Line 236
	  <[{'identifier',_cor10,Id}|[{'(',_cor11}|[{'number',_cor12,Num}|[{')',_cor13}|Rest]]]],Acc> when 'true' ->
	      %% Line 237
	      apply 'parse_ObjectIdentifierValue'/2
		  (Rest, [{'NamedNumber',Id,Num}|Acc])
	  %% Line 238
	  <[{'identifier',_cor14,Id}|[{'(',_cor15}|[{'identifier',_cor16,Id2}|[{')',_cor17}|Rest]]]],Acc> when 'true' ->
	      %% Line 239
	      apply 'parse_ObjectIdentifierValue'/2
		  (Rest, [{'NamedNumber',Id,Id2}|Acc])
	  %% Line 240
	  <[{'identifier',_cor18,Id}|[{'(',_cor19}|[{'typereference',_cor20,Tref}|[{'.',_cor21}|[{'identifier',_cor22,Id2}|[{')',_cor23}|Rest]]]]]],Acc> when 'true' ->
	      %% Line 241
	      apply 'parse_ObjectIdentifierValue'/2
		  (Rest, [{'NamedNumber',Id,{'ExternalValue',Tref,Id2}}|Acc])
	  %% Line 242
	  <[Id = {'identifier',_cor24,_cor25}|Rest],Acc> when 'true' ->
	      let <_cor2> =
		  %% Line 243
		  apply 'identifier2Extvalueref'/1
		      (Id)
	      in  %% Line 243
		  apply 'parse_ObjectIdentifierValue'/2
		      (Rest, [_cor2|Acc])
	  %% Line 244
	  <[{'}',_cor26}|Rest],Acc> when 'true' ->
	      let <_cor3> =
		  %% Line 245
		  call 'lists':'reverse'
		      (Acc)
	      in  %% Line 245
		  {_cor3,Rest}
	  %% Line 246
	  <[H|_X_T],_X_Acc> when 'true' ->
	      let <_cor6> =
		  %% Line 247
		  apply 'get_line'/1
		      (H)
	      in  let <_cor5> =
		      %% Line 247
		      call 'erlang':'get'
			  ('asn1_module')
		  in  let <_cor4> =
			  %% Line 248
			  apply 'get_token'/1
			      (H)
		      in  %% Line 247
			  call 'erlang':'throw'
			      ({'asn1_error',{_cor6,_cor5,%% Line 248
							  ['got'|[_cor4|['expected'|[['{ some of the following }'|['number'|['identifier ( number )'|['identifier ( identifier )'|['identifier ( typereference.identifier)'|['identifier']]]]]]]]]]}})
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'parse_ObjectIdentifierValue',2}}] )
	    -| ['compiler_generated'] )
	end
'parse_AssignmentList'/1 =
    %% Line 253
    fun (_cor0) ->
	case _cor0 of
	  <Tokens = [{'END',_cor2}|_X_Rest]> when 'true' ->
	      %% Line 254
	      {[],Tokens}
	  %% Line 255
	  <Tokens = [{'$end',_cor3}|_X_Rest]> when 'true' ->
	      %% Line 256
	      {[],Tokens}
	  %% Line 257
	  <Tokens> when 'true' ->
	      %% Line 258
	      apply 'parse_AssignmentList'/2
		  (Tokens, [])
	end
'parse_AssignmentList'/2 =
    %% Line 260
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Tokens = [{'END',_cor9}|_X_Rest],Acc> when 'true' ->
	      let <_cor2> =
		  %% Line 261
		  call 'lists':'reverse'
		      (Acc)
	      in  %% Line 261
		  {_cor2,Tokens}
	  %% Line 262
	  <Tokens = [{'$end',_cor10}|_X_Rest],Acc> when 'true' ->
	      let <_cor3> =
		  %% Line 263
		  call 'lists':'reverse'
		      (Acc)
	      in  %% Line 263
		  {_cor3,Tokens}
	  %% Line 264
	  <Tokens,Acc> when 'true' ->
	      let <_cor4> =
		  catch
		      %% Line 265
		      apply 'parse_Assignment'/1
			  (Tokens)
	      in  %% Line 265
		  case _cor4 of
		    %% Line 266
		    <{'EXIT',Reason}> when 'true' ->
			%% Line 267
			call 'erlang':'exit'
			    (Reason)
		    %% Line 268
		    <{'asn1_error',R}> when 'true' ->
			let <_cor5> =
			    %% Line 270
			    call 'erlang':'hd'
				(Tokens)
			in  %% Line 270
			    call 'erlang':'throw'
				({'error',{R,_cor5}})
		    %% Line 271
		    <{Assignment,Rest}> when 'true' ->
			%% Line 272
			apply 'parse_AssignmentList'/2
			    (Rest, [Assignment|Acc])
		    ( <_cor6> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor6})
		      -| ['compiler_generated'] )
		  end
	end
'parse_Assignment'/1 =
    %% Line 275
    fun (_cor0) ->
	let <Flist> =
	    %% Line 276
	    [( 'parse_TypeAssignment'/1
	       -| [{'id',{0,0,'-parse_Assignment/1-fun-0-'}}] )|%% Line 277
								[( 'parse_ValueAssignment'/1
								   -| [{'id',{0,0,'-parse_Assignment/1-fun-1-'}}] )|%% Line 278
														    [( 'parse_ObjectClassAssignment'/1
														       -| [{'id',{0,0,'-parse_Assignment/1-fun-2-'}}] )|%% Line 279
																					[( 'parse_ObjectAssignment'/1
																					   -| [{'id',{0,0,'-parse_Assignment/1-fun-3-'}}] )|%% Line 280
																											    [( 'parse_ObjectSetAssignment'/1
																											       -| [{'id',{0,0,'-parse_Assignment/1-fun-4-'}}] )|%% Line 281
																																		[( 'parse_ParameterizedAssignment'/1
																																		   -| [{'id',{0,0,'-parse_Assignment/1-fun-5-'}}] )|%% Line 282
																																								    [( 'parse_ValueSetTypeAssignment'/1
																																								       -| [{'id',{0,0,'-parse_Assignment/1-fun-6-'}}] )|[]]]]]]]]
	in  let <_cor2> =
		catch
		    %% Line 283
		    apply 'parse_or'/2
			(_cor0, Flist)
	    in  %% Line 283
		case _cor2 of
		  %% Line 284
		  <{'EXIT',Reason}> when 'true' ->
		      %% Line 285
		      call 'erlang':'exit'
			  (Reason)
		  %% Line 286
		  <AsnErr = {'asn1_error',_cor5}> when 'true' ->
		      %% Line 287
		      call 'erlang':'throw'
			  (AsnErr)
		  %% Line 288
		  <{'asn1_assignment_error',Reason}> when 'true' ->
		      %% Line 289
		      call 'erlang':'throw'
			  ({'asn1_error',Reason})
		  %% Line 290
		  <Result> when 'true' ->
		      %% Line 291
		      Result
		end
'parse_or'/2 =
    %% Line 295
    fun (_cor1,_cor0) ->
	%% Line 296
	apply 'parse_or'/3
	    (_cor1, _cor0, [])
'parse_or'/3 =
    %% Line 298
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <_X_Tokens,[],ErrList> when 'true' ->
	      %% Line 299
	      case ErrList of
		%% Line 300
		<[]> when 'true' ->
		    %% Line 301
		    call 'erlang':'throw'
			({'asn1_error',{'parse_or',ErrList}})
		%% Line 302
		<L>
		    when call 'erlang':'is_list'
			  (ErrList) ->
		    let <_cor3> =
			%% Line 306
			apply 'prioritize_error'/1
			    (ErrList)
		    in  %% Line 306
			call 'erlang':'throw'
			    (_cor3)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 308
	  <Tokens,[Fun|Frest],ErrList> when 'true' ->
	      let <_cor5> =
		  catch
		      %% Line 309
		      apply Fun
			  (Tokens)
	      in  %% Line 309
		  case _cor5 of
		    %% Line 310
		    <Exit = {'EXIT',_X_Reason}> when 'true' ->
			%% Line 311
			apply 'parse_or'/3
			    (Tokens, Frest, [Exit|ErrList])
		    %% Line 312
		    <AsnErr = {'asn1_error',_cor10}> when 'true' ->
			%% Line 313
			apply 'parse_or'/3
			    (Tokens, Frest, [AsnErr|ErrList])
		    %% Line 314
		    <AsnAssErr = {'asn1_assignment_error',_cor11}> when 'true' ->
			%% Line 315
			apply 'parse_or'/3
			    (Tokens, Frest, [AsnAssErr|ErrList])
		    %% Line 316
		    <Result = {_cor12,L}>
			when call 'erlang':'is_list'
			      (L) ->
			%% Line 317
			Result
		    %% Line 318
		    <Error> when 'true' ->
			%% Line 319
			apply 'parse_or'/3
			    (Tokens, Frest, [Error|ErrList])
		  end
	  ( <_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7})
		  -| [{'function_name',{'parse_or',3}}] )
	    -| ['compiler_generated'] )
	end
'parse_or_tag'/2 =
    %% Line 322
    fun (_cor1,_cor0) ->
	%% Line 323
	apply 'parse_or_tag'/3
	    (_cor1, _cor0, [])
'parse_or_tag'/3 =
    %% Line 325
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <_X_Tokens,[],ErrList> when 'true' ->
	      %% Line 326
	      case ErrList of
		%% Line 327
		<[]> when 'true' ->
		    %% Line 328
		    call 'erlang':'throw'
			({'asn1_error',{'parse_or_tag',ErrList}})
		%% Line 329
		<L>
		    when call 'erlang':'is_list'
			  (ErrList) ->
		    let <_cor3> =
			%% Line 333
			apply 'prioritize_error'/1
			    (ErrList)
		    in  %% Line 333
			call 'erlang':'throw'
			    (_cor3)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 335
	  <Tokens,[{Tag,Fun}|Frest],ErrList>
	      when call 'erlang':'is_function'
		    (Fun) ->
	      let <_cor5> =
		  catch
		      %% Line 336
		      apply Fun
			  (Tokens)
	      in  %% Line 336
		  case _cor5 of
		    %% Line 337
		    <Exit = {'EXIT',_X_Reason}> when 'true' ->
			%% Line 338
			apply 'parse_or_tag'/3
			    (Tokens, Frest, [Exit|ErrList])
		    %% Line 339
		    <AsnErr = {'asn1_error',_cor10}> when 'true' ->
			%% Line 340
			apply 'parse_or_tag'/3
			    (Tokens, Frest, [AsnErr|ErrList])
		    %% Line 341
		    <AsnAssErr = {'asn1_assignment_error',_cor11}> when 'true' ->
			%% Line 342
			apply 'parse_or_tag'/3
			    (Tokens, Frest, [AsnAssErr|ErrList])
		    %% Line 343
		    <{ParseRes,Rest}>
			when call 'erlang':'is_list'
			      (Rest) ->
			%% Line 344
			{{Tag,ParseRes},Rest}
		    %% Line 345
		    <Error> when 'true' ->
			%% Line 346
			apply 'parse_or_tag'/3
			    (Tokens, Frest, [Error|ErrList])
		  end
	  ( <_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7})
		  -| [{'function_name',{'parse_or_tag',3}}] )
	    -| ['compiler_generated'] )
	end
'parse_TypeAssignment'/1 =
    %% Line 349
    fun (_cor0) ->
	case _cor0 of
	  <[{'typereference',L1,Tref}|[{'::=',_cor10}|Rest]]> when 'true' ->
	      %% Line 350
	      case apply 'parse_Type'/1
		       (Rest) of
		<{Type,Rest2}> when 'true' ->
		    %% Line 351
		    {{'typedef','false',L1,Tref,Type},Rest2}
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 352
	  <[H1|[H2|_X_Rest]]> when 'true' ->
	      let <_cor5> =
		  %% Line 353
		  apply 'get_line'/1
		      (H1)
	      in  let <_cor4> =
		      %% Line 353
		      call 'erlang':'get'
			  ('asn1_module')
		  in  let <_cor2> =
			  %% Line 354
			  apply 'get_token'/1
			      (H1)
		      in  let <_cor3> =
			      %% Line 354
			      apply 'get_token'/1
				  (H2)
			  in  %% Line 353
			      call 'erlang':'throw'
				  ({'asn1_assignment_error',{_cor5,_cor4,%% Line 354
									 ['got'|[[_cor2|[_cor3|[]]]|['expected'|['typereference'|['::=']]]]]}})
	  %% Line 356
	  <[H|_X_T]> when 'true' ->
	      let <_cor8> =
		  %% Line 357
		  apply 'get_line'/1
		      (H)
	      in  let <_cor7> =
		      %% Line 357
		      call 'erlang':'get'
			  ('asn1_module')
		  in  let <_cor6> =
			  %% Line 358
			  apply 'get_token'/1
			      (H)
		      in  %% Line 357
			  call 'erlang':'throw'
			      ({'asn1_assignment_error',{_cor8,_cor7,%% Line 358
								     ['got'|[_cor6|['expected'|['typereference']]]]}})
	  ( <_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9})
		  -| [{'function_name',{'parse_TypeAssignment',1}}] )
	    -| ['compiler_generated'] )
	end
'parse_Type'/1 =
    %% Line 367
    fun (_cor0) ->
	let <_cor2> =
	    %% Line 368
	    case _cor0 of
	      %% Line 369
	      <[Lbr = {'[',_cor35}|Rest]> when 'true' ->
		  %% Line 370
		  apply 'parse_Tag'/1
		      ([Lbr|Rest])
	      %% Line 371
	      <Rest> when 'true' ->
		  {[],Rest}
	    end
	in  %% Line 368
	    case _cor2 of
	      <{Tag,Rest3}> when 'true' ->
		  let <Tag2,Rest4> =
		      %% Line 373
		      case Rest3 of
			%% Line 374
			<[{'IMPLICIT',_cor36}|Rest31]>
			    when ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'is_record'
								     -| ['compiler_generated'] )
				    (Tag,
				     'tag',
				     5)
				-| ['compiler_generated'] ) ->
			    %% Line 375
			    case Tag of
			      <{'tag',_cor37,_cor38,_cor39,_cor40}> when 'true' ->
				  let <_cor6> =
				      call 'erlang':'setelement'
					  (4, Tag, 'IMPLICIT')
				  in  <[_cor6|[]],Rest31>
			      ( <_cor41> when 'true' ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {'badrecord','tag'}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
			%% Line 376
			<[{'EXPLICIT',_cor42}|Rest31]>
			    when ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'is_record'
								     -| ['compiler_generated'] )
				    (Tag,
				     'tag',
				     5)
				-| ['compiler_generated'] ) ->
			    %% Line 377
			    case Tag of
			      <{'tag',_cor43,_cor44,_cor45,_cor46}> when 'true' ->
				  let <_cor9> =
				      call 'erlang':'setelement'
					  (4, Tag, 'EXPLICIT')
				  in  <[_cor9|[]],Rest31>
			      ( <_cor47> when 'true' ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {'badrecord','tag'}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
			%% Line 378
			<Rest31>
			    when ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'is_record'
								     -| ['compiler_generated'] )
				    (Tag,
				     'tag',
				     5)
				-| ['compiler_generated'] ) ->
			    let <_cor10> =
				%% Line 379
				call 'erlang':'get'
				    ('tagdefault')
			    in  let <_rec5> = {%% Line 379
				     'default',_cor10}
				in  %% Line 379
				    case Tag of
				      <{'tag',_cor48,_cor49,_cor50,_cor51}> when 'true' ->
					  let <_cor14> =
					      call 'erlang':'setelement'
						  (4, Tag, _rec5)
					  in  <[_cor14|[]],Rest31>
				      ( <_cor52> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','tag'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
			%% Line 380
			<Rest31> when 'true' ->
			    %% Line 381
			    <Tag,Rest31>
		      end
		  in  let <Flist> =
			  %% Line 383
			  [( 'parse_BuiltinType'/1
			     -| [{'id',{0,0,'-parse_Type/1-fun-0-'}}] )|[( 'parse_ReferencedType'/1
									   -| [{'id',{0,0,'-parse_Type/1-fun-1-'}}] )|[( 'parse_TypeWithConstraint'/1
															 -| [{'id',{0,0,'-parse_Type/1-fun-2-'}}] )|[]]]]
		      in  let <_cor19> =
			      catch
				  %% Line 384
				  apply 'parse_or'/2
				      (Rest4, Flist)
			  in  let <_cor21> =
				  %% Line 384
				  case _cor19 of
				    %% Line 385
				    <{'EXIT',Reason}> when 'true' ->
					%% Line 386
					call 'erlang':'exit'
					    (Reason)
				    %% Line 387
				    <AsnErr = {'asn1_error',_X_Reason}> when 'true' ->
					%% Line 388
					call 'erlang':'throw'
					    (AsnErr)
				    %% Line 389
				    <Result> when 'true' ->
					%% Line 390
					Result
				  end
			      in  %% Line 384
				  case _cor21 of
				    <{Type,Rest5}> when 'true' ->
					%% Line 392
					case call 'erlang':'hd'
						 (Rest5) of
					  %% Line 393
					  <{'(',_cor53}> when 'true' ->
					      %% Line 394
					      case apply 'parse_Constraints'/1
						       (Rest5) of
						<{Constraints,Rest6}> when 'true' ->
						    %% Line 395
						    case <> of
						      <>
							  when ( call ( 'erlang'
								     -| ['compiler_generated'] ):( 'is_record'
												   -| ['compiler_generated'] )
								  (Type,
								   'type',
								   6)
							      -| ['compiler_generated'] ) ->
							  let <_rec7> =
							      %% Line 396
							      apply 'merge_constraints'/1
								  (Constraints)
							  in  %% Line 397
							      case Type of
								<{'type',_cor54,_cor55,_cor56,_cor57,_cor58}> when 'true' ->
								    let <_cor26> =
									call 'erlang':'setelement'
									    (4, Type, _rec7)
								    in  let <_cor28> =
									    call 'erlang':'setelement'
										(2, _cor26, Tag2)
									in  {_cor28,Rest6}
								( <_cor59> when 'true' ->
								      ( call ( 'erlang'
									       -| ['compiler_generated'] ):( 'error'
													     -| ['compiler_generated'] )
									    (( {'badrecord','type'}
									       -| ['compiler_generated'] ))
									-| ['compiler_generated'] )
								  -| ['compiler_generated'] )
							      end
						      %% Line 398
						      <> when 'true' ->
							  let <_cor29> =
							      %% Line 399
							      apply 'merge_constraints'/1
								  (Constraints)
							  in  %% Line 399
							      {{'type',%% Line 400
								       Tag2,Type,_cor29,[],'no'},%% Line 400
												 Rest6}
						    end
						( <_cor23> when 'true' ->
						      primop 'match_fail'
							  ({'badmatch',_cor23})
						  -| ['compiler_generated'] )
					      end
					  %% Line 402
					  <_cor60> when 'true' ->
					      %% Line 403
					      case <> of
						<>
						    when ( call ( 'erlang'
							       -| ['compiler_generated'] ):( 'is_record'
											     -| ['compiler_generated'] )
							    (Type,
							     'type',
							     6)
							-| ['compiler_generated'] ) ->
						    %% Line 404
						    case Type of
						      <{'type',_cor61,_cor62,_cor63,_cor64,_cor65}> when 'true' ->
							  let <_cor32> =
							      call 'erlang':'setelement'
								  (2, Type, Tag2)
							  in  {_cor32,Rest5}
						      ( <_cor66> when 'true' ->
							    ( call ( 'erlang'
								     -| ['compiler_generated'] ):( 'error'
												   -| ['compiler_generated'] )
								  (( {'badrecord','type'}
								     -| ['compiler_generated'] ))
							      -| ['compiler_generated'] )
							-| ['compiler_generated'] )
						    end
						%% Line 405
						<> when 'true' ->
						    %% Line 406
						    {{'type',Tag2,Type,[],[],'no'},Rest5}
					      end
					end
				    ( <_cor22> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor22})
				      -| ['compiler_generated'] )
				  end
	      ( <_cor3> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor3})
		-| ['compiler_generated'] )
	    end
'parse_BuiltinType'/1 =
    %% Line 410
    fun (_cor0) ->
	case _cor0 of
	  <[{'BIT',_cor104}|[{'STRING',_cor105}|Rest]]> when 'true' ->
	      %% Line 411
	      case Rest of
		%% Line 412
		<[{'{',_cor106}|Rest2]> when 'true' ->
		    %% Line 413
		    case apply 'parse_NamedNumberList'/1
			     (Rest2) of
		      <{NamedNumberList,Rest3}> when 'true' ->
			  %% Line 414
			  case Rest3 of
			    %% Line 415
			    <[{'}',_cor107}|Rest4]> when 'true' ->
				%% Line 416
				{{'type',[],{'BIT STRING',NamedNumberList},[],[],'no'},Rest4}
			    %% Line 417
			    <_cor108> when 'true' ->
				let <_cor5> =
				    %% Line 418
				    call 'erlang':'hd'
					(Rest3)
				in  let <_cor6> =
					%% Line 418
					apply 'get_line'/1
					    (_cor5)
				    in  let <_cor4> =
					    %% Line 418
					    call 'erlang':'get'
						('asn1_module')
					in  let <_cor2> =
						%% Line 419
						call 'erlang':'hd'
						    (Rest3)
					    in  let <_cor3> =
						    %% Line 419
						    apply 'get_token'/1
							(_cor2)
						in  %% Line 418
						    call 'erlang':'throw'
							({'asn1_error',{_cor6,_cor4,%% Line 419
										    ['got'|[_cor3|['expected'|['}']]]]}})
			  end
		      ( <_cor1> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor1})
			-| ['compiler_generated'] )
		    end
		%% Line 421
		<_cor109> when 'true' ->
		    %% Line 422
		    {{'BIT STRING',[]},Rest}
	      end
	  %% Line 424
	  <[{'BOOLEAN',_cor110}|Rest]> when 'true' ->
	      %% Line 425
	      {{'type',[],'BOOLEAN',[],[],'no'},Rest}
	  %% Line 428
	  <[{'restrictedcharacterstringtype',_cor111,StringName}|Rest]> when 'true' ->
	      %% Line 429
	      {{'type',[],StringName,[],[],'no'},Rest}
	  %% Line 430
	  <[{'CHARACTER',_cor112}|[{'STRING',_cor113}|Rest]]> when 'true' ->
	      %% Line 431
	      {{'type',[],'CHARACTER STRING',[],[],'no'},Rest}
	  %% Line 433
	  <[{'CHOICE',_cor114}|[{'{',_cor115}|Rest]]> when 'true' ->
	      %% Line 434
	      case apply 'parse_AlternativeTypeLists'/1
		       (Rest) of
		<{AlternativeTypeLists,Rest2}> when 'true' ->
		    let <_cor12> =
			%% Line 436
			( fun (_cor10) ->
			      case _cor10 of
				<{'ExtensionAdditionGroup',_cor116}> when 'true' ->
				    'false'
				%% Line 437
				<'ExtensionAdditionGroupEnd'> when 'true' ->
				    'false'
				%% Line 438
				<_cor117> when 'true' ->
				    'true'
			      end
			  -| [{'id',{0,0,'-parse_BuiltinType/1-fun-0-'}}] )
		    in  let <AlternativeTypeLists1> =
			    %% Line 436
			    call 'lists':'filter'
				(_cor12, %% Line 439
					 AlternativeTypeLists)
			in  %% Line 440
			    case Rest2 of
			      %% Line 441
			      <[{'}',_cor118}|Rest3]> when 'true' ->
				  let <_cor19> =
				      %% Line 443
				      ( letrec
					    'lc$^0'/1 =
						fun (_cor17) ->
						    case _cor17 of
						      <[Ext = {'EXTENSIONMARK',_cor119,_cor120}|_cor16]> when 'true' ->
							  let <_cor18> =
							      apply 'lc$^0'/1
								  (_cor16)
							  in  ( [Ext|_cor18]
								-| ['compiler_generated'] )
						      ( <[_cor15|_cor16]> when 'true' ->
							    apply 'lc$^0'/1
								(_cor16)
							-| ['compiler_generated'] )
						      <[]> when 'true' ->
							  []
						      ( <_cor17> when 'true' ->
							    ( primop 'match_fail'
								  ({'function_clause',_cor17})
							      -| [{'function_name',{'lc$^0',1}}] )
							-| ['compiler_generated'] )
						    end
					in  apply 'lc$^0'/1
						(AlternativeTypeLists1)
					-| ['list_comprehension'] )
				  in  let <_cor14> =
					  %% Line 444
					  call 'erlang':'get'
					      ('extensiondefault')
				      in  let <_cor21> =
					      %% Line 443
					      case <_cor19,_cor14> of
						%% Line 445
						<[],'IMPLIED'> when 'true' ->
						    call 'erlang':'++'
							(AlternativeTypeLists1, [{'EXTENSIONMARK','undefined','undefined'}])
						%% Line 446
						<_fol38,_fol39> when 'true' ->
						    AlternativeTypeLists1
					      end
					  in  %% Line 449
					      {{'type',[],{'CHOICE',_cor21},[],[],'no'},Rest3}
			      %% Line 450
			      <_cor122> when 'true' ->
				  let <_cor26> =
				      %% Line 451
				      call 'erlang':'hd'
					  (Rest2)
				  in  let <_cor27> =
					  %% Line 451
					  apply 'get_line'/1
					      (_cor26)
				      in  let <_cor25> =
					      %% Line 451
					      call 'erlang':'get'
						  ('asn1_module')
					  in  let <_cor23> =
						  %% Line 452
						  call 'erlang':'hd'
						      (Rest2)
					      in  let <_cor24> =
						      %% Line 452
						      apply 'get_token'/1
							  (_cor23)
						  in  %% Line 451
						      call 'erlang':'throw'
							  ({'asn1_error',{_cor27,_cor25,%% Line 452
											['got'|[_cor24|['expected'|['}']]]]}})
			    end
		( <_cor9> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor9})
		  -| ['compiler_generated'] )
	      end
	  %% Line 454
	  <[{'EMBEDDED',_cor123}|[{'PDV',_cor124}|Rest]]> when 'true' ->
	      %% Line 455
	      {{'type',[],'EMBEDDED PDV',[],[],'no'},Rest}
	  %% Line 456
	  <[{'ENUMERATED',_cor125}|[{'{',_cor126}|Rest]]> when 'true' ->
	      let <_cor29> =
		  %% Line 457
		  call 'erlang':'get'
		      ('extensiondefault')
	      in  %% Line 457
		  case apply 'parse_Enumerations'/2
			   (Rest, _cor29) of
		    <{Enumerations,Rest2}> when 'true' ->
			%% Line 458
			case Rest2 of
			  %% Line 459
			  <[{'}',_cor127}|Rest3]> when 'true' ->
			      %% Line 460
			      {{'type',[],{'ENUMERATED',Enumerations},[],[],'no'},Rest3}
			  %% Line 461
			  <_cor128> when 'true' ->
			      let <_cor34> =
				  %% Line 462
				  call 'erlang':'hd'
				      (Rest2)
			      in  let <_cor35> =
				      %% Line 462
				      apply 'get_line'/1
					  (_cor34)
				  in  let <_cor33> =
					  %% Line 462
					  call 'erlang':'get'
					      ('asn1_module')
				      in  let <_cor31> =
					      %% Line 463
					      call 'erlang':'hd'
						  (Rest2)
					  in  let <_cor32> =
						  %% Line 463
						  apply 'get_token'/1
						      (_cor31)
					      in  %% Line 462
						  call 'erlang':'throw'
						      ({'asn1_error',{_cor35,_cor33,%% Line 463
										    ['got'|[_cor32|['expected'|['}']]]]}})
			end
		    ( <_cor30> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor30})
		      -| ['compiler_generated'] )
		  end
	  %% Line 465
	  <[{'EXTERNAL',_cor129}|Rest]> when 'true' ->
	      %% Line 466
	      {{'type',[],'EXTERNAL',[],[],'no'},Rest}
	  %% Line 469
	  <[{'INSTANCE',_cor130}|[{'OF',_cor131}|Rest]]> when 'true' ->
	      %% Line 470
	      case apply 'parse_DefinedObjectClass'/1
		       (Rest) of
		<{DefinedObjectClass,Rest2}> when 'true' ->
		    %% Line 471
		    case Rest2 of
		      %% Line 472
		      <[{'(',_cor132}|_cor133]> when 'true' ->
			  %% Line 473
			  case apply 'parse_Constraint'/1
				   (Rest2) of
			    <{Constraint0,Rest3}> when 'true' ->
				let <Constraint> =
				    %% Line 474
				    apply 'merge_constraints'/1
					([Constraint0|[]])
				in  %% Line 475
				    {{'type',[],{'INSTANCE OF',DefinedObjectClass,Constraint},[],[],'no'},Rest3}
			    ( <_cor38> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor38})
			      -| ['compiler_generated'] )
			  end
		      %% Line 476
		      <_cor134> when 'true' ->
			  %% Line 477
			  {{'type',[],{'INSTANCE OF',DefinedObjectClass,[]},[],[],'no'},Rest2}
		    end
		( <_cor37> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor37})
		  -| ['compiler_generated'] )
	      end
	  %% Line 482
	  <[{'INTEGER',_cor135}|Rest]> when 'true' ->
	      %% Line 483
	      case Rest of
		%% Line 484
		<[{'{',_cor136}|Rest2]> when 'true' ->
		    %% Line 485
		    case apply 'parse_NamedNumberList'/1
			     (Rest2) of
		      <{NamedNumberList,Rest3}> when 'true' ->
			  %% Line 486
			  case Rest3 of
			    %% Line 487
			    <[{'}',_cor137}|Rest4]> when 'true' ->
				%% Line 488
				{{'type',[],{'INTEGER',NamedNumberList},[],[],'no'},Rest4}
			    %% Line 489
			    <_cor138> when 'true' ->
				let <_cor45> =
				    %% Line 490
				    call 'erlang':'hd'
					(Rest3)
				in  let <_cor46> =
					%% Line 490
					apply 'get_line'/1
					    (_cor45)
				    in  let <_cor44> =
					    %% Line 490
					    call 'erlang':'get'
						('asn1_module')
					in  let <_cor42> =
						%% Line 491
						call 'erlang':'hd'
						    (Rest3)
					    in  let <_cor43> =
						    %% Line 491
						    apply 'get_token'/1
							(_cor42)
						in  %% Line 490
						    call 'erlang':'throw'
							({'asn1_error',{_cor46,_cor44,%% Line 491
										      ['got'|[_cor43|['expected'|['}']]]]}})
			  end
		      ( <_cor41> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor41})
			-| ['compiler_generated'] )
		    end
		%% Line 493
		<_cor139> when 'true' ->
		    %% Line 494
		    {{'type',[],'INTEGER',[],[],'no'},Rest}
	      end
	  %% Line 496
	  <[{'NULL',_cor140}|Rest]> when 'true' ->
	      %% Line 497
	      {{'type',[],'NULL',[],[],'no'},Rest}
	  %% Line 501
	  <[{'OBJECT',_cor141}|[{'IDENTIFIER',_cor142}|Rest]]> when 'true' ->
	      %% Line 502
	      {{'type',[],'OBJECT IDENTIFIER',[],[],'no'},Rest}
	  %% Line 503
	  <[{'OCTET',_cor143}|[{'STRING',_cor144}|Rest]]> when 'true' ->
	      %% Line 504
	      {{'type',[],'OCTET STRING',[],[],'no'},Rest}
	  %% Line 505
	  <[{'REAL',_cor145}|Rest]> when 'true' ->
	      %% Line 506
	      {{'type',[],'REAL',[],[],'no'},Rest}
	  %% Line 507
	  <[{'RELATIVE-OID',_cor146}|Rest]> when 'true' ->
	      %% Line 508
	      {{'type',[],'RELATIVE-OID',[],[],'no'},Rest}
	  %% Line 509
	  <[{'SEQUENCE',_cor147}|[{'{',_cor148}|[{'}',_cor149}|Rest]]]> when 'true' ->
	      %% Line 510
	      {{'type',[],{'SEQUENCE','false','false','undefined',[]},[],[],'no'},%% Line 511
										  Rest}
	  %% Line 512
	  <[{'SEQUENCE',_cor150}|[{'{',_cor151}|[{'...',Line}|[{'}',_cor152}|Rest]]]]> when 'true' ->
	      %% Line 513
	      {{'type',[],{'SEQUENCE','false','false','undefined',[{'EXTENSIONMARK',Line,'undefined'}|[]]},[],[],'no'},Rest}
	  %% Line 514
	  <[{'SEQUENCE',_cor153}|[{'{',_cor154}|[{'...',Line}|[{'!',_cor155}|Rest]]]]> when 'true' ->
	      %% Line 515
	      case apply 'parse_ExceptionIdentification'/1
		       (Rest) of
		<{ExceptionIdentification,Rest2}> when 'true' ->
		    %% Line 516
		    case Rest2 of
		      %% Line 517
		      <[{'}',_cor156}|Rest3]> when 'true' ->
			  %% Line 518
			  {{'type',[],{'SEQUENCE','false','false','undefined',%% Line 519
									      [{'EXTENSIONMARK',%% Line 520
												Line,%% Line 521
												     ExceptionIdentification}|%% Line 521
															      []]},[],[],'no'},%% Line 522
																	       Rest3}
		      %% Line 523
		      <_cor157> when 'true' ->
			  %% Line 524
			  case %% Line 525
			       apply 'parse_ComponentTypeLists2'/2
				   (Rest2, [{'EXTENSIONMARK',Line,'undefined'}|[]]) of
			    <{ComponentTypeLists,Rest3}> when 'true' ->
				%% Line 526
				case Rest3 of
				  %% Line 527
				  <[{'}',_cor158}|Rest4]> when 'true' ->
				      %% Line 528
				      {{'type',[],{'SEQUENCE','false','false','undefined',ComponentTypeLists},[],[],'no'},Rest4}
				  %% Line 529
				  <_cor159> when 'true' ->
				      let <_cor54> =
					  %% Line 530
					  call 'erlang':'hd'
					      (Rest3)
				      in  let <_cor55> =
					      %% Line 530
					      apply 'get_line'/1
						  (_cor54)
					  in  let <_cor53> =
						  %% Line 530
						  call 'erlang':'get'
						      ('asn1_module')
					      in  let <_cor51> =
						      %% Line 531
						      call 'erlang':'hd'
							  (Rest3)
						  in  let <_cor52> =
							  %% Line 531
							  apply 'get_token'/1
							      (_cor51)
						      in  %% Line 530
							  call 'erlang':'throw'
							      ({'asn1_error',{_cor55,_cor53,%% Line 531
											    ['got'|[_cor52|['expected'|['}']]]]}})
				end
			    ( <_cor50> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor50})
			      -| ['compiler_generated'] )
			  end
		    end
		( <_cor49> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor49})
		  -| ['compiler_generated'] )
	      end
	  %% Line 537
	  <[{'SEQUENCE',_cor160}|[{'{',_cor161}|Rest]]> when 'true' ->
	      %% Line 538
	      case apply 'parse_ComponentTypeLists'/1
		       (Rest) of
		<{ComponentTypeLists,Rest2}> when 'true' ->
		    %% Line 539
		    case Rest2 of
		      %% Line 540
		      <[{'}',_cor162}|Rest3]> when 'true' ->
			  let <_cor64> =
			      %% Line 542
			      ( letrec
				    'lc$^1'/1 =
					fun (_cor62) ->
					    case _cor62 of
					      <[Ext = {'EXTENSIONMARK',_cor163,_cor164}|_cor61]> when 'true' ->
						  let <_cor63> =
						      apply 'lc$^1'/1
							  (_cor61)
						  in  ( [Ext|_cor63]
							-| ['compiler_generated'] )
					      ( <[_cor60|_cor61]> when 'true' ->
						    apply 'lc$^1'/1
							(_cor61)
						-| ['compiler_generated'] )
					      <[]> when 'true' ->
						  []
					      ( <_cor62> when 'true' ->
						    ( primop 'match_fail'
							  ({'function_clause',_cor62})
						      -| [{'function_name',{'lc$^1',1}}] )
						-| ['compiler_generated'] )
					    end
				in  apply 'lc$^1'/1
					(ComponentTypeLists)
				-| ['list_comprehension'] )
			  in  let <_cor59> =
				  %% Line 543
				  call 'erlang':'get'
				      ('extensiondefault')
			      in  let <_cor66> =
				      %% Line 542
				      case <_cor64,_cor59> of
					%% Line 544
					<[],'IMPLIED'> when 'true' ->
					    call 'erlang':'++'
						(ComponentTypeLists, [{'EXTENSIONMARK','undefined','undefined'}])
					%% Line 545
					<_fol42,_fol43> when 'true' ->
					    ComponentTypeLists
				      end
				  in  %% Line 547
				      {{'type',[],{'SEQUENCE','false','false','undefined',_cor66},[],[],'no'},%% Line 548
													      Rest3}
		      %% Line 549
		      <_cor166> when 'true' ->
			  let <_cor71> =
			      %% Line 550
			      call 'erlang':'hd'
				  (Rest2)
			  in  let <_cor72> =
				  %% Line 550
				  apply 'get_line'/1
				      (_cor71)
			      in  let <_cor70> =
				      %% Line 550
				      call 'erlang':'get'
					  ('asn1_module')
				  in  let <_cor68> =
					  %% Line 551
					  call 'erlang':'hd'
					      (Rest2)
				      in  let <_cor69> =
					      %% Line 551
					      apply 'get_token'/1
						  (_cor68)
					  in  %% Line 550
					      call 'erlang':'throw'
						  ({'asn1_error',{_cor72,_cor70,%% Line 551
										['got'|[_cor69|['expected'|['}']]]]}})
		    end
		( <_cor58> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor58})
		  -| ['compiler_generated'] )
	      end
	  %% Line 554
	  <[{'SEQUENCE',_cor167}|[{'OF',_cor168}|[Id = {'identifier',_cor169,_cor170}|[Lt = {'<',_cor171}|Rest]]]]> when 'true' ->
	      %% Line 556
	      case apply 'parse_SelectionType'/1
		       ([Id|[Lt|Rest]]) of
		<{Type,Rest2}> when 'true' ->
		    %% Line 557
		    {{'type',[],{'SEQUENCE OF',{'type',[],Type,[],[],'no'}},[],[],'no'},Rest2}
		( <_cor74> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor74})
		  -| ['compiler_generated'] )
	      end
	  %% Line 559
	  <[{'SEQUENCE',_cor172}|[{'OF',_cor173}|[{'identifier',_cor174,_cor175}|Rest]]]> when 'true' ->
	      %% Line 561
	      case apply 'parse_Type'/1
		       (Rest) of
		<{Type,Rest2}> when 'true' ->
		    %% Line 562
		    {{'type',[],{'SEQUENCE OF',Type},[],[],'no'},Rest2}
		( <_cor75> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor75})
		  -| ['compiler_generated'] )
	      end
	  %% Line 564
	  <[{'SEQUENCE',_cor176}|[{'OF',_cor177}|Rest]]> when 'true' ->
	      %% Line 565
	      case apply 'parse_Type'/1
		       (Rest) of
		<{Type,Rest2}> when 'true' ->
		    %% Line 566
		    {{'type',[],{'SEQUENCE OF',Type},[],[],'no'},Rest2}
		( <_cor76> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor76})
		  -| ['compiler_generated'] )
	      end
	  %% Line 569
	  <[{'SET',_cor178}|[{'{',_cor179}|[{'...',Line}|[{'}',_cor180}|Rest]]]]> when 'true' ->
	      %% Line 570
	      {{'type',[],{'SET','false','false','false',[{'EXTENSIONMARK',Line,'undefined'}|[]]},[],[],'no'},Rest}
	  %% Line 571
	  <[{'SET',_cor181}|[{'{',_cor182}|[{'...',Line}|[{'!',_cor183}|Rest]]]]> when 'true' ->
	      %% Line 572
	      case apply 'parse_ExceptionIdentification'/1
		       (Rest) of
		<{ExceptionIdentification,Rest2}> when 'true' ->
		    %% Line 573
		    case Rest2 of
		      %% Line 574
		      <[{'}',_cor184}|Rest3]> when 'true' ->
			  %% Line 575
			  {{'type',[],{'SET','false','false','false',%% Line 576
								     [{'EXTENSIONMARK',Line,%% Line 577
											    ExceptionIdentification}|%% Line 577
														     []]},[],[],'no'},%% Line 578
																      Rest3}
		      %% Line 579
		      <_cor185> when 'true' ->
			  let <_cor81> =
			      %% Line 580
			      call 'erlang':'hd'
				  (Rest2)
			  in  let <_cor82> =
				  %% Line 580
				  apply 'get_line'/1
				      (_cor81)
			      in  let <_cor80> =
				      %% Line 580
				      call 'erlang':'get'
					  ('asn1_module')
				  in  let <_cor78> =
					  %% Line 581
					  call 'erlang':'hd'
					      (Rest2)
				      in  let <_cor79> =
					      %% Line 581
					      apply 'get_token'/1
						  (_cor78)
					  in  %% Line 580
					      call 'erlang':'throw'
						  ({'asn1_error',{_cor82,_cor80,%% Line 581
										['got'|[_cor79|['expected'|['}']]]]}})
		    end
		( <_cor77> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor77})
		  -| ['compiler_generated'] )
	      end
	  %% Line 583
	  <[{'SET',_cor186}|[{'{',_cor187}|Rest]]> when 'true' ->
	      %% Line 584
	      case apply 'parse_ComponentTypeLists'/1
		       (Rest) of
		<{ComponentTypeLists,Rest2}> when 'true' ->
		    %% Line 585
		    case Rest2 of
		      %% Line 586
		      <[{'}',_cor188}|Rest3]> when 'true' ->
			  let <_cor90> =
			      %% Line 588
			      ( letrec
				    'lc$^2'/1 =
					fun (_cor88) ->
					    case _cor88 of
					      <[Ext = {'EXTENSIONMARK',_cor189,_cor190}|_cor87]> when 'true' ->
						  let <_cor89> =
						      apply 'lc$^2'/1
							  (_cor87)
						  in  ( [Ext|_cor89]
							-| ['compiler_generated'] )
					      ( <[_cor86|_cor87]> when 'true' ->
						    apply 'lc$^2'/1
							(_cor87)
						-| ['compiler_generated'] )
					      <[]> when 'true' ->
						  []
					      ( <_cor88> when 'true' ->
						    ( primop 'match_fail'
							  ({'function_clause',_cor88})
						      -| [{'function_name',{'lc$^2',1}}] )
						-| ['compiler_generated'] )
					    end
				in  apply 'lc$^2'/1
					(ComponentTypeLists)
				-| ['list_comprehension'] )
			  in  let <_cor85> =
				  %% Line 589
				  call 'erlang':'get'
				      ('extensiondefault')
			      in  let <_cor92> =
				      %% Line 588
				      case <_cor90,_cor85> of
					%% Line 590
					<[],'IMPLIED'> when 'true' ->
					    call 'erlang':'++'
						(ComponentTypeLists, [{'EXTENSIONMARK','undefined','undefined'}])
					%% Line 591
					<_fol46,_fol47> when 'true' ->
					    ComponentTypeLists
				      end
				  in  %% Line 593
				      {{'type',[],{'SET','false','false','false',_cor92},[],[],'no'},%% Line 594
												     Rest3}
		      %% Line 595
		      <_cor192> when 'true' ->
			  let <_cor97> =
			      %% Line 596
			      call 'erlang':'hd'
				  (Rest2)
			  in  let <_cor98> =
				  %% Line 596
				  apply 'get_line'/1
				      (_cor97)
			      in  let <_cor96> =
				      %% Line 596
				      call 'erlang':'get'
					  ('asn1_module')
				  in  let <_cor94> =
					  %% Line 597
					  call 'erlang':'hd'
					      (Rest2)
				      in  let <_cor95> =
					      %% Line 597
					      apply 'get_token'/1
						  (_cor94)
					  in  %% Line 596
					      call 'erlang':'throw'
						  ({'asn1_error',{_cor98,_cor96,%% Line 597
										['got'|[_cor95|['expected'|['}']]]]}})
		    end
		( <_cor84> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor84})
		  -| ['compiler_generated'] )
	      end
	  %% Line 600
	  <[{'SET',_cor193}|[{'OF',_cor194}|[Id = {'identifier',_cor195,_cor196}|[Lt = {'<',_cor197}|Rest]]]]> when 'true' ->
	      %% Line 602
	      case apply 'parse_SelectionType'/1
		       ([Id|[Lt|Rest]]) of
		<{Type,Rest2}> when 'true' ->
		    %% Line 603
		    {{'type',[],{'SET OF',{'type',[],Type,[],[],'no'}},[],[],'no'},Rest2}
		( <_cor100> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor100})
		  -| ['compiler_generated'] )
	      end
	  %% Line 606
	  <[{'SET',_cor198}|[{'OF',_cor199}|[{'identifier',_cor200,_cor201}|Rest]]]> when 'true' ->
	      %% Line 608
	      case apply 'parse_Type'/1
		       (Rest) of
		<{Type,Rest2}> when 'true' ->
		    %% Line 609
		    {{'type',[],{'SET OF',Type},[],[],'no'},Rest2}
		( <_cor101> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor101})
		  -| ['compiler_generated'] )
	      end
	  %% Line 611
	  <[{'SET',_cor202}|[{'OF',_cor203}|Rest]]> when 'true' ->
	      %% Line 612
	      case apply 'parse_Type'/1
		       (Rest) of
		<{Type,Rest2}> when 'true' ->
		    %% Line 613
		    {{'type',[],{'SET OF',Type},[],[],'no'},Rest2}
		( <_cor102> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor102})
		  -| ['compiler_generated'] )
	      end
	  %% Line 616
	  <[{'GeneralizedTime',_cor204}|Rest]> when 'true' ->
	      %% Line 617
	      {{'type',[],'GeneralizedTime',[],[],'no'},Rest}
	  %% Line 618
	  <[{'UTCTime',_cor205}|Rest]> when 'true' ->
	      %% Line 619
	      {{'type',[],'UTCTime',[],[],'no'},Rest}
	  %% Line 620
	  <[{'ObjectDescriptor',_cor206}|Rest]> when 'true' ->
	      %% Line 621
	      {{'type',[],'ObjectDescriptor',[],[],'no'},Rest}
	  %% Line 624
	  <[{'ANY',_cor207}|[{'DEFINED',_cor208}|[{'BY',_cor209}|[{'identifier',_cor210,Id}|Rest]]]]> when 'true' ->
	      %% Line 625
	      {{'type',[],{'ANY_DEFINED_BY',Id},[],[],'no'},Rest}
	  %% Line 626
	  <[{'ANY',_cor211}|Rest]> when 'true' ->
	      %% Line 627
	      {{'type',[],'ANY',[],[],'no'},Rest}
	  %% Line 629
	  <Tokens> when 'true' ->
	      %% Line 630
	      apply 'parse_ObjectClassFieldType'/1
		  (Tokens)
	end
'parse_TypeWithConstraint'/1 =
    %% Line 634
    fun (_cor0) ->
	case _cor0 of
	  <[{'SEQUENCE',_cor63}|[Lpar = {'(',_cor64}|Rest]]> when 'true' ->
	      %% Line 635
	      case apply 'parse_Constraint'/1
		       ([Lpar|Rest]) of
		<{Constraint,Rest2}> when 'true' ->
		    let <_cor8> =
			%% Line 636
			case Rest2 of
			  %% Line 637
			  <[{'OF',_cor65}|[{'identifier',_cor66,_X_Id}|Rest3]]> when 'true' ->
			      %% Line 639
			      Rest3
			  %% Line 640
			  <[{'OF',_cor67}|Rest3]> when 'true' ->
			      %% Line 641
			      Rest3
			  %% Line 642
			  <_cor68> when 'true' ->
			      let <_cor5> =
				  %% Line 644
				  call 'erlang':'hd'
				      (Rest2)
			      in  let <_cor6> =
				      %% Line 644
				      apply 'get_line'/1
					  (_cor5)
				  in  let <_cor4> =
					  %% Line 644
					  call 'erlang':'get'
					      ('asn1_module')
				      in  let <_cor2> =
					      %% Line 645
					      call 'erlang':'hd'
						  (Rest2)
					  in  let <_cor3> =
						  %% Line 645
						  apply 'get_token'/1
						      (_cor2)
					      in  %% Line 643
						  call 'erlang':'throw'
						      ({'asn1_error',%% Line 644
								     {_cor6,_cor4,%% Line 645
										  ['got'|[_cor3|['expected'|['OF']]]]}})
			end
		    in  %% Line 647
			case apply 'parse_Type'/1
				 (_cor8) of
			  <{Type,Rest5}> when 'true' ->
			      let <_cor11> =
				  %% Line 649
				  apply 'merge_constraints'/1
				      ([Constraint|[]])
			      in  %% Line 648
				  {{'type',[],{'SEQUENCE OF',Type},_cor11,[],'no'},%% Line 649
										   Rest5}
			  ( <_cor10> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor10})
			    -| ['compiler_generated'] )
			end
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 651
	  <[{'SEQUENCE',_cor69}|[{'SIZE',_cor70}|[Lpar = {'(',_cor71}|Rest]]]> when 'true' ->
	      %% Line 652
	      case apply 'parse_Constraint'/1
		       ([Lpar|Rest]) of
		<{Constraint,Rest2}> when 'true' ->
		    %% Line 653
		    case Constraint of
		      <{'constraint',C,_cor72}> when 'true' ->
			  let <_rec10> = {%% Line 654
			       'SizeConstraint',%% Line 654
						C}
			  in  let <_cor17> =
				  %% Line 654
				  call 'erlang':'setelement'
				      (2, Constraint, _rec10)
			      in  let <_cor25> =
				      %% Line 655
				      case Rest2 of
					%% Line 656
					<[{'OF',_cor76}|[{'identifier',_cor77,_X_Id}|Rest3]]> when 'true' ->
					    %% Line 658
					    Rest3
					%% Line 659
					<[{'OF',_cor78}|Rest3]> when 'true' ->
					    %% Line 660
					    Rest3
					%% Line 661
					<_cor79> when 'true' ->
					    let <_cor22> =
						%% Line 662
						call 'erlang':'hd'
						    (Rest2)
					    in  let <_cor23> =
						    %% Line 662
						    apply 'get_line'/1
							(_cor22)
						in  let <_cor21> =
							%% Line 662
							call 'erlang':'get'
							    ('asn1_module')
						    in  let <_cor19> =
							    %% Line 663
							    call 'erlang':'hd'
								(Rest2)
							in  let <_cor20> =
								%% Line 663
								apply 'get_token'/1
								    (_cor19)
							    in  %% Line 662
								call 'erlang':'throw'
								    ({'asn1_error',{_cor23,_cor21,%% Line 663
												  ['got'|[_cor20|['expected'|['OF']]]]}})
				      end
				  in  %% Line 665
				      case apply 'parse_Type'/1
					       (_cor25) of
					<{Type,Rest5}> when 'true' ->
					    let <_cor28> =
						%% Line 666
						apply 'merge_constraints'/1
						    ([_cor17|[]])
					    in  %% Line 666
						{{'type',[],{'SEQUENCE OF',Type},_cor28,[],'no'},Rest5}
					( <_cor27> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_cor27})
					  -| ['compiler_generated'] )
				      end
		      ( <_cor13> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor13})
			-| ['compiler_generated'] )
		    end
		( <_cor12> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor12})
		  -| ['compiler_generated'] )
	      end
	  %% Line 668
	  <[{'SET',_cor80}|[Lpar = {'(',_cor81}|Rest]]> when 'true' ->
	      %% Line 669
	      case apply 'parse_Constraint'/1
		       ([Lpar|Rest]) of
		<{Constraint,Rest2}> when 'true' ->
		    let <_cor36> =
			%% Line 670
			case Rest2 of
			  %% Line 671
			  <[{'OF',_cor82}|[{'identifier',_cor83,_X_Id}|Rest3]]> when 'true' ->
			      %% Line 673
			      Rest3
			  %% Line 674
			  <[{'OF',_cor84}|Rest3]> when 'true' ->
			      %% Line 675
			      Rest3
			  %% Line 676
			  <_cor85> when 'true' ->
			      let <_cor33> =
				  %% Line 678
				  call 'erlang':'hd'
				      (Rest2)
			      in  let <_cor34> =
				      %% Line 678
				      apply 'get_line'/1
					  (_cor33)
				  in  let <_cor32> =
					  %% Line 678
					  call 'erlang':'get'
					      ('asn1_module')
				      in  let <_cor30> =
					      %% Line 679
					      call 'erlang':'hd'
						  (Rest2)
					  in  let <_cor31> =
						  %% Line 679
						  apply 'get_token'/1
						      (_cor30)
					      in  %% Line 677
						  call 'erlang':'throw'
						      ({'asn1_error',%% Line 678
								     {_cor34,_cor32,%% Line 679
										    ['got'|[_cor31|['expected'|['OF']]]]}})
			end
		    in  %% Line 681
			case apply 'parse_Type'/1
				 (_cor36) of
			  <{Type,Rest5}> when 'true' ->
			      let <_cor39> =
				  %% Line 683
				  apply 'merge_constraints'/1
				      ([Constraint|[]])
			      in  %% Line 682
				  {{'type',[],{'SET OF',Type},_cor39,[],'no'},%% Line 683
									      Rest5}
			  ( <_cor38> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor38})
			    -| ['compiler_generated'] )
			end
		( <_cor29> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor29})
		  -| ['compiler_generated'] )
	      end
	  %% Line 685
	  <[{'SET',_cor86}|[{'SIZE',_cor87}|[Lpar = {'(',_cor88}|Rest]]]> when 'true' ->
	      %% Line 686
	      case apply 'parse_Constraint'/1
		       ([Lpar|Rest]) of
		<{Constraint,Rest2}> when 'true' ->
		    %% Line 687
		    case Constraint of
		      <{'constraint',C,_cor89}> when 'true' ->
			  let <_rec12> = {%% Line 688
			       'SizeConstraint',%% Line 688
						C}
			  in  let <_cor45> =
				  %% Line 688
				  call 'erlang':'setelement'
				      (2, Constraint, _rec12)
			      in  let <_cor53> =
				      %% Line 689
				      case Rest2 of
					%% Line 690
					<[{'OF',_cor93}|[{'identifier',_cor94,_X_Id}|Rest3]]> when 'true' ->
					    %% Line 692
					    Rest3
					%% Line 693
					<[{'OF',_cor95}|Rest3]> when 'true' ->
					    %% Line 694
					    Rest3
					%% Line 695
					<_cor96> when 'true' ->
					    let <_cor50> =
						%% Line 697
						call 'erlang':'hd'
						    (Rest2)
					    in  let <_cor51> =
						    %% Line 697
						    apply 'get_line'/1
							(_cor50)
						in  let <_cor49> =
							%% Line 697
							call 'erlang':'get'
							    ('asn1_module')
						    in  let <_cor47> =
							    %% Line 698
							    call 'erlang':'hd'
								(Rest2)
							in  let <_cor48> =
								%% Line 698
								apply 'get_token'/1
								    (_cor47)
							    in  %% Line 696
								call 'erlang':'throw'
								    ({'asn1_error',%% Line 697
										   {_cor51,_cor49,%% Line 698
												  ['got'|[_cor48|['expected'|['OF']]]]}})
				      end
				  in  %% Line 700
				      case apply 'parse_Type'/1
					       (_cor53) of
					<{Type,Rest5}> when 'true' ->
					    let <_cor56> =
						%% Line 702
						apply 'merge_constraints'/1
						    ([_cor45|[]])
					    in  %% Line 701
						{{'type',[],{'SET OF',Type},_cor56,[],'no'},%% Line 702
											    Rest5}
					( <_cor55> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_cor55})
					  -| ['compiler_generated'] )
				      end
		      ( <_cor41> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor41})
			-| ['compiler_generated'] )
		    end
		( <_cor40> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor40})
		  -| ['compiler_generated'] )
	      end
	  %% Line 704
	  <Tokens> when 'true' ->
	      let <_cor60> =
		  %% Line 705
		  call 'erlang':'hd'
		      (Tokens)
	      in  let <_cor61> =
		      %% Line 705
		      apply 'get_line'/1
			  (_cor60)
		  in  let <_cor59> =
			  %% Line 705
			  call 'erlang':'get'
			      ('asn1_module')
		      in  let <_cor57> =
			      %% Line 706
			      call 'erlang':'hd'
				  (Tokens)
			  in  let <_cor58> =
				  %% Line 706
				  apply 'get_token'/1
				      (_cor57)
			      in  %% Line 705
				  call 'erlang':'throw'
				      ({'asn1_error',{_cor61,_cor59,%% Line 706
								    ['got'|[_cor58|['expected'|[['SEQUENCE'|['SEQUENCE SIZE'|['SET'|['SET SIZE']]]]|['followed'|['by'|['a'|['constraint']]]]]]]]}})
	end
'parse_ReferencedType'/1 =
    %% Line 713
    fun (_cor0) ->
	let <Flist> =
	    %% Line 714
	    [( 'parse_DefinedType'/1
	       -| [{'id',{0,0,'-parse_ReferencedType/1-fun-0-'}}] )|%% Line 715
								    [( 'parse_SelectionType'/1
								       -| [{'id',{0,0,'-parse_ReferencedType/1-fun-1-'}}] )|%% Line 716
															    [( 'parse_TypeFromObject'/1
															       -| [{'id',{0,0,'-parse_ReferencedType/1-fun-2-'}}] )|%% Line 717
																						    [( 'parse_ValueSetFromObjects'/1
																						       -| [{'id',{0,0,'-parse_ReferencedType/1-fun-3-'}}] )|[]]]]]
	in  let <_cor2> =
		catch
		    %% Line 718
		    apply 'parse_or'/2
			(_cor0, Flist)
	    in  %% Line 718
		case _cor2 of
		  %% Line 719
		  <{'EXIT',Reason}> when 'true' ->
		      %% Line 720
		      call 'erlang':'exit'
			  (Reason)
		  %% Line 721
		  <AsnErr = {'asn1_error',_cor5}> when 'true' ->
		      %% Line 722
		      call 'erlang':'throw'
			  (AsnErr)
		  %% Line 723
		  <Result> when 'true' ->
		      %% Line 724
		      Result
		end
'parse_DefinedType'/1 =
    %% Line 727
    fun (_cor0) ->
	case _cor0 of
	  <Tokens = [{'typereference',_cor16,_cor17}|[{'{',_cor18}|_X_Rest]]> when 'true' ->
	      %% Line 728
	      apply 'parse_ParameterizedType'/1
		  (Tokens)
	  %% Line 729
	  <Tokens = [{'typereference',L1,TypeName}|%% Line 730
						   [T2 = {'typereference',_cor19,_cor20}|[T3 = {'{',_cor21}|Rest]]]> when 'true' ->
	      let <_cor1> =
		  catch
		      %% Line 731
		      apply 'parse_ParameterizedType'/1
			  (Tokens)
	      in  %% Line 731
		  case _cor1 of
		    %% Line 732
		    <{'EXIT',_X_Reason}> when 'true' ->
			let <Rest2> =
			    %% Line 733
			    [T2|[T3|Rest]]
			in  let <_cor3> =
				%% Line 735
				apply 'resolve_module'/1
				    (TypeName)
			    in  %% Line 734
				{{'type',[],{'Externaltypereference',L1,_cor3,%% Line 736
									      TypeName},[],[],'no'},%% Line 736
												    Rest2}
		    %% Line 737
		    <{'asn1_error',_cor22}> when 'true' ->
			let <Rest2> =
			    %% Line 738
			    [T2|[T3|Rest]]
			in  let <_cor5> =
				%% Line 740
				apply 'resolve_module'/1
				    (TypeName)
			    in  %% Line 739
				{{'type',[],{'Externaltypereference',L1,_cor5,%% Line 741
									      TypeName},[],[],'no'},%% Line 741
												    Rest2}
		    %% Line 742
		    <Result> when 'true' ->
			%% Line 743
			Result
		  end
	  %% Line 745
	  <Tokens = [{'typereference',_X_L1,_X_Module}|[{'.',_cor23}|%% Line 746
								     [{'typereference',_cor24,_X_TypeName}|[{'{',_cor25}|_X_Rest]]]]> when 'true' ->
	      %% Line 747
	      apply 'parse_ParameterizedType'/1
		  (Tokens)
	  %% Line 748
	  <[{'typereference',L1,Module}|[{'.',_cor26}|[{'typereference',_cor27,TypeName}|Rest]]]> when 'true' ->
	      %% Line 749
	      {{'type',[],{'Externaltypereference',L1,Module,TypeName},[],[],'no'},Rest}
	  %% Line 750
	  <[{'typereference',L1,TypeName}|Rest]> when 'true' ->
	      %% Line 751
	      case apply 'is_pre_defined_class'/1
		       (TypeName) of
		%% Line 752
		<'false'> when 'true' ->
		    let <_cor7> =
			%% Line 753
			apply 'resolve_module'/1
			    (TypeName)
		    in  %% Line 753
			{{'type',[],{'Externaltypereference',L1,_cor7,%% Line 754
								      TypeName},[],[],'no'},%% Line 754
											    Rest}
		%% Line 755
		<_cor28> when 'true' ->
		    let <_cor8> =
			%% Line 757
			call 'erlang':'get'
			    ('asn1_module')
		    in  %% Line 756
			call 'erlang':'throw'
			    ({'asn1_error',%% Line 757
					   {L1,_cor8,%% Line 758
						     ['got'|[TypeName|['expected'|[['typereference'|['typereference.typereference'|['typereference typereference']]]]]]]}})
	      end
	  %% Line 762
	  <Tokens> when 'true' ->
	      let <_cor13> =
		  %% Line 763
		  call 'erlang':'hd'
		      (Tokens)
	      in  let <_cor14> =
		      %% Line 763
		      apply 'get_line'/1
			  (_cor13)
		  in  let <_cor12> =
			  %% Line 763
			  call 'erlang':'get'
			      ('asn1_module')
		      in  let <_cor10> =
			      %% Line 764
			      call 'erlang':'hd'
				  (Tokens)
			  in  let <_cor11> =
				  %% Line 764
				  apply 'get_token'/1
				      (_cor10)
			      in  %% Line 763
				  call 'erlang':'throw'
				      ({'asn1_error',{_cor14,_cor12,%% Line 764
								    ['got'|[_cor11|['expected'|[['typereference'|['typereference.typereference'|['typereference typereference']]]]]]]}})
	end
'parse_SelectionType'/1 =
    %% Line 768
    fun (_cor0) ->
	case _cor0 of
	  <[{'identifier',_cor8,Name}|[{'<',_cor9}|Rest]]> when 'true' ->
	      %% Line 769
	      case apply 'parse_Type'/1
		       (Rest) of
		<{Type,Rest2}> when 'true' ->
		    %% Line 770
		    {{'SelectionType',Name,Type},Rest2}
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 771
	  <Tokens> when 'true' ->
	      let <_cor5> =
		  %% Line 772
		  call 'erlang':'hd'
		      (Tokens)
	      in  let <_cor6> =
		      %% Line 772
		      apply 'get_line'/1
			  (_cor5)
		  in  let <_cor4> =
			  %% Line 772
			  call 'erlang':'get'
			      ('asn1_module')
		      in  let <_cor2> =
			      %% Line 773
			      call 'erlang':'hd'
				  (Tokens)
			  in  let <_cor3> =
				  %% Line 773
				  apply 'get_token'/1
				      (_cor2)
			      in  %% Line 772
				  call 'erlang':'throw'
				      ({'asn1_error',{_cor6,_cor4,%% Line 773
								  ['got'|[_cor3|['expected'|['identifier <']]]]}})
	end
'resolve_module'/1 =
    %% Line 776
    fun (_cor0) ->
	let <Current> =
	    %% Line 777
	    call 'erlang':'get'
		('asn1_module')
	in  let <Imports> =
		%% Line 778
		call 'erlang':'get'
		    ({Current,'imports'})
	    in  %% Line 779
		apply 'resolve_module'/3
		    (_cor0, Current, Imports)
'resolve_module'/3 =
    %% Line 781
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <_X_Type,Current,'undefined'> when 'true' ->
	      %% Line 782
	      Current
	  %% Line 783
	  <Type,Current,Imports> when 'true' ->
	      let <_cor10> =
		  %% Line 784
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor7) ->
				case _cor7 of
				  <[{'SymbolsFromModule',S,Mod,_cor15}|_cor4]> when 'true' ->
				      ( letrec
					    'lc$^1'/1 =
						fun (_cor8) ->
						    case _cor8 of
						      <[%% Line 785
							{'Externaltypereference',_cor16,_cor17,T}|_cor6]>
							  when %% Line 786
							    call 'erlang':'=='
								(Type,
								 T) ->
							  let <_cor9> =
							      %% Line 785
							      apply 'lc$^1'/1
								  (_cor6)
							  in  ( [Mod|_cor9]
								-| ['compiler_generated'] )
						      ( <[_cor5|_cor6]> when 'true' ->
							    %% Line 785
							    apply 'lc$^1'/1
								(_cor6)
							-| ['compiler_generated'] )
						      <[]> when 'true' ->
							  apply 'lc$^0'/1
							      (_cor4)
						      ( <_cor8> when 'true' ->
							    ( primop 'match_fail'
								  ({'function_clause',_cor8})
							      -| [{'function_name',{'lc$^1',1}}] )
							-| ['compiler_generated'] )
						    end
					in  apply 'lc$^1'/1
						(%% Line 785
						 S)
					-| ['list_comprehension'] )
				  ( <[_cor3|_cor4]> when 'true' ->
					apply 'lc$^0'/1
					    (_cor4)
				    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor7> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor7})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (Imports)
		    -| ['list_comprehension'] )
	      in  %% Line 784
		  case _cor10 of
		    %% Line 787
		    <[{'Externaltypereference',_cor18,_cor19,Mod}|_cor20]> when 'true' ->
			Mod
		    %% Line 790
		    <[]> when 'true' ->
			Current
		    ( <_cor11> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor11})
		      -| ['compiler_generated'] )
		  end
	end
'parse_Constraints'/1 =
    %% Line 811
    fun (_cor0) ->
	%% Line 812
	apply 'parse_Constraints'/2
	    (_cor0, [])
'parse_Constraints'/2 =
    %% Line 814
    fun (_cor1,_cor0) ->
	%% Line 815
	case apply 'parse_Constraint'/1
		 (_cor1) of
	  <{Constraint,Rest}> when 'true' ->
	      %% Line 816
	      case Rest of
		%% Line 817
		<[{'(',_cor7}|_X_Rest2]> when 'true' ->
		    %% Line 818
		    apply 'parse_Constraints'/2
			(Rest, [Constraint|_cor0])
		%% Line 819
		<_cor8> when 'true' ->
		    let <_cor3> =
			%% Line 820
			call 'lists':'reverse'
			    ([Constraint|_cor0])
		    in  %% Line 820
			{_cor3,Rest}
	      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'parse_Constraint'/1 =
    %% Line 823
    fun (_cor0) ->
	case _cor0 of
	  <[{'(',_cor13}|Rest]> when 'true' ->
	      %% Line 824
	      case apply 'parse_ConstraintSpec'/1
		       (Rest) of
		<{Constraint,Rest2}> when 'true' ->
		    %% Line 825
		    case apply 'parse_ExceptionSpec'/1
			     (Rest2) of
		      <{Exception,Rest3}> when 'true' ->
			  %% Line 826
			  case Rest3 of
			    %% Line 827
			    <[{')',_cor14}|Rest4]> when 'true' ->
				%% Line 828
				{{'constraint',Constraint,Exception},Rest4}
			    %% Line 829
			    <[H|_X_T]> when 'true' ->
				let <_cor5> =
				    %% Line 830
				    apply 'get_line'/1
					(H)
				in  let <_cor4> =
					%% Line 830
					call 'erlang':'get'
					    ('asn1_module')
				    in  let <_cor3> =
					    %% Line 831
					    apply 'get_token'/1
						(H)
					in  %% Line 830
					    call 'erlang':'throw'
						({'asn1_error',{_cor5,_cor4,%% Line 831
									    ['got'|[_cor3|['expected'|[')']]]]}})
			    ( <_cor6> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor6})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor2> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor2})
			-| ['compiler_generated'] )
		    end
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 833
	  <Tokens> when 'true' ->
	      let <_cor10> =
		  %% Line 834
		  call 'erlang':'hd'
		      (Tokens)
	      in  let <_cor11> =
		      %% Line 834
		      apply 'get_line'/1
			  (_cor10)
		  in  let <_cor9> =
			  %% Line 834
			  call 'erlang':'get'
			      ('asn1_module')
		      in  let <_cor7> =
			      %% Line 835
			      call 'erlang':'hd'
				  (Tokens)
			  in  let <_cor8> =
				  %% Line 835
				  apply 'get_token'/1
				      (_cor7)
			      in  %% Line 834
				  call 'erlang':'throw'
				      ({'asn1_error',{_cor11,_cor9,%% Line 835
								   ['got'|[_cor8|['expected'|['(']]]]}})
	end
'parse_ConstraintSpec'/1 =
    %% Line 837
    fun (_cor0) ->
	let <Flist> =
	    %% Line 838
	    [( 'parse_GeneralConstraint'/1
	       -| [{'id',{0,0,'-parse_ConstraintSpec/1-fun-0-'}}] )|%% Line 839
								    [( 'parse_SubtypeConstraint'/1
								       -| [{'id',{0,0,'-parse_ConstraintSpec/1-fun-1-'}}] )|[]]]
	in  let <_cor2> =
		catch
		    %% Line 840
		    apply 'parse_or'/2
			(_cor0, Flist)
	    in  %% Line 840
		case _cor2 of
		  %% Line 841
		  <{'EXIT',Reason}> when 'true' ->
		      %% Line 842
		      call 'erlang':'exit'
			  (Reason)
		  %% Line 843
		  <{'asn1_error',Reason2}> when 'true' ->
		      %% Line 844
		      call 'erlang':'throw'
			  ({'asn1_error',Reason2})
		  %% Line 845
		  <Result> when 'true' ->
		      %% Line 846
		      Result
		end
'parse_ExceptionSpec'/1 =
    %% Line 849
    fun (_cor0) ->
	case _cor0 of
	  <[LPar = {')',_cor7}|Rest]> when 'true' ->
	      %% Line 850
	      {'undefined',[LPar|Rest]}
	  %% Line 851
	  <[{'!',_cor8}|Rest]> when 'true' ->
	      %% Line 852
	      apply 'parse_ExceptionIdentification'/1
		  (Rest)
	  %% Line 853
	  <Tokens> when 'true' ->
	      let <_cor4> =
		  %% Line 854
		  call 'erlang':'hd'
		      (Tokens)
	      in  let <_cor5> =
		      %% Line 854
		      apply 'get_line'/1
			  (_cor4)
		  in  let <_cor3> =
			  %% Line 854
			  call 'erlang':'get'
			      ('asn1_module')
		      in  let <_cor1> =
			      %% Line 855
			      call 'erlang':'hd'
				  (Tokens)
			  in  let <_cor2> =
				  %% Line 855
				  apply 'get_token'/1
				      (_cor1)
			      in  %% Line 854
				  call 'erlang':'throw'
				      ({'asn1_error',{_cor5,_cor3,%% Line 855
								  ['got'|[_cor2|['expected'|[[')'|['!']]]]]]}})
	end
'parse_ExceptionIdentification'/1 =
    %% Line 857
    fun (_cor0) ->
	let <Flist> =
	    %% Line 858
	    [( 'parse_SignedNumber'/1
	       -| [{'id',{0,0,'-parse_ExceptionIdentification/1-fun-0-'}}] )|%% Line 859
									     [( 'parse_DefinedValue'/1
										-| [{'id',{0,0,'-parse_ExceptionIdentification/1-fun-1-'}}] )|%% Line 860
																	      [( 'parse_TypeColonValue'/1
																		 -| [{'id',{0,0,'-parse_ExceptionIdentification/1-fun-2-'}}] )|[]]]]
	in  let <_cor2> =
		catch
		    %% Line 861
		    apply 'parse_or'/2
			(_cor0, Flist)
	    in  %% Line 861
		case _cor2 of
		  %% Line 862
		  <{'EXIT',Reason}> when 'true' ->
		      %% Line 863
		      call 'erlang':'exit'
			  (Reason)
		  %% Line 864
		  <{'asn1_error',Reason2}> when 'true' ->
		      %% Line 865
		      call 'erlang':'throw'
			  ({'asn1_error',Reason2})
		  %% Line 866
		  <Result> when 'true' ->
		      %% Line 867
		      Result
		end
'parse_TypeColonValue'/1 =
    %% Line 870
    fun (_cor0) ->
	%% Line 871
	case apply 'parse_Type'/1
		 (_cor0) of
	  <{Type,Rest}> when 'true' ->
	      %% Line 872
	      case Rest of
		%% Line 873
		<[{':',_cor8}|Rest2]> when 'true' ->
		    %% Line 874
		    case apply 'parse_Value'/1
			     (Rest2) of
		      <{Value,Rest3}> when 'true' ->
			  %% Line 875
			  {{Type,Value},Rest3}
		      ( <_cor2> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor2})
			-| ['compiler_generated'] )
		    end
		%% Line 876
		<[H|_X_T]> when 'true' ->
		    let <_cor5> =
			%% Line 877
			apply 'get_line'/1
			    (H)
		    in  let <_cor4> =
			    %% Line 877
			    call 'erlang':'get'
				('asn1_module')
			in  let <_cor3> =
				%% Line 878
				apply 'get_token'/1
				    (H)
			    in  %% Line 877
				call 'erlang':'throw'
				    ({'asn1_error',{_cor5,_cor4,%% Line 878
								['got'|[_cor3|['expected'|[':']]]]}})
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor6})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'parse_SubtypeConstraint'/1 =
    %% Line 881
    fun (_cor0) ->
	%% Line 882
	apply 'parse_ElementSetSpecs'/1
	    (_cor0)
'parse_ElementSetSpecs'/1 =
    %% Line 884
    fun (_cor0) ->
	case _cor0 of
	  <[{'...',_cor6}|Rest]> when 'true' ->
	      %% Line 885
	      case apply 'parse_ElementSetSpec'/1
		       (Rest) of
		<{Elements,Rest2}> when 'true' ->
		    %% Line 886
		    {{[],Elements},Rest2}
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 887
	  <Tokens> when 'true' ->
	      %% Line 888
	      case apply 'parse_ElementSetSpec'/1
		       (Tokens) of
		<{RootElems,Rest}> when 'true' ->
		    %% Line 889
		    case Rest of
		      %% Line 890
		      <[{',',_cor7}|[{'...',_cor8}|[{',',_cor9}|Rest2]]]> when 'true' ->
			  %% Line 891
			  case apply 'parse_ElementSetSpec'/1
				   (Rest2) of
			    <{AdditionalElems,Rest3}> when 'true' ->
				%% Line 892
				{{RootElems,AdditionalElems},Rest3}
			    ( <_cor3> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor3})
			      -| ['compiler_generated'] )
			  end
		      %% Line 893
		      <[{',',_cor10}|[{'...',_cor11}|Rest2]]> when 'true' ->
			  %% Line 894
			  {{RootElems,[]},Rest2}
		      %% Line 895
		      <_cor12> when 'true' ->
			  %% Line 896
			  {RootElems,Rest}
		    end
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	end
'parse_ElementSetSpec'/1 =
    %% Line 899
    fun (_cor0) ->
	case _cor0 of
	  <[{'ALL',_cor3}|[{'EXCEPT',_cor4}|Rest]]> when 'true' ->
	      %% Line 900
	      case apply 'parse_Elements'/1
		       (Rest) of
		<{Exclusions,Rest2}> when 'true' ->
		    %% Line 901
		    {{'ALL',{'EXCEPT',Exclusions}},Rest2}
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 902
	  <Tokens> when 'true' ->
	      %% Line 903
	      apply 'parse_Unions'/1
		  (Tokens)
	end
'parse_Unions'/1 =
    %% Line 911
    fun (_cor0) ->
	%% Line 912
	case apply 'parse_Intersections'/1
		 (_cor0) of
	  <{InterSec,Rest}> when 'true' ->
	      %% Line 913
	      case apply 'parse_UnionsRec'/1
		       (Rest) of
		<{Unions,Rest2}> when 'true' ->
		    %% Line 914
		    case <InterSec,Unions> of
		      %% Line 915
		      <_cor9,[]>
			  when call 'erlang':'=:='
				(_cor9,
				 InterSec) ->
			  %% Line 916
			  {InterSec,Rest2}
		      %% Line 917
		      <{'SingleValue',V1},{'SingleValue',V2}> when 'true' ->
			  let <_cor4> =
			      %% Line 918
			      apply 'to_set'/1
				  (V1)
			  in  let <_cor3> =
				  %% Line 918
				  apply 'to_set'/1
				      (V2)
			      in  let <_cor5> =
				      %% Line 918
				      call 'ordsets':'union'
					  (_cor4, _cor3)
				  in  %% Line 918
				      {{'SingleValue',_cor5},Rest2}
		      %% Line 919
		      <V1,V2>
			  when call 'erlang':'is_list'
				(V2) ->
			  let <_cor6> =
			      %% Line 920
			      [V1|['union'|V2]]
			  in  %% Line 920
			      {_cor6,Rest2}
		      %% Line 921
		      <V1,V2> when 'true' ->
			  %% Line 922
			  {[V1|['union'|[V2|[]]]],Rest2}
		    end
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'parse_UnionsRec'/1 =
    %% Line 927
    fun (_cor0) ->
	case _cor0 of
	  <[{'|',_cor9}|Rest]> when 'true' ->
	      %% Line 928
	      case apply 'parse_Intersections'/1
		       (Rest) of
		<{InterSec,Rest2}> when 'true' ->
		    %% Line 929
		    case apply 'parse_UnionsRec'/1
			     (Rest2) of
		      <{URec,Rest3}> when 'true' ->
			  %% Line 930
			  case <InterSec,URec> of
			    %% Line 931
			    <V1,[]> when 'true' ->
				%% Line 932
				{V1,Rest3}
			    %% Line 933
			    <{'SingleValue',V1},{'SingleValue',V2}> when 'true' ->
				let <_cor4> =
				    %% Line 934
				    apply 'to_set'/1
					(V1)
				in  let <_cor3> =
					%% Line 934
					apply 'to_set'/1
					    (V2)
				    in  let <_cor5> =
					    %% Line 934
					    call 'ordsets':'union'
						(_cor4, _cor3)
					in  %% Line 934
					    {{'SingleValue',_cor5},Rest3}
			    %% Line 935
			    <V1,V2>
				when call 'erlang':'is_list'
				      (V2) ->
				let <_cor6> =
				    %% Line 936
				    [V1|['union'|V2]]
				in  %% Line 936
				    {_cor6,Rest3}
			    %% Line 937
			    <V1,V2> when 'true' ->
				%% Line 938
				{[V1|['union'|[V2|[]]]],Rest3}
			  end
		      ( <_cor2> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor2})
			-| ['compiler_generated'] )
		    end
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 940
	  <[{'UNION',Info}|Rest]> when 'true' ->
	      %% Line 941
	      apply 'parse_UnionsRec'/1
		  ([{'|',Info}|Rest])
	  %% Line 942
	  <Tokens> when 'true' ->
	      %% Line 943
	      {[],Tokens}
	end
'parse_Intersections'/1 =
    %% Line 945
    fun (_cor0) ->
	%% Line 946
	case apply 'parse_IntersectionElements'/1
		 (_cor0) of
	  <{InterSec,Rest}> when 'true' ->
	      %% Line 947
	      case apply 'parse_IElemsRec'/1
		       (Rest) of
		<{IRec,Rest2}> when 'true' ->
		    %% Line 948
		    case <InterSec,IRec> of
		      %% Line 949
		      <V1,[]> when 'true' ->
			  %% Line 950
			  {V1,Rest2}
		      %% Line 951
		      <{'SingleValue',V1},{'SingleValue',V2}> when 'true' ->
			  let <_cor4> =
			      %% Line 953
			      apply 'to_set'/1
				  (V1)
			  in  let <_cor3> =
				  %% Line 953
				  apply 'to_set'/1
				      (V2)
			      in  let <_cor5> =
				      %% Line 953
				      call 'ordsets':'intersection'
					  (_cor4, _cor3)
				  in  %% Line 952
				      {{'SingleValue',_cor5},%% Line 953
							     Rest2}
		      %% Line 954
		      <V1,V2>
			  when call 'erlang':'is_list'
				(V2) ->
			  let <_cor6> =
			      %% Line 955
			      [V1|['intersection'|V2]]
			  in  %% Line 955
			      {_cor6,Rest2}
		      %% Line 956
		      <V1,V2> when 'true' ->
			  %% Line 957
			  {[V1|['intersection'|[V2|[]]]],Rest2}
		    end
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'parse_IElemsRec'/1 =
    %% Line 962
    fun (_cor0) ->
	case _cor0 of
	  <[{'^',_cor9}|Rest]> when 'true' ->
	      %% Line 963
	      case apply 'parse_IntersectionElements'/1
		       (Rest) of
		<{InterSec,Rest2}> when 'true' ->
		    %% Line 964
		    case apply 'parse_IElemsRec'/1
			     (Rest2) of
		      <{IRec,Rest3}> when 'true' ->
			  %% Line 965
			  case <InterSec,IRec> of
			    %% Line 966
			    <{'SingleValue',V1},{'SingleValue',V2}> when 'true' ->
				let <_cor4> =
				    %% Line 968
				    apply 'to_set'/1
					(V1)
				in  let <_cor3> =
					%% Line 968
					apply 'to_set'/1
					    (V2)
				    in  let <_cor5> =
					    %% Line 968
					    call 'ordsets':'intersection'
						(_cor4, _cor3)
					in  %% Line 967
					    {{'SingleValue',_cor5},%% Line 968
								   Rest3}
			    %% Line 969
			    <V1,[]> when 'true' ->
				%% Line 970
				{V1,Rest3}
			    %% Line 971
			    <V1,V2>
				when call 'erlang':'is_list'
				      (V2) ->
				let <_cor6> =
				    %% Line 972
				    [V1|['intersection'|V2]]
				in  %% Line 972
				    {_cor6,Rest3}
			    %% Line 973
			    <V1,V2> when 'true' ->
				%% Line 974
				{[V1|['intersection'|[V2|[]]]],Rest3}
			  end
		      ( <_cor2> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor2})
			-| ['compiler_generated'] )
		    end
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 976
	  <[{'INTERSECTION',Info}|Rest]> when 'true' ->
	      %% Line 977
	      apply 'parse_IElemsRec'/1
		  ([{'^',Info}|Rest])
	  %% Line 978
	  <Tokens> when 'true' ->
	      %% Line 979
	      {[],Tokens}
	end
'parse_IntersectionElements'/1 =
    %% Line 986
    fun (_cor0) ->
	%% Line 987
	case apply 'parse_Elements'/1
		 (_cor0) of
	  <{InterSec,Rest}> when 'true' ->
	      %% Line 988
	      case Rest of
		%% Line 989
		<[{'EXCEPT',_cor5}|Rest2]> when 'true' ->
		    %% Line 990
		    case apply 'parse_Elements'/1
			     (Rest2) of
		      <{Exclusion,Rest3}> when 'true' ->
			  %% Line 991
			  {{InterSec,{'EXCEPT',Exclusion}},Rest3}
		      ( <_cor2> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor2})
			-| ['compiler_generated'] )
		    end
		%% Line 992
		<_cor6> when 'true' ->
		    %% Line 993
		    {InterSec,Rest}
	      end
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'parse_Elements'/1 =
    %% Line 1000
    fun (_cor0) ->
	case _cor0 of
	  <[{'(',_cor10}|Rest]> when 'true' ->
	      %% Line 1001
	      case apply 'parse_ElementSetSpec'/1
		       (Rest) of
		<{Elems,Rest2}> when 'true' ->
		    %% Line 1002
		    case Rest2 of
		      %% Line 1003
		      <[{')',_cor11}|Rest3]> when 'true' ->
			  %% Line 1004
			  {Elems,Rest3}
		      %% Line 1005
		      <[H|_X_T]> when 'true' ->
			  let <_cor4> =
			      %% Line 1006
			      apply 'get_line'/1
				  (H)
			  in  let <_cor3> =
				  %% Line 1006
				  call 'erlang':'get'
				      ('asn1_module')
			      in  let <_cor2> =
				      %% Line 1007
				      apply 'get_token'/1
					  (H)
				  in  %% Line 1006
				      call 'erlang':'throw'
					  ({'asn1_error',{_cor4,_cor3,%% Line 1007
								      ['got'|[_cor2|['expected'|[')']]]]}})
		      ( <_cor5> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor5})
			-| ['compiler_generated'] )
		    end
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1009
	  <Tokens> when 'true' ->
	      let <Flist> =
		  %% Line 1010
		  [( 'parse_ObjectSetElements'/1
		     -| [{'id',{0,0,'-parse_Elements/1-fun-0-'}}] )|%% Line 1011
								    [( 'parse_SubtypeElements'/1
								       -| [{'id',{0,0,'-parse_Elements/1-fun-1-'}}] )|%% Line 1014
														      [( 'parse_Object'/1
															 -| [{'id',{0,0,'-parse_Elements/1-fun-2-'}}] )|%% Line 1015
																					[( 'parse_DefinedObjectSet'/1
																					   -| [{'id',{0,0,'-parse_Elements/1-fun-3-'}}] )|[]]]]]
	      in  let <_cor7> =
		      catch
			  %% Line 1016
			  apply 'parse_or'/2
			      (Tokens, Flist)
		  in  %% Line 1016
		      case _cor7 of
			%% Line 1017
			<{'EXIT',Reason}> when 'true' ->
			    %% Line 1018
			    call 'erlang':'exit'
				(Reason)
			%% Line 1019
			<Err = {'asn1_error',_cor12}> when 'true' ->
			    %% Line 1020
			    call 'erlang':'throw'
				(Err)
			%% Line 1021
			<Result = {Val = {'type',_cor13,_cor14,_cor15,_cor16,_cor17},_cor18}> when ( 'true'
												     -| ['compiler_generated'] ) ->
			    %% Line 1022
			    Result
			%% Line 1024
			<Result> when 'true' ->
			    %% Line 1025
			    Result
		      end
	end
'parse_DefinedObjectClass'/1 =
    %% Line 1033
    fun (_cor0) ->
	case _cor0 of
	  <[{'typereference',_cor9,_X_ModName}|[{'.',_cor10}|[Tr = {'typereference',_cor11,_X_ObjClName}|Rest]]]> when 'true' ->
	      let <_cor1> =
		  %% Line 1036
		  apply 'tref2Exttref'/1
		      (Tr)
	      in  %% Line 1036
		  {_cor1,Rest}
	  %% Line 1037
	  <[Tr = {'typereference',_cor12,_X_ObjClName}|Rest]> when 'true' ->
	      let <_cor2> =
		  %% Line 1039
		  apply 'tref2Exttref'/1
		      (Tr)
	      in  %% Line 1039
		  {_cor2,Rest}
	  %% Line 1040
	  <[{'TYPE-IDENTIFIER',_cor13}|Rest]> when 'true' ->
	      %% Line 1041
	      {'TYPE-IDENTIFIER',Rest}
	  %% Line 1042
	  <[{'ABSTRACT-SYNTAX',_cor14}|Rest]> when 'true' ->
	      %% Line 1043
	      {'ABSTRACT-SYNTAX',Rest}
	  %% Line 1044
	  <Tokens> when 'true' ->
	      let <_cor6> =
		  %% Line 1045
		  call 'erlang':'hd'
		      (Tokens)
	      in  let <_cor7> =
		      %% Line 1045
		      apply 'get_line'/1
			  (_cor6)
		  in  let <_cor5> =
			  %% Line 1045
			  call 'erlang':'get'
			      ('asn1_module')
		      in  let <_cor3> =
			      %% Line 1046
			      call 'erlang':'hd'
				  (Tokens)
			  in  let <_cor4> =
				  %% Line 1046
				  apply 'get_token'/1
				      (_cor3)
			      in  %% Line 1045
				  call 'erlang':'throw'
				      ({'asn1_error',{_cor7,_cor5,%% Line 1046
								  ['got'|[_cor4|['expected'|[['typereference . typereference'|['typereference'|['TYPE-IDENTIFIER'|['ABSTRACT-SYNTAX']]]]]]]]}})
	end
'parse_ObjectClassAssignment'/1 =
    %% Line 1052
    fun (_cor0) ->
	case _cor0 of
	  <[{'typereference',L1,ObjClName}|[{'::=',_cor8}|Rest]]> when 'true' ->
	      %% Line 1053
	      case apply 'parse_ObjectClass'/1
		       (Rest) of
		<{Type,Rest2}> when 'true' ->
		    %% Line 1054
		    {{'classdef','false',L1,ObjClName,Type},Rest2}
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1055
	  <Tokens> when 'true' ->
	      let <_cor5> =
		  %% Line 1056
		  call 'erlang':'hd'
		      (Tokens)
	      in  let <_cor6> =
		      %% Line 1056
		      apply 'get_line'/1
			  (_cor5)
		  in  let <_cor4> =
			  %% Line 1056
			  call 'erlang':'get'
			      ('asn1_module')
		      in  let <_cor2> =
			      %% Line 1057
			      call 'erlang':'hd'
				  (Tokens)
			  in  let <_cor3> =
				  %% Line 1057
				  apply 'get_token'/1
				      (_cor2)
			      in  %% Line 1056
				  call 'erlang':'throw'
				      ({'asn1_assignment_error',{_cor6,_cor4,%% Line 1057
									     ['got'|[_cor3|['expected'|['typereference ::=']]]]}})
	end
'parse_ObjectClass'/1 =
    %% Line 1060
    fun (_cor0) ->
	let <Flist> =
	    %% Line 1061
	    [( 'parse_DefinedObjectClass'/1
	       -| [{'id',{0,0,'-parse_ObjectClass/1-fun-0-'}}] )|%% Line 1062
								 [( 'parse_ObjectClassDefn'/1
								    -| [{'id',{0,0,'-parse_ObjectClass/1-fun-1-'}}] )|%% Line 1063
														      [( 'parse_ParameterizedObjectClass'/1
															 -| [{'id',{0,0,'-parse_ObjectClass/1-fun-2-'}}] )|[]]]]
	in  let <_cor2> =
		catch
		    %% Line 1064
		    apply 'parse_or'/2
			(_cor0, Flist)
	    in  %% Line 1064
		case _cor2 of
		  %% Line 1065
		  <{'EXIT',Reason}> when 'true' ->
		      %% Line 1066
		      call 'erlang':'exit'
			  (Reason)
		  %% Line 1067
		  <{'asn1_error',Reason2}> when 'true' ->
		      %% Line 1068
		      call 'erlang':'throw'
			  ({'asn1_error',Reason2})
		  %% Line 1069
		  <Result> when 'true' ->
		      %% Line 1070
		      Result
		end
'parse_ObjectClassDefn'/1 =
    %% Line 1073
    fun (_cor0) ->
	case _cor0 of
	  <[{'CLASS',_cor9}|[{'{',_cor10}|Rest]]> when 'true' ->
	      %% Line 1074
	      case apply 'parse_FieldSpec'/1
		       (Rest) of
		<{Type,Rest2}> when 'true' ->
		    %% Line 1075
		    case apply 'parse_WithSyntaxSpec'/1
			     (Rest2) of
		      <{WithSyntaxSpec,Rest3}> when 'true' ->
			  %% Line 1076
			  {{'objectclass',Type,WithSyntaxSpec},Rest3}
		      ( <_cor2> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor2})
			-| ['compiler_generated'] )
		    end
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1077
	  <Tokens> when 'true' ->
	      let <_cor6> =
		  %% Line 1078
		  call 'erlang':'hd'
		      (Tokens)
	      in  let <_cor7> =
		      %% Line 1078
		      apply 'get_line'/1
			  (_cor6)
		  in  let <_cor5> =
			  %% Line 1078
			  call 'erlang':'get'
			      ('asn1_module')
		      in  let <_cor3> =
			      %% Line 1079
			      call 'erlang':'hd'
				  (Tokens)
			  in  let <_cor4> =
				  %% Line 1079
				  apply 'get_token'/1
				      (_cor3)
			      in  %% Line 1078
				  call 'erlang':'throw'
				      ({'asn1_error',{_cor7,_cor5,%% Line 1079
								  ['got'|[_cor4|['expected'|['CLASS {']]]]}})
	end
'parse_FieldSpec'/1 =
    %% Line 1081
    fun (_cor0) ->
	%% Line 1082
	apply 'parse_FieldSpec'/2
	    (_cor0, [])
'parse_FieldSpec'/2 =
    %% Line 1084
    fun (_cor1,_cor0) ->
	let <Flist> =
	    %% Line 1085
	    [( 'parse_FixedTypeValueFieldSpec'/1
	       -| [{'id',{0,0,'-parse_FieldSpec/2-fun-0-'}}] )|%% Line 1086
							       [( 'parse_VariableTypeValueFieldSpec'/1
								  -| [{'id',{0,0,'-parse_FieldSpec/2-fun-1-'}}] )|%% Line 1087
														  [( 'parse_ObjectFieldSpec'/1
														     -| [{'id',{0,0,'-parse_FieldSpec/2-fun-2-'}}] )|%% Line 1088
																				     [( 'parse_FixedTypeValueSetFieldSpec'/1
																					-| [{'id',{0,0,'-parse_FieldSpec/2-fun-3-'}}] )|%% Line 1089
																											[( 'parse_VariableTypeValueSetFieldSpec'/1
																											   -| [{'id',{0,0,'-parse_FieldSpec/2-fun-4-'}}] )|%% Line 1090
																																	   [( 'parse_TypeFieldSpec'/1
																																	      -| [{'id',{0,0,'-parse_FieldSpec/2-fun-5-'}}] )|%% Line 1091
																																							      [( 'parse_ObjectSetFieldSpec'/1
																																								 -| [{'id',{0,0,'-parse_FieldSpec/2-fun-6-'}}] )|[]]]]]]]]
	in  let <_cor3> =
		catch
		    %% Line 1092
		    apply 'parse_or'/2
			(_cor1, Flist)
	    in  %% Line 1092
		case _cor3 of
		  %% Line 1093
		  <{'EXIT',Reason}> when 'true' ->
		      %% Line 1094
		      call 'erlang':'exit'
			  (Reason)
		  %% Line 1095
		  <AsnErr = {'asn1_error',_cor11}> when 'true' ->
		      %% Line 1096
		      call 'erlang':'throw'
			  (AsnErr)
		  %% Line 1097
		  <{Type,[{'}',_cor12}|Rest]}> when 'true' ->
		      let <_cor4> =
			  %% Line 1098
			  call 'lists':'reverse'
			      ([Type|_cor0])
		      in  %% Line 1098
			  {_cor4,Rest}
		  %% Line 1099
		  <{Type,[{',',_cor13}|Rest2]}> when 'true' ->
		      %% Line 1100
		      apply 'parse_FieldSpec'/2
			  (Rest2, [Type|_cor0])
		  %% Line 1101
		  <{_cor14,[H|_X_T]}> when 'true' ->
		      let <_cor7> =
			  %% Line 1102
			  apply 'get_line'/1
			      (H)
		      in  let <_cor6> =
			      %% Line 1102
			      call 'erlang':'get'
				  ('asn1_module')
			  in  let <_cor5> =
				  %% Line 1103
				  apply 'get_token'/1
				      (H)
			      in  %% Line 1102
				  call 'erlang':'throw'
				      ({'asn1_error',{_cor7,_cor6,%% Line 1103
								  ['got'|[_cor5|['expected'|['}']]]]}})
		  ( <_cor8> when 'true' ->
			primop 'match_fail'
			    ({'case_clause',_cor8})
		    -| ['compiler_generated'] )
		end
'parse_PrimitiveFieldName'/1 =
    %% Line 1106
    fun (_cor0) ->
	case _cor0 of
	  <[{'typefieldreference',_cor7,FieldName}|Rest]> when 'true' ->
	      %% Line 1107
	      {{'typefieldreference',FieldName},Rest}
	  %% Line 1108
	  <[{'valuefieldreference',_cor8,FieldName}|Rest]> when 'true' ->
	      %% Line 1109
	      {{'valuefieldreference',FieldName},Rest}
	  %% Line 1110
	  <Tokens> when 'true' ->
	      let <_cor4> =
		  %% Line 1111
		  call 'erlang':'hd'
		      (Tokens)
	      in  let <_cor5> =
		      %% Line 1111
		      apply 'get_line'/1
			  (_cor4)
		  in  let <_cor3> =
			  %% Line 1111
			  call 'erlang':'get'
			      ('asn1_module')
		      in  let <_cor1> =
			      %% Line 1112
			      call 'erlang':'hd'
				  (Tokens)
			  in  let <_cor2> =
				  %% Line 1112
				  apply 'get_token'/1
				      (_cor1)
			      in  %% Line 1111
				  call 'erlang':'throw'
				      ({'asn1_error',{_cor5,_cor3,%% Line 1112
								  ['got'|[_cor2|['expected'|[['typefieldreference'|['valuefieldreference']]]]]]}})
	end
'parse_FieldName'/1 =
    %% Line 1115
    fun (_cor0) ->
	%% Line 1116
	case apply 'parse_PrimitiveFieldName'/1
		 (_cor0) of
	  <{Field,Rest}> when 'true' ->
	      %% Line 1117
	      apply 'parse_FieldName'/2
		  (Rest, [Field|[]])
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'parse_FieldName'/2 =
    %% Line 1119
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{'.',_cor7}|Rest],Acc> when 'true' ->
	      let <_cor2> =
		  catch
		      %% Line 1120
		      apply 'parse_PrimitiveFieldName'/1
			  (Rest)
	      in  %% Line 1120
		  case _cor2 of
		    %% Line 1121
		    <{'EXIT',Reason}> when 'true' ->
			%% Line 1122
			call 'erlang':'exit'
			    (Reason)
		    %% Line 1123
		    <AsnErr = {'asn1_error',_cor8}> when 'true' ->
			%% Line 1124
			call 'erlang':'throw'
			    (AsnErr)
		    %% Line 1125
		    <{FieldName,Rest2}> when 'true' ->
			%% Line 1126
			apply 'parse_FieldName'/2
			    (Rest2, [FieldName|Acc])
		    ( <_cor3> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor3})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1128
	  <Tokens,Acc> when 'true' ->
	      let <_cor4> =
		  %% Line 1129
		  call 'lists':'reverse'
		      (Acc)
	      in  %% Line 1129
		  {_cor4,Tokens}
	end
'parse_FixedTypeValueFieldSpec'/1 =
    %% Line 1131
    fun (_cor0) ->
	case _cor0 of
	  <[{'valuefieldreference',L1,VFieldName}|Rest]> when 'true' ->
	      %% Line 1132
	      case apply 'parse_Type'/1
		       (Rest) of
		<{Type,Rest2}> when 'true' ->
		    let <Unique,Rest3> =
			%% Line 1134
			case Rest2 of
			  %% Line 1135
			  <[{'UNIQUE',_cor22}|Rest4]> when 'true' ->
			      %% Line 1136
			      <'UNIQUE',Rest4>
			  %% Line 1137
			  <_cor23> when 'true' ->
			      %% Line 1138
			      <'undefined',Rest2>
			end
		    in  %% Line 1140
			case apply 'parse_ValueOptionalitySpec'/1
				 (Rest3) of
			  <{OptionalitySpec,Rest5}> when 'true' ->
			      %% Line 1141
			      case <Unique,Rest5> of
				%% Line 1142
				<'UNIQUE',[{Del,_cor24}|_cor25]>
				    when let <_cor6> =
					  call 'erlang':'=:='
					      (Del, ',')
				      in  let <_cor7> =
					      call 'erlang':'=:='
						  (Del, '}')
					  in  call 'erlang':'or'
						  (_cor6, _cor7) ->
				    %% Line 1143
				    case OptionalitySpec of
				      %% Line 1144
				      <{'DEFAULT',_cor26}> when 'true' ->
					  let <_cor8> =
					      %% Line 1146
					      call 'erlang':'get'
						  ('asn1_module')
					  in  %% Line 1145
					      call 'erlang':'throw'
						  ({'asn1_error',%% Line 1146
								 {L1,_cor8,%% Line 1147
									   ['UNIQUE and DEFAULT in same field'|[VFieldName|[]]]}})
				      %% Line 1148
				      <_cor27> when 'true' ->
					  %% Line 1149
					  {{'fixedtypevaluefield',VFieldName,Type,Unique,OptionalitySpec},Rest5}
				    end
				%% Line 1151
				<_cor28,[{Del,_cor29}|_cor30]>
				    when let <_cor10> =
					  call 'erlang':'=:='
					      (Del, ',')
				      in  let <_cor11> =
					      call 'erlang':'=:='
						  (Del, '}')
					  in  call 'erlang':'or'
						  (_cor10, _cor11) ->
				    %% Line 1152
				    {{'object_or_fixedtypevalue_field',VFieldName,Type,Unique,OptionalitySpec},Rest5}
				%% Line 1153
				<_fol85,_fol86> when 'true' ->
				    let <_cor14> =
					%% Line 1154
					call 'erlang':'get'
					    ('asn1_module')
				    in  let <_cor12> =
					    %% Line 1155
					    call 'erlang':'hd'
						(Rest5)
					in  let <_cor13> =
						%% Line 1155
						apply 'get_token'/1
						    (_cor12)
					    in  %% Line 1154
						call 'erlang':'throw'
						    ({'asn1_error',{L1,_cor14,%% Line 1155
									      ['got'|[_cor13|['expected'|[[','|['}']]]]]]}})
			      end
			  ( <_cor5> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor5})
			    -| ['compiler_generated'] )
			end
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1157
	  <Tokens> when 'true' ->
	      let <_cor19> =
		  %% Line 1158
		  call 'erlang':'hd'
		      (Tokens)
	      in  let <_cor20> =
		      %% Line 1158
		      apply 'get_line'/1
			  (_cor19)
		  in  let <_cor18> =
			  %% Line 1158
			  call 'erlang':'get'
			      ('asn1_module')
		      in  let <_cor16> =
			      %% Line 1159
			      call 'erlang':'hd'
				  (Tokens)
			  in  let <_cor17> =
				  %% Line 1159
				  apply 'get_token'/1
				      (_cor16)
			      in  %% Line 1158
				  call 'erlang':'throw'
				      ({'asn1_error',{_cor20,_cor18,%% Line 1159
								    ['got'|[_cor17|['expected'|['valuefieldreference']]]]}})
	end
'parse_VariableTypeValueFieldSpec'/1 =
    %% Line 1161
    fun (_cor0) ->
	case _cor0 of
	  <[{'valuefieldreference',L,VFieldName}|Rest]> when 'true' ->
	      %% Line 1162
	      case apply 'parse_FieldName'/1
		       (Rest) of
		<{FieldRef,Rest2}> when 'true' ->
		    %% Line 1163
		    case apply 'parse_ValueOptionalitySpec'/1
			     (Rest2) of
		      <{OptionalitySpec,Rest3}> when 'true' ->
			  %% Line 1164
			  case Rest3 of
			    %% Line 1165
			    <[{Del,_cor15}|_cor16]>
				when let <_cor3> =
				      call 'erlang':'=:='
					  (Del, ',')
				  in  let <_cor4> =
					  call 'erlang':'=:='
					      (Del, '}')
				      in  call 'erlang':'or'
					      (_cor3, _cor4) ->
				%% Line 1166
				{{'variabletypevaluefield',VFieldName,FieldRef,OptionalitySpec},Rest3}
			    %% Line 1167
			    <_cor17> when 'true' ->
				let <_cor7> =
				    %% Line 1168
				    call 'erlang':'get'
					('asn1_module')
				in  let <_cor5> =
					%% Line 1169
					call 'erlang':'hd'
					    (Rest3)
				    in  let <_cor6> =
					    %% Line 1169
					    apply 'get_token'/1
						(_cor5)
					in  %% Line 1168
					    call 'erlang':'throw'
						({'asn1_error',{L,_cor7,%% Line 1169
									['got'|[_cor6|['expected'|[[','|['}']]]]]]}})
			  end
		      ( <_cor2> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor2})
			-| ['compiler_generated'] )
		    end
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1171
	  <Tokens> when 'true' ->
	      let <_cor12> =
		  %% Line 1172
		  call 'erlang':'hd'
		      (Tokens)
	      in  let <_cor13> =
		      %% Line 1172
		      apply 'get_line'/1
			  (_cor12)
		  in  let <_cor11> =
			  %% Line 1172
			  call 'erlang':'get'
			      ('asn1_module')
		      in  let <_cor9> =
			      %% Line 1173
			      call 'erlang':'hd'
				  (Tokens)
			  in  let <_cor10> =
				  %% Line 1173
				  apply 'get_token'/1
				      (_cor9)
			      in  %% Line 1172
				  call 'erlang':'throw'
				      ({'asn1_error',{_cor13,_cor11,%% Line 1173
								    ['got'|[_cor10|['expected'|['valuefieldreference']]]]}})
	end
'parse_ObjectFieldSpec'/1 =
    %% Line 1175
    fun (_cor0) ->
	case _cor0 of
	  <[{'valuefieldreference',L,VFieldName}|Rest]> when 'true' ->
	      %% Line 1176
	      case apply 'parse_DefinedObjectClass'/1
		       (Rest) of
		<{Class,Rest2}> when 'true' ->
		    %% Line 1177
		    case apply 'parse_ObjectOptionalitySpec'/1
			     (Rest2) of
		      <{OptionalitySpec,Rest3}> when 'true' ->
			  %% Line 1178
			  case Rest3 of
			    %% Line 1179
			    <[{Del,_cor15}|_cor16]>
				when let <_cor3> =
				      call 'erlang':'=:='
					  (Del, ',')
				  in  let <_cor4> =
					  call 'erlang':'=:='
					      (Del, '}')
				      in  call 'erlang':'or'
					      (_cor3, _cor4) ->
				%% Line 1180
				{{'objectfield',VFieldName,Class,'undefined',OptionalitySpec},Rest3}
			    %% Line 1181
			    <_cor17> when 'true' ->
				let <_cor7> =
				    %% Line 1182
				    call 'erlang':'get'
					('asn1_module')
				in  let <_cor5> =
					%% Line 1183
					call 'erlang':'hd'
					    (Rest3)
				    in  let <_cor6> =
					    %% Line 1183
					    apply 'get_token'/1
						(_cor5)
					in  %% Line 1182
					    call 'erlang':'throw'
						({'asn1_error',{L,_cor7,%% Line 1183
									['got'|[_cor6|['expected'|[[','|['}']]]]]]}})
			  end
		      ( <_cor2> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor2})
			-| ['compiler_generated'] )
		    end
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1185
	  <Tokens> when 'true' ->
	      let <_cor12> =
		  %% Line 1186
		  call 'erlang':'hd'
		      (Tokens)
	      in  let <_cor13> =
		      %% Line 1186
		      apply 'get_line'/1
			  (_cor12)
		  in  let <_cor11> =
			  %% Line 1186
			  call 'erlang':'get'
			      ('asn1_module')
		      in  let <_cor9> =
			      %% Line 1187
			      call 'erlang':'hd'
				  (Tokens)
			  in  let <_cor10> =
				  %% Line 1187
				  apply 'get_token'/1
				      (_cor9)
			      in  %% Line 1186
				  call 'erlang':'throw'
				      ({'asn1_error',{_cor13,_cor11,%% Line 1187
								    ['got'|[_cor10|['expected'|['valuefieldreference']]]]}})
	end
'parse_TypeFieldSpec'/1 =
    %% Line 1189
    fun (_cor0) ->
	case _cor0 of
	  <[{'typefieldreference',L,TFieldName}|Rest]> when 'true' ->
	      %% Line 1190
	      case apply 'parse_TypeOptionalitySpec'/1
		       (Rest) of
		<{OptionalitySpec,Rest2}> when 'true' ->
		    %% Line 1191
		    case Rest2 of
		      %% Line 1192
		      <[{Del,_cor14}|_cor15]>
			  when let <_cor2> =
				call 'erlang':'=:='
				    (Del, ',')
			    in  let <_cor3> =
				    call 'erlang':'=:='
					(Del, '}')
				in  call 'erlang':'or'
					(_cor2, _cor3) ->
			  %% Line 1193
			  {{'typefield',TFieldName,OptionalitySpec},Rest2}
		      %% Line 1194
		      <_cor16> when 'true' ->
			  let <_cor6> =
			      %% Line 1195
			      call 'erlang':'get'
				  ('asn1_module')
			  in  let <_cor4> =
				  %% Line 1196
				  call 'erlang':'hd'
				      (Rest2)
			      in  let <_cor5> =
				      %% Line 1196
				      apply 'get_token'/1
					  (_cor4)
				  in  %% Line 1195
				      call 'erlang':'throw'
					  ({'asn1_error',{L,_cor6,%% Line 1196
								  ['got'|[_cor5|['expected'|[[','|['}']]]]]]}})
		    end
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1198
	  <Tokens> when 'true' ->
	      let <_cor11> =
		  %% Line 1199
		  call 'erlang':'hd'
		      (Tokens)
	      in  let <_cor12> =
		      %% Line 1199
		      apply 'get_line'/1
			  (_cor11)
		  in  let <_cor10> =
			  %% Line 1199
			  call 'erlang':'get'
			      ('asn1_module')
		      in  let <_cor8> =
			      %% Line 1200
			      call 'erlang':'hd'
				  (Tokens)
			  in  let <_cor9> =
				  %% Line 1200
				  apply 'get_token'/1
				      (_cor8)
			      in  %% Line 1199
				  call 'erlang':'throw'
				      ({'asn1_error',{_cor12,_cor10,%% Line 1200
								    ['got'|[_cor9|['expected'|['typefieldreference']]]]}})
	end
'parse_FixedTypeValueSetFieldSpec'/1 =
    %% Line 1202
    fun (_cor0) ->
	case _cor0 of
	  <[{'typefieldreference',L,TFieldName}|Rest]> when 'true' ->
	      %% Line 1203
	      case apply 'parse_Type'/1
		       (Rest) of
		<{Type,Rest2}> when 'true' ->
		    %% Line 1204
		    case apply 'parse_ValueSetOptionalitySpec'/1
			     (Rest2) of
		      <{OptionalitySpec,Rest3}> when 'true' ->
			  %% Line 1205
			  case Rest3 of
			    %% Line 1206
			    <[{Del,_cor15}|_cor16]>
				when let <_cor3> =
				      call 'erlang':'=:='
					  (Del, ',')
				  in  let <_cor4> =
					  call 'erlang':'=:='
					      (Del, '}')
				      in  call 'erlang':'or'
					      (_cor3, _cor4) ->
				%% Line 1207
				{{'objectset_or_fixedtypevalueset_field',TFieldName,Type,%% Line 1208
											 OptionalitySpec},%% Line 1208
													  Rest3}
			    %% Line 1209
			    <_cor17> when 'true' ->
				let <_cor7> =
				    %% Line 1210
				    call 'erlang':'get'
					('asn1_module')
				in  let <_cor5> =
					%% Line 1211
					call 'erlang':'hd'
					    (Rest3)
				    in  let <_cor6> =
					    %% Line 1211
					    apply 'get_token'/1
						(_cor5)
					in  %% Line 1210
					    call 'erlang':'throw'
						({'asn1_error',{L,_cor7,%% Line 1211
									['got'|[_cor6|['expected'|[[','|['}']]]]]]}})
			  end
		      ( <_cor2> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor2})
			-| ['compiler_generated'] )
		    end
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1213
	  <Tokens> when 'true' ->
	      let <_cor12> =
		  %% Line 1214
		  call 'erlang':'hd'
		      (Tokens)
	      in  let <_cor13> =
		      %% Line 1214
		      apply 'get_line'/1
			  (_cor12)
		  in  let <_cor11> =
			  %% Line 1214
			  call 'erlang':'get'
			      ('asn1_module')
		      in  let <_cor9> =
			      %% Line 1215
			      call 'erlang':'hd'
				  (Tokens)
			  in  let <_cor10> =
				  %% Line 1215
				  apply 'get_token'/1
				      (_cor9)
			      in  %% Line 1214
				  call 'erlang':'throw'
				      ({'asn1_error',{_cor13,_cor11,%% Line 1215
								    ['got'|[_cor10|['expected'|['typefieldreference']]]]}})
	end
'parse_VariableTypeValueSetFieldSpec'/1 =
    %% Line 1217
    fun (_cor0) ->
	case _cor0 of
	  <[{'typefieldreference',L,TFieldName}|Rest]> when 'true' ->
	      %% Line 1218
	      case apply 'parse_FieldName'/1
		       (Rest) of
		<{FieldRef,Rest2}> when 'true' ->
		    %% Line 1219
		    case apply 'parse_ValueSetOptionalitySpec'/1
			     (Rest2) of
		      <{OptionalitySpec,Rest3}> when 'true' ->
			  %% Line 1220
			  case Rest3 of
			    %% Line 1221
			    <[{Del,_cor15}|_cor16]>
				when let <_cor3> =
				      call 'erlang':'=:='
					  (Del, ',')
				  in  let <_cor4> =
					  call 'erlang':'=:='
					      (Del, '}')
				      in  call 'erlang':'or'
					      (_cor3, _cor4) ->
				%% Line 1222
				{{'variabletypevaluesetfield',TFieldName,FieldRef,OptionalitySpec},Rest3}
			    %% Line 1223
			    <_cor17> when 'true' ->
				let <_cor7> =
				    %% Line 1224
				    call 'erlang':'get'
					('asn1_module')
				in  let <_cor5> =
					%% Line 1225
					call 'erlang':'hd'
					    (Rest3)
				    in  let <_cor6> =
					    %% Line 1225
					    apply 'get_token'/1
						(_cor5)
					in  %% Line 1224
					    call 'erlang':'throw'
						({'asn1_error',{L,_cor7,%% Line 1225
									['got'|[_cor6|['expected'|[[','|['}']]]]]]}})
			  end
		      ( <_cor2> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor2})
			-| ['compiler_generated'] )
		    end
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1227
	  <Tokens> when 'true' ->
	      let <_cor12> =
		  %% Line 1228
		  call 'erlang':'hd'
		      (Tokens)
	      in  let <_cor13> =
		      %% Line 1228
		      apply 'get_line'/1
			  (_cor12)
		  in  let <_cor11> =
			  %% Line 1228
			  call 'erlang':'get'
			      ('asn1_module')
		      in  let <_cor9> =
			      %% Line 1229
			      call 'erlang':'hd'
				  (Tokens)
			  in  let <_cor10> =
				  %% Line 1229
				  apply 'get_token'/1
				      (_cor9)
			      in  %% Line 1228
				  call 'erlang':'throw'
				      ({'asn1_error',{_cor13,_cor11,%% Line 1229
								    ['got'|[_cor10|['expected'|['typefieldreference']]]]}})
	end
'parse_ObjectSetFieldSpec'/1 =
    %% Line 1231
    fun (_cor0) ->
	case _cor0 of
	  <[{'typefieldreference',L,TFieldName}|Rest]> when 'true' ->
	      %% Line 1232
	      case apply 'parse_DefinedObjectClass'/1
		       (Rest) of
		<{Class,Rest2}> when 'true' ->
		    %% Line 1233
		    case apply 'parse_ObjectSetOptionalitySpec'/1
			     (Rest2) of
		      <{OptionalitySpec,Rest3}> when 'true' ->
			  %% Line 1234
			  case Rest3 of
			    %% Line 1235
			    <[{Del,_cor15}|_cor16]>
				when let <_cor3> =
				      call 'erlang':'=:='
					  (Del, ',')
				  in  let <_cor4> =
					  call 'erlang':'=:='
					      (Del, '}')
				      in  call 'erlang':'or'
					      (_cor3, _cor4) ->
				%% Line 1236
				{{'objectsetfield',TFieldName,Class,OptionalitySpec},Rest3}
			    %% Line 1237
			    <_cor17> when 'true' ->
				let <_cor7> =
				    %% Line 1238
				    call 'erlang':'get'
					('asn1_module')
				in  let <_cor5> =
					%% Line 1239
					call 'erlang':'hd'
					    (Rest3)
				    in  let <_cor6> =
					    %% Line 1239
					    apply 'get_token'/1
						(_cor5)
					in  %% Line 1238
					    call 'erlang':'throw'
						({'asn1_error',{L,_cor7,%% Line 1239
									['got'|[_cor6|['expected'|[[','|['}']]]]]]}})
			  end
		      ( <_cor2> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor2})
			-| ['compiler_generated'] )
		    end
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1241
	  <Tokens> when 'true' ->
	      let <_cor12> =
		  %% Line 1242
		  call 'erlang':'hd'
		      (Tokens)
	      in  let <_cor13> =
		      %% Line 1242
		      apply 'get_line'/1
			  (_cor12)
		  in  let <_cor11> =
			  %% Line 1242
			  call 'erlang':'get'
			      ('asn1_module')
		      in  let <_cor9> =
			      %% Line 1243
			      call 'erlang':'hd'
				  (Tokens)
			  in  let <_cor10> =
				  %% Line 1243
				  apply 'get_token'/1
				      (_cor9)
			      in  %% Line 1242
				  call 'erlang':'throw'
				      ({'asn1_error',{_cor13,_cor11,%% Line 1243
								    ['got'|[_cor10|['expected'|['typefieldreference']]]]}})
	end
'parse_ValueOptionalitySpec'/1 =
    %% Line 1245
    fun (_cor0) ->
	%% Line 1246
	case _cor0 of
	  %% Line 1247
	  <[{'OPTIONAL',_cor4}|Rest]> when 'true' ->
	      {'OPTIONAL',Rest}
	  %% Line 1248
	  <[{'DEFAULT',_cor5}|Rest]> when 'true' ->
	      %% Line 1249
	      case apply 'parse_Value'/1
		       (Rest) of
		<{Value,Rest2}> when 'true' ->
		    %% Line 1250
		    {{'DEFAULT',Value},Rest2}
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1251
	  <_cor6> when 'true' ->
	      {'MANDATORY',_cor0}
	end
'parse_ObjectOptionalitySpec'/1 =
    %% Line 1254
    fun (_cor0) ->
	%% Line 1255
	case _cor0 of
	  %% Line 1256
	  <[{'OPTIONAL',_cor4}|Rest]> when 'true' ->
	      {'OPTIONAL',Rest}
	  %% Line 1257
	  <[{'DEFAULT',_cor5}|Rest]> when 'true' ->
	      %% Line 1258
	      case apply 'parse_Object'/1
		       (Rest) of
		<{Object,Rest2}> when 'true' ->
		    %% Line 1259
		    {{'DEFAULT',Object},Rest2}
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1260
	  <_cor6> when 'true' ->
	      {'MANDATORY',_cor0}
	end
'parse_TypeOptionalitySpec'/1 =
    %% Line 1263
    fun (_cor0) ->
	%% Line 1264
	case _cor0 of
	  %% Line 1265
	  <[{'OPTIONAL',_cor4}|Rest]> when 'true' ->
	      {'OPTIONAL',Rest}
	  %% Line 1266
	  <[{'DEFAULT',_cor5}|Rest]> when 'true' ->
	      %% Line 1267
	      case apply 'parse_Type'/1
		       (Rest) of
		<{Type,Rest2}> when 'true' ->
		    %% Line 1268
		    {{'DEFAULT',Type},Rest2}
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1269
	  <_cor6> when 'true' ->
	      {'MANDATORY',_cor0}
	end
'parse_ValueSetOptionalitySpec'/1 =
    %% Line 1272
    fun (_cor0) ->
	%% Line 1273
	case _cor0 of
	  %% Line 1274
	  <[{'OPTIONAL',_cor4}|Rest]> when 'true' ->
	      {'OPTIONAL',Rest}
	  %% Line 1275
	  <[{'DEFAULT',_cor5}|Rest]> when 'true' ->
	      %% Line 1276
	      case apply 'parse_ValueSet'/1
		       (Rest) of
		<{ValueSet,Rest2}> when 'true' ->
		    %% Line 1277
		    {{'DEFAULT',ValueSet},Rest2}
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1278
	  <_cor6> when 'true' ->
	      {'MANDATORY',_cor0}
	end
'parse_ObjectSetOptionalitySpec'/1 =
    %% Line 1281
    fun (_cor0) ->
	%% Line 1282
	case _cor0 of
	  %% Line 1283
	  <[{'OPTIONAL',_cor4}|Rest]> when 'true' ->
	      {'OPTIONAL',Rest}
	  %% Line 1284
	  <[{'DEFAULT',_cor5}|Rest]> when 'true' ->
	      %% Line 1285
	      case apply 'parse_ObjectSet'/1
		       (Rest) of
		<{ObjectSet,Rest2}> when 'true' ->
		    %% Line 1286
		    {{'DEFAULT',ObjectSet},Rest2}
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1287
	  <_cor6> when 'true' ->
	      {'MANDATORY',_cor0}
	end
'parse_WithSyntaxSpec'/1 =
    %% Line 1290
    fun (_cor0) ->
	case _cor0 of
	  <[{'WITH',_cor3}|[{'SYNTAX',_cor4}|Rest]]> when 'true' ->
	      %% Line 1291
	      case apply 'parse_SyntaxList'/1
		       (Rest) of
		<{SyntaxList,Rest2}> when 'true' ->
		    %% Line 1292
		    {{'WITH SYNTAX',SyntaxList},Rest2}
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1293
	  <Tokens> when 'true' ->
	      %% Line 1294
	      {[],Tokens}
	end
'parse_SyntaxList'/1 =
    %% Line 1296
    fun (_cor0) ->
	case _cor0 of
	  <[{'{',_cor7}|[{'}',_cor8}|Rest]]> when 'true' ->
	      %% Line 1297
	      {[],Rest}
	  %% Line 1298
	  <[{'{',_cor9}|Rest]> when 'true' ->
	      %% Line 1299
	      apply 'parse_SyntaxList'/2
		  (Rest, [])
	  %% Line 1300
	  <Tokens> when 'true' ->
	      let <_cor4> =
		  %% Line 1301
		  call 'erlang':'hd'
		      (Tokens)
	      in  let <_cor5> =
		      %% Line 1301
		      apply 'get_line'/1
			  (_cor4)
		  in  let <_cor3> =
			  %% Line 1301
			  call 'erlang':'get'
			      ('asn1_module')
		      in  let <_cor1> =
			      %% Line 1302
			      call 'erlang':'hd'
				  (Tokens)
			  in  let <_cor2> =
				  %% Line 1302
				  apply 'get_token'/1
				      (_cor1)
			      in  %% Line 1301
				  call 'erlang':'throw'
				      ({'asn1_error',{_cor5,_cor3,%% Line 1302
								  ['got'|[_cor2|['expected'|[['{}'|['{']]]]]]}})
	end
'parse_SyntaxList'/2 =
    %% Line 1304
    fun (_cor1,_cor0) ->
	%% Line 1305
	case apply 'parse_TokenOrGroupSpec'/1
		 (_cor1) of
	  <{SyntaxList,Rest}> when 'true' ->
	      %% Line 1306
	      case Rest of
		%% Line 1307
		<[{'}',_cor7}|Rest2]> when 'true' ->
		    let <_cor3> =
			%% Line 1308
			call 'lists':'reverse'
			    ([SyntaxList|_cor0])
		    in  %% Line 1308
			{_cor3,Rest2}
		%% Line 1309
		<_cor8> when 'true' ->
		    %% Line 1310
		    apply 'parse_SyntaxList'/2
			(Rest, [SyntaxList|_cor0])
	      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'parse_TokenOrGroupSpec'/1 =
    %% Line 1313
    fun (_cor0) ->
	let <Flist> =
	    %% Line 1314
	    [( 'parse_RequiredToken'/1
	       -| [{'id',{0,0,'-parse_TokenOrGroupSpec/1-fun-0-'}}] )|%% Line 1315
								      [( 'parse_OptionalGroup'/1
									 -| [{'id',{0,0,'-parse_TokenOrGroupSpec/1-fun-1-'}}] )|[]]]
	in  let <_cor2> =
		catch
		    %% Line 1316
		    apply 'parse_or'/2
			(_cor0, Flist)
	    in  %% Line 1316
		case _cor2 of
		  %% Line 1317
		  <{'EXIT',Reason}> when 'true' ->
		      %% Line 1318
		      call 'erlang':'exit'
			  (Reason)
		  %% Line 1319
		  <AsnErr = {'asn1_error',_cor5}> when 'true' ->
		      %% Line 1320
		      call 'erlang':'throw'
			  (AsnErr)
		  %% Line 1321
		  <Result> when 'true' ->
		      %% Line 1322
		      Result
		end
'parse_RequiredToken'/1 =
    %% Line 1325
    fun (_cor0) ->
	case _cor0 of
	  <[{'typereference',L1,WordName}|Rest]> when 'true' ->
	      %% Line 1326
	      case apply 'is_word'/1
		       (WordName) of
		%% Line 1327
		<'false'> when 'true' ->
		    let <_cor1> =
			%% Line 1328
			call 'erlang':'get'
			    ('asn1_module')
		    in  %% Line 1328
			call 'erlang':'throw'
			    ({'asn1_error',{L1,_cor1,%% Line 1329
						     ['got'|[WordName|['expected'|['a'|['Word']]]]]}})
		%% Line 1330
		<'true'> when 'true' ->
		    %% Line 1331
		    {WordName,Rest}
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1333
	  <[{',',L1}|Rest]> when 'true' ->
	      %% Line 1334
	      {{',',L1},Rest}
	  %% Line 1335
	  <[{WordName,L1}|Rest]> when 'true' ->
	      %% Line 1336
	      case apply 'is_word'/1
		       (WordName) of
		%% Line 1337
		<'false'> when 'true' ->
		    let <_cor3> =
			%% Line 1338
			call 'erlang':'get'
			    ('asn1_module')
		    in  %% Line 1338
			call 'erlang':'throw'
			    ({'asn1_error',{L1,_cor3,%% Line 1339
						     ['got'|[WordName|['expected'|['a'|['Word']]]]]}})
		%% Line 1340
		<'true'> when 'true' ->
		    %% Line 1341
		    {WordName,Rest}
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1343
	  <Tokens> when 'true' ->
	      %% Line 1344
	      apply 'parse_PrimitiveFieldName'/1
		  (Tokens)
	end
'parse_OptionalGroup'/1 =
    %% Line 1346
    fun (_cor0) ->
	case _cor0 of
	  <[{'[',_cor4}|Rest]> when 'true' ->
	      %% Line 1347
	      case apply 'parse_TokenOrGroupSpec'/1
		       (Rest) of
		<{Spec,Rest2}> when 'true' ->
		    %% Line 1348
		    case apply 'parse_OptionalGroup'/2
			     (Rest2, [Spec|[]]) of
		      <{SpecList,Rest3}> when 'true' ->
			  %% Line 1349
			  {SpecList,Rest3}
		      ( <_cor2> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor2})
			-| ['compiler_generated'] )
		    end
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'parse_OptionalGroup',1}}] )
	    -| ['compiler_generated'] )
	end
'parse_OptionalGroup'/2 =
    %% Line 1351
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{']',_cor6}|Rest],Acc> when 'true' ->
	      let <_cor2> =
		  %% Line 1352
		  call 'lists':'reverse'
		      (Acc)
	      in  %% Line 1352
		  {_cor2,Rest}
	  %% Line 1353
	  <Tokens,Acc> when 'true' ->
	      %% Line 1354
	      case apply 'parse_TokenOrGroupSpec'/1
		       (Tokens) of
		<{Spec,Rest}> when 'true' ->
		    %% Line 1355
		    apply 'parse_OptionalGroup'/2
			(Rest, [Spec|Acc])
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	end
'parse_DefinedObject'/1 =
    %% Line 1357
    fun (_cor0) ->
	case _cor0 of
	  <[Id = {'identifier',_cor8,_X_ObjName}|Rest]> when 'true' ->
	      let <_cor1> =
		  %% Line 1358
		  apply 'identifier2Extvalueref'/1
		      (Id)
	      in  %% Line 1358
		  {{'object',_cor1},Rest}
	  %% Line 1359
	  <[{'typereference',L1,ModName}|[{'.',_cor9}|[{'identifier',_cor10,ObjName}|Rest]]]> when 'true' ->
	      %% Line 1360
	      {{'object',{'Externaltypereference',L1,ModName,ObjName}},Rest}
	  %% Line 1361
	  <Tokens> when 'true' ->
	      let <_cor5> =
		  %% Line 1362
		  call 'erlang':'hd'
		      (Tokens)
	      in  let <_cor6> =
		      %% Line 1362
		      apply 'get_line'/1
			  (_cor5)
		  in  let <_cor4> =
			  %% Line 1362
			  call 'erlang':'get'
			      ('asn1_module')
		      in  let <_cor2> =
			      %% Line 1363
			      call 'erlang':'hd'
				  (Tokens)
			  in  let <_cor3> =
				  %% Line 1363
				  apply 'get_token'/1
				      (_cor2)
			      in  %% Line 1362
				  call 'erlang':'throw'
				      ({'asn1_error',{_cor6,_cor4,%% Line 1363
								  ['got'|[_cor3|['expected'|[['identifier'|['typereference.identifier']]]]]]}})
	end
'parse_ObjectAssignment'/1 =
    %% Line 1366
    fun (_cor0) ->
	case _cor0 of
	  <[{'identifier',L1,ObjName}|Rest]> when 'true' ->
	      %% Line 1367
	      case apply 'parse_DefinedObjectClass'/1
		       (Rest) of
		<{Class,Rest2}> when 'true' ->
		    %% Line 1368
		    case Rest2 of
		      %% Line 1369
		      <[{'::=',_cor14}|Rest3]> when 'true' ->
			  %% Line 1370
			  case apply 'parse_Object'/1
				   (Rest3) of
			    <{Object,Rest4}> when 'true' ->
				%% Line 1371
				{{'typedef','false',L1,ObjName,%% Line 1372
							       {'Object',Class,'true',Object}},%% Line 1372
											       Rest4}
			    ( <_cor2> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor2})
			      -| ['compiler_generated'] )
			  end
		      %% Line 1373
		      <[H|_X_T]> when 'true' ->
			  let <_cor5> =
			      %% Line 1374
			      apply 'get_line'/1
				  (H)
			  in  let <_cor4> =
				  %% Line 1374
				  call 'erlang':'get'
				      ('asn1_module')
			      in  let <_cor3> =
				      %% Line 1375
				      apply 'get_token'/1
					  (H)
				  in  %% Line 1374
				      call 'erlang':'throw'
					  ({'asn1_error',{_cor5,_cor4,%% Line 1375
								      ['got'|[_cor3|['expected'|['::=']]]]}})
		      %% Line 1376
		      <Other> when 'true' ->
			  let <_cor6> =
			      %% Line 1377
			      call 'erlang':'get'
				  ('asn1_module')
			  in  %% Line 1377
			      call 'erlang':'throw'
				  ({'asn1_error',{L1,_cor6,%% Line 1378
							   ['got'|[Other|['expected'|['::=']]]]}})
		    end
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1380
	  <Tokens> when 'true' ->
	      let <_cor11> =
		  %% Line 1381
		  call 'erlang':'hd'
		      (Tokens)
	      in  let <_cor12> =
		      %% Line 1381
		      apply 'get_line'/1
			  (_cor11)
		  in  let <_cor10> =
			  %% Line 1381
			  call 'erlang':'get'
			      ('asn1_module')
		      in  let <_cor8> =
			      %% Line 1382
			      call 'erlang':'hd'
				  (Tokens)
			  in  let <_cor9> =
				  %% Line 1382
				  apply 'get_token'/1
				      (_cor8)
			      in  %% Line 1381
				  call 'erlang':'throw'
				      ({'asn1_assignment_error',{_cor12,_cor10,%% Line 1382
									       ['got'|[_cor9|['expected'|['identifier']]]]}})
	end
'parse_Object'/1 =
    %% Line 1389
    fun (_cor0) ->
	let <Flist> =
	    %% Line 1390
	    [( 'parse_ObjectDefn'/1
	       -| [{'id',{0,0,'-parse_Object/1-fun-0-'}}] )|%% Line 1391
							    [( 'parse_ObjectFromObject'/1
							       -| [{'id',{0,0,'-parse_Object/1-fun-1-'}}] )|%% Line 1392
													    [( 'parse_ParameterizedObject'/1
													       -| [{'id',{0,0,'-parse_Object/1-fun-2-'}}] )|%% Line 1393
																			    [( 'parse_DefinedObject'/1
																			       -| [{'id',{0,0,'-parse_Object/1-fun-3-'}}] )|[]]]]]
	in  let <_cor2> =
		catch
		    %% Line 1394
		    apply 'parse_or'/2
			(_cor0, Flist)
	    in  %% Line 1394
		case _cor2 of
		  %% Line 1395
		  <{'EXIT',Reason}> when 'true' ->
		      %% Line 1396
		      call 'erlang':'exit'
			  (Reason)
		  %% Line 1397
		  <AsnErr = {'asn1_error',_cor5}> when 'true' ->
		      %% Line 1398
		      call 'erlang':'throw'
			  (AsnErr)
		  %% Line 1399
		  <Result> when 'true' ->
		      %% Line 1400
		      Result
		end
'parse_ObjectDefn'/1 =
    %% Line 1403
    fun (_cor0) ->
	let <Flist> =
	    %% Line 1404
	    [( 'parse_DefaultSyntax'/1
	       -| [{'id',{0,0,'-parse_ObjectDefn/1-fun-0-'}}] )|%% Line 1405
								[( 'parse_DefinedSyntax'/1
								   -| [{'id',{0,0,'-parse_ObjectDefn/1-fun-1-'}}] )|[]]]
	in  let <_cor2> =
		catch
		    %% Line 1406
		    apply 'parse_or'/2
			(_cor0, Flist)
	    in  %% Line 1406
		case _cor2 of
		  %% Line 1407
		  <{'EXIT',Reason}> when 'true' ->
		      %% Line 1408
		      call 'erlang':'exit'
			  (Reason)
		  %% Line 1409
		  <AsnErr = {'asn1_error',_cor5}> when 'true' ->
		      %% Line 1410
		      call 'erlang':'throw'
			  (AsnErr)
		  %% Line 1411
		  <Result> when 'true' ->
		      %% Line 1412
		      Result
		end
'parse_DefaultSyntax'/1 =
    %% Line 1415
    fun (_cor0) ->
	case _cor0 of
	  <[{'{',_cor7}|[{'}',_cor8}|Rest]]> when 'true' ->
	      %% Line 1416
	      {{'object','defaultsyntax',[]},Rest}
	  %% Line 1417
	  <[{'{',_cor9}|Rest]> when 'true' ->
	      %% Line 1418
	      apply 'parse_DefaultSyntax'/2
		  (Rest, [])
	  %% Line 1419
	  <Tokens> when 'true' ->
	      let <_cor4> =
		  %% Line 1420
		  call 'erlang':'hd'
		      (Tokens)
	      in  let <_cor5> =
		      %% Line 1420
		      apply 'get_line'/1
			  (_cor4)
		  in  let <_cor3> =
			  %% Line 1420
			  call 'erlang':'get'
			      ('asn1_module')
		      in  let <_cor1> =
			      %% Line 1421
			      call 'erlang':'hd'
				  (Tokens)
			  in  let <_cor2> =
				  %% Line 1421
				  apply 'get_token'/1
				      (_cor1)
			      in  %% Line 1420
				  call 'erlang':'throw'
				      ({'asn1_error',{_cor5,_cor3,%% Line 1421
								  ['got'|[_cor2|['expected'|[['{}'|['{']]]]]]}})
	end
'parse_DefaultSyntax'/2 =
    %% Line 1423
    fun (_cor1,_cor0) ->
	%% Line 1424
	case apply 'parse_FieldSetting'/1
		 (_cor1) of
	  <{Setting,Rest}> when 'true' ->
	      %% Line 1425
	      case Rest of
		%% Line 1426
		<[{',',_cor10}|Rest2]> when 'true' ->
		    %% Line 1427
		    apply 'parse_DefaultSyntax'/2
			(Rest2, [Setting|_cor0])
		%% Line 1428
		<[{'}',_cor11}|Rest3]> when 'true' ->
		    let <_cor3> =
			%% Line 1429
			call 'lists':'reverse'
			    ([Setting|_cor0])
		    in  %% Line 1429
			{{'object','defaultsyntax',_cor3},Rest3}
		%% Line 1430
		<[H|_X_T]> when 'true' ->
		    let <_cor6> =
			%% Line 1431
			apply 'get_line'/1
			    (H)
		    in  let <_cor5> =
			    %% Line 1431
			    call 'erlang':'get'
				('asn1_module')
			in  let <_cor4> =
				%% Line 1432
				apply 'get_token'/1
				    (H)
			    in  %% Line 1431
				call 'erlang':'throw'
				    ({'asn1_error',{_cor6,_cor5,%% Line 1432
								['got'|[_cor4|['expected'|[[','|['}']]]]]]}})
		( <_cor7> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor7})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'parse_FieldSetting'/1 =
    %% Line 1435
    fun (_cor0) ->
	%% Line 1436
	case apply 'parse_PrimitiveFieldName'/1
		 (_cor0) of
	  <{{_cor4,PrimFieldName},Rest}> when 'true' ->
	      %% Line 1437
	      case apply 'parse_Setting'/1
		       (Rest) of
		<{Setting,Rest2}> when 'true' ->
		    %% Line 1438
		    {{PrimFieldName,Setting},Rest2}
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'parse_DefinedSyntax'/1 =
    %% Line 1440
    fun (_cor0) ->
	case _cor0 of
	  <[{'{',_cor2}|Rest]> when 'true' ->
	      %% Line 1441
	      apply 'parse_DefinedSyntax'/2
		  (Rest, [])
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'parse_DefinedSyntax',1}}] )
	    -| ['compiler_generated'] )
	end
'parse_DefinedSyntax'/2 =
    %% Line 1443
    fun (_cor1,_cor0) ->
	%% Line 1444
	case _cor1 of
	  %% Line 1445
	  <[{'}',_cor7}|Rest2]> when 'true' ->
	      let <_cor2> =
		  %% Line 1446
		  call 'lists':'reverse'
		      (_cor0)
	      in  %% Line 1446
		  {{'object','definedsyntax',_cor2},Rest2}
	  %% Line 1447
	  <_cor8> when 'true' ->
	      %% Line 1448
	      case apply 'parse_DefinedSyntaxToken'/1
		       (_cor1) of
		<{DefSynTok,Rest3}> when 'true' ->
		    %% Line 1449
		    apply 'parse_DefinedSyntax'/2
			(Rest3, [DefSynTok|_cor0])
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	end
'parse_DefinedSyntaxToken'/1 =
    %% Line 1457
    fun (_cor0) ->
	case _cor0 of
	  <[{',',L1}|Rest]> when 'true' ->
	      %% Line 1458
	      {{',',L1},Rest}
	  %% Line 1463
	  <Tokens = [{'typereference',L1,_X_Name}|[{T,_cor14}|_X_Rest]]>
	      when let <_cor1> =
		    %% Line 1464
		    call 'erlang':'=:='
			(T, '.')
		in  let <_cor2> =
			%% Line 1464
			call 'erlang':'=:='
			    (T, '(')
		    in  %% Line 1464
			call 'erlang':'or'
			    (_cor1, _cor2) ->
	      let <_cor3> =
		  catch
		      %% Line 1465
		      apply 'parse_Setting'/1
			  (Tokens)
	      in  %% Line 1465
		  case _cor3 of
		    %% Line 1466
		    <{'asn1_error',_cor15}> when 'true' ->
			let <_cor5> =
			    %% Line 1467
			    call 'erlang':'get'
				('asn1_module')
			in  let <_cor4> =
				%% Line 1468
				call 'erlang':'hd'
				    (Tokens)
			    in  %% Line 1467
				call 'erlang':'throw'
				    ({'asn1_error',{L1,_cor5,%% Line 1468
							     ['got'|[_cor4|['expected'|[['Word'|['setting']]]]]]}})
		    %% Line 1469
		    <{'EXIT',Reason}> when 'true' ->
			%% Line 1470
			call 'erlang':'exit'
			    (Reason)
		    %% Line 1471
		    <Result> when 'true' ->
			%% Line 1472
			Result
		  end
	  %% Line 1474
	  <Tokens = [TRef = {'typereference',L1,Name}|Rest]> when 'true' ->
	      %% Line 1475
	      case apply 'is_word'/1
		       (Name) of
		%% Line 1476
		<'false'> when 'true' ->
		    %% Line 1477
		    case apply 'lookahead_definedsyntax'/1
			     (Rest) of
		      %% Line 1478
		      <'word_or_setting'> when 'true' ->
			  let <_cor7> =
			      %% Line 1479
			      apply 'tref2Exttref'/1
				  (TRef)
			  in  %% Line 1479
			      {{'setting',L1,_cor7},Rest}
		      %% Line 1480
		      <_cor16> when 'true' ->
			  %% Line 1481
			  apply 'parse_Setting'/1
			      (Tokens)
		    end
		%% Line 1483
		<'true'> when 'true' ->
		    let <_cor9> =
			%% Line 1485
			apply 'tref2Exttref'/1
			    (TRef)
		    in  %% Line 1485
			{{'word_or_setting',L1,_cor9},Rest}
		( <_cor10> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor10})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1487
	  <Tokens> when 'true' ->
	      let <_cor11> =
		  catch
		      %% Line 1488
		      apply 'parse_Setting'/1
			  (Tokens)
	      in  %% Line 1488
		  case _cor11 of
		    %% Line 1489
		    <{'asn1_error',_cor17}> when 'true' ->
			%% Line 1490
			apply 'parse_Word'/1
			    (Tokens)
		    %% Line 1491
		    <{'EXIT',Reason}> when 'true' ->
			%% Line 1492
			call 'erlang':'exit'
			    (Reason)
		    %% Line 1493
		    <Result> when 'true' ->
			%% Line 1494
			Result
		  end
	end
'lookahead_definedsyntax'/1 =
    %% Line 1497
    fun (_cor0) ->
	case _cor0 of
	  <[{'typereference',_cor3,Name}|_X_Rest]> when 'true' ->
	      %% Line 1498
	      case apply 'is_word'/1
		       (Name) of
		%% Line 1499
		<'true'> when 'true' ->
		    'word_or_setting'
		%% Line 1500
		<_cor4> when 'true' ->
		    'setting'
	      end
	  %% Line 1502
	  <[{'}',_cor5}|_X_Rest]> when 'true' ->
	      %% Line 1503
	      'word_or_setting'
	  %% Line 1504
	  <_cor6> when 'true' ->
	      %% Line 1505
	      'setting'
	end
'parse_Word'/1 =
    %% Line 1507
    fun (_cor0) ->
	case _cor0 of
	  <[{Name,Pos}|Rest]> when 'true' ->
	      %% Line 1508
	      case apply 'is_word'/1
		       (Name) of
		%% Line 1509
		<'false'> when 'true' ->
		    let <_cor1> =
			%% Line 1510
			call 'erlang':'get'
			    ('asn1_module')
		    in  %% Line 1510
			call 'erlang':'throw'
			    ({'asn1_error',{Pos,_cor1,%% Line 1511
						      ['got'|[Name|['expected'|['a'|['Word']]]]]}})
		%% Line 1512
		<'true'> when 'true' ->
		    let <_cor2> =
			%% Line 1513
			apply 'tref2Exttref'/2
			    (Pos, Name)
		    in  %% Line 1513
			{{'word_or_setting',Pos,_cor2},Rest}
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'parse_Word',1}}] )
	    -| ['compiler_generated'] )
	end
'parse_Setting'/1 =
    %% Line 1516
    fun (_cor0) ->
	let <Flist> =
	    %% Line 1517
	    [{'type_tag',( 'parse_Type'/1
			   -| [{'id',{0,0,'-parse_Setting/1-fun-0-'}}] )}|%% Line 1518
									  [{'value_tag',( 'parse_Value'/1
											  -| [{'id',{0,0,'-parse_Setting/1-fun-1-'}}] )}|%% Line 1519
																	 [{'object_tag',( 'parse_Object'/1
																			  -| [{'id',{0,0,'-parse_Setting/1-fun-2-'}}] )}|%% Line 1520
																									 [{'objectset_tag',( 'parse_ObjectSet'/1
																											     -| [{'id',{0,0,'-parse_Setting/1-fun-3-'}}] )}|[]]]]]
	in  let <_cor2> =
		catch
		    %% Line 1521
		    apply 'parse_or_tag'/2
			(_cor0, Flist)
	    in  %% Line 1521
		case _cor2 of
		  %% Line 1522
		  <{'EXIT',Reason}> when 'true' ->
		      %% Line 1523
		      call 'erlang':'exit'
			  (Reason)
		  %% Line 1524
		  <AsnErr = {'asn1_error',_cor5}> when 'true' ->
		      %% Line 1525
		      call 'erlang':'throw'
			  (AsnErr)
		  %% Line 1526
		  <Result = {{'value_tag',_cor6},_cor7}> when 'true' ->
		      %% Line 1527
		      Result
		  %% Line 1528
		  <{{Tag,Setting},Rest}>
		      when call 'erlang':'is_atom'
			    (Tag) ->
		      %% Line 1529
		      {Setting,Rest}
		  ( <_cor3> when 'true' ->
			primop 'match_fail'
			    ({'case_clause',_cor3})
		    -| ['compiler_generated'] )
		end
'parse_DefinedObjectSet'/1 =
    %% Line 1546
    fun (_cor0) ->
	case _cor0 of
	  <[{'typereference',L1,ModuleName}|[{'.',_cor8}|%% Line 1547
							 [{'typereference',L2,ObjSetName}|Rest]]]> when 'true' ->
	      %% Line 1548
	      {{'objectset',L1,{'Externaltypereference',L2,ModuleName,%% Line 1549
								      ObjSetName}},%% Line 1549
										   Rest}
	  %% Line 1550
	  <[{'typereference',L1,ObjSetName}|Rest]> when 'true' ->
	      let <_cor1> =
		  %% Line 1551
		  apply 'resolve_module'/1
		      (ObjSetName)
	      in  %% Line 1551
		  {{'objectset',L1,{'Externaltypereference',L1,_cor1,%% Line 1552
								     ObjSetName}},%% Line 1552
										  Rest}
	  %% Line 1553
	  <Tokens> when 'true' ->
	      let <_cor5> =
		  %% Line 1554
		  call 'erlang':'hd'
		      (Tokens)
	      in  let <_cor6> =
		      %% Line 1554
		      apply 'get_line'/1
			  (_cor5)
		  in  let <_cor4> =
			  %% Line 1554
			  call 'erlang':'get'
			      ('asn1_module')
		      in  let <_cor2> =
			      %% Line 1555
			      call 'erlang':'hd'
				  (Tokens)
			  in  let <_cor3> =
				  %% Line 1555
				  apply 'get_token'/1
				      (_cor2)
			      in  %% Line 1554
				  call 'erlang':'throw'
				      ({'asn1_error',{_cor6,_cor4,%% Line 1555
								  ['got'|[_cor3|['expected'|[['typereference'|['typereference.typereference']]]]]]}})
	end
'parse_ObjectSetAssignment'/1 =
    %% Line 1558
    fun (_cor0) ->
	case _cor0 of
	  <[{'typereference',L1,ObjSetName}|Rest]> when 'true' ->
	      %% Line 1559
	      case apply 'parse_DefinedObjectClass'/1
		       (Rest) of
		<{Class,Rest2}> when 'true' ->
		    %% Line 1560
		    case Rest2 of
		      %% Line 1561
		      <[{'::=',_cor13}|Rest3]> when 'true' ->
			  %% Line 1562
			  case apply 'parse_ObjectSet'/1
				   (Rest3) of
			    <{ObjectSet,Rest4}> when 'true' ->
				%% Line 1563
				{{'typedef','false',L1,ObjSetName,%% Line 1564
								  {'ObjectSet',Class,'true','undefined',%% Line 1565
													ObjectSet}},%% Line 1565
														    Rest4}
			    ( <_cor2> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor2})
			      -| ['compiler_generated'] )
			  end
		      %% Line 1566
		      <[H|_X_T]> when 'true' ->
			  let <_cor5> =
			      %% Line 1567
			      apply 'get_line'/1
				  (H)
			  in  let <_cor4> =
				  %% Line 1567
				  call 'erlang':'get'
				      ('asn1_module')
			      in  let <_cor3> =
				      %% Line 1568
				      apply 'get_token'/1
					  (H)
				  in  %% Line 1567
				      call 'erlang':'throw'
					  ({'asn1_error',{_cor5,_cor4,%% Line 1568
								      ['got'|[_cor3|['expected'|['::=']]]]}})
		      ( <_cor6> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor6})
			-| ['compiler_generated'] )
		    end
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1572
	  <Tokens> when 'true' ->
	      let <_cor10> =
		  %% Line 1573
		  call 'erlang':'hd'
		      (Tokens)
	      in  let <_cor11> =
		      %% Line 1573
		      apply 'get_line'/1
			  (_cor10)
		  in  let <_cor9> =
			  %% Line 1573
			  call 'erlang':'get'
			      ('asn1_module')
		      in  let <_cor7> =
			      %% Line 1574
			      call 'erlang':'hd'
				  (Tokens)
			  in  let <_cor8> =
				  %% Line 1574
				  apply 'get_token'/1
				      (_cor7)
			      in  %% Line 1573
				  call 'erlang':'throw'
				      ({'asn1_assignment_error',{_cor11,_cor9,%% Line 1574
									      ['got'|[_cor8|['expected'|['typereference']]]]}})
	end
'parse_ObjectSet'/1 =
    %% Line 1587
    fun (_cor0) ->
	case _cor0 of
	  <[{'{',_cor12}|Rest]> when 'true' ->
	      %% Line 1588
	      case apply 'parse_ObjectSetSpec'/1
		       (Rest) of
		<{ObjSetSpec,Rest2}> when 'true' ->
		    %% Line 1589
		    case Rest2 of
		      %% Line 1590
		      <[{'}',_cor13}|Rest3]> when 'true' ->
			  %% Line 1591
			  {ObjSetSpec,Rest3}
		      %% Line 1592
		      <[H|_X_T]> when 'true' ->
			  let <_cor4> =
			      %% Line 1593
			      apply 'get_line'/1
				  (H)
			  in  let <_cor3> =
				  %% Line 1593
				  call 'erlang':'get'
				      ('asn1_module')
			      in  let <_cor2> =
				      %% Line 1594
				      apply 'get_token'/1
					  (H)
				  in  %% Line 1593
				      call 'erlang':'throw'
					  ({'asn1_error',{_cor4,_cor3,%% Line 1594
								      ['got'|[_cor2|['expected'|['}']]]]}})
		      ( <_cor5> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor5})
			-| ['compiler_generated'] )
		    end
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1596
	  <Tokens> when 'true' ->
	      let <_cor9> =
		  %% Line 1597
		  call 'erlang':'hd'
		      (Tokens)
	      in  let <_cor10> =
		      %% Line 1597
		      apply 'get_line'/1
			  (_cor9)
		  in  let <_cor8> =
			  %% Line 1597
			  call 'erlang':'get'
			      ('asn1_module')
		      in  let <_cor6> =
			      %% Line 1598
			      call 'erlang':'hd'
				  (Tokens)
			  in  let <_cor7> =
				  %% Line 1598
				  apply 'get_token'/1
				      (_cor6)
			      in  %% Line 1597
				  call 'erlang':'throw'
				      ({'asn1_error',{_cor10,_cor8,%% Line 1598
								   ['got'|[_cor7|['expected'|['{']]]]}})
	end
'parse_ObjectSetSpec'/1 =
    %% Line 1600
    fun (_cor0) ->
	case _cor0 of
	  <[{'...',_cor4}|Rest]> when 'true' ->
	      %% Line 1601
	      case Rest of
		%% Line 1602
		<[{',',_cor5}|Rest2]> when 'true' ->
		    %% Line 1603
		    case apply 'parse_ElementSetSpecs'/1
			     (Rest2) of
		      <{Elements,Rest3}> when 'true' ->
			  %% Line 1604
			  {{[],Elements},Rest3}
		      ( <_cor1> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor1})
			-| ['compiler_generated'] )
		    end
		%% Line 1605
		<_cor6> when 'true' ->
		    %% Line 1606
		    {['EXTENSIONMARK'],Rest}
	      end
	  %% Line 1608
	  <Tokens> when 'true' ->
	      %% Line 1609
	      apply 'parse_ElementSetSpecs'/1
		  (Tokens)
	end
'parse_ObjectSetElements'/1 =
    %% Line 1620
    fun (_cor0) ->
	let <Flist> =
	    %% Line 1621
	    [%% Line 1623
	     ( 'parse_ObjectSetFromObjects'/1
	       -| [{'id',{0,0,'-parse_ObjectSetElements/1-fun-0-'}}] )|%% Line 1624
								       [( 'parse_ParameterizedObjectSet'/1
									  -| [{'id',{0,0,'-parse_ObjectSetElements/1-fun-1-'}}] )|[]]]
	in  let <_cor2> =
		catch
		    %% Line 1625
		    apply 'parse_or'/2
			(_cor0, Flist)
	    in  %% Line 1625
		case _cor2 of
		  %% Line 1626
		  <{'EXIT',Reason}> when 'true' ->
		      %% Line 1627
		      call 'erlang':'exit'
			  (Reason)
		  %% Line 1628
		  <AsnErr = {'asn1_error',_cor5}> when 'true' ->
		      %% Line 1629
		      call 'erlang':'throw'
			  (AsnErr)
		  %% Line 1630
		  <Result> when 'true' ->
		      %% Line 1631
		      Result
		end
'parse_ObjectClassFieldType'/1 =
    %% Line 1634
    fun (_cor0) ->
	%% Line 1635
	case apply 'parse_DefinedObjectClass'/1
		 (_cor0) of
	  <{Class,Rest}> when 'true' ->
	      %% Line 1636
	      case Rest of
		%% Line 1637
		<[{'.',_cor9}|Rest2]> when 'true' ->
		    %% Line 1638
		    case apply 'parse_FieldName'/1
			     (Rest2) of
		      <{FieldName,Rest3}> when 'true' ->
			  let <OCFT> =
			      %% Line 1639
			      {'ObjectClassFieldType',%% Line 1640
						      Class,%% Line 1641
							    Class,%% Line 1641
								  FieldName,'undefined'}
			  in  %% Line 1642
			      {{'type',[],OCFT,[],[],'no'},Rest3}
		      ( <_cor2> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor2})
			-| ['compiler_generated'] )
		    end
		%% Line 1643
		<[H|_X_T]> when 'true' ->
		    let <_cor6> =
			%% Line 1644
			apply 'get_line'/1
			    (H)
		    in  let <_cor5> =
			    %% Line 1644
			    call 'erlang':'get'
				('asn1_module')
			in  let <_cor4> =
				%% Line 1645
				apply 'get_token'/1
				    (H)
			    in  %% Line 1644
				call 'erlang':'throw'
				    ({'asn1_error',{_cor6,_cor5,%% Line 1645
								['got'|[_cor4|['expected'|['.']]]]}})
		( <_cor7> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor7})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'parse_ObjectClassFieldValue'/1 =
    %% Line 1662
    fun (_cor0) ->
	%% Line 1663
	apply 'parse_OpenTypeFieldVal'/1
	    (_cor0)
'parse_OpenTypeFieldVal'/1 =
    %% Line 1665
    fun (_cor0) ->
	%% Line 1666
	case apply 'parse_Type'/1
		 (_cor0) of
	  <{Type,Rest}> when 'true' ->
	      %% Line 1667
	      case Rest of
		%% Line 1668
		<[{':',_cor8}|Rest2]> when 'true' ->
		    %% Line 1669
		    case apply 'parse_Value'/1
			     (Rest2) of
		      <{Value,Rest3}> when 'true' ->
			  %% Line 1670
			  {{'opentypefieldvalue',Type,Value},Rest3}
		      ( <_cor2> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor2})
			-| ['compiler_generated'] )
		    end
		%% Line 1671
		<[H|_X_T]> when 'true' ->
		    let <_cor5> =
			%% Line 1672
			apply 'get_line'/1
			    (H)
		    in  let <_cor4> =
			    %% Line 1672
			    call 'erlang':'get'
				('asn1_module')
			in  let <_cor3> =
				%% Line 1673
				apply 'get_token'/1
				    (H)
			    in  %% Line 1672
				call 'erlang':'throw'
				    ({'asn1_error',{_cor5,_cor4,%% Line 1673
								['got'|[_cor3|['expected'|[':']]]]}})
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor6})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'parse_ReferencedObjects'/1 =
    %% Line 1701
    fun (_cor0) ->
	let <Flist> =
	    %% Line 1702
	    [( 'parse_DefinedObject'/1
	       -| [{'id',{0,0,'-parse_ReferencedObjects/1-fun-0-'}}] )|%% Line 1703
								       [( 'parse_DefinedObjectSet'/1
									  -| [{'id',{0,0,'-parse_ReferencedObjects/1-fun-1-'}}] )|%% Line 1704
																  [( 'parse_ParameterizedObject'/1
																     -| [{'id',{0,0,'-parse_ReferencedObjects/1-fun-2-'}}] )|%% Line 1705
																							     [( 'parse_ParameterizedObjectSet'/1
																								-| [{'id',{0,0,'-parse_ReferencedObjects/1-fun-3-'}}] )|[]]]]]
	in  let <_cor2> =
		catch
		    %% Line 1706
		    apply 'parse_or'/2
			(_cor0, Flist)
	    in  %% Line 1706
		case _cor2 of
		  %% Line 1707
		  <{'EXIT',Reason}> when 'true' ->
		      %% Line 1708
		      call 'erlang':'exit'
			  (Reason)
		  %% Line 1709
		  <AsnErr = {'asn1_error',_cor5}> when 'true' ->
		      %% Line 1710
		      call 'erlang':'throw'
			  (AsnErr)
		  %% Line 1711
		  <Result> when 'true' ->
		      %% Line 1712
		      Result
		end
'parse_ValueFromObject'/1 =
    %% Line 1715
    fun (_cor0) ->
	%% Line 1716
	case apply 'parse_ReferencedObjects'/1
		 (_cor0) of
	  <{Objects,Rest}> when 'true' ->
	      %% Line 1717
	      case Rest of
		%% Line 1718
		<[{'.',_cor12}|Rest2]> when 'true' ->
		    %% Line 1719
		    case apply 'parse_FieldName'/1
			     (Rest2) of
		      <{Name,Rest3}> when 'true' ->
			  %% Line 1720
			  case call 'lists':'last'
				   (Name) of
			    %% Line 1721
			    <{'valuefieldreference',_cor13}> when 'true' ->
				%% Line 1722
				{{'ValueFromObject',Objects,Name},Rest3}
			    %% Line 1723
			    <_cor14> when 'true' ->
				let <_cor4> =
				    %% Line 1724
				    call 'erlang':'hd'
					(_cor0)
				in  let <_cor5> =
					%% Line 1724
					apply 'get_line'/1
					    (_cor4)
				    in  let <_cor3> =
					    %% Line 1724
					    call 'erlang':'get'
						('asn1_module')
					in  %% Line 1724
					    call 'erlang':'throw'
						({'asn1_error',{_cor5,_cor3,%% Line 1725
									    ['got'|['typefieldreference'|['expected'|['valuefieldreference']]]]}})
			  end
		      ( <_cor2> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor2})
			-| ['compiler_generated'] )
		    end
		%% Line 1728
		<[H|_X_T]> when 'true' ->
		    let <_cor9> =
			%% Line 1729
			apply 'get_line'/1
			    (H)
		    in  let <_cor8> =
			    %% Line 1729
			    call 'erlang':'get'
				('asn1_module')
			in  let <_cor7> =
				%% Line 1730
				apply 'get_token'/1
				    (H)
			    in  %% Line 1729
				call 'erlang':'throw'
				    ({'asn1_error',{_cor9,_cor8,%% Line 1730
								['got'|[_cor7|['expected'|['.']]]]}})
		( <_cor10> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor10})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'parse_ValueSetFromObjects'/1 =
    %% Line 1735
    fun (_cor0) ->
	%% Line 1736
	case apply 'parse_ReferencedObjects'/1
		 (_cor0) of
	  <{Objects,Rest}> when 'true' ->
	      %% Line 1737
	      case Rest of
		%% Line 1738
		<[{'.',_cor14}|Rest2]> when 'true' ->
		    %% Line 1739
		    case apply 'parse_FieldName'/1
			     (Rest2) of
		      <{Name,Rest3}> when 'true' ->
			  %% Line 1740
			  case call 'lists':'last'
				   (Name) of
			    %% Line 1741
			    <{'typefieldreference',_X_FieldName}> when 'true' ->
				%% Line 1742
				{{'ValueSetFromObjects',Objects,Name},Rest3}
			    %% Line 1743
			    <_cor15> when 'true' ->
				let <_cor6> =
				    %% Line 1744
				    call 'erlang':'hd'
					(Rest2)
				in  let <_cor7> =
					%% Line 1744
					apply 'get_line'/1
					    (_cor6)
				    in  let <_cor5> =
					    %% Line 1744
					    call 'erlang':'get'
						('asn1_module')
					in  let <_cor3> =
						%% Line 1745
						call 'erlang':'hd'
						    (Rest2)
					    in  let <_cor4> =
						    %% Line 1745
						    apply 'get_token'/1
							(_cor3)
						in  %% Line 1744
						    call 'erlang':'throw'
							({'asn1_error',{_cor7,_cor5,%% Line 1745
										    ['got'|[_cor4|['expected'|['typefieldreference']]]]}})
			  end
		      ( <_cor2> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor2})
			-| ['compiler_generated'] )
		    end
		%% Line 1748
		<[H|_X_T]> when 'true' ->
		    let <_cor11> =
			%% Line 1749
			apply 'get_line'/1
			    (H)
		    in  let <_cor10> =
			    %% Line 1749
			    call 'erlang':'get'
				('asn1_module')
			in  let <_cor9> =
				%% Line 1750
				apply 'get_token'/1
				    (H)
			    in  %% Line 1749
				call 'erlang':'throw'
				    ({'asn1_error',{_cor11,_cor10,%% Line 1750
								  ['got'|[_cor9|['expected'|['.']]]]}})
		( <_cor12> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor12})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'parse_TypeFromObject'/1 =
    %% Line 1755
    fun (_cor0) ->
	%% Line 1756
	case apply 'parse_ReferencedObjects'/1
		 (_cor0) of
	  <{Objects,Rest}> when 'true' ->
	      %% Line 1757
	      case Rest of
		%% Line 1758
		<[{'.',_cor14}|Rest2]> when 'true' ->
		    %% Line 1759
		    case apply 'parse_FieldName'/1
			     (Rest2) of
		      <{Name,Rest3}> when 'true' ->
			  %% Line 1760
			  case call 'lists':'last'
				   (Name) of
			    %% Line 1761
			    <{'typefieldreference',_X_FieldName}> when 'true' ->
				%% Line 1762
				{{'TypeFromObject',Objects,Name},Rest3}
			    %% Line 1763
			    <_cor15> when 'true' ->
				let <_cor6> =
				    %% Line 1764
				    call 'erlang':'hd'
					(Rest2)
				in  let <_cor7> =
					%% Line 1764
					apply 'get_line'/1
					    (_cor6)
				    in  let <_cor5> =
					    %% Line 1764
					    call 'erlang':'get'
						('asn1_module')
					in  let <_cor3> =
						%% Line 1765
						call 'erlang':'hd'
						    (Rest2)
					    in  let <_cor4> =
						    %% Line 1765
						    apply 'get_token'/1
							(_cor3)
						in  %% Line 1764
						    call 'erlang':'throw'
							({'asn1_error',{_cor7,_cor5,%% Line 1765
										    ['got'|[_cor4|['expected'|['typefieldreference']]]]}})
			  end
		      ( <_cor2> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor2})
			-| ['compiler_generated'] )
		    end
		%% Line 1768
		<[H|_X_T]> when 'true' ->
		    let <_cor11> =
			%% Line 1769
			apply 'get_line'/1
			    (H)
		    in  let <_cor10> =
			    %% Line 1769
			    call 'erlang':'get'
				('asn1_module')
			in  let <_cor9> =
				%% Line 1770
				apply 'get_token'/1
				    (H)
			    in  %% Line 1769
				call 'erlang':'throw'
				    ({'asn1_error',{_cor11,_cor10,%% Line 1770
								  ['got'|[_cor9|['expected'|['.']]]]}})
		( <_cor12> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor12})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'parse_ObjectFromObject'/1 =
    %% Line 1775
    fun (_cor0) ->
	%% Line 1776
	case apply 'parse_ReferencedObjects'/1
		 (_cor0) of
	  <{Objects,Rest}> when 'true' ->
	      %% Line 1777
	      case Rest of
		%% Line 1778
		<[{'.',_cor8}|Rest2]> when 'true' ->
		    %% Line 1779
		    case apply 'parse_FieldName'/1
			     (Rest2) of
		      <{Name,Rest3}> when 'true' ->
			  %% Line 1780
			  {{'ObjectFromObject',Objects,Name},Rest3}
		      ( <_cor2> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor2})
			-| ['compiler_generated'] )
		    end
		%% Line 1781
		<[H|_X_T]> when 'true' ->
		    let <_cor5> =
			%% Line 1782
			apply 'get_line'/1
			    (H)
		    in  let <_cor4> =
			    %% Line 1782
			    call 'erlang':'get'
				('asn1_module')
			in  let <_cor3> =
				%% Line 1783
				apply 'get_token'/1
				    (H)
			    in  %% Line 1782
				call 'erlang':'throw'
				    ({'asn1_error',{_cor5,_cor4,%% Line 1783
								['got'|[_cor3|['expected'|['.']]]]}})
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor6})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'parse_ObjectSetFromObjects'/1 =
    %% Line 1792
    fun (_cor0) ->
	%% Line 1793
	case apply 'parse_ReferencedObjects'/1
		 (_cor0) of
	  <{Objects,Rest}> when 'true' ->
	      %% Line 1794
	      case Rest of
		%% Line 1795
		<[{'.',_cor14}|Rest2]> when 'true' ->
		    %% Line 1796
		    case apply 'parse_FieldName'/1
			     (Rest2) of
		      <{Name,Rest3}> when 'true' ->
			  %% Line 1797
			  case call 'lists':'last'
				   (Name) of
			    %% Line 1798
			    <{'typefieldreference',_X_FieldName}> when 'true' ->
				%% Line 1799
				{{'ObjectSetFromObjects',Objects,Name},Rest3}
			    %% Line 1800
			    <_cor15> when 'true' ->
				let <_cor6> =
				    %% Line 1801
				    call 'erlang':'hd'
					(Rest2)
				in  let <_cor7> =
					%% Line 1801
					apply 'get_line'/1
					    (_cor6)
				    in  let <_cor5> =
					    %% Line 1801
					    call 'erlang':'get'
						('asn1_module')
					in  let <_cor3> =
						%% Line 1802
						call 'erlang':'hd'
						    (Rest2)
					    in  let <_cor4> =
						    %% Line 1802
						    apply 'get_token'/1
							(_cor3)
						in  %% Line 1801
						    call 'erlang':'throw'
							({'asn1_error',{_cor7,_cor5,%% Line 1802
										    ['got'|[_cor4|['expected'|['typefieldreference']]]]}})
			  end
		      ( <_cor2> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor2})
			-| ['compiler_generated'] )
		    end
		%% Line 1805
		<[H|_X_T]> when 'true' ->
		    let <_cor11> =
			%% Line 1806
			apply 'get_line'/1
			    (H)
		    in  let <_cor10> =
			    %% Line 1806
			    call 'erlang':'get'
				('asn1_module')
			in  let <_cor9> =
				%% Line 1807
				apply 'get_token'/1
				    (H)
			    in  %% Line 1806
				call 'erlang':'throw'
				    ({'asn1_error',{_cor11,_cor10,%% Line 1807
								  ['got'|[_cor9|['expected'|['.']]]]}})
		( <_cor12> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor12})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'parse_GeneralConstraint'/1 =
    %% Line 1821
    fun (_cor0) ->
	let <Flist> =
	    %% Line 1822
	    [( 'parse_UserDefinedConstraint'/1
	       -| [{'id',{0,0,'-parse_GeneralConstraint/1-fun-0-'}}] )|%% Line 1823
								       [( 'parse_TableConstraint'/1
									  -| [{'id',{0,0,'-parse_GeneralConstraint/1-fun-1-'}}] )|%% Line 1824
																  [( 'parse_ContentsConstraint'/1
																     -| [{'id',{0,0,'-parse_GeneralConstraint/1-fun-2-'}}] )|[]]]]
	in  let <_cor2> =
		catch
		    %% Line 1825
		    apply 'parse_or'/2
			(_cor0, Flist)
	    in  %% Line 1825
		case _cor2 of
		  %% Line 1826
		  <{'EXIT',Reason}> when 'true' ->
		      %% Line 1827
		      call 'erlang':'exit'
			  (Reason)
		  %% Line 1828
		  <AsnErr = {'asn1_error',_cor5}> when 'true' ->
		      %% Line 1829
		      call 'erlang':'throw'
			  (AsnErr)
		  %% Line 1830
		  <Result> when 'true' ->
		      %% Line 1831
		      Result
		end
'parse_UserDefinedConstraint'/1 =
    %% Line 1834
    fun (_cor0) ->
	case _cor0 of
	  <[{'CONSTRAINED',_cor12}|[{'BY',_cor13}|[{'{',_cor14}|[{'}',_cor15}|Rest]]]]> when 'true' ->
	      %% Line 1835
	      {{'constrained_by',[]},Rest}
	  %% Line 1836
	  <[{'CONSTRAINED',_cor16}|%% Line 1837
				   [{'BY',_cor17}|%% Line 1838
						  [{'{',_cor18}|Rest]]]> when 'true' ->
	      %% Line 1839
	      case apply 'parse_UserDefinedConstraintParameter'/1
		       (Rest) of
		<{Param,Rest2}> when 'true' ->
		    %% Line 1840
		    case Rest2 of
		      %% Line 1841
		      <[{'}',_cor19}|Rest3]> when 'true' ->
			  %% Line 1842
			  {{'constrained_by',Param},Rest3}
		      %% Line 1843
		      <[H|_X_T]> when 'true' ->
			  let <_cor4> =
			      %% Line 1844
			      apply 'get_line'/1
				  (H)
			  in  let <_cor3> =
				  %% Line 1844
				  call 'erlang':'get'
				      ('asn1_module')
			      in  let <_cor2> =
				      %% Line 1845
				      apply 'get_token'/1
					  (H)
				  in  %% Line 1844
				      call 'erlang':'throw'
					  ({'asn1_error',{_cor4,_cor3,%% Line 1845
								      ['got'|[_cor2|['expected'|['}']]]]}})
		      ( <_cor5> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor5})
			-| ['compiler_generated'] )
		    end
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1847
	  <Tokens> when 'true' ->
	      let <_cor9> =
		  %% Line 1848
		  call 'erlang':'hd'
		      (Tokens)
	      in  let <_cor10> =
		      %% Line 1848
		      apply 'get_line'/1
			  (_cor9)
		  in  let <_cor8> =
			  %% Line 1848
			  call 'erlang':'get'
			      ('asn1_module')
		      in  let <_cor6> =
			      %% Line 1849
			      call 'erlang':'hd'
				  (Tokens)
			  in  let <_cor7> =
				  %% Line 1849
				  apply 'get_token'/1
				      (_cor6)
			      in  %% Line 1848
				  call 'erlang':'throw'
				      ({'asn1_error',{_cor10,_cor8,%% Line 1849
								   ['got'|[_cor7|['expected'|[['CONSTRAINED BY {}'|['CONSTRAINED BY {']]]]]]}})
	end
'parse_UserDefinedConstraintParameter'/1 =
    %% Line 1852
    fun (_cor0) ->
	%% Line 1853
	apply 'parse_UserDefinedConstraintParameter'/2
	    (_cor0, [])
'parse_UserDefinedConstraintParameter'/2 =
    %% Line 1854
    fun (_cor1,_cor0) ->
	let <Flist> =
	    %% Line 1855
	    [( 'parse_GovernorAndActualParameter'/1
	       -| [{'id',{0,0,'-parse_UserDefinedConstraintParameter/2-fun-0-'}}] )|%% Line 1856
										    [( 'parse_ActualParameter'/1
										       -| [{'id',{0,0,'-parse_UserDefinedConstraintParameter/2-fun-1-'}}] )|[]]]
	in  let <_cor3> =
		catch
		    %% Line 1857
		    apply 'parse_or'/2
			(_cor1, Flist)
	    in  %% Line 1857
		case _cor3 of
		  %% Line 1858
		  <{'EXIT',Reason}> when 'true' ->
		      %% Line 1859
		      call 'erlang':'exit'
			  (Reason)
		  %% Line 1860
		  <AsnErr = {'asn1_error',_cor9}> when 'true' ->
		      %% Line 1861
		      call 'erlang':'throw'
			  (AsnErr)
		  %% Line 1862
		  <{Result,Rest}> when 'true' ->
		      %% Line 1863
		      case Rest of
			%% Line 1864
			<[{',',_cor10}|_X_Rest2]> when 'true' ->
			    %% Line 1865
			    apply 'parse_UserDefinedConstraintParameter'/2
				(_cor1, [Result|_cor0])
			%% Line 1866
			<_cor11> when 'true' ->
			    let <_cor4> =
				%% Line 1867
				call 'lists':'reverse'
				    ([Result|_cor0])
			    in  %% Line 1867
				{_cor4,Rest}
		      end
		  ( <_cor6> when 'true' ->
			primop 'match_fail'
			    ({'case_clause',_cor6})
		    -| ['compiler_generated'] )
		end
'parse_GovernorAndActualParameter'/1 =
    %% Line 1871
    fun (_cor0) ->
	%% Line 1872
	case apply 'parse_Governor'/1
		 (_cor0) of
	  <{Governor,Rest}> when 'true' ->
	      %% Line 1873
	      case Rest of
		%% Line 1874
		<[{':',_cor8}|Rest2]> when 'true' ->
		    %% Line 1875
		    case apply 'parse_ActualParameter'/1
			     (Rest2) of
		      <{Params,Rest3}> when 'true' ->
			  %% Line 1876
			  {{'Governor_Params',Governor,Params},Rest3}
		      ( <_cor2> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor2})
			-| ['compiler_generated'] )
		    end
		%% Line 1877
		<[H|_X_T]> when 'true' ->
		    let <_cor5> =
			%% Line 1878
			apply 'get_line'/1
			    (H)
		    in  let <_cor4> =
			    %% Line 1878
			    call 'erlang':'get'
				('asn1_module')
			in  let <_cor3> =
				%% Line 1879
				apply 'get_token'/1
				    (H)
			    in  %% Line 1878
				call 'erlang':'throw'
				    ({'asn1_error',{_cor5,_cor4,%% Line 1879
								['got'|[_cor3|['expected'|[':']]]]}})
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor6})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'parse_TableConstraint'/1 =
    %% Line 1882
    fun (_cor0) ->
	let <Flist> =
	    %% Line 1883
	    [( 'parse_ComponentRelationConstraint'/1
	       -| [{'id',{0,0,'-parse_TableConstraint/1-fun-0-'}}] )|%% Line 1884
								     [( 'parse_SimpleTableConstraint'/1
									-| [{'id',{0,0,'-parse_TableConstraint/1-fun-1-'}}] )|[]]]
	in  let <_cor2> =
		catch
		    %% Line 1885
		    apply 'parse_or'/2
			(_cor0, Flist)
	    in  %% Line 1885
		case _cor2 of
		  %% Line 1886
		  <{'EXIT',Reason}> when 'true' ->
		      %% Line 1887
		      call 'erlang':'exit'
			  (Reason)
		  %% Line 1888
		  <AsnErr = {'asn1_error',_cor5}> when 'true' ->
		      %% Line 1889
		      call 'erlang':'throw'
			  (AsnErr)
		  %% Line 1890
		  <Result> when 'true' ->
		      %% Line 1891
		      Result
		end
'parse_SimpleTableConstraint'/1 =
    %% Line 1894
    fun (_cor0) ->
	%% Line 1895
	case apply 'parse_ObjectSet'/1
		 (_cor0) of
	  <{ObjectSet,Rest}> when 'true' ->
	      %% Line 1896
	      {{'simpletable',ObjectSet},Rest}
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'parse_ComponentRelationConstraint'/1 =
    %% Line 1898
    fun (_cor0) ->
	case _cor0 of
	  <[{'{',_cor17}|Rest]> when 'true' ->
	      %% Line 1899
	      case apply 'parse_DefinedObjectSet'/1
		       (Rest) of
		<{ObjectSet,Rest2}> when 'true' ->
		    %% Line 1900
		    case Rest2 of
		      %% Line 1901
		      <[{'}',_cor18}|[{'{',_cor19}|Rest3]]> when 'true' ->
			  %% Line 1902
			  case apply 'parse_AtNotationList'/2
				   (Rest3, []) of
			    <{AtNot,Rest4}> when 'true' ->
				%% Line 1903
				case Rest4 of
				  %% Line 1904
				  <[{'}',_cor20}|Rest5]> when 'true' ->
				      %% Line 1905
				      {{'componentrelation',ObjectSet,AtNot},Rest5}
				  %% Line 1906
				  <[H|_X_T]> when 'true' ->
				      let <_cor5> =
					  %% Line 1907
					  apply 'get_line'/1
					      (H)
				      in  let <_cor4> =
					      %% Line 1907
					      call 'erlang':'get'
						  ('asn1_module')
					  in  let <_cor3> =
						  %% Line 1908
						  apply 'get_token'/1
						      (H)
					      in  %% Line 1907
						  call 'erlang':'throw'
						      ({'asn1_error',{_cor5,_cor4,%% Line 1908
										  ['got'|[_cor3|['expected'|['}']]]]}})
				  ( <_cor6> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor6})
				    -| ['compiler_generated'] )
				end
			    ( <_cor2> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor2})
			      -| ['compiler_generated'] )
			  end
		      %% Line 1910
		      <[H|_X_T]> when 'true' ->
			  let <_cor9> =
			      %% Line 1911
			      apply 'get_line'/1
				  (H)
			  in  let <_cor8> =
				  %% Line 1911
				  call 'erlang':'get'
				      ('asn1_module')
			      in  let <_cor7> =
				      %% Line 1912
				      apply 'get_token'/1
					  (H)
				  in  %% Line 1911
				      call 'erlang':'throw'
					  ({'asn1_error',{_cor9,_cor8,%% Line 1912
								      ['got'|[_cor7|['expected'|['ComponentRelationConstraint'|['ended'|['with'|['}']]]]]]]}})
		      ( <_cor10> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor10})
			-| ['compiler_generated'] )
		    end
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1917
	  <Tokens> when 'true' ->
	      let <_cor14> =
		  %% Line 1918
		  call 'erlang':'hd'
		      (Tokens)
	      in  let <_cor15> =
		      %% Line 1918
		      apply 'get_line'/1
			  (_cor14)
		  in  let <_cor13> =
			  %% Line 1918
			  call 'erlang':'get'
			      ('asn1_module')
		      in  let <_cor11> =
			      %% Line 1919
			      call 'erlang':'hd'
				  (Tokens)
			  in  let <_cor12> =
				  %% Line 1919
				  apply 'get_token'/1
				      (_cor11)
			      in  %% Line 1918
				  call 'erlang':'throw'
				      ({'asn1_error',{_cor15,_cor13,%% Line 1919
								    ['got'|[_cor12|['expected'|['{']]]]}})
	end
'parse_AtNotationList'/2 =
    %% Line 1921
    fun (_cor1,_cor0) ->
	%% Line 1922
	case apply 'parse_AtNotation'/1
		 (_cor1) of
	  <{AtNot,Rest}> when 'true' ->
	      %% Line 1923
	      case Rest of
		%% Line 1924
		<[{',',_cor7}|Rest2]> when 'true' ->
		    %% Line 1925
		    apply 'parse_AtNotationList'/2
			(Rest2, [AtNot|_cor0])
		%% Line 1926
		<_cor8> when 'true' ->
		    let <_cor3> =
			%% Line 1927
			call 'lists':'reverse'
			    ([AtNot|_cor0])
		    in  %% Line 1927
			{_cor3,Rest}
	      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'parse_AtNotation'/1 =
    %% Line 1930
    fun (_cor0) ->
	case _cor0 of
	  <[{'@',_cor9}|[{'.',_cor10}|Rest]]> when 'true' ->
	      %% Line 1931
	      case apply 'parse_ComponentIdList'/1
		       (Rest) of
		<{CIdList,Rest2}> when 'true' ->
		    %% Line 1932
		    {{'innermost',CIdList},Rest2}
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1933
	  <[{'@',_cor11}|Rest]> when 'true' ->
	      %% Line 1934
	      case apply 'parse_ComponentIdList'/1
		       (Rest) of
		<{CIdList,Rest2}> when 'true' ->
		    %% Line 1935
		    {{'outermost',CIdList},Rest2}
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1936
	  <Tokens> when 'true' ->
	      let <_cor6> =
		  %% Line 1937
		  call 'erlang':'hd'
		      (Tokens)
	      in  let <_cor7> =
		      %% Line 1937
		      apply 'get_line'/1
			  (_cor6)
		  in  let <_cor5> =
			  %% Line 1937
			  call 'erlang':'get'
			      ('asn1_module')
		      in  let <_cor3> =
			      %% Line 1938
			      call 'erlang':'hd'
				  (Tokens)
			  in  let <_cor4> =
				  %% Line 1938
				  apply 'get_token'/1
				      (_cor3)
			      in  %% Line 1937
				  call 'erlang':'throw'
				      ({'asn1_error',{_cor7,_cor5,%% Line 1938
								  ['got'|[_cor4|['expected'|[['@'|['@.']]]]]]}})
	end
'parse_ComponentIdList'/1 =
    %% Line 1940
    fun (_cor0) ->
	%% Line 1941
	apply 'parse_ComponentIdList'/2
	    (_cor0, [])
'parse_ComponentIdList'/2 =
    %% Line 1943
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[Id = {'identifier',_cor12,_cor13}|[{'.',_cor14}|Rest]],Acc> when 'true' ->
	      let <_cor2> =
		  %% Line 1944
		  apply 'identifier2Extvalueref'/1
		      (Id)
	      in  %% Line 1944
		  apply 'parse_ComponentIdList'/2
		      (Rest, [_cor2|Acc])
	  %% Line 1945
	  <[Id = {'identifier',_cor15,_cor16}|Rest],Acc> when 'true' ->
	      let <_cor3> =
		  %% Line 1946
		  apply 'identifier2Extvalueref'/1
		      (Id)
	      in  let <_cor4> =
		      %% Line 1946
		      call 'lists':'reverse'
			  ([_cor3|Acc])
		  in  %% Line 1946
		      {_cor4,Rest}
	  %% Line 1947
	  <Tokens,_cor17> when 'true' ->
	      let <_cor8> =
		  %% Line 1948
		  call 'erlang':'hd'
		      (Tokens)
	      in  let <_cor9> =
		      %% Line 1948
		      apply 'get_line'/1
			  (_cor8)
		  in  let <_cor7> =
			  %% Line 1948
			  call 'erlang':'get'
			      ('asn1_module')
		      in  let <_cor5> =
			      %% Line 1949
			      call 'erlang':'hd'
				  (Tokens)
			  in  let <_cor6> =
				  %% Line 1949
				  apply 'get_token'/1
				      (_cor5)
			      in  %% Line 1948
				  call 'erlang':'throw'
				      ({'asn1_error',{_cor9,_cor7,%% Line 1949
								  ['got'|[_cor6|['expected'|[['identifier'|['identifier.']]]]]]}})
	end
'parse_ContentsConstraint'/1 =
    %% Line 1952
    fun (_cor0) ->
	case _cor0 of
	  <[{'CONTAINING',_cor11}|Rest]> when 'true' ->
	      %% Line 1953
	      case apply 'parse_Type'/1
		       (Rest) of
		<{Type,Rest2}> when 'true' ->
		    %% Line 1954
		    case Rest2 of
		      %% Line 1955
		      <[{'ENCODED',_cor12}|[{'BY',_cor13}|Rest3]]> when 'true' ->
			  %% Line 1956
			  case apply 'parse_Value'/1
				   (Rest3) of
			    <{Value,Rest4}> when 'true' ->
				%% Line 1957
				{{'contentsconstraint',Type,Value},Rest4}
			    ( <_cor2> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor2})
			      -| ['compiler_generated'] )
			  end
		      %% Line 1958
		      <_cor14> when 'true' ->
			  %% Line 1959
			  {{'contentsconstraint',Type,[]},Rest2}
		    end
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1961
	  <[{'ENCODED',_cor15}|[{'BY',_cor16}|Rest]]> when 'true' ->
	      %% Line 1962
	      case apply 'parse_Value'/1
		       (Rest) of
		<{Value,Rest2}> when 'true' ->
		    %% Line 1963
		    {{'contentsconstraint',[],Value},Rest2}
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1964
	  <Tokens> when 'true' ->
	      let <_cor8> =
		  %% Line 1965
		  call 'erlang':'hd'
		      (Tokens)
	      in  let <_cor9> =
		      %% Line 1965
		      apply 'get_line'/1
			  (_cor8)
		  in  let <_cor7> =
			  %% Line 1965
			  call 'erlang':'get'
			      ('asn1_module')
		      in  let <_cor5> =
			      %% Line 1966
			      call 'erlang':'hd'
				  (Tokens)
			  in  let <_cor6> =
				  %% Line 1966
				  apply 'get_token'/1
				      (_cor5)
			      in  %% Line 1965
				  call 'erlang':'throw'
				      ({'asn1_error',{_cor9,_cor7,%% Line 1966
								  ['got'|[_cor6|['expected'|['CONTAINING'|['or'|['ENCODED BY']]]]]]}})
	end
'parse_Governor'/1 =
    %% Line 1972
    fun (_cor0) ->
	let <Flist> =
	    %% Line 1973
	    [( 'parse_Type'/1
	       -| [{'id',{0,0,'-parse_Governor/1-fun-0-'}}] )|%% Line 1974
							      [( 'parse_DefinedObjectClass'/1
								 -| [{'id',{0,0,'-parse_Governor/1-fun-1-'}}] )|[]]]
	in  let <_cor2> =
		catch
		    %% Line 1975
		    apply 'parse_or'/2
			(_cor0, Flist)
	    in  %% Line 1975
		case _cor2 of
		  %% Line 1976
		  <{'EXIT',Reason}> when 'true' ->
		      %% Line 1977
		      call 'erlang':'exit'
			  (Reason)
		  %% Line 1978
		  <AsnErr = {'asn1_error',_cor5}> when 'true' ->
		      %% Line 1979
		      call 'erlang':'throw'
			  (AsnErr)
		  %% Line 1980
		  <Result> when 'true' ->
		      %% Line 1981
		      Result
		end
'parse_ActualParameter'/1 =
    %% Line 1984
    fun (_cor0) ->
	let <Flist> =
	    %% Line 1985
	    [( 'parse_Type'/1
	       -| [{'id',{0,0,'-parse_ActualParameter/1-fun-0-'}}] )|%% Line 1986
								     [( 'parse_Value'/1
									-| [{'id',{0,0,'-parse_ActualParameter/1-fun-1-'}}] )|%% Line 1987
															      [( 'parse_ValueSet'/1
																 -| [{'id',{0,0,'-parse_ActualParameter/1-fun-2-'}}] )|%% Line 1988
																						       [( 'parse_DefinedObjectClass'/1
																							  -| [{'id',{0,0,'-parse_ActualParameter/1-fun-3-'}}] )|%% Line 1989
																														[( 'parse_Object'/1
																														   -| [{'id',{0,0,'-parse_ActualParameter/1-fun-4-'}}] )|%% Line 1990
																																					 [( 'parse_ObjectSet'/1
																																					    -| [{'id',{0,0,'-parse_ActualParameter/1-fun-5-'}}] )|[]]]]]]]
	in  let <_cor2> =
		catch
		    %% Line 1991
		    apply 'parse_or'/2
			(_cor0, Flist)
	    in  %% Line 1991
		case _cor2 of
		  %% Line 1992
		  <{'EXIT',Reason}> when 'true' ->
		      %% Line 1993
		      call 'erlang':'exit'
			  (Reason)
		  %% Line 1994
		  <AsnErr = {'asn1_error',_cor5}> when 'true' ->
		      %% Line 1995
		      call 'erlang':'throw'
			  (AsnErr)
		  %% Line 1996
		  <Result> when 'true' ->
		      %% Line 1997
		      Result
		end
'parse_ParameterizedAssignment'/1 =
    %% Line 2000
    fun (_cor0) ->
	let <Flist> =
	    %% Line 2001
	    [( 'parse_ParameterizedTypeAssignment'/1
	       -| [{'id',{0,0,'-parse_ParameterizedAssignment/1-fun-0-'}}] )|%% Line 2002
									     [( 'parse_ParameterizedValueAssignment'/1
										-| [{'id',{0,0,'-parse_ParameterizedAssignment/1-fun-1-'}}] )|%% Line 2003
																	      [( 'parse_ParameterizedValueSetTypeAssignment'/1
																		 -| [{'id',{0,0,'-parse_ParameterizedAssignment/1-fun-2-'}}] )|%% Line 2004
																									       [( 'parse_ParameterizedObjectClassAssignment'/1
																										  -| [{'id',{0,0,'-parse_ParameterizedAssignment/1-fun-3-'}}] )|%% Line 2005
																																		[( 'parse_ParameterizedObjectAssignment'/1
																																		   -| [{'id',{0,0,'-parse_ParameterizedAssignment/1-fun-4-'}}] )|%% Line 2006
																																										 [( 'parse_ParameterizedObjectSetAssignment'/1
																																										    -| [{'id',{0,0,'-parse_ParameterizedAssignment/1-fun-5-'}}] )|[]]]]]]]
	in  let <_cor2> =
		catch
		    %% Line 2007
		    apply 'parse_or'/2
			(_cor0, Flist)
	    in  %% Line 2007
		case _cor2 of
		  %% Line 2008
		  <{'EXIT',Reason}> when 'true' ->
		      %% Line 2009
		      call 'erlang':'exit'
			  (Reason)
		  %% Line 2010
		  <AsnErr = {'asn1_error',_cor5}> when 'true' ->
		      %% Line 2011
		      call 'erlang':'throw'
			  (AsnErr)
		  %% Line 2012
		  <AsnAssErr = {'asn1_assignment_error',_cor6}> when 'true' ->
		      %% Line 2013
		      call 'erlang':'throw'
			  (AsnAssErr)
		  %% Line 2014
		  <Result> when 'true' ->
		      %% Line 2015
		      Result
		end
'parse_ParameterizedTypeAssignment'/1 =
    %% Line 2020
    fun (_cor0) ->
	case _cor0 of
	  <[{'typereference',L1,Name}|Rest]> when 'true' ->
	      %% Line 2021
	      case apply 'parse_ParameterList'/1
		       (Rest) of
		<{ParameterList,Rest2}> when 'true' ->
		    %% Line 2022
		    case Rest2 of
		      %% Line 2023
		      <[{'::=',_cor13}|Rest3]> when 'true' ->
			  %% Line 2024
			  case apply 'parse_Type'/1
				   (Rest3) of
			    <{Type,Rest4}> when 'true' ->
				%% Line 2025
				{{'ptypedef','false',L1,Name,ParameterList,Type},%% Line 2026
										 Rest4}
			    ( <_cor2> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor2})
			      -| ['compiler_generated'] )
			  end
		      %% Line 2027
		      <[H|_X_T]> when 'true' ->
			  let <_cor5> =
			      %% Line 2028
			      apply 'get_line'/1
				  (H)
			  in  let <_cor4> =
				  %% Line 2028
				  call 'erlang':'get'
				      ('asn1_module')
			      in  let <_cor3> =
				      %% Line 2029
				      apply 'get_token'/1
					  (H)
				  in  %% Line 2028
				      call 'erlang':'throw'
					  ({'asn1_error',{_cor5,_cor4,%% Line 2029
								      ['got'|[_cor3|['expected'|['::=']]]]}})
		      ( <_cor6> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor6})
			-| ['compiler_generated'] )
		    end
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2031
	  <Tokens> when 'true' ->
	      let <_cor10> =
		  %% Line 2032
		  call 'erlang':'hd'
		      (Tokens)
	      in  let <_cor11> =
		      %% Line 2032
		      apply 'get_line'/1
			  (_cor10)
		  in  let <_cor9> =
			  %% Line 2032
			  call 'erlang':'get'
			      ('asn1_module')
		      in  let <_cor7> =
			      %% Line 2033
			      call 'erlang':'hd'
				  (Tokens)
			  in  let <_cor8> =
				  %% Line 2033
				  apply 'get_token'/1
				      (_cor7)
			      in  %% Line 2032
				  call 'erlang':'throw'
				      ({'asn1_assignment_error',{_cor11,_cor9,%% Line 2033
									      ['got'|[_cor8|['expected'|['typereference']]]]}})
	end
'parse_ParameterizedValueAssignment'/1 =
    %% Line 2038
    fun (_cor0) ->
	case _cor0 of
	  <[{'identifier',L1,Name}|Rest]> when 'true' ->
	      %% Line 2039
	      case apply 'parse_ParameterList'/1
		       (Rest) of
		<{ParameterList,Rest2}> when 'true' ->
		    %% Line 2040
		    case apply 'parse_Type'/1
			     (Rest2) of
		      <{Type,Rest3}> when 'true' ->
			  %% Line 2041
			  case Rest3 of
			    %% Line 2042
			    <[{'::=',_cor14}|Rest4]> when 'true' ->
				%% Line 2043
				case apply 'parse_Value'/1
					 (Rest4) of
				  <{Value,Rest5}> when 'true' ->
				      %% Line 2044
				      {{'pvaluedef','false',L1,Name,ParameterList,Type,%% Line 2045
										       Value},%% Line 2045
											      Rest5}
				  ( <_cor3> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor3})
				    -| ['compiler_generated'] )
				end
			    %% Line 2046
			    <[H|_X_T]> when 'true' ->
				let <_cor6> =
				    %% Line 2047
				    apply 'get_line'/1
					(H)
				in  let <_cor5> =
					%% Line 2047
					call 'erlang':'get'
					    ('asn1_module')
				    in  let <_cor4> =
					    %% Line 2048
					    apply 'get_token'/1
						(H)
					in  %% Line 2047
					    call 'erlang':'throw'
						({'asn1_error',{_cor6,_cor5,%% Line 2048
									    ['got'|[_cor4|['expected'|['::=']]]]}})
			    ( <_cor7> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor7})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor2> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor2})
			-| ['compiler_generated'] )
		    end
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2050
	  <Tokens> when 'true' ->
	      let <_cor11> =
		  %% Line 2051
		  call 'erlang':'hd'
		      (Tokens)
	      in  let <_cor12> =
		      %% Line 2051
		      apply 'get_line'/1
			  (_cor11)
		  in  let <_cor10> =
			  %% Line 2051
			  call 'erlang':'get'
			      ('asn1_module')
		      in  let <_cor8> =
			      %% Line 2052
			      call 'erlang':'hd'
				  (Tokens)
			  in  let <_cor9> =
				  %% Line 2052
				  apply 'get_token'/1
				      (_cor8)
			      in  %% Line 2051
				  call 'erlang':'throw'
				      ({'asn1_assignment_error',{_cor12,_cor10,%% Line 2052
									       ['got'|[_cor9|['expected'|['identifier']]]]}})
	end
'parse_ParameterizedValueSetTypeAssignment'/1 =
    %% Line 2056
    fun (_cor0) ->
	case _cor0 of
	  <[{'typereference',L1,Name}|Rest]> when 'true' ->
	      %% Line 2057
	      case apply 'parse_ParameterList'/1
		       (Rest) of
		<{ParameterList,Rest2}> when 'true' ->
		    %% Line 2058
		    case apply 'parse_Type'/1
			     (Rest2) of
		      <{Type,Rest3}> when 'true' ->
			  %% Line 2059
			  case Rest3 of
			    %% Line 2060
			    <[{'::=',_cor14}|Rest4]> when 'true' ->
				%% Line 2061
				case apply 'parse_ValueSet'/1
					 (Rest4) of
				  <{ValueSet,Rest5}> when 'true' ->
				      %% Line 2062
				      {{'pvaluesetdef','false',L1,Name,ParameterList,%% Line 2063
										     Type,%% Line 2063
											  ValueSet},%% Line 2063
												    Rest5}
				  ( <_cor3> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor3})
				    -| ['compiler_generated'] )
				end
			    %% Line 2064
			    <[H|_X_T]> when 'true' ->
				let <_cor6> =
				    %% Line 2065
				    apply 'get_line'/1
					(H)
				in  let <_cor5> =
					%% Line 2065
					call 'erlang':'get'
					    ('asn1_module')
				    in  let <_cor4> =
					    %% Line 2066
					    apply 'get_token'/1
						(H)
					in  %% Line 2065
					    call 'erlang':'throw'
						({'asn1_error',{_cor6,_cor5,%% Line 2066
									    ['got'|[_cor4|['expected'|['::=']]]]}})
			    ( <_cor7> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor7})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor2> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor2})
			-| ['compiler_generated'] )
		    end
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2068
	  <Tokens> when 'true' ->
	      let <_cor11> =
		  %% Line 2069
		  call 'erlang':'hd'
		      (Tokens)
	      in  let <_cor12> =
		      %% Line 2069
		      apply 'get_line'/1
			  (_cor11)
		  in  let <_cor10> =
			  %% Line 2069
			  call 'erlang':'get'
			      ('asn1_module')
		      in  let <_cor8> =
			      %% Line 2070
			      call 'erlang':'hd'
				  (Tokens)
			  in  let <_cor9> =
				  %% Line 2070
				  apply 'get_token'/1
				      (_cor8)
			      in  %% Line 2069
				  call 'erlang':'throw'
				      ({'asn1_assignment_error',{_cor12,_cor10,%% Line 2070
									       ['got'|[_cor9|['expected'|['typereference']]]]}})
	end
'parse_ParameterizedObjectClassAssignment'/1 =
    %% Line 2075
    fun (_cor0) ->
	case _cor0 of
	  <[{'typereference',L1,Name}|Rest]> when 'true' ->
	      %% Line 2076
	      case apply 'parse_ParameterList'/1
		       (Rest) of
		<{ParameterList,Rest2}> when 'true' ->
		    %% Line 2077
		    case Rest2 of
		      %% Line 2078
		      <[{'::=',_cor13}|Rest3]> when 'true' ->
			  %% Line 2079
			  case apply 'parse_ObjectClass'/1
				   (Rest3) of
			    <{Class,Rest4}> when 'true' ->
				%% Line 2080
				{{'ptypedef','false',L1,Name,ParameterList,Class},%% Line 2081
										  Rest4}
			    ( <_cor2> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor2})
			      -| ['compiler_generated'] )
			  end
		      %% Line 2082
		      <[H|_X_T]> when 'true' ->
			  let <_cor5> =
			      %% Line 2083
			      apply 'get_line'/1
				  (H)
			  in  let <_cor4> =
				  %% Line 2083
				  call 'erlang':'get'
				      ('asn1_module')
			      in  let <_cor3> =
				      %% Line 2084
				      apply 'get_token'/1
					  (H)
				  in  %% Line 2083
				      call 'erlang':'throw'
					  ({'asn1_error',{_cor5,_cor4,%% Line 2084
								      ['got'|[_cor3|['expected'|['::=']]]]}})
		      ( <_cor6> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor6})
			-| ['compiler_generated'] )
		    end
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2086
	  <Tokens> when 'true' ->
	      let <_cor10> =
		  %% Line 2087
		  call 'erlang':'hd'
		      (Tokens)
	      in  let <_cor11> =
		      %% Line 2087
		      apply 'get_line'/1
			  (_cor10)
		  in  let <_cor9> =
			  %% Line 2087
			  call 'erlang':'get'
			      ('asn1_module')
		      in  let <_cor7> =
			      %% Line 2088
			      call 'erlang':'hd'
				  (Tokens)
			  in  let <_cor8> =
				  %% Line 2088
				  apply 'get_token'/1
				      (_cor7)
			      in  %% Line 2087
				  call 'erlang':'throw'
				      ({'asn1_assignment_error',{_cor11,_cor9,%% Line 2088
									      ['got'|[_cor8|['expected'|['typereference']]]]}})
	end
'parse_ParameterizedObjectAssignment'/1 =
    %% Line 2093
    fun (_cor0) ->
	case _cor0 of
	  <[{'identifier',L1,Name}|Rest]> when 'true' ->
	      %% Line 2094
	      case apply 'parse_ParameterList'/1
		       (Rest) of
		<{ParameterList,Rest2}> when 'true' ->
		    %% Line 2095
		    case apply 'parse_DefinedObjectClass'/1
			     (Rest2) of
		      <{Class,Rest3}> when 'true' ->
			  %% Line 2096
			  case Rest3 of
			    %% Line 2097
			    <[{'::=',_cor14}|Rest4]> when 'true' ->
				%% Line 2098
				case apply 'parse_Object'/1
					 (Rest4) of
				  <{Object,Rest5}> when 'true' ->
				      %% Line 2099
				      {{'pobjectdef','false',L1,Name,ParameterList,%% Line 2100
										   Class,%% Line 2100
											 Object},%% Line 2100
												 Rest5}
				  ( <_cor3> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor3})
				    -| ['compiler_generated'] )
				end
			    %% Line 2101
			    <[H|_X_T]> when 'true' ->
				let <_cor6> =
				    %% Line 2102
				    apply 'get_line'/1
					(H)
				in  let <_cor5> =
					%% Line 2102
					call 'erlang':'get'
					    ('asn1_module')
				    in  let <_cor4> =
					    %% Line 2103
					    apply 'get_token'/1
						(H)
					in  %% Line 2102
					    call 'erlang':'throw'
						({'asn1_error',{_cor6,_cor5,%% Line 2103
									    ['got'|[_cor4|['expected'|['::=']]]]}})
			    ( <_cor7> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor7})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor2> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor2})
			-| ['compiler_generated'] )
		    end
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2107
	  <Tokens> when 'true' ->
	      let <_cor11> =
		  %% Line 2108
		  call 'erlang':'hd'
		      (Tokens)
	      in  let <_cor12> =
		      %% Line 2108
		      apply 'get_line'/1
			  (_cor11)
		  in  let <_cor10> =
			  %% Line 2108
			  call 'erlang':'get'
			      ('asn1_module')
		      in  let <_cor8> =
			      %% Line 2109
			      call 'erlang':'hd'
				  (Tokens)
			  in  let <_cor9> =
				  %% Line 2109
				  apply 'get_token'/1
				      (_cor8)
			      in  %% Line 2108
				  call 'erlang':'throw'
				      ({'asn1_assignment_error',{_cor12,_cor10,%% Line 2109
									       ['got'|[_cor9|['expected'|['identifier']]]]}})
	end
'parse_ParameterizedObjectSetAssignment'/1 =
    %% Line 2113
    fun (_cor0) ->
	case _cor0 of
	  <[{'typereference',L1,Name}|Rest]> when 'true' ->
	      %% Line 2114
	      case apply 'parse_ParameterList'/1
		       (Rest) of
		<{ParameterList,Rest2}> when 'true' ->
		    %% Line 2115
		    case apply 'parse_DefinedObjectClass'/1
			     (Rest2) of
		      <{Class,Rest3}> when 'true' ->
			  %% Line 2116
			  case Rest3 of
			    %% Line 2117
			    <[{'::=',_cor14}|Rest4]> when 'true' ->
				%% Line 2118
				case apply 'parse_ObjectSet'/1
					 (Rest4) of
				  <{ObjectSet,Rest5}> when 'true' ->
				      %% Line 2119
				      {{'pobjectsetdef','false',L1,Name,ParameterList,%% Line 2120
										      Class,%% Line 2120
											    ObjectSet},%% Line 2120
												       Rest5}
				  ( <_cor3> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor3})
				    -| ['compiler_generated'] )
				end
			    %% Line 2121
			    <[H|_X_T]> when 'true' ->
				let <_cor6> =
				    %% Line 2122
				    apply 'get_line'/1
					(H)
				in  let <_cor5> =
					%% Line 2122
					call 'erlang':'get'
					    ('asn1_module')
				    in  let <_cor4> =
					    %% Line 2123
					    apply 'get_token'/1
						(H)
					in  %% Line 2122
					    call 'erlang':'throw'
						({'asn1_error',{_cor6,_cor5,%% Line 2123
									    ['got'|[_cor4|['expected'|['::=']]]]}})
			    ( <_cor7> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor7})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor2> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor2})
			-| ['compiler_generated'] )
		    end
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2127
	  <Tokens> when 'true' ->
	      let <_cor11> =
		  %% Line 2128
		  call 'erlang':'hd'
		      (Tokens)
	      in  let <_cor12> =
		      %% Line 2128
		      apply 'get_line'/1
			  (_cor11)
		  in  let <_cor10> =
			  %% Line 2128
			  call 'erlang':'get'
			      ('asn1_module')
		      in  let <_cor8> =
			      %% Line 2129
			      call 'erlang':'hd'
				  (Tokens)
			  in  let <_cor9> =
				  %% Line 2129
				  apply 'get_token'/1
				      (_cor8)
			      in  %% Line 2128
				  call 'erlang':'throw'
				      ({'asn1_assignment_error',{_cor12,_cor10,%% Line 2129
									       ['got'|[_cor9|['expected'|['typereference']]]]}})
	end
'parse_ParameterList'/1 =
    %% Line 2140
    fun (_cor0) ->
	case _cor0 of
	  <[{'{',_cor7}|Rest]> when 'true' ->
	      %% Line 2141
	      apply 'parse_ParameterList'/2
		  (Rest, [])
	  %% Line 2142
	  <Tokens> when 'true' ->
	      let <_cor4> =
		  %% Line 2143
		  call 'erlang':'hd'
		      (Tokens)
	      in  let <_cor5> =
		      %% Line 2143
		      apply 'get_line'/1
			  (_cor4)
		  in  let <_cor3> =
			  %% Line 2143
			  call 'erlang':'get'
			      ('asn1_module')
		      in  let <_cor1> =
			      %% Line 2144
			      call 'erlang':'hd'
				  (Tokens)
			  in  let <_cor2> =
				  %% Line 2144
				  apply 'get_token'/1
				      (_cor1)
			      in  %% Line 2143
				  call 'erlang':'throw'
				      ({'asn1_error',{_cor5,_cor3,%% Line 2144
								  ['got'|[_cor2|['expected'|['{']]]]}})
	end
'parse_ParameterList'/2 =
    %% Line 2146
    fun (_cor1,_cor0) ->
	%% Line 2147
	case apply 'parse_Parameter'/1
		 (_cor1) of
	  <{Parameter,Rest}> when 'true' ->
	      %% Line 2148
	      case Rest of
		%% Line 2149
		<[{',',_cor10}|Rest2]> when 'true' ->
		    %% Line 2150
		    apply 'parse_ParameterList'/2
			(Rest2, [Parameter|_cor0])
		%% Line 2151
		<[{'}',_cor11}|Rest3]> when 'true' ->
		    let <_cor3> =
			%% Line 2152
			call 'lists':'reverse'
			    ([Parameter|_cor0])
		    in  %% Line 2152
			{_cor3,Rest3}
		%% Line 2153
		<[H|_X_T]> when 'true' ->
		    let <_cor6> =
			%% Line 2154
			apply 'get_line'/1
			    (H)
		    in  let <_cor5> =
			    %% Line 2154
			    call 'erlang':'get'
				('asn1_module')
			in  let <_cor4> =
				%% Line 2155
				apply 'get_token'/1
				    (H)
			    in  %% Line 2154
				call 'erlang':'throw'
				    ({'asn1_error',{_cor6,_cor5,%% Line 2155
								['got'|[_cor4|['expected'|[[','|['}']]]]]]}})
		( <_cor7> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor7})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'parse_Parameter'/1 =
    %% Line 2158
    fun (_cor0) ->
	let <Flist> =
	    %% Line 2159
	    [( 'parse_ParamGovAndRef'/1
	       -| [{'id',{0,0,'-parse_Parameter/1-fun-0-'}}] )|%% Line 2160
							       [( 'parse_Reference'/1
								  -| [{'id',{0,0,'-parse_Parameter/1-fun-1-'}}] )|[]]]
	in  let <_cor2> =
		catch
		    %% Line 2161
		    apply 'parse_or'/2
			(_cor0, Flist)
	    in  %% Line 2161
		case _cor2 of
		  %% Line 2162
		  <{'EXIT',Reason}> when 'true' ->
		      %% Line 2163
		      call 'erlang':'exit'
			  (Reason)
		  %% Line 2164
		  <AsnErr = {'asn1_error',_cor5}> when 'true' ->
		      %% Line 2165
		      call 'erlang':'throw'
			  (AsnErr)
		  %% Line 2166
		  <Result> when 'true' ->
		      %% Line 2167
		      Result
		end
'parse_ParamGovAndRef'/1 =
    %% Line 2170
    fun (_cor0) ->
	%% Line 2171
	case apply 'parse_ParamGovernor'/1
		 (_cor0) of
	  <{ParamGov,Rest}> when 'true' ->
	      %% Line 2172
	      case Rest of
		%% Line 2173
		<[{':',_cor8}|Rest2]> when 'true' ->
		    %% Line 2174
		    case apply 'parse_Reference'/1
			     (Rest2) of
		      <{Ref,Rest3}> when 'true' ->
			  %% Line 2175
			  {{ParamGov,Ref},Rest3}
		      ( <_cor2> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor2})
			-| ['compiler_generated'] )
		    end
		%% Line 2176
		<[H|_X_T]> when 'true' ->
		    let <_cor5> =
			%% Line 2177
			apply 'get_line'/1
			    (H)
		    in  let <_cor4> =
			    %% Line 2177
			    call 'erlang':'get'
				('asn1_module')
			in  let <_cor3> =
				%% Line 2178
				apply 'get_token'/1
				    (H)
			    in  %% Line 2177
				call 'erlang':'throw'
				    ({'asn1_error',{_cor5,_cor4,%% Line 2178
								['got'|[_cor3|['expected'|[':']]]]}})
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor6})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'parse_ParamGovernor'/1 =
    %% Line 2181
    fun (_cor0) ->
	let <Flist> =
	    %% Line 2182
	    [( 'parse_Governor'/1
	       -| [{'id',{0,0,'-parse_ParamGovernor/1-fun-0-'}}] )|%% Line 2183
								   [( 'parse_Reference'/1
								      -| [{'id',{0,0,'-parse_ParamGovernor/1-fun-1-'}}] )|[]]]
	in  let <_cor2> =
		catch
		    %% Line 2184
		    apply 'parse_or'/2
			(_cor0, Flist)
	    in  %% Line 2184
		case _cor2 of
		  %% Line 2185
		  <{'EXIT',Reason}> when 'true' ->
		      %% Line 2186
		      call 'erlang':'exit'
			  (Reason)
		  %% Line 2187
		  <AsnErr = {'asn1_error',_cor5}> when 'true' ->
		      %% Line 2188
		      call 'erlang':'throw'
			  (AsnErr)
		  %% Line 2189
		  <Result> when 'true' ->
		      %% Line 2190
		      Result
		end
'parse_SimpleDefinedType'/1 =
    %% Line 2202
    fun (_cor0) ->
	case _cor0 of
	  <[{'typereference',L1,ModuleName}|[{'.',_cor8}|%% Line 2203
							 [{'typereference',_cor9,TypeName}|Rest]]]> when 'true' ->
	      %% Line 2204
	      {{'Externaltypereference',L1,ModuleName,%% Line 2205
						      TypeName},%% Line 2205
								Rest}
	  %% Line 2206
	  <[Tref = {'typereference',_cor10,_cor11}|Rest]> when 'true' ->
	      let <_cor1> =
		  %% Line 2209
		  apply 'tref2Exttref'/1
		      (Tref)
	      in  %% Line 2209
		  {_cor1,Rest}
	  %% Line 2210
	  <Tokens> when 'true' ->
	      let <_cor5> =
		  %% Line 2211
		  call 'erlang':'hd'
		      (Tokens)
	      in  let <_cor6> =
		      %% Line 2211
		      apply 'get_line'/1
			  (_cor5)
		  in  let <_cor4> =
			  %% Line 2211
			  call 'erlang':'get'
			      ('asn1_module')
		      in  let <_cor2> =
			      %% Line 2212
			      call 'erlang':'hd'
				  (Tokens)
			  in  let <_cor3> =
				  %% Line 2212
				  apply 'get_token'/1
				      (_cor2)
			      in  %% Line 2211
				  call 'erlang':'throw'
				      ({'asn1_error',{_cor6,_cor4,%% Line 2212
								  ['got'|[_cor3|['expected'|[['typereference'|['typereference.typereference']]]]]]}})
	end
'parse_SimpleDefinedValue'/1 =
    %% Line 2215
    fun (_cor0) ->
	case _cor0 of
	  <[{'typereference',L1,ModuleName}|[{'.',_cor8}|%% Line 2216
							 [{'identifier',_cor9,Value}|Rest]]]> when 'true' ->
	      %% Line 2217
	      {{'simpledefinedvalue',{'Externalvaluereference',L1,ModuleName,%% Line 2218
									     Value}},%% Line 2218
										     Rest}
	  %% Line 2219
	  <[Id = {'identifier',_cor10,_X_Value}|Rest]> when 'true' ->
	      let <_cor1> =
		  %% Line 2220
		  apply 'identifier2Extvalueref'/1
		      (Id)
	      in  %% Line 2220
		  {{'simpledefinedvalue',_cor1},Rest}
	  %% Line 2221
	  <Tokens> when 'true' ->
	      let <_cor5> =
		  %% Line 2222
		  call 'erlang':'hd'
		      (Tokens)
	      in  let <_cor6> =
		      %% Line 2222
		      apply 'get_line'/1
			  (_cor5)
		  in  let <_cor4> =
			  %% Line 2222
			  call 'erlang':'get'
			      ('asn1_module')
		      in  let <_cor2> =
			      %% Line 2223
			      call 'erlang':'hd'
				  (Tokens)
			  in  let <_cor3> =
				  %% Line 2223
				  apply 'get_token'/1
				      (_cor2)
			      in  %% Line 2222
				  call 'erlang':'throw'
				      ({'asn1_error',{_cor6,_cor4,%% Line 2223
								  ['got'|[_cor3|['expected'|[['typereference.identifier'|['identifier']]]]]]}})
	end
'parse_ParameterizedType'/1 =
    %% Line 2226
    fun (_cor0) ->
	%% Line 2227
	case apply 'parse_SimpleDefinedType'/1
		 (_cor0) of
	  <{Type,Rest}> when 'true' ->
	      %% Line 2228
	      case apply 'parse_ActualParameterList'/1
		       (Rest) of
		<{Params,Rest2}> when 'true' ->
		    %% Line 2229
		    {{'pt',Type,Params},Rest2}
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'parse_ParameterizedValue'/1 =
    %% Line 2231
    fun (_cor0) ->
	%% Line 2232
	case apply 'parse_SimpleDefinedValue'/1
		 (_cor0) of
	  <{Value,Rest}> when 'true' ->
	      %% Line 2233
	      case apply 'parse_ActualParameterList'/1
		       (Rest) of
		<{Params,Rest2}> when 'true' ->
		    %% Line 2234
		    {{'pv',Value,Params},Rest2}
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'parse_ParameterizedObjectClass'/1 =
    %% Line 2236
    fun (_cor0) ->
	%% Line 2237
	case apply 'parse_DefinedObjectClass'/1
		 (_cor0) of
	  <{Type,Rest}> when 'true' ->
	      %% Line 2238
	      case apply 'parse_ActualParameterList'/1
		       (Rest) of
		<{Params,Rest2}> when 'true' ->
		    %% Line 2239
		    {{'poc',Type,Params},Rest2}
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'parse_ParameterizedObjectSet'/1 =
    %% Line 2241
    fun (_cor0) ->
	%% Line 2242
	case apply 'parse_DefinedObjectSet'/1
		 (_cor0) of
	  <{ObjectSet,Rest}> when 'true' ->
	      %% Line 2243
	      case apply 'parse_ActualParameterList'/1
		       (Rest) of
		<{Params,Rest2}> when 'true' ->
		    %% Line 2244
		    {{'pos',ObjectSet,Params},Rest2}
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'parse_ParameterizedObject'/1 =
    %% Line 2246
    fun (_cor0) ->
	%% Line 2247
	case apply 'parse_DefinedObject'/1
		 (_cor0) of
	  <{Object,Rest}> when 'true' ->
	      %% Line 2248
	      case apply 'parse_ActualParameterList'/1
		       (Rest) of
		<{Params,Rest2}> when 'true' ->
		    %% Line 2249
		    {{'po',Object,Params},Rest2}
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'parse_ActualParameterList'/1 =
    %% Line 2251
    fun (_cor0) ->
	case _cor0 of
	  <[{'{',_cor7}|Rest]> when 'true' ->
	      %% Line 2252
	      apply 'parse_ActualParameterList'/2
		  (Rest, [])
	  %% Line 2253
	  <Tokens> when 'true' ->
	      let <_cor4> =
		  %% Line 2254
		  call 'erlang':'hd'
		      (Tokens)
	      in  let <_cor5> =
		      %% Line 2254
		      apply 'get_line'/1
			  (_cor4)
		  in  let <_cor3> =
			  %% Line 2254
			  call 'erlang':'get'
			      ('asn1_module')
		      in  let <_cor1> =
			      %% Line 2255
			      call 'erlang':'hd'
				  (Tokens)
			  in  let <_cor2> =
				  %% Line 2255
				  apply 'get_token'/1
				      (_cor1)
			      in  %% Line 2254
				  call 'erlang':'throw'
				      ({'asn1_error',{_cor5,_cor3,%% Line 2255
								  ['got'|[_cor2|['expected'|['{']]]]}})
	end
'parse_ActualParameterList'/2 =
    %% Line 2257
    fun (_cor1,_cor0) ->
	%% Line 2258
	case apply 'parse_ActualParameter'/1
		 (_cor1) of
	  <{Parameter,Rest}> when 'true' ->
	      %% Line 2259
	      case Rest of
		%% Line 2260
		<[{',',_cor10}|Rest2]> when 'true' ->
		    %% Line 2261
		    apply 'parse_ActualParameterList'/2
			(Rest2, [Parameter|_cor0])
		%% Line 2262
		<[{'}',_cor11}|Rest3]> when 'true' ->
		    let <_cor3> =
			%% Line 2263
			call 'lists':'reverse'
			    ([Parameter|_cor0])
		    in  %% Line 2263
			{_cor3,Rest3}
		%% Line 2264
		<[H|_X_T]> when 'true' ->
		    let <_cor6> =
			%% Line 2265
			apply 'get_line'/1
			    (H)
		    in  let <_cor5> =
			    %% Line 2265
			    call 'erlang':'get'
				('asn1_module')
			in  let <_cor4> =
				%% Line 2266
				apply 'get_token'/1
				    (H)
			    in  %% Line 2265
				call 'erlang':'throw'
				    ({'asn1_error',{_cor6,_cor5,%% Line 2266
								['got'|[_cor4|['expected'|[[','|['}']]]]]]}})
		( <_cor7> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor7})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'is_word'/1 =
    %% Line 2279
    fun (_cor0) ->
	%% Line 2280
	case apply 'not_allowed_word'/1
		 (_cor0) of
	  %% Line 2281
	  <'true'> when 'true' ->
	      'false'
	  %% Line 2282
	  <_cor9> when 'true' ->
	      %% Line 2283
	      case <> of
		%% Line 2284
		<>
		    when call 'erlang':'is_atom'
			  (_cor0) ->
		    let <Item> =
			%% Line 2285
			call 'erlang':'atom_to_list'
			    (_cor0)
		    in  %% Line 2286
			apply 'is_word'/1
			    (Item)
		%% Line 2287
		<>
		    when try
			  let <_cor2> =
			      call 'erlang':'is_list'
				  (_cor0)
			  in  let <_cor3> =
				  call 'erlang':'length'
				      (_cor0)
			      in  let <_cor4> =
				      call 'erlang':'=='
					  (_cor3, 1)
				  in  call 'erlang':'and'
					  (_cor2, _cor4)
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false' ->
		    %% Line 2288
		    apply 'check_one_char_word'/1
			(_cor0)
		%% Line 2289
		<>
		    when call 'erlang':'is_list'
			  (_cor0) ->
		    %% Line 2290
		    case _cor0 of
		      <[A|Rest]> when 'true' ->
			  %% Line 2291
			  case apply 'check_first'/1
				   (A) of
			    %% Line 2292
			    <'true'> when 'true' ->
				%% Line 2293
				apply 'check_rest'/1
				    (Rest)
			    %% Line 2294
			    <_cor10> when 'true' ->
				%% Line 2295
				'false'
			  end
		      ( <_cor5> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor5})
			-| ['compiler_generated'] )
		    end
		( <> when 'true' ->
		      primop 'match_fail'
			  ('if_clause')
		  -| ['compiler_generated'] )
	      end
	end
'not_allowed_word'/1 =
    %% Line 2300
    fun (_cor0) ->
	%% Line 2301
	call 'lists':'member'
	    (_cor0, [[66|[73|[84]]]|[[66|[79|[79|[76|[69|[65|[78]]]]]]]|[[67|[72|[65|[82|[65|[67|[84|[69|[82]]]]]]]]]|[[67|[72|[79|[73|[67|[69]]]]]]|[[69|[77|[66|[69|[68|[68|[69|[68]]]]]]]]|[[69|[78|[68]]]|[[69|[78|[85|[77|[69|[82|[65|[84|[69|[68]]]]]]]]]]|[[69|[88|[84|[69|[82|[78|[65|[76]]]]]]]]|[[70|[65|[76|[83|[69]]]]]|[[73|[78|[83|[84|[65|[78|[67|[69]]]]]]]]|[[73|[78|[84|[69|[71|[69|[82]]]]]]]|[[73|[78|[84|[69|[82|[83|[69|[67|[84|[73|[79|[78]]]]]]]]]]]]|[[77|[73|[78|[85|[83|[45|[73|[78|[70|[73|[78|[73|[84|[89]]]]]]]]]]]]]]|[[78|[85|[76|[76]]]]|[[79|[66|[74|[69|[67|[84]]]]]]|[[79|[67|[84|[69|[84]]]]]|[[80|[76|[85|[83|[45|[73|[78|[70|[73|[78|[73|[84|[89]]]]]]]]]]]]]|[[82|[69|[65|[76]]]]|[[83|[69|[81|[85|[69|[78|[67|[69]]]]]]]]|[[83|[69|[84]]]|[[84|[82|[85|[69]]]]|[[85|[78|[73|[79|[78]]]]]]]]]]]]]]]]]]]]]]]]]]])
'check_one_char_word'/1 =
    %% Line 2324
    fun (_cor0) ->
	case _cor0 of
	  <[A|[]]>
	      when let <_cor1> =
		    call 'erlang':'=<'
			(65, A)
		in  let <_cor2> =
			call 'erlang':'>='
			    (90, A)
		    in  call 'erlang':'and'
			    (_cor1, _cor2) ->
	      %% Line 2325
	      'true'
	  %% Line 2326
	  <[_cor4|[]]> when 'true' ->
	      %% Line 2327
	      'false'
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'check_one_char_word',1}}] )
	    -| ['compiler_generated'] )
	end
'check_first'/1 =
    %% Line 2329
    fun (_cor0) ->
	case _cor0 of
	  <A>
	      when let <_cor1> =
		    call 'erlang':'=<'
			(65, _cor0)
		in  let <_cor2> =
			call 'erlang':'>='
			    (90, _cor0)
		    in  call 'erlang':'and'
			    (_cor1, _cor2) ->
	      %% Line 2330
	      'true'
	  %% Line 2331
	  <_cor4> when 'true' ->
	      %% Line 2332
	      'false'
	end
'check_rest'/1 =
    %% Line 2334
    fun (_cor0) ->
	case _cor0 of
	  <[R|[_cor6|_X_Rs]]>
	      when let <_cor7> =
		    call 'erlang':'=:='
			(_cor6, R)
		in  let <_cor8> =
			call 'erlang':'=='
			    (45, R)
		    in  call 'erlang':'and'
			    (_cor7, _cor8) ->
	      %% Line 2335
	      'false'
	  %% Line 2336
	  <[R|[]]>
	      when call 'erlang':'=='
		    (45,
		     R) ->
	      %% Line 2337
	      'false'
	  %% Line 2338
	  <[R|Rs]>
	      when let <_cor3> =
		    let <_cor1> =
			call 'erlang':'=<'
			    (65, R)
		    in  let <_cor2> =
			    call 'erlang':'>='
				(90, R)
			in  call 'erlang':'and'
				(_cor1, _cor2)
		in  let <_cor4> =
			call 'erlang':'=='
			    (45, R)
		    in  call 'erlang':'or'
			    (_cor3, _cor4) ->
	      %% Line 2339
	      apply 'check_rest'/1
		  (Rs)
	  %% Line 2340
	  <[]> when 'true' ->
	      %% Line 2341
	      'true'
	  %% Line 2342
	  <_cor9> when 'true' ->
	      %% Line 2343
	      'false'
	end
'to_set'/1 =
    %% Line 2346
    fun (_cor0) ->
	case _cor0 of
	  <V>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      %% Line 2347
	      call 'ordsets':'from_list'
		  (V)
	  %% Line 2348
	  <V> when 'true' ->
	      %% Line 2349
	      call 'ordsets':'from_list'
		  ([V|[]])
	end
'parse_AlternativeTypeLists'/1 =
    %% Line 2351
    fun (_cor0) ->
	%% Line 2352
	apply 'parse_AlternativeTypeLists'/2
	    (_cor0, [])
'parse_AlternativeTypeLists'/2 =
    %% Line 2354
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Tokens = [{'identifier',_cor12,_cor13}|_X_Rest0],Clist> when 'true' ->
	      %% Line 2355
	      case apply 'parse_AlternativeTypeList'/2
		       (Tokens, []) of
		<{CompList,Rest1}> when 'true' ->
		    let <_cor3> =
			%% Line 2356
			call 'erlang':'++'
			    (Clist, CompList)
		    in  %% Line 2356
			apply 'parse_AlternativeTypeLists'/2
			    (Rest1, _cor3)
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2357
	  <[{'...',L1}|[{'!',_cor14}|Rest02]],Clist0> when 'true' ->
	      %% Line 2358
	      case apply 'parse_ExceptionIdentification'/1
		       (Rest02) of
		<{_cor15,Rest03}> when 'true' ->
		    let <_cor5> =
			%% Line 2360
			call 'erlang':'++'
			    (Clist0, [{'EXTENSIONMARK',L1,'undefined'}|[]])
		    in  %% Line 2360
			apply 'parse_AlternativeTypeLists2'/2
			    (Rest03, _cor5)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2361
	  <[{',',L1}|[{'...',_cor16}|[{'!',_cor17}|Rest02]]],Clist0>
	      when call 'erlang':'=/='
		    (Clist0,
		     []) ->
	      %% Line 2362
	      case apply 'parse_ExceptionIdentification'/1
		       (Rest02) of
		<{_cor18,Rest03}> when 'true' ->
		    let <_cor7> =
			%% Line 2364
			call 'erlang':'++'
			    (Clist0, [{'EXTENSIONMARK',L1,'undefined'}|[]])
		    in  %% Line 2364
			apply 'parse_AlternativeTypeLists2'/2
			    (Rest03, _cor7)
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor6})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2366
	  <[{',',_cor19}|[{'...',L1}|Rest02]],Clist0>
	      when call 'erlang':'=/='
		    (Clist0,
		     []) ->
	      let <_cor8> =
		  %% Line 2367
		  call 'erlang':'++'
		      (Clist0, [{'EXTENSIONMARK',L1,'undefined'}|[]])
	      in  %% Line 2367
		  apply 'parse_AlternativeTypeLists2'/2
		      (Rest02, _cor8)
	  %% Line 2368
	  <[{'...',L1}|Rest02],Clist0> when 'true' ->
	      let <_cor9> =
		  %% Line 2369
		  call 'erlang':'++'
		      (Clist0, [{'EXTENSIONMARK',L1,'undefined'}|[]])
	      in  %% Line 2369
		  apply 'parse_AlternativeTypeLists2'/2
		      (Rest02, _cor9)
	  %% Line 2370
	  <Tokens = [{'}',_X_L1}|_X_Rest02],Clist0> when 'true' ->
	      %% Line 2371
	      {Clist0,Tokens}
	  ( <_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10})
		  -| [{'function_name',{'parse_AlternativeTypeLists',2}}] )
	    -| ['compiler_generated'] )
	end
'parse_AlternativeTypeLists2'/2 =
    %% Line 2373
    fun (_cor1,_cor0) ->
	%% Line 2374
	case apply 'parse_ExtensionAdditionAlternatives'/2
		 (_cor1, _cor0) of
	  <{ExtAdd,Rest}> when 'true' ->
	      let <_cor3> =
		  %% Line 2375
		  call 'lists':'flatten'
		      (ExtAdd)
	      in  %% Line 2375
		  case apply 'parse_OptionalExtensionMarker'/2
			   (Rest, _cor3) of
		    <{Clist2,Rest2}> when 'true' ->
			%% Line 2376
			case Rest2 of
			  %% Line 2377
			  <[{',',_cor10}|Rest3]> when 'true' ->
			      %% Line 2378
			      case apply 'parse_AlternativeTypeList'/2
				       (Rest3, []) of
				<{CompList,Rest4}> when 'true' ->
				    let <_cor6> =
					%% Line 2379
					call 'erlang':'++'
					    (Clist2, CompList)
				    in  %% Line 2379
					{_cor6,Rest4}
				( <_cor5> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor5})
				  -| ['compiler_generated'] )
			      end
			  %% Line 2380
			  <_cor11> when 'true' ->
			      %% Line 2381
			      {Clist2,Rest2}
			end
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor4})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'parse_AlternativeTypeList'/2 =
    %% Line 2386
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{',',_cor17}|[Id = {'identifier',_cor18,_cor19}|Rest]],Acc>
	      when call 'erlang':'=/='
		    (Acc,
		     []) ->
	      %% Line 2387
	      case apply 'parse_NamedType'/1
		       ([Id|Rest]) of
		<{AlternativeType,Rest2}> when 'true' ->
		    %% Line 2388
		    apply 'parse_AlternativeTypeList'/2
			(Rest2, [AlternativeType|Acc])
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2389
	  <Tokens = [{'}',_cor20}|_cor21],Acc> when 'true' ->
	      let <_cor3> =
		  %% Line 2390
		  call 'lists':'reverse'
		      (Acc)
	      in  %% Line 2390
		  {_cor3,Tokens}
	  %% Line 2391
	  <Tokens = [{']',_cor22}|[{']',_cor23}|_cor24]],Acc> when 'true' ->
	      let <_cor4> =
		  %% Line 2392
		  call 'lists':'reverse'
		      (Acc)
	      in  %% Line 2392
		  {_cor4,Tokens}
	  %% Line 2393
	  <Tokens = [{',',_cor25}|[{'...',_cor26}|_cor27]],Acc> when 'true' ->
	      let <_cor5> =
		  %% Line 2394
		  call 'lists':'reverse'
		      (Acc)
	      in  %% Line 2394
		  {_cor5,Tokens}
	  %% Line 2395
	  <Tokens,[]> when 'true' ->
	      %% Line 2396
	      case apply 'parse_NamedType'/1
		       (Tokens) of
		<{AlternativeType,Rest}> when 'true' ->
		    %% Line 2397
		    apply 'parse_AlternativeTypeList'/2
			(Rest, [AlternativeType|[]])
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor6})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2398
	  <Tokens,_cor28> when 'true' ->
	      let <_cor13> =
		  %% Line 2400
		  call 'erlang':'hd'
		      (Tokens)
	      in  let <_cor14> =
		      %% Line 2400
		      apply 'get_line'/1
			  (_cor13)
		  in  let <_cor12> =
			  %% Line 2400
			  call 'erlang':'get'
			      ('asn1_module')
		      in  let <_cor7> =
			      %% Line 2401
			      call 'erlang':'hd'
				  (Tokens)
			  in  let <_cor8> =
				  %% Line 2401
				  apply 'get_token'/1
				      (_cor7)
			      in  let <_cor9> =
				      %% Line 2401
				      call 'erlang':'tl'
					  (Tokens)
				  in  let <_cor10> =
					  %% Line 2401
					  call 'erlang':'hd'
					      (_cor9)
				      in  let <_cor11> =
					      %% Line 2401
					      apply 'get_token'/1
						  (_cor10)
					  in  %% Line 2399
					      call 'erlang':'throw'
						  ({'asn1_error',%% Line 2400
								 {_cor14,_cor12,%% Line 2401
										['got'|[[_cor8|[_cor11|[]]]|%% Line 2402
													    ['expected'|[['}'|[', identifier']]]]]]}})
	end
'parse_ExtensionAdditionAlternatives'/2 =
    %% Line 2404
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Tokens = [{',',_cor7}|_cor8],Clist> when 'true' ->
	      %% Line 2405
	      case apply 'parse_ExtensionAdditionAlternativesList'/2
		       (Tokens, []) of
		<{ExtAddList,Rest2}> when 'true' ->
		    let <_cor3> =
			%% Line 2406
			call 'lists':'flatten'
			    (ExtAddList)
		    in  let <_cor4> =
			    %% Line 2406
			    call 'erlang':'++'
				(Clist, _cor3)
			in  %% Line 2406
			    {_cor4,Rest2}
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2407
	  <Tokens,Clist> when 'true' ->
	      %% Line 2409
	      {Clist,Tokens}
	end
'parse_ExtensionAdditionAlternativesList'/2 =
    %% Line 2411
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{',',_cor16}|[Id = {'identifier',_cor17,_cor18}|Rest]],Acc> when 'true' ->
	      %% Line 2412
	      case apply 'parse_NamedType'/1
		       ([Id|Rest]) of
		<{AlternativeType,Rest2}> when 'true' ->
		    %% Line 2413
		    apply 'parse_ExtensionAdditionAlternativesList'/2
			(Rest2, [AlternativeType|Acc])
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2414
	  <[{',',_cor19}|[C1 = {'[',_cor20}|[C2 = {'[',_cor21}|Rest]]],Acc> when 'true' ->
	      %% Line 2415
	      case apply 'parse_ExtensionAdditionAlternativesGroup'/2
		       ([C1|[C2|Rest]], []) of
		<{ExtAddGroup,Rest2}> when 'true' ->
		    %% Line 2416
		    apply 'parse_ExtensionAdditionAlternativesList'/2
			(Rest2, [ExtAddGroup|Acc])
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2417
	  <Tokens = [{'}',_cor22}|_cor23],Acc> when 'true' ->
	      let <_cor4> =
		  %% Line 2418
		  call 'lists':'reverse'
		      (Acc)
	      in  %% Line 2418
		  {_cor4,Tokens}
	  %% Line 2419
	  <Tokens = [{',',_cor24}|[{'...',_cor25}|_cor26]],Acc> when 'true' ->
	      let <_cor5> =
		  %% Line 2420
		  call 'lists':'reverse'
		      (Acc)
	      in  %% Line 2420
		  {_cor5,Tokens}
	  %% Line 2421
	  <Tokens,_cor27> when 'true' ->
	      let <_cor12> =
		  %% Line 2423
		  call 'erlang':'hd'
		      (Tokens)
	      in  let <_cor13> =
		      %% Line 2423
		      apply 'get_line'/1
			  (_cor12)
		  in  let <_cor11> =
			  %% Line 2423
			  call 'erlang':'get'
			      ('asn1_module')
		      in  let <_cor6> =
			      %% Line 2424
			      call 'erlang':'hd'
				  (Tokens)
			  in  let <_cor7> =
				  %% Line 2424
				  apply 'get_token'/1
				      (_cor6)
			      in  let <_cor8> =
				      %% Line 2424
				      call 'erlang':'tl'
					  (Tokens)
				  in  let <_cor9> =
					  %% Line 2424
					  call 'erlang':'hd'
					      (_cor8)
				      in  let <_cor10> =
					      %% Line 2424
					      apply 'get_token'/1
						  (_cor9)
					  in  %% Line 2422
					      call 'erlang':'throw'
						  ({'asn1_error',%% Line 2423
								 {_cor13,_cor11,%% Line 2424
										['got'|[[_cor7|[_cor10|[]]]|%% Line 2425
													    ['expected'|[['}'|[', identifier']]]]]]}})
	end
'parse_ExtensionAdditionAlternativesGroup'/2 =
    %% Line 2428
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{'[',_cor12}|[{'[',_cor13}|[_X_VsnNr = {'number',_cor14,Num}|[{':',_cor15}|Rest]]]],[]> when 'true' ->
	      %% Line 2429
	      apply 'parse_ExtensionAdditionAlternativesGroup2'/2
		  (Rest, Num)
	  %% Line 2430
	  <[{'[',_cor16}|[{'[',_cor17}|Rest]],[]> when 'true' ->
	      %% Line 2431
	      apply 'parse_ExtensionAdditionAlternativesGroup2'/2
		  (Rest, 'undefined')
	  %% Line 2432
	  <Tokens,_cor18> when 'true' ->
	      let <_cor8> =
		  %% Line 2434
		  call 'erlang':'hd'
		      (Tokens)
	      in  let <_cor9> =
		      %% Line 2434
		      apply 'get_line'/1
			  (_cor8)
		  in  let <_cor7> =
			  %% Line 2434
			  call 'erlang':'get'
			      ('asn1_module')
		      in  let <_cor2> =
			      %% Line 2435
			      call 'erlang':'hd'
				  (Tokens)
			  in  let <_cor3> =
				  %% Line 2435
				  apply 'get_token'/1
				      (_cor2)
			      in  let <_cor4> =
				      %% Line 2435
				      call 'erlang':'tl'
					  (Tokens)
				  in  let <_cor5> =
					  %% Line 2435
					  call 'erlang':'hd'
					      (_cor4)
				      in  let <_cor6> =
					      %% Line 2435
					      apply 'get_token'/1
						  (_cor5)
					  in  %% Line 2433
					      call 'erlang':'throw'
						  ({'asn1_error',%% Line 2434
								 {_cor9,_cor7,%% Line 2435
									      ['got'|[[_cor3|[_cor6|[]]]|%% Line 2436
													 ['expected'|[['[[']]]]]}})
	end
'parse_ExtensionAdditionAlternativesGroup2'/2 =
    %% Line 2439
    fun (_cor1,_cor0) ->
	%% Line 2440
	case apply 'parse_AlternativeTypeList'/2
		 (_cor1, []) of
	  <{CompTypeList,Rest}> when 'true' ->
	      %% Line 2441
	      case Rest of
		%% Line 2442
		<[{']',_cor12}|[{']',_cor13}|Rest2]]> when 'true' ->
		    let <_cor3> =
			%% Line 2443
			[{'ExtensionAdditionGroup',_cor0}|call 'erlang':'++'
							      (CompTypeList, %% Line 2444
									     ['ExtensionAdditionGroupEnd'])]
		    in  %% Line 2443
			{_cor3,%% Line 2444
			       Rest2}
		%% Line 2445
		<_cor14> when 'true' ->
		    let <_cor7> =
			%% Line 2446
			call 'erlang':'hd'
			    (Rest)
		    in  let <_cor8> =
			    %% Line 2446
			    apply 'get_line'/1
				(_cor7)
			in  let <_cor6> =
				%% Line 2446
				call 'erlang':'get'
				    ('asn1_module')
			    in  let <_cor4> =
				    %% Line 2447
				    call 'erlang':'hd'
					(Rest)
				in  let <_cor5> =
					%% Line 2447
					apply 'get_token'/1
					    (_cor4)
				    in  %% Line 2446
					call 'erlang':'throw'
					    ({'asn1_error',{_cor8,_cor6,%% Line 2447
									['got'|[_cor5|['expected'|[[']]']]]]]}})
	      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'parse_NamedType'/1 =
    %% Line 2543
    fun (_cor0) ->
	case _cor0 of
	  <[{'identifier',L1,Idname}|Rest]> when 'true' ->
	      %% Line 2544
	      case apply 'parse_Type'/1
		       (Rest) of
		<{Type,Rest2}> when 'true' ->
		    %% Line 2545
		    {{'ComponentType',L1,Idname,Type,'mandatory','undefined','undefined'},Rest2}
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2546
	  <Tokens> when 'true' ->
	      let <_cor5> =
		  %% Line 2547
		  call 'erlang':'hd'
		      (Tokens)
	      in  let <_cor6> =
		      %% Line 2547
		      apply 'get_line'/1
			  (_cor5)
		  in  let <_cor4> =
			  %% Line 2547
			  call 'erlang':'get'
			      ('asn1_module')
		      in  let <_cor2> =
			      %% Line 2548
			      call 'erlang':'hd'
				  (Tokens)
			  in  let <_cor3> =
				  %% Line 2548
				  apply 'get_token'/1
				      (_cor2)
			      in  %% Line 2547
				  call 'erlang':'throw'
				      ({'asn1_error',{_cor6,_cor4,%% Line 2548
								  ['got'|[_cor3|['expected'|['identifier']]]]}})
	end
'parse_ComponentTypeLists'/1 =
    %% Line 2551
    fun (_cor0) ->
	%% Line 2552
	apply 'parse_ComponentTypeLists'/2
	    (_cor0, [])
'parse_ComponentTypeLists'/2 =
    %% Line 2554
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Tokens = [{'identifier',_cor14,_cor15}|_X_Rest0],Clist> when 'true' ->
	      %% Line 2555
	      case apply 'parse_ComponentTypeList'/2
		       (Tokens, []) of
		<{CompList,Rest1}> when 'true' ->
		    let <_cor3> =
			%% Line 2556
			call 'erlang':'++'
			    (Clist, CompList)
		    in  %% Line 2556
			apply 'parse_ComponentTypeLists'/2
			    (Rest1, _cor3)
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2557
	  <Tokens = [{'COMPONENTS',_cor16}|[{'OF',_cor17}|_X_Rest]],Clist> when 'true' ->
	      %% Line 2558
	      case apply 'parse_ComponentTypeList'/2
		       (Tokens, []) of
		<{CompList,Rest1}> when 'true' ->
		    let <_cor5> =
			%% Line 2559
			call 'erlang':'++'
			    (Clist, CompList)
		    in  %% Line 2559
			apply 'parse_ComponentTypeLists'/2
			    (Rest1, _cor5)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2560
	  <[{'...',L1}|[{'!',_cor18}|Rest02]],Clist0> when 'true' ->
	      %% Line 2561
	      case apply 'parse_ExceptionIdentification'/1
		       (Rest02) of
		<{_cor19,Rest03}> when 'true' ->
		    let <_cor7> =
			%% Line 2563
			call 'erlang':'++'
			    (Clist0, [{'EXTENSIONMARK',L1,'undefined'}|[]])
		    in  %% Line 2563
			apply 'parse_ComponentTypeLists2'/2
			    (Rest03, _cor7)
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor6})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2564
	  <[{',',L1}|[{'...',_cor20}|[{'!',_cor21}|Rest02]]],Clist0>
	      when call 'erlang':'=/='
		    (Clist0,
		     []) ->
	      %% Line 2565
	      case apply 'parse_ExceptionIdentification'/1
		       (Rest02) of
		<{_cor22,Rest03}> when 'true' ->
		    let <_cor9> =
			%% Line 2567
			call 'erlang':'++'
			    (Clist0, [{'EXTENSIONMARK',L1,'undefined'}|[]])
		    in  %% Line 2567
			apply 'parse_ComponentTypeLists2'/2
			    (Rest03, _cor9)
		( <_cor8> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor8})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2569
	  <[{',',_cor23}|[{'...',L1}|Rest02]],Clist0>
	      when call 'erlang':'=/='
		    (Clist0,
		     []) ->
	      let <_cor10> =
		  %% Line 2570
		  call 'erlang':'++'
		      (Clist0, [{'EXTENSIONMARK',L1,'undefined'}|[]])
	      in  %% Line 2570
		  apply 'parse_ComponentTypeLists2'/2
		      (Rest02, _cor10)
	  %% Line 2571
	  <[{'...',L1}|Rest02],Clist0> when 'true' ->
	      let <_cor11> =
		  %% Line 2572
		  call 'erlang':'++'
		      (Clist0, [{'EXTENSIONMARK',L1,'undefined'}|[]])
	      in  %% Line 2572
		  apply 'parse_ComponentTypeLists2'/2
		      (Rest02, _cor11)
	  %% Line 2573
	  <Tokens = [{'}',_X_L1}|_X_Rest02],Clist0> when 'true' ->
	      %% Line 2574
	      {Clist0,Tokens}
	  ( <_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12})
		  -| [{'function_name',{'parse_ComponentTypeLists',2}}] )
	    -| ['compiler_generated'] )
	end
'parse_ComponentTypeLists2'/2 =
    %% Line 2576
    fun (_cor1,_cor0) ->
	%% Line 2577
	case apply 'parse_ExtensionAdditions'/2
		 (_cor1, _cor0) of
	  <{ExtAdd,Rest}> when 'true' ->
	      let <_cor3> =
		  %% Line 2578
		  call 'lists':'flatten'
		      (ExtAdd)
	      in  %% Line 2578
		  case apply 'parse_OptionalExtensionMarker'/2
			   (Rest, _cor3) of
		    <{Clist2,Rest2}> when 'true' ->
			%% Line 2579
			case Rest2 of
			  %% Line 2580
			  <[{',',_cor10}|Rest3]> when 'true' ->
			      %% Line 2581
			      case apply 'parse_ComponentTypeList'/2
				       (Rest3, []) of
				<{CompList,Rest4}> when 'true' ->
				    let <_cor6> =
					%% Line 2582
					call 'erlang':'++'
					    (Clist2, CompList)
				    in  %% Line 2582
					{_cor6,Rest4}
				( <_cor5> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor5})
				  -| ['compiler_generated'] )
			      end
			  %% Line 2583
			  <_cor11> when 'true' ->
			      %% Line 2584
			      {Clist2,Rest2}
			end
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor4})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'parse_OptionalExtensionMarker'/2 =
    %% Line 2587
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{',',_cor5}|[{'...',L1}|Rest]],Clist> when 'true' ->
	      let <_cor2> =
		  %% Line 2588
		  call 'erlang':'++'
		      (Clist, [{'EXTENSIONMARK',L1,'undefined'}|[]])
	      in  %% Line 2588
		  {_cor2,Rest}
	  %% Line 2589
	  <Tokens,Clist> when 'true' ->
	      %% Line 2590
	      {Clist,Tokens}
	end
'parse_ComponentTypeList'/2 =
    %% Line 2593
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{',',_cor18}|[Id = {'identifier',_cor19,_cor20}|Rest]],Acc>
	      when call 'erlang':'=/='
		    (Acc,
		     []) ->
	      %% Line 2594
	      case apply 'parse_ComponentType'/1
		       ([Id|Rest]) of
		<{ComponentType,Rest2}> when 'true' ->
		    %% Line 2595
		    apply 'parse_ComponentTypeList'/2
			(Rest2, [ComponentType|Acc])
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2596
	  <[{',',_cor21}|[C1 = {'COMPONENTS',_cor22}|[C2 = {'OF',_cor23}|Rest]]],Acc>
	      when call 'erlang':'=/='
		    (Acc,
		     []) ->
	      %% Line 2597
	      case apply 'parse_ComponentType'/1
		       ([C1|[C2|Rest]]) of
		<{ComponentType,Rest2}> when 'true' ->
		    %% Line 2598
		    apply 'parse_ComponentTypeList'/2
			(Rest2, [ComponentType|Acc])
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2599
	  <Tokens = [{'}',_cor24}|_cor25],Acc> when 'true' ->
	      let <_cor4> =
		  %% Line 2600
		  call 'lists':'reverse'
		      (Acc)
	      in  %% Line 2600
		  {_cor4,Tokens}
	  %% Line 2601
	  <Tokens = [{']',_cor26}|[{']',_cor27}|_cor28]],Acc> when 'true' ->
	      let <_cor5> =
		  %% Line 2602
		  call 'lists':'reverse'
		      (Acc)
	      in  %% Line 2602
		  {_cor5,Tokens}
	  %% Line 2603
	  <Tokens = [{',',_cor29}|[{'...',_cor30}|_cor31]],Acc> when 'true' ->
	      let <_cor6> =
		  %% Line 2604
		  call 'lists':'reverse'
		      (Acc)
	      in  %% Line 2604
		  {_cor6,Tokens}
	  %% Line 2605
	  <Tokens,[]> when 'true' ->
	      %% Line 2606
	      case apply 'parse_ComponentType'/1
		       (Tokens) of
		<{ComponentType,Rest}> when 'true' ->
		    %% Line 2607
		    apply 'parse_ComponentTypeList'/2
			(Rest, [ComponentType|[]])
		( <_cor7> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor7})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2608
	  <Tokens,_cor32> when 'true' ->
	      let <_cor14> =
		  %% Line 2610
		  call 'erlang':'hd'
		      (Tokens)
	      in  let <_cor15> =
		      %% Line 2610
		      apply 'get_line'/1
			  (_cor14)
		  in  let <_cor13> =
			  %% Line 2610
			  call 'erlang':'get'
			      ('asn1_module')
		      in  let <_cor8> =
			      %% Line 2611
			      call 'erlang':'hd'
				  (Tokens)
			  in  let <_cor9> =
				  %% Line 2611
				  apply 'get_token'/1
				      (_cor8)
			      in  let <_cor10> =
				      %% Line 2611
				      call 'erlang':'tl'
					  (Tokens)
				  in  let <_cor11> =
					  %% Line 2611
					  call 'erlang':'hd'
					      (_cor10)
				      in  let <_cor12> =
					      %% Line 2611
					      apply 'get_token'/1
						  (_cor11)
					  in  %% Line 2609
					      call 'erlang':'throw'
						  ({'asn1_error',%% Line 2610
								 {_cor15,_cor13,%% Line 2611
										['got'|[[_cor9|[_cor12|[]]]|%% Line 2612
													    ['expected'|[['}'|[', identifier']]]]]]}})
	end
'parse_ExtensionAdditions'/2 =
    %% Line 2614
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Tokens = [{',',_cor6}|_cor7],Clist> when 'true' ->
	      %% Line 2615
	      case apply 'parse_ExtensionAdditionList'/2
		       (Tokens, []) of
		<{ExtAddList,Rest2}> when 'true' ->
		    let <_cor3> =
			%% Line 2616
			call 'erlang':'++'
			    (Clist, ExtAddList)
		    in  %% Line 2616
			{_cor3,Rest2}
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2617
	  <Tokens,Clist> when 'true' ->
	      %% Line 2619
	      {Clist,Tokens}
	end
'parse_ExtensionAdditionList'/2 =
    %% Line 2621
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{',',_cor17}|[Id = {'identifier',_cor18,_cor19}|Rest]],Acc> when 'true' ->
	      %% Line 2622
	      case apply 'parse_ComponentType'/1
		       ([Id|Rest]) of
		<{ComponentType,Rest2}> when 'true' ->
		    %% Line 2623
		    apply 'parse_ExtensionAdditionList'/2
			(Rest2, [ComponentType|Acc])
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2624
	  <[{',',_cor20}|[C1 = {'COMPONENTS',_cor21}|[C2 = {'OF',_cor22}|Rest]]],Acc> when 'true' ->
	      %% Line 2625
	      case apply 'parse_ComponentType'/1
		       ([C1|[C2|Rest]]) of
		<{ComponentType,Rest2}> when 'true' ->
		    %% Line 2626
		    apply 'parse_ExtensionAdditionList'/2
			(Rest2, [ComponentType|Acc])
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2627
	  <[{',',_cor23}|[C1 = {'[',_cor24}|[C2 = {'[',_cor25}|Rest]]],Acc> when 'true' ->
	      %% Line 2628
	      case apply 'parse_ExtensionAdditionGroup'/2
		       ([C1|[C2|Rest]], []) of
		<{ExtAddGroup,Rest2}> when 'true' ->
		    %% Line 2629
		    apply 'parse_ExtensionAdditionList'/2
			(Rest2, [ExtAddGroup|Acc])
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2630
	  <Tokens = [{'}',_cor26}|_cor27],Acc> when 'true' ->
	      let <_cor5> =
		  %% Line 2631
		  call 'lists':'reverse'
		      (Acc)
	      in  %% Line 2631
		  {_cor5,Tokens}
	  %% Line 2632
	  <Tokens = [{',',_cor28}|[{'...',_cor29}|_cor30]],Acc> when 'true' ->
	      let <_cor6> =
		  %% Line 2633
		  call 'lists':'reverse'
		      (Acc)
	      in  %% Line 2633
		  {_cor6,Tokens}
	  %% Line 2634
	  <Tokens,_cor31> when 'true' ->
	      let <_cor13> =
		  %% Line 2636
		  call 'erlang':'hd'
		      (Tokens)
	      in  let <_cor14> =
		      %% Line 2636
		      apply 'get_line'/1
			  (_cor13)
		  in  let <_cor12> =
			  %% Line 2636
			  call 'erlang':'get'
			      ('asn1_module')
		      in  let <_cor7> =
			      %% Line 2637
			      call 'erlang':'hd'
				  (Tokens)
			  in  let <_cor8> =
				  %% Line 2637
				  apply 'get_token'/1
				      (_cor7)
			      in  let <_cor9> =
				      %% Line 2637
				      call 'erlang':'tl'
					  (Tokens)
				  in  let <_cor10> =
					  %% Line 2637
					  call 'erlang':'hd'
					      (_cor9)
				      in  let <_cor11> =
					      %% Line 2637
					      apply 'get_token'/1
						  (_cor10)
					  in  %% Line 2635
					      call 'erlang':'throw'
						  ({'asn1_error',%% Line 2636
								 {_cor14,_cor12,%% Line 2637
										['got'|[[_cor8|[_cor11|[]]]|%% Line 2638
													    ['expected'|[['}'|[', identifier']]]]]]}})
	end
'parse_ExtensionAdditionGroup'/2 =
    %% Line 2641
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{'[',_cor12}|[{'[',_cor13}|[_X_VsnNr = {'number',_cor14,Num}|[{':',_cor15}|Rest]]]],[]> when 'true' ->
	      %% Line 2642
	      apply 'parse_ExtensionAdditionGroup2'/2
		  (Rest, Num)
	  %% Line 2643
	  <[{'[',_cor16}|[{'[',_cor17}|Rest]],[]> when 'true' ->
	      %% Line 2644
	      apply 'parse_ExtensionAdditionGroup2'/2
		  (Rest, 'undefined')
	  %% Line 2645
	  <Tokens,_cor18> when 'true' ->
	      let <_cor8> =
		  %% Line 2647
		  call 'erlang':'hd'
		      (Tokens)
	      in  let <_cor9> =
		      %% Line 2647
		      apply 'get_line'/1
			  (_cor8)
		  in  let <_cor7> =
			  %% Line 2647
			  call 'erlang':'get'
			      ('asn1_module')
		      in  let <_cor2> =
			      %% Line 2648
			      call 'erlang':'hd'
				  (Tokens)
			  in  let <_cor3> =
				  %% Line 2648
				  apply 'get_token'/1
				      (_cor2)
			      in  let <_cor4> =
				      %% Line 2648
				      call 'erlang':'tl'
					  (Tokens)
				  in  let <_cor5> =
					  %% Line 2648
					  call 'erlang':'hd'
					      (_cor4)
				      in  let <_cor6> =
					      %% Line 2648
					      apply 'get_token'/1
						  (_cor5)
					  in  %% Line 2646
					      call 'erlang':'throw'
						  ({'asn1_error',%% Line 2647
								 {_cor9,_cor7,%% Line 2648
									      ['got'|[[_cor3|[_cor6|[]]]|%% Line 2649
													 ['expected'|[['[[']]]]]}})
	end
'parse_ExtensionAdditionGroup2'/2 =
    %% Line 2652
    fun (_cor1,_cor0) ->
	%% Line 2653
	case apply 'parse_ComponentTypeList'/2
		 (_cor1, []) of
	  <{CompTypeList,Rest}> when 'true' ->
	      %% Line 2654
	      case Rest of
		%% Line 2655
		<[{']',_cor12}|[{']',_cor13}|Rest2]]> when 'true' ->
		    let <_cor3> =
			%% Line 2656
			[{'ExtensionAdditionGroup',_cor0}|call 'erlang':'++'
							      (CompTypeList, %% Line 2657
									     ['ExtensionAdditionGroupEnd'])]
		    in  %% Line 2656
			{_cor3,%% Line 2657
			       Rest2}
		%% Line 2658
		<_cor14> when 'true' ->
		    let <_cor7> =
			%% Line 2659
			call 'erlang':'hd'
			    (Rest)
		    in  let <_cor8> =
			    %% Line 2659
			    apply 'get_line'/1
				(_cor7)
			in  let <_cor6> =
				%% Line 2659
				call 'erlang':'get'
				    ('asn1_module')
			    in  let <_cor4> =
				    %% Line 2660
				    call 'erlang':'hd'
					(Rest)
				in  let <_cor5> =
					%% Line 2660
					apply 'get_token'/1
					    (_cor4)
				    in  %% Line 2659
					call 'erlang':'throw'
					    ({'asn1_error',{_cor8,_cor6,%% Line 2660
									['got'|[_cor5|['expected'|[[']]']]]]]}})
	      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'parse_ComponentType'/1 =
    %% Line 2664
    fun (_cor0) ->
	case _cor0 of
	  <[{'COMPONENTS',_cor13}|[{'OF',_cor14}|Rest]]> when 'true' ->
	      %% Line 2665
	      case apply 'parse_Type'/1
		       (Rest) of
		<{Type,Rest2}> when 'true' ->
		    %% Line 2666
		    {{'COMPONENTS OF',Type},Rest2}
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2667
	  <Tokens> when 'true' ->
	      %% Line 2668
	      case apply 'parse_NamedType'/1
		       (Tokens) of
		<Result = {NamedType,Rest}> when 'true' ->
		    %% Line 2669
		    case Rest of
		      %% Line 2670
		      <[{'OPTIONAL',_cor15}|Rest2]> when 'true' ->
			  %% Line 2671
			  case NamedType of
			    <{'ComponentType',_cor16,_cor17,_cor18,_cor19,_cor20,_cor21}> when 'true' ->
				let <_cor5> =
				    call 'erlang':'setelement'
					(5, NamedType, 'OPTIONAL')
				in  {_cor5,Rest2}
			    ( <_cor22> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','ComponentType'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
		      %% Line 2672
		      <[{'DEFAULT',_cor23}|Rest2]> when 'true' ->
			  %% Line 2673
			  case apply 'parse_Value'/1
				   (Rest2) of
			    <{Value,Rest21}> when 'true' ->
				let <_rec15> = {%% Line 2674
				     'DEFAULT',%% Line 2674
					       Value}
				in  %% Line 2674
				    case NamedType of
				      <{'ComponentType',_cor24,_cor25,_cor26,_cor27,_cor28,_cor29}> when 'true' ->
					  let <_cor10> =
					      call 'erlang':'setelement'
						  (5, NamedType, _rec15)
					  in  {_cor10,Rest21}
				      ( <_cor30> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','ComponentType'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
			    ( <_cor6> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor6})
			      -| ['compiler_generated'] )
			  end
		      %% Line 2675
		      <_cor31> when 'true' ->
			  %% Line 2676
			  Result
		    end
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	end
'parse_SignedNumber'/1 =
    %% Line 2681
    fun (_cor0) ->
	case _cor0 of
	  <[{'number',_cor8,Value}|Rest]> when 'true' ->
	      %% Line 2682
	      {Value,Rest}
	  %% Line 2683
	  <[{'-',_cor9}|[{'number',_cor10,Value}|Rest]]> when 'true' ->
	      let <_cor1> =
		  %% Line 2684
		  call 'erlang':'-'
		      (Value)
	      in  %% Line 2684
		  {_cor1,Rest}
	  %% Line 2685
	  <Tokens> when 'true' ->
	      let <_cor5> =
		  %% Line 2686
		  call 'erlang':'hd'
		      (Tokens)
	      in  let <_cor6> =
		      %% Line 2686
		      apply 'get_line'/1
			  (_cor5)
		  in  let <_cor4> =
			  %% Line 2686
			  call 'erlang':'get'
			      ('asn1_module')
		      in  let <_cor2> =
			      %% Line 2687
			      call 'erlang':'hd'
				  (Tokens)
			  in  let <_cor3> =
				  %% Line 2687
				  apply 'get_token'/1
				      (_cor2)
			      in  %% Line 2686
				  call 'erlang':'throw'
				      ({'asn1_error',{_cor6,_cor4,%% Line 2687
								  ['got'|[_cor3|['expected'|[['number'|['-number']]]]]]}})
	end
'parse_Enumerations'/2 =
    %% Line 2690
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Tokens = [{'identifier',_cor7,_cor8}|_X_Rest],ExtensionDefault> when 'true' ->
	      %% Line 2691
	      apply 'parse_Enumerations'/3
		  (Tokens, [], ExtensionDefault)
	  %% Line 2692
	  <[H|_X_T],_cor9> when 'true' ->
	      let <_cor4> =
		  %% Line 2693
		  apply 'get_line'/1
		      (H)
	      in  let <_cor3> =
		      %% Line 2693
		      call 'erlang':'get'
			  ('asn1_module')
		  in  let <_cor2> =
			  %% Line 2694
			  apply 'get_token'/1
			      (H)
		      in  %% Line 2693
			  call 'erlang':'throw'
			      ({'asn1_error',{_cor4,_cor3,%% Line 2694
							  ['got'|[_cor2|['expected'|['identifier']]]]}})
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'parse_Enumerations',2}}] )
	    -| ['compiler_generated'] )
	end
'parse_Enumerations'/3 =
    %% Line 2696
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Tokens = [{'identifier',_cor18,_cor19}|[{'(',_cor20}|_X_Rest]],Acc,ExtensionDefault> when 'true' ->
	      %% Line 2697
	      case apply 'parse_NamedNumber'/1
		       (Tokens) of
		<{NamedNumber,Rest2}> when 'true' ->
		    %% Line 2698
		    case Rest2 of
		      %% Line 2699
		      <[{',',_cor21}|Rest3]> when 'true' ->
			  %% Line 2700
			  apply 'parse_Enumerations'/3
			      (Rest3, [NamedNumber|Acc], ExtensionDefault)
		      %% Line 2701
		      <_cor22>
			  when call 'erlang':'=:='
				(ExtensionDefault,
				 'IMPLIED') ->
			  let <_cor4> =
			      %% Line 2702
			      call 'lists':'reverse'
				  (['EXTENSIONMARK'|[NamedNumber|Acc]])
			  in  %% Line 2702
			      {_cor4,Rest2}
		      %% Line 2703
		      <_cor23> when 'true' ->
			  let <_cor5> =
			      %% Line 2704
			      call 'lists':'reverse'
				  ([NamedNumber|Acc])
			  in  %% Line 2704
			      {_cor5,Rest2}
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2706
	  <[{'identifier',_cor24,Id}|Rest],Acc,ExtensionDefault> when 'true' ->
	      %% Line 2707
	      case Rest of
		%% Line 2708
		<[{',',_cor25}|Rest2]> when 'true' ->
		    %% Line 2709
		    apply 'parse_Enumerations'/3
			(Rest2, [Id|Acc], ExtensionDefault)
		%% Line 2710
		<_cor26>
		    when call 'erlang':'=:='
			  (ExtensionDefault,
			   'IMPLIED') ->
		    let <_cor7> =
			%% Line 2711
			call 'lists':'reverse'
			    (['EXTENSIONMARK'|[Id|Acc]])
		    in  %% Line 2711
			{_cor7,Rest}
		%% Line 2712
		<_cor27> when 'true' ->
		    let <_cor8> =
			%% Line 2713
			call 'lists':'reverse'
			    ([Id|Acc])
		    in  %% Line 2713
			{_cor8,Rest}
	      end
	  %% Line 2715
	  <[{'...',_cor28}|Rest],Acc,_X_ExtensionDefault> when 'true' ->
	      %% Line 2716
	      case Rest of
		%% Line 2717
		<[{',',_cor29}|Rest2]> when 'true' ->
		    %% Line 2718
		    apply 'parse_Enumerations'/3
			(Rest2, ['EXTENSIONMARK'|Acc], 'undefined')
		%% Line 2719
		<_cor30> when 'true' ->
		    let <_cor10> =
			%% Line 2720
			call 'lists':'reverse'
			    (['EXTENSIONMARK'|Acc])
		    in  %% Line 2720
			{_cor10,Rest}
	      end
	  %% Line 2722
	  <[H|_X_T],_cor31,_cor32> when 'true' ->
	      let <_cor14> =
		  %% Line 2723
		  apply 'get_line'/1
		      (H)
	      in  let <_cor13> =
		      %% Line 2723
		      call 'erlang':'get'
			  ('asn1_module')
		  in  let <_cor12> =
			  %% Line 2724
			  apply 'get_token'/1
			      (H)
		      in  %% Line 2723
			  call 'erlang':'throw'
			      ({'asn1_error',{_cor14,_cor13,%% Line 2724
							    ['got'|[_cor12|['expected'|['identifier']]]]}})
	  ( <_cor17,_cor16,_cor15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor17,_cor16,_cor15})
		  -| [{'function_name',{'parse_Enumerations',3}}] )
	    -| ['compiler_generated'] )
	end
'parse_NamedNumberList'/1 =
    %% Line 2726
    fun (_cor0) ->
	%% Line 2727
	apply 'parse_NamedNumberList'/2
	    (_cor0, [])
'parse_NamedNumberList'/2 =
    %% Line 2729
    fun (_cor1,_cor0) ->
	%% Line 2730
	case apply 'parse_NamedNumber'/1
		 (_cor1) of
	  <{NamedNum,Rest}> when 'true' ->
	      %% Line 2731
	      case Rest of
		%% Line 2732
		<[{',',_cor7}|Rest2]> when 'true' ->
		    %% Line 2733
		    apply 'parse_NamedNumberList'/2
			(Rest2, [NamedNum|_cor0])
		%% Line 2734
		<_cor8> when 'true' ->
		    let <_cor3> =
			%% Line 2735
			call 'lists':'reverse'
			    ([NamedNum|_cor0])
		    in  %% Line 2735
			{_cor3,Rest}
	      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'parse_NamedNumber'/1 =
    %% Line 2738
    fun (_cor0) ->
	case _cor0 of
	  <[{'identifier',_cor15,Name}|[{'(',_cor16}|Rest]]> when 'true' ->
	      let <Flist> =
		  %% Line 2739
		  [( 'parse_SignedNumber'/1
		     -| [{'id',{0,0,'-parse_NamedNumber/1-fun-0-'}}] )|%% Line 2740
								       [( 'parse_DefinedValue'/1
									  -| [{'id',{0,0,'-parse_NamedNumber/1-fun-1-'}}] )|[]]]
	      in  let <_cor2> =
		      catch
			  %% Line 2741
			  apply 'parse_or'/2
			      (Rest, Flist)
		  in  %% Line 2741
		      case _cor2 of
			%% Line 2742
			<{'EXIT',Reason}> when 'true' ->
			    %% Line 2743
			    call 'erlang':'exit'
				(Reason)
			%% Line 2744
			<AsnErr = {'asn1_error',_cor17}> when 'true' ->
			    %% Line 2745
			    call 'erlang':'throw'
				(AsnErr)
			%% Line 2746
			<{NamedNum,[{')',_cor18}|Rest2]}> when 'true' ->
			    %% Line 2747
			    {{'NamedNumber',Name,NamedNum},Rest2}
			%% Line 2748
			<_cor19> when 'true' ->
			    let <_cor6> =
				%% Line 2749
				call 'erlang':'hd'
				    (Rest)
			    in  let <_cor7> =
				    %% Line 2749
				    apply 'get_line'/1
					(_cor6)
				in  let <_cor5> =
					%% Line 2749
					call 'erlang':'get'
					    ('asn1_module')
				    in  let <_cor3> =
					    %% Line 2750
					    call 'erlang':'hd'
						(Rest)
					in  let <_cor4> =
						%% Line 2750
						apply 'get_token'/1
						    (_cor3)
					    in  %% Line 2749
						call 'erlang':'throw'
						    ({'asn1_error',{_cor7,_cor5,%% Line 2750
										['got'|[_cor4|['expected'|['NamedNumberList']]]]}})
		      end
	  %% Line 2752
	  <Tokens> when 'true' ->
	      let <_cor12> =
		  %% Line 2753
		  call 'erlang':'hd'
		      (Tokens)
	      in  let <_cor13> =
		      %% Line 2753
		      apply 'get_line'/1
			  (_cor12)
		  in  let <_cor11> =
			  %% Line 2753
			  call 'erlang':'get'
			      ('asn1_module')
		      in  let <_cor9> =
			      %% Line 2754
			      call 'erlang':'hd'
				  (Tokens)
			  in  let <_cor10> =
				  %% Line 2754
				  apply 'get_token'/1
				      (_cor9)
			      in  %% Line 2753
				  call 'erlang':'throw'
				      ({'asn1_error',{_cor13,_cor11,%% Line 2754
								    ['got'|[_cor10|['expected'|['identifier']]]]}})
	end
'parse_Tag'/1 =
    %% Line 2757
    fun (_cor0) ->
	case _cor0 of
	  <[{'[',_cor17}|Rest]> when 'true' ->
	      %% Line 2758
	      case apply 'parse_Class'/1
		       (Rest) of
		<{Class,Rest2}> when 'true' ->
		    let <_cor3> =
			%% Line 2760
			case Rest2 of
			  %% Line 2761
			  <[{'number',_cor18,Num}|Rest21]> when 'true' ->
			      %% Line 2762
			      {Num,Rest21}
			  %% Line 2763
			  <_cor19> when 'true' ->
			      %% Line 2764
			      apply 'parse_DefinedValue'/1
				  (Rest2)
			end
		    in  %% Line 2759
			case _cor3 of
			  <{ClassNumber,Rest3}> when 'true' ->
			      %% Line 2766
			      case Rest3 of
				%% Line 2767
				<[{']',_cor20}|Rest4]> when 'true' ->
				    %% Line 2768
				    {{'tag',Class,ClassNumber,'undefined',32},Rest4}
				%% Line 2769
				<_cor21> when 'true' ->
				    let <_cor8> =
					%% Line 2770
					call 'erlang':'hd'
					    (Rest3)
				    in  let <_cor9> =
					    %% Line 2770
					    apply 'get_line'/1
						(_cor8)
					in  let <_cor7> =
						%% Line 2770
						call 'erlang':'get'
						    ('asn1_module')
					    in  let <_cor5> =
						    %% Line 2771
						    call 'erlang':'hd'
							(Rest3)
						in  let <_cor6> =
							%% Line 2771
							apply 'get_token'/1
							    (_cor5)
						    in  %% Line 2770
							call 'erlang':'throw'
							    ({'asn1_error',{_cor9,_cor7,%% Line 2771
											['got'|[_cor6|['expected'|[']']]]]}})
			      end
			  ( <_cor4> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor4})
			    -| ['compiler_generated'] )
			end
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2773
	  <Tokens> when 'true' ->
	      let <_cor14> =
		  %% Line 2774
		  call 'erlang':'hd'
		      (Tokens)
	      in  let <_cor15> =
		      %% Line 2774
		      apply 'get_line'/1
			  (_cor14)
		  in  let <_cor13> =
			  %% Line 2774
			  call 'erlang':'get'
			      ('asn1_module')
		      in  let <_cor11> =
			      %% Line 2775
			      call 'erlang':'hd'
				  (Tokens)
			  in  let <_cor12> =
				  %% Line 2775
				  apply 'get_token'/1
				      (_cor11)
			      in  %% Line 2774
				  call 'erlang':'throw'
				      ({'asn1_error',{_cor15,_cor13,%% Line 2775
								    ['got'|[_cor12|['expected'|['[']]]]}})
	end
'parse_Class'/1 =
    %% Line 2777
    fun (_cor0) ->
	case _cor0 of
	  <[{'UNIVERSAL',_cor2}|Rest]> when 'true' ->
	      %% Line 2778
	      {'UNIVERSAL',Rest}
	  %% Line 2779
	  <[{'APPLICATION',_cor3}|Rest]> when 'true' ->
	      %% Line 2780
	      {'APPLICATION',Rest}
	  %% Line 2781
	  <[{'PRIVATE',_cor4}|Rest]> when 'true' ->
	      %% Line 2782
	      {'PRIVATE',Rest}
	  %% Line 2783
	  <Tokens> when 'true' ->
	      %% Line 2784
	      {'CONTEXT',Tokens}
	end
'parse_Value'/1 =
    %% Line 2790
    fun (_cor0) ->
	let <Flist> =
	    %% Line 2791
	    [( 'parse_BuiltinValue'/1
	       -| [{'id',{0,0,'-parse_Value/1-fun-0-'}}] )|%% Line 2792
							   [( 'parse_ValueFromObject'/1
							      -| [{'id',{0,0,'-parse_Value/1-fun-1-'}}] )|%% Line 2793
													  [( 'parse_DefinedValue'/1
													     -| [{'id',{0,0,'-parse_Value/1-fun-2-'}}] )|[]]]]
	in  let <_cor2> =
		catch
		    %% Line 2795
		    apply 'parse_or'/2
			(_cor0, Flist)
	    in  %% Line 2795
		case _cor2 of
		  %% Line 2796
		  <{'EXIT',Reason}> when 'true' ->
		      %% Line 2797
		      call 'erlang':'exit'
			  (Reason)
		  %% Line 2798
		  <AsnErr = {'asn1_error',_cor5}> when 'true' ->
		      %% Line 2799
		      call 'erlang':'throw'
			  (AsnErr)
		  %% Line 2800
		  <Result> when 'true' ->
		      %% Line 2801
		      Result
		end
'parse_BuiltinValue'/1 =
    %% Line 2804
    fun (_cor0) ->
	case _cor0 of
	  <[{'bstring',_cor7,Bstr}|Rest]> when 'true' ->
	      %% Line 2805
	      {{'bstring',Bstr},Rest}
	  %% Line 2806
	  <[{'hstring',_cor8,Hstr}|Rest]> when 'true' ->
	      %% Line 2807
	      {{'hstring',Hstr},Rest}
	  %% Line 2808
	  <[{'{',_cor9}|[{'}',_cor10}|Rest]]> when 'true' ->
	      %% Line 2809
	      {[],Rest}
	  %% Line 2810
	  <Tokens = [{'{',_cor11}|_X_Rest]> when 'true' ->
	      let <Flist> =
		  %% Line 2811
		  [%% Line 2812
		   ( 'parse_SequenceOfValue'/1
		     -| [{'id',{0,0,'-parse_BuiltinValue/1-fun-0-'}}] )|%% Line 2813
									[( 'parse_SequenceValue'/1
									   -| [{'id',{0,0,'-parse_BuiltinValue/1-fun-1-'}}] )|%% Line 2814
															      [( 'parse_ObjectIdentifierValue'/1
																 -| [{'id',{0,0,'-parse_BuiltinValue/1-fun-2-'}}] )|[]]]]
	      in  let <_cor2> =
		      catch
			  %% Line 2815
			  apply 'parse_or'/2
			      (Tokens, Flist)
		  in  %% Line 2815
		      case _cor2 of
			%% Line 2816
			<{'EXIT',Reason}> when 'true' ->
			    %% Line 2817
			    call 'erlang':'exit'
				(Reason)
			%% Line 2818
			<AsnErr = {'asn1_error',_cor12}> when 'true' ->
			    %% Line 2819
			    call 'erlang':'throw'
				(AsnErr)
			%% Line 2820
			<Result> when 'true' ->
			    %% Line 2821
			    Result
		      end
	  %% Line 2823
	  <[{'identifier',_cor13,IdName}|[{':',_cor14}|Rest]]> when 'true' ->
	      %% Line 2824
	      case apply 'parse_Value'/1
		       (Rest) of
		<{Value,Rest2}> when 'true' ->
		    %% Line 2825
		    {{'CHOICE',{IdName,Value}},Rest2}
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2826
	  <Tokens = [{'NULL',_cor15}|[{':',_cor16}|_X_Rest]]> when 'true' ->
	      %% Line 2827
	      apply 'parse_ObjectClassFieldValue'/1
		  (Tokens)
	  %% Line 2828
	  <[{'NULL',_cor17}|Rest]> when 'true' ->
	      %% Line 2829
	      {'NULL',Rest}
	  %% Line 2830
	  <[{'TRUE',_cor18}|Rest]> when 'true' ->
	      %% Line 2831
	      {'true',Rest}
	  %% Line 2832
	  <[{'FALSE',_cor19}|Rest]> when 'true' ->
	      %% Line 2833
	      {'false',Rest}
	  %% Line 2834
	  <[{'PLUS-INFINITY',_cor20}|Rest]> when 'true' ->
	      %% Line 2835
	      {'PLUS-INFINITY',Rest}
	  %% Line 2836
	  <[{'MINUS-INFINITY',_cor21}|Rest]> when 'true' ->
	      %% Line 2837
	      {'MINUS-INFINITY',Rest}
	  %% Line 2838
	  <[{'cstring',_cor22,Cstr}|Rest]> when 'true' ->
	      %% Line 2839
	      {Cstr,Rest}
	  %% Line 2840
	  <[{'number',_cor23,Num}|Rest]> when 'true' ->
	      %% Line 2841
	      {Num,Rest}
	  %% Line 2842
	  <[{'-',_cor24}|[{'number',_cor25,Num}|Rest]]> when 'true' ->
	      let <_cor5> =
		  %% Line 2843
		  call 'erlang':'-'
		      (Num)
	      in  %% Line 2843
		  {_cor5,Rest}
	  %% Line 2844
	  <Tokens> when 'true' ->
	      %% Line 2845
	      apply 'parse_ObjectClassFieldValue'/1
		  (Tokens)
	end
'parse_DefinedValue'/1 =
    %% Line 2847
    fun (_cor0) ->
	case _cor0 of
	  <Tokens = [{'identifier',_cor3,_cor4}|[{'{',_cor5}|_X_Rest]]> when 'true' ->
	      %% Line 2848
	      apply 'parse_ParameterizedValue'/1
		  (Tokens)
	  %% Line 2850
	  <[{'typereference',L1,Tname}|[{'.',_cor6}|[{'identifier',_cor7,Idname}|Rest]]]> when 'true' ->
	      %% Line 2851
	      {{'Externalvaluereference',L1,Tname,Idname},Rest}
	  %% Line 2853
	  <[Id = {'identifier',_cor8,_cor9}|Rest]> when 'true' ->
	      let <_cor1> =
		  %% Line 2854
		  apply 'identifier2Extvalueref'/1
		      (Id)
	      in  %% Line 2854
		  {_cor1,Rest}
	  %% Line 2856
	  <Tokens> when 'true' ->
	      %% Line 2857
	      apply 'parse_ParameterizedValue'/1
		  (Tokens)
	end
'parse_SequenceValue'/1 =
    %% Line 2860
    fun (_cor0) ->
	case _cor0 of
	  <[{'{',_cor7}|Tokens]> when 'true' ->
	      %% Line 2861
	      apply 'parse_SequenceValue'/2
		  (Tokens, [])
	  %% Line 2862
	  <Tokens> when 'true' ->
	      let <_cor4> =
		  %% Line 2863
		  call 'erlang':'hd'
		      (Tokens)
	      in  let <_cor5> =
		      %% Line 2863
		      apply 'get_line'/1
			  (_cor4)
		  in  let <_cor3> =
			  %% Line 2863
			  call 'erlang':'get'
			      ('asn1_module')
		      in  let <_cor1> =
			      %% Line 2864
			      call 'erlang':'hd'
				  (Tokens)
			  in  let <_cor2> =
				  %% Line 2864
				  apply 'get_token'/1
				      (_cor1)
			      in  %% Line 2863
				  call 'erlang':'throw'
				      ({'asn1_error',{_cor5,_cor3,%% Line 2864
								  ['got'|[_cor2|['expected'|['{']]]]}})
	end
'parse_SequenceValue'/2 =
    %% Line 2866
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{'identifier',_cor17,IdName}|Rest],Acc> when 'true' ->
	      %% Line 2867
	      case apply 'parse_Value'/1
		       (Rest) of
		<{Value,Rest2}> when 'true' ->
		    %% Line 2868
		    case Rest2 of
		      %% Line 2869
		      <[{',',_cor18}|Rest3]> when 'true' ->
			  %% Line 2870
			  apply 'parse_SequenceValue'/2
			      (Rest3, [{IdName,Value}|Acc])
		      %% Line 2871
		      <[{'}',_cor19}|Rest3]> when 'true' ->
			  let <_cor3> =
			      %% Line 2872
			      call 'lists':'reverse'
				  ([{IdName,Value}|Acc])
			  in  %% Line 2872
			      {_cor3,Rest3}
		      %% Line 2873
		      <_cor20> when 'true' ->
			  let <_cor7> =
			      %% Line 2874
			      call 'erlang':'hd'
				  (Rest2)
			  in  let <_cor8> =
				  %% Line 2874
				  apply 'get_line'/1
				      (_cor7)
			      in  let <_cor6> =
				      %% Line 2874
				      call 'erlang':'get'
					  ('asn1_module')
				  in  let <_cor4> =
					  %% Line 2875
					  call 'erlang':'hd'
					      (Rest2)
				      in  let <_cor5> =
					      %% Line 2875
					      apply 'get_token'/1
						  (_cor4)
					  in  %% Line 2874
					      call 'erlang':'throw'
						  ({'asn1_error',{_cor8,_cor6,%% Line 2875
									      ['got'|[_cor5|['expected'|['}']]]]}})
		    end
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2877
	  <Tokens,_X_Acc> when 'true' ->
	      let <_cor13> =
		  %% Line 2878
		  call 'erlang':'hd'
		      (Tokens)
	      in  let <_cor14> =
		      %% Line 2878
		      apply 'get_line'/1
			  (_cor13)
		  in  let <_cor12> =
			  %% Line 2878
			  call 'erlang':'get'
			      ('asn1_module')
		      in  let <_cor10> =
			      %% Line 2879
			      call 'erlang':'hd'
				  (Tokens)
			  in  let <_cor11> =
				  %% Line 2879
				  apply 'get_token'/1
				      (_cor10)
			      in  %% Line 2878
				  call 'erlang':'throw'
				      ({'asn1_error',{_cor14,_cor12,%% Line 2879
								    ['got'|[_cor11|['expected'|['identifier']]]]}})
	end
'parse_SequenceOfValue'/1 =
    %% Line 2881
    fun (_cor0) ->
	case _cor0 of
	  <[{'{',_cor7}|Tokens]> when 'true' ->
	      %% Line 2882
	      apply 'parse_SequenceOfValue'/2
		  (Tokens, [])
	  %% Line 2883
	  <Tokens> when 'true' ->
	      let <_cor4> =
		  %% Line 2884
		  call 'erlang':'hd'
		      (Tokens)
	      in  let <_cor5> =
		      %% Line 2884
		      apply 'get_line'/1
			  (_cor4)
		  in  let <_cor3> =
			  %% Line 2884
			  call 'erlang':'get'
			      ('asn1_module')
		      in  let <_cor1> =
			      %% Line 2885
			      call 'erlang':'hd'
				  (Tokens)
			  in  let <_cor2> =
				  %% Line 2885
				  apply 'get_token'/1
				      (_cor1)
			      in  %% Line 2884
				  call 'erlang':'throw'
				      ({'asn1_error',{_cor5,_cor3,%% Line 2885
								  ['got'|[_cor2|['expected'|['{']]]]}})
	end
'parse_SequenceOfValue'/2 =
    %% Line 2887
    fun (_cor1,_cor0) ->
	%% Line 2888
	case apply 'parse_Value'/1
		 (_cor1) of
	  <{Value,Rest2}> when 'true' ->
	      %% Line 2889
	      case Rest2 of
		%% Line 2890
		<[{',',_cor12}|Rest3]> when 'true' ->
		    %% Line 2891
		    apply 'parse_SequenceOfValue'/2
			(Rest3, [Value|_cor0])
		%% Line 2892
		<[{'}',_cor13}|Rest3]> when 'true' ->
		    let <_cor3> =
			%% Line 2893
			call 'lists':'reverse'
			    ([Value|_cor0])
		    in  %% Line 2893
			{_cor3,Rest3}
		%% Line 2894
		<_cor14> when 'true' ->
		    let <_cor7> =
			%% Line 2895
			call 'erlang':'hd'
			    (Rest2)
		    in  let <_cor8> =
			    %% Line 2895
			    apply 'get_line'/1
				(_cor7)
			in  let <_cor6> =
				%% Line 2895
				call 'erlang':'get'
				    ('asn1_module')
			    in  let <_cor4> =
				    %% Line 2896
				    call 'erlang':'hd'
					(Rest2)
				in  let <_cor5> =
					%% Line 2896
					apply 'get_token'/1
					    (_cor4)
				    in  %% Line 2895
					call 'erlang':'throw'
					    ({'asn1_error',{_cor8,_cor6,%% Line 2896
									['got'|[_cor5|['expected'|['}']]]]}})
	      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'parse_ValueSetTypeAssignment'/1 =
    %% Line 2899
    fun (_cor0) ->
	case _cor0 of
	  <[{'typereference',L1,Name}|Rest]> when 'true' ->
	      %% Line 2900
	      case apply 'parse_Type'/1
		       (Rest) of
		<{Type,Rest2}> when 'true' ->
		    %% Line 2901
		    case Rest2 of
		      %% Line 2902
		      <[{'::=',_cor14}|Rest3]> when 'true' ->
			  %% Line 2903
			  case apply 'parse_ValueSet'/1
				   (Rest3) of
			    <{ValueSet,Rest4}> when 'true' ->
				let <_cor3> =
				    %% Line 2905
				    call 'erlang':'get'
					('asn1_module')
				in  %% Line 2904
				    {{'valuedef','false',L1,Name,Type,ValueSet,_cor3},%% Line 2905
										      Rest4}
			    ( <_cor2> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor2})
			      -| ['compiler_generated'] )
			  end
		      %% Line 2906
		      <[H|_X_T]> when 'true' ->
			  let <_cor6> =
			      %% Line 2907
			      apply 'get_line'/1
				  (L1)
			  in  let <_cor5> =
				  %% Line 2907
				  call 'erlang':'get'
				      ('asn1_module')
			      in  let <_cor4> =
				      %% Line 2908
				      apply 'get_token'/1
					  (H)
				  in  %% Line 2907
				      call 'erlang':'throw'
					  ({'asn1_error',{_cor6,_cor5,%% Line 2908
								      ['got'|[_cor4|['expected'|['::=']]]]}})
		      ( <_cor7> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor7})
			-| ['compiler_generated'] )
		    end
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2910
	  <Tokens> when 'true' ->
	      let <_cor11> =
		  %% Line 2911
		  call 'erlang':'hd'
		      (Tokens)
	      in  let <_cor12> =
		      %% Line 2911
		      apply 'get_line'/1
			  (_cor11)
		  in  let <_cor10> =
			  %% Line 2911
			  call 'erlang':'get'
			      ('asn1_module')
		      in  let <_cor8> =
			      %% Line 2912
			      call 'erlang':'hd'
				  (Tokens)
			  in  let <_cor9> =
				  %% Line 2912
				  apply 'get_token'/1
				      (_cor8)
			      in  %% Line 2911
				  call 'erlang':'throw'
				      ({'asn1_assignment_error',{_cor12,_cor10,%% Line 2912
									       ['got'|[_cor9|['expected'|['typereference']]]]}})
	end
'parse_ValueSet'/1 =
    %% Line 2915
    fun (_cor0) ->
	case _cor0 of
	  <[{'{',_cor12}|Rest]> when 'true' ->
	      %% Line 2916
	      case apply 'parse_ElementSetSpecs'/1
		       (Rest) of
		<{Elems,Rest2}> when 'true' ->
		    %% Line 2917
		    case Rest2 of
		      %% Line 2918
		      <[{'}',_cor13}|Rest3]> when 'true' ->
			  %% Line 2919
			  {{'valueset',Elems},Rest3}
		      %% Line 2920
		      <[H|_X_T]> when 'true' ->
			  let <_cor4> =
			      %% Line 2921
			      apply 'get_line'/1
				  (H)
			  in  let <_cor3> =
				  %% Line 2921
				  call 'erlang':'get'
				      ('asn1_module')
			      in  let <_cor2> =
				      %% Line 2922
				      apply 'get_token'/1
					  (H)
				  in  %% Line 2921
				      call 'erlang':'throw'
					  ({'asn1_error',{_cor4,_cor3,%% Line 2922
								      ['got'|[_cor2|['expected'|['}']]]]}})
		      ( <_cor5> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor5})
			-| ['compiler_generated'] )
		    end
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2924
	  <Tokens> when 'true' ->
	      let <_cor9> =
		  %% Line 2925
		  call 'erlang':'hd'
		      (Tokens)
	      in  let <_cor10> =
		      %% Line 2925
		      apply 'get_line'/1
			  (_cor9)
		  in  let <_cor8> =
			  %% Line 2925
			  call 'erlang':'get'
			      ('asn1_module')
		      in  let <_cor6> =
			      %% Line 2926
			      call 'erlang':'hd'
				  (Tokens)
			  in  let <_cor7> =
				  %% Line 2926
				  apply 'get_token'/1
				      (_cor6)
			      in  %% Line 2925
				  call 'erlang':'throw'
				      ({'asn1_error',{_cor10,_cor8,%% Line 2926
								   ['got'|[_cor7|['expected'|['{']]]]}})
	end
'parse_ValueAssignment'/1 =
    %% Line 2928
    fun (_cor0) ->
	case _cor0 of
	  <[{'identifier',L1,IdName}|Rest]> when 'true' ->
	      %% Line 2929
	      case apply 'parse_Type'/1
		       (Rest) of
		<{Type,Rest2}> when 'true' ->
		    %% Line 2930
		    case Rest2 of
		      %% Line 2931
		      <[{'::=',_cor18}|Rest3]> when 'true' ->
			  %% Line 2932
			  case apply 'parse_Value'/1
				   (Rest3) of
			    <{Value,Rest4}> when 'true' ->
				let <_cor3> =
				    catch
					%% Line 2933
					apply 'lookahead_assignment'/1
					    (Rest4)
				in  %% Line 2933
				    case _cor3 of
				      %% Line 2934
				      <'ok'> when 'true' ->
					  let <_cor4> =
					      %% Line 2936
					      call 'erlang':'get'
						  ('asn1_module')
					  in  %% Line 2935
					      {{'valuedef','false',L1,IdName,Type,Value,_cor4},%% Line 2936
											       Rest4}
				      %% Line 2937
				      <Error> when 'true' ->
					  %% Line 2938
					  call 'erlang':'throw'
					      (Error)
				    end
			    ( <_cor2> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor2})
			      -| ['compiler_generated'] )
			  end
		      %% Line 2942
		      <_cor19> when 'true' ->
			  let <_cor9> =
			      %% Line 2943
			      call 'erlang':'hd'
				  (Rest2)
			  in  let <_cor10> =
				  %% Line 2943
				  apply 'get_line'/1
				      (_cor9)
			      in  let <_cor8> =
				      %% Line 2943
				      call 'erlang':'get'
					  ('asn1_module')
				  in  let <_cor6> =
					  %% Line 2944
					  call 'erlang':'hd'
					      (Rest2)
				      in  let <_cor7> =
					      %% Line 2944
					      apply 'get_token'/1
						  (_cor6)
					  in  %% Line 2943
					      call 'erlang':'throw'
						  ({'asn1_error',{_cor10,_cor8,%% Line 2944
									       ['got'|[_cor7|['expected'|['::=']]]]}})
		    end
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2946
	  <Tokens> when 'true' ->
	      let <_cor15> =
		  %% Line 2947
		  call 'erlang':'hd'
		      (Tokens)
	      in  let <_cor16> =
		      %% Line 2947
		      apply 'get_line'/1
			  (_cor15)
		  in  let <_cor14> =
			  %% Line 2947
			  call 'erlang':'get'
			      ('asn1_module')
		      in  let <_cor12> =
			      %% Line 2948
			      call 'erlang':'hd'
				  (Tokens)
			  in  let <_cor13> =
				  %% Line 2948
				  apply 'get_token'/1
				      (_cor12)
			      in  %% Line 2947
				  call 'erlang':'throw'
				      ({'asn1_assignment_error',{_cor16,_cor14,%% Line 2948
									       ['got'|[_cor13|['expected'|['identifier']]]]}})
	end
'parse_SubtypeElements'/1 =
    %% Line 2951
    fun (_cor0) ->
	case _cor0 of
	  <[{'SIZE',_cor32}|Tokens]> when 'true' ->
	      %% Line 2952
	      case apply 'parse_Constraint'/1
		       (Tokens) of
		<{Constraint,Rest}> when 'true' ->
		    %% Line 2953
		    ( case Constraint of
			( <( {'constraint',_rec17,_cor33}
			     -| ['compiler_generated'] )> when 'true' ->
			      {{'SizeConstraint',_rec17},Rest}
			  -| ['compiler_generated'] )
			( <_cor34> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','constraint'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2955
	  <[{'FROM',_cor35}|Tokens]> when 'true' ->
	      %% Line 2956
	      case apply 'parse_Constraint'/1
		       (Tokens) of
		<{Constraint,Rest}> when 'true' ->
		    %% Line 2957
		    ( case Constraint of
			( <( {'constraint',_rec18,_cor36}
			     -| ['compiler_generated'] )> when 'true' ->
			      {{'PermittedAlphabet',_rec18},Rest}
			  -| ['compiler_generated'] )
			( <_cor37> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','constraint'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2959
	  <[{'WITH',_cor38}|[{'COMPONENT',_cor39}|Tokens]]> when 'true' ->
	      %% Line 2960
	      case apply 'parse_Constraint'/1
		       (Tokens) of
		<{Constraint,Rest}> when 'true' ->
		    %% Line 2961
		    {{'WITH COMPONENT',Constraint},Rest}
		( <_cor7> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor7})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2962
	  <[{'WITH',_cor40}|[{'COMPONENTS',_cor41}|[{'{',_cor42}|[{'...',_cor43}|[{',',_cor44}|Tokens]]]]]> when 'true' ->
	      %% Line 2963
	      case apply 'parse_TypeConstraints'/1
		       (Tokens) of
		<{Constraint,Rest}> when 'true' ->
		    %% Line 2964
		    case Rest of
		      %% Line 2965
		      <[{'}',_cor45}|Rest2]> when 'true' ->
			  %% Line 2966
			  {{'WITH COMPONENTS',{'PartialSpecification',Constraint}},Rest2}
		      %% Line 2967
		      <_cor46> when 'true' ->
			  let <_cor12> =
			      %% Line 2968
			      call 'erlang':'hd'
				  (Rest)
			  in  let <_cor13> =
				  %% Line 2968
				  apply 'get_line'/1
				      (_cor12)
			      in  let <_cor11> =
				      %% Line 2968
				      call 'erlang':'get'
					  ('asn1_module')
				  in  let <_cor9> =
					  %% Line 2969
					  call 'erlang':'hd'
					      (Rest)
				      in  let <_cor10> =
					      %% Line 2969
					      apply 'get_token'/1
						  (_cor9)
					  in  %% Line 2968
					      call 'erlang':'throw'
						  ({'asn1_error',{_cor13,_cor11,%% Line 2969
										['got'|[_cor10|['expected'|['}']]]]}})
		    end
		( <_cor8> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor8})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2971
	  <[{'WITH',_cor47}|[{'COMPONENTS',_cor48}|[{'{',_cor49}|Tokens]]]> when 'true' ->
	      %% Line 2972
	      case apply 'parse_TypeConstraints'/1
		       (Tokens) of
		<{Constraint,Rest}> when 'true' ->
		    %% Line 2973
		    case Rest of
		      %% Line 2974
		      <[{'}',_cor50}|Rest2]> when 'true' ->
			  %% Line 2975
			  {{'WITH COMPONENTS',{'FullSpecification',Constraint}},Rest2}
		      %% Line 2976
		      <_cor51> when 'true' ->
			  let <_cor19> =
			      %% Line 2977
			      call 'erlang':'hd'
				  (Rest)
			  in  let <_cor20> =
				  %% Line 2977
				  apply 'get_line'/1
				      (_cor19)
			      in  let <_cor18> =
				      %% Line 2977
				      call 'erlang':'get'
					  ('asn1_module')
				  in  let <_cor16> =
					  %% Line 2978
					  call 'erlang':'hd'
					      (Rest)
				      in  let <_cor17> =
					      %% Line 2978
					      apply 'get_token'/1
						  (_cor16)
					  in  %% Line 2977
					      call 'erlang':'throw'
						  ({'asn1_error',{_cor20,_cor18,%% Line 2978
										['got'|[_cor17|['expected'|['}']]]]}})
		    end
		( <_cor15> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor15})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2980
	  <[{'PATTERN',_cor52}|Tokens]> when 'true' ->
	      %% Line 2981
	      case apply 'parse_Value'/1
		       (Tokens) of
		<{Value,Rest}> when 'true' ->
		    %% Line 2982
		    {{'pattern',Value},Rest}
		( <_cor22> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor22})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2988
	  <Tokens> when 'true' ->
	      let <_cor25> =
		  %% Line 2991
		  ( fun (_cor23) ->
			case _cor23 of
			  <[{'MIN',_cor53}|T]> when 'true' ->
			      {'MIN',T}
			  ( <_cor24> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_cor24})
				  -| [{'function_name',{'-parse_SubtypeElements/1-fun-2-',1}}] )
			    -| ['compiler_generated'] )
			end
		    -| [{'id',{0,0,'-parse_SubtypeElements/1-fun-2-'}}] )
	      in  let <Flist> =
		      %% Line 2989
		      [( 'parse_ContainedSubtype'/1
			 -| [{'id',{0,0,'-parse_SubtypeElements/1-fun-0-'}}] )|%% Line 2990
									       [( 'parse_Value'/1
										  -| [{'id',{0,0,'-parse_SubtypeElements/1-fun-1-'}}] )|%% Line 2991
																	[_cor25|%% Line 2992
																		[( 'parse_Type'/1
																		   -| [{'id',{0,0,'-parse_SubtypeElements/1-fun-3-'}}] )|[]]]]]
		  in  let <_cor27> =
			  catch
			      %% Line 2993
			      apply 'parse_or'/2
				  (Tokens, Flist)
		      in  %% Line 2993
			  case _cor27 of
			    %% Line 2994
			    <{'EXIT',Reason}> when 'true' ->
				%% Line 2995
				call 'erlang':'exit'
				    (Reason)
			    %% Line 2996
			    <{'asn1_error',Reason}> when 'true' ->
				%% Line 2997
				call 'erlang':'throw'
				    (Reason)
			    %% Line 2998
			    <Result = {Val = {'type',_cor54,_cor55,_cor56,_cor57,_cor58},_cor59}> when ( 'true'
													 -| ['compiler_generated'] ) ->
				%% Line 2999
				Result
			    %% Line 3000
			    <{Lower,[{'..',_cor60}|Rest]}> when 'true' ->
				%% Line 3001
				case apply 'parse_UpperEndpoint'/1
					 (Rest) of
				  <{Upper,Rest2}> when 'true' ->
				      %% Line 3002
				      {{'ValueRange',{Lower,Upper}},Rest2}
				  ( <_cor28> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor28})
				    -| ['compiler_generated'] )
				end
			    %% Line 3003
			    <{Lower,[{'<',_cor61}|[{'..',_cor62}|Rest]]}> when 'true' ->
				%% Line 3004
				case apply 'parse_UpperEndpoint'/1
					 (Rest) of
				  <{Upper,Rest2}> when 'true' ->
				      %% Line 3005
				      {{'ValueRange',{{'gt',Lower},Upper}},Rest2}
				  ( <_cor29> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor29})
				    -| ['compiler_generated'] )
				end
			    %% Line 3006
			    <{Res = {'ContainedSubtype',_X_Type},Rest}> when 'true' ->
				%% Line 3007
				{Res,Rest}
			    %% Line 3008
			    <{Value,Rest}> when 'true' ->
				%% Line 3009
				{{'SingleValue',Value},Rest}
			    ( <_cor30> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor30})
			      -| ['compiler_generated'] )
			  end
	end
'parse_ContainedSubtype'/1 =
    %% Line 3012
    fun (_cor0) ->
	case _cor0 of
	  <[{'INCLUDES',_cor8}|Rest]> when 'true' ->
	      %% Line 3013
	      case apply 'parse_Type'/1
		       (Rest) of
		<{Type,Rest2}> when 'true' ->
		    %% Line 3014
		    {{'ContainedSubtype',Type},Rest2}
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 3015
	  <Tokens> when 'true' ->
	      let <_cor5> =
		  %% Line 3016
		  call 'erlang':'hd'
		      (Tokens)
	      in  let <_cor6> =
		      %% Line 3016
		      apply 'get_line'/1
			  (_cor5)
		  in  let <_cor4> =
			  %% Line 3016
			  call 'erlang':'get'
			      ('asn1_module')
		      in  let <_cor2> =
			      %% Line 3017
			      call 'erlang':'hd'
				  (Tokens)
			  in  let <_cor3> =
				  %% Line 3017
				  apply 'get_token'/1
				      (_cor2)
			      in  %% Line 3016
				  call 'erlang':'throw'
				      ({'asn1_error',{_cor6,_cor4,%% Line 3017
								  ['got'|[_cor3|['expected'|['INCLUDES']]]]}})
	end
'parse_UpperEndpoint'/1 =
    %% Line 3021
    fun (_cor0) ->
	case _cor0 of
	  <[{'<',_cor2}|Rest]> when 'true' ->
	      %% Line 3022
	      apply 'parse_UpperEndpoint'/2
		  ('lt', Rest)
	  %% Line 3023
	  <Tokens> when 'true' ->
	      %% Line 3024
	      apply 'parse_UpperEndpoint'/2
		  ('false', Tokens)
	end
'parse_UpperEndpoint'/2 =
    %% Line 3026
    fun (_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 3027
	    ( fun (_cor2) ->
		  case _cor2 of
		    <[{'MAX',_cor10}|T]> when 'true' ->
			{'MAX',T}
		    ( <_cor3> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor3})
			    -| [{'function_name',{'-parse_UpperEndpoint/2-fun-0-',1}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-parse_UpperEndpoint/2-fun-0-'}}] )
	in  let <Flist> =
		%% Line 3027
		[_cor4|%% Line 3028
		       [( 'parse_Value'/1
			  -| [{'id',{0,0,'-parse_UpperEndpoint/2-fun-1-'}}] )|[]]]
	    in  let <_cor6> =
		    catch
			%% Line 3029
			apply 'parse_or'/2
			    (_cor0, Flist)
		in  %% Line 3029
		    case _cor6 of
		      %% Line 3030
		      <{'EXIT',Reason}> when 'true' ->
			  %% Line 3031
			  call 'erlang':'exit'
			      (Reason)
		      %% Line 3032
		      <AsnErr = {'asn1_error',_cor11}> when 'true' ->
			  %% Line 3033
			  call 'erlang':'throw'
			      (AsnErr)
		      %% Line 3034
		      <{Value,Rest2}>
			  when call 'erlang':'=:='
				(_cor1,
				 'lt') ->
			  %% Line 3035
			  {{'lt',Value},Rest2}
		      %% Line 3036
		      <{Value,Rest2}> when 'true' ->
			  %% Line 3037
			  {Value,Rest2}
		      ( <_cor7> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor7})
			-| ['compiler_generated'] )
		    end
'parse_TypeConstraints'/1 =
    %% Line 3040
    fun (_cor0) ->
	%% Line 3041
	apply 'parse_TypeConstraints'/2
	    (_cor0, [])
'parse_TypeConstraints'/2 =
    %% Line 3043
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{'identifier',_cor10,_cor11}|Rest],Acc> when 'true' ->
	      %% Line 3044
	      case apply 'parse_ComponentConstraint'/1
		       (Rest) of
		<{ComponentConstraint,Rest2}> when 'true' ->
		    %% Line 3045
		    case Rest2 of
		      %% Line 3046
		      <[{',',_cor12}|Rest3]> when 'true' ->
			  %% Line 3047
			  apply 'parse_TypeConstraints'/2
			      (Rest3, [ComponentConstraint|Acc])
		      %% Line 3048
		      <_cor13> when 'true' ->
			  let <_cor3> =
			      %% Line 3049
			      call 'lists':'reverse'
				  ([ComponentConstraint|Acc])
			  in  %% Line 3049
			      {_cor3,Rest2}
		    end
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 3051
	  <[H|_X_T],_cor14> when 'true' ->
	      let <_cor7> =
		  %% Line 3052
		  apply 'get_line'/1
		      (H)
	      in  let <_cor6> =
		      %% Line 3052
		      call 'erlang':'get'
			  ('asn1_module')
		  in  let <_cor5> =
			  %% Line 3053
			  apply 'get_token'/1
			      (H)
		      in  %% Line 3052
			  call 'erlang':'throw'
			      ({'asn1_error',{_cor7,_cor6,%% Line 3053
							  ['got'|[_cor5|['expected'|['identifier']]]]}})
	  ( <_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8})
		  -| [{'function_name',{'parse_TypeConstraints',2}}] )
	    -| ['compiler_generated'] )
	end
'parse_ComponentConstraint'/1 =
    %% Line 3055
    fun (_cor0) ->
	case _cor0 of
	  <Tokens = [{'(',_cor5}|_X_Rest]> when 'true' ->
	      %% Line 3056
	      case apply 'parse_Constraint'/1
		       (Tokens) of
		<{ValueConstraint,Rest2}> when 'true' ->
		    %% Line 3057
		    case apply 'parse_PresenceConstraint'/1
			     (Rest2) of
		      <{PresenceConstraint,Rest3}> when 'true' ->
			  %% Line 3058
			  {{ValueConstraint,PresenceConstraint},Rest3}
		      ( <_cor2> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor2})
			-| ['compiler_generated'] )
		    end
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 3059
	  <Tokens> when 'true' ->
	      %% Line 3060
	      case apply 'parse_PresenceConstraint'/1
		       (Tokens) of
		<{PresenceConstraint,Rest}> when 'true' ->
		    %% Line 3061
		    {{'asn1_empty',PresenceConstraint},Rest}
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	end
'parse_PresenceConstraint'/1 =
    %% Line 3063
    fun (_cor0) ->
	case _cor0 of
	  <[{'PRESENT',_cor2}|Rest]> when 'true' ->
	      %% Line 3064
	      {'PRESENT',Rest}
	  %% Line 3065
	  <[{'ABSENT',_cor3}|Rest]> when 'true' ->
	      %% Line 3066
	      {'ABSENT',Rest}
	  %% Line 3067
	  <[{'OPTIONAL',_cor4}|Rest]> when 'true' ->
	      %% Line 3068
	      {'OPTIONAL',Rest}
	  %% Line 3069
	  <Tokens> when 'true' ->
	      %% Line 3070
	      {'asn1_empty',Tokens}
	end
'merge_constraints'/1 =
    %% Line 3080
    fun (_cor0) ->
	%% Line 3081
	apply 'merge_constraints'/3
	    (_cor0, [], [])
'merge_constraints'/3 =
    %% Line 3083
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[Ch|Ct],Cacc,Eacc> when 'true' ->
	      %% Line 3084
	      ( case Ch of
		  ( <( {'constraint',_cor15,_rec19}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_cor6> =
			    case _rec19 of
			      %% Line 3085
			      <'undefined'> when 'true' ->
				  Eacc
			      %% Line 3086
			      <E> when 'true' ->
				  [E|Eacc]
			    end
			in  let <_cor10> =
				%% Line 3088
				apply 'fixup_constraint'/1
				    (_cor15)
			    in  %% Line 3088
				apply 'merge_constraints'/3
				    (Ct, [_cor10|Cacc], _cor6)
		    -| ['compiler_generated'] )
		  ( <_cor16> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','constraint'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 3090
	  <[],Cacc,[]> when 'true' ->
	      %% Line 3092
	      call 'lists':'reverse'
		  (Cacc)
	  %% Line 3093
	  <[],Cacc,Eacc> when 'true' ->
	      let <_cor11> =
		  %% Line 3095
		  call 'lists':'reverse'
		      (Cacc)
	      in  %% Line 3095
		  call 'erlang':'++'
		      (_cor11, [{'Errors',Eacc}|[]])
	  ( <_cor14,_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12})
		  -| [{'function_name',{'merge_constraints',3}}] )
	    -| ['compiler_generated'] )
	end
'fixup_constraint'/1 =
    %% Line 3098
    fun (_cor0) ->
	%% Line 3099
	case _cor0 of
	  %% Line 3100
	  <{'SingleValue',SubType}>
	      when try
		    let <_cor1> =
			call 'erlang':'element'
			    (1, SubType)
		    in  call 'erlang':'=:='
			    (_cor1, 'ContainedSubtype')
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 3101
	      SubType
	  %% Line 3102
	  <{'SingleValue',V}>
	      when call 'erlang':'is_list'
		    (V) ->
	      _cor0
	  %% Line 3106
	  <{'PermittedAlphabet',{'SingleValue',V}}>
	      when call 'erlang':'is_list'
		    (V) ->
	      let <_cor2> =
		  %% Line 3109
		  call 'lists':'flatten'
		      (V)
	      in  let <_cor3> =
		      %% Line 3109
		      call 'ordsets':'from_list'
			  (_cor2)
		  in  let <V2> = {%% Line 3108
			   'SingleValue',_cor3}
		      in  %% Line 3110
			  {'PermittedAlphabet',V2}
	  %% Line 3111
	  <{'PermittedAlphabet',{'SingleValue',V}}> when 'true' ->
	      let <V2> =
		  %% Line 3112
		  {'SingleValue',[V|[]]}
	      in  %% Line 3113
		  {'PermittedAlphabet',V2}
	  %% Line 3114
	  <{'SizeConstraint',Sc}> when 'true' ->
	      let <_cor6> =
		  %% Line 3115
		  apply 'fixup_size_constraint'/1
		      (Sc)
	      in  %% Line 3115
		  {'SizeConstraint',_cor6}
	  %% Line 3117
	  <List>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      %% Line 3118
	      ( letrec
		    'lc$^0'/1 =
			fun (_cor9) ->
			    case _cor9 of
			      <[Xc|_cor8]> when 'true' ->
				  let <_cor10> =
				      apply 'fixup_constraint'/1
					  (Xc)
				  in  let <_cor11> =
					  apply 'lc$^0'/1
					      (_cor8)
				      in  ( [_cor10|_cor11]
					    -| ['compiler_generated'] )
			      <[]> when 'true' ->
				  []
			      ( <_cor9> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_cor9})
				      -| [{'function_name',{'lc$^0',1}}] )
				-| ['compiler_generated'] )
			    end
		in  apply 'lc$^0'/1
			(List)
		-| ['list_comprehension'] )
	  %% Line 3119
	  <Other> when 'true' ->
	      %% Line 3120
	      Other
	end
'fixup_size_constraint'/1 =
    %% Line 3123
    fun (_cor0) ->
	case _cor0 of
	  <{'ValueRange',{Lb,Ub}}> when 'true' ->
	      %% Line 3124
	      {Lb,Ub}
	  %% Line 3125
	  <{{'ValueRange',R},[]}> when 'true' ->
	      %% Line 3126
	      {R,[]}
	  %% Line 3127
	  <{[],{'ValueRange',R}}> when 'true' ->
	      %% Line 3128
	      {[],R}
	  %% Line 3129
	  <{{'ValueRange',R1},{'ValueRange',R2}}> when 'true' ->
	      %% Line 3130
	      {R1,R2}
	  %% Line 3131
	  <{'SingleValue',[Sv|[]]}> when 'true' ->
	      %% Line 3132
	      apply 'fixup_size_constraint'/1
		  ({'SingleValue',Sv})
	  %% Line 3133
	  <{'SingleValue',L}>
	      when call 'erlang':'is_list'
		    (L) ->
	      %% Line 3134
	      call 'ordsets':'from_list'
		  (L)
	  %% Line 3135
	  <{'SingleValue',L}> when 'true' ->
	      %% Line 3136
	      {L,L}
	  %% Line 3137
	  <{'SizeConstraint',C}> when 'true' ->
	      %% Line 3139
	      apply 'fixup_size_constraint'/1
		  (C)
	  %% Line 3140
	  <{C1,C2}> when 'true' ->
	      let <_cor3> =
		  %% Line 3142
		  apply 'fixup_size_constraint'/1
		      (C1)
	      in  let <_cor4> =
		      %% Line 3142
		      apply 'turn2vr'/1
			  (_cor3)
		  in  let <_cor1> =
			  %% Line 3142
			  apply 'fixup_size_constraint'/1
			      (C2)
		      in  let <_cor2> =
			      %% Line 3142
			      apply 'extension_size'/1
				  (_cor1)
			  in  %% Line 3142
			      {_cor4,_cor2}
	  %% Line 3143
	  <CList>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      %% Line 3144
	      ( letrec
		    'lc$^0'/1 =
			fun (_cor7) ->
			    case _cor7 of
			      <[Xc|_cor6]> when 'true' ->
				  let <_cor8> =
				      apply 'fixup_constraint'/1
					  (Xc)
				  in  let <_cor9> =
					  apply 'lc$^0'/1
					      (_cor6)
				      in  ( [_cor8|_cor9]
					    -| ['compiler_generated'] )
			      <[]> when 'true' ->
				  []
			      ( <_cor7> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_cor7})
				      -| [{'function_name',{'lc$^0',1}}] )
				-| ['compiler_generated'] )
			    end
		in  apply 'lc$^0'/1
			(CList)
		-| ['list_comprehension'] )
	  ( <_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10})
		  -| [{'function_name',{'fixup_size_constraint',1}}] )
	    -| ['compiler_generated'] )
	end
'turn2vr'/1 =
    %% Line 3146
    fun (_cor0) ->
	case _cor0 of
	  <L>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      let <_cor6> =
		  %% Line 3147
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor4) ->
				case _cor4 of
				  <[X|_cor2]>
				      when call 'erlang':'is_integer'
					    (X) ->
				      let <_cor5> =
					  apply 'lc$^0'/1
					      (_cor2)
				      in  ( [X|_cor5]
					    -| ['compiler_generated'] )
				  ( <[X|_cor2]> when 'true' ->
					apply 'lc$^0'/1
					    (_cor2)
				    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor4> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor4})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  let <_cor3> =
			    call 'ordsets':'from_list'
				(L)
			in  apply 'lc$^0'/1
				(_cor3)
		    -| ['list_comprehension'] )
	      in  %% Line 3148
		  case _cor6 of
		    %% Line 3149
		    <[H|_cor12]> when 'true' ->
			let <_cor8> =
			    %% Line 3150
			    call 'lists':'reverse'
				(_cor6)
			in  let <_cor9> =
				%% Line 3150
				call 'erlang':'hd'
				    (_cor8)
			    in  %% Line 3150
				{H,_cor9}
		    %% Line 3151
		    <_cor13> when 'true' ->
			%% Line 3152
			L
		  end
	  %% Line 3154
	  <VR> when 'true' ->
	      %% Line 3155
	      VR
	end
'extension_size'/1 =
    %% Line 3156
    fun (_cor0) ->
	case _cor0 of
	  <{I,_cor2}>
	      when call 'erlang':'=:='
		    (_cor2,
		     I) ->
	      %% Line 3157
	      [I|[]]
	  %% Line 3158
	  <{I1,I2}> when 'true' ->
	      %% Line 3159
	      [I1|[I2|[]]]
	  %% Line 3160
	  <C> when 'true' ->
	      %% Line 3161
	      C
	end
'get_line'/1 =
    %% Line 3163
    fun (_cor0) ->
	case _cor0 of
	  <{_cor6,Pos,Token}>
	      when let <_cor1> =
		    call 'erlang':'is_integer'
			(Pos)
		in  let <_cor2> =
			call 'erlang':'is_atom'
			    (Token)
		    in  call 'erlang':'and'
			    (_cor1, _cor2) ->
	      %% Line 3164
	      Pos
	  %% Line 3165
	  <{Token,Pos}>
	      when let <_cor3> =
		    call 'erlang':'is_integer'
			(Pos)
		in  let <_cor4> =
			call 'erlang':'is_atom'
			    (Token)
		    in  call 'erlang':'and'
			    (_cor3, _cor4) ->
	      %% Line 3166
	      Pos
	  %% Line 3167
	  <_cor7> when 'true' ->
	      %% Line 3168
	      'undefined'
	end
'get_token'/1 =
    %% Line 3170
    fun (_cor0) ->
	case _cor0 of
	  <{_cor6,Pos,Token}>
	      when let <_cor1> =
		    call 'erlang':'is_integer'
			(Pos)
		in  let <_cor2> =
			call 'erlang':'is_atom'
			    (Token)
		    in  call 'erlang':'and'
			    (_cor1, _cor2) ->
	      %% Line 3171
	      Token
	  %% Line 3172
	  <{'$end',Pos}>
	      when call 'erlang':'is_integer'
		    (Pos) ->
	      %% Line 3173
	      'undefined'
	  %% Line 3174
	  <{Token,Pos}>
	      when let <_cor3> =
		    call 'erlang':'is_integer'
			(Pos)
		in  let <_cor4> =
			call 'erlang':'is_atom'
			    (Token)
		    in  call 'erlang':'and'
			    (_cor3, _cor4) ->
	      %% Line 3175
	      Token
	  %% Line 3176
	  <_cor7> when 'true' ->
	      %% Line 3177
	      'undefined'
	end
'prioritize_error'/1 =
    %% Line 3179
    fun (_cor0) ->
	%% Line 3180
	case call 'lists':'keymember'
		 ('asn1_error', 1, _cor0) of
	  %% Line 3181
	  <'false'> when 'true' ->
	      %% Line 3182
	      call 'lists':'last'
		  (_cor0)
	  %% Line 3183
	  <'true'> when 'true' ->
	      let <_cor3> =
		  %% Line 3185
		  ( fun (_cor1) ->
			case _cor1 of
			  <{'asn1_error',_cor19}> when 'true' ->
			      'true'
			  <_cor20> when 'true' ->
			      'false'
			end
		    -| [{'id',{0,0,'-prioritize_error/1-fun-0-'}}] )
	      in  %% Line 3184
		  case %% Line 3185
		       call 'lists':'filter'
			   (_cor3, _cor0) of
		    <NewErrList = [_X_Err = {_cor21,_cor22}|_X_RestErr]> when 'true' ->
			let <_cor8> =
			    %% Line 3188
			    ( fun (_cor6) ->
				  case _cor6 of
				    <{_cor23,X}> when 'true' ->
					%% Line 3189
					case call 'erlang':'element'
						 (1, X) of
					  %% Line 3190
					  <Int>
					      when call 'erlang':'is_integer'
						    (Int) ->
					      'true'
					  %% Line 3191
					  <_cor24> when 'true' ->
					      'false'
					end
				    ( <_cor7> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor7})
					    -| [{'function_name',{'-prioritize_error/1-fun-1-',1}}] )
				      -| ['compiler_generated'] )
				  end
			      -| [{'id',{0,0,'-prioritize_error/1-fun-1-'}}] )
			in  %% Line 3195
			    case call 'lists':'splitwith'
				     (_cor8, NewErrList) of
			      %% Line 3196
			      <{[],UndefPosErrs}> when 'true' ->
				  %% Line 3197
				  call 'lists':'last'
				      (UndefPosErrs)
			      %% Line 3198
			      <{IntPosErrs,_cor25}> when 'true' ->
				  let <_cor12> =
				      %% Line 3199
				      ( fun (_cor10) ->
					    call 'erlang':'element'
						(2, _cor10)
					-| [{'id',{0,0,'-prioritize_error/1-fun-2-'}}] )
				  in  let <IntPosReasons> =
					  %% Line 3199
					  call 'lists':'map'
					      (_cor12, IntPosErrs)
				      in  let <SortedReasons> =
					      %% Line 3200
					      call 'lists':'keysort'
						  (1, IntPosReasons)
					  in  let <_cor15> =
						  %% Line 3201
						  call 'lists':'last'
						      (SortedReasons)
					      in  %% Line 3201
						  {'asn1_error',_cor15}
			      ( <_cor16> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor16})
				-| ['compiler_generated'] )
			    end
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor4})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor17> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor17})
	    -| ['compiler_generated'] )
	end
'tref2Exttref'/1 =
    %% Line 3213
    fun (_cor0) ->
	case _cor0 of
	  <{'typereference',Pos,Name}> when 'true' ->
	      let <_cor1> =
		  %% Line 3215
		  apply 'resolve_module'/1
		      (Name)
	      in  %% Line 3214
		  {'Externaltypereference',Pos,_cor1,%% Line 3216
						     Name}
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'tref2Exttref',1}}] )
	    -| ['compiler_generated'] )
	end
'tref2Exttref'/2 =
    %% Line 3218
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 3220
	    apply 'resolve_module'/1
		(_cor0)
	in  %% Line 3219
	    {'Externaltypereference',_cor1,_cor2,_cor0}
'identifier2Extvalueref'/1 =
    %% Line 3223
    fun (_cor0) ->
	case _cor0 of
	  <{'identifier',Pos,Name}> when 'true' ->
	      let <_cor1> =
		  %% Line 3225
		  apply 'resolve_module'/1
		      (Name)
	      in  %% Line 3224
		  {'Externalvaluereference',Pos,_cor1,%% Line 3226
						      Name}
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'identifier2Extvalueref',1}}] )
	    -| ['compiler_generated'] )
	end
'lookahead_assignment'/1 =
    %% Line 3231
    fun (_cor0) ->
	case _cor0 of
	  <[{'END',_cor2}|_X_Rest]> when 'true' ->
	      %% Line 3232
	      'ok'
	  %% Line 3233
	  <Tokens> when 'true' ->
	      do  %% Line 3234
		  apply 'parse_Assignment'/1
		      (Tokens)
		  %% Line 3235
		  'ok'
	end
'is_pre_defined_class'/1 =
    %% Line 3237
    fun (_cor0) ->
	case _cor0 of
	  <'TYPE-IDENTIFIER'> when 'true' ->
	      %% Line 3238
	      'true'
	  %% Line 3239
	  <'ABSTRACT-SYNTAX'> when 'true' ->
	      %% Line 3240
	      'true'
	  %% Line 3241
	  <_cor2> when 'true' ->
	      %% Line 3242
	      'false'
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('asn1ct_parser2')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('asn1ct_parser2', _cor0)
end