module 'asn1ct_constructed_per' ['gen_decode_choice'/3,
				 'gen_decode_sequence'/3,
				 'gen_decode_set'/3,
				 'gen_decode_sof'/4,
				 'gen_encode_choice'/3,
				 'gen_encode_sequence'/3,
				 'gen_encode_set'/3,
				 'gen_encode_sof'/4,
				 'module_info'/0,
				 'module_info'/1]
    attributes []
'gen_encode_set'/3 =
    %% Line 40
    fun (_cor2,_cor1,_cor0) ->
	%% Line 41
	apply 'gen_encode_constructed'/3
	    (_cor2, _cor1, _cor0)
'gen_encode_sequence'/3 =
    %% Line 43
    fun (_cor2,_cor1,_cor0) ->
	%% Line 44
	apply 'gen_encode_constructed'/3
	    (_cor2, _cor1, _cor0)
'gen_encode_constructed'/3 =
    %% Line 46
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Erule,Typename,D = {'type',_cor8,_cor9,_cor10,_cor11,_cor12}> when 'true' ->
	      do  %% Line 47
		  call 'asn1ct_name':'start'
		      ()
		  let <Imm> =
		      %% Line 48
		      apply 'gen_encode_constructed_imm'/3
			  (Erule, Typename, D)
		  in  let <_cor4> =
			  %% Line 49
			  apply 'is_aligned'/1
			      (Erule)
		      in  do  %% Line 49
			      call 'asn1ct_imm':'enc_cg'
				  (Imm, _cor4)
			      %% Line 50
			      call 'asn1ct_gen':'emit'
				  ([[46]|['nl']])
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'gen_encode_constructed',3}}] )
	    -| ['compiler_generated'] )
	end
'gen_encode_constructed_imm'/3 =
    %% Line 52
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Erule,Typename,D = {'type',_cor66,_cor67,_cor68,_cor69,_cor70}> when 'true' ->
	      let <ExtAddGroup,TmpCompList,TableConsInfo> =
		  %% Line 54
		  case _cor67 of
		    %% Line 55
		    <{'SEQUENCE',_cor76,TCI,ExtAddGroup0,CL}> when 'true' ->
			%% Line 56
			<ExtAddGroup0,CL,TCI>
		    %% Line 57
		    <{'SET',_cor77,_cor78,TCI,CL}> when 'true' ->
			%% Line 58
			<'undefined',CL,TCI>
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor5})
		      -| ['compiler_generated'] )
		  end
	      in  let <_cor16> =
		      %% Line 61
		      case ExtAddGroup of
			%% Line 62
			<'undefined'> when 'true' ->
			    %% Line 63
			    TmpCompList
			%% Line 64
			<_cor79>
			    when call 'erlang':'is_integer'
				  (ExtAddGroup) ->
			    %% Line 68
			    ( letrec
				  'lc$^0'/1 =
				      fun (_cor10) ->
					  case _cor10 of
					    <[%% Line 69
					      Comp|_cor9]> when 'true' ->
						case Comp of
						  <{'ComponentType',_cor80,_cor81,_cor82,_cor83,_cor84,_cor85}> when 'true' ->
						      let <_cor13> =
							  call 'erlang':'setelement'
							      (7, Comp, 'undefined')
						      in  let <_cor14> =
							      %% Line 69
							      apply 'lc$^0'/1
								  (_cor9)
							  in  ( [_cor13|_cor14]
								-| ['compiler_generated'] )
						  ( <_cor86> when 'true' ->
							( call ( 'erlang'
								 -| ['compiler_generated'] ):( 'error'
											       -| ['compiler_generated'] )
							      (( {'badrecord','ComponentType'}
								 -| ['compiler_generated'] ))
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						end
					    <[]> when 'true' ->
						[]
					    ( <_cor10> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor10})
						    -| [{'function_name',{'lc$^0',1}}] )
					      -| ['compiler_generated'] )
					  end
			      in  apply 'lc$^0'/1
				      (%% Line 69
				       TmpCompList)
			      -| ['list_comprehension'] )
			( <_cor15> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor15})
			  -| ['compiler_generated'] )
		      end
		  in  let <_cor23> =
			  %% Line 72
			  case Typename of
			    %% Line 73
			    <['EXTERNAL']> when 'true' ->
				let <_cor18> =
				    %% Line 74
				    call 'asn1ct_name':'next'
					('val')
				in  let <Next> =
					%% Line 74
					call 'asn1ct_gen':'mk_var'
					    (_cor18)
				    in  let <_cor20> =
					    %% Line 75
					    call 'asn1ct_name':'curr'
						('val')
					in  let <Curr> =
						%% Line 75
						call 'asn1ct_gen':'mk_var'
						    (_cor20)
					    in  do  %% Line 76
						    call 'asn1ct_name':'new'
							('val')
						    %% Line 77
						    [{'call','ext','transform_to_EXTERNAL1990',[{'var',Curr}|[]],{'var',Next}}|[]]
			    %% Line 78
			    <_cor87> when 'true' ->
				%% Line 79
				[]
			  end
		      in  let <Aligned> =
			      %% Line 81
			      apply 'is_aligned'/1
				  (Erule)
			  in  let <Value0> =
				  %% Line 82
				  apply 'make_var'/1
				      ('val')
			      in  let <_cor27> =
				      %% Line 83
				      apply 'to_textual_order'/1
					  (_cor16)
				  in  let <Optionals> =
					  %% Line 83
					  apply 'optionals'/1
					      (_cor27)
				      in  let <_cor34> =
					      %% Line 84
					      ( letrec
						    'lc$^1'/1 =
							fun (_cor31) ->
							    case _cor31 of
							      <[%% Line 85
								Opt|_cor30]> when 'true' ->
								  let <_cor32> =
								      call 'asn1ct_imm':'per_enc_optional'
									  (Value0, Opt, Aligned)
								  in  let <_cor33> =
									  %% Line 85
									  apply 'lc$^1'/1
									      (_cor30)
								      in  ( [_cor32|_cor33]
									    -| ['compiler_generated'] )
							      <[]> when 'true' ->
								  []
							      ( <_cor31> when 'true' ->
								    ( primop 'match_fail'
									  ({'function_clause',_cor31})
								      -| [{'function_name',{'lc$^1',1}}] )
								-| ['compiler_generated'] )
							    end
						in  apply 'lc$^1'/1
							(%% Line 85
							 Optionals)
						-| ['list_comprehension'] )
					  in  let <Ext> =
						  %% Line 86
						  apply 'extensible_enc'/1
						      (_cor16)
					      in  let <_cor39> =
						      %% Line 87
						      case Ext of
							%% Line 88
							<{'ext',ExtPos,NumExt}>
							    when call 'erlang':'>'
								  (NumExt,
								   0) ->
							    do  %% Line 89
								apply 'gen_encode_extaddgroup'/1
								    (_cor16)
								let <Value> =
								    %% Line 90
								    apply 'make_var'/1
									('val')
								in  %% Line 91
								    call 'asn1ct_imm':'per_enc_extensions'
									(Value, ExtPos, %% Line 92
											NumExt, %% Line 92
												Aligned)
							%% Line 93
							<_cor88> when 'true' ->
							    %% Line 94
							    []
						      end
						  in  let <EncObj,ObjSetImm> =
							  %% Line 97
							  case TableConsInfo of
							    %% Line 98
							    <{'simpletableattributes',_cor89,_cor90,_cor91,Used,%% Line 99
														Unique,_cor92}>
								when %% Line 99
								  call 'erlang':'/='
								      (Used,
								       Unique) ->
								%% Line 100
								<'false',[]>
							    %% Line 104
							    <{'simpletableattributes',ObjectSet,%% Line 105
												AttrN,%% Line 106
												      N,%% Line 107
													UniqueFieldName,_cor93,%% Line 109
															       ValueIndex0}>
								when call 'erlang':'=:='
								      (_cor93,
								       %% Line 108
								       UniqueFieldName) ->
								%% Line 111
								case ObjectSet of
								  <{Module,ObjSetName}> when 'true' ->
								      %% Line 112
								      case %% Line 113
									   call 'asn1_db':'dbget'
									       (Module, ObjSetName) of
									<{'typedef',_cor94,_cor95,_cor96,{'ObjectSet',_cor97,Gen,_cor98,_cor99}}> when 'true' ->
									    %% Line 114
									    case Gen of
									      %% Line 115
									      <'true'> when 'true' ->
										  let <_cor43> =
										      %% Line 116
										      call 'erlang':'+'
											  (N, 1)
										  in  let <ValueIndex> =
											  %% Line 116
											  call 'erlang':'++'
											      (ValueIndex0, [{_cor43,'top'}|[]])
										      in  let <Val> =
											      %% Line 117
											      apply 'make_var'/1
												  ('val')
											  in  %% Line 118
											      case apply 'enc_dig_out_value'/2
												       (ValueIndex, Val) of
												<{ObjSetImm0,Dst}> when 'true' ->
												    %% Line 119
												    <{AttrN,Dst},ObjSetImm0>
												( <_cor46> when 'true' ->
												      primop 'match_fail'
													  ({'badmatch',_cor46})
												  -| ['compiler_generated'] )
											      end
									      %% Line 120
									      <'false'> when 'true' ->
										  %% Line 121
										  <'false',[]>
									      ( <_cor47> when 'true' ->
										    primop 'match_fail'
											({'case_clause',_cor47})
										-| ['compiler_generated'] )
									    end
									( <_cor42> when 'true' ->
									      primop 'match_fail'
										  ({'badmatch',_cor42})
									  -| ['compiler_generated'] )
								      end
								  ( <_cor41> when 'true' ->
									primop 'match_fail'
									    ({'badmatch',_cor41})
								    -| ['compiler_generated'] )
								end
							    %% Line 123
							    <_cor100> when 'true' ->
								%% Line 124
								case _cor69 of
								  %% Line 125
								  <[{'objfun',_cor106}|_cor107]> when 'true' ->
								      %% Line 129
								      <{[103|[111|[116|[32|[111|[98|[106|[102|[117|[110|[32|[116|[104|[114|[111|[117|[103|[104|[32|[97|[114|[103|[115]]]]]]]]]]]]]]]]]]]]]]],{'var',[79|[98|[106|[70|[117|[110]]]]]]}},[]>
								  %% Line 130
								  <_cor108> when 'true' ->
								      %% Line 131
								      <'false',[]>
								end
							  end
						      in  let <_cor55> =
							      %% Line 135
							      case Ext of
								%% Line 136
								<{'ext',_X_Pos,NumExt2}>
								    when call 'erlang':'>'
									  (NumExt2,
									   0) ->
								    %% Line 137
								    call 'asn1ct_imm':'per_enc_extension_bit'
									({'var',[69|[120|[116|[101|[110|[115|[105|[111|[110|[115]]]]]]]]]]}, Aligned)
								%% Line 138
								<{'ext',_X_Pos,_cor109}> when 'true' ->
								    %% Line 139
								    call 'asn1ct_imm':'per_enc_extension_bit'
									([], Aligned)
								%% Line 140
								<_cor110> when 'true' ->
								    %% Line 141
								    []
							      end
							  in  let <ImmBody> =
								  %% Line 143
								  apply 'gen_enc_components_call'/5
								      (Erule, Typename, _cor16, EncObj, Ext)
							      in  let <_cor58> =
								      %% Line 145
								      call 'erlang':'++'
									  (_cor34, ImmBody)
								  in  let <_cor59> =
									  %% Line 145
									  [_cor55|_cor58]
								      in  let <_cor60> =
									      %% Line 145
									      call 'asn1ct_imm':'enc_append'
										  (_cor59)
									  in  let <_cor61> =
										  %% Line 144
										  call 'erlang':'++'
										      (ObjSetImm, _cor60)
									      in  let <_cor62> =
										      %% Line 144
										      call 'erlang':'++'
											  (_cor39, _cor61)
										  in  %% Line 144
										      call 'erlang':'++'
											  (_cor23, _cor62)
	  ( <_cor65,_cor64,_cor63> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor65,_cor64,_cor63})
		  -| [{'function_name',{'gen_encode_constructed_imm',3}}] )
	    -| ['compiler_generated'] )
	end
'gen_encode_extaddgroup'/1 =
    %% Line 147
    fun (_cor0) ->
	%% Line 148
	case apply 'extgroup_pos_and_length'/1
		 (_cor0) of
	  %% Line 149
	  <{'extgrouppos',[]}> when 'true' ->
	      %% Line 150
	      'ok'
	  %% Line 151
	  <{'extgrouppos',ExtGroupPosLenList}> when 'true' ->
	      do  %% Line 152
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor3) ->
				case _cor3 of
				  <[G|_cor2]> when 'true' ->
				      do  apply 'do_gen_encode_extaddgroup'/1
					      (G)
					  apply 'lc$^0'/1
					      (_cor2)
				  <[]> when 'true' ->
				      []
				  ( <_cor3> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor3})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (ExtGroupPosLenList)
		    -| ['list_comprehension'] )
		  %% Line 153
		  'ok'
	  ( <_cor8> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor8})
	    -| ['compiler_generated'] )
	end
'do_gen_encode_extaddgroup'/1 =
    %% Line 156
    fun (_cor0) ->
	case _cor0 of
	  <{ActualGroupPos,GroupVirtualPos,GroupLen}> when 'true' ->
	      let <_cor1> =
		  %% Line 157
		  call 'asn1ct_name':'curr'
		      ('val')
	      in  let <Val> =
		      %% Line 157
		      call 'asn1ct_gen':'mk_var'
			  (_cor1)
		  in  let <_cor4> =
			  %% Line 158
			  call 'erlang':'+'
			      (GroupVirtualPos, 1)
		      in  let <_cor3> =
			      %% Line 160
			      call 'lists':'seq'
				  (1, GroupLen)
			  in  let <Elements> =
				  %% Line 158
				  apply 'make_elements'/3
				      (_cor4, %% Line 159
					      Val, _cor3)
			      in  let <_cor6> =
				      %% Line 161
				      call 'erlang':'+'
					  (GroupVirtualPos, 1)
				  in  let <Expr> =
					  %% Line 161
					  apply 'any_non_value'/4
					      (_cor6, Val, GroupLen, [])
				      in  let <_cor8> =
					      %% Line 163
					      call 'erlang':'+'
						  (ActualGroupPos, 1)
					  in  let <_cor9> =
						  %% Line 165
						  call 'erlang':'+'
						      (ActualGroupPos, 1)
					      in  do  %% Line 162
						      call 'asn1ct_gen':'emit'
							  ([{'next','val'}|[[32|[61|[32|[99|[97|[115|[101|[32]]]]]]]]|[Expr|[[32|[111|[102]]]|['nl'|%% Line 163
																		    [[102|[97|[108|[115|[101|[32|[45|[62|[32|[115|[101|[116|[101|[108|[101|[109|[101|[110|[116|[40]]]]]]]]]]]]]]]]]]]]|[{'asis',_cor8}|[[44|[32]]|%% Line 164
																																				  [{'curr','val'}|[[44|[32|[97|[115|[110|[49|[95|[78|[79|[86|[65|[76|[85|[69|[41|[59]]]]]]]]]]]]]]]]|['nl'|%% Line 165
																																																	   [[116|[114|[117|[101|[32|[45|[62|[32|[115|[101|[116|[101|[108|[101|[109|[101|[110|[116|[40]]]]]]]]]]]]]]]]]]]|[{'asis',_cor9}|[[44|[32]]|%% Line 166
																																																																		    [{'curr','val'}|[[44|[32|[123|[101|[120|[116|[97|[100|[100|[103|[114|[111|[117|[112|[44]]]]]]]]]]]]]]]|[Elements|[[125|[41]]|['nl'|[[101|[110|[100|[44]]]]|['nl']]]]]]]]]]]]]]]]]]]]])
						      %% Line 168
						      call 'asn1ct_name':'new'
							  ('val')
	  ( <_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10})
		  -| [{'function_name',{'do_gen_encode_extaddgroup',1}}] )
	    -| ['compiler_generated'] )
	end
'any_non_value'/4 =
    %% Line 170
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <_cor13,_cor14,0,_cor15> when 'true' ->
	      %% Line 171
	      []
	  %% Line 172
	  <Pos,Val,N,Sep> when 'true' ->
	      let <_cor7> =
		  %% Line 173
		  apply 'make_element'/2
		      (Pos, Val)
	      in  let <_cor5> =
		      %% Line 174
		      call 'erlang':'+'
			  (Pos, 1)
		  in  let <_cor4> =
			  %% Line 174
			  call 'erlang':'-'
			      (N, 1)
		      in  let <_cor6> =
			      %% Line 174
			      apply 'any_non_value'/4
				  (_cor5, Val, _cor4, [[32|[111|[114|[101|[108|[115|[101]]]]]]]|['nl']])
			  in  let <_cor8> =
				  %% Line 173
				  [_cor7|[[32|[61|[47|[61|[32|[97|[115|[110|[49|[95|[78|[79|[86|[65|[76|[85|[69]]]]]]]]]]]]]]]]]|_cor6]]
			      in  %% Line 173
				  call 'erlang':'++'
				      (Sep, _cor8)
	end
'gen_decode_set'/3 =
    %% Line 179
    fun (_cor2,_cor1,_cor0) ->
	%% Line 180
	apply 'gen_decode_constructed'/3
	    (_cor2, _cor1, _cor0)
'gen_decode_sequence'/3 =
    %% Line 182
    fun (_cor2,_cor1,_cor0) ->
	%% Line 183
	apply 'gen_decode_constructed'/3
	    (_cor2, _cor1, _cor0)
'gen_decode_constructed'/3 =
    %% Line 185
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Erule,Typename,D = {'type',_cor9,_cor10,_cor11,_cor12,_cor13}> when 'true' ->
	      let <Imm0> =
		  %% Line 186
		  apply 'gen_dec_constructed_imm'/3
		      (Erule, Typename, D)
	      in  let <Imm> =
		      %% Line 187
		      apply 'opt_imm'/1
			  (Imm0)
		  in  do  %% Line 188
			  call 'asn1ct_name':'start'
			      ()
			  do  %% Line 189
			      apply 'emit_gen_dec_imm'/1
				  (Imm)
			      %% Line 190
			      call 'asn1ct_gen':'emit'
				  ([[46]|['nl'|['nl']]])
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'gen_decode_constructed',3}}] )
	    -| ['compiler_generated'] )
	end
'opt_imm'/1 =
    %% Line 192
    fun (_cor0) ->
	%% Line 193
	case apply 'opt_imm_1'/3
		 (_cor0, 'unknown', []) of
	  <{Imm,_cor3}> when 'true' ->
	      %% Line 194
	      Imm
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'opt_imm_1'/3 =
    %% Line 196
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[{'imm',Imm0,F}|T],Al0,Acc> when 'true' ->
	      %% Line 197
	      case call 'asn1ct_imm':'optimize_alignment'
		       (Imm0, Al0) of
		<{Imm,Al}> when 'true' ->
		    %% Line 198
		    apply 'opt_imm_1'/3
			(T, Al, [{'imm',Imm,F}|Acc])
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 199
	  <['ignore'|T],Al,Acc> when 'true' ->
	      %% Line 200
	      apply 'opt_imm_1'/3
		  (T, Al, Acc)
	  %% Line 201
	  <[H = {'ignore',_cor9}|T],Al,Acc> when 'true' ->
	      %% Line 202
	      apply 'opt_imm_1'/3
		  (T, Al, [H|Acc])
	  %% Line 203
	  <[{'safe','ignore'}|T],Al,Acc> when 'true' ->
	      %% Line 204
	      apply 'opt_imm_1'/3
		  (T, Al, Acc)
	  %% Line 205
	  <[H = {'safe',_cor10}|T],Al,Acc> when 'true' ->
	      %% Line 206
	      apply 'opt_imm_1'/3
		  (T, Al, [H|Acc])
	  %% Line 207
	  <[{'group',G0}|T],Al0,Acc> when 'true' ->
	      %% Line 208
	      case apply 'opt_imm_1'/3
		       (G0, Al0, []) of
		<{G,Al}> when 'true' ->
		    %% Line 209
		    apply 'opt_imm_1'/3
			(T, Al, [{'group',G}|Acc])
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 210
	  <[Emit|T],_cor11,Acc>
	      when call 'erlang':'is_function'
		    (Emit,
		     1) ->
	      %% Line 211
	      apply 'opt_imm_1'/3
		  (T, 'unknown', [Emit|Acc])
	  %% Line 212
	  <[],Al,Acc> when 'true' ->
	      let <_cor5> =
		  %% Line 213
		  call 'lists':'reverse'
		      (Acc)
	      in  %% Line 213
		  {_cor5,Al}
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'opt_imm_1',3}}] )
	    -| ['compiler_generated'] )
	end
'emit_gen_dec_imm'/1 =
    %% Line 215
    fun (_cor0) ->
	%% Line 216
	apply 'emit_gen_dec_imm'/3
	    (_cor0, [], [])
'emit_gen_dec_imm'/3 =
    %% Line 218
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[{'ignore',Fun}|T],Sep,St0> when 'true' ->
	      let <St> =
		  %% Line 219
		  apply Fun
		      (St0)
	      in  %% Line 220
		  apply 'emit_gen_dec_imm'/3
		      (T, Sep, St)
	  %% Line 221
	  <[{'group',L}|T],Sep,St0> when 'true' ->
	      do  %% Line 222
		  call 'asn1ct_gen':'emit'
		      (Sep)
		  let <St> =
		      %% Line 223
		      apply 'emit_gen_dec_imm_group'/2
			  (L, St0)
		  in  %% Line 224
		      apply 'emit_gen_dec_imm'/3
			  (T, ['com'|['nl']], St)
	  %% Line 225
	  <[{'imm',Imm,Emit}|T],Sep,St0> when 'true' ->
	      do  %% Line 226
		  call 'asn1ct_gen':'emit'
		      (Sep)
		  let <St> =
		      %% Line 227
		      apply Emit
			  (Imm, St0)
		  in  %% Line 228
		      apply 'emit_gen_dec_imm'/3
			  (T, ['com'|['nl']], St)
	  %% Line 229
	  <[{'safe',Item}|T],Sep,St> when 'true' ->
	      %% Line 230
	      apply 'emit_gen_dec_imm'/3
		  ([Item|T], Sep, St)
	  %% Line 231
	  <[Emit|T],Sep,St0> when 'true' ->
	      do  %% Line 232
		  call 'asn1ct_gen':'emit'
		      (Sep)
		  let <St> =
		      %% Line 233
		      apply Emit
			  (St0)
		  in  %% Line 234
		      apply 'emit_gen_dec_imm'/3
			  (T, ['com'|['nl']], St)
	  %% Line 235
	  <[],_cor10,_cor11> when 'true' ->
	      'ok'
	  ( <_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7})
		  -| [{'function_name',{'emit_gen_dec_imm',3}}] )
	    -| ['compiler_generated'] )
	end
'emit_gen_dec_imm_group'/2 =
    %% Line 237
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[H|T],St0> when 'true' ->
	      let <St> =
		  %% Line 238
		  apply 'emit_gen_dec_group_item'/2
		      (H, St0)
	      in  %% Line 239
		  apply 'emit_gen_dec_imm_group'/2
		      (T, St)
	  %% Line 240
	  <[],St> when 'true' ->
	      St
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'emit_gen_dec_imm_group',2}}] )
	    -| ['compiler_generated'] )
	end
'emit_gen_dec_group_item'/2 =
    %% Line 242
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'ignore',Fun},St> when 'true' ->
	      %% Line 243
	      apply Fun
		  (St)
	  %% Line 244
	  <{'imm',Imm,Fun},St> when 'true' ->
	      %% Line 245
	      apply Fun
		  (Imm, St)
	  %% Line 246
	  <{'safe',Item},St> when 'true' ->
	      %% Line 247
	      apply 'emit_gen_dec_group_item'/2
		  (Item, St)
	  %% Line 248
	  <Emit,St> when 'true' ->
	      %% Line 249
	      apply Emit
		  (St)
	end
'gen_dec_constructed_imm'/3 =
    %% Line 251
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Erule,Typename,D = {'type',_cor44,_cor45,_cor46,_cor47,_cor48}> when 'true' ->
	      let <CompList,TableConsInfo> =
		  %% Line 253
		  case _cor45 of
		    %% Line 254
		    <{'SEQUENCE',_cor54,TCI,_cor55,CL}> when 'true' ->
			let <_cor5> =
			    %% Line 255
			    apply 'add_textual_order'/1
				(CL)
			in  <_cor5,%% Line 255
				   TCI>
		    %% Line 256
		    <{'SET',_cor56,_cor57,TCI,CL}> when 'true' ->
			%% Line 258
			<CL,TCI>
		    ( <_cor6> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor6})
		      -| ['compiler_generated'] )
		  end
	      in  let <Ext> =
		      %% Line 260
		      apply 'extensible_dec'/1
			  (CompList)
		  in  let <_cor11> =
			  %% Line 261
			  case Ext of
			    %% Line 262
			    <{'ext',_X_Pos,_X_NumExt}> when 'true' ->
				%% Line 263
				apply 'gen_dec_extension_value'/0
				    ()
			    %% Line 264
			    <_cor58> when 'true' ->
				'ignore'
			  end
		      in  let <Optionals> =
			      %% Line 266
			      apply 'optionals'/1
				  (CompList)
			  in  let <_cor15> =
				  %% Line 267
				  case Optionals of
				    %% Line 268
				    <[]> when 'true' ->
					%% Line 269
					'ignore'
				    %% Line 270
				    <[_cor59|_cor60]> when 'true' ->
					%% Line 271
					apply 'gen_dec_optionals'/1
					    (Optionals)
				    ( <_cor14> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_cor14})
				      -| ['compiler_generated'] )
				  end
			      in  let <_cor32> =
				      %% Line 274
				      case TableConsInfo of
					%% Line 276
					<{'simpletableattributes',ObjectSet,%% Line 277
									    AttrN,_cor61,%% Line 278
											 UniqueFieldName,_cor62,%% Line 280
														ValIndex}>
					    when call 'erlang':'=:='
						  (_cor62,
						   %% Line 279
						   UniqueFieldName) ->
					    let <F> =
						%% Line 282
						( fun (_cor23) ->
						      case _cor23 of
							<{'ComponentType',_cor63,_cor64,CT,_cor65,_cor66,_cor67}> when 'true' ->
							    %% Line 283
							    ( case CT of
								( <( {'type',_cor68,_cor69,_rec4,_cor70,_cor71}
								     -| ['compiler_generated'] )> when 'true' ->
								      let <_cor21> =
									  call 'asn1ct_gen':'get_constraint'
									      (_rec4, 'componentrelation')
								      in  case <_cor21,_cor70> of
									    %% Line 284
									    <'no',[{'objfun',_cor78}|_X_R]> when 'true' ->
										'true'
									    %% Line 285
									    <_fol48,_fol49> when 'true' ->
										'false'
									  end
								  -| ['compiler_generated'] )
								( <_cor72> when 'true' ->
								      ( call ( 'erlang'
									       -| ['compiler_generated'] ):( 'error'
													     -| ['compiler_generated'] )
									    (( {'badrecord','type'}
									       -| ['compiler_generated'] ))
									-| ['compiler_generated'] )
								  -| ['compiler_generated'] )
							      end
							      -| ['compiler_generated'] )
							( <_cor24> when 'true' ->
							      ( primop 'match_fail'
								    ({'function_clause',_cor24})
								-| [{'function_name',{'-gen_dec_constructed_imm/3-fun-0-',1}}] )
							  -| ['compiler_generated'] )
						      end
						  -| [{'id',{0,0,'-gen_dec_constructed_imm/3-fun-0-'}}] )
					    in  let <_cor26> =
						    %% Line 288
						    apply 'flat_complist'/1
							(CompList)
						in  %% Line 288
						    case call 'lists':'any'
							     (F, _cor26) of
						      %% Line 289
						      <'true'> when 'true' ->
							  %% Line 292
							  {{AttrN,{'deep',ObjectSet,UniqueFieldName,ValIndex}},%% Line 293
													       UniqueFieldName,%% Line 293
															       ValIndex}
						      %% Line 294
						      <'false'> when 'true' ->
							  %% Line 295
							  {{AttrN,ObjectSet},UniqueFieldName,ValIndex}
						      ( <_cor27> when 'true' ->
							    primop 'match_fail'
								({'case_clause',_cor27})
							-| ['compiler_generated'] )
						    end
					%% Line 297
					<_cor80> when 'true' ->
					    %% Line 298
					    case _cor47 of
					      %% Line 299
					      <[{'objfun',_cor86}|_cor87]> when 'true' ->
						  %% Line 300
						  {{[103|[111|[116|[32|[111|[98|[106|[102|[117|[110|[32|[116|[104|[114|[111|[117|[103|[104|[32|[97|[114|[103|[115]]]]]]]]]]]]]]]]]]]]]]],[79|[98|[106|[70|[117|[110]]]]]]},'false','false'}
					      %% Line 301
					      <_cor88> when 'true' ->
						  %% Line 302
						  {'false','false','false'}
					    end
				      end
				  in  %% Line 305
				      case _cor32 of
					<{DecObjInf,_cor89,_cor90}> when 'true' ->
					    let <_cor35> =
						%% Line 307
						call 'erlang':'length'
						    (Optionals)
					    in  let <EmitComp> =
						    %% Line 306
						    apply 'gen_dec_components_call'/6
							(Erule, Typename, CompList, %% Line 307
										    DecObjInf, %% Line 307
											       Ext, _cor35)
						in  let <EmitRest> =
							%% Line 308
							( fun (_cor37) ->
							      case _cor37 of
								<{AccTerm,AccBytes}> when 'true' ->
								    %% Line 309
								    apply 'gen_dec_constructed_imm_2'/6
									(Erule, Typename, %% Line 310
											  CompList, _cor32, %% Line 312
													    AccTerm, %% Line 312
														     AccBytes)
								( <_cor38> when 'true' ->
								      ( primop 'match_fail'
									    ({'function_clause',_cor38})
									-| [{'function_name',{'-gen_dec_constructed_imm/3-fun-1-',1}}] )
								  -| ['compiler_generated'] )
							      end
							  -| [{'id',{0,0,'-gen_dec_constructed_imm/3-fun-1-'}}] )
						    in  let <_cor40> =
							    %% Line 314
							    call 'erlang':'++'
								(EmitComp, [{'safe',EmitRest}|[]])
							in  %% Line 314
							    [_cor11|[_cor15|_cor40]]
					( <_cor34> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_cor34})
					  -| ['compiler_generated'] )
				      end
	  ( <_cor43,_cor42,_cor41> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor43,_cor42,_cor41})
		  -| [{'function_name',{'gen_dec_constructed_imm',3}}] )
	    -| ['compiler_generated'] )
	end
'gen_dec_constructed_imm_2'/6 =
    %% Line 316
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 318
	case _cor2 of
	  <{_cor28,_X_UniqueFName,ValueIndex}> when 'true' ->
	      do  %% Line 319
		  case <_cor1,_cor0> of
		    %% Line 320
		    <[],[]> when 'true' ->
			'ok'
		    %% Line 322
		    <_cor29,[]> when 'true' ->
			'ok'
		    %% Line 324
		    <[{ObjSet,LeadingAttr,Term}|[]],ListOfOpenTypes> when 'true' ->
			let <ValueMatch> =
			    %% Line 325
			    apply 'value_match'/2
				(ValueIndex, Term)
			in  %% Line 326
			    ( letrec
				  'lc$^0'/1 =
				      fun (_cor10) ->
					  case _cor10 of
					    <[%% Line 330
					      T|_cor9]> when 'true' ->
						do  %% Line 327
						    apply 'gen_dec_open_type'/5
							(_cor5, ValueMatch, ObjSet, %% Line 328
										    LeadingAttr, %% Line 328
												 T)
						    do  %% Line 329
							( call 'asn1ct_gen':'emit'
							      (['com'|['nl']])
							  -| ['result_not_wanted'] )
							%% Line 330
							apply 'lc$^0'/1
							    (_cor9)
					    <[]> when 'true' ->
						[]
					    ( <_cor10> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor10})
						    -| [{'function_name',{'lc$^0',1}}] )
					      -| ['compiler_generated'] )
					  end
			      in  apply 'lc$^0'/1
				      (%% Line 330
				       ListOfOpenTypes)
			      -| ['list_comprehension'] )
		    ( <_fol85,_fol86> when 'true' ->
			  let <_cor15> = {_fol85,_fol86}
			  in  primop 'match_fail'
				  ({'case_clause',_cor15})
		      -| ['compiler_generated'] )
		  end
		  do  %% Line 334
		      call 'asn1ct_gen':'demit'
			  ({[82|[101|[115|[117|[108|[116|[32|[61|[32]]]]]]]]]})
		      let <RecordName> =
			  %% Line 336
			  apply 'record_name'/1
			      (_cor4)
		      in  do  %% Line 337
			      case _cor4 of
				%% Line 338
				<['EXTERNAL']> when 'true' ->
				    do  %% Line 339
					call 'asn1ct_gen':'emit'
					    ({[32|[32|[32|[79|[108|[100|[70|[111|[114|[109|[97|[116|[61|[123|[39]]]]]]]]]]]]]]],RecordName,%% Line 340
																	   [39]})
					let <_cor17> =
					    %% Line 341
					    call 'asn1ct_name':'all'
						('term')
					in  do  %% Line 341
						apply 'mkvlist'/1
						    (_cor17)
						do  %% Line 342
						    call 'asn1ct_gen':'emit'
							({[125|[44]],'nl'})
						    do  %% Line 343
							call 'asn1ct_gen':'emit'
							    ([[32|[32|[32|[65|[83|[78|[49|[49|[57|[57|[52|[70|[111|[114|[109|[97|[116|[32|[61]]]]]]]]]]]]]]]]]]]|['nl'|[[32|[32|[32|[32|[32|[32]]]]]]|[{'call','ext','transform_to_EXTERNAL1994',[[79|[108|[100|[70|[111|[114|[109|[97|[116]]]]]]]]]]}|['com'|['nl']]]]]])
							%% Line 347
							call 'asn1ct_gen':'emit'
							    ([32|[32|[32|[123|[65|[83|[78|[49|[49|[57|[57|[52|[70|[111|[114|[109|[97|[116|[44]]]]]]]]]]]]]]]]]]])
				%% Line 348
				<_cor30> when 'true' ->
				    do  %% Line 349
					call 'asn1ct_gen':'emit'
					    ([[123|[123|[39]]]|[RecordName|[[39]]]])
					let <_cor19> =
					    %% Line 353
					    apply 'to_encoding_order'/1
						(_cor3)
					in  let <_cor18> =
						%% Line 353
						call 'asn1ct_name':'all'
						    ('term')
					    in  let <_cor20> =
						    %% Line 353
						    apply 'textual_order'/2
							(_cor19, _cor18)
						in  do  %% Line 353
							apply 'mkvlist'/1
							    (_cor20)
							%% Line 354
							call 'asn1ct_gen':'emit'
							    ([125|[44]])
			      end
			      %% Line 356
			      call 'asn1ct_gen':'emit'
				  ({{'curr','bytes'},[125]})
	  ( <_cor6> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor6})
	    -| ['compiler_generated'] )
	end
'record_name'/1 =
    %% Line 364
    fun (_cor0) ->
	%% Line 365
	case call 'lists':'reverse'
		 (_cor0) of
	  <[TopType|Typename1]> when 'true' ->
	      let <Typename> =
		  %% Line 366
		  apply 'filter_ext_add_groups'/2
		      (Typename1, [TopType|[]])
	      in  let <_cor3> =
		      %% Line 367
		      call 'asn1ct_gen':'get_record_name_prefix'
			  ()
		  in  let <_cor4> =
			  %% Line 368
			  call 'asn1ct_gen':'list2rname'
			      (Typename)
		      in  %% Line 367
			  call 'lists':'concat'
			      ([_cor3|%% Line 368
				      [_cor4|[]]])
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'filter_ext_add_groups'/2 =
    %% Line 370
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[H|T],Acc>
	      when call 'erlang':'is_atom'
		    (H) ->
	      %% Line 371
	      case call 'erlang':'atom_to_list'
		       (H) of
		%% Line 372
		<[69|[120|[116|[65|[100|[100|[71|[114|[111|[117|[112|_cor5]]]]]]]]]]]> when 'true' ->
		    %% Line 373
		    apply 'filter_ext_add_groups'/2
			(T, Acc)
		%% Line 374
		<_cor6> when 'true' ->
		    %% Line 375
		    apply 'filter_ext_add_groups'/2
			(T, [H|Acc])
	      end
	  %% Line 377
	  <[H|T],Acc> when 'true' ->
	      %% Line 378
	      apply 'filter_ext_add_groups'/2
		  (T, [H|Acc])
	  %% Line 379
	  <[],Acc> when 'true' ->
	      Acc
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'filter_ext_add_groups',2}}] )
	    -| ['compiler_generated'] )
	end
'textual_order'/2 =
    %% Line 381
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{'ComponentType',_cor19,_cor20,_cor21,_cor22,_cor23,'undefined'}|_cor24],TermList> when 'true' ->
	      %% Line 382
	      TermList
	  %% Line 383
	  <CompList,TermList>
	      when call 'erlang':'is_list'
		    (CompList) ->
	      let <_cor6> =
		  %% Line 384
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor4) ->
				case _cor4 of
				  <[{'ComponentType',_cor25,_cor26,_cor27,_cor28,_cor29,Ix}|_cor3]> when 'true' ->
				      let <_cor5> =
					  apply 'lc$^0'/1
					      (_cor3)
				      in  ( [Ix|_cor5]
					    -| ['compiler_generated'] )
				  ( <[_cor2|_cor3]> when 'true' ->
					apply 'lc$^0'/1
					    (_cor3)
				    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor4> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor4})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (CompList)
		    -| ['list_comprehension'] )
	      in  %% Line 385
		  ( letrec
			'lc$^1'/1 =
			    fun (_cor14) ->
				case _cor14 of
				  <[{_cor30,Term}|_cor9]> when 'true' ->
				      let <_cor15> =
					  apply 'lc$^1'/1
					      (_cor9)
				      in  ( [Term|_cor15]
					    -| ['compiler_generated'] )
				  ( <[_cor8|_cor9]> when 'true' ->
					apply 'lc$^1'/1
					    (_cor9)
				    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor14> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor14})
					  -| [{'function_name',{'lc$^1',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  let <_cor10> =
			    %% Line 387
			    call 'erlang':'length'
				(_cor6)
			in  let <_cor11> =
				%% Line 387
				call 'lists':'sublist'
				    (TermList, _cor10)
			    in  let <_cor12> =
				    %% Line 386
				    call 'lists':'zip'
					(_cor6, _cor11)
				in  let <_cor13> =
					%% Line 386
					call 'lists':'sort'
					    (_cor12)
				    in  apply 'lc$^1'/1
					    (_cor13)
		    -| ['list_comprehension'] )
	  %% Line 390
	  <{Root,Ext},TermList> when 'true' ->
	      let <_cor16> =
		  %% Line 391
		  call 'erlang':'++'
		      (Root, Ext)
	      in  %% Line 391
		  apply 'textual_order'/2
		      (_cor16, TermList)
	  ( <_cor18,_cor17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor18,_cor17})
		  -| [{'function_name',{'textual_order',2}}] )
	    -| ['compiler_generated'] )
	end
'to_textual_order'/1 =
    %% Line 393
    fun (_cor0) ->
	case _cor0 of
	  <{Root,Ext}> when 'true' ->
	      let <_cor1> =
		  %% Line 394
		  apply 'to_textual_order'/1
		      (Root)
	      in  %% Line 394
		  {_cor1,Ext}
	  %% Line 395
	  <Cs>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      %% Line 396
	      case Cs of
		%% Line 397
		<[{'ComponentType',_cor4,_cor5,_cor6,_cor7,_cor8,'undefined'}|_cor9]> when 'true' ->
		    %% Line 398
		    Cs
		%% Line 399
		<_cor10> when 'true' ->
		    %% Line 400
		    call 'lists':'keysort'
			(7, Cs)
	      end
	  %% Line 402
	  <Cs> when 'true' ->
	      %% Line 403
	      Cs
	end
'gen_dec_open_type'/5 =
    %% Line 405
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Erule,Val,{Xmod,Xtype},LeadingAttr,%% Line 406
					      {_cor39,{Name,RestFieldNames},Term,TmpTerm,Prop}> when 'true' ->
	      %% Line 407
	      case call 'asn1_db':'dbget'
		       (Xmod, Xtype) of
		<{'typedef',_cor40,_cor41,_cor42,ObjSet0}> when 'true' ->
		    %% Line 408
		    case ObjSet0 of
		      <{'ObjectSet',Class,_cor43,_cor44,ObjSet1}> when 'true' ->
			  %% Line 409
			  case Class of
			    <{'Externaltypereference',_cor45,ClMod,ClType}> when 'true' ->
				%% Line 410
				case call 'asn1_db':'dbget'
					 (ClMod, ClType) of
				  <{'classdef',_cor46,_cor47,_cor48,ClassDef}> when 'true' ->
				      %% Line 411
				      case ClassDef of
					<{'objectclass',ClassFields,_cor49}> when 'true' ->
					    let <Extensible> =
						%% Line 412
						call 'lists':'member'
						    ('EXTENSIONMARK', ObjSet1)
					    in  let <_cor16> =
						    %% Line 413
						    ( letrec
							  'lc$^0'/1 =
							      fun (_cor13) ->
								  case _cor13 of
								    <[%% Line 414
								      {_cor50,Key,Code}|_cor12]> when 'true' ->
									let <_cor14> =
									    apply 'fix_object_code'/3
										(Name, Code, ClassFields)
									in  let <_cor15> =
										%% Line 414
										apply 'lc$^0'/1
										    (_cor12)
									    in  ( [{Key,_cor14}|_cor15]
										  -| ['compiler_generated'] )
								    ( <[_cor11|_cor12]> when 'true' ->
									  %% Line 414
									  apply 'lc$^0'/1
									      (_cor12)
								      -| ['compiler_generated'] )
								    <[]> when 'true' ->
									[]
								    ( <_cor13> when 'true' ->
									  ( primop 'match_fail'
										({'function_clause',_cor13})
									    -| [{'function_name',{'lc$^0',1}}] )
								      -| ['compiler_generated'] )
								  end
						      in  apply 'lc$^0'/1
							      (%% Line 414
							       ObjSet1)
						      -| ['list_comprehension'] )
						in  let <_cor22> =
							%% Line 415
							( letrec
							      'lc$^1'/1 =
								  fun (_cor20) ->
								      case _cor20 of
									<[P = {_cor51,B}|_cor19]>
									    when call 'erlang':'=/='
										  (B,
										   'none') ->
									    let <_cor21> =
										apply 'lc$^1'/1
										    (_cor19)
									    in  ( [P|_cor21]
										  -| ['compiler_generated'] )
									( <[_cor18|_cor19]> when 'true' ->
									      apply 'lc$^1'/1
										  (_cor19)
									  -| ['compiler_generated'] )
									<[]> when 'true' ->
									    []
									( <_cor20> when 'true' ->
									      ( primop 'match_fail'
										    ({'function_clause',_cor20})
										-| [{'function_name',{'lc$^1',1}}] )
									  -| ['compiler_generated'] )
								      end
							  in  apply 'lc$^1'/1
								  (_cor16)
							  -| ['list_comprehension'] )
						    in  let <ObjSet> =
							    %% Line 415
							    call 'lists':'sort'
								(_cor22)
							in  let <_cor24> =
								%% Line 416
								call 'erlang':'term_to_binary'
								    ({'decode',ObjSet,RestFieldNames,%% Line 417
												     Prop,%% Line 417
													  Extensible})
							    in  let <Key> =
								    %% Line 416
								    call 'erlang':'md5'
									(_cor24)
								in  let <Typename> =
									%% Line 418
									[Name|[ClType|[]]]
								    in  let <Gen> =
									    %% Line 419
									    ( fun (_cor28,_cor27) ->
										  do  %% Line 420
										      apply 'dec_objset_optional'/2
											  (_cor27, Prop)
										      do  %% Line 421
											  apply 'dec_objset'/5
											      (Erule, _cor27, ObjSet, RestFieldNames, Typename)
											  %% Line 422
											  apply 'dec_objset_default'/4
											      (_cor27, Name, LeadingAttr, Extensible)
									      -| [{'id',{0,0,'-gen_dec_open_type/5-fun-0-'}}] )
									in  let <Prefix> =
										%% Line 424
										call 'lists':'concat'
										    ([[100|[101|[99|[95|[111|[115|[95]]]]]]]|[Name|[]]])
									    in  let <F> =
										    %% Line 425
										    call 'asn1ct_func':'call_gen'
											(Prefix, Key, Gen)
										in  %% Line 426
										    call 'asn1ct_gen':'emit'
											([Term|[[32|[61|[32]]]|[{'asis',F}|[[40]|[TmpTerm|[[44|[32]]|[Val|[[41]]]]]]]]])
					( <_cor9> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_cor9})
					  -| ['compiler_generated'] )
				      end
				  ( <_cor8> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor8})
				    -| ['compiler_generated'] )
				end
			    ( <_cor7> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor7})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor6> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor6})
			-| ['compiler_generated'] )
		    end
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor5})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor38,_cor37,_cor36,_cor35,_cor34> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor38,_cor37,_cor36,_cor35,_cor34})
		  -| [{'function_name',{'gen_dec_open_type',5}}] )
	    -| ['compiler_generated'] )
	end
'dec_objset_optional'/2 =
    %% Line 428
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <N,{'DEFAULT',Val}> when 'true' ->
	      %% Line 429
	      apply 'dec_objset_optional_1'/2
		  (N, Val)
	  %% Line 430
	  <N,'OPTIONAL'> when 'true' ->
	      %% Line 431
	      apply 'dec_objset_optional_1'/2
		  (N, 'asn1_NOVALUE')
	  %% Line 432
	  <_X_N,'mandatory'> when 'true' ->
	      'ok'
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'dec_objset_optional',2}}] )
	    -| ['compiler_generated'] )
	end
'dec_objset_optional_1'/2 =
    %% Line 434
    fun (_cor1,_cor0) ->
	%% Line 435
	call 'asn1ct_gen':'emit'
	    ([{'asis',_cor1}|[[40]|[{'asis',_cor0}|[[44|[32|[95|[73|[100|[41|[32|[45|[62]]]]]]]]]|['nl'|%% Line 436
													[{'asis',_cor0}|[[59]|['nl']]]]]]]])
'dec_objset'/5 =
    %% Line 438
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <_X_Erule,_X_N,[],_cor10,_cor11> when 'true' ->
	      %% Line 439
	      'ok'
	  %% Line 440
	  <Erule,N,[Obj|Objs],RestFields,Cl> when 'true' ->
	      do  %% Line 441
		  apply 'dec_objset_1'/5
		      (Erule, N, Obj, RestFields, Cl)
		  do  %% Line 442
		      call 'asn1ct_gen':'emit'
			  ([[59]|['nl']])
		      %% Line 443
		      apply 'dec_objset'/5
			  (Erule, N, Objs, RestFields, Cl)
	  ( <_cor9,_cor8,_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7,_cor6,_cor5})
		  -| [{'function_name',{'dec_objset',5}}] )
	    -| ['compiler_generated'] )
	end
'dec_objset_default'/4 =
    %% Line 445
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <N,C,LeadingAttr,'false'> when 'true' ->
	      %% Line 446
	      call 'asn1ct_gen':'emit'
		  ([{'asis',N}|[[40|[66|[121|[116|[101|[115|[44|[32|[73|[100|[41|[32|[45|[62]]]]]]]]]]]]]]|['nl'|%% Line 447
														 [[101|[120|[105|[116|[40|[123|[39|[84|[121|[112|[101|[32|[110|[111|[116|[32|[99|[111|[109|[112|[97|[116|[105|[98|[108|[101|[32|[119|[105|[116|[104|[32|[116|[97|[98|[108|[101|[32|[99|[111|[110|[115|[116|[114|[97|[105|[110|[116|[39|[44|[123|[123|[99|[111|[109|[112|[111|[110|[101|[110|[116|[44]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|%% Line 448
																																																										   [{'asis',C}|[[125|[44|[123|[118|[97|[108|[117|[101|[44|[66|[121|[116|[101|[115|[125|[44|[123|[117|[110|[105|[113|[117|[101|[95|[110|[97|[109|[101|[95|[97|[110|[100|[95|[118|[97|[108|[117|[101|[44]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|%% Line 450
																																																																																							      [{'asis',LeadingAttr}|[[44|[73|[100|[125|[125|[125|[41|[46]]]]]]]]|['nl'|['nl']]]]]]]]]])
	  %% Line 451
	  <N,_cor10,_cor11,'true'> when 'true' ->
	      let <_cor5> =
		  %% Line 453
		  case call 'asn1ct':'use_legacy_types'
			   () of
		    %% Line 454
		    <'false'> when 'true' ->
			%% Line 455
			[[123|[97|[115|[110|[49|[95|[79|[80|[69|[78|[84|[89|[80|[69|[44|[66|[121|[116|[101|[115|[125|[46]]]]]]]]]]]]]]]]]]]]]]|['nl'|['nl']]]
		    %% Line 456
		    <'true'> when 'true' ->
			%% Line 457
			[[66|[121|[116|[101|[115|[46]]]]]]|['nl'|['nl']]]
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor4})
		      -| ['compiler_generated'] )
		  end
	      in  %% Line 452
		  call 'asn1ct_gen':'emit'
		      ([{'asis',N}|[[40|[66|[121|[116|[101|[115|[44|[32|[73|[100|[41|[32|[45|[62]]]]]]]]]]]]]]|['nl'|_cor5]]])
	  ( <_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'dec_objset_default',4}}] )
	    -| ['compiler_generated'] )
	end
'dec_objset_1'/5 =
    %% Line 460
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Erule,N,{Id,Obj},RestFields,Typename> when 'true' ->
	      do  %% Line 461
		  call 'asn1ct_gen':'emit'
		      ([{'asis',N}|[[40|[66|[121|[116|[101|[115|[44|[32]]]]]]]]|[{'asis',Id}|[[41|[32|[45|[62]]]]|['nl']]]]])
		  %% Line 462
		  apply 'dec_objset_2'/4
		      (Erule, Obj, RestFields, Typename)
	  ( <_cor9,_cor8,_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7,_cor6,_cor5})
		  -| [{'function_name',{'dec_objset_1',5}}] )
	    -| ['compiler_generated'] )
	end
'dec_objset_2'/4 =
    %% Line 464
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 465
	case _cor2 of
	  %% Line 466
	  <{'typedef',_cor30,_cor31,{'primitive','bif'},Type}> when 'true' ->
	      let <Imm> =
		  %% Line 467
		  call 'asn1ct_gen_per':'gen_dec_imm'
		      (_cor3, Type)
	      in  %% Line 468
		  case call 'asn1ct_imm':'dec_slim_cg'
			   (Imm, 'Bytes') of
		    <{Term,_cor32}> when 'true' ->
			%% Line 469
			call 'asn1ct_gen':'emit'
			    (['com'|['nl'|[Term|[]]]])
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor5})
		      -| ['compiler_generated'] )
		  end
	  %% Line 470
	  <{'typedef',_cor33,_cor34,{'constructed','bif'},Def}> when 'true' ->
	      %% Line 471
	      ( case Def of
		  ( <( {'type',_cor35,_rec7,_cor36,_cor37,_cor38}
		       -| ['compiler_generated'] )> when 'true' ->
			%% Line 472
			case call 'asn1ct_gen':'get_inner'
				 (_rec7) of
			  %% Line 473
			  <'CHOICE'> when 'true' ->
			      do  %% Line 474
				  call 'asn1ct_name':'start'
				      ()
				  do  %% Line 475
				      call 'asn1ct_name':'new'
					  ('bytes')
				      %% Line 476
				      case _rec7 of
					<{'CHOICE',CompList}> when 'true' ->
					    let <Ext> =
						%% Line 477
						apply 'extensible_enc'/1
						    (CompList)
					    in  do  %% Line 478
						    call 'asn1ct_gen':'emit'
							([[123|[82|[101|[115|[117|[108|[116|[44|[95|[125|[32|[61|[32|[98|[101|[103|[105|[110]]]]]]]]]]]]]]]]]]|['nl']])
						    do  %% Line 479
							apply 'gen_dec_choice'/4
							    (_cor3, _cor0, CompList, Ext)
							%% Line 480
							call 'asn1ct_gen':'emit'
							    (['nl'|[[101|[110|[100]]]|['com'|['nl'|[[82|[101|[115|[117|[108|[116]]]]]]]]]]])
					( <_cor11> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_cor11})
					  -| ['compiler_generated'] )
				      end
			  %% Line 483
			  <'SET'> when 'true' ->
			      let <Imm0> =
				  %% Line 484
				  apply 'gen_dec_constructed_imm'/3
				      (_cor3, _cor0, Def)
			      in  let <Imm> =
				      %% Line 485
				      apply 'opt_imm'/1
					  (Imm0)
				  in  do  %% Line 486
					  call 'asn1ct_name':'start'
					      ()
					  do  %% Line 487
					      call 'asn1ct_gen':'emit'
						  ([[123|[82|[101|[115|[117|[108|[116|[44|[95|[125|[32|[61|[32|[98|[101|[103|[105|[110]]]]]]]]]]]]]]]]]]|['nl']])
					      do  %% Line 488
						  apply 'emit_gen_dec_imm'/1
						      (Imm)
						  %% Line 489
						  call 'asn1ct_gen':'emit'
						      (['nl'|[[101|[110|[100]]]|['com'|['nl'|[[82|[101|[115|[117|[108|[116]]]]]]]]]]])
			  %% Line 492
			  <'SET OF'> when 'true' ->
			      do  %% Line 493
				  call 'asn1ct_name':'start'
				      ()
				  %% Line 494
				  apply 'do_gen_decode_sof'/5
				      (_cor3, _cor0, 'SET OF', %% Line 495
							       Def, %% Line 495
								    'false')
			  %% Line 496
			  <'SEQUENCE'> when 'true' ->
			      let <Imm0> =
				  %% Line 497
				  apply 'gen_dec_constructed_imm'/3
				      (_cor3, _cor0, Def)
			      in  let <Imm> =
				      %% Line 498
				      apply 'opt_imm'/1
					  (Imm0)
				  in  do  %% Line 499
					  call 'asn1ct_name':'start'
					      ()
					  do  %% Line 500
					      call 'asn1ct_gen':'emit'
						  ([[123|[82|[101|[115|[117|[108|[116|[44|[95|[125|[32|[61|[32|[98|[101|[103|[105|[110]]]]]]]]]]]]]]]]]]|['nl']])
					      do  %% Line 501
						  apply 'emit_gen_dec_imm'/1
						      (Imm)
						  %% Line 502
						  call 'asn1ct_gen':'emit'
						      (['nl'|[[101|[110|[100]]]|['com'|['nl'|[[82|[101|[115|[117|[108|[116]]]]]]]]]]])
			  %% Line 505
			  <'SEQUENCE OF'> when 'true' ->
			      do  %% Line 506
				  call 'asn1ct_name':'start'
				      ()
				  %% Line 507
				  apply 'do_gen_decode_sof'/5
				      (_cor3, _cor0, 'SEQUENCE OF', %% Line 508
								    Def, %% Line 508
									 'false')
			  ( <_cor17> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor17})
			    -| ['compiler_generated'] )
			end
		    -| ['compiler_generated'] )
		  ( <_cor39> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','type'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 510
	  <{'typedef',_cor45,_cor46,Type,_cor47}> when 'true' ->
	      let <_cor18> =
		  %% Line 511
		  apply 'enc_func'/2
		      ([100|[101|[99|[95]]]], Type)
	      in  %% Line 511
		  call 'asn1ct_gen':'emit'
		      ([[123|[82|[101|[115|[117|[108|[116|[44|[95|[125|[32|[61|[32]]]]]]]]]]]]]|[{'asis',_cor18}|[[40|[66|[121|[116|[101|[115|[41|[44]]]]]]]]|['nl'|[[82|[101|[115|[117|[108|[116]]]]]]]]]]])
	  %% Line 513
	  <{'Externaltypereference',_cor48,Mod,Type}> when 'true' ->
	      do  %% Line 514
		  call 'asn1ct_gen':'emit'
		      ([123|[84|[101|[114|[109|[44|[95|[125|[32|[61|[32]]]]]]]]]]])
		  let <Func> =
		      %% Line 515
		      apply 'enc_func'/2
			  ([100|[101|[99|[95]]]], Type)
		  in  do  %% Line 516
			  case call 'erlang':'get'
				   ('currmod') of
			    %% Line 517
			    <_cor49>
				when call 'erlang':'=:='
				      (_cor49,
				       Mod) ->
				%% Line 518
				call 'asn1ct_gen':'emit'
				    ([{'asis',Func}|[[40|[66|[121|[116|[101|[115|[41]]]]]]]]])
			    %% Line 519
			    <_cor50> when 'true' ->
				%% Line 520
				call 'asn1ct_gen':'emit'
				    ([{'asis',Mod}|[[58]|[{'asis',Func}|[[40|[66|[121|[116|[101|[115|[41]]]]]]]]]]])
			  end
			  %% Line 522
			  call 'asn1ct_gen':'emit'
			      (['com'|['nl'|[[84|[101|[114|[109]]]]]]])
	  %% Line 524
	  <{'Externalvaluereference',_cor51,Mod,Value}> when 'true' ->
	      %% Line 525
	      case call 'asn1_db':'dbget'
		       (Mod, Value) of
		%% Line 526
		<{'typedef',_cor52,_cor53,_cor54,{'Object',_cor55,_cor56,Def}}> when 'true' ->
		    %% Line 527
		    case Def of
		      <{'object',_cor57,Fields}> when 'true' ->
			  %% Line 528
			  case _cor1 of
			    <[NextField|RestFields]> when 'true' ->
				%% Line 529
				case call 'lists':'keyfind'
					 (NextField, 1, Fields) of
				  <{_cor58,Typedef}>
				      when call 'erlang':'=:='
					    (_cor58,
					     NextField) ->
				      %% Line 530
				      apply 'dec_objset_2'/4
					  (_cor3, Typedef, RestFields, _cor0)
				  ( <_cor23> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor23})
				    -| ['compiler_generated'] )
				end
			    ( <_cor22> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor22})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor21> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor21})
			-| ['compiler_generated'] )
		    end
		( <_cor24> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor24})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor25> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor25})
	    -| ['compiler_generated'] )
	end
'gen_encode_choice'/3 =
    %% Line 534
    fun (_cor2,_cor1,_cor0) ->
	do  %% Line 535
	    call 'asn1ct_name':'start'
		()
	    let <Imm> =
		%% Line 536
		apply 'gen_encode_choice_imm'/3
		    (_cor2, _cor1, _cor0)
	    in  let <_cor4> =
		    %% Line 537
		    apply 'is_aligned'/1
			(_cor2)
		in  do  %% Line 537
			call 'asn1ct_imm':'enc_cg'
			    (Imm, _cor4)
			%% Line 538
			call 'asn1ct_gen':'emit'
			    ([[46]|['nl']])
'gen_encode_choice_imm'/3 =
    %% Line 540
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Erule,TopType,{'type',_cor10,{'CHOICE',CompList},_cor11,_cor12,_cor13}> when 'true' ->
	      let <Ext> =
		  %% Line 541
		  apply 'extensible_enc'/1
		      (CompList)
	      in  let <Aligned> =
		      %% Line 542
		      apply 'is_aligned'/1
			  (Erule)
		  in  let <Cs> =
			  %% Line 543
			  apply 'gen_enc_choice'/4
			      (Erule, TopType, CompList, Ext)
		      in  let <_cor6> =
			      %% Line 545
			      call 'asn1ct_imm':'per_enc_choice'
				  ({'var',[67|[104|[111|[105|[99|[101|[84|[97|[103]]]]]]]]]}, Cs, Aligned)
			  in  %% Line 544
			      [{'assign',{'expr',[123|[67|[104|[111|[105|[99|[101|[84|[97|[103|[44|[67|[104|[111|[105|[99|[101|[86|[97|[108|[125]]]]]]]]]]]]]]]]]]]]]},[86|[97|[108]]]}|_cor6]
	  ( <_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7})
		  -| [{'function_name',{'gen_encode_choice_imm',3}}] )
	    -| ['compiler_generated'] )
	end
'gen_decode_choice'/3 =
    %% Line 547
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Erules,Typename,D = {'type',_cor10,_cor11,_cor12,_cor13,_cor14}> when ( 'true'
										   -| ['compiler_generated'] ) ->
	      do  %% Line 548
		  call 'asn1ct_name':'start'
		      ()
		  do  %% Line 549
		      call 'asn1ct_name':'new'
			  ('bytes')
		      %% Line 550
		      case _cor11 of
			<{'CHOICE',CompList}> when 'true' ->
			    let <Ext> =
				%% Line 551
				apply 'extensible_enc'/1
				    (CompList)
			    in  do  %% Line 552
				    apply 'gen_dec_choice'/4
					(Erules, Typename, CompList, Ext)
				    %% Line 553
				    call 'asn1ct_gen':'emit'
					({[46],'nl'})
			( <_cor5> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor5})
			  -| ['compiler_generated'] )
		      end
	  ( <_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7})
		  -| [{'function_name',{'gen_decode_choice',3}}] )
	    -| ['compiler_generated'] )
	end
'gen_encode_sof'/4 =
    %% Line 558
    fun (_cor3,_cor2,_cor1,_cor0) ->
	do  %% Line 559
	    call 'asn1ct_name':'start'
		()
	    let <Imm> =
		%% Line 560
		apply 'gen_encode_sof_imm'/4
		    (_cor3, _cor2, _cor1, _cor0)
	    in  let <_cor5> =
		    %% Line 561
		    apply 'is_aligned'/1
			(_cor3)
		in  do  %% Line 561
			call 'asn1ct_imm':'enc_cg'
			    (Imm, _cor5)
			%% Line 562
			call 'asn1ct_gen':'emit'
			    ([[46]|['nl'|['nl']]])
'gen_encode_sof_imm'/4 =
    %% Line 564
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Erule,Typename,SeqOrSetOf,D = {'type',_cor33,_cor34,_cor35,_cor36,_cor37}> when 'true' ->
	      %% Line 565
	      case _cor34 of
		<{_X_SeqOrSetOf,ComponentType}> when 'true' ->
		    let <Aligned> =
			%% Line 566
			apply 'is_aligned'/1
			    (Erule)
		    in  %% Line 567
			( case ComponentType of
			    ( <( {'type',_cor43,_rec11,_cor44,_cor45,_cor46}
				 -| ['compiler_generated'] )> when 'true' ->
				  let <Constructed_Suffix> =
				      %% Line 568
				      call 'asn1ct_gen':'constructed_suffix'
					  (SeqOrSetOf, _rec11)
				  in  let <Conttype> =
					  %% Line 569
					  call 'asn1ct_gen':'get_inner'
					      (_rec11)
				      in  let <Currmod> =
					      %% Line 570
					      call 'erlang':'get'
						  ('currmod')
					  in  let <_cor25> =
						  %% Line 571
						  case call 'asn1ct_gen':'type'
							   (Conttype) of
						    %% Line 572
						    <{'primitive','bif'}> when 'true' ->
							%% Line 573
							call 'asn1ct_gen_per':'gen_encode_prim_imm'
							    ({'var',[67|[111|[109|[112]]]]}, %% Line 574
											     ComponentType, %% Line 574
													    Aligned)
						    %% Line 575
						    <{'constructed','bif'}> when 'true' ->
							let <TypeName> =
							    %% Line 576
							    [Constructed_Suffix|Typename]
							in  let <_cor15> =
								%% Line 577
								call 'asn1ct_gen':'list2name'
								    (TypeName)
							    in  let <Enc> =
								    %% Line 577
								    apply 'enc_func'/1
									(_cor15)
								in  let <_cor20> =
									%% Line 578
									case _cor36 of
									  %% Line 579
									  <[{'objfun',_cor53}|_cor54]> when 'true' ->
									      [{'var',[79|[98|[106|[70|[117|[110]]]]]]}]
									  %% Line 580
									  <_cor55> when 'true' ->
									      []
									end
								    in  %% Line 582
									[{'apply',{'local',Enc,_rec11},%% Line 583
												       [{'var',[67|[111|[109|[112]]]]}|_cor20]}|%% Line 583
																		[]]
						    %% Line 584
						    <{'Externaltypereference',_cor56,_cor57,Ename}>
							when call 'erlang':'=:='
							      (_cor57,
							       Currmod) ->
							let <_cor22> =
							    %% Line 585
							    apply 'enc_func'/1
								(Ename)
							in  %% Line 585
							    [{'apply',{'local',_cor22,_rec11},[{'var',[67|[111|[109|[112]]]]}]}|[]]
						    %% Line 586
						    <{'Externaltypereference',_cor58,EMod,Ename}> when 'true' ->
							let <_cor23> =
							    %% Line 587
							    apply 'enc_func'/1
								(Ename)
							in  %% Line 587
							    [{'apply',{EMod,_cor23,_rec11},[{'var',[67|[111|[109|[112]]]]}]}|[]]
						    %% Line 588
						    <'ASN1_OPEN_TYPE'> when 'true' ->
							%% Line 589
							call 'asn1ct_gen_per':'gen_encode_prim_imm'
							    ({'var',[67|[111|[109|[112]]]]}, %% Line 590
											     {'type',[],'ASN1_OPEN_TYPE',[],[],'no'}, %% Line 591
																      Aligned)
						    ( <_cor24> when 'true' ->
							  primop 'match_fail'
							      ({'case_clause',_cor24})
						      -| ['compiler_generated'] )
						  end
					      in  %% Line 593
						  call 'asn1ct_imm':'per_enc_sof'
						      ({'var',[86|[97|[108]]]}, _cor35, 'Comp', _cor25, %% Line 594
													Aligned)
			      -| ['compiler_generated'] )
			    ( <_cor47> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','type'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor6})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor32,_cor31,_cor30,_cor29> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor32,_cor31,_cor30,_cor29})
		  -| [{'function_name',{'gen_encode_sof_imm',4}}] )
	    -| ['compiler_generated'] )
	end
'gen_decode_sof'/4 =
    %% Line 596
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Erules,Typename,SeqOrSetOf,D = {'type',_cor8,_cor9,_cor10,_cor11,_cor12}> when 'true' ->
	      do  %% Line 597
		  call 'asn1ct_name':'start'
		      ()
		  do  %% Line 598
		      apply 'do_gen_decode_sof'/5
			  (Erules, Typename, SeqOrSetOf, D, 'true')
		      %% Line 599
		      call 'asn1ct_gen':'emit'
			  ([[46]|['nl'|['nl']]])
	  ( <_cor7,_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5,_cor4})
		  -| [{'function_name',{'gen_decode_sof',4}}] )
	    -| ['compiler_generated'] )
	end
'do_gen_decode_sof'/5 =
    %% Line 601
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 602
	( case _cor1 of
	    ( <( {'type',_cor30,_rec14,_cor31,_cor32,_cor33}
		 -| ['compiler_generated'] )> when 'true' ->
		  case _rec14 of
		    <{_X_SeqOrSetOf,ComponentType}> when 'true' ->
			let <SizeConstraint> =
			    %% Line 603
			    call 'asn1ct_imm':'effective_constraint'
				('bitstring', _cor31)
			in  let <_cor14> =
				%% Line 606
				case _cor32 of
				  %% Line 607
				  <[{'objfun',_cor45}|_X_R]> when 'true' ->
				      %% Line 608
				      [44|[32|[79|[98|[106|[70|[117|[110]]]]]]]]
				  %% Line 609
				  <_cor46> when 'true' ->
				      %% Line 610
				      []
				end
			    in  %% Line 612
				case apply 'gen_decode_length'/2
					 (SizeConstraint, _cor4) of
				  <{Num,Buf}> when 'true' ->
				      let <_cor17> =
					  %% Line 613
					  call 'erlang':'term_to_binary'
					      ({_cor3,_cor2,%% Line 614
							    ComponentType,_cor0})
				      in  let <Key> =
					      %% Line 613
					      call 'erlang':'md5'
						  (_cor17)
					  in  let <Gen> =
						  %% Line 615
						  ( fun (_cor20,_cor19) ->
							%% Line 616
							apply 'gen_decode_sof_components'/6
							    (_cor4, _cor19, _cor3, _cor2, %% Line 618
											  ComponentType, _cor0)
						    -| [{'id',{0,0,'-do_gen_decode_sof/5-fun-0-'}}] )
					      in  let <F> =
						      %% Line 620
						      call 'asn1ct_func':'call_gen'
							  ([100|[101|[99|[95|[99|[111|[109|[112|[111|[110|[101|[110|[116|[115]]]]]]]]]]]]]], Key, Gen)
						  in  %% Line 621
						      call 'asn1ct_gen':'emit'
							  ([[44]|['nl'|%% Line 622
								       [{'asis',F}|[[40]|[Num|[[44|[32]]|[Buf|[_cor14|[[44|[32|[91|[93|[41]]]]]]]]]]]]]])
				  ( <_cor16> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor16})
				    -| ['compiler_generated'] )
				end
		    ( <_cor7> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor7})
		      -| ['compiler_generated'] )
		  end
	      -| ['compiler_generated'] )
	    ( <_cor34> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','type'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'is_aligned'/1 =
    %% Line 624
    fun (_cor0) ->
	case _cor0 of
	  <'per'> when 'true' ->
	      'true'
	  %% Line 625
	  <'uper'> when 'true' ->
	      'false'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'is_aligned',1}}] )
	    -| ['compiler_generated'] )
	end
'gen_decode_length'/2 =
    %% Line 627
    fun (_cor1,_cor0) ->
	do  %% Line 628
	    call 'asn1ct_gen':'emit'
		([[37|[37|[32|[76|[101|[110|[103|[116|[104|[32|[119|[105|[116|[104|[32|[99|[111|[110|[115|[116|[114|[97|[105|[110|[116|[32]]]]]]]]]]]]]]]]]]]]]]]]]]|[{'asis',_cor1}|['nl']]])
	    let <_cor2> =
		%% Line 629
		apply 'is_aligned'/1
		    (_cor0)
	    in  let <Imm> =
		    %% Line 629
		    call 'asn1ct_imm':'per_dec_length'
			(_cor1, 'true', _cor2)
		in  %% Line 630
		    call 'asn1ct_imm':'dec_slim_cg'
			(Imm, [66|[121|[116|[101|[115]]]]])
'gen_decode_sof_components'/6 =
    %% Line 632
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 634
	( case _cor1 of
	    ( <( {'type',_cor27,_cor28,_cor29,_rec17,_cor30}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <ObjFun,ObjFun_Var> =
		      case _rec17 of
			%% Line 635
			<[{'objfun',_cor32}|_X_R]> when 'true' ->
			    %% Line 636
			    <[44|[32|[79|[98|[106|[70|[117|[110]]]]]]]],[44|[32|[95]]]>
			%% Line 637
			<_cor33> when 'true' ->
			    %% Line 638
			    <[],[]>
		      end
		  in  do  %% Line 640
			  case _cor0 of
			    %% Line 641
			    <'false'> when 'true' ->
				%% Line 642
				call 'asn1ct_gen':'emit'
				    ([{'asis',_cor4}|[[40|[48|[44|[32|[95|[66|[121|[116|[101|[115]]]]]]]]]]|[ObjFun_Var|[[44|[32|[65|[99|[99|[41|[32|[45|[62]]]]]]]]]|['nl'|[[108|[105|[115|[116|[115|[58|[114|[101|[118|[101|[114|[115|[101|[40|[65|[99|[99|[41|[59]]]]]]]]]]]]]]]]]]]|['nl']]]]]]])
			    %% Line 644
			    <'true'> when 'true' ->
				%% Line 645
				call 'asn1ct_gen':'emit'
				    ([{'asis',_cor4}|[[40|[48|[44|[32|[66|[121|[116|[101|[115]]]]]]]]]|[ObjFun_Var|[[44|[32|[65|[99|[99|[41|[32|[45|[62]]]]]]]]]|['nl'|[[123|[108|[105|[115|[116|[115|[58|[114|[101|[118|[101|[114|[115|[101|[40|[65|[99|[99|[41|[44|[66|[121|[116|[101|[115|[125|[59]]]]]]]]]]]]]]]]]]]]]]]]]]]|['nl']]]]]]])
			    ( <_cor11> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor11})
			      -| ['compiler_generated'] )
			  end
			  do  %% Line 648
			      call 'asn1ct_gen':'emit'
				  ([{'asis',_cor4}|[[40|[78|[117|[109|[44|[32|[66|[121|[116|[101|[115]]]]]]]]]]]|[ObjFun|[[44|[32|[65|[99|[99|[41|[32|[45|[62]]]]]]]]]|['nl'|[[123|[84|[101|[114|[109|[44|[82|[101|[109|[97|[105|[110|[125|[32|[61|[32]]]]]]]]]]]]]]]]]]]]]])
			      let <Constructed_Suffix> =
				  %% Line 650
				  call 'asn1ct_gen':'constructed_suffix'
				      (_cor2, _cor28)
			      in  let <Conttype> =
				      %% Line 652
				      call 'asn1ct_gen':'get_inner'
					  (_cor28)
				  in  do  %% Line 653
					  case call 'asn1ct_gen':'type'
						   (Conttype) of
					    %% Line 654
					    <{'primitive','bif'}> when 'true' ->
						do  %% Line 655
						    call 'asn1ct_gen_per':'gen_dec_prim'
							(_cor5, _cor1, [66|[121|[116|[101|[115]]]]])
						    %% Line 656
						    call 'asn1ct_gen':'emit'
							({'com','nl'})
					    %% Line 657
					    <{'constructed','bif'}> when 'true' ->
						let <NewTypename> =
						    %% Line 658
						    [Constructed_Suffix|_cor3]
						in  let <_cor19> =
							%% Line 659
							call 'asn1ct_gen':'list2name'
							    (NewTypename)
						    in  %% Line 659
							call 'asn1ct_gen':'emit'
							    ({[39|[100|[101|[99|[95]]]]],_cor19,%% Line 660
												[39|[40|[66|[121|[116|[101|[115]]]]]]],%% Line 660
																       ObjFun,%% Line 660
																	      [41|[44]],%% Line 660
																			'nl'})
					    %% Line 661
					    <Etype = {'Externaltypereference',_cor44,_cor45,_cor46}> when 'true' ->
						do  %% Line 662
						    call 'asn1ct_gen_per':'gen_dec_external'
							(Etype, [66|[121|[116|[101|[115]]]]])
						    %% Line 663
						    call 'asn1ct_gen':'emit'
							(['com'|['nl']])
					    %% Line 664
					    <'ASN1_OPEN_TYPE'> when 'true' ->
						do  %% Line 665
						    call 'asn1ct_gen_per':'gen_dec_prim'
							(_cor5, {'type',[],'ASN1_OPEN_TYPE',[],[],'no'}, %% Line 666
													 [66|[121|[116|[101|[115]]]]])
						    %% Line 667
						    call 'asn1ct_gen':'emit'
							({'com','nl'})
					    %% Line 668
					    <_cor47> when 'true' ->
						%% Line 669
						call 'asn1ct_gen':'emit'
						    ({[39|[100|[101|[99|[95]]]]],Conttype,[39|[40|[66|[121|[116|[101|[115|[41|[44]]]]]]]]],'nl'})
					  end
					  %% Line 671
					  call 'asn1ct_gen':'emit'
					      ([{'asis',_cor4}|[[40|[78|[117|[109|[45|[49|[44|[32|[82|[101|[109|[97|[105|[110]]]]]]]]]]]]]]|[ObjFun|[[44|[32|[91|[84|[101|[114|[109|[124|[65|[99|[99|[93|[41|[46]]]]]]]]]]]]]]|['nl']]]]])
	      -| ['compiler_generated'] )
	    ( <_cor31> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','type'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'mkvlist'/1 =
    %% Line 677
    fun (_cor0) ->
	case _cor0 of
	  <[H|T]> when 'true' ->
	      do  %% Line 678
		  call 'asn1ct_gen':'emit'
		      ([44])
		  %% Line 679
		  apply 'mkvlist2'/1
		      ([H|T])
	  %% Line 680
	  <[]> when 'true' ->
	      %% Line 681
	      'true'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'mkvlist',1}}] )
	    -| ['compiler_generated'] )
	end
'mkvlist2'/1 =
    %% Line 682
    fun (_cor0) ->
	case _cor0 of
	  <[H|[T1|T]]> when 'true' ->
	      do  %% Line 683
		  call 'asn1ct_gen':'emit'
		      ({{'var',H},[44]})
		  %% Line 684
		  apply 'mkvlist2'/1
		      ([T1|T])
	  %% Line 685
	  <[H|T]> when 'true' ->
	      do  %% Line 686
		  call 'asn1ct_gen':'emit'
		      ({{'var',H}})
		  %% Line 687
		  apply 'mkvlist2'/1
		      (T)
	  %% Line 688
	  <[]> when 'true' ->
	      %% Line 689
	      'true'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'mkvlist2',1}}] )
	    -| ['compiler_generated'] )
	end
'extensible_dec'/1 =
    %% Line 692
    fun (_cor0) ->
	case _cor0 of
	  <CompList>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      %% Line 693
	      'noext'
	  %% Line 694
	  <{RootList,ExtList}> when 'true' ->
	      let <_cor2> =
		  %% Line 695
		  call 'erlang':'length'
		      (RootList)
	      in  let <_cor3> =
		      %% Line 695
		      call 'erlang':'+'
			  (_cor2, 1)
		  in  let <_cor1> =
			  %% Line 695
			  apply 'ext_length'/1
			      (ExtList)
		      in  %% Line 695
			  {'ext',_cor3,_cor1}
	  %% Line 696
	  <{Rl1,Ext,Rl2}> when 'true' ->
	      let <_cor6> =
		  %% Line 697
		  call 'erlang':'length'
		      (Rl1)
	      in  let <_cor5> =
		      %% Line 697
		      call 'erlang':'length'
			  (Rl2)
		  in  let <_cor7> =
			  %% Line 697
			  call 'erlang':'+'
			      (_cor6, _cor5)
		      in  let <_cor8> =
			      %% Line 697
			      call 'erlang':'+'
				  (_cor7, 1)
			  in  let <_cor4> =
				  %% Line 697
				  apply 'ext_length'/1
				      (Ext)
			      in  %% Line 697
				  {'ext',_cor8,_cor4}
	  ( <_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9})
		  -| [{'function_name',{'extensible_dec',1}}] )
	    -| ['compiler_generated'] )
	end
'extensible_enc'/1 =
    %% Line 699
    fun (_cor0) ->
	case _cor0 of
	  <CompList>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      %% Line 700
	      'noext'
	  %% Line 701
	  <{RootList,ExtList}> when 'true' ->
	      let <_cor2> =
		  %% Line 702
		  call 'erlang':'length'
		      (RootList)
	      in  let <_cor3> =
		      %% Line 702
		      call 'erlang':'+'
			  (_cor2, 1)
		  in  let <_cor1> =
			  %% Line 702
			  apply 'ext_length'/1
			      (ExtList)
		      in  %% Line 702
			  {'ext',_cor3,_cor1}
	  %% Line 703
	  <{Rl1,Ext,_X_Rl2}> when 'true' ->
	      let <_cor5> =
		  %% Line 704
		  call 'erlang':'length'
		      (Rl1)
	      in  let <_cor6> =
		      %% Line 704
		      call 'erlang':'+'
			  (_cor5, 1)
		  in  let <_cor4> =
			  %% Line 704
			  apply 'ext_length'/1
			      (Ext)
		      in  %% Line 704
			  {'ext',_cor6,_cor4}
	  ( <_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7})
		  -| [{'function_name',{'extensible_enc',1}}] )
	    -| ['compiler_generated'] )
	end
'ext_length'/1 =
    %% Line 706
    fun (_cor0) ->
	apply 'ext_length'/3
	    (_cor0, 'normal', 0)
'ext_length'/3 =
    %% Line 707
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[{'ExtensionAdditionGroup',_X_Num}|T],_cor8,Acc> when 'true' ->
	      %% Line 708
	      apply 'ext_length'/3
		  (T, 'group', Acc)
	  %% Line 709
	  <['ExtensionAdditionGroupEnd'|T],'group',Acc> when 'true' ->
	      let <_cor3> =
		  %% Line 710
		  call 'erlang':'+'
		      (Acc, 1)
	      in  %% Line 710
		  apply 'ext_length'/3
		      (T, 'normal', _cor3)
	  %% Line 711
	  <[{'ComponentType',_cor9,_cor10,_cor11,_cor12,_cor13,_cor14}|T],State = 'group',Acc> when 'true' ->
	      %% Line 712
	      apply 'ext_length'/3
		  (T, State, Acc)
	  %% Line 713
	  <[{'ComponentType',_cor15,_cor16,_cor17,_cor18,_cor19,_cor20}|T],State = 'normal',Acc> when 'true' ->
	      let <_cor4> =
		  %% Line 714
		  call 'erlang':'+'
		      (Acc, 1)
	      in  %% Line 714
		  apply 'ext_length'/3
		      (T, State, _cor4)
	  %% Line 715
	  <[],_cor21,Acc> when 'true' ->
	      %% Line 716
	      Acc
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'ext_length',3}}] )
	    -| ['compiler_generated'] )
	end
'extgroup_pos_and_length'/1 =
    %% Line 718
    fun (_cor0) ->
	case _cor0 of
	  <CompList>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      %% Line 719
	      {'extgrouppos',[]}
	  %% Line 720
	  <{RootList,ExtList}> when 'true' ->
	      let <_cor1> =
		  %% Line 721
		  call 'erlang':'length'
		      (RootList)
	      in  let <ActualPos> =
		      %% Line 721
		      call 'erlang':'+'
			  (_cor1, 1)
		  in  %% Line 725
		      apply 'extgrouppos'/4
			  (ExtList, ActualPos, ActualPos, [])
	  %% Line 726
	  <{RootList,ExtList,_X_Rl2}> when 'true' ->
	      %% Line 727
	      apply 'extgroup_pos_and_length'/1
		  ({RootList,ExtList})
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'extgroup_pos_and_length',1}}] )
	    -| ['compiler_generated'] )
	end
'extgrouppos'/4 =
    %% Line 729
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[{'ExtensionAdditionGroup',_X_Num}|T],ActualPos,VirtualPos,Acc> when 'true' ->
	      %% Line 730
	      apply 'extgrouppos'/5
		  (T, ActualPos, VirtualPos, 0, Acc)
	  %% Line 731
	  <[_cor11|T],ActualPos,VirtualPos,Acc> when 'true' ->
	      let <_cor5> =
		  %% Line 732
		  call 'erlang':'+'
		      (ActualPos, 1)
	      in  let <_cor4> =
		      %% Line 732
		      call 'erlang':'+'
			  (VirtualPos, 1)
		  in  %% Line 732
		      apply 'extgrouppos'/4
			  (T, _cor5, _cor4, Acc)
	  %% Line 733
	  <[],_cor12,_cor13,Acc> when 'true' ->
	      let <_cor6> =
		  %% Line 734
		  call 'lists':'reverse'
		      (Acc)
	      in  %% Line 734
		  {'extgrouppos',_cor6}
	  ( <_cor10,_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8,_cor7})
		  -| [{'function_name',{'extgrouppos',4}}] )
	    -| ['compiler_generated'] )
	end
'extgrouppos'/5 =
    %% Line 736
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <['ExtensionAdditionGroupEnd'|T],ActualPos,VirtualPos,Len,Acc> when 'true' ->
	      let <_cor6> =
		  %% Line 737
		  call 'erlang':'+'
		      (ActualPos, 1)
	      in  let <_cor5> =
		      %% Line 737
		      call 'erlang':'+'
			  (VirtualPos, Len)
		  in  %% Line 737
		      apply 'extgrouppos'/4
			  (T, _cor6, _cor5, [{ActualPos,VirtualPos,Len}|Acc])
	  %% Line 738
	  <[_cor13|T],ActualPos,VirtualPos,Len,Acc> when 'true' ->
	      let <_cor7> =
		  %% Line 739
		  call 'erlang':'+'
		      (Len, 1)
	      in  %% Line 739
		  apply 'extgrouppos'/5
		      (T, ActualPos, VirtualPos, _cor7, Acc)
	  ( <_cor12,_cor11,_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10,_cor9,_cor8})
		  -| [{'function_name',{'extgrouppos',5}}] )
	    -| ['compiler_generated'] )
	end
'gen_dec_extension_value'/0 =
    %% Line 742
    fun () ->
	let <E> =
	    %% Line 744
	    ( fun (_cor4,_cor3) ->
		  do  %% Line 745
		      call 'asn1ct_gen':'emit'
			  ([[123|[69|[120|[116|[44]]]]]|[{'next','bytes'}|[[125|[32|[61|[32]]]]]]])
		      let <_cor1> =
			  %% Line 746
			  call 'asn1ct_name':'curr'
			      ('bytes')
		      in  let <BytesVar> =
			      %% Line 746
			      call 'asn1ct_gen':'mk_var'
				  (_cor1)
			  in  do  %% Line 747
				  call 'asn1ct_imm':'dec_code_gen'
				      (_cor4, BytesVar)
				  %% Line 748
				  call 'asn1ct_name':'new'
				      ('bytes')
	      -| [{'id',{0,0,'-gen_dec_extension_value/0-fun-0-'}}] )
	in  %% Line 750
	    {'imm',{'get_bits',1,[1]},E}
'gen_dec_optionals'/1 =
    %% Line 752
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 753
	    call 'erlang':'length'
		(_cor0)
	in  let <Imm0> =
		%% Line 753
		{'get_bits',_cor1,[1]}
	    in  let <E> =
		    %% Line 754
		    ( fun (_cor6,_cor5) ->
			  let <_cor3> =
			      %% Line 755
			      call 'asn1ct_name':'curr'
				  ('bytes')
			  in  let <BytesVar> =
				  %% Line 755
				  call 'asn1ct_gen':'mk_var'
				      (_cor3)
			      in  do  %% Line 756
				      call 'asn1ct_gen':'emit'
					  ([[123|[79|[112|[116|[44]]]]]|[{'next','bytes'}|[[125|[32|[61|[32]]]]]]])
				      do  %% Line 757
					  call 'asn1ct_imm':'dec_code_gen'
					      (_cor6, BytesVar)
					  %% Line 758
					  call 'asn1ct_name':'new'
					      ('bytes')
		      -| [{'id',{0,0,'-gen_dec_optionals/1-fun-0-'}}] )
		in  %% Line 760
		    {'imm',Imm0,E}
'optionals'/1 =
    %% Line 767
    fun (_cor0) ->
	case _cor0 of
	  <{L1,Ext,L2}> when 'true' ->
	      let <Opt1> =
		  %% Line 768
		  apply 'optionals'/3
		      (L1, [], 2)
	      in  let <_cor6> =
		      %% Line 769
		      ( letrec
			    'lc$^0'/1 =
				fun (_cor4) ->
				    case _cor4 of
				      <[C = {'ComponentType',_cor13,_cor14,_cor15,_cor16,_cor17,_cor18}|_cor3]> when 'true' ->
					  let <_cor5> =
					      apply 'lc$^0'/1
						  (_cor3)
					  in  ( [C|_cor5]
						-| ['compiler_generated'] )
				      ( <[_cor2|_cor3]> when 'true' ->
					    apply 'lc$^0'/1
						(_cor3)
					-| ['compiler_generated'] )
				      <[]> when 'true' ->
					  []
				      ( <_cor4> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_cor4})
					      -| [{'function_name',{'lc$^0',1}}] )
					-| ['compiler_generated'] )
				    end
			in  apply 'lc$^0'/1
				(Ext)
			-| ['list_comprehension'] )
		  in  let <ExtComps> =
			  %% Line 769
			  call 'erlang':'length'
			      (_cor6)
		      in  let <_cor8> =
			      %% Line 770
			      call 'erlang':'length'
				  (L1)
			  in  let <_cor9> =
				  %% Line 770
				  call 'erlang':'+'
				      (2, _cor8)
			      in  let <_cor10> =
				      %% Line 770
				      call 'erlang':'+'
					  (_cor9, ExtComps)
				  in  let <Opt2> =
					  %% Line 770
					  apply 'optionals'/3
					      (L2, [], _cor10)
				      in  %% Line 771
					  call 'erlang':'++'
					      (Opt1, Opt2)
	  %% Line 772
	  <{L,_X_Ext}> when 'true' ->
	      apply 'optionals'/3
		  (L, [], 2)
	  %% Line 773
	  <L> when 'true' ->
	      apply 'optionals'/3
		  (L, [], 2)
	end
'optionals'/3 =
    %% Line 775
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[{'ComponentType',_cor10,_cor11,_cor12,'OPTIONAL',_cor13,_cor14}|Rest],Acc,Pos> when 'true' ->
	      let <_cor3> =
		  %% Line 776
		  call 'erlang':'+'
		      (Pos, 1)
	      in  %% Line 776
		  apply 'optionals'/3
		      (Rest, [Pos|Acc], _cor3)
	  %% Line 777
	  <[{'ComponentType',_cor15,_cor16,T,{'DEFAULT',Val},_cor17,_cor18}|Rest],%% Line 778
										  Acc,%% Line 778
										      Pos> when 'true' ->
	      let <Vals> =
		  %% Line 779
		  apply 'def_values'/2
		      (T, Val)
	      in  let <_cor5> =
		      %% Line 780
		      call 'erlang':'+'
			  (Pos, 1)
		  in  %% Line 780
		      apply 'optionals'/3
			  (Rest, [{Pos,Vals}|Acc], _cor5)
	  %% Line 781
	  <[{'ComponentType',_cor19,_cor20,_cor21,_cor22,_cor23,_cor24}|Rest],Acc,Pos> when 'true' ->
	      let <_cor6> =
		  %% Line 782
		  call 'erlang':'+'
		      (Pos, 1)
	      in  %% Line 782
		  apply 'optionals'/3
		      (Rest, Acc, _cor6)
	  %% Line 783
	  <[],Acc,_cor25> when 'true' ->
	      %% Line 784
	      call 'lists':'reverse'
		  (Acc)
	  ( <_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7})
		  -| [{'function_name',{'optionals',3}}] )
	    -| ['compiler_generated'] )
	end
'create_optionality_table'/1 =
    %% Line 794
    fun (_cor0) ->
	let <IsOptional> =
	    %% Line 795
	    ( fun (_cor1) ->
		  case _cor1 of
		    <'OPTIONAL'> when 'true' ->
			'true'
		    %% Line 796
		    <{'DEFAULT',_cor20}> when 'true' ->
			'true'
		    %% Line 797
		    <_cor21> when 'true' ->
			'false'
		  end
	      -| [{'id',{0,0,'-create_optionality_table/1-fun-0-'}}] )
	in  let <_cor9> =
		%% Line 799
		( letrec
		      'lc$^0'/1 =
			  fun (_cor6) ->
			      case _cor6 of
				<[{'ComponentType',_cor22,_cor23,_cor24,O,_cor25,TO}|_cor5]> when 'true' ->
				    %% Line 800
				    ( case apply IsOptional
					       (O) of
					<'true'> when 'true' ->
					    let <_cor7> =
						apply 'lc$^0'/1
						    (_cor5)
					    in  ( [TO|_cor7]
						  -| ['compiler_generated'] )
					( <'false'> when 'true' ->
					      apply 'lc$^0'/1
						  (_cor5)
					  -| ['compiler_generated'] )
					( <_cor8> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_cor8})
					  -| ['compiler_generated'] )
				      end
				      -| ['list_comprehension'] )
				( <[_cor4|_cor5]> when 'true' ->
				      apply 'lc$^0'/1
					  (_cor5)
				  -| ['compiler_generated'] )
				<[]> when 'true' ->
				    []
				( <_cor6> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_cor6})
					-| [{'function_name',{'lc$^0',1}}] )
				  -| ['compiler_generated'] )
			      end
		  in  apply 'lc$^0'/1
			  (_cor0)
		  -| ['list_comprehension'] )
	    in  let <_cor17> =
		    %% Line 801
		    ( fun (_cor14,_cor13) ->
			  let <_cor12> =
			      %% Line 802
			      call 'erlang':'+'
				  (_cor13, 1)
			  in  %% Line 802
			      {{_cor13,_cor14},_cor12}
		      -| [{'id',{0,0,'-create_optionality_table/1-fun-1-'}}] )
		in  let <_cor11> =
			%% Line 804
			call 'lists':'sort'
			    (_cor9)
		    in  %% Line 801
			case call 'lists':'mapfoldl'
				 (_cor17, %% Line 804
					  1, _cor11) of
			  <{Table,_cor26}> when 'true' ->
			      %% Line 805
			      Table
			  ( <_cor18> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor18})
			    -| ['compiler_generated'] )
			end
'get_optionality_pos'/2 =
    %% Line 806
    fun (_cor1,_cor0) ->
	%% Line 807
	case call 'lists':'keysearch'
		 (_cor1, 2, _cor0) of
	  %% Line 808
	  <{'value',{OptNum,_cor5}}> when 'true' ->
	      %% Line 809
	      OptNum
	  %% Line 810
	  <_cor6> when 'true' ->
	      %% Line 811
	      'no_num'
	end
'to_encoding_order'/1 =
    %% Line 814
    fun (_cor0) ->
	case _cor0 of
	  <Cs>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      %% Line 815
	      Cs
	  %% Line 816
	  <Cs = {_X_Root,_X_Ext}> when 'true' ->
	      %% Line 817
	      Cs
	  %% Line 818
	  <{R1,Ext,R2}> when 'true' ->
	      let <_cor1> =
		  %% Line 819
		  call 'erlang':'++'
		      (R1, R2)
	      in  %% Line 819
		  {_cor1,Ext}
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'to_encoding_order',1}}] )
	    -| ['compiler_generated'] )
	end
'add_textual_order'/1 =
    %% Line 821
    fun (_cor0) ->
	case _cor0 of
	  <Cs>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      %% Line 822
	      case apply 'add_textual_order1'/2
		       (Cs, 1) of
		<{NewCs,_cor8}> when 'true' ->
		    %% Line 823
		    NewCs
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 824
	  <{Root,Ext}> when 'true' ->
	      %% Line 825
	      case apply 'add_textual_order1'/2
		       (Root, 1) of
		<{NewRoot,Num}> when 'true' ->
		    %% Line 826
		    case apply 'add_textual_order1'/2
			     (Ext, Num) of
		      <{NewExt,_cor9}> when 'true' ->
			  %% Line 827
			  {NewRoot,NewExt}
		      ( <_cor3> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor3})
			-| ['compiler_generated'] )
		    end
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 828
	  <{R1,Ext,R2}> when 'true' ->
	      %% Line 829
	      case apply 'add_textual_order1'/2
		       (R1, 1) of
		<{NewR1,Num1}> when 'true' ->
		    %% Line 830
		    case apply 'add_textual_order1'/2
			     (Ext, Num1) of
		      <{NewExt,Num2}> when 'true' ->
			  %% Line 831
			  case apply 'add_textual_order1'/2
				   (R2, Num2) of
			    <{NewR2,_cor10}> when 'true' ->
				%% Line 832
				{NewR1,NewExt,NewR2}
			    ( <_cor6> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor6})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor5> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor5})
			-| ['compiler_generated'] )
		    end
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7})
		  -| [{'function_name',{'add_textual_order',1}}] )
	    -| ['compiler_generated'] )
	end
'add_textual_order1'/2 =
    %% Line 836
    fun (_cor1,_cor0) ->
	let <_cor10> =
	    %% Line 837
	    ( fun (_cor7,_cor6) ->
		  case <_cor7,_cor6> of
		    <C = {'ComponentType',_cor13,_cor14,_cor15,_cor16,_cor17,_cor18},Num> when 'true' ->
			let <_cor5> =
			    %% Line 838
			    call 'erlang':'setelement'
				(7, C, Num)
			in  let <_cor2> =
				%% Line 839
				call 'erlang':'+'
				    (Num, 1)
			    in  %% Line 838
				{_cor5,_cor2}
		    %% Line 840
		    <OtherMarker,Num> when 'true' ->
			%% Line 841
			{OtherMarker,Num}
		  end
	      -| [{'id',{0,0,'-add_textual_order1/2-fun-0-'}}] )
	in  %% Line 837
	    call 'lists':'mapfoldl'
		(_cor10, _cor0, _cor1)
'gen_enc_components_call'/5 =
    %% Line 845
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Erule,TopType,{Root,ExtList},DynamicEnc,Ext> when 'true' ->
	      %% Line 846
	      apply 'gen_enc_components_call'/5
		  (Erule, TopType, {Root,ExtList,[]}, DynamicEnc, Ext)
	  %% Line 847
	  <Erule,TopType,CL = {Root,ExtList,Root2},DynamicEnc,Ext> when 'true' ->
	      let <_cor5> =
		  %% Line 849
		  call 'erlang':'++'
		      (Root, Root2)
	      in  %% Line 849
		  case apply 'gen_enc_components_call1'/7
			   (Erule, TopType, _cor5, 1, DynamicEnc, 'noext', []) of
		    <{Imm0,Rpos}> when 'true' ->
			let <_cor8> =
			    %% Line 850
			    case Ext of
			      %% Line 851
			      <{'ext',_cor19,ExtNum}>
				  when call 'erlang':'>'
					(ExtNum,
					 0) ->
				  %% Line 852
				  [{'var',[69|[120|[116|[101|[110|[115|[105|[111|[110|[115]]]]]]]]]]}]
			      %% Line 853
			      <_cor20> when 'true' ->
				  %% Line 854
				  []
			    end
			in  %% Line 857
			    case apply 'extgroup_pos_and_length'/1
				     (CL) of
			      <{'extgrouppos',ExtGroupPosLen}> when 'true' ->
				  let <NewExtList> =
				      %% Line 858
				      apply 'wrap_extensionAdditionGroups'/2
					  (ExtList, ExtGroupPosLen)
				  in  %% Line 859
				      case apply 'gen_enc_components_call1'/7
					       (Erule, TopType, NewExtList, Rpos, DynamicEnc, Ext, []) of
					<{Imm1,_cor21}> when 'true' ->
					    %% Line 860
					    call 'erlang':'++'
						(Imm0, [_cor8|Imm1])
					( <_cor12> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_cor12})
					  -| ['compiler_generated'] )
				      end
			      ( <_cor10> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor10})
				-| ['compiler_generated'] )
			    end
		    ( <_cor6> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor6})
		      -| ['compiler_generated'] )
		  end
	  %% Line 861
	  <Erule,TopType,CompList,DynamicEnc,Ext> when 'true' ->
	      %% Line 863
	      case apply 'gen_enc_components_call1'/7
		       (Erule, TopType, CompList, 1, DynamicEnc, Ext, []) of
		<{Imm,_cor22}> when 'true' ->
		    %% Line 864
		    Imm
		( <_cor13> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor13})
		  -| ['compiler_generated'] )
	      end
	end
'gen_enc_components_call1'/7 =
    %% Line 866
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Erule,TopType,%% Line 867
			 [C = {'ComponentType',_cor35,Cname,Type,Prop,_cor36,_cor37}|Rest],%% Line 868
											   Tpos,%% Line 869
												DynamicEnc,%% Line 869
													   Ext,%% Line 869
													       Acc> when 'true' ->
	      let <_cor10> =
		  %% Line 872
		  case _cor37 of
		    %% Line 873
		    <'undefined'> when 'true' ->
			%% Line 874
			Tpos
		    %% Line 875
		    <CanonicalNum> when 'true' ->
			%% Line 876
			CanonicalNum
		  end
	      in  let <Val> =
		      %% Line 878
		      apply 'make_var'/1
			  ('val')
		  in  let <_cor13> =
			  %% Line 879
			  call 'erlang':'+'
			      (_cor10, 1)
		      in  %% Line 879
			  case call 'asn1ct_imm':'enc_element'
				   (_cor13, Val) of
			    <{Imm0,Element}> when 'true' ->
				let <Imm1> =
				    %% Line 880
				    apply 'gen_enc_line_imm'/7
					(Erule, TopType, Cname, Type, Element, DynamicEnc, Ext)
				in  let <_cor17> =
					%% Line 881
					case <Prop,Ext> of
					  %% Line 882
					  <'OPTIONAL',_cor44> when 'true' ->
					      %% Line 883
					      'optional'
					  %% Line 884
					  <{'DEFAULT',DefVal},_cor45> when 'true' ->
					      %% Line 885
					      {'default',DefVal}
					  %% Line 886
					  <_cor46,{'ext',ExtPos,_cor47}>
					      when call 'erlang':'>='
						    (Tpos,
						     ExtPos) ->
					      %% Line 887
					      'optional'
					  %% Line 888
					  <_cor48,_cor49> when 'true' ->
					      %% Line 889
					      'mandatory'
					end
				    in  let <_cor21> =
					    %% Line 891
					    case _cor17 of
					      %% Line 892
					      <'mandatory'> when 'true' ->
						  %% Line 893
						  Imm1
					      %% Line 894
					      <'optional'> when 'true' ->
						  %% Line 895
						  call 'asn1ct_imm':'enc_absent'
						      (Element, ['asn1_NOVALUE'], Imm1)
					      %% Line 896
					      <{'default',Def}> when 'true' ->
						  let <DefValues> =
						      %% Line 897
						      apply 'def_values'/2
							  (Type, Def)
						  in  %% Line 898
						      call 'asn1ct_imm':'enc_absent'
							  (Element, DefValues, Imm1)
					      ( <_cor20> when 'true' ->
						    primop 'match_fail'
							({'case_clause',_cor20})
						-| ['compiler_generated'] )
					    end
					in  let <_cor24> =
						%% Line 900
						case _cor21 of
						  %% Line 901
						  <[]> when 'true' ->
						      []
						  %% Line 902
						  <_cor50> when 'true' ->
						      call 'erlang':'++'
							  (Imm0, _cor21)
						end
					    in  let <_cor26> =
						    %% Line 904
						    call 'erlang':'+'
							(Tpos, 1)
						in  %% Line 904
						    apply 'gen_enc_components_call1'/7
							(Erule, TopType, Rest, _cor26, DynamicEnc, Ext, [_cor24|Acc])
			    ( <_cor14> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor14})
			      -| ['compiler_generated'] )
			  end
	  %% Line 905
	  <_X_Erule,_X_TopType,[],Pos,_cor51,_cor52,Acc> when 'true' ->
	      let <ImmList> =
		  %% Line 906
		  call 'lists':'reverse'
		      (Acc)
	      in  %% Line 907
		  {ImmList,Pos}
	  ( <_cor34,_cor33,_cor32,_cor31,_cor30,_cor29,_cor28> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor34,_cor33,_cor32,_cor31,_cor30,_cor29,_cor28})
		  -| [{'function_name',{'gen_enc_components_call1',7}}] )
	    -| ['compiler_generated'] )
	end
'def_values'/2 =
    %% Line 909
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'type',_cor44,{'Externaltypereference',_cor45,Mod,Type},_cor46,_cor47,_cor48},Def> when 'true' ->
	      %% Line 910
	      case call 'asn1_db':'dbget'
		       (Mod, Type) of
		<{'typedef',_cor49,_cor50,_cor51,T}> when 'true' ->
		    %% Line 911
		    apply 'def_values'/2
			(T, Def)
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 912
	  <{'type',_cor52,{'BIT STRING',[]},_cor53,_cor54,_cor55},Bs>
	      when call 'erlang':'is_bitstring'
		    (Bs) ->
	      %% Line 913
	      case call 'asn1ct':'use_legacy_types'
		       () of
		%% Line 914
		<'false'> when 'true' ->
		    %% Line 915
		    ['asn1_DEFAULT'|[Bs|[]]]
		%% Line 916
		<'true'> when 'true' ->
		    let <_cor6> =
			%% Line 917
			( letrec
			      'lc$^0'/1 =
				  fun (_cor4) ->
				      case ( _cor4
					     -| ['reuse_for_context'] ) of
					<#{#<B>(1,1,'integer',['unsigned'|['big']]),
					   #<_cor3>('all',1,'binary',['unsigned'|['big']])}#> when 'true' ->
					    let <_cor5> =
						apply 'lc$^0'/1
						    (_cor3)
					    in  ( [B|_cor5]
						  -| ['compiler_generated'] )
					<#{#<_cor3>('all',1,'binary',['unsigned'|['big']])}#> when 'true' ->
					    []
					( <_cor4> when 'true' ->
					      do  primop 'bs_context_to_binary'
						      (_cor4)
						  ( primop 'match_fail'
							({'function_clause',_cor4})
						    -| [{'function_name',{'lc$^0',1}}] )
					  -| ['compiler_generated'] )
				      end
			  in  apply 'lc$^0'/1
				  (Bs)
			  -| ['list_comprehension'] )
		    in  let <_cor14> =
			    %% Line 918
			    ( fun (_cor11,_cor10) ->
				  let <_cor9> =
				      %% Line 919
				      call 'erlang':'bsl'
					  (_cor10, 1)
				  in  %% Line 919
				      call 'erlang':'bor'
					  (_cor9, _cor11)
			      -| [{'id',{0,0,'-def_values/2-fun-0-'}}] )
			in  let <_cor8> =
				%% Line 920
				call 'lists':'reverse'
				    (_cor6)
			    in  let <IntBs> =
				    %% Line 918
				    call 'lists':'foldl'
					(_cor14, %% Line 920
						 0, _cor8)
				in  let <Sz> =
					%% Line 921
					call 'erlang':'bit_size'
					    (Bs)
				    in  let <_cor17> =
					    %% Line 922
					    call 'erlang':'rem'
						(Sz, 8)
					in  let <_cor20> =
						%% Line 922
						case call 'erlang':'-'
							 (8, _cor17) of
						  %% Line 923
						  <8> when 'true' ->
						      %% Line 924
						      {0,Bs}
						  %% Line 925
						  <Unused> when 'true' ->
						      let <_cor18> =
							  %% Line 926
							  #{#<Bs>(Sz,1,'binary',['unsigned'|['big']]),
							    #<0>(Unused,1,'integer',['unsigned'|['big']])}#
						      in  %% Line 926
							  {Unused,_cor18}
						end
					    in  %% Line 928
						['asn1_DEFAULT'|[Bs|[_cor20|[_cor6|[IntBs|[]]]]]]
		( <_cor22> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor22})
		  -| ['compiler_generated'] )
	      end
	  %% Line 930
	  <{'type',_cor56,{'BIT STRING',Ns = [_cor57|_cor58]},_cor59,_cor60,_cor61},List>
	      when call 'erlang':'is_list'
		    (List) ->
	      let <Bs> =
		  %% Line 931
		  call 'asn1ct_gen':'named_bitstring_value'
		      (List, Ns)
	      in  let <_cor38> =
		      %% Line 932
		      case call 'asn1ct':'use_legacy_types'
			       () of
			%% Line 933
			<'false'> when 'true' ->
			    %% Line 934
			    [List|[Bs|[]]]
			%% Line 935
			<'true'> when 'true' ->
			    let <_cor27> =
				%% Line 936
				( letrec
				      'lc$^1'/1 =
					  fun (_cor25) ->
					      case ( _cor25
						     -| ['reuse_for_context'] ) of
						<#{#<B>(1,1,'integer',['unsigned'|['big']]),
						   #<_cor24>('all',1,'binary',['unsigned'|['big']])}#> when 'true' ->
						    let <_cor26> =
							apply 'lc$^1'/1
							    (_cor24)
						    in  ( [B|_cor26]
							  -| ['compiler_generated'] )
						<#{#<_cor24>('all',1,'binary',['unsigned'|['big']])}#> when 'true' ->
						    []
						( <_cor25> when 'true' ->
						      do  primop 'bs_context_to_binary'
							      (_cor25)
							  ( primop 'match_fail'
								({'function_clause',_cor25})
							    -| [{'function_name',{'lc$^1',1}}] )
						  -| ['compiler_generated'] )
					      end
				  in  apply 'lc$^1'/1
					  (Bs)
				  -| ['list_comprehension'] )
			    in  let <_cor35> =
				    %% Line 937
				    ( fun (_cor32,_cor31) ->
					  let <_cor30> =
					      %% Line 938
					      call 'erlang':'bsl'
						  (_cor31, 1)
					  in  %% Line 938
					      call 'erlang':'bor'
						  (_cor30, _cor32)
				      -| [{'id',{0,0,'-def_values/2-fun-1-'}}] )
				in  let <_cor29> =
					%% Line 939
					call 'lists':'reverse'
					    (_cor27)
				    in  let <IntBs> =
					    %% Line 937
					    call 'lists':'foldl'
						(_cor35, %% Line 939
							 0, _cor29)
					in  %% Line 940
					    [List|[Bs|[_cor27|[IntBs|[]]]]]
			( <_cor37> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor37})
			  -| ['compiler_generated'] )
		      end
		  in  %% Line 942
		      {'call','per_common','is_default_bitstring',_cor38}
	  %% Line 943
	  <{'type',_cor62,{'INTEGER',Ns},_cor63,_cor64,_cor65},Def> when 'true' ->
	      let <_cor41> =
		  %% Line 944
		  case call 'lists':'keyfind'
			   (Def, 2, Ns) of
		    %% Line 945
		    <'false'> when 'true' ->
			[]
		    %% Line 946
		    <{Val,_cor66}>
			when call 'erlang':'=:='
			      (_cor66,
			       Def) ->
			[Val|[]]
		    ( <_cor40> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor40})
		      -| ['compiler_generated'] )
		  end
	      in  %% Line 944
		  ['asn1_DEFAULT'|[Def|_cor41]]
	  %% Line 948
	  <_cor67,Def> when 'true' ->
	      %% Line 949
	      ['asn1_DEFAULT'|[Def|[]]]
	end
'gen_enc_line_imm'/7 =
    %% Line 951
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <Imm0> =
	    %% Line 952
	    apply 'gen_enc_line_imm_1'/6
		(_cor6, _cor5, _cor4, _cor3, _cor2, _cor1)
	in  let <Aligned> =
		%% Line 954
		apply 'is_aligned'/1
		    (_cor6)
	    in  %% Line 955
		case _cor0 of
		  %% Line 956
		  <{'ext',_X_Ep2,_cor17}> when 'true' ->
		      %% Line 957
		      call 'asn1ct_imm':'per_enc_open_type'
			  (Imm0, Aligned)
		  %% Line 958
		  <_cor18> when 'true' ->
		      %% Line 959
		      Imm0
		end
'gen_enc_line_imm_1'/6 =
    %% Line 962
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor9> =
	    %% Line 964
	    case _cor2 of
	      %% Line 965
	      <{'type',_cor39,{'ObjectClassFieldType',_cor40,_cor41,_cor42,InnerType},_cor43,_cor44,_cor45}> when 'true' ->
		  %% Line 966
		  InnerType
	      %% Line 967
	      <_cor46> when 'true' ->
		  %% Line 968
		  ( case _cor2 of
		      ( <( {'type',_cor47,_rec22,_cor48,_cor49,_cor50}
			   -| ['compiler_generated'] )> when 'true' ->
			    call 'asn1ct_gen':'get_inner'
				(_rec22)
			-| ['compiler_generated'] )
		      ( <_cor51> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','type'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	    end
	in  let <Aligned> =
		%% Line 970
		apply 'is_aligned'/1
		    (_cor5)
	    in  %% Line 971
		case _cor9 of
		  %% Line 972
		  <{'typefield',_cor52}> when 'true' ->
		      %% Line 973
		      case _cor0 of
			<{_X_LeadingAttrName,Fun}> when 'true' ->
			    %% Line 974
			    ( case _cor2 of
				( <( {'type',_cor53,_rec24,_cor54,_cor55,_cor56}
				     -| ['compiler_generated'] )> when 'true' ->
				      ( case _rec24 of
					  ( <( {'ObjectClassFieldType',_cor58,_cor59,_rec23,_cor60}
					       -| ['compiler_generated'] )> when 'true' ->
						case _rec23 of
						  %% Line 975
						  <{Name,RestFieldNames}>
						      when call 'erlang':'is_atom'
							    (Name) ->
						      let <Imm> =
							  %% Line 976
							  apply 'enc_var_type_call'/6
							      (_cor5, Name, RestFieldNames, _cor2, %% Line 977
												   Fun, _cor1)
						      in  %% Line 978
							  call 'asn1ct_imm':'per_enc_open_type'
							      (Imm, Aligned)
						  ( <_cor18> when 'true' ->
							primop 'match_fail'
							    ({'case_clause',_cor18})
						    -| ['compiler_generated'] )
						end
					    -| ['compiler_generated'] )
					  ( <_cor61> when 'true' ->
						( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'error'
										       -| ['compiler_generated'] )
						      (( {'badrecord','ObjectClassFieldType'}
							 -| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					end
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				( <_cor57> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {'badrecord','type'}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
			( <_cor12> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor12})
			  -| ['compiler_generated'] )
		      end
		  %% Line 980
		  <_cor62> when 'true' ->
		      let <CurrMod> =
			  %% Line 981
			  call 'erlang':'get'
			      ('currmod')
		      in  %% Line 982
			  case call 'asn1ct_gen':'type'
				   (_cor9) of
			    %% Line 983
			    <{'Externaltypereference',_cor63,_cor64,EType}>
				when call 'erlang':'=:='
				      (_cor64,
				       CurrMod) ->
				let <_cor20> =
				    %% Line 984
				    apply 'enc_func'/1
					(EType)
				in  %% Line 984
				    [{'apply',{'local',_cor20,_cor9},[_cor1|[]]}|[]]
			    %% Line 985
			    <{'Externaltypereference',_cor65,Mod,EType}> when 'true' ->
				let <_cor21> =
				    %% Line 986
				    apply 'enc_func'/1
					(EType)
				in  %% Line 986
				    [{'apply',{Mod,_cor21,_cor9},[_cor1|[]]}|[]]
			    %% Line 987
			    <{'primitive','bif'}> when 'true' ->
				%% Line 988
				call 'asn1ct_gen_per':'gen_encode_prim_imm'
				    (_cor1, _cor2, Aligned)
			    %% Line 989
			    <'ASN1_OPEN_TYPE'> when 'true' ->
				%% Line 990
				( case _cor2 of
				    ( <( {'type',_cor66,_rec25,_cor67,_cor68,_cor69}
					 -| ['compiler_generated'] )> when 'true' ->
					  case _rec25 of
					    %% Line 991
					    <{'ObjectClassFieldType',_cor71,_cor72,_cor73,OpenType}> when 'true' ->
						%% Line 992
						call 'asn1ct_gen_per':'gen_encode_prim_imm'
						    (_cor1, %% Line 993
							    {'type',[],OpenType,[],[],'no'}, %% Line 994
											     Aligned)
					    %% Line 995
					    <_cor74> when 'true' ->
						%% Line 996
						call 'asn1ct_gen_per':'gen_encode_prim_imm'
						    (_cor1, _cor2, %% Line 998
								   Aligned)
					  end
				      -| ['compiler_generated'] )
				    ( <_cor70> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {'badrecord','type'}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
			    %% Line 1000
			    <{'constructed','bif'}> when 'true' ->
				let <NewTypename> =
				    %% Line 1001
				    [_cor3|_cor4]
				in  let <_cor26> =
					%% Line 1002
					call 'asn1ct_gen':'list2name'
					    (NewTypename)
				    in  let <Enc> =
					    %% Line 1002
					    apply 'enc_func'/1
						(_cor26)
					in  %% Line 1003
					    ( case _cor2 of
						( <( {'type',_cor75,_cor76,_cor77,_rec26,_cor78}
						     -| ['compiler_generated'] )> when 'true' ->
						      case <_rec26,_cor0> of
							%% Line 1004
							<[{'objfun',_cor80}|_X_R],{_cor81,EncFun}> when 'true' ->
							    %% Line 1005
							    [{'apply',{'local',Enc,_cor2},[_cor1|[EncFun|[]]]}|[]]
							%% Line 1006
							<_fol280,_fol281> when 'true' ->
							    %% Line 1007
							    [{'apply',{'local',Enc,_cor2},[_cor1|[]]}|[]]
						      end
						  -| ['compiler_generated'] )
						( <_cor79> when 'true' ->
						      ( call ( 'erlang'
							       -| ['compiler_generated'] ):( 'error'
											     -| ['compiler_generated'] )
							    (( {'badrecord','type'}
							       -| ['compiler_generated'] ))
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					      end
					      -| ['compiler_generated'] )
			    ( <_cor31> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor31})
			      -| ['compiler_generated'] )
			  end
		end
'enc_func'/1 =
    %% Line 1012
    fun (_cor0) ->
	%% Line 1013
	apply 'enc_func'/2
	    ([101|[110|[99|[95]]]], _cor0)
'enc_func'/2 =
    %% Line 1015
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 1016
	    call 'lists':'concat'
		([_cor1|[_cor0|[]]])
	in  %% Line 1016
	    call 'erlang':'list_to_atom'
		(_cor2)
'enc_var_type_call'/6 =
    %% Line 1018
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Erule,Name,RestFieldNames,%% Line 1019
				     {'type',_cor43,_cor44,_cor45,TCI,_cor46},%% Line 1019
									      Fun,%% Line 1019
										  Val> when 'true' ->
	      %% Line 1020
	      case TCI of
		<[{'objfun',{'Externaltypereference',_cor47,Xmod,Xtype}}|[]]> when 'true' ->
		    %% Line 1021
		    case call 'asn1_db':'dbget'
			     (Xmod, Xtype) of
		      <{'typedef',_cor48,_cor49,_cor50,ObjSet0}> when 'true' ->
			  %% Line 1022
			  case ObjSet0 of
			    <{'ObjectSet',Class,_cor51,_cor52,ObjSet1}> when 'true' ->
				%% Line 1023
				case Class of
				  <{'Externaltypereference',_cor53,ClMod,ClType}> when 'true' ->
				      %% Line 1024
				      case call 'asn1_db':'dbget'
					       (ClMod, ClType) of
					<{'classdef',_cor54,_cor55,_cor56,ClassDef}> when 'true' ->
					    %% Line 1025
					    case ClassDef of
					      <{'objectclass',ClassFields,_cor57}> when 'true' ->
						  let <Extensible> =
						      %% Line 1026
						      call 'lists':'member'
							  ('EXTENSIONMARK', ObjSet1)
						  in  let <_cor18> =
							  %% Line 1027
							  ( letrec
								'lc$^0'/1 =
								    fun (_cor15) ->
									case _cor15 of
									  <[%% Line 1028
									    {_cor58,Key,Code}|_cor14]> when 'true' ->
									      let <_cor16> =
										  apply 'fix_object_code'/3
										      (Name, Code, ClassFields)
									      in  let <_cor17> =
										      %% Line 1028
										      apply 'lc$^0'/1
											  (_cor14)
										  in  ( [{Key,_cor16}|_cor17]
											-| ['compiler_generated'] )
									  ( <[_cor13|_cor14]> when 'true' ->
										%% Line 1028
										apply 'lc$^0'/1
										    (_cor14)
									    -| ['compiler_generated'] )
									  <[]> when 'true' ->
									      []
									  ( <_cor15> when 'true' ->
										( primop 'match_fail'
										      ({'function_clause',_cor15})
										  -| [{'function_name',{'lc$^0',1}}] )
									    -| ['compiler_generated'] )
									end
							    in  apply 'lc$^0'/1
								    (%% Line 1028
								     ObjSet1)
							    -| ['list_comprehension'] )
						      in  let <_cor24> =
							      %% Line 1029
							      ( letrec
								    'lc$^1'/1 =
									fun (_cor22) ->
									    case _cor22 of
									      <[P = {_cor59,B}|_cor21]>
										  when call 'erlang':'=/='
											(B,
											 'none') ->
										  let <_cor23> =
										      apply 'lc$^1'/1
											  (_cor21)
										  in  ( [P|_cor23]
											-| ['compiler_generated'] )
									      ( <[_cor20|_cor21]> when 'true' ->
										    apply 'lc$^1'/1
											(_cor21)
										-| ['compiler_generated'] )
									      <[]> when 'true' ->
										  []
									      ( <_cor22> when 'true' ->
										    ( primop 'match_fail'
											  ({'function_clause',_cor22})
										      -| [{'function_name',{'lc$^1',1}}] )
										-| ['compiler_generated'] )
									    end
								in  apply 'lc$^1'/1
									(_cor18)
								-| ['list_comprehension'] )
							  in  let <ObjSet> =
								  %% Line 1029
								  call 'lists':'sort'
								      (_cor24)
							      in  let <_cor26> =
								      %% Line 1030
								      call 'erlang':'term_to_binary'
									  ({'encode',ObjSet,RestFieldNames,Extensible})
								  in  let <Key> =
									  %% Line 1030
									  call 'erlang':'md5'
									      (_cor26)
								      in  let <Imm> =
									      %% Line 1031
									      apply 'enc_objset_imm'/5
										  (Erule, Name, ObjSet, RestFieldNames, Extensible)
									  in  let <Lambda> =
										  %% Line 1032
										  {'lambda',[{'var',[86|[97|[108]]]}|[{'var',[73|[100]]}]],Imm}
									      in  let <Gen> =
										      %% Line 1033
										      ( fun (_cor32,_cor31) ->
											    let <Aligned> =
												%% Line 1034
												apply 'is_aligned'/1
												    (Erule)
											    in  do  %% Line 1035
												    call 'asn1ct_gen':'emit'
													([{'asis',_cor31}|[[40|[86|[97|[108|[44|[32|[73|[100|[41|[32|[45|[62]]]]]]]]]]]]|['nl']]])
												    do  %% Line 1036
													call 'asn1ct_imm':'enc_cg'
													    (Imm, Aligned)
													%% Line 1037
													call 'asn1ct_gen':'emit'
													    ([[46]|['nl']])
											-| [{'id',{0,0,'-enc_var_type_call/6-fun-0-'}}] )
										  in  let <Prefix> =
											  %% Line 1039
											  call 'lists':'concat'
											      ([[101|[110|[99|[95|[111|[115|[95]]]]]]]|[Name|[]]])
										      in  %% Line 1040
											  [{'call_gen',Prefix,Key,Gen,Lambda,[Val|[Fun|[]]]}|[]]
					      ( <_cor11> when 'true' ->
						    primop 'match_fail'
							({'badmatch',_cor11})
						-| ['compiler_generated'] )
					    end
					( <_cor10> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_cor10})
					  -| ['compiler_generated'] )
				      end
				  ( <_cor9> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor9})
				    -| ['compiler_generated'] )
				end
			    ( <_cor8> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor8})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor7> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor7})
			-| ['compiler_generated'] )
		    end
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor6})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor42,_cor41,_cor40,_cor39,_cor38,_cor37> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor42,_cor41,_cor40,_cor39,_cor38,_cor37})
		  -| [{'function_name',{'enc_var_type_call',6}}] )
	    -| ['compiler_generated'] )
	end
'fix_object_code'/3 =
    %% Line 1042
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Name,[{_cor11,B}|_cor12],_X_ClassFields>
	      when call 'erlang':'=:='
		    (_cor11,
		     Name) ->
	      %% Line 1043
	      B
	  %% Line 1044
	  <Name,[_cor13|T],ClassFields> when 'true' ->
	      %% Line 1045
	      apply 'fix_object_code'/3
		  (Name, T, ClassFields)
	  %% Line 1046
	  <Name,[],ClassFields> when 'true' ->
	      %% Line 1047
	      case call 'lists':'keyfind'
		       (Name, 2, ClassFields) of
		%% Line 1048
		<{'typefield',_cor14,'OPTIONAL'}>
		    when call 'erlang':'=:='
			  (_cor14,
			   Name) ->
		    %% Line 1049
		    'none'
		%% Line 1050
		<{'objectfield',_cor15,_cor16,_cor17,'OPTIONAL'}>
		    when call 'erlang':'=:='
			  (_cor15,
			   Name) ->
		    %% Line 1051
		    'none'
		%% Line 1052
		<{'typefield',_cor18,{'DEFAULT',Type = {'type',_cor19,_cor20,_cor21,_cor22,_cor23}}}>
		    when call 'erlang':'=:='
			  (_cor18,
			   Name) ->
		    let <InnerType> =
			%% Line 1053
			call 'asn1ct_gen':'get_inner'
			    (_cor20)
		    in  %% Line 1054
			case call 'asn1ct_gen':'type'
				 (InnerType) of
			  %% Line 1055
			  <{'primitive','bif'}> when 'true' ->
			      %% Line 1056
			      {'typedef','false','undefined',{'primitive','bif'},Type}
			  %% Line 1057
			  <{'constructed','bif'}> when 'true' ->
			      %% Line 1058
			      {'typedef','false','undefined',{'constructed','bif'},Type}
			  ( <_cor6> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor6})
			    -| ['compiler_generated'] )
			end
		( <_cor7> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor7})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'fix_object_code',3}}] )
	    -| ['compiler_generated'] )
	end
'enc_objset_imm'/5 =
    %% Line 1062
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <Aligned> =
	    %% Line 1063
	    apply 'is_aligned'/1
		(_cor4)
	in  let <_cor6> =
		%% Line 1065
		( fun () ->
		      %% Line 1066
		      call 'asn1ct_gen':'emit'
			  ([[101|[120|[105|[116|[40|[123|[39|[84|[121|[112|[101|[32|[110|[111|[116|[32|[99|[111|[109|[112|[97|[116|[105|[98|[108|[101|[32|[119|[105|[116|[104|[32|[116|[97|[98|[108|[101|[32|[99|[111|[110|[115|[116|[114|[97|[105|[110|[116|[39|[44|[123|[99|[111|[109|[112|[111|[110|[101|[110|[116|[44]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|%% Line 1067
																																														       [{'asis',_cor3}|[[125|[44|[123|[118|[97|[108|[117|[101|[44|[86|[97|[108|[125|[44|[123|[117|[110|[105|[113|[117|[101|[95|[110|[97|[109|[101|[95|[97|[110|[100|[95|[118|[97|[108|[117|[101|[44|[39|[95|[39|[125|[125|[41]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|['nl']]]])
		  -| [{'id',{0,0,'-enc_objset_imm/5-fun-0-'}}] )
	    in  let <E> = {%% Line 1064
		     'error',_cor6}
		in  let <_cor10> =
			%% Line 1075
			case _cor0 of
			  %% Line 1076
			  <'false'> when 'true' ->
			      %% Line 1077
			      E
			  %% Line 1078
			  <'true'> when 'true' ->
			      %% Line 1079
			      case call 'asn1ct':'use_legacy_types'
				       () of
				%% Line 1080
				<'false'> when 'true' ->
				    %% Line 1081
				    {'call','per_common','open_type_to_binary',[{'var',[86|[97|[108]]]}]}
				%% Line 1083
				<'true'> when 'true' ->
				    %% Line 1084
				    {'call','per_common','legacy_open_type_to_binary',[{'var',[86|[97|[108]]]}]}
				( <_cor8> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor8})
				  -| ['compiler_generated'] )
			      end
			  ( <_cor9> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor9})
			    -| ['compiler_generated'] )
			end
		    in  let <_cor16> =
			    %% Line 1072
			    ( letrec
				  'lc$^0'/1 =
				      fun (_cor13) ->
					  case _cor13 of
					    <[%% Line 1074
					      {Key,Obj}|_cor12]> when 'true' ->
						let <_cor14> =
						    %% Line 1073
						    apply 'enc_obj'/4
							(_cor4, Obj, _cor1, Aligned)
						in  let <_cor15> =
							%% Line 1074
							apply 'lc$^0'/1
							    (_cor12)
						    in  ( [[{'eq',{'var',[73|[100]]},Key}|_cor14]|_cor15]
							  -| ['compiler_generated'] )
					    ( <[_cor11|_cor12]> when 'true' ->
						  %% Line 1074
						  apply 'lc$^0'/1
						      (_cor12)
					      -| ['compiler_generated'] )
					    <[]> when 'true' ->
						%% Line 1075
						[['_'|[_cor10|%% Line 1087
							      []]]|%% Line 1087
								   []]
					    ( <_cor13> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor13})
						    -| [{'function_name',{'lc$^0',1}}] )
					      -| ['compiler_generated'] )
					  end
			      in  apply 'lc$^0'/1
				      (_cor2)
			      -| ['list_comprehension'] )
			in  %% Line 1071
			    [{'cond',_cor16}|%% Line 1087
					     []]
'enc_obj'/4 =
    %% Line 1089
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1090
	case _cor2 of
	  %% Line 1091
	  <{'typedef',_cor20,_cor21,{'primitive','bif'},Def}> when 'true' ->
	      %% Line 1092
	      call 'asn1ct_gen_per':'gen_encode_prim_imm'
		  ({'var',[86|[97|[108]]]}, Def, _cor0)
	  %% Line 1093
	  <{'typedef',_cor22,_cor23,{'constructed','bif'},Def}> when 'true' ->
	      %% Line 1094
	      ( case Def of
		  ( <( {'type',_cor24,_rec28,_cor25,_cor26,_cor27}
		       -| ['compiler_generated'] )> when 'true' ->
			let <InnerType> =
			    call 'asn1ct_gen':'get_inner'
				(_rec28)
			in  %% Line 1095
			    case InnerType of
			      %% Line 1096
			      <'CHOICE'> when 'true' ->
				  %% Line 1097
				  apply 'gen_encode_choice_imm'/3
				      (_cor3, 'name', Def)
			      %% Line 1098
			      <'SET'> when 'true' ->
				  %% Line 1099
				  apply 'gen_encode_constructed_imm'/3
				      (_cor3, 'name', Def)
			      %% Line 1100
			      <'SET OF'> when 'true' ->
				  %% Line 1101
				  apply 'gen_encode_sof_imm'/4
				      (_cor3, 'name', InnerType, Def)
			      %% Line 1102
			      <'SEQUENCE'> when 'true' ->
				  %% Line 1103
				  apply 'gen_encode_constructed_imm'/3
				      (_cor3, 'name', Def)
			      %% Line 1104
			      <'SEQUENCE OF'> when 'true' ->
				  %% Line 1105
				  apply 'gen_encode_sof_imm'/4
				      (_cor3, 'name', InnerType, Def)
			      ( <_cor7> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor7})
				-| ['compiler_generated'] )
			    end
		    -| ['compiler_generated'] )
		  ( <_cor28> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','type'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1107
	  <{'typedef',_cor29,_cor30,Type,_cor31}> when 'true' ->
	      let <_cor8> =
		  %% Line 1108
		  apply 'enc_func'/1
		      (Type)
	      in  %% Line 1108
		  [{'apply',{'local',_cor8,Type},[{'var',[86|[97|[108]]]}]}|[]]
	  %% Line 1109
	  <{'Externalvaluereference',_cor32,Mod,Value}> when 'true' ->
	      %% Line 1110
	      case call 'asn1_db':'dbget'
		       (Mod, Value) of
		%% Line 1111
		<{'typedef',_cor33,_cor34,_cor35,{'Object',_cor36,_cor37,Def}}> when 'true' ->
		    %% Line 1112
		    case Def of
		      <{'object',_cor38,Fields}> when 'true' ->
			  %% Line 1113
			  case _cor1 of
			    <[NextField|RestFieldNames]> when 'true' ->
				%% Line 1114
				case call 'lists':'keyfind'
					 (NextField, 1, Fields) of
				  <{_cor39,Typedef}>
				      when call 'erlang':'=:='
					    (_cor39,
					     NextField) ->
				      %% Line 1115
				      apply 'enc_obj'/4
					  (_cor3, Typedef, RestFieldNames, _cor0)
				  ( <_cor11> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor11})
				    -| ['compiler_generated'] )
				end
			    ( <_cor10> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor10})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor9> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor9})
			-| ['compiler_generated'] )
		    end
		( <_cor12> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor12})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1117
	  <{'Externaltypereference',_cor40,Mod,Type}> when 'true' ->
	      let <Func> =
		  %% Line 1118
		  apply 'enc_func'/1
		      (Type)
	      in  %% Line 1119
		  case call 'erlang':'get'
			   ('currmod') of
		    %% Line 1120
		    <_cor41>
			when call 'erlang':'=:='
			      (_cor41,
			       Mod) ->
			%% Line 1121
			[{'apply',{'local',Func,_cor2},[{'var',[86|[97|[108]]]}]}|[]]
		    %% Line 1122
		    <_cor42> when 'true' ->
			%% Line 1123
			[{'apply',{Mod,Func,_cor2},[{'var',[86|[97|[108]]]}]}|[]]
		  end
	  ( <_cor15> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor15})
	    -| ['compiler_generated'] )
	end
'gen_dec_components_call'/6 =
    %% Line 1128
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Erule,TopType,{Root,ExtList},%% Line 1129
					DecInfObj,%% Line 1129
						  Ext,%% Line 1129
						      NumberOfOptionals> when 'true' ->
	      %% Line 1130
	      apply 'gen_dec_components_call'/6
		  (Erule, TopType, {Root,ExtList,[]}, %% Line 1131
						      DecInfObj, %% Line 1131
								 Ext, %% Line 1131
								      NumberOfOptionals)
	  %% Line 1132
	  <Erule,TopType,CL = {Root1,ExtList,Root2},%% Line 1133
						    DecInfObj,%% Line 1133
							      Ext,%% Line 1133
								  NumberOfOptionals> when 'true' ->
	      let <_cor6> =
		  %% Line 1135
		  call 'erlang':'++'
		      (Root1, Root2)
	      in  let <OptTable> =
		      %% Line 1135
		      apply 'create_optionality_table'/1
			  (_cor6)
		  in  let <_cor10> =
			  %% Line 1136
			  ( fun (_cor8) ->
				{[],[]}
			    -| [{'id',{0,0,'-gen_dec_components_call/6-fun-0-'}}] )
		      in  let <Init> = {%% Line 1136
			       'ignore',_cor10}
			  in  let <_cor12> =
				  %% Line 1138
				  call 'erlang':'++'
				      (Root1, Root2)
			      in  %% Line 1137
				  case %% Line 1138
				       apply 'gen_dec_comp_calls'/9
					   (_cor12, Erule, TopType, OptTable, %% Line 1139
									      DecInfObj, %% Line 1139
											 'noext', %% Line 1139
												  NumberOfOptionals, %% Line 1140
														     1, %% Line 1140
															[]) of
				    <{EmitRoot,Tpos}> when 'true' ->
					let <EmitGetExt> =
					    %% Line 1141
					    apply 'gen_dec_get_extension'/1
						(Erule)
					in  %% Line 1142
					    case apply 'extgroup_pos_and_length'/1
						     (CL) of
					      <{'extgrouppos',ExtGroupPosLen}> when 'true' ->
						  let <NewExtList> =
						      %% Line 1143
						      apply 'wrap_extensionAdditionGroups'/2
							  (ExtList, ExtGroupPosLen)
						  in  %% Line 1144
						      case apply 'gen_dec_comp_calls'/9
							       (NewExtList, Erule, TopType, OptTable, %% Line 1145
												      DecInfObj, %% Line 1145
														 Ext, %% Line 1145
														      NumberOfOptionals, %% Line 1146
																	 Tpos, %% Line 1146
																	       []) of
							<{EmitExts,_cor38}> when 'true' ->
							    let <NumExtsToSkip> =
								%% Line 1147
								apply 'ext_length'/1
								    (ExtList)
							    in  let <Finish> =
								    %% Line 1149
								    ( fun (_cor20) ->
									  do  %% Line 1150
									      call 'asn1ct_gen':'emit'
										  ([{'next','bytes'}|[[61|[32]]]])
									      let <_cor19> =
										  %% Line 1152
										  call 'erlang':'+'
										      (NumExtsToSkip, 1)
									      in  do  %% Line 1151
										      call 'asn1ct_func':'call'
											  (Erule, 'skipextensions', %% Line 1152
														    [{'curr','bytes'}|[_cor19|[[69|[120|[116|[101|[110|[115|[105|[111|[110|[115]]]]]]]]]]]]])
										      do  %% Line 1153
											  call 'asn1ct_name':'new'
											      ('bytes')
											  _cor20
								      -| [{'id',{0,0,'-gen_dec_components_call/6-fun-1-'}}] )
								in  let <_cor23> =
									%% Line 1156
									[EmitGetExt|call 'erlang':'++'
											(EmitExts, [Finish|[]])]
								    in  let <_cor24> =
									    %% Line 1156
									    call 'erlang':'++'
										(EmitRoot, _cor23)
									in  %% Line 1156
									    [Init|_cor24]
							( <_cor17> when 'true' ->
							      primop 'match_fail'
								  ({'badmatch',_cor17})
							  -| ['compiler_generated'] )
						      end
					      ( <_cor15> when 'true' ->
						    primop 'match_fail'
							({'badmatch',_cor15})
						-| ['compiler_generated'] )
					    end
				    ( <_cor13> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor13})
				      -| ['compiler_generated'] )
				  end
	  %% Line 1157
	  <Erule,TopType,CompList,DecInfObj,%% Line 1158
					    Ext,%% Line 1158
						NumberOfOptionals> when 'true' ->
	      let <OptTable> =
		  %% Line 1160
		  apply 'create_optionality_table'/1
		      (CompList)
	      in  let <_cor28> =
		      %% Line 1161
		      ( fun (_cor26) ->
			    {[],[]}
			-| [{'id',{0,0,'-gen_dec_components_call/6-fun-2-'}}] )
		  in  let <Init> = {%% Line 1161
			   'ignore',_cor28}
		      in  %% Line 1162
			  case apply 'gen_dec_comp_calls'/9
				   (CompList, Erule, TopType, OptTable, %% Line 1163
									DecInfObj, %% Line 1163
										   Ext, %% Line 1163
											NumberOfOptionals, %% Line 1164
													   1, %% Line 1164
													      []) of
			    <{Cs,_cor40}> when 'true' ->
				%% Line 1165
				[Init|Cs]
			    ( <_cor30> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor30})
			      -| ['compiler_generated'] )
			  end
	end
'gen_dec_get_extension'/1 =
    %% Line 1167
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 1168
	    apply 'is_aligned'/1
		(_cor0)
	in  let <Imm0> =
		%% Line 1168
		call 'asn1ct_imm':'per_dec_extension_map'
		    (_cor1)
	    in  let <E> =
		    %% Line 1169
		    ( fun (_cor7,_cor6) ->
			  do  %% Line 1170
			      call 'asn1ct_gen':'emit'
				  (['nl'|[[37|[37|[32|[69|[120|[116|[101|[110|[115|[105|[111|[110|[115]]]]]]]]]]]]]|['nl'|[[123|[69|[120|[116|[101|[110|[115|[105|[111|[110|[115|[44]]]]]]]]]]]]|[{'next','bytes'}|[[125|[32|[61|[32]]]]|[[99|[97|[115|[101|[32|[69|[120|[116|[32|[111|[102]]]]]]]]]]]|['nl'|[[48|[32|[45|[62|[32|[123|[60|[60|[62|[62|[44]]]]]]]]]]]|[{'curr','bytes'}|[[125|[59]]|['nl'|[[49|[32|[45|[62]]]]|['nl']]]]]]]]]]]]]])
			      let <_cor3> =
				  %% Line 1176
				  call 'asn1ct_name':'curr'
				      ('bytes')
			      in  let <BytesVar> =
				      %% Line 1176
				      call 'asn1ct_gen':'mk_var'
					  (_cor3)
				  in  %% Line 1177
				      case call 'asn1ct_imm':'dec_slim_cg'
					       (_cor7, BytesVar) of
					<{Dst,DstBuf}> when 'true' ->
					    do  %% Line 1178
						call 'asn1ct_gen':'emit'
						    (['com'|['nl'|%% Line 1179
								  [[123]|[Dst|[[44]|[DstBuf|[[125]|['nl'|[[101|[110|[100]]]]]]]]]]]])
						do  %% Line 1181
						    call 'asn1ct_name':'new'
							('bytes')
						    _cor6
					( <_cor5> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_cor5})
					  -| ['compiler_generated'] )
				      end
		      -| [{'id',{0,0,'-gen_dec_get_extension/1-fun-0-'}}] )
		in  %% Line 1184
		    {'imm',Imm0,E}
'gen_dec_comp_calls'/9 =
    %% Line 1186
    fun (_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[C|Cs],Erule,TopType,OptTable,DecInfObj,%% Line 1187
						   Ext,%% Line 1187
						       NumberOfOptionals,%% Line 1187
									 Tpos,%% Line 1187
									      Acc> when 'true' ->
	      let <L> =
		  %% Line 1188
		  apply 'gen_dec_comp_call'/8
		      (C, Erule, TopType, Tpos, OptTable, DecInfObj, %% Line 1189
								     Ext, %% Line 1189
									  NumberOfOptionals)
	      in  let <_cor10> =
		      %% Line 1191
		      call 'erlang':'+'
			  (Tpos, 1)
		  in  %% Line 1190
		      apply 'gen_dec_comp_calls'/9
			  (Cs, Erule, TopType, OptTable, DecInfObj, %% Line 1191
								    Ext, %% Line 1191
									 NumberOfOptionals, _cor10, %% Line 1191
												    [L|Acc])
	  %% Line 1192
	  <[],_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,Tpos,Acc> when 'true' ->
	      let <_cor11> =
		  %% Line 1193
		  call 'lists':'reverse'
		      (Acc)
	      in  let <_cor12> =
		      %% Line 1193
		      call 'lists':'append'
			  (_cor11)
		  in  %% Line 1193
		      {_cor12,Tpos}
	  ( <_cor21,_cor20,_cor19,_cor18,_cor17,_cor16,_cor15,_cor14,_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor21,_cor20,_cor19,_cor18,_cor17,_cor16,_cor15,_cor14,_cor13})
		  -| [{'function_name',{'gen_dec_comp_calls',9}}] )
	    -| ['compiler_generated'] )
	end
'gen_dec_comp_call'/8 =
    %% Line 1195
    fun (_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1197
	case _cor7 of
	  <{'ComponentType',_cor53,_cor54,Type,Prop,_cor55,TextPos}> when 'true' ->
	      let <_cor11> =
		  %% Line 1198
		  case _cor1 of
		    %% Line 1199
		    <'noext'> when 'true' ->
			_cor4
		    %% Line 1200
		    <{'ext',Epos,_X_Enum}> when 'true' ->
			let <_cor9> =
			    call 'erlang':'-'
				(_cor4, Epos)
			in  call 'erlang':'+'
				(_cor9, 1)
		    ( <_cor10> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor10})
		      -| ['compiler_generated'] )
		  end
	      in  %% Line 1203
		  ( case Type of
		      ( <( {'type',_cor56,_rec29,_cor57,_cor58,_cor59}
			   -| ['compiler_generated'] )> when 'true' ->
			    let <_cor16> =
				case _rec29 of
				  %% Line 1204
				  <{'ObjectClassFieldType',_cor61,_cor62,_cor63,InType}> when 'true' ->
				      %% Line 1205
				      InType
				  %% Line 1206
				  <Def> when 'true' ->
				      %% Line 1207
				      call 'asn1ct_gen':'get_inner'
					  (Def)
				end
			    in  let <_cor19> =
				    %% Line 1210
				    case _cor16 of
				      %% Line 1211
				      <{'Externaltypereference',_cor64,_cor65,T}> when 'true' ->
					  T
				      %% Line 1212
				      <IT>
					  when call 'erlang':'is_tuple'
						(_cor16) ->
					  call 'erlang':'element'
					      (2, IT)
				      %% Line 1213
				      <_cor66> when 'true' ->
					  _cor16
				    end
				in  let <Comment> =
					%% Line 1215
					( fun (_cor21) ->
					      do  %% Line 1216
						  call 'asn1ct_gen':'emit'
						      (['nl'|[[37|[37|[32|[97|[116|[116|[114|[105|[98|[117|[116|[101|[32|[110|[117|[109|[98|[101|[114|[32]]]]]]]]]]]]]]]]]]]]|[TextPos|%% Line 1217
																						       [[32|[119|[105|[116|[104|[32|[116|[121|[112|[101|[32]]]]]]]]]]]|[_cor19|['nl']]]]]])
						  _cor21
					  -| [{'id',{0,0,'-gen_dec_comp_call/8-fun-0-'}}] )
				    in  let <_cor24> =
					    %% Line 1222
					    apply 'is_mandatory_predef_tab_c'/3
						(_cor1, Prop, _cor2)
					in  let <_cor33> =
						%% Line 1222
						case <_cor16,_cor24> of
						  %% Line 1223
						  <{'typefield',_cor67},'true'> when 'true' ->
						      %% Line 1227
						      ( fun (_cor25) ->
							    do  %% Line 1228
								call 'asn1ct_name':'new'
								    ('term')
								do  %% Line 1229
								    call 'asn1ct_name':'new'
									('tmpterm')
								    do  %% Line 1230
									call 'asn1ct_gen':'emit'
									    ([[123]|[{'curr','tmpterm'}|[[44|[32]]|[{'next','bytes'}|[[125|[32|[61|[32]]]]]]]]])
									_cor25
							-| [{'id',{0,0,'-gen_dec_comp_call/8-fun-1-'}}] )
						  %% Line 1233
						  <_fol322,_fol323> when 'true' ->
						      %% Line 1234
						      case <_cor56,_rec29,_cor57,_cor58,_cor59> of
							%% Line 1235
							<_cor69,{'SEQUENCE',_cor70,_cor71,%% Line 1236
											  Number1,%% Line 1237
												  ExtGroupCompList1},_cor72,_cor73,_cor74>
							    when %% Line 1237
							      call 'erlang':'is_integer'
								  (Number1) ->
							    %% Line 1238
							    ( fun (_cor27) ->
								  do  %% Line 1239
								      call 'asn1ct_gen':'emit'
									  ([[123|[123|[95|[44]]]]])
								      do  %% Line 1240
									  apply 'emit_extaddgroupTerms'/2
									      ('term', ExtGroupCompList1)
									  do  %% Line 1241
									      call 'asn1ct_gen':'emit'
										  ([[125]])
									      do  %% Line 1242
										  call 'asn1ct_gen':'emit'
										      ([[44]|[{'next','bytes'}|[[125|[32|[61|[32]]]]]]])
										  _cor27
							      -| [{'id',{0,0,'-gen_dec_comp_call/8-fun-2-'}}] )
							%% Line 1245
							<_fol331,_fol332,_fol333,_fol334,_fol335> when 'true' ->
							    %% Line 1246
							    ( fun (_cor29) ->
								  do  %% Line 1247
								      call 'asn1ct_name':'new'
									  ('term')
								      do  %% Line 1248
									  call 'asn1ct_gen':'emit'
									      ([[123]|[{'curr','term'}]])
									  do  %% Line 1249
									      call 'asn1ct_gen':'emit'
										  ([[44]|[{'next','bytes'}|[[125|[32|[61|[32]]]]]]])
									      _cor29
							      -| [{'id',{0,0,'-gen_dec_comp_call/8-fun-3-'}}] )
						      end
						end
					    in  %% Line 1254
						case apply 'comp_call_pre_post'/8
							 (_cor1, Prop, _cor11, Type, TextPos, _cor3, _cor0, _cor1) of
						  <{Pre,Post}> when 'true' ->
						      let <Lines> =
							  %% Line 1256
							  apply 'gen_dec_seq_line_imm'/6
							      (_cor6, _cor5, _cor7, _cor4, _cor2, _cor1)
						      in  let <_cor39> =
							      %% Line 1257
							      ( fun (_cor37) ->
								    do  %% Line 1258
									call 'asn1ct_name':'new'
									    ('bytes')
									_cor37
								-| [{'id',{0,0,'-gen_dec_comp_call/8-fun-4-'}}] )
							  in  let <AdvBuffer> = {%% Line 1257
								   'ignore',_cor39}
							      in  let <_cor41> =
								      %% Line 1262
								      call 'erlang':'++'
									  (Post, [{'safe',AdvBuffer}|[]])
								  in  let <_cor42> =
									  %% Line 1262
									  call 'erlang':'++'
									      (Lines, _cor41)
								      in  let <_cor43> =
									      %% Line 1261
									      call 'erlang':'++'
										  (Pre, _cor42)
									  in  let <_cor44> =
										  %% Line 1261
										  [{'safe',Comment}|[{'safe',_cor33}|_cor43]]
									      in  %% Line 1261
										  [{'group',_cor44}|%% Line 1262
												    []]
						  ( <_cor35> when 'true' ->
							primop 'match_fail'
							    ({'badmatch',_cor35})
						    -| ['compiler_generated'] )
						end
			-| ['compiler_generated'] )
		      ( <_cor60> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','type'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  ( <_cor8> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor8})
	    -| ['compiler_generated'] )
	end
'comp_call_pre_post'/8 =
    %% Line 1264
    fun (_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <'noext','mandatory',_cor34,_cor35,_cor36,_cor37,_cor38,_cor39> when 'true' ->
	      %% Line 1265
	      {[],[]}
	  %% Line 1266
	  <'noext',Prop,_cor40,Type,TextPos,%% Line 1267
					    OptTable,%% Line 1267
						     NumOptionals,%% Line 1267
								  Ext> when 'true' ->
	      let <OptPos> =
		  %% Line 1269
		  apply 'get_optionality_pos'/2
		      (TextPos, OptTable)
	      in  let <_cor10> =
		      %% Line 1270
		      case call 'erlang':'-'
			       (NumOptionals, OptPos) of
			%% Line 1271
			<0> when 'true' ->
			    %% Line 1272
			    [79|[112|[116|[32|[98|[97|[110|[100|[32|[49]]]]]]]]]]
			%% Line 1273
			<Shift> when 'true' ->
			    %% Line 1274
			    call 'lists':'concat'
				([[40|[79|[112|[116|[32|[98|[115|[114|[32]]]]]]]]]|[Shift|[[41|[32|[98|[97|[110|[100|[32|[49]]]]]]]]]]])
		      end
		  in  let <_cor17> =
			  %% Line 1276
			  ( fun (_cor15) ->
				do  %% Line 1277
				    call 'asn1ct_gen':'emit'
					([[99|[97|[115|[101|[32]]]]]|[_cor10|[[32|[111|[102]]]|['nl'|[[49|[32|[45|[62]]]]|['nl']]]]]])
				    _cor15
			    -| [{'id',{0,0,'-comp_call_pre_post/8-fun-0-'}}] )
		      in  let <_cor14> =
			      %% Line 1281
			      ( fun (_cor12) ->
				    do  %% Line 1282
					call 'asn1ct_gen':'emit'
					    ([[59]|['nl'|[[48|[32|[45|[62]]]]|['nl'|[[123]]]]]])
					do  %% Line 1285
					    apply 'gen_dec_component_no_val'/3
						(Ext, Type, Prop)
					    do  %% Line 1286
						call 'asn1ct_gen':'emit'
						    ([[44]|[{'curr','bytes'}|[[125]|['nl'|[[101|[110|[100]]]]]]]])
						_cor12
				-| [{'id',{0,0,'-comp_call_pre_post/8-fun-1-'}}] )
			  in  %% Line 1276
			      {[_cor17|%% Line 1280
				       []],%% Line 1281
					   [_cor14|%% Line 1289
						   []]}
	  %% Line 1290
	  <{'ext',_cor41,_cor42},Prop,Pos,Type,_cor43,_cor44,_cor45,Ext> when 'true' ->
	      let <_cor25> =
		  %% Line 1292
		  ( fun (_cor23) ->
			let <_cor22> =
			    %% Line 1294
			    call 'erlang':'-'
				(Pos, 1)
			in  do  %% Line 1293
				call 'asn1ct_gen':'emit'
				    ([[99|[97|[115|[101|[32|[69|[120|[116|[101|[110|[115|[105|[111|[110|[115|[32|[111|[102]]]]]]]]]]]]]]]]]]|['nl'|%% Line 1294
																		   [[32|[32|[60|[60|[95|[58]]]]]]|[_cor22|[[44|[49|[58|[49|[44|[95|[47|[98|[105|[116|[115|[116|[114|[105|[110|[103|[62|[62|[32|[45|[62]]]]]]]]]]]]]]]]]]]]]|['nl']]]]]])
				_cor23
		    -| [{'id',{0,0,'-comp_call_pre_post/8-fun-2-'}}] )
	      in  let <_cor21> =
		      %% Line 1297
		      ( fun (_cor19) ->
			    do  %% Line 1298
				call 'asn1ct_gen':'emit'
				    ([[59]|['nl'|[[95|[32|[32|[45|[62]]]]]|['nl'|[[123]]]]]])
				do  %% Line 1301
				    case Type of
				      %% Line 1302
				      <{'type',_cor46,{'SEQUENCE',_cor47,_cor48,%% Line 1303
										Number2,%% Line 1304
											ExtGroupCompList2},_cor49,_cor50,_cor51}>
					  when %% Line 1305
					    call 'erlang':'is_integer'
						(Number2) ->
					  do  %% Line 1306
					      call 'asn1ct_gen':'emit'
						  ([123|[101|[120|[116|[65|[100|[100|[71|[114|[111|[117|[112|[44]]]]]]]]]]]]])
					      do  %% Line 1307
						  apply 'gen_dec_extaddGroup_no_val'/3
						      (Ext, Type, ExtGroupCompList2)
						  %% Line 1308
						  call 'asn1ct_gen':'emit'
						      ([125])
				      %% Line 1309
				      <_cor52> when 'true' ->
					  %% Line 1310
					  apply 'gen_dec_component_no_val'/3
					      (Ext, Type, Prop)
				    end
				    do  %% Line 1312
					call 'asn1ct_gen':'emit'
					    ([[44]|[{'curr','bytes'}|[[125]|['nl'|[[101|[110|[100]]]]]]]])
					_cor19
			-| [{'id',{0,0,'-comp_call_pre_post/8-fun-3-'}}] )
		  in  %% Line 1292
		      {[_cor25|%% Line 1296
			       []],%% Line 1297
				   [_cor21|%% Line 1315
					   []]}
	  ( <_cor33,_cor32,_cor31,_cor30,_cor29,_cor28,_cor27,_cor26> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor33,_cor32,_cor31,_cor30,_cor29,_cor28,_cor27,_cor26})
		  -| [{'function_name',{'comp_call_pre_post',8}}] )
	    -| ['compiler_generated'] )
	end
'is_mandatory_predef_tab_c'/3 =
    %% Line 1317
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'noext','mandatory',%% Line 1318
			       {[103|[111|[116|[32|[111|[98|[106|[102|[117|[110|[32|[116|[104|[114|[111|[117|[103|[104|[32|[97|[114|[103|[115]]]]]]]]]]]]]]]]]]]]]]],[79|[98|[106|[70|[117|[110]]]]]]}> when 'true' ->
	      %% Line 1319
	      'true'
	  %% Line 1320
	  <_cor6,_cor7,{[103|[111|[116|[32|[111|[98|[106|[102|[117|[110|[32|[116|[104|[114|[111|[117|[103|[104|[32|[97|[114|[103|[115]]]]]]]]]]]]]]]]]]]]]]],[79|[98|[106|[70|[117|[110]]]]]]}> when 'true' ->
	      %% Line 1321
	      'false'
	  %% Line 1322
	  <_cor8,_cor9,_cor10> when 'true' ->
	      %% Line 1323
	      'true'
	end
'gen_dec_extaddGroup_no_val'/3 =
    %% Line 1325
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Ext,Type,[{'ComponentType',_cor6,_cor7,_cor8,Prop,_cor9,_cor10}|[]]> when 'true' ->
	      do  %% Line 1326
		  apply 'gen_dec_component_no_val'/3
		      (Ext, Type, Prop)
		  %% Line 1327
		  'ok'
	  %% Line 1328
	  <Ext,Type,[{'ComponentType',_cor11,_cor12,_cor13,Prop,_cor14,_cor15}|Rest]> when 'true' ->
	      do  %% Line 1329
		  apply 'gen_dec_component_no_val'/3
		      (Ext, Type, Prop)
		  do  %% Line 1330
		      call 'asn1ct_gen':'emit'
			  ([44])
		      %% Line 1331
		      apply 'gen_dec_extaddGroup_no_val'/3
			  (Ext, Type, Rest)
	  %% Line 1332
	  <_cor16,_cor17,[]> when 'true' ->
	      %% Line 1333
	      'ok'
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'gen_dec_extaddGroup_no_val',3}}] )
	    -| ['compiler_generated'] )
	end
'gen_dec_component_no_val'/3 =
    %% Line 1335
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <_cor7,Type,{'DEFAULT',DefVal0}> when 'true' ->
	      let <DefVal> =
		  %% Line 1336
		  call 'asn1ct_gen':'conform_value'
		      (Type, DefVal0)
	      in  %% Line 1337
		  call 'asn1ct_gen':'emit'
		      ([{'asis',DefVal}|[]])
	  %% Line 1338
	  <_cor8,_cor9,'OPTIONAL'> when 'true' ->
	      %% Line 1339
	      call 'asn1ct_gen':'emit'
		  ({[97|[115|[110|[49|[95|[78|[79|[86|[65|[76|[85|[69]]]]]]]]]]]]})
	  %% Line 1340
	  <{'ext',_cor10,_cor11},_cor12,'mandatory'> when 'true' ->
	      %% Line 1341
	      call 'asn1ct_gen':'emit'
		  ({[97|[115|[110|[49|[95|[78|[79|[86|[65|[76|[85|[69]]]]]]]]]]]]})
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'gen_dec_component_no_val',3}}] )
	    -| ['compiler_generated'] )
	end
'gen_dec_choice_line'/4 =
    %% Line 1344
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <Imm0> =
	    %% Line 1345
	    apply 'gen_dec_line_imm'/5
		(_cor3, _cor2, _cor1, 'false', _cor0)
	in  let <_cor7> =
		%% Line 1346
		( fun (_cor5) ->
		      {[],[]}
		  -| [{'id',{0,0,'-gen_dec_choice_line/4-fun-0-'}}] )
	    in  let <Init> = {%% Line 1346
		     'ignore',_cor7}
		in  let <Imm> =
			%% Line 1347
			[{'group',[Init|Imm0]}|[]]
		    in  %% Line 1348
			apply 'emit_gen_dec_imm'/1
			    (Imm)
'gen_dec_seq_line_imm'/6 =
    %% Line 1350
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <Pre> =
	    %% Line 1351
	    apply 'gen_dec_line_open_type'/3
		(_cor5, _cor0, _cor2)
	in  %% Line 1352
	    apply 'gen_dec_line_imm'/5
		(_cor5, _cor4, _cor3, _cor1, Pre)
'gen_dec_line_imm'/5 =
    %% Line 1354
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1355
	case _cor2 of
	  <{'ComponentType',_cor31,Cname,Type,_cor32,_cor33,_cor34}> when 'true' ->
	      let <_cor9> =
		  %% Line 1357
		  case Type of
		    %% Line 1358
		    <{'type',_cor35,{'ObjectClassFieldType',_cor36,_cor37,_cor38,InnerType},_cor39,_cor40,_cor41}> when 'true' ->
			%% Line 1359
			InnerType
		    %% Line 1360
		    <_cor42> when 'true' ->
			%% Line 1361
			( case Type of
			    ( <( {'type',_cor43,_rec30,_cor44,_cor45,_cor46}
				 -| ['compiler_generated'] )> when 'true' ->
				  call 'asn1ct_gen':'get_inner'
				      (_rec30)
			      -| ['compiler_generated'] )
			    ( <_cor47> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','type'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		  end
	      in  let <Decode> =
		      %% Line 1363
		      apply 'gen_dec_line_special'/5
			  (_cor4, _cor9, _cor3, _cor2, _cor1)
		  in  let <Post> =
			  %% Line 1365
			  ( fun (_cor23) ->
				case _cor23 of
				  <{SaveBytes,Finish}> when 'true' ->
				      %% Line 1366
				      case apply Finish
					       () of
					<{AccTerm,AccBytes}> when 'true' ->
					    %% Line 1367
					    case <_cor31,Cname,Type,_cor32,_cor33,_cor34> of
					      <_cor48,_cor49,_cor50,_cor51,_cor52,_cor53>
						  when call 'erlang':'=:='
							(_cor49,
							 Cname) ->
						  %% Line 1368
						  case _cor1 of
						    %% Line 1369
						    <{_cor54,ObjSet}>
							when call 'erlang':'=:='
							      (_cor54,
							       Cname) ->
							let <_cor15> =
							    %% Line 1371
							    case ObjSet of
							      %% Line 1372
							      <{'deep',OSName,_cor55,_cor56}> when 'true' ->
								  %% Line 1373
								  OSName
							      %% Line 1374
							      <_cor57> when 'true' ->
								  ObjSet
							    end
							in  let <_cor18> =
								%% Line 1377
								call 'asn1ct_name':'curr'
								    ('term')
							    in  let <_cor19> =
								    %% Line 1377
								    call 'asn1ct_gen':'mk_var'
									(_cor18)
								in  let <_cor20> =
									%% Line 1376
									call 'erlang':'++'
									    (AccTerm, [{_cor15,Cname,_cor19}|%% Line 1377
													     []])
								    in  let <_cor17> =
									    %% Line 1378
									    call 'erlang':'++'
										(AccBytes, SaveBytes)
									in  %% Line 1376
									    {_cor20,_cor17}
						    %% Line 1379
						    <_cor58> when 'true' ->
							let <_cor21> =
							    %% Line 1380
							    call 'erlang':'++'
								(AccBytes, SaveBytes)
							in  %% Line 1380
							    {AccTerm,_cor21}
						  end
					      ( <_fol360,_fol361,_fol362,_fol363,_fol364,_fol365> when 'true' ->
						    let <_cor13> =
							( {'ComponentType',_fol360,_fol361,_fol362,_fol363,_fol364,_fol365}
							  -| ['compiler_generated'] )
						    in  primop 'match_fail'
							    ({'badmatch',_cor13})
						-| ['compiler_generated'] )
					    end
					( <_cor12> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_cor12})
					  -| ['compiler_generated'] )
				      end
				  ( <_cor24> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor24})
					  -| [{'function_name',{'-gen_dec_line_imm/5-fun-0-',1}}] )
				    -| ['compiler_generated'] )
				end
			    -| [{'id',{0,0,'-gen_dec_line_imm/5-fun-0-'}}] )
		      in  %% Line 1383
			  [_cor0|[Decode|[{'safe',Post}|[]]]]
	  ( <_cor5> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor5})
	    -| ['compiler_generated'] )
	end
'gen_dec_line_open_type'/3 =
    %% Line 1385
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Erule,{'ext',Ep,_cor21},Pos>
	      when call 'erlang':'>='
		    (Pos,
		     Ep) ->
	      let <_cor3> =
		  %% Line 1386
		  apply 'is_aligned'/1
		      (Erule)
	      in  let <Imm> =
		      %% Line 1386
		      call 'asn1ct_imm':'per_dec_open_type'
			  (_cor3)
		  in  let <_cor11> =
			  %% Line 1387
			  ( fun (_cor9) ->
				do  %% Line 1388
				    call 'asn1ct_gen':'emit'
					([[98|[101|[103|[105|[110]]]]]|['nl']])
				    let <_cor5> =
					%% Line 1389
					call 'asn1ct_name':'curr'
					    ('bytes')
				    in  let <BytesVar> =
					    %% Line 1389
					    call 'asn1ct_gen':'mk_var'
						(_cor5)
					in  %% Line 1390
					    case call 'asn1ct_imm':'dec_slim_cg'
						     (Imm, BytesVar) of
					      <{Dst,DstBuf}> when 'true' ->
						  do  %% Line 1391
						      call 'asn1ct_gen':'emit'
							  ([[44]|['nl'|[[123|[84|[109|[112|[86|[97|[108|[120]]]]]]]]|[Pos|[[44|[95|[125|[32|[61|[32]]]]]]]]]]])
						      let <_cor8> =
							  %% Line 1393
							  ( fun () ->
								do  %% Line 1394
								    call 'asn1ct_gen':'emit'
									([[44]|['nl'|%% Line 1395
										     [[123|[84|[109|[112|[86|[97|[108|[120]]]]]]]]|[Pos|[[44]|[DstBuf|[[125]|['nl'|[[101|[110|[100]]]]]]]]]]]])
								    _cor9
							    -| [{'id',{0,0,'-gen_dec_line_open_type/3-fun-0-'}}] )
						      in  %% Line 1392
							  {Dst,_cor8}
					      ( <_cor7> when 'true' ->
						    primop 'match_fail'
							({'badmatch',_cor7})
						-| ['compiler_generated'] )
					    end
			    -| [{'id',{0,0,'-gen_dec_line_open_type/3-fun-1-'}}] )
		      in  %% Line 1387
			  {'safe',_cor11}
	  %% Line 1400
	  <_cor22,_cor23,_cor24> when 'true' ->
	      let <_cor17> =
		  %% Line 1401
		  ( fun (_cor15) ->
			let <_cor13> =
			    %% Line 1402
			    call 'asn1ct_name':'curr'
				('bytes')
			in  let <_cor14> =
				%% Line 1402
				call 'asn1ct_gen':'mk_var'
				    (_cor13)
			    in  let <_cor12> =
				    %% Line 1403
				    ( fun () ->
					  _cor15
				      -| [{'id',{0,0,'-gen_dec_line_open_type/3-fun-2-'}}] )
				in  %% Line 1402
				    {_cor14,_cor12}
		    -| [{'id',{0,0,'-gen_dec_line_open_type/3-fun-3-'}}] )
	      in  %% Line 1401
		  {'safe',_cor17}
	end
'gen_dec_line_special'/5 =
    %% Line 1406
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Erule,{'typefield',_cor60},_X_TopType,Comp,%% Line 1407
						      DecInfObj> when 'true' ->
	      %% Line 1408
	      case Comp of
		<{'ComponentType',_cor61,Cname,Type,Prop,_cor62,_cor63}> when 'true' ->
		    %% Line 1409
		    ( fun (_cor45) ->
			  case _cor45 of
			    <{_X_BytesVar,PrevSt}> when 'true' ->
				%% Line 1410
				case DecInfObj of
				  %% Line 1411
				  <'false'> when 'true' ->
				      %% Line 1413
				      ( case Type of
					  ( <( {'type',_cor64,_rec32,_cor65,_cor66,_cor67}
					       -| ['compiler_generated'] )> when 'true' ->
						( case _rec32 of
						    ( <( {'ObjectClassFieldType',_cor69,_cor70,_rec31,_cor71}
							 -| ['compiler_generated'] )> when 'true' ->
							  case _rec31 of
							    <{Name,RestFieldNames}> when 'true' ->
								let <_cor11> =
								    %% Line 1414
								    apply 'is_aligned'/1
									(Erule)
								in  let <Imm> =
									%% Line 1414
									call 'asn1ct_imm':'per_dec_open_type'
									    (_cor11)
								    in  let <_cor13> =
									    %% Line 1415
									    call 'asn1ct_name':'curr'
										('bytes')
									in  let <BytesVar> =
										%% Line 1415
										call 'asn1ct_gen':'mk_var'
										    (_cor13)
									    in  %% Line 1416
										case call 'asn1ct_imm':'dec_slim_cg'
											 (Imm, BytesVar) of
										  <{TmpTerm,TempBuf}> when 'true' ->
										      do  %% Line 1417
											  call 'asn1ct_gen':'emit'
											      (['com'|['nl']])
											  %% Line 1420
											  case <_cor64,_cor69,_cor70,Name,RestFieldNames,_cor71,_cor65,_cor66,_cor67> of
											    <_cor73,_fol380,_fol381,_fol389,_fol390,_fol383,_cor75,[{'objfun',{'Externaltypereference',_cor76,Xmod,Xtype}}|[]],_cor77> when 'true' ->
												do  %% Line 1422
												    apply 'gen_dec_open_type'/5
													(Erule, [79|[98|[106|[70|[117|[110]]]]]], {Xmod,Xtype}, %% Line 1423
																				'_', %% Line 1423
																				     {'_',{Name,RestFieldNames},%% Line 1424
																								'Result',%% Line 1424
																									 TmpTerm,%% Line 1424
																										 'mandatory'})
												    do  %% Line 1425
													call 'asn1ct_gen':'emit'
													    (['com'|['nl'|%% Line 1426
															  [[123]|[{'asis',Cname}|[[44|[123|[82|[101|[115|[117|[108|[116|[44]]]]]]]]]|[TempBuf|[[125|[125]]]]]]]]])
													%% Line 1427
													{[],PrevSt}
											    ( <_fol374,_fol385,_fol386,_fol391,_fol392,_fol388,_fol376,_fol377,_fol378> when 'true' ->
												  let <_fol387> = {_fol391,_fol392}
												  in  let <_fol375> =
													  ( {'ObjectClassFieldType',_fol385,_fol386,_fol387,_fol388}
													    -| ['compiler_generated'] )
												      in  let <_cor16> =
													      ( {'type',_fol374,_fol375,_fol376,_fol377,_fol378}
														-| ['compiler_generated'] )
													  in  primop 'match_fail'
														  ({'badmatch',_cor16})
											      -| ['compiler_generated'] )
											  end
										  ( <_cor15> when 'true' ->
											primop 'match_fail'
											    ({'badmatch',_cor15})
										    -| ['compiler_generated'] )
										end
							    ( <_cor10> when 'true' ->
								  primop 'match_fail'
								      ({'badmatch',_cor10})
							      -| ['compiler_generated'] )
							  end
						      -| ['compiler_generated'] )
						    ( <_cor72> when 'true' ->
							  ( call ( 'erlang'
								   -| ['compiler_generated'] ):( 'error'
												 -| ['compiler_generated'] )
								(( {'badrecord','ObjectClassFieldType'}
								   -| ['compiler_generated'] ))
							    -| ['compiler_generated'] )
						      -| ['compiler_generated'] )
						  end
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					  ( <_cor68> when 'true' ->
						( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'error'
										       -| ['compiler_generated'] )
						      (( {'badrecord','type'}
							 -| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					end
					-| ['compiler_generated'] )
				  %% Line 1428
				  <{[103|[111|[116|[32|[111|[98|[106|[102|[117|[110|[32|[116|[104|[114|[111|[117|[103|[104|[32|[97|[114|[103|[115]]]]]]]]]]]]]]]]]]]]]]],[79|[98|[106|[70|[117|[110]]]]]]}> when 'true' ->
				      do  %% Line 1432
					  case <> of
					    %% Line 1433
					    <>
						when call 'erlang':'=:='
						      (Prop,
						       'mandatory') ->
						'ok'
					    %% Line 1435
					    <> when 'true' ->
						do  %% Line 1436
						    call 'asn1ct_name':'new'
							('tmpterm')
						    do  %% Line 1437
							call 'asn1ct_name':'new'
							    ('tmpbytes')
							%% Line 1438
							call 'asn1ct_gen':'emit'
							    (['nl'|[[32|[32|[32|[32|[123]]]]]|[{'curr','tmpterm'}|[[44|[32]]|[{'curr','tmpbytes'}|[[125|[32|[61]]]]]]]]])
					  end
					  %% Line 1441
					  ( case Type of
					      ( <( {'type',_cor78,_rec34,_cor79,_cor80,_cor81}
						   -| ['compiler_generated'] )> when 'true' ->
						    ( case _rec34 of
							( <( {'ObjectClassFieldType',_cor83,_cor84,_rec33,_cor85}
							     -| ['compiler_generated'] )> when 'true' ->
							      case _rec33 of
								<{Name,RestFieldNames}> when 'true' ->
								    let <_cor22> =
									%% Line 1442
									apply 'is_aligned'/1
									    (Erule)
								    in  let <Imm> =
									    %% Line 1442
									    call 'asn1ct_imm':'per_dec_open_type'
										(_cor22)
									in  let <_cor24> =
										%% Line 1443
										call 'asn1ct_name':'curr'
										    ('bytes')
									    in  let <BytesVar> =
										    %% Line 1443
										    call 'asn1ct_gen':'mk_var'
											(_cor24)
										in  do  %% Line 1444
											call 'asn1ct_imm':'dec_code_gen'
											    (Imm, BytesVar)
											do  %% Line 1445
											    call 'asn1ct_gen':'emit'
												(['com'|['nl']])
											    %% Line 1448
											    case <_cor78,_cor83,_cor84,Name,RestFieldNames,_cor85,_cor79,_cor80,_cor81> of
											      <_cor87,_fol400,_fol401,_fol409,_fol410,_fol403,_cor89,[{'objfun',{'Externaltypereference',_cor90,Xmod,Xtype}}|[]],_cor91> when 'true' ->
												  let <_cor27> =
												      %% Line 1450
												      call 'asn1ct_name':'curr'
													  ('term')
												  in  let <Term> =
													  %% Line 1450
													  call 'asn1ct_gen':'mk_var'
													      (_cor27)
												      in  let <_cor29> =
													      %% Line 1451
													      call 'asn1ct_name':'curr'
														  ('tmpterm')
													  in  let <TmpTerm> =
														  %% Line 1451
														  call 'asn1ct_gen':'mk_var'
														      (_cor29)
													      in  do  %% Line 1452
														      case <> of
															%% Line 1453
															<>
															    when call 'erlang':'=:='
																  (Prop,
																   'mandatory') ->
															    %% Line 1454
															    apply 'gen_dec_open_type'/5
																(Erule, [79|[98|[106|[70|[117|[110]]]]]], {Xmod,Xtype}, %% Line 1455
																							'_', %% Line 1455
																							     {'_',{Name,RestFieldNames},%% Line 1456
																											Term,%% Line 1456
																											     TmpTerm,%% Line 1456
																												     Prop})
															%% Line 1457
															<> when 'true' ->
															    do  %% Line 1458
																call 'asn1ct_gen':'emit'
																    ([[32|[32|[32|[32|[32|[123]]]]]]])
																do  %% Line 1459
																    apply 'gen_dec_open_type'/5
																	(Erule, [79|[98|[106|[70|[117|[110]]]]]], {Xmod,Xtype}, %% Line 1460
																								'_', %% Line 1460
																								     {'_',{Name,RestFieldNames},%% Line 1461
																												'_',%% Line 1461
																												    TmpTerm,%% Line 1461
																													    Prop})
																    %% Line 1462
																    call 'asn1ct_gen':'emit'
																	([[44]|['nl'|[{'curr','tmpbytes'}|[[125]]]]])
														      end
														      %% Line 1464
														      {[],PrevSt}
											      ( <_fol394,_fol405,_fol406,_fol411,_fol412,_fol408,_fol396,_fol397,_fol398> when 'true' ->
												    let <_fol407> = {_fol411,_fol412}
												    in  let <_fol395> =
													    ( {'ObjectClassFieldType',_fol405,_fol406,_fol407,_fol408}
													      -| ['compiler_generated'] )
													in  let <_cor26> =
														( {'type',_fol394,_fol395,_fol396,_fol397,_fol398}
														  -| ['compiler_generated'] )
													    in  primop 'match_fail'
														    ({'badmatch',_cor26})
												-| ['compiler_generated'] )
											    end
								( <_cor21> when 'true' ->
								      primop 'match_fail'
									  ({'badmatch',_cor21})
								  -| ['compiler_generated'] )
							      end
							  -| ['compiler_generated'] )
							( <_cor86> when 'true' ->
							      ( call ( 'erlang'
								       -| ['compiler_generated'] ):( 'error'
												     -| ['compiler_generated'] )
								    (( {'badrecord','ObjectClassFieldType'}
								       -| ['compiler_generated'] ))
								-| ['compiler_generated'] )
							  -| ['compiler_generated'] )
						      end
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					      ( <_cor82> when 'true' ->
						    ( call ( 'erlang'
							     -| ['compiler_generated'] ):( 'error'
											   -| ['compiler_generated'] )
							  (( {'badrecord','type'}
							     -| ['compiler_generated'] ))
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					    end
					    -| ['compiler_generated'] )
				  %% Line 1465
				  <_cor92> when 'true' ->
				      let <_cor31> =
					  %% Line 1466
					  apply 'is_aligned'/1
					      (Erule)
				      in  let <Imm> =
					      %% Line 1466
					      call 'asn1ct_imm':'per_dec_open_type'
						  (_cor31)
					  in  let <_cor33> =
						  %% Line 1467
						  call 'asn1ct_name':'curr'
						      ('bytes')
					      in  let <BytesVar> =
						      %% Line 1467
						      call 'asn1ct_gen':'mk_var'
							  (_cor33)
						  in  do  %% Line 1468
							  call 'asn1ct_imm':'dec_code_gen'
							      (Imm, BytesVar)
							  %% Line 1470
							  ( case Type of
							      ( <( {'type',_cor93,_rec36,_cor94,_cor95,_cor96}
								   -| ['compiler_generated'] )> when 'true' ->
								    ( case _rec36 of
									( <( {'ObjectClassFieldType',_cor98,_cor99,_rec35,_cor100}
									     -| ['compiler_generated'] )> when 'true' ->
									      let <_cor42> =
										  %% Line 1473
										  call 'asn1ct_name':'curr'
										      ('term')
									      in  let <_cor43> =
										      %% Line 1473
										      call 'asn1ct_gen':'mk_var'
											  (_cor42)
										  in  let <_cor40> =
											  %% Line 1474
											  call 'asn1ct_name':'curr'
											      ('tmpterm')
										      in  let <_cor41> =
											      %% Line 1474
											      call 'asn1ct_gen':'mk_var'
												  (_cor40)
											  in  %% Line 1472
											      {[{Cname,_rec35,_cor43,_cor41,%% Line 1475
															    Prop}|%% Line 1475
																  []],%% Line 1475
																      PrevSt}
									  -| ['compiler_generated'] )
									( <_cor101> when 'true' ->
									      ( call ( 'erlang'
										       -| ['compiler_generated'] ):( 'error'
														     -| ['compiler_generated'] )
										    (( {'badrecord','ObjectClassFieldType'}
										       -| ['compiler_generated'] ))
										-| ['compiler_generated'] )
									  -| ['compiler_generated'] )
								      end
								      -| ['compiler_generated'] )
								-| ['compiler_generated'] )
							      ( <_cor97> when 'true' ->
								    ( call ( 'erlang'
									     -| ['compiler_generated'] ):( 'error'
													   -| ['compiler_generated'] )
									  (( {'badrecord','type'}
									     -| ['compiler_generated'] ))
								      -| ['compiler_generated'] )
								-| ['compiler_generated'] )
							    end
							    -| ['compiler_generated'] )
				end
			    ( <_cor46> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor46})
				    -| [{'function_name',{'-gen_dec_line_special/5-fun-0-',1}}] )
			      -| ['compiler_generated'] )
			  end
		      -| [{'id',{0,0,'-gen_dec_line_special/5-fun-0-'}}] )
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1478
	  <Erule,Atype,TopType,Comp,DecInfObj> when 'true' ->
	      %% Line 1479
	      case apply 'gen_dec_line_other'/4
		       (Erule, Atype, TopType, Comp) of
		%% Line 1480
		<Fun>
		    when call 'erlang':'is_function'
			  (Fun,
			   1) ->
		    %% Line 1481
		    ( fun (_cor47) ->
			  case _cor47 of
			    <{BytesVar,PrevSt}> when 'true' ->
				do  %% Line 1482
				    apply Fun
					(BytesVar)
				    do  %% Line 1483
					apply 'gen_dec_line_dec_inf'/2
					    (Comp, DecInfObj)
					%% Line 1484
					{[],PrevSt}
			    ( <_cor48> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor48})
				    -| [{'function_name',{'-gen_dec_line_special/5-fun-1-',1}}] )
			      -| ['compiler_generated'] )
			  end
		      -| [{'id',{0,0,'-gen_dec_line_special/5-fun-1-'}}] )
		%% Line 1486
		<Imm0> when 'true' ->
		    let <_cor53> =
			%% Line 1488
			( fun (_cor50,_cor49) ->
			      case <_cor50,_cor49> of
				<Imm,{BytesVar,PrevSt}> when 'true' ->
				    do  %% Line 1489
					call 'asn1ct_imm':'dec_code_gen'
					    (Imm, BytesVar)
					do  %% Line 1490
					    apply 'gen_dec_line_dec_inf'/2
						(Comp, DecInfObj)
					    %% Line 1491
					    {[],PrevSt}
				( <_cor52,_cor51> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_cor52,_cor51})
					-| [{'function_name',{'-gen_dec_line_special/5-fun-2-',2}}] )
				  -| ['compiler_generated'] )
			      end
			  -| [{'id',{0,0,'-gen_dec_line_special/5-fun-2-'}}] )
		    in  %% Line 1487
			{'imm',Imm0,_cor53}
	      end
	end
'gen_dec_line_dec_inf'/2 =
    %% Line 1495
    fun (_cor1,_cor0) ->
	%% Line 1496
	case _cor1 of
	  <{'ComponentType',_cor9,Cname,_cor10,_cor11,_cor12,_cor13}> when 'true' ->
	      %% Line 1497
	      case _cor0 of
		%% Line 1498
		<{_cor14,{_cor15,_X_OSet,_X_UniqueFName,ValIndex}}>
		    when call 'erlang':'=:='
			  (_cor14,
			   Cname) ->
		    let <_cor3> =
			%% Line 1499
			call 'asn1ct_name':'curr'
			    ('term')
		    in  let <Term> =
			    %% Line 1499
			    call 'asn1ct_gen':'mk_var'
				(_cor3)
			in  let <ValueMatch> =
				%% Line 1500
				apply 'value_match'/2
				    (ValIndex, Term)
			    in  %% Line 1501
				call 'asn1ct_gen':'emit'
				    ([[44]|['nl'|%% Line 1502
						 [[79|[98|[106|[70|[117|[110|[32|[61|[32]]]]]]]]]|[ValueMatch|[]]]]])
		%% Line 1503
		<_cor16> when 'true' ->
		    %% Line 1504
		    'ok'
	      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'gen_dec_line_other'/4 =
    %% Line 1507
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1508
	case _cor0 of
	  <{'ComponentType',_cor25,Cname,Type,_cor26,_cor27,_cor28}> when 'true' ->
	      %% Line 1509
	      case call 'asn1ct_gen':'type'
		       (_cor2) of
		%% Line 1510
		<Etype = {'Externaltypereference',_cor29,_cor30,_cor31}> when 'true' ->
		    %% Line 1511
		    ( fun (_cor5) ->
			  %% Line 1512
			  call 'asn1ct_gen_per':'gen_dec_external'
			      (Etype, _cor5)
		      -| [{'id',{0,0,'-gen_dec_line_other/4-fun-0-'}}] )
		%% Line 1514
		<{'primitive','bif'}> when 'true' ->
		    %% Line 1515
		    call 'asn1ct_gen_per':'gen_dec_imm'
			(_cor3, Type)
		%% Line 1516
		<'ASN1_OPEN_TYPE'> when 'true' ->
		    %% Line 1517
		    ( case Type of
			( <( {'type',_cor32,_rec37,_cor33,_cor34,_cor35}
			     -| ['compiler_generated'] )> when 'true' ->
			      case _rec37 of
				%% Line 1518
				<{'ObjectClassFieldType',_cor37,_cor38,_cor39,OpenType}> when 'true' ->
				    %% Line 1519
				    call 'asn1ct_gen_per':'gen_dec_imm'
					(_cor3, {'type',[],OpenType,[],[],'no'})
				%% Line 1520
				<_cor40> when 'true' ->
				    %% Line 1521
				    call 'asn1ct_gen_per':'gen_dec_imm'
					(_cor3, Type)
			      end
			  -| ['compiler_generated'] )
			( <_cor36> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','type'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		%% Line 1523
		<{'constructed','bif'}> when 'true' ->
		    let <NewTypename> =
			%% Line 1524
			[Cname|_cor1]
		    in  %% Line 1525
			( case Type of
			    ( <( {'type',_cor41,_cor42,_cor43,_rec38,_cor44}
				 -| ['compiler_generated'] )> when 'true' ->
				  case _rec38 of
				    %% Line 1526
				    <[{'objfun',_cor46}|_X_R]> when 'true' ->
					%% Line 1527
					( fun (_cor14) ->
					      let <_cor13> =
						  %% Line 1528
						  call 'asn1ct_gen':'list2name'
						      (NewTypename)
					      in  %% Line 1528
						  call 'asn1ct_gen':'emit'
						      ({[39|[100|[101|[99|[95]]]]],_cor13,%% Line 1529
											  [39|[40]],_cor14,%% Line 1529
													   [44|[32|[79|[98|[106|[70|[117|[110|[41]]]]]]]]]})
					  -| [{'id',{0,0,'-gen_dec_line_other/4-fun-1-'}}] )
				    %% Line 1531
				    <_cor47> when 'true' ->
					%% Line 1532
					( fun (_cor17) ->
					      let <_cor16> =
						  %% Line 1533
						  call 'asn1ct_gen':'list2name'
						      (NewTypename)
					      in  %% Line 1533
						  call 'asn1ct_gen':'emit'
						      ({[39|[100|[101|[99|[95]]]]],_cor16,%% Line 1534
											  [39|[40]],_cor17,%% Line 1534
													   [41]})
					  -| [{'id',{0,0,'-gen_dec_line_other/4-fun-2-'}}] )
				  end
			      -| ['compiler_generated'] )
			    ( <_cor45> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','type'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		( <_cor20> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor20})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor4})
	    -| ['compiler_generated'] )
	end
'gen_enc_choice'/4 =
    %% Line 1539
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Erule,TopType,{Root,Exts},Ext> when 'true' ->
	      let <Constr> =
		  %% Line 1540
		  apply 'choice_constraint'/1
		      (Root)
	      in  let <_cor6> =
		      %% Line 1541
		      apply 'gen_enc_choices'/6
			  (Root, Erule, TopType, 0, Constr, Ext)
		  in  let <_cor5> =
			  %% Line 1542
			  apply 'gen_enc_choices'/6
			      (Exts, Erule, TopType, 0, 'ext', Ext)
		      in  %% Line 1541
			  call 'erlang':'++'
			      (_cor6, _cor5)
	  %% Line 1543
	  <Erule,TopType,{Root,Exts,[]},Ext> when 'true' ->
	      %% Line 1544
	      apply 'gen_enc_choice'/4
		  (Erule, TopType, {Root,Exts}, Ext)
	  %% Line 1545
	  <Erule,TopType,Root,Ext>
	      when call 'erlang':'is_list'
		    (Root) ->
	      let <Constr> =
		  %% Line 1546
		  apply 'choice_constraint'/1
		      (Root)
	      in  %% Line 1547
		  apply 'gen_enc_choices'/6
		      (Root, Erule, TopType, 0, Constr, Ext)
	  ( <_cor11,_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9,_cor8})
		  -| [{'function_name',{'gen_enc_choice',4}}] )
	    -| ['compiler_generated'] )
	end
'choice_constraint'/1 =
    %% Line 1549
    fun (_cor0) ->
	%% Line 1550
	case call 'erlang':'length'
		 (_cor0) of
	  %% Line 1551
	  <0> when 'true' ->
	      [{'SingleValue',0}]
	  %% Line 1552
	  <Len> when 'true' ->
	      let <_cor1> =
		  call 'erlang':'-'
		      (Len, 1)
	      in  [{'ValueRange',{0,_cor1}}|[]]
	end
'gen_enc_choices'/6 =
    %% Line 1555
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[H|T],Erule,TopType,Pos,Constr,Ext> when 'true' ->
	      %% Line 1556
	      case H of
		<{'ComponentType',_cor34,Cname,Type,_cor35,_cor36,_cor37}> when 'true' ->
		    let <Aligned> =
			%% Line 1557
			apply 'is_aligned'/1
			    (Erule)
		    in  %% Line 1559
			( case Type of
			    ( <( {'type',_cor38,_cor39,_rec39,_cor40,_cor41}
				 -| ['compiler_generated'] )> when 'true' ->
				  let <_cor14> =
				      case call 'asn1ct_gen':'get_constraint'
					       (_rec39, %% Line 1560
							'componentrelation') of
					%% Line 1561
					<'no'> when 'true' ->
					    %% Line 1562
					    case _cor40 of
					      %% Line 1563
					      <[{'objfun',_cor48}|_cor49]> when 'true' ->
						  %% Line 1564
						  {[103|[111|[116|[32|[111|[98|[106|[102|[117|[110|[32|[116|[104|[114|[111|[117|[103|[104|[32|[97|[114|[103|[115]]]]]]]]]]]]]]]]]]]]]]],{'var',[79|[98|[106|[70|[117|[110]]]]]]}}
					      %% Line 1565
					      <_cor50> when 'true' ->
						  %% Line 1566
						  'false'
					    end
					%% Line 1568
					<_cor51> when 'true' ->
					    %% Line 1569
					    {'no_attr',{'var',[79|[98|[106|[70|[117|[110]]]]]]}}
				      end
				  in  let <_cor17> =
					  %% Line 1571
					  case Constr of
					    %% Line 1572
					    <'ext'> when 'true' ->
						Ext
					    %% Line 1573
					    <_cor52> when 'true' ->
						'noext'
					  end
				      in  let <_cor22> =
					      %% Line 1575
					      case <Ext,Constr> of
						%% Line 1576
						<'noext',_cor53> when 'true' ->
						    %% Line 1577
						    call 'asn1ct_imm':'per_enc_integer'
							(Pos, Constr, Aligned)
						%% Line 1578
						<{'ext',_cor54,_cor55},'ext'> when 'true' ->
						    let <_cor19> =
							%% Line 1580
							call 'asn1ct_imm':'per_enc_small_number'
							    (Pos, Aligned)
						    in  %% Line 1579
							[{'put_bits',1,1,[1]}|_cor19]
						%% Line 1581
						<{'ext',_cor56,_cor57},_cor58> when 'true' ->
						    let <_cor20> =
							%% Line 1583
							call 'asn1ct_imm':'per_enc_integer'
							    (Pos, Constr, Aligned)
						    in  %% Line 1582
							[{'put_bits',0,1,[1]}|_cor20]
						( <_fol423,_fol424> when 'true' ->
						      let <_cor21> = {_fol423,_fol424}
						      in  primop 'match_fail'
							      ({'case_clause',_cor21})
						  -| ['compiler_generated'] )
					      end
					  in  let <Body> =
						  %% Line 1585
						  apply 'gen_enc_line_imm'/7
						      (Erule, TopType, Cname, Type, {'var',[67|[104|[111|[105|[99|[101|[86|[97|[108]]]]]]]]]}, _cor14, _cor17)
					      in  let <Imm> =
						      %% Line 1587
						      call 'erlang':'++'
							  (_cor22, Body)
						  in  let <_cor26> =
							  %% Line 1588
							  call 'erlang':'+'
							      (Pos, 1)
						      in  let <_cor27> =
							      %% Line 1588
							      apply 'gen_enc_choices'/6
								  (T, Erule, TopType, _cor26, Constr, Ext)
							  in  %% Line 1588
							      [{Cname,Imm}|_cor27]
			      -| ['compiler_generated'] )
			    ( <_cor42> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','type'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor6})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1589
	  <[],_cor59,_cor60,_cor61,_cor62,_cor63> when 'true' ->
	      []
	  ( <_cor33,_cor32,_cor31,_cor30,_cor29,_cor28> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor33,_cor32,_cor31,_cor30,_cor29,_cor28})
		  -| [{'function_name',{'gen_enc_choices',6}}] )
	    -| ['compiler_generated'] )
	end
'gen_dec_choice'/4 =
    %% Line 1620
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Erule,TopType,CompList,Ext = {'ext',_cor10,_cor11}> when 'true' ->
	      %% Line 1621
	      case apply 'split_complist'/1
		       (CompList) of
		<{RootList,ExtList}> when 'true' ->
		    do  %% Line 1622
			call 'asn1ct_gen':'emit'
			    ([[99|[97|[115|[101|[32|[66|[121|[116|[101|[115|[32|[111|[102]]]]]]]]]]]]]|['nl']])
			do  %% Line 1623
			    case RootList of
			      %% Line 1624
			      <[]> when 'true' ->
				  'ok'
			      %% Line 1626
			      <[_cor12|_cor13]> when 'true' ->
				  do  %% Line 1627
				      call 'asn1ct_gen':'emit'
					  ([[60|[60|[48|[58|[49|[44|[66|[121|[116|[101|[115|[49|[47|[98|[105|[116|[115|[116|[114|[105|[110|[103|[62|[62|[32|[45|[62]]]]]]]]]]]]]]]]]]]]]]]]]]]|['nl']])
				      do  %% Line 1628
					  call 'asn1ct_name':'new'
					      ('bytes')
					  do  %% Line 1629
					      apply 'gen_dec_choice1'/4
						  (Erule, TopType, RootList, 'noext')
					      %% Line 1630
					      call 'asn1ct_gen':'emit'
						  ([[59]|['nl'|['nl']]])
			      ( <_cor5> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor5})
				-| ['compiler_generated'] )
			    end
			    do  %% Line 1632
				call 'asn1ct_gen':'emit'
				    ([[60|[60|[49|[58|[49|[44|[66|[121|[116|[101|[115|[49|[47|[98|[105|[116|[115|[116|[114|[105|[110|[103|[62|[62|[32|[45|[62]]]]]]]]]]]]]]]]]]]]]]]]]]]|['nl']])
				do  %% Line 1633
				    call 'asn1ct_name':'clear'
					()
				    do  %% Line 1634
					call 'asn1ct_name':'new'
					    ('bytes')
					do  %% Line 1635
					    call 'asn1ct_name':'new'
						('bytes')
					    do  %% Line 1636
						apply 'gen_dec_choice1'/4
						    (Erule, TopType, ExtList, Ext)
						%% Line 1637
						call 'asn1ct_gen':'emit'
						    (['nl'|[[101|[110|[100]]]]])
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1638
	  <Erule,TopType,CompList,'noext'> when 'true' ->
	      %% Line 1639
	      apply 'gen_dec_choice1'/4
		  (Erule, TopType, CompList, 'noext')
	  ( <_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'gen_dec_choice',4}}] )
	    -| ['compiler_generated'] )
	end
'split_complist'/1 =
    %% Line 1641
    fun (_cor0) ->
	case _cor0 of
	  <{Root1,Ext,Root2}> when 'true' ->
	      let <_cor1> =
		  %% Line 1642
		  call 'erlang':'++'
		      (Root1, Root2)
	      in  %% Line 1642
		  {_cor1,Ext}
	  %% Line 1643
	  <CompList = {_cor3,_cor4}> when 'true' ->
	      %% Line 1644
	      CompList
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'split_complist',1}}] )
	    -| ['compiler_generated'] )
	end
'gen_dec_choice1'/4 =
    %% Line 1646
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Erule,TopType,CompList,Ext = 'noext'> when 'true' ->
	      do  %% Line 1647
		  apply 'emit_getchoice'/3
		      (Erule, CompList, Ext)
		  do  %% Line 1648
		      call 'asn1ct_gen':'emit'
			  ([[99|[97|[115|[101|[32|[67|[104|[111|[105|[99|[101|[32|[111|[102]]]]]]]]]]]]]]|['nl']])
		      let <_cor9> =
			  %% Line 1649
			  ( fun (_cor7) ->
				let <_cor5> =
				    %% Line 1650
				    call 'asn1ct_name':'curr'
					('bytes')
				in  let <_cor6> =
					%% Line 1650
					call 'asn1ct_gen':'mk_var'
					    (_cor5)
				    in  let <_cor4> =
					    %% Line 1651
					    ( fun () ->
						  _cor7
					      -| [{'id',{0,0,'-gen_dec_choice1/4-fun-0-'}}] )
					in  %% Line 1650
					    {_cor6,_cor4}
			    -| [{'id',{0,0,'-gen_dec_choice1/4-fun-1-'}}] )
		      in  let <Pre> = {%% Line 1649
			       'safe',_cor9}
			  in  do  %% Line 1653
				  apply 'gen_dec_choice2'/4
				      (Erule, TopType, CompList, Pre)
				  %% Line 1654
				  call 'asn1ct_gen':'emit'
				      (['nl'|[[101|[110|[100]]]]])
	  %% Line 1655
	  <Erule,TopType,CompList,Ext = {'ext',_cor26,_cor27}> when 'true' ->
	      do  %% Line 1656
		  apply 'emit_getchoice'/3
		      (Erule, CompList, Ext)
		  let <_cor11> =
		      %% Line 1657
		      apply 'is_aligned'/1
			  (Erule)
		  in  let <Imm> =
			  %% Line 1657
			  call 'asn1ct_imm':'per_dec_open_type'
			      (_cor11)
		      in  do  %% Line 1658
			      call 'asn1ct_gen':'emit'
				  ([[98|[101|[103|[105|[110]]]]]|['nl']])
			      let <_cor13> =
				  %% Line 1659
				  call 'asn1ct_name':'curr'
				      ('bytes')
			      in  let <BytesVar> =
				      %% Line 1659
				      call 'asn1ct_gen':'mk_var'
					  (_cor13)
				  in  %% Line 1660
				      case call 'asn1ct_imm':'dec_slim_cg'
					       (Imm, BytesVar) of
					<{Dst,DstBuf}> when 'true' ->
					    do  %% Line 1661
						call 'asn1ct_gen':'emit'
						    (['nl'|[[101|[110|[100|[44]]]]|['nl'|[[99|[97|[115|[101|[32|[67|[104|[111|[105|[99|[101|[32|[111|[102]]]]]]]]]]]]]]|['nl']]]]])
						let <_cor19> =
						    %% Line 1664
						    ( fun (_cor17) ->
							  do  %% Line 1665
							      call 'asn1ct_gen':'emit'
								  ([[123|[84|[109|[112|[86|[97|[108|[44|[95|[125|[32|[61|[32]]]]]]]]]]]]]])
							      let <_cor16> =
								  %% Line 1667
								  ( fun () ->
									do  %% Line 1668
									    call 'asn1ct_gen':'emit'
										([[44]|['nl'|%% Line 1669
											     [[123|[84|[109|[112|[86|[97|[108|[44]]]]]]]]|[DstBuf|[[125]]]]]])
									    _cor17
								    -| [{'id',{0,0,'-gen_dec_choice1/4-fun-2-'}}] )
							      in  %% Line 1666
								  {Dst,_cor16}
						      -| [{'id',{0,0,'-gen_dec_choice1/4-fun-3-'}}] )
						in  let <Pre> = {%% Line 1664
							 'safe',_cor19}
						    in  do  %% Line 1673
							    apply 'gen_dec_choice2'/4
								(Erule, TopType, CompList, Pre)
							    do  %% Line 1674
								case CompList of
								  %% Line 1675
								  <[]> when 'true' ->
								      'ok'
								  %% Line 1676
								  <[_cor28|_cor29]> when 'true' ->
								      call 'asn1ct_gen':'emit'
									  ([[59]|['nl']])
								  ( <_cor21> when 'true' ->
									primop 'match_fail'
									    ({'case_clause',_cor21})
								    -| ['compiler_generated'] )
								end
								%% Line 1678
								call 'asn1ct_gen':'emit'
								    ([[95|[32|[45|[62]]]]|['nl'|%% Line 1679
												[[123|[123|[97|[115|[110|[49|[95|[69|[120|[116|[65|[108|[116|[44]]]]]]]]]]]]]]|[Dst|[[125|[44]]|[DstBuf|[[125]|['nl'|[[101|[110|[100]]]]]]]]]]]])
					( <_cor15> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_cor15})
					  -| ['compiler_generated'] )
				      end
	  ( <_cor25,_cor24,_cor23,_cor22> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor25,_cor24,_cor23,_cor22})
		  -| [{'function_name',{'gen_dec_choice1',4}}] )
	    -| ['compiler_generated'] )
	end
'emit_getchoice'/3 =
    %% Line 1682
    fun (_cor2,_cor1,_cor0) ->
	let <Al> =
	    %% Line 1683
	    apply 'is_aligned'/1
		(_cor2)
	in  let <_cor7> =
		%% Line 1684
		case <_cor0,_cor1> of
		  %% Line 1685
		  <'noext',[_cor14|[]]> when 'true' ->
		      %% Line 1686
		      {'value',0}
		  %% Line 1687
		  <'noext',_cor15> when 'true' ->
		      let <_cor4> =
			  %% Line 1688
			  call 'erlang':'length'
			      (_cor1)
		      in  let <_cor5> =
			      %% Line 1688
			      call 'erlang':'-'
				  (_cor4, 1)
			  in  %% Line 1688
			      call 'asn1ct_imm':'per_dec_constrained'
				  (0, _cor5, Al)
		  %% Line 1689
		  <{'ext',_cor16,_cor17},_cor18> when 'true' ->
		      %% Line 1690
		      call 'asn1ct_imm':'per_dec_normally_small_number'
			  (Al)
		  ( <_fol438,_fol439> when 'true' ->
			let <_cor6> = {_fol438,_fol439}
			in  primop 'match_fail'
				({'case_clause',_cor6})
		    -| ['compiler_generated'] )
		end
	    in  do  %% Line 1692
		    call 'asn1ct_gen':'emit'
			([[123|[67|[104|[111|[105|[99|[101|[44]]]]]]]]|[{'curr','bytes'}|[[125|[32|[61|[32]]]]|['nl']]]])
		    let <_cor9> =
			%% Line 1693
			call 'asn1ct_name':'prev'
			    ('bytes')
		    in  let <BytesVar> =
			    %% Line 1693
			    call 'asn1ct_gen':'mk_var'
				(_cor9)
			in  do  %% Line 1694
				call 'asn1ct_imm':'dec_code_gen'
				    (_cor7, BytesVar)
				%% Line 1695
				call 'asn1ct_gen':'emit'
				    (['com'|['nl']])
'gen_dec_choice2'/4 =
    %% Line 1697
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1698
	apply 'gen_dec_choice2'/6
	    (_cor3, _cor2, _cor1, 0, [], _cor0)
'gen_dec_choice2'/6 =
    %% Line 1700
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Erule,TopType,[H0|T],Pos,Sep0,Pre> when 'true' ->
	      %% Line 1701
	      case H0 of
		<{'ComponentType',_cor22,Cname,Type,_cor23,_cor24,_cor25}> when 'true' ->
		    let <_cor9> =
			%% Line 1702
			call 'erlang':'setelement'
			    (5, H0, 'mandatory')
		    in  do  %% Line 1703
			    call 'asn1ct_gen':'emit'
				([Sep0|[Pos|[[32|[45|[62]]]|['nl']]]])
			    %% Line 1704
			    ( case Type of
				( <( {'type',_cor33,_rec42,_cor34,_cor35,_cor36}
				     -| ['compiler_generated'] )> when 'true' ->
				      do  case _rec42 of
					    %% Line 1705
					    <{'ObjectClassFieldType',_cor38,_cor39,_cor40,{'typefield',_cor41}}> when 'true' ->
						do  %% Line 1706
						    call 'asn1ct_gen':'emit'
							([123|[67|[110|[97|[109|[101|[44|[123|[86|[97|[108|[44|[78|[101|[119|[66|[121|[116|[101|[115|[125|[125|[32|[61|[32|[98|[101|[103|[105|[110|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
						    do  %% Line 1707
							apply 'gen_dec_choice_line'/4
							    (Erule, TopType, _cor9, Pre)
							%% Line 1708
							call 'asn1ct_gen':'emit'
							    (['nl'|[[101|[110|[100|[44]]]]|['nl'|[[123|[123|[67|[110|[97|[109|[101|[44|[86|[97|[108|[125|[44|[78|[101|[119|[66|[121|[116|[101|[115|[125]]]]]]]]]]]]]]]]]]]]]]]]]])
					    %% Line 1711
					    <_cor42> when 'true' ->
						do  %% Line 1712
						    call 'asn1ct_gen':'emit'
							([123|[86|[97|[108|[44|[78|[101|[119|[66|[121|[116|[101|[115|[125|[32|[61|[32|[98|[101|[103|[105|[110|[10]]]]]]]]]]]]]]]]]]]]]]])
						    do  %% Line 1713
							apply 'gen_dec_choice_line'/4
							    (Erule, TopType, _cor9, Pre)
							%% Line 1714
							call 'asn1ct_gen':'emit'
							    (['nl'|%% Line 1715
								   [[101|[110|[100|[44]]]]|['nl'|%% Line 1716
												 [[123|[123]]|[{'asis',Cname}|[[44|[86|[97|[108|[125|[44|[78|[101|[119|[66|[121|[116|[101|[115|[125]]]]]]]]]]]]]]]]]]]]])
					  end
					  let <_cor15> =
					      %% Line 1719
					      call 'erlang':'+'
						  (Pos, 1)
					  in  %% Line 1719
					      apply 'gen_dec_choice2'/6
						  (Erule, TopType, T, _cor15, [[59]|['nl']], Pre)
				  -| ['compiler_generated'] )
				( <_cor37> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {'badrecord','type'}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor6})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1720
	  <_cor43,_cor44,[],_cor45,_cor46,_cor47> when 'true' ->
	      'ok'
	  ( <_cor21,_cor20,_cor19,_cor18,_cor17,_cor16> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor21,_cor20,_cor19,_cor18,_cor17,_cor16})
		  -| [{'function_name',{'gen_dec_choice2',6}}] )
	    -| ['compiler_generated'] )
	end
'make_elements'/3 =
    %% Line 1722
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1723
	apply 'make_elements'/4
	    (_cor2, _cor1, _cor0, [])
'make_elements'/4 =
    %% Line 1725
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <I,Val,[_X_ExtCname|[]],Acc> when 'true' ->
	      let <Element> =
		  %% Line 1726
		  apply 'make_element'/2
		      (I, Val)
	      in  let <_cor5> =
		      %% Line 1727
		      call 'erlang':'+'
			  (I, 1)
		  in  %% Line 1727
		      apply 'make_elements'/4
			  (_cor5, Val, [], [Element|Acc])
	  %% Line 1728
	  <I,Val,[_X_ExtCname|Rest],Acc> when 'true' ->
	      let <Element> =
		  %% Line 1729
		  apply 'make_element'/2
		      (I, Val)
	      in  let <_cor7> =
		      %% Line 1730
		      call 'erlang':'+'
			  (I, 1)
		  in  %% Line 1730
		      apply 'make_elements'/4
			  (_cor7, Val, Rest, [[44|[32]]|[Element|Acc]])
	  %% Line 1731
	  <_X_I,_cor12,[],Acc> when 'true' ->
	      %% Line 1732
	      call 'lists':'reverse'
		  (Acc)
	  ( <_cor11,_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9,_cor8})
		  -| [{'function_name',{'make_elements',4}}] )
	    -| ['compiler_generated'] )
	end
'make_element'/2 =
    %% Line 1734
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 1735
	    call 'io_lib':'format'
		([101|[108|[101|[109|[101|[110|[116|[40|[126|[119|[44|[32|[126|[115|[41]]]]]]]]]]]]]]], [_cor1|[_cor0|[]]])
	in  %% Line 1735
	    call 'lists':'flatten'
		(_cor2)
'emit_extaddgroupTerms'/2 =
    %% Line 1737
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <VarSeries,[_cor4|[]]> when 'true' ->
	      do  %% Line 1738
		  call 'asn1ct_name':'new'
		      (VarSeries)
		  do  %% Line 1739
		      call 'asn1ct_gen':'emit'
			  ({'curr',VarSeries})
		      %% Line 1740
		      'ok'
	  %% Line 1741
	  <VarSeries,[_cor5|Rest]> when 'true' ->
	      do  %% Line 1742
		  call 'asn1ct_name':'new'
		      (VarSeries)
		  do  %% Line 1743
		      call 'asn1ct_gen':'emit'
			  ({{'curr',VarSeries},[44]})
		      %% Line 1744
		      apply 'emit_extaddgroupTerms'/2
			  (VarSeries, Rest)
	  %% Line 1745
	  <_cor6,[]> when 'true' ->
	      %% Line 1746
	      'ok'
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'emit_extaddgroupTerms',2}}] )
	    -| ['compiler_generated'] )
	end
'flat_complist'/1 =
    %% Line 1748
    fun (_cor0) ->
	case _cor0 of
	  <{Rl1,El,Rl2}> when 'true' ->
	      let <_cor1> =
		  call 'erlang':'++'
		      (El, Rl2)
	      in  call 'erlang':'++'
		      (Rl1, _cor1)
	  %% Line 1749
	  <{Rl,El}> when 'true' ->
	      call 'erlang':'++'
		  (Rl, El)
	  %% Line 1750
	  <CompList> when 'true' ->
	      CompList
	end
'wrap_extensionAdditionGroups'/2 =
    %% Line 1763
    fun (_cor1,_cor0) ->
	%% Line 1764
	apply 'wrap_extensionAdditionGroups'/5
	    (_cor1, _cor0, [], 0, 0)
'wrap_extensionAdditionGroups'/5 =
    %% Line 1766
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[{'ExtensionAdditionGroup',_X_Number}|Rest],%% Line 1767
						       [{ActualPos,_cor26,_cor27}|ExtGroupPosLenRest],%% Line 1767
												      Acc,%% Line 1767
													  _X_ExtAddGroupDiff,%% Line 1767
															     ExtGroupNum> when 'true' ->
	      let <_cor7> =
		  %% Line 1769
		  ( fun (_cor5) ->
			case _cor5 of
			  <{'ComponentType',_cor28,_cor29,_cor30,_cor31,_cor32,_cor33}> when 'true' ->
			      'true'
			  %% Line 1770
			  <_cor34> when 'true' ->
			      'false'
			end
		    -| [{'id',{0,0,'-wrap_extensionAdditionGroups/5-fun-0-'}}] )
	      in  %% Line 1768
		  case %% Line 1769
		       call 'lists':'splitwith'
			   (_cor7, %% Line 1772
				   Rest) of
		    <{ExtGroupCompList,['ExtensionAdditionGroupEnd'|Rest2]}> when 'true' ->
			let <_cor13> =
			    %% Line 1776
			    call 'erlang':'+'
				(ExtGroupNum, 1)
			in  let <_cor14> =
				%% Line 1776
				call 'erlang':'integer_to_list'
				    (_cor13)
			    in  let <_cor15> =
				    %% Line 1775
				    call 'erlang':'++'
					([69|[120|[116|[65|[100|[100|[71|[114|[111|[117|[112]]]]]]]]]]], _cor14)
				in  let <_cor16> =
					%% Line 1775
					call 'erlang':'list_to_atom'
					    (_cor15)
				    in  let <_cor12> =
					    %% Line 1778
					    call 'erlang':'+'
						(ExtGroupNum, 1)
					in  let <_cor10> =
						%% Line 1781
						call 'erlang':'length'
						    (ExtGroupCompList)
					    in  let <_cor11> =
						    %% Line 1781
						    call 'erlang':'-'
							(_cor10, 1)
						in  let <_cor9> =
							%% Line 1782
							call 'erlang':'+'
							    (ExtGroupNum, 1)
						    in  %% Line 1773
							apply 'wrap_extensionAdditionGroups'/5
							    (Rest2, ExtGroupPosLenRest, %% Line 1774
											[{'ComponentType','undefined',_cor16,%% Line 1777
															     {'type',[],{'SEQUENCE','false','false',_cor12,%% Line 1779
																					   ExtGroupCompList},[],[],'no'},%% Line 1781
																									 'OPTIONAL','undefined',%% Line 1780
																												ActualPos}|%% Line 1781
																													   Acc], _cor11, _cor9)
		    ( <_cor8> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor8})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1783
	  <[H = {'ComponentType',_cor35,_cor36,_cor37,_cor38,_cor39,Tord}|T],%% Line 1784
									     ExtAddGrpLenPos,%% Line 1784
											     Acc,%% Line 1784
												 ExtAddGroupDiff,%% Line 1784
														 ExtGroupNum>
	      when %% Line 1784
		call 'erlang':'is_integer'
		    (Tord) ->
	      let <_rec43> =
		  %% Line 1786
		  call 'erlang':'-'
		      (Tord, ExtAddGroupDiff)
	      in  let <_cor20> =
		      %% Line 1786
		      call 'erlang':'setelement'
			  (7, H, _rec43)
		  in  %% Line 1785
		      apply 'wrap_extensionAdditionGroups'/5
			  (T, ExtAddGrpLenPos, [_cor20|%% Line 1786
						       Acc], %% Line 1786
							     ExtAddGroupDiff, %% Line 1786
									      ExtGroupNum)
	  %% Line 1787
	  <[H|T],ExtAddGrpLenPos,Acc,ExtAddGroupDiff,ExtGroupNum> when 'true' ->
	      %% Line 1788
	      apply 'wrap_extensionAdditionGroups'/5
		  (T, ExtAddGrpLenPos, [H|Acc], ExtAddGroupDiff, ExtGroupNum)
	  %% Line 1789
	  <[],_cor47,Acc,_cor48,_cor49> when 'true' ->
	      %% Line 1790
	      call 'lists':'reverse'
		  (Acc)
	  ( <_cor25,_cor24,_cor23,_cor22,_cor21> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor25,_cor24,_cor23,_cor22,_cor21})
		  -| [{'function_name',{'wrap_extensionAdditionGroups',5}}] )
	    -| ['compiler_generated'] )
	end
'value_match'/2 =
    %% Line 1792
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Index,Value>
	      when call 'erlang':'is_atom'
		    (Value) ->
	      let <_cor2> =
		  %% Line 1793
		  call 'erlang':'atom_to_list'
		      (Value)
	      in  %% Line 1793
		  apply 'value_match'/2
		      (Index, _cor2)
	  %% Line 1794
	  <[],Value> when 'true' ->
	      %% Line 1795
	      Value
	  %% Line 1796
	  <[{VI,_cor6}|VIs],Value> when 'true' ->
	      let <_cor3> =
		  %% Line 1797
		  call 'lists':'concat'
		      ([[101|[108|[101|[109|[101|[110|[116|[40]]]]]]]]|[VI|[[44]]]])
	      in  %% Line 1797
		  apply 'value_match1'/4
		      (Value, VIs, _cor3, 1)
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'value_match',2}}] )
	    -| ['compiler_generated'] )
	end
'value_match1'/4 =
    %% Line 1798
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Value,[],Acc,Depth> when 'true' ->
	      let <_cor4> =
		  %% Line 1799
		  call 'lists':'duplicate'
		      (Depth, [41])
	      in  let <_cor5> =
		      %% Line 1799
		      call 'lists':'concat'
			  (_cor4)
		  in  let <_cor6> =
			  %% Line 1799
			  call 'erlang':'++'
			      (Value, _cor5)
		      in  %% Line 1799
			  call 'erlang':'++'
			      (Acc, _cor6)
	  %% Line 1800
	  <Value,[{VI,_cor14}|VIs],Acc,Depth> when 'true' ->
	      let <_cor8> =
		  %% Line 1801
		  call 'lists':'concat'
		      ([[101|[108|[101|[109|[101|[110|[116|[40]]]]]]]]|[VI|[[44]]]])
	      in  let <_cor9> =
		      %% Line 1801
		      call 'erlang':'++'
			  (Acc, _cor8)
		  in  let <_cor7> =
			  %% Line 1801
			  call 'erlang':'+'
			      (Depth, 1)
		      in  %% Line 1801
			  apply 'value_match1'/4
			      (Value, VIs, _cor9, _cor7)
	  ( <_cor13,_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11,_cor10})
		  -| [{'function_name',{'value_match1',4}}] )
	    -| ['compiler_generated'] )
	end
'enc_dig_out_value'/2 =
    %% Line 1803
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],Value> when 'true' ->
	      %% Line 1804
	      {[],Value}
	  %% Line 1805
	  <[{N,_cor7}|T],Value> when 'true' ->
	      %% Line 1806
	      case apply 'enc_dig_out_value'/2
		       (T, Value) of
		<{Imm0,Dst0}> when 'true' ->
		    %% Line 1807
		    case call 'asn1ct_imm':'enc_element'
			     (N, Dst0) of
		      <{Imm,Dst}> when 'true' ->
			  let <_cor4> =
			      %% Line 1808
			      call 'erlang':'++'
				  (Imm0, Imm)
			  in  %% Line 1808
			      {_cor4,Dst}
		      ( <_cor3> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor3})
			-| ['compiler_generated'] )
		    end
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'enc_dig_out_value',2}}] )
	    -| ['compiler_generated'] )
	end
'make_var'/1 =
    %% Line 1810
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 1811
	    call 'asn1ct_name':'curr'
		(_cor0)
	in  let <_cor2> =
		%% Line 1811
		call 'asn1ct_gen':'mk_var'
		    (_cor1)
	    in  let <_cor3> =
		    %% Line 1811
		    call 'erlang':'atom_to_list'
			(_cor2)
		in  %% Line 1811
		    {'var',_cor3}
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('asn1ct_constructed_per')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('asn1ct_constructed_per', _cor0)
end