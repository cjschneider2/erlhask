module 'asn1ct_pretty_format' ['module_info'/0,
			       'module_info'/1,
			       'term'/1]
    attributes []
'term'/1 =
    %% Line 47
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 48
	    apply 'term'/2
		(_cor0, 0)
	in  %% Line 48
	    call 'erlang':'element'
		(2, _cor1)
'term'/2 =
    %% Line 56
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],Indent> when 'true' ->
	      %% Line 57
	      {Indent,[91|[93]]}
	  %% Line 58
	  <L,Indent>
	      when call 'erlang':'is_list'
		    (L) ->
	      %% Line 59
	      case apply 'is_string'/1
		       (L) of
		%% Line 60
		<'true'> when 'true' ->
		    let <_cor2> =
			%% Line 61
			call 'io_lib':'write_string'
			    (L)
		    in  %% Line 61
			{Indent,_cor2}
		%% Line 62
		<'false'> when 'true' ->
		    %% Line 63
		    case apply 'complex_list'/1
			     (L) of
		      %% Line 64
		      <'true'> when 'true' ->
			  %% Line 65
			  apply 'write_complex_list'/2
			      (L, Indent)
		      %% Line 66
		      <'false'> when 'true' ->
			  %% Line 67
			  apply 'write_simple_list'/2
			      (L, Indent)
		      ( <_cor3> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor3})
			-| ['compiler_generated'] )
		    end
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 70
	  <T,Indent>
	      when call 'erlang':'is_tuple'
		    (T) ->
	      %% Line 71
	      case apply 'complex_tuple'/1
		       (T) of
		%% Line 72
		<'true'> when 'true' ->
		    %% Line 73
		    apply 'write_complex_tuple'/2
			(T, Indent)
		%% Line 74
		<'false'> when 'true' ->
		    %% Line 75
		    apply 'write_simple_tuple'/2
			(T, Indent)
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 77
	  <A,Indent> when 'true' ->
	      let <_cor6> =
		  %% Line 78
		  call 'io_lib':'write'
		      (A)
	      in  %% Line 78
		  {Indent,_cor6}
	end
'write_simple_list'/2 =
    %% Line 83
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[H|T],Indent> when 'true' ->
	      %% Line 84
	      case apply 'term'/2
		       (H, Indent) of
		<{_cor6,S1}> when 'true' ->
		    %% Line 85
		    case apply 'write_simple_list_tail'/2
			     (T, Indent) of
		      <{_cor7,S2}> when 'true' ->
			  %% Line 86
			  {Indent,[91|[S1|S2]]}
		      ( <_cor3> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor3})
			-| ['compiler_generated'] )
		    end
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'write_simple_list',2}}] )
	    -| ['compiler_generated'] )
	end
'write_simple_list_tail'/2 =
    %% Line 88
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[H|T],Indent> when 'true' ->
	      %% Line 89
	      case apply 'term'/2
		       (H, Indent) of
		<{_cor7,S1}> when 'true' ->
		    %% Line 90
		    case apply 'write_simple_list_tail'/2
			     (T, Indent) of
		      <{_cor8,S2}> when 'true' ->
			  %% Line 91
			  {Indent,[44|[S1|S2]]}
		      ( <_cor3> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor3})
			-| ['compiler_generated'] )
		    end
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 92
	  <[],Indent> when 'true' ->
	      %% Line 93
	      {Indent,[93]}
	  %% Line 94
	  <Other,Indent> when 'true' ->
	      %% Line 95
	      case apply 'term'/2
		       (Other, Indent) of
		<{_cor9,S}> when 'true' ->
		    %% Line 96
		    {Indent,[124|[S|[93]]]}
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	end
'write_complex_list'/2 =
    %% Line 101
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[H|T],Indent> when 'true' ->
	      let <_cor2> =
		  %% Line 102
		  call 'erlang':'+'
		      (Indent, 1)
	      in  %% Line 102
		  case apply 'term'/2
			   (H, _cor2) of
		    <{I1,S1}> when 'true' ->
			%% Line 103
			case apply 'write_complex_list_tail'/2
				 (T, I1) of
			  <{_cor7,S2}> when 'true' ->
			      %% Line 104
			      {Indent,[91|[S1|S2]]}
			  ( <_cor4> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor4})
			    -| ['compiler_generated'] )
			end
		    ( <_cor3> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor3})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'write_complex_list',2}}] )
	    -| ['compiler_generated'] )
	end
'write_complex_list_tail'/2 =
    %% Line 106
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[H|T],Indent> when 'true' ->
	      %% Line 107
	      case apply 'term'/2
		       (H, Indent) of
		<{I1,S1}> when 'true' ->
		    %% Line 108
		    case apply 'write_complex_list_tail'/2
			     (T, I1) of
		      <{_cor8,S2}> when 'true' ->
			  let <_cor4> =
			      %% Line 109
			      apply 'nl_indent'/1
				  (Indent)
			  in  %% Line 109
			      {Indent,[44|[_cor4|[S1|[S2|[]]]]]}
		      ( <_cor3> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor3})
			-| ['compiler_generated'] )
		    end
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 110
	  <[],Indent> when 'true' ->
	      %% Line 111
	      {Indent,[93]}
	  %% Line 112
	  <Other,Indent> when 'true' ->
	      %% Line 113
	      case apply 'term'/2
		       (Other, Indent) of
		<{_cor9,S}> when 'true' ->
		    %% Line 114
		    {Indent,[124|[S|[93]]]}
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor5})
		  -| ['compiler_generated'] )
	      end
	end
'complex_list'/1 =
    %% Line 120
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      %% Line 121
	      'false'
	  %% Line 122
	  <[H|T]>
	      when let <_cor1> =
		    call 'erlang':'is_list'
			(H)
		in  let <_cor2> =
			call 'erlang':'=:='
			    (_cor1, 'false')
		    in  let <_cor3> =
			    call 'erlang':'is_tuple'
				(H)
			in  let <_cor4> =
				call 'erlang':'=:='
				    (_cor3, 'false')
			    in  call 'erlang':'and'
				    (_cor2, _cor4) ->
	      %% Line 123
	      apply 'complex_list'/1
		  (T)
	  %% Line 124
	  <[H|T]> when 'true' ->
	      %% Line 125
	      case apply 'is_string'/1
		       (H) of
		%% Line 126
		<'true'> when 'true' ->
		    %% Line 127
		    apply 'complex_list'/1
			(T)
		%% Line 128
		<'false'> when 'true' ->
		    %% Line 129
		    'true'
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 131
	  <_cor7> when 'true' ->
	      'true'
	end
'complex_tuple'/1 =
    %% Line 137
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 138
	    call 'erlang':'tuple_to_list'
		(_cor0)
	in  %% Line 138
	    apply 'complex_list'/1
		(_cor1)
'write_simple_tuple'/2 =
    %% Line 143
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{},Indent> when 'true' ->
	      %% Line 144
	      {Indent,[123|[125]]}
	  %% Line 145
	  <Tuple,Indent> when 'true' ->
	      let <_cor2> =
		  %% Line 146
		  call 'erlang':'tuple_to_list'
		      (Tuple)
	      in  %% Line 146
		  case apply 'write_simple_tuple_args'/2
			   (_cor2, Indent) of
		    <{_cor6,S}> when 'true' ->
			%% Line 147
			{Indent,[123|[S|[125]]]}
		    ( <_cor3> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor3})
		      -| ['compiler_generated'] )
		  end
	end
'write_simple_tuple_args'/2 =
    %% Line 149
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[X|[]],Indent> when 'true' ->
	      %% Line 150
	      apply 'term'/2
		  (X, Indent)
	  %% Line 151
	  <[H|T],Indent> when 'true' ->
	      %% Line 152
	      case apply 'term'/2
		       (H, Indent) of
		<{_cor6,SH}> when 'true' ->
		    %% Line 153
		    case apply 'write_simple_tuple_args'/2
			     (T, Indent) of
		      <{_cor7,ST}> when 'true' ->
			  %% Line 154
			  {Indent,[SH|[44|[ST|[]]]]}
		      ( <_cor3> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor3})
			-| ['compiler_generated'] )
		    end
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'write_simple_tuple_args',2}}] )
	    -| ['compiler_generated'] )
	end
'write_complex_tuple'/2 =
    %% Line 159
    fun (_cor1,_cor0) ->
	%% Line 160
	case call 'erlang':'tuple_to_list'
		 (_cor1) of
	  <[H|T]> when 'true' ->
	      let <_cor3> =
		  %% Line 161
		  call 'erlang':'+'
		      (_cor0, 2)
	      in  %% Line 161
		  case apply 'term'/2
			   (H, _cor3) of
		    <{I1,SH}> when 'true' ->
			%% Line 162
			case apply 'write_complex_tuple_args'/2
				 (T, I1) of
			  <{_cor8,ST}> when 'true' ->
			      %% Line 163
			      {_cor0,[123|[SH|[ST|[125]]]]}
			  ( <_cor5> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor5})
			    -| ['compiler_generated'] )
			end
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor4})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'write_complex_tuple_args'/2 =
    %% Line 165
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[X|[]],Indent> when 'true' ->
	      %% Line 166
	      case apply 'term'/2
		       (X, Indent) of
		<{_cor9,S}> when 'true' ->
		    let <_cor3> =
			%% Line 167
			apply 'nl_indent'/1
			    (Indent)
		    in  %% Line 167
			{Indent,[44|[_cor3|[S|[]]]]}
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 168
	  <[H|T],Indent> when 'true' ->
	      %% Line 169
	      case apply 'term'/2
		       (H, Indent) of
		<{I1,SH}> when 'true' ->
		    %% Line 170
		    case apply 'write_complex_tuple_args'/2
			     (T, I1) of
		      <{_cor10,ST}> when 'true' ->
			  let <_cor6> =
			      %% Line 171
			      apply 'nl_indent'/1
				  (Indent)
			  in  %% Line 171
			      {Indent,[44|[_cor6|[SH|[ST|[]]]]]}
		      ( <_cor5> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor5})
			-| ['compiler_generated'] )
		    end
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 172
	  <[],Indent> when 'true' ->
	      %% Line 173
	      {Indent,[]}
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'write_complex_tuple_args',2}}] )
	    -| ['compiler_generated'] )
	end
'nl_indent'/1 =
    %% Line 178
    fun (_cor0) ->
	case _cor0 of
	  <I>
	      when call 'erlang':'>='
		    (_cor0,
		     0) ->
	      let <_cor1> =
		  %% Line 179
		  apply 'indent'/1
		      (I)
	      in  %% Line 179
		  [[10]|_cor1]
	  %% Line 180
	  <_cor3> when 'true' ->
	      %% Line 181
	      [32]
	end
'indent'/1 =
    %% Line 183
    fun (_cor0) ->
	case _cor0 of
	  <I>
	      when call 'erlang':'>='
		    (_cor0,
		     8) ->
	      let <_cor1> =
		  %% Line 184
		  call 'erlang':'-'
		      (I, 8)
	      in  let <_cor2> =
		      %% Line 184
		      apply 'indent'/1
			  (_cor1)
		  in  %% Line 184
		      [9|_cor2]
	  %% Line 185
	  <I>
	      when call 'erlang':'>'
		    (_cor0,
		     0) ->
	      let <_cor3> =
		  %% Line 186
		  call 'erlang':'-'
		      (I, 1)
	      in  let <_cor4> =
		      %% Line 186
		      apply 'indent'/1
			  (_cor3)
		  in  %% Line 186
		      [32|_cor4]
	  %% Line 187
	  <_cor6> when 'true' ->
	      %% Line 188
	      []
	end
'is_string'/1 =
    %% Line 190
    fun (_cor0) ->
	case _cor0 of
	  <[9|T]> when 'true' ->
	      %% Line 191
	      apply 'is_string'/1
		  (T)
	  %% Line 192
	  <[10|T]> when 'true' ->
	      %% Line 193
	      apply 'is_string'/1
		  (T)
	  %% Line 194
	  <[H|T]>
	      when let <_cor1> =
		    call 'erlang':'>'
			(H, 31)
		in  let <_cor2> =
			call 'erlang':'<'
			    (H, 127)
		    in  call 'erlang':'and'
			    (_cor1, _cor2) ->
	      %% Line 195
	      apply 'is_string'/1
		  (T)
	  %% Line 196
	  <[]> when 'true' ->
	      %% Line 197
	      'true'
	  %% Line 198
	  <_cor4> when 'true' ->
	      %% Line 199
	      'false'
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('asn1ct_pretty_format')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('asn1ct_pretty_format', _cor0)
end