module 'asn1ct_gen_ber_bin_v2' ['decode_class'/1,
				'decode_type'/1,
				'dialyzer_suppressions'/1,
				'encode_tag_val'/3,
				'extaddgroup2sequence'/1,
				'gen_dec_prim'/3,
				'gen_decode'/2,
				'gen_decode'/3,
				'gen_decode_selected'/3,
				'gen_encode'/2,
				'gen_encode'/3,
				'gen_encode_prim'/4,
				'gen_inc_decode'/2,
				'gen_obj_code'/3,
				'gen_objectset_code'/2,
				'module_info'/0,
				'module_info'/1]
    attributes [%% Line 31
		'type' =
		    %% Line 31
		    [{{'record','module'},[{'record_field',31,{'atom',31,'pos'}}|[{'record_field',31,{'atom',31,'name'}}|[{'record_field',31,{'atom',31,'defid'}}|[{'record_field',31,{'atom',31,'tagdefault'},{'atom',31,'EXPLICIT'}}|[{'record_field',31,{'atom',31,'exports'},{'tuple',31,[{'atom',31,'exports'}|[{'nil',31}]]}}|[{'record_field',31,{'atom',31,'imports'},{'tuple',31,[{'atom',31,'imports'}|[{'nil',31}]]}}|[{'record_field',31,{'atom',31,'extensiondefault'},{'atom',31,'empty'}}|[{'record_field',31,{'atom',31,'typeorval'}}]]]]]]]],[]}],
		%% Line 33
		'type' =
		    %% Line 33
		    [{{'record','ExtensionAdditionGroup'},[{'record_field',33,{'atom',33,'number'}}],[]}],
		%% Line 34
		'type' =
		    %% Line 34
		    [{{'record','SEQUENCE'},[{'record_field',34,{'atom',34,'pname'},{'atom',34,'false'}}|[{'record_field',34,{'atom',34,'tablecinf'},{'atom',34,'false'}}|[{'record_field',34,{'atom',34,'extaddgroup'}}|[{'record_field',34,{'atom',34,'components'},{'nil',34}}]]]],[]}],
		%% Line 35
		'type' =
		    %% Line 35
		    [{{'record','SET'},[{'record_field',35,{'atom',35,'pname'},{'atom',35,'false'}}|[{'record_field',35,{'atom',35,'sorted'},{'atom',35,'false'}}|[{'record_field',35,{'atom',35,'tablecinf'},{'atom',35,'false'}}|[{'record_field',35,{'atom',35,'components'},{'nil',35}}]]]],[]}],
		%% Line 36
		'type' =
		    %% Line 36
		    [{{'record','ComponentType'},[{'record_field',36,{'atom',36,'pos'}}|[{'record_field',36,{'atom',36,'name'}}|[{'record_field',36,{'atom',36,'typespec'}}|[{'record_field',36,{'atom',36,'prop'}}|[{'record_field',36,{'atom',36,'tags'}}|[{'record_field',36,{'atom',36,'textual_order'}}]]]]]],[]}],
		%% Line 37
		'type' =
		    %% Line 37
		    [{{'record','ObjectClassFieldType'},[{'record_field',37,{'atom',37,'classname'}}|[{'record_field',37,{'atom',37,'class'}}|[{'record_field',37,{'atom',37,'fieldname'}}|[{'record_field',37,{'atom',37,'type'}}]]]],[]}],
		%% Line 39
		'type' =
		    %% Line 39
		    [{{'record','typedef'},[{'record_field',39,{'atom',39,'checked'},{'atom',39,'false'}}|[{'record_field',39,{'atom',39,'pos'}}|[{'record_field',39,{'atom',39,'name'}}|[{'record_field',39,{'atom',39,'typespec'}}]]]],[]}],
		%% Line 40
		'type' =
		    %% Line 40
		    [{{'record','classdef'},[{'record_field',40,{'atom',40,'checked'},{'atom',40,'false'}}|[{'record_field',40,{'atom',40,'pos'}}|[{'record_field',40,{'atom',40,'name'}}|[{'record_field',40,{'atom',40,'typespec'}}]]]],[]}],
		%% Line 41
		'type' =
		    %% Line 41
		    [{{'record','valuedef'},[{'record_field',41,{'atom',41,'checked'},{'atom',41,'false'}}|[{'record_field',41,{'atom',41,'pos'}}|[{'record_field',41,{'atom',41,'name'}}|[{'record_field',41,{'atom',41,'type'}}|[{'record_field',41,{'atom',41,'value'}}|[{'record_field',41,{'atom',41,'module'}}]]]]]],[]}],
		%% Line 42
		'type' =
		    %% Line 42
		    [{{'record','ptypedef'},[{'record_field',42,{'atom',42,'checked'},{'atom',42,'false'}}|[{'record_field',42,{'atom',42,'pos'}}|[{'record_field',42,{'atom',42,'name'}}|[{'record_field',42,{'atom',42,'args'}}|[{'record_field',42,{'atom',42,'typespec'}}]]]]],[]}],
		%% Line 43
		'type' =
		    %% Line 43
		    [{{'record','pvaluedef'},[{'record_field',43,{'atom',43,'checked'},{'atom',43,'false'}}|[{'record_field',43,{'atom',43,'pos'}}|[{'record_field',43,{'atom',43,'name'}}|[{'record_field',43,{'atom',43,'args'}}|[{'record_field',43,{'atom',43,'type'}}|[{'record_field',43,{'atom',43,'value'}}]]]]]],[]}],
		%% Line 44
		'type' =
		    %% Line 44
		    [{{'record','pvaluesetdef'},[{'record_field',44,{'atom',44,'checked'},{'atom',44,'false'}}|[{'record_field',44,{'atom',44,'pos'}}|[{'record_field',44,{'atom',44,'name'}}|[{'record_field',44,{'atom',44,'args'}}|[{'record_field',44,{'atom',44,'type'}}|[{'record_field',44,{'atom',44,'valueset'}}]]]]]],[]}],
		%% Line 45
		'type' =
		    %% Line 45
		    [{{'record','pobjectdef'},[{'record_field',45,{'atom',45,'checked'},{'atom',45,'false'}}|[{'record_field',45,{'atom',45,'pos'}}|[{'record_field',45,{'atom',45,'name'}}|[{'record_field',45,{'atom',45,'args'}}|[{'record_field',45,{'atom',45,'class'}}|[{'record_field',45,{'atom',45,'def'}}]]]]]],[]}],
		%% Line 46
		'type' =
		    %% Line 46
		    [{{'record','pobjectsetdef'},[{'record_field',46,{'atom',46,'checked'},{'atom',46,'false'}}|[{'record_field',46,{'atom',46,'pos'}}|[{'record_field',46,{'atom',46,'name'}}|[{'record_field',46,{'atom',46,'args'}}|[{'record_field',46,{'atom',46,'class'}}|[{'record_field',46,{'atom',46,'def'}}]]]]]],[]}],
		%% Line 48
		'type' =
		    %% Line 48
		    [{{'record','identifier'},[{'record_field',48,{'atom',48,'pos'}}|[{'record_field',48,{'atom',48,'val'}}]],[]}],
		%% Line 49
		'type' =
		    %% Line 49
		    [{{'record','Constraint'},[{'record_field',49,{'atom',49,'SingleValue'},{'atom',49,'no'}}|[{'record_field',49,{'atom',49,'SizeConstraint'},{'atom',49,'no'}}|[{'record_field',49,{'atom',49,'ValueRange'},{'atom',49,'no'}}|[{'record_field',49,{'atom',49,'PermittedAlphabet'},{'atom',49,'no'}}|[{'record_field',50,{'atom',50,'ContainedSubtype'},{'atom',50,'no'}}|[{'record_field',50,{'atom',50,'TypeConstraint'},{'atom',50,'no'}}|[{'record_field',50,{'atom',50,'InnerSubtyping'},{'atom',50,'no'}}|[{'record_field',50,{'atom',50,'e'},{'atom',50,'no'}}|[{'record_field',50,{'atom',50,'Other'},{'atom',50,'no'}}]]]]]]]]],[]}],
		%% Line 51
		'type' =
		    %% Line 51
		    [{{'record','simpletableattributes'},[{'record_field',51,{'atom',51,'objectsetname'}}|[{'record_field',51,{'atom',51,'c_name'}}|[{'record_field',51,{'atom',51,'c_index'}}|[{'record_field',51,{'atom',51,'usedclassfield'}}|[{'record_field',52,{'atom',52,'uniqueclassfield'}}|[{'record_field',52,{'atom',52,'valueindex'}}]]]]]],[]}],
		%% Line 53
		'type' =
		    %% Line 53
		    [{{'record','type'},[{'record_field',53,{'atom',53,'tag'},{'nil',53}}|[{'record_field',53,{'atom',53,'def'}}|[{'record_field',53,{'atom',53,'constraint'},{'nil',53}}|[{'record_field',53,{'atom',53,'tablecinf'},{'nil',53}}|[{'record_field',53,{'atom',53,'inlined'},{'atom',53,'no'}}]]]]],[]}],
		%% Line 55
		'type' =
		    %% Line 55
		    [{{'record','objectclass'},[{'record_field',55,{'atom',55,'fields'},{'nil',55}}|[{'record_field',55,{'atom',55,'syntax'}}]],[]}],
		%% Line 56
		'type' =
		    %% Line 56
		    [{{'record','Object'},[{'record_field',56,{'atom',56,'classname'}}|[{'record_field',56,{'atom',56,'gen'},{'atom',56,'true'}}|[{'record_field',56,{'atom',56,'def'}}]]],[]}],
		%% Line 57
		'type' =
		    %% Line 57
		    [{{'record','ObjectSet'},[{'record_field',57,{'atom',57,'class'}}|[{'record_field',57,{'atom',57,'gen'},{'atom',57,'true'}}|[{'record_field',57,{'atom',57,'uniquefname'}}|[{'record_field',57,{'atom',57,'set'}}]]]],[]}],
		%% Line 59
		'type' =
		    %% Line 59
		    [{{'record','tag'},[{'record_field',59,{'atom',59,'class'}}|[{'record_field',59,{'atom',59,'number'}}|[{'record_field',59,{'atom',59,'type'}}|[{'record_field',59,{'atom',59,'form'},{'integer',59,32}}]]]],[]}],
		%% Line 61
		'type' =
		    %% Line 61
		    [{{'record','cmap'},[{'record_field',61,{'atom',61,'single_value'},{'atom',61,'no'}}|[{'record_field',61,{'atom',61,'contained_subtype'},{'atom',61,'no'}}|[{'record_field',61,{'atom',61,'value_range'},{'atom',61,'no'}}|[{'record_field',62,{'atom',62,'size'},{'atom',62,'no'}}|[{'record_field',62,{'atom',62,'permitted_alphabet'},{'atom',62,'no'}}|[{'record_field',62,{'atom',62,'type_constraint'},{'atom',62,'no'}}|[{'record_field',63,{'atom',63,'inner_subtyping'},{'atom',63,'no'}}]]]]]]],[]}],
		%% Line 66
		'type' =
		    %% Line 66
		    [{{'record','EXTENSIONMARK'},[{'record_field',66,{'atom',66,'pos'}}|[{'record_field',66,{'atom',66,'val'}}]],[]}],
		%% Line 69
		'type' =
		    %% Line 69
		    [{{'record','SymbolsFromModule'},[{'record_field',69,{'atom',69,'symbols'}}|[{'record_field',69,{'atom',69,'module'}}|[{'record_field',69,{'atom',69,'objid'}}]]],[]}],
		%% Line 72
		'type' =
		    %% Line 72
		    [{{'record','Externaltypereference'},[{'record_field',72,{'atom',72,'pos'}}|[{'record_field',72,{'atom',72,'module'}}|[{'record_field',72,{'atom',72,'type'}}]]],[]}],
		%% Line 74
		'type' =
		    %% Line 74
		    [{{'record','Externalvaluereference'},[{'record_field',74,{'atom',74,'pos'}}|[{'record_field',74,{'atom',74,'module'}}|[{'record_field',74,{'atom',74,'value'}}]]],[]}],
		%% Line 76
		'type' =
		    %% Line 76
		    [{{'record','state'},[{'record_field',76,{'atom',76,'module'}}|[{'record_field',76,{'atom',76,'mname'}}|[{'record_field',76,{'atom',76,'type'}}|[{'record_field',76,{'atom',76,'tname'}}|[{'record_field',76,{'atom',76,'value'}}|[{'record_field',76,{'atom',76,'vname'}}|[{'record_field',76,{'atom',76,'erule'}}|[{'record_field',76,{'atom',76,'parameters'},{'nil',76}}|[{'record_field',77,{'atom',77,'inputmodules'}}|[{'record_field',77,{'atom',77,'abscomppath'},{'nil',77}}|[{'record_field',77,{'atom',77,'recordtopname'},{'nil',77}}|[{'record_field',77,{'atom',77,'options'}}|[{'record_field',78,{'atom',78,'sourcedir'}}]]]]]]]]]]]]],[]}],
		%% Line 106
		'type' =
		    %% Line 106
		    [{{'record','gen_state'},[{'record_field',106,{'atom',106,'active'},{'atom',106,'false'}}|[{'record_field',106,{'atom',106,'prefix'}}|[{'record_field',106,{'atom',106,'inc_tag_pattern'}}|[{'record_field',107,{'atom',107,'tag_pattern'}}|[{'record_field',107,{'atom',107,'inc_type_pattern'}}|[{'record_field',108,{'atom',108,'type_pattern'}}|[{'record_field',108,{'atom',108,'func_name'}}|[{'record_field',108,{'atom',108,'namelist'}}|[{'record_field',109,{'atom',109,'tobe_refed_funcs'},{'nil',109}}|[{'record_field',109,{'atom',109,'gen_refed_funcs'},{'nil',109}}|[{'record_field',110,{'atom',110,'generated_functions'},{'nil',110}}|[{'record_field',110,{'atom',110,'suffix_index'},{'integer',110,1}}|[{'record_field',111,{'atom',111,'current_suffix_index'}}]]]]]]]]]]]]],[]}],
		%% Line 599
		'spec' =
		    %% Line 599
		    [{{'int_constr',1},[{'type',599,'fun',[{'type',599,'product',[{'type',599,'term',[]}]}|[{'type',599,'union',[{'type',599,'nil',[]}|[{'type',599,'tuple',[{'type',599,'integer',[]}|[{'type',599,'union',[{'type',599,'integer',[]}|[{'atom',599,'MAX'}]]}]]}]]}]]}]}]]
'dialyzer_suppressions'/1 =
    %% Line 69
    fun (_cor0) ->
	do  %% Line 70
	    case call 'asn1ct':'use_legacy_types'
		     () of
	      %% Line 71
	      <'false'> when 'true' ->
		  'ok'
	      %% Line 72
	      <'true'> when 'true' ->
		  apply 'suppress'/1
		      ({'ber','encode_bit_string',4})
	      ( <_cor1> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor1})
		-| ['compiler_generated'] )
	    end
	    do  %% Line 74
		apply 'suppress'/1
		    ({'ber','decode_selective',2})
		%% Line 75
		call 'asn1ct_gen':'emit'
		    ([[32|[32|[32|[32|[111|[107|[46]]]]]]]|['nl']])
'suppress'/1 =
    %% Line 77
    fun (_cor0) ->
	case _cor0 of
	  <MFA = {M,F,A}> when 'true' ->
	      %% Line 78
	      case call 'asn1ct_func':'is_used'
		       (MFA) of
		%% Line 79
		<'false'> when 'true' ->
		    %% Line 80
		    'ok'
		%% Line 81
		<'true'> when 'true' ->
		    let <_cor7> =
			%% Line 82
			( letrec
			      'lc$^0'/1 =
				  fun (_cor4) ->
				      case _cor4 of
					<[I|_cor2]> when 'true' ->
					    let <_cor5> =
						call 'lists':'concat'
						    ([[101|[108|[101|[109|[101|[110|[116|[40]]]]]]]]|[I|[[44|[32|[65|[114|[103|[41]]]]]]]]])
					    in  let <_cor6> =
						    apply 'lc$^0'/1
							(_cor2)
						in  ( [_cor5|_cor6]
						      -| ['compiler_generated'] )
					<[]> when 'true' ->
					    []
					( <_cor4> when 'true' ->
					      ( primop 'match_fail'
						    ({'function_clause',_cor4})
						-| [{'function_name',{'lc$^0',1}}] )
					  -| ['compiler_generated'] )
				      end
			  in  let <_cor3> =
				  call 'lists':'seq'
				      (1, A)
			      in  apply 'lc$^0'/1
				      (_cor3)
			  -| ['list_comprehension'] )
		    in  %% Line 83
			call 'asn1ct_gen':'emit'
			    ([[32|[32|[32|[32]]]]|[{'call',M,F,_cor7}|['com'|['nl']]]])
		( <_cor9> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor9})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10})
		  -| [{'function_name',{'suppress',1}}] )
	    -| ['compiler_generated'] )
	end
'gen_encode'/2 =
    %% Line 90
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Erules,D = {'typedef',_cor5,_cor6,_cor7,_cor8}> when 'true' ->
	      %% Line 91
	      apply 'gen_encode_user'/3
		  (Erules, D, 'true')
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'gen_encode',2}}] )
	    -| ['compiler_generated'] )
	end
'gen_encode'/3 =
    %% Line 97
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Erules,Typename,Type = {'type',_cor28,_cor29,_cor30,_cor31,_cor32}> when ( 'true'
										      -| ['compiler_generated'] ) ->
	      let <InnerType> =
		  %% Line 98
		  call 'asn1ct_gen':'get_inner'
		      (_cor29)
	      in  let <_cor9> =
		      %% Line 100
		      case call 'lists':'keysearch'
			       ('objfun', 1, _cor31) of
			%% Line 101
			<{'value',{_cor43,_X_Name}}> when 'true' ->
			    %% Line 102
			    [44|[32|[79|[98|[106|[70|[117|[110]]]]]]]]
			%% Line 103
			<'false'> when 'true' ->
			    %% Line 104
			    []
			( <_cor8> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor8})
			  -| ['compiler_generated'] )
		      end
		  in  %% Line 107
		      case call 'asn1ct_gen':'type'
			       (InnerType) of
			%% Line 108
			<{'constructed','bif'}> when 'true' ->
			    do  %% Line 109
				call 'asn1ct_gen':'emit'
				    (['nl'|['nl'|['nl'|[[37|[37|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
				let <_cor11> =
				    %% Line 110
				    call 'asn1ct_gen':'list2name'
					(Typename)
				in  do  %% Line 110
					call 'asn1ct_gen':'emit'
					    (['nl'|[[37|[37|[32|[32]]]]|[_cor11|[]]]])
					do  %% Line 111
					    call 'asn1ct_gen':'emit'
						(['nl'|[[37|[37|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|['nl']]])
					    do  %% Line 112
						case call 'erlang':'length'
							 (Typename) of
						  %% Line 113
						  <1> when 'true' ->
						      let <_cor12> =
							  %% Line 114
							  call 'asn1ct_gen':'list2name'
							      (Typename)
						      in  do  %% Line 114
							      call 'asn1ct_gen':'emit'
								  ([[39|[101|[110|[99|[95]]]]]|[_cor12|%% Line 115
												       [[39|[40|[86|[97|[108]]]]]|[_cor9|[[41|[32|[45|[62]]]]|['nl']]]]]])
							      let <_cor13> =
								  %% Line 116
								  call 'asn1ct_gen':'list2name'
								      (Typename)
							      in  let <_cor16> =
								      %% Line 117
								      call 'lists':'reverse'
									  (_cor28)
								  in  %% Line 116
								      call 'asn1ct_gen':'emit'
									  ([[32|[32|[32|[32|[39|[101|[110|[99|[95]]]]]]]]]|[_cor13|%% Line 117
																   [[39|[40|[86|[97|[108|[44|[32]]]]]]]|[{'asis',_cor16}|[_cor9|[[41|[46]]|['nl'|['nl']]]]]]]])
						  %% Line 118
						  <_cor49> when 'true' ->
						      'ok'
						end
						let <_cor18> =
						    %% Line 121
						    call 'asn1ct_gen':'list2name'
							(Typename)
						in  do  %% Line 121
							call 'asn1ct_gen':'emit'
							    ([[39|[101|[110|[99|[95]]]]]|[_cor18|%% Line 122
												 [[39|[40|[86|[97|[108|[44|[32|[84|[97|[103|[73|[110]]]]]]]]]]]]|[_cor9|[[41|[32|[45|[62]]]]|['nl'|[[32|[32|[32]]]]]]]]]])
							%% Line 123
							call 'asn1ct_gen':'gen_encode_constructed'
							    (Erules, Typename, InnerType, Type)
			%% Line 124
			<_cor50> when 'true' ->
			    %% Line 125
			    'true'
		      end
	  %% Line 132
	  <Erules,Tname,{'ComponentType',_cor51,Cname,Type,_cor52,_cor53,_cor54}> when 'true' ->
	      let <NewTname> =
		  %% Line 133
		  [Cname|Tname]
	      in  %% Line 138
		  case Type of
		    <{'type',_cor55,_cor56,_cor57,_cor58,_cor59}> when 'true' ->
			let <_cor23> =
			    call 'erlang':'setelement'
				(2, Type, [])
			in  %% Line 139
			    apply 'gen_encode'/3
				(Erules, NewTname, _cor23)
		    ( <_cor60> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','type'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  ( <_cor27,_cor26,_cor25> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor27,_cor26,_cor25})
		  -| [{'function_name',{'gen_encode',3}}] )
	    -| ['compiler_generated'] )
	end
'gen_encode_user'/3 =
    %% Line 141
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Erules,D = {'typedef',_cor36,_cor37,_cor38,_cor39},Wrapper> when 'true' ->
	      let <Typename> =
		  %% Line 142
		  [_cor38|[]]
	      in  %% Line 144
		  ( case _cor39 of
		      ( <( {'type',_cor48,_rec6,_cor49,_cor50,_cor51}
			   -| ['compiler_generated'] )> when 'true' ->
			    let <InnerType> =
				call 'asn1ct_gen':'get_inner'
				    (_rec6)
			    in  do  %% Line 145
				    call 'asn1ct_gen':'emit'
					(['nl'|['nl'|[[37|[37|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
				    do  %% Line 146
					call 'asn1ct_gen':'emit'
					    (['nl'|[[37|[37|[32|[32]]]]|[Typename|[]]]])
					do  %% Line 147
					    call 'asn1ct_gen':'emit'
						(['nl'|[[37|[37|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|['nl']]])
					    let <_cor12> =
						%% Line 148
						call 'asn1ct_gen':'list2name'
						    (Typename)
					    in  let <_cor13> =
						    %% Line 148
						    call 'erlang':'++'
							(_cor12, [39])
						in  let <FuncName> =
							%% Line 148
							call 'erlang':'++'
							    ([39|[101|[110|[99|[95]]]]], _cor13)
						    in  do  %% Line 149
							    case Wrapper of
							      %% Line 150
							      <'true'> when 'true' ->
								  let <_cor24> =
								      %% Line 154
								      ( letrec
									    'lc$^0'/1 =
										fun (_cor20) ->
										    case _cor20 of
										      <[%% Line 155
											{'tag',Class,Number,_cor58,Form}|_cor19]> when 'true' ->
											  let <_cor21> =
											      apply 'decode_class'/1
												  (Class)
											  in  let <_cor22> =
												  apply 'encode_tag_val'/3
												      (_cor21, Form, Number)
											      in  let <_cor23> =
												      %% Line 155
												      apply 'lc$^0'/1
													  (_cor19)
												  in  ( [_cor22|_cor23]
													-| ['compiler_generated'] )
										      ( <[_cor18|_cor19]> when 'true' ->
											    %% Line 155
											    apply 'lc$^0'/1
												(_cor19)
											-| ['compiler_generated'] )
										      <[]> when 'true' ->
											  []
										      ( <_cor20> when 'true' ->
											    ( primop 'match_fail'
												  ({'function_clause',_cor20})
											      -| [{'function_name',{'lc$^0',1}}] )
											-| ['compiler_generated'] )
										    end
									in  apply 'lc$^0'/1
										(_cor48)
									-| ['list_comprehension'] )
								  in  let <Tag> =
									  %% Line 156
									  call 'lists':'reverse'
									      (_cor24)
								      in  %% Line 157
									  call 'asn1ct_gen':'emit'
									      ([FuncName|[[40|[86|[97|[108|[41|[32|[45|[62]]]]]]]]|['nl'|%% Line 158
																	 [[32|[32|[32|[32]]]]|[FuncName|[[40|[86|[97|[108|[44|[32]]]]]]|[{'asis',Tag}|[[41|[46]]|['nl'|['nl']]]]]]]]]])
							      %% Line 159
							      <'false'> when 'true' ->
								  'ok'
							      ( <_cor27> when 'true' ->
								    primop 'match_fail'
									({'case_clause',_cor27})
								-| ['compiler_generated'] )
							    end
							    do  %% Line 162
								call 'asn1ct_gen':'emit'
								    ([FuncName|[[40|[86|[97|[108|[44|[32|[84|[97|[103|[73|[110|[41|[32|[45|[62]]]]]]]]]]]]]]]|['nl']]])
								let <CurrentMod> =
								    %% Line 163
								    call 'erlang':'get'
									('currmod')
								in  %% Line 164
								    case call 'asn1ct_gen':'type'
									     (InnerType) of
								      %% Line 165
								      <{'constructed','bif'}> when 'true' ->
									  %% Line 166
									  call 'asn1ct_gen':'gen_encode_constructed'
									      (Erules, Typename, InnerType, D)
								      %% Line 167
								      <{'primitive','bif'}> when 'true' ->
									  do  %% Line 168
									      apply 'gen_encode_prim'/4
										  ('ber', _cor39, [84|[97|[103|[73|[110]]]]], [86|[97|[108]]])
									      %% Line 169
									      call 'asn1ct_gen':'emit'
										  ([[46]|['nl']])
								      %% Line 170
								      <{'Externaltypereference',_cor59,_cor60,Etype}>
									  when call 'erlang':'=:='
										(_cor60,
										 CurrentMod) ->
									  %% Line 171
									  call 'asn1ct_gen':'emit'
									      ([[32|[32|[32|[39|[101|[110|[99|[95]]]]]]]]|[Etype|[[39|[40|[86|[97|[108|[44|[32|[84|[97|[103|[73|[110|[41|[46]]]]]]]]]]]]]]|['nl']]]])
								      %% Line 172
								      <{'Externaltypereference',_cor61,Emod,Etype}> when 'true' ->
									  %% Line 173
									  call 'asn1ct_gen':'emit'
									      ([[32|[32|[32|[39]]]]|[Emod|[[39|[58|[39|[101|[110|[99|[95]]]]]]]|[Etype|[[39|[40|[86|[97|[108|[44|[32|[84|[97|[103|[73|[110|[41|[46]]]]]]]]]]]]]]|['nl']]]]]])
								      %% Line 174
								      <'ASN1_OPEN_TYPE'> when 'true' ->
									  do  %% Line 175
									      call 'asn1ct_gen':'emit'
										  ([[37|[37|[32|[79|[80|[69|[78|[32|[84|[89|[80|[69]]]]]]]]]]]]|['nl']])
									      let <_cor31> =
										  %% Line 177
										  call 'erlang':'setelement'
										      (3, _cor39, 'ASN1_OPEN_TYPE')
									      in  do  %% Line 176
										      apply 'gen_encode_prim'/4
											  ('ber', _cor31, %% Line 178
													  [84|[97|[103|[73|[110]]]]], %% Line 178
																      [86|[97|[108]]])
										      %% Line 179
										      call 'asn1ct_gen':'emit'
											  ([[46]|['nl']])
								      ( <_cor32> when 'true' ->
									    primop 'match_fail'
										({'case_clause',_cor32})
									-| ['compiler_generated'] )
								    end
			-| ['compiler_generated'] )
		      ( <_cor52> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','type'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  ( <_cor35,_cor34,_cor33> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor35,_cor34,_cor33})
		  -| [{'function_name',{'gen_encode_user',3}}] )
	    -| ['compiler_generated'] )
	end
'gen_encode_prim'/4 =
    %% Line 182
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <_X_Erules,D = {'type',_cor22,_cor23,_cor24,_cor25,_cor26},DoTag,Value> when 'true' ->
	      let <BitStringConstraint> =
		  %% Line 183
		  apply 'get_size_constraint'/1
		      (_cor24)
	      in  let <_cor8> =
		      %% Line 184
		      case BitStringConstraint of
			%% Line 185
			<[]> when 'true' ->
			    'none'
			%% Line 186
			<{_cor32,'MAX'}> when 'true' ->
			    'none'
			%% Line 187
			<{_cor33,Max}> when 'true' ->
			    Max
			%% Line 188
			<Max>
			    when call 'erlang':'is_integer'
				  (BitStringConstraint) ->
			    Max
			( <_cor7> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor7})
			  -| ['compiler_generated'] )
		      end
		  in  do  %% Line 190
			  call 'asn1ct_name':'new'
			      ('enumval')
			  let <_cor13> =
			      %% Line 191
			      case _cor23 of
				%% Line 192
				<'OCTET STRING'> when 'true' ->
				    'restricted_string'
				%% Line 193
				<'ObjectDescriptor'> when 'true' ->
				    'restricted_string'
				%% Line 194
				<'NumericString'> when 'true' ->
				    'restricted_string'
				%% Line 195
				<'TeletexString'> when 'true' ->
				    'restricted_string'
				%% Line 196
				<'T61String'> when 'true' ->
				    'restricted_string'
				%% Line 197
				<'VideotexString'> when 'true' ->
				    'restricted_string'
				%% Line 198
				<'GraphicString'> when 'true' ->
				    'restricted_string'
				%% Line 199
				<'VisibleString'> when 'true' ->
				    'restricted_string'
				%% Line 200
				<'GeneralString'> when 'true' ->
				    'restricted_string'
				%% Line 201
				<'PrintableString'> when 'true' ->
				    'restricted_string'
				%% Line 202
				<'IA5String'> when 'true' ->
				    'restricted_string'
				%% Line 203
				<'UTCTime'> when 'true' ->
				    'restricted_string'
				%% Line 204
				<'GeneralizedTime'> when 'true' ->
				    'restricted_string'
				%% Line 205
				<Other> when 'true' ->
				    Other
			      end
			  in  %% Line 207
			      case _cor13 of
				%% Line 208
				<'restricted_string'> when 'true' ->
				    %% Line 209
				    apply 'call'/2
					('encode_restricted_string', [Value|[DoTag|[]]])
				%% Line 210
				<'BOOLEAN'> when 'true' ->
				    %% Line 211
				    apply 'call'/2
					('encode_boolean', [Value|[DoTag|[]]])
				%% Line 212
				<'INTEGER'> when 'true' ->
				    %% Line 213
				    apply 'call'/2
					('encode_integer', [Value|[DoTag|[]]])
				%% Line 214
				<{'INTEGER',NamedNumberList}> when 'true' ->
				    %% Line 215
				    apply 'call'/2
					('encode_integer', [Value|[{'asis',NamedNumberList}|[DoTag|[]]]])
				%% Line 216
				<{'ENUMERATED',NamedNumberList = {_cor39,_cor40}}> when 'true' ->
				    do  %% Line 217
					call 'asn1ct_gen':'emit'
					    ([[99|[97|[115|[101|[32]]]]]|[Value|[[32|[111|[102]]]|['nl']]]])
					%% Line 218
					apply 'emit_enc_enumerated_cases'/2
					    (NamedNumberList, DoTag)
				%% Line 219
				<{'ENUMERATED',NamedNumberList}> when 'true' ->
				    do  %% Line 220
					call 'asn1ct_gen':'emit'
					    ([[99|[97|[115|[101|[32]]]]]|[Value|[[32|[111|[102]]]|['nl']]]])
					%% Line 221
					apply 'emit_enc_enumerated_cases'/2
					    (NamedNumberList, DoTag)
				%% Line 222
				<'REAL'> when 'true' ->
				    do  %% Line 223
					call 'asn1ct_name':'new'
					    ('realval')
					do  %% Line 224
					    call 'asn1ct_name':'new'
						('realsize')
					    %% Line 225
					    call 'asn1ct_gen':'emit'
						([[98|[101|[103|[105|[110]]]]]|['nl'|%% Line 226
										     [{'curr','realval'}|[[32|[61|[32]]]|%% Line 227
															 [{'call','real_common','ber_encode_real',[Value|[]]}|['com'|['nl'|%% Line 228
																							   [{'curr','realsize'}|[[32|[61|[32]]]|%% Line 229
																												[{'call','erlang','byte_size',[{'curr','realval'}]}|['com'|['nl'|%% Line 230
																																				 [{'call','ber','encode_tags',%% Line 231
																																							      [DoTag|[{'curr','realval'}|[{'curr','realsize'}]]]}|%% Line 231
																																														  ['nl'|[[101|[110|[100]]]]]]]]]]]]]]]]]])
				%% Line 233
				<{'BIT STRING',[]}> when 'true' ->
				    %% Line 234
				    case call 'asn1ct':'use_legacy_types'
					     () of
				      %% Line 235
				      <'false'>
					  when call 'erlang':'=:='
						(_cor8,
						 'none') ->
					  %% Line 236
					  apply 'call'/2
					      ('encode_unnamed_bit_string', [Value|[DoTag|[]]])
				      %% Line 237
				      <'false'> when 'true' ->
					  %% Line 238
					  apply 'call'/2
					      ('encode_unnamed_bit_string', %% Line 239
									    [{'asis',_cor8}|[Value|[DoTag|[]]]])
				      %% Line 240
				      <'true'> when 'true' ->
					  %% Line 241
					  apply 'call'/2
					      ('encode_bit_string', %% Line 242
								    [{'asis',BitStringConstraint}|[Value|%% Line 243
													 [{'asis',[]}|[DoTag|[]]]]])
				      ( <_cor15> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_cor15})
					-| ['compiler_generated'] )
				    end
				%% Line 245
				<{'BIT STRING',NamedNumberList}> when 'true' ->
				    %% Line 246
				    case call 'asn1ct':'use_legacy_types'
					     () of
				      %% Line 247
				      <'false'>
					  when call 'erlang':'=:='
						(_cor8,
						 'none') ->
					  %% Line 248
					  apply 'call'/2
					      ('encode_named_bit_string', %% Line 249
									  [Value|[{'asis',NamedNumberList}|[DoTag|[]]]])
				      %% Line 250
				      <'false'> when 'true' ->
					  %% Line 251
					  apply 'call'/2
					      ('encode_named_bit_string', %% Line 252
									  [{'asis',_cor8}|[Value|%% Line 253
												 [{'asis',NamedNumberList}|[DoTag|[]]]]])
				      %% Line 254
				      <'true'> when 'true' ->
					  %% Line 255
					  apply 'call'/2
					      ('encode_bit_string', %% Line 256
								    [{'asis',BitStringConstraint}|[Value|%% Line 257
													 [{'asis',NamedNumberList}|[DoTag|[]]]]])
				      ( <_cor16> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_cor16})
					-| ['compiler_generated'] )
				    end
				%% Line 259
				<'NULL'> when 'true' ->
				    %% Line 260
				    apply 'call'/2
					('encode_null', [Value|[DoTag|[]]])
				%% Line 261
				<'OBJECT IDENTIFIER'> when 'true' ->
				    %% Line 262
				    apply 'call'/2
					('encode_object_identifier', [Value|[DoTag|[]]])
				%% Line 263
				<'RELATIVE-OID'> when 'true' ->
				    %% Line 264
				    apply 'call'/2
					('encode_relative_oid', [Value|[DoTag|[]]])
				%% Line 265
				<'UniversalString'> when 'true' ->
				    %% Line 266
				    apply 'call'/2
					('encode_universal_string', [Value|[DoTag|[]]])
				%% Line 267
				<'UTF8String'> when 'true' ->
				    %% Line 268
				    apply 'call'/2
					('encode_UTF8_string', [Value|[DoTag|[]]])
				%% Line 269
				<'BMPString'> when 'true' ->
				    %% Line 270
				    apply 'call'/2
					('encode_BMP_string', [Value|[DoTag|[]]])
				%% Line 271
				<'ASN1_OPEN_TYPE'> when 'true' ->
				    %% Line 272
				    apply 'call'/2
					('encode_open_type', [Value|[DoTag|[]]])
				( <_cor17> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor17})
				  -| ['compiler_generated'] )
			      end
	  ( <_cor21,_cor20,_cor19,_cor18> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor21,_cor20,_cor19,_cor18})
		  -| [{'function_name',{'gen_encode_prim',4}}] )
	    -| ['compiler_generated'] )
	end
'emit_enc_enumerated_cases'/2 =
    %% Line 275
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{L1,L2},Tags> when 'true' ->
	      let <_cor2> =
		  %% Line 276
		  call 'erlang':'++'
		      (L1, L2)
	      in  %% Line 276
		  apply 'emit_enc_enumerated_cases'/3
		      (_cor2, Tags, 'ext')
	  %% Line 277
	  <L,Tags> when 'true' ->
	      %% Line 278
	      apply 'emit_enc_enumerated_cases'/3
		  (L, Tags, 'noext')
	end
'emit_enc_enumerated_cases'/3 =
    %% Line 280
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[{EnumName,EnumVal}|T],Tags,Ext> when 'true' ->
	      let <Bytes> =
		  %% Line 281
		  apply 'encode_pos_integer'/2
		      (EnumVal, [])
	      in  let <Len> =
		      %% Line 282
		      call 'erlang':'length'
			  (Bytes)
		  in  do  %% Line 283
			  call 'asn1ct_gen':'emit'
			      ([{'asis',EnumName}|[[32|[45|[62|[32]]]]|%% Line 284
								       [{'call','ber','encode_tags',[Tags|[{'asis',Bytes}|[Len|[]]]]}|[[59]|['nl']]]]])
			  %% Line 285
			  apply 'emit_enc_enumerated_cases'/3
			      (T, Tags, Ext)
	  %% Line 286
	  <[],_X_Tags,_X_Ext> when 'true' ->
	      do  %% Line 288
		  call 'asn1ct_gen':'emit'
		      ([{'curr','enumval'}|[[32|[45|[62|[32|[101|[120|[105|[116|[40|[123|[101|[114|[114|[111|[114|[44|[123|[97|[115|[110|[49|[44|[32|[123|[101|[110|[117|[109|[101|[114|[97|[116|[101|[100|[95|[110|[111|[116|[95|[105|[110|[95|[114|[97|[110|[103|[101|[44]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[{'curr','enumval'}|[[125|[125|[125|[41]]]]]]]])
		  %% Line 289
		  call 'asn1ct_gen':'emit'
		      (['nl'|[[101|[110|[100]]]]])
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'emit_enc_enumerated_cases',3}}] )
	    -| ['compiler_generated'] )
	end
'encode_pos_integer'/2 =
    %% Line 291
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <0,L = [B|_X_Acc]>
	      when call 'erlang':'<'
		    (B,
		     128) ->
	      %% Line 292
	      L
	  %% Line 293
	  <N,Acc> when 'true' ->
	      let <_cor3> =
		  %% Line 294
		  call 'erlang':'bsr'
		      (N, 8)
	      in  let <_cor2> =
		      %% Line 294
		      call 'erlang':'band'
			  (N, 255)
		  in  %% Line 294
		      apply 'encode_pos_integer'/2
			  (_cor3, [_cor2|Acc])
	end
'gen_decode'/2 =
    %% Line 308
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Erules,Type = {'typedef',_cor39,_cor40,_cor41,_cor42}> when ( 'true'
									 -| ['compiler_generated'] ) ->
	      %% Line 310
	      ( case _cor42 of
		  ( <( {'type',_rec12,_cor47,_cor48,_cor49,_cor50}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_cor19> =
			    %% Line 312
			    ( letrec
				  'lc$^0'/1 =
				      fun (_cor10) ->
					  case _cor10 of
					    <[X|_cor9]> when 'true' ->
						( case X of
						    ( <( {'tag',_rec13,_cor52,_cor53,_cor54}
							 -| ['compiler_generated'] )> when 'true' ->
							  let <_cor15> =
							      apply 'decode_class'/1
								  (_rec13)
							  in  let <_cor16> =
								  call 'erlang':'bsl'
								      (_cor15, 10)
							      in  let <_cor17> =
								      call 'erlang':'+'
									  (_cor16, _cor52)
								  in  let <_cor18> =
									  apply 'lc$^0'/1
									      (_cor9)
								      in  ( [_cor17|_cor18]
									    -| ['compiler_generated'] )
						      -| ['compiler_generated'] )
						    ( <_cor55> when 'true' ->
							  ( call ( 'erlang'
								   -| ['compiler_generated'] ):( 'error'
												 -| ['compiler_generated'] )
								(( {'badrecord','tag'}
								   -| ['compiler_generated'] ))
							    -| ['compiler_generated'] )
						      -| ['compiler_generated'] )
						  end
						  -| ['compiler_generated'] )
					    <[]> when 'true' ->
						[]
					    ( <_cor10> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor10})
						    -| [{'function_name',{'lc$^0',1}}] )
					      -| ['compiler_generated'] )
					  end
			      in  apply 'lc$^0'/1
				      (_rec12)
			      -| ['list_comprehension'] )
			in  let <_cor22> =
				%% Line 315
				call 'asn1ct':'get_gen_state_field'
				    ('active')
			    in  let <_cor21> =
				    %% Line 316
				    call 'asn1ct':'get_gen_state_field'
					('prefix')
				in  let <_cor33> =
					%% Line 315
					case <_cor22,_cor21> of
					  %% Line 317
					  <'true',Pref> when 'true' ->
					      %% Line 322
					      case call 'asn1ct':'current_sindex'
						       () of
						%% Line 323
						<I>
						    when let <_cor23> =
							  call 'erlang':'is_integer'
							      (I)
						      in  let <_cor24> =
							      call 'erlang':'>'
								  (I, 0)
							  in  call 'erlang':'and'
								  (_cor23, _cor24) ->
						    %% Line 324
						    call 'lists':'concat'
							([Pref|[_cor41|[[95]|[I|[]]]]])
						%% Line 325
						<_cor64> when 'true' ->
						    %% Line 326
						    call 'lists':'concat'
							([Pref|[_cor41|[]]])
					      end
					  %% Line 328
					  <_fol114,_fol115> when 'true' ->
					      call 'lists':'concat'
						  ([[100|[101|[99|[95]]]]|[_cor41|[]]])
					end
				    in  do  %% Line 330
					    call 'asn1ct_gen':'emit'
						({'nl','nl'})
					    do  %% Line 331
						call 'asn1ct_gen':'emit'
						    ([[39]|[_cor33|[[39|[40|[84|[108|[118|[41|[32|[45|[62]]]]]]]]]|['nl']]]])
						do  %% Line 332
						    call 'asn1ct_gen':'emit'
							([[32|[32|[32|[39]]]]|[_cor33|[[39|[40|[84|[108|[118|[44|[32]]]]]]]|[{'asis',_cor19}|[[41|[46]]|['nl'|['nl']]]]]]])
						    do  %% Line 333
							call 'asn1ct_gen':'emit'
							    ([[39]|[_cor33|[[39|[40|[84|[108|[118|[44|[32|[84|[97|[103|[73|[110|[41|[32|[45|[62]]]]]]]]]]]]]]]]|['nl']]]])
							do  %% Line 334
							    apply 'dbdec'/2
								(_cor41, [84|[108|[118]]])
							    %% Line 335
							    apply 'gen_decode_user'/2
								(Erules, Type)
		    -| ['compiler_generated'] )
		  ( <_cor51> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','type'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_cor38,_cor37> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor38,_cor37})
		  -| [{'function_name',{'gen_decode',2}}] )
	    -| ['compiler_generated'] )
	end
'gen_inc_decode'/2 =
    %% Line 337
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Erules,Type = {'typedef',_cor9,_cor10,_cor11,_cor12}> when ( 'true'
									-| ['compiler_generated'] ) ->
	      let <Prefix> =
		  %% Line 338
		  call 'asn1ct':'get_gen_state_field'
		      ('prefix')
	      in  let <_cor3> =
		      %% Line 339
		      call 'asn1ct':'current_sindex'
			  ()
		  in  let <Suffix> =
			  %% Line 339
			  call 'asn1ct_gen':'index2suffix'
			      (_cor3)
		      in  do  %% Line 340
			      call 'asn1ct_gen':'emit'
				  ({'nl','nl'})
			      do  %% Line 341
				  call 'asn1ct_gen':'emit'
				      ([[39]|[Prefix|[_cor11|[Suffix|[[39|[40|[84|[108|[118|[44|[32|[84|[97|[103|[73|[110|[41|[32|[45|[62]]]]]]]]]]]]]]]]|['nl']]]]]])
				  %% Line 342
				  apply 'gen_decode_user'/2
				      (Erules, Type)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'gen_inc_decode',2}}] )
	    -| ['compiler_generated'] )
	end
'gen_decode_selected'/3 =
    %% Line 345
    fun (_cor2,_cor1,_cor0) ->
	do  %% Line 346
	    call 'asn1ct_gen':'emit'
		([_cor0|[[40|[66|[105|[110|[41|[32|[45|[62]]]]]]]]|['nl']]])
	    let <Patterns> =
		%% Line 348
		call 'asn1ct':'read_config_data'
		    ('partial_decode')
	    in  let <_cor5> =
		    %% Line 350
		    case call 'lists':'keysearch'
			     (_cor0, 1, Patterns) of
		      %% Line 351
		      <{'value',{_cor10,P}}> when 'true' ->
			  P
		      %% Line 352
		      <'false'> when 'true' ->
			  call 'erlang':'exit'
			      ({'error',{'internal','no_pattern_saved'}})
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor4})
			-| ['compiler_generated'] )
		    end
		in  do  %% Line 354
			call 'asn1ct_gen':'emit'
			    ([[32|[32|[99|[97|[115|[101|[32]]]]]]]|[{'call','ber','decode_selective',%% Line 355
												     [{'asis',_cor5}|[[66|[105|[110]]]]]}|%% Line 355
																	  [[32|[111|[102]]]|['nl'|[[32|[32|[32|[32|[123|[111|[107|[44|[66|[105|[110|[50|[125|[32|[119|[104|[101|[110|[32|[105|[115|[95|[98|[105|[110|[97|[114|[121|[40|[66|[105|[110|[50|[41|[32|[45|[62]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|['nl'|[[32|[32|[32|[32|[32|[32|[123|[84|[108|[118|[44|[95|[125|[32|[61|[32]]]]]]]]]]]]]]]]|[{'call','ber','ber_decode_nif',[[66|[105|[110|[50]]]]]}|['com'|['nl']]]]]]]]]])
			do  %% Line 358
			    call 'asn1ct_gen':'emit'
				([123|[111|[107|[44]]]])
			    do  %% Line 359
				apply 'gen_decode_selected_type'/2
				    (_cor2, _cor1)
				%% Line 360
				call 'asn1ct_gen':'emit'
				    ([[125|[59]]|['nl'|[[32|[32|[32|[32|[69|[114|[114|[32|[45|[62|[32|[101|[120|[105|[116|[40|[123|[101|[114|[114|[111|[114|[44|[123|[115|[101|[108|[101|[99|[116|[105|[118|[101|[95|[100|[101|[99|[111|[100|[101|[44|[69|[114|[114|[125|[125|[41]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|['nl'|[[32|[32|[101|[110|[100|[46]]]]]]|['nl']]]]]])
'gen_decode_selected_type'/2 =
    %% Line 363
    fun (_cor1,_cor0) ->
	%% Line 364
	( case _cor0 of
	    ( <( {'typedef',_cor38,_cor39,_cor40,_rec20}
		 -| ['compiler_generated'] )> when 'true' ->
		  %% Line 365
		  ( case _rec20 of
		      ( <( {'type',_cor42,_rec21,_cor43,_cor44,_cor45}
			   -| ['compiler_generated'] )> when 'true' ->
			    let <InnerType> =
				call 'asn1ct_gen':'get_inner'
				    (_rec21)
			    in  let <_cor22> =
				    %% Line 367
				    ( letrec
					  'lc$^0'/1 =
					      fun (_cor13) ->
						  case _cor13 of
						    <[%% Line 368
						      X|_cor10]> when 'true' ->
							( case X of
							    ( <( {'tag',_rec23,_cor47,_cor48,_cor49}
								 -| ['compiler_generated'] )> when 'true' ->
								  let <_cor18> =
								      apply 'decode_class'/1
									  (_rec23)
								  in  let <_cor19> =
									  call 'erlang':'bsl'
									      (_cor18, 10)
								      in  let <_cor20> =
									      call 'erlang':'+'
										  (_cor19, _cor47)
									  in  let <_cor21> =
										  %% Line 368
										  apply 'lc$^0'/1
										      (_cor10)
									      in  ( [_cor20|_cor21]
										    -| ['compiler_generated'] )
							      -| ['compiler_generated'] )
							    ( <_cor50> when 'true' ->
								  ( call ( 'erlang'
									   -| ['compiler_generated'] ):( 'error'
													 -| ['compiler_generated'] )
									(( {'badrecord','tag'}
									   -| ['compiler_generated'] ))
								    -| ['compiler_generated'] )
							      -| ['compiler_generated'] )
							  end
							  -| ['compiler_generated'] )
						    <[]> when 'true' ->
							[]
						    ( <_cor13> when 'true' ->
							  ( primop 'match_fail'
								({'function_clause',_cor13})
							    -| [{'function_name',{'lc$^0',1}}] )
						      -| ['compiler_generated'] )
						  end
				      in  apply 'lc$^0'/1
					      (_cor42)
				      -| ['list_comprehension'] )
				in  %% Line 369
				    case call 'asn1ct_gen':'type'
					     (InnerType) of
				      %% Line 370
				      <'ASN1_OPEN_TYPE'> when 'true' ->
					  do  %% Line 371
					      call 'asn1ct_name':'new'
						  ('len')
					      let <_cor26> =
						  %% Line 372
						  call 'erlang':'setelement'
						      (3, _rec20, 'ASN1_OPEN_TYPE')
					      in  %% Line 372
						  apply 'gen_dec_prim'/3
						      (_cor26, [84|[108|[118]]], _cor22)
				      %% Line 374
				      <{'primitive','bif'}> when 'true' ->
					  do  %% Line 375
					      call 'asn1ct_name':'new'
						  ('len')
					      %% Line 376
					      apply 'gen_dec_prim'/3
						  (_rec20, [84|[108|[118]]], _cor22)
				      %% Line 377
				      <{'constructed','bif'}> when 'true' ->
					  let <_cor30> =
					      %% Line 378
					      case _cor40 of
						%% Line 379
						<A>
						    when call 'erlang':'is_atom'
							  (_cor40) ->
						    [A|[]]
						%% Line 380
						<N> when 'true' ->
						    N
					      end
					  in  let <_cor32> =
						  %% Line 383
						  call 'asn1ct_gen':'list2name'
						      (_cor30)
					      in  let <DecFunName> =
						      %% Line 382
						      call 'lists':'concat'
							  ([[39]|['dec'|[[95]|%% Line 383
									      [_cor32|[[39]]]]]])
						  in  %% Line 384
						      call 'asn1ct_gen':'emit'
							  ([DecFunName|[[40]|[[84|[108|[118]]]|%% Line 385
											       [[44|[32]]|[{'asis',_cor22}|[[41]]]]]]])
				      %% Line 387
				      <TheType> when 'true' ->
					  let <DecFunName> =
					      %% Line 388
					      apply 'mkfuncname'/2
						  (TheType, 'dec')
					  in  %% Line 389
					      call 'asn1ct_gen':'emit'
						  ([DecFunName|[[40]|[[84|[108|[118]]]|%% Line 390
										       [[44|[32]]|[{'asis',_cor22}|[[41]]]]]]])
				    end
			-| ['compiler_generated'] )
		      ( <_cor46> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','type'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	    ( <_cor41> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','typedef'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'gen_decode'/3 =
    %% Line 401
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Erules,Typename,Type = {'type',_cor41,_cor42,_cor43,_cor44,_cor45}> when ( 'true'
										      -| ['compiler_generated'] ) ->
	      let <InnerType> =
		  %% Line 402
		  call 'asn1ct_gen':'get_inner'
		      (_cor42)
	      in  let <_cor15> =
		      %% Line 404
		      case call 'asn1ct':'get_gen_state_field'
			       ('active') of
			%% Line 405
			<'true'> when 'true' ->
			    let <Pattern> =
				%% Line 407
				call 'asn1ct':'get_gen_state_field'
				    ('namelist')
			    in  let <_cor10> =
				    %% Line 409
				    case call 'asn1ct':'maybe_saved_sindex'
					     (Typename, Pattern) of
				      %% Line 410
				      <I>
					  when let <_cor7> =
						call 'erlang':'is_integer'
						    (I)
					    in  let <_cor8> =
						    call 'erlang':'>'
							(I, 0)
						in  call 'erlang':'and'
							(_cor7, _cor8) ->
					  %% Line 411
					  call 'lists':'concat'
					      ([[95]|[I|[]]])
				      %% Line 412
				      <_cor51> when 'true' ->
					  []
				    end
				in  let <_cor12> =
					%% Line 415
					call 'asn1ct_gen':'list2name'
					    (Typename)
				    in  %% Line 414
					call 'lists':'concat'
					    ([[39|[100|[101|[99|[45|[105|[110|[99|[45]]]]]]]]]|%% Line 415
											       [_cor12|[_cor10|[]]]])
			%% Line 416
			<_cor52> when 'true' ->
			    let <_cor13> =
				%% Line 417
				call 'asn1ct_gen':'list2name'
				    (Typename)
			    in  %% Line 417
				call 'lists':'concat'
				    ([[39|[100|[101|[99|[95]]]]]|[_cor13|[]]])
		      end
		  in  %% Line 421
		      case call 'asn1ct_gen':'type'
			       (InnerType) of
			%% Line 422
			<{'constructed','bif'}> when 'true' ->
			    let <_cor20> =
				%% Line 424
				case _cor44 of
				  %% Line 425
				  <[{'objfun',_cor58}|_X_R]> when 'true' ->
				      %% Line 426
				      [44|[32|[79|[98|[106|[70|[117|[110]]]]]]]]
				  %% Line 427
				  <_cor59> when 'true' ->
				      %% Line 428
				      []
				end
			    in  do  %% Line 431
				    call 'asn1ct_gen':'emit'
					([_cor15|[[39|[40|[84|[108|[118|[44|[32|[84|[97|[103|[73|[110]]]]]]]]]]]]|[_cor20|[[41|[32|[45|[62]]]]|['nl']]]]])
				    do  %% Line 432
					apply 'dbdec'/2
					    (Typename, [84|[108|[118]]])
					%% Line 433
					call 'asn1ct_gen':'gen_decode_constructed'
					    (Erules, Typename, InnerType, Type)
			%% Line 434
			<Rec = {'Externaltypereference',_cor60,_cor61,_cor62}> when ( 'true'
										      -| ['compiler_generated'] ) ->
			    let <_cor22> =
				%% Line 435
				call 'asn1ct':'get_gen_state_field'
				    ('namelist')
			    in  %% Line 435
				case <Typename,_cor22> of
				  %% Line 436
				  <[Cname|_cor63],[{_cor64,_cor65}|_cor66]>
				      when call 'erlang':'=:='
					    (_cor64,
					     Cname) ->
				      %% Line 441
				      case call 'asn1ct':'is_function_generated'
					       (Typename) of
					%% Line 442
					<'true'> when 'true' ->
					    %% Line 443
					    'ok'
					%% Line 444
					<_cor67> when 'true' ->
					    do  %% Line 445
						call 'asn1ct':'generated_refed_func'
						    (Typename)
						let <TypeDef> =
						    %% Line 447
						    call 'asn1_db':'dbget'
							(_cor61, _cor62)
						in  %% Line 448
						    apply 'gen_decode'/2
							(Erules, TypeDef)
				      end
				  %% Line 450
				  <_fol244,_fol245> when 'true' ->
				      %% Line 451
				      'true'
				end
			%% Line 453
			<_cor70> when 'true' ->
			    %% Line 454
			    'true'
		      end
	  %% Line 462
	  <Erules,Tname,{'ComponentType',_cor71,Cname,Type,_cor72,_cor73,_cor74}> when 'true' ->
	      let <NewTname> =
		  %% Line 463
		  [Cname|Tname]
	      in  %% Line 468
		  case Type of
		    <{'type',_cor75,_cor76,_cor77,_cor78,_cor79}> when 'true' ->
			let <_cor31> =
			    call 'erlang':'setelement'
				(2, Type, [])
			in  let <_cor34> =
				%% Line 469
				call 'asn1ct':'get_gen_state_field'
				    ('active')
			    in  let <_cor33> =
				    %% Line 470
				    call 'asn1ct':'get_tobe_refed_func'
					(NewTname)
				in  %% Line 469
				    case <_cor34,_cor33> of
				      %% Line 471
				      <'true',{_cor81,NameList}> when 'true' ->
					  do  %% Line 472
					      call 'asn1ct':'update_gen_state'
						  ('namelist', NameList)
					      %% Line 474
					      apply 'gen_decode'/3
						  (Erules, NewTname, _cor31)
				      %% Line 475
				      <No,_cor82>
					  when let <_cor35> =
						call 'erlang':'=:='
						    (No, 'false')
					    in  let <_cor36> =
						    call 'erlang':'=:='
							(No, 'undefined')
						in  call 'erlang':'or'
							(_cor35, _cor36) ->
					  %% Line 476
					  apply 'gen_decode'/3
					      (Erules, NewTname, _cor31)
				      %% Line 477
				      <_fol266,_fol267> when 'true' ->
					  %% Line 478
					  'ok'
				    end
		    ( <_cor80> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','type'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  ( <_cor40,_cor39,_cor38> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor40,_cor39,_cor38})
		  -| [{'function_name',{'gen_decode',3}}] )
	    -| ['compiler_generated'] )
	end
'gen_decode_user'/2 =
    %% Line 482
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Erules,D = {'typedef',_cor21,_cor22,_cor23,_cor24}> when ( 'true'
								      -| ['compiler_generated'] ) ->
	      let <Typename> =
		  %% Line 483
		  [_cor23|[]]
	      in  %% Line 485
		  ( case _cor24 of
		      ( <( {'type',_cor33,_rec32,_cor34,_cor35,_cor36}
			   -| ['compiler_generated'] )> when 'true' ->
			    let <InnerType> =
				call 'asn1ct_gen':'get_inner'
				    (_rec32)
			    in  %% Line 487
				case call 'asn1ct_gen':'type'
					 (InnerType) of
				  %% Line 488
				  <'ASN1_OPEN_TYPE'> when 'true' ->
				      do  %% Line 489
					  call 'asn1ct_name':'new'
					      ('len')
					  let <_cor14> =
					      %% Line 490
					      call 'erlang':'setelement'
						  (3, _cor24, 'ASN1_OPEN_TYPE')
					  in  do  %% Line 490
						  apply 'gen_dec_prim'/3
						      (_cor14, [84|[108|[118]]], %% Line 491
										 {'string',[84|[97|[103|[73|[110]]]]]})
						  %% Line 492
						  call 'asn1ct_gen':'emit'
						      ({[46],'nl','nl'})
				  %% Line 493
				  <{'primitive','bif'}> when 'true' ->
				      do  %% Line 494
					  call 'asn1ct_name':'new'
					      ('len')
					  do  %% Line 495
					      apply 'gen_dec_prim'/3
						  (_cor24, [84|[108|[118]]], {'string',[84|[97|[103|[73|[110]]]]]})
					      %% Line 496
					      call 'asn1ct_gen':'emit'
						  ([[46]|['nl'|['nl']]])
				  %% Line 497
				  <{'constructed','bif'}> when 'true' ->
				      do  %% Line 498
					  call 'asn1ct':'update_namelist'
					      (_cor23)
					  %% Line 499
					  call 'asn1ct_gen':'gen_decode_constructed'
					      (Erules, Typename, InnerType, D)
				  %% Line 500
				  <TheType> when 'true' ->
				      let <DecFunName> =
					  %% Line 501
					  apply 'mkfuncname'/2
					      (TheType, 'dec')
				      in  do  %% Line 502
					      call 'asn1ct_gen':'emit'
						  ([DecFunName|[[40]|[[84|[108|[118]]]|[[44|[32|[84|[97|[103|[73|[110|[41]]]]]]]]]]]])
					      %% Line 504
					      call 'asn1ct_gen':'emit'
						  ([[46]|['nl'|['nl']]])
				end
			-| ['compiler_generated'] )
		      ( <_cor37> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','type'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  ( <_cor20,_cor19> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor20,_cor19})
		  -| [{'function_name',{'gen_decode_user',2}}] )
	    -| ['compiler_generated'] )
	end
'gen_dec_prim'/3 =
    %% Line 508
    fun (_cor2,_cor1,_cor0) ->
	%% Line 509
	( case _cor2 of
	    ( <( {'type',_cor29,_rec35,_cor30,_cor31,_cor32}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <Constraint> =
		      %% Line 510
		      apply 'get_size_constraint'/1
			  (_cor30)
		  in  let <IntConstr> =
			  %% Line 511
			  apply 'int_constr'/1
			      (_cor30)
		      in  let <_cor14> =
			      %% Line 512
			      case _rec35 of
				%% Line 513
				<'NumericString'> when 'true' ->
				    'restricted_string'
				%% Line 514
				<'TeletexString'> when 'true' ->
				    'restricted_string'
				%% Line 515
				<'T61String'> when 'true' ->
				    'restricted_string'
				%% Line 516
				<'VideotexString'> when 'true' ->
				    'restricted_string'
				%% Line 517
				<'GraphicString'> when 'true' ->
				    'restricted_string'
				%% Line 518
				<'VisibleString'> when 'true' ->
				    'restricted_string'
				%% Line 519
				<'GeneralString'> when 'true' ->
				    'restricted_string'
				%% Line 520
				<'PrintableString'> when 'true' ->
				    'restricted_string'
				%% Line 521
				<'IA5String'> when 'true' ->
				    'restricted_string'
				%% Line 522
				<'ObjectDescriptor'> when 'true' ->
				    'restricted_string'
				%% Line 523
				<'UTCTime'> when 'true' ->
				    'restricted_string'
				%% Line 524
				<'GeneralizedTime'> when 'true' ->
				    'restricted_string'
				%% Line 525
				<'OCTET STRING'> when 'true' ->
				    %% Line 526
				    case call 'asn1ct':'use_legacy_types'
					     () of
				      %% Line 527
				      <'true'> when 'true' ->
					  'restricted_string'
				      %% Line 528
				      <'false'> when 'true' ->
					  _rec35
				      ( <_cor12> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_cor12})
					-| ['compiler_generated'] )
				    end
				%% Line 530
				<_cor44> when 'true' ->
				    _rec35
			      end
			  in  let <_cor17> =
				  %% Line 532
				  case _cor0 of
				    %% Line 533
				    <{'string',Tag1}> when 'true' ->
					Tag1
				    %% Line 534
				    <_cor45>
					when call 'erlang':'is_list'
					      (_cor0) ->
					{'asis',_cor0}
				    ( <_cor16> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_cor16})
				      -| ['compiler_generated'] )
				  end
			      in  %% Line 536
				  case _cor14 of
				    %% Line 537
				    <'BOOLEAN'> when 'true' ->
					%% Line 538
					apply 'call'/2
					    ('decode_boolean', [_cor1|[_cor17|[]]])
				    %% Line 539
				    <'INTEGER'> when 'true' ->
					%% Line 540
					apply 'check_constraint'/5
					    ('decode_integer', [_cor1|[_cor17|[]]], %% Line 541
										    IntConstr, %% Line 542
											       'identity', %% Line 543
													   'identity')
				    %% Line 544
				    <{'INTEGER',NNL}> when 'true' ->
					let <_cor21> =
					    %% Line 549
					    ( fun (_cor19) ->
						  do  %% Line 550
						      call 'asn1ct_name':'new'
							  ('val')
						      do  %% Line 551
							  call 'asn1ct_gen':'emit'
							      ([{'curr','val'}|[[32|[61|[32]]]]])
							  do  %% Line 552
							      apply _cor19
								  ()
							      %% Line 553
							      call 'asn1ct_gen':'emit'
								  (['com'|['nl'|%% Line 554
										[{'call','ber','number2name',%% Line 555
													     [{'curr','val'}|[{'asis',NNL}|[]]]}|%% Line 555
																		 []]]])
					      -| [{'id',{0,0,'-gen_dec_prim/3-fun-0-'}}] )
					in  %% Line 545
					    apply 'check_constraint'/5
						('decode_integer', %% Line 546
								   [_cor1|[_cor17|[]]], %% Line 547
											IntConstr, %% Line 548
												   'identity', _cor21)
				    %% Line 557
				    <{'ENUMERATED',NNL}> when 'true' ->
					%% Line 558
					apply 'gen_dec_enumerated'/3
					    (_cor1, NNL, _cor17)
				    %% Line 559
				    <'REAL'> when 'true' ->
					do  %% Line 560
					    call 'asn1ct_name':'new'
						('tmpbuf')
					    %% Line 561
					    call 'asn1ct_gen':'emit'
						([[98|[101|[103|[105|[110]]]]]|['nl'|%% Line 562
										     [{'curr','tmpbuf'}|[[32|[61|[32]]]|%% Line 563
															[{'call','ber','match_tags',[_cor1|[_cor17|[]]]}|['com'|['nl'|[{'call','real_common','decode_real',[{'curr','tmpbuf'}]}|['nl'|[[101|[110|[100]]]|['nl']]]]]]]]]]])
				    %% Line 566
				    <{'BIT STRING',NNL}> when 'true' ->
					%% Line 567
					apply 'gen_dec_bit_string'/4
					    (_cor1, Constraint, NNL, _cor17)
				    %% Line 568
				    <'NULL'> when 'true' ->
					%% Line 569
					apply 'call'/2
					    ('decode_null', [_cor1|[_cor17|[]]])
				    %% Line 570
				    <'OBJECT IDENTIFIER'> when 'true' ->
					%% Line 571
					apply 'call'/2
					    ('decode_object_identifier', [_cor1|[_cor17|[]]])
				    %% Line 572
				    <'RELATIVE-OID'> when 'true' ->
					%% Line 573
					apply 'call'/2
					    ('decode_relative_oid', [_cor1|[_cor17|[]]])
				    %% Line 574
				    <'OCTET STRING'> when 'true' ->
					%% Line 575
					apply 'check_constraint'/5
					    ('decode_octet_string', [_cor1|[_cor17|[]]], %% Line 576
											 Constraint, %% Line 576
												     {'erlang','byte_size'}, %% Line 576
															     'identity')
				    %% Line 577
				    <'restricted_string'> when 'true' ->
					let <_cor24> =
					    %% Line 581
					    ( fun (_cor22) ->
						  do  %% Line 582
						      call 'asn1ct_gen':'emit'
							  ([98|[105|[110|[97|[114|[121|[95|[116|[111|[95|[108|[105|[115|[116|[40]]]]]]]]]]]]]]])
						      do  %% Line 583
							  apply _cor22
							      ()
							  %% Line 584
							  call 'asn1ct_gen':'emit'
							      ([41])
					      -| [{'id',{0,0,'-gen_dec_prim/3-fun-1-'}}] )
					in  %% Line 578
					    apply 'check_constraint'/5
						('decode_restricted_string', [_cor1|[_cor17|[]]], %% Line 579
												  Constraint, %% Line 580
													      {'erlang','byte_size'}, _cor24)
				    %% Line 586
				    <'UniversalString'> when 'true' ->
					%% Line 587
					apply 'check_constraint'/5
					    ('decode_universal_string', [_cor1|[_cor17|[]]], %% Line 588
											     Constraint, %% Line 588
													 {'erlang','length'}, %% Line 588
															      'identity')
				    %% Line 589
				    <'UTF8String'> when 'true' ->
					%% Line 590
					apply 'call'/2
					    ('decode_UTF8_string', [_cor1|[_cor17|[]]])
				    %% Line 591
				    <'BMPString'> when 'true' ->
					%% Line 592
					apply 'check_constraint'/5
					    ('decode_BMP_string', [_cor1|[_cor17|[]]], %% Line 593
										       Constraint, %% Line 593
												   {'erlang','length'}, %% Line 593
															'identity')
				    %% Line 594
				    <'ASN1_OPEN_TYPE'> when 'true' ->
					%% Line 595
					apply 'call'/2
					    ('decode_open_type_as_binary', [_cor1|[_cor17|[]]])
				    ( <_cor25> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_cor25})
				      -| ['compiler_generated'] )
				  end
	      -| ['compiler_generated'] )
	    ( <_cor33> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','type'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'int_constr'/1 =
    %% Line 600
    fun (_cor0) ->
	%% Line 601
	case call 'asn1ct_imm':'effective_constraint'
		 ('integer', _cor0) of
	  %% Line 602
	  <[{_cor3,[]}|[]]> when 'true' ->
	      %% Line 604
	      []
	  %% Line 605
	  <[{'ValueRange',{'MIN',_cor4}}|[]]> when 'true' ->
	      %% Line 607
	      []
	  %% Line 608
	  <[{'ValueRange',Range = {_cor5,_cor6}}|[]]> when 'true' ->
	      %% Line 609
	      Range
	  %% Line 610
	  <[{'SingleValue',Sv}|[]]> when 'true' ->
	      %% Line 611
	      Sv
	  %% Line 612
	  <[]> when 'true' ->
	      %% Line 613
	      []
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor1})
	    -| ['compiler_generated'] )
	end
'gen_dec_bit_string'/4 =
    %% Line 616
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <BytesVar,_X_Constraint,NNL = [_cor12|_cor13],TagStr> when 'true' ->
	      %% Line 617
	      apply 'call'/2
		  ('decode_named_bit_string', %% Line 618
					      [BytesVar|[{'asis',NNL}|[TagStr|[]]]])
	  %% Line 619
	  <BytesVar,Constraint,[],TagStr> when 'true' ->
	      %% Line 620
	      case call 'asn1ct':'get_bit_string_format'
		       () of
		%% Line 621
		<'compact'> when 'true' ->
		    %% Line 622
		    apply 'check_constraint'/5
			('decode_compact_bit_string', %% Line 623
						      [BytesVar|[TagStr|[]]], %% Line 624
									      Constraint, %% Line 625
											  {'ber','compact_bit_string_size'}, %% Line 626
															     'identity')
		%% Line 627
		<'legacy'> when 'true' ->
		    let <_cor6> =
			%% Line 632
			( fun (_cor4) ->
			      do  %% Line 633
				  call 'asn1ct_name':'new'
				      ('val')
				  do  %% Line 634
				      call 'asn1ct_gen':'emit'
					  ([{'curr','val'}|[[32|[61|[32]]]]])
				      do  %% Line 635
					  apply _cor4
					      ()
					  %% Line 636
					  call 'asn1ct_gen':'emit'
					      (['com'|['nl'|[{'call','ber','native_to_legacy_bit_string',[{'curr','val'}]}]]])
			  -| [{'id',{0,0,'-gen_dec_bit_string/4-fun-0-'}}] )
		    in  %% Line 628
			apply 'check_constraint'/5
			    ('decode_native_bit_string', %% Line 629
							 [BytesVar|[TagStr|[]]], %% Line 630
										 Constraint, %% Line 631
											     {'erlang','bit_size'}, _cor6)
		%% Line 640
		<'bitstring'> when 'true' ->
		    %% Line 641
		    apply 'check_constraint'/5
			('decode_native_bit_string', %% Line 642
						     [BytesVar|[TagStr|[]]], %% Line 643
									     Constraint, %% Line 644
											 {'erlang','bit_size'}, %% Line 645
														'identity')
		( <_cor7> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor7})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor11,_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9,_cor8})
		  -| [{'function_name',{'gen_dec_bit_string',4}}] )
	    -| ['compiler_generated'] )
	end
'check_constraint'/5 =
    %% Line 648
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor10> =
	    %% Line 649
	    case _cor1 of
	      %% Line 650
	      <'identity'> when 'true' ->
		  %% Line 651
		  ( fun (_cor5) ->
			_cor5
		    -| [{'id',{0,0,'-check_constraint/5-fun-0-'}}] )
	      %% Line 652
	      <{Mod,Name}> when 'true' ->
		  %% Line 653
		  ( fun (_cor7) ->
			do  %% Line 654
			    call 'asn1ct_name':'new'
				('c')
			    do  %% Line 655
				call 'asn1ct_gen':'emit'
				    ([{'curr','c'}|[[32|[61|[32]]]|%% Line 656
								   [{'call',Mod,Name,[_cor7|[]]}|['com'|['nl']]]]])
				%% Line 657
				{'curr','c'}
		    -| [{'id',{0,0,'-check_constraint/5-fun-1-'}}] )
	      ( <_cor9> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor9})
		-| ['compiler_generated'] )
	    end
	in  let <_cor15> =
		%% Line 660
		case _cor0 of
		  %% Line 661
		  <'identity'> when 'true' ->
		      ( fun (_cor12) ->
			    apply _cor12
				()
			-| [{'id',{0,0,'-check_constraint/5-fun-2-'}}] )
		  %% Line 662
		  <_cor29> when 'true' ->
		      _cor0
		end
	    in  %% Line 664
		case _cor2 of
		  %% Line 665
		  <[]>
		      when call 'erlang':'=:='
			    (_cor0,
			     'identity') ->
		      %% Line 667
		      apply 'call'/2
			  (_cor4, _cor3)
		  %% Line 668
		  <[]> when 'true' ->
		      do  %% Line 671
			  call 'asn1ct_gen':'emit'
			      ([[98|[101|[103|[105|[110]]]]]|['nl']])
			  let <_cor17> =
			      %% Line 672
			      ( fun () ->
				    apply 'call'/2
					(_cor4, _cor3)
				-| [{'id',{0,0,'-check_constraint/5-fun-3-'}}] )
			  in  do  %% Line 672
				  apply _cor15
				      (_cor17)
				  %% Line 673
				  call 'asn1ct_gen':'emit'
				      (['nl'|[[101|[110|[100]]]|['nl']]])
		  %% Line 675
		  <_cor30> when 'true' ->
		      do  %% Line 677
			  call 'asn1ct_name':'new'
			      ('val')
			  do  %% Line 678
			      call 'asn1ct_gen':'emit'
				  ([[98|[101|[103|[105|[110]]]]]|['nl'|%% Line 679
								       [{'curr','val'}|[[32|[61|[32]]]|[{'call','ber',_cor4,_cor3}|['com'|['nl']]]]]]])
			      let <_cor18> =
				  %% Line 680
				  call 'asn1ct_name':'curr'
				      ('val')
			      in  let <PreVal0> =
				      %% Line 680
				      call 'asn1ct_gen':'mk_var'
					  (_cor18)
				  in  let <PreVal> =
					  %% Line 681
					  apply _cor10
					      (PreVal0)
				      in  do  %% Line 682
					      call 'asn1ct_gen':'emit'
						  ([105|[102|[32]]])
					      do  %% Line 683
						  case _cor2 of
						    %% Line 684
						    <{Min,Max}> when 'true' ->
							%% Line 685
							call 'asn1ct_gen':'emit'
							    ([{'asis',Min}|[[32|[61|[60|[32]]]]|[PreVal|[[44|[32]]|%% Line 686
														   [PreVal|[[32|[61|[60|[32]]]]|[{'asis',Max}|[]]]]]]]])
						    %% Line 687
						    <Sv>
							when call 'erlang':'is_integer'
							      (_cor2) ->
							%% Line 688
							call 'asn1ct_gen':'emit'
							    ([PreVal|[[32|[61|[58|[61|[32]]]]]|[{'asis',Sv}|[]]]])
						    ( <_cor21> when 'true' ->
							  primop 'match_fail'
							      ({'case_clause',_cor21})
						      -| ['compiler_generated'] )
						  end
						  do  %% Line 690
						      call 'asn1ct_gen':'emit'
							  ([[32|[45|[62]]]|['nl']])
						      let <_cor22> =
							  %% Line 691
							  ( fun () ->
								call 'asn1ct_gen':'emit'
								    (PreVal0)
							    -| [{'id',{0,0,'-check_constraint/5-fun-4-'}}] )
						      in  do  %% Line 691
							      apply _cor15
								  (_cor22)
							      %% Line 692
							      call 'asn1ct_gen':'emit'
								  ([[59]|['nl'|[[116|[114|[117|[101|[32|[45|[62]]]]]]]|['nl'|[[101|[120|[105|[116|[40|[123|[101|[114|[114|[111|[114|[44|[123|[97|[115|[110|[49|[44|[98|[97|[100|[95|[114|[97|[110|[103|[101|[125|[125|[41]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|['nl'|[[101|[110|[100]]]|['nl'|[[101|[110|[100]]]]]]]]]]]])
		end
'gen_dec_enumerated'/3 =
    %% Line 699
    fun (_cor2,_cor1,_cor0) ->
	do  %% Line 700
	    call 'asn1ct_name':'new'
		('enum')
	    do  %% Line 701
		call 'asn1ct_gen':'emit'
		    ([[99|[97|[115|[101|[32]]]]]|%% Line 702
						 [{'call','ber','decode_integer',[_cor2|[_cor0|[]]]}|%% Line 703
												     [[32|[111|[102]]]|['nl']]]])
		let <_cor5> =
		    %% Line 704
		    case _cor1 of
		      %% Line 705
		      <{L1,L2}> when 'true' ->
			  let <_cor3> =
			      %% Line 706
			      call 'erlang':'++'
				  (L2, ['accept'])
			  in  %% Line 706
			      call 'erlang':'++'
				  (L1, _cor3)
		      %% Line 707
		      <[_cor10|_cor11]> when 'true' ->
			  %% Line 708
			  call 'erlang':'++'
			      (_cor1, ['error'])
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor4})
			-| ['compiler_generated'] )
		    end
		in  do  %% Line 710
			apply 'gen_dec_enumerated_1'/1
			    (_cor5)
			%% Line 711
			call 'asn1ct_gen':'emit'
			    ([101|[110|[100]]])
'gen_dec_enumerated_1'/1 =
    %% Line 713
    fun (_cor0) ->
	case _cor0 of
	  <['accept']> when 'true' ->
	      do  %% Line 714
		  call 'asn1ct_name':'new'
		      ('default')
		  %% Line 715
		  call 'asn1ct_gen':'emit'
		      ([{'curr','default'}|[[32|[45|[62|[32|[123|[97|[115|[110|[49|[95|[101|[110|[117|[109|[44]]]]]]]]]]]]]]]|[{'curr','default'}|[[125]|['nl']]]]])
	  %% Line 716
	  <['error']> when 'true' ->
	      do  %% Line 717
		  call 'asn1ct_name':'new'
		      ('default')
		  %% Line 718
		  call 'asn1ct_gen':'emit'
		      ([{'curr','default'}|[[32|[45|[62|[32|[101|[120|[105|[116|[40|[123|[101|[114|[114|[111|[114|[44|[123|[97|[115|[110|[49|[44|[123|[105|[108|[108|[101|[103|[97|[108|[95|[101|[110|[117|[109|[101|[114|[97|[116|[101|[100|[44]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[{'curr','default'}|[[125|[125|[125|[41]]]]|['nl']]]]])
	  %% Line 720
	  <[{V,K}|T]> when 'true' ->
	      do  %% Line 721
		  call 'asn1ct_gen':'emit'
		      ([{'asis',K}|[[32|[45|[62|[32]]]]|[{'asis',V}|[[59]|['nl']]]]])
		  %% Line 722
		  apply 'gen_dec_enumerated_1'/1
		      (T)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'gen_dec_enumerated_1',1}}] )
	    -| ['compiler_generated'] )
	end
'gen_obj_code'/3 =
    %% Line 728
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Erules,_X_Module,Obj = {'typedef',_cor23,_cor24,_cor25,_cor26}> when ( 'true'
										  -| ['compiler_generated'] ) ->
	      %% Line 731
	      ( case _cor26 of
		  ( <( {'Object',_rec40,_cor35,_cor36}
		       -| ['compiler_generated'] )> when 'true' ->
			case _rec40 of
			  <{'Externaltypereference',_cor38,M,ClName}> when 'true' ->
			      let <Class> =
				  %% Line 732
				  call 'asn1_db':'dbget'
				      (M, ClName)
			      in  %% Line 733
				  case _cor36 of
				    <{'object',_cor42,Fields}> when 'true' ->
					do  %% Line 734
					    call 'asn1ct_gen':'emit'
						({'nl','nl','nl',[37|[37|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]})
					    do  %% Line 735
						call 'asn1ct_gen':'emit'
						    ({'nl',[37|[37|[32|[32]]]],_cor25})
						do  %% Line 736
						    call 'asn1ct_gen':'emit'
							({'nl',[37|[37|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],'nl'})
						    let <_cor16> =
							%% Line 738
							apply 'get_class_fields'/1
							    (Class)
						    in  let <EncConstructed> =
							    %% Line 738
							    apply 'gen_encode_objectfields'/5
								(ClName, _cor16, _cor25, %% Line 739
											 Fields, %% Line 739
												 [])
							in  do  %% Line 740
								call 'asn1ct_gen':'emit'
								    ('nl')
								do  %% Line 741
								    apply 'gen_encode_constr_type'/2
									(Erules, EncConstructed)
								    do  %% Line 742
									call 'asn1ct_gen':'emit'
									    ('nl')
									let <_cor18> =
									    %% Line 744
									    apply 'get_class_fields'/1
										(Class)
									in  let <DecConstructed> =
										%% Line 744
										apply 'gen_decode_objectfields'/5
										    (ClName, _cor18, _cor25, %% Line 745
													     Fields, %% Line 745
														     [])
									    in  do  %% Line 746
										    call 'asn1ct_gen':'emit'
											('nl')
										    do  %% Line 747
											apply 'gen_decode_constr_type'/2
											    (Erules, DecConstructed)
											%% Line 748
											apply 'emit_tlv_format_function'/0
											    ()
				    ( <_cor15> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor15})
				      -| ['compiler_generated'] )
				  end
			  ( <_cor11> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor11})
			    -| ['compiler_generated'] )
			end
		    -| ['compiler_generated'] )
		  ( <_cor37> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','Object'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_cor22,_cor21,_cor20> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor22,_cor21,_cor20})
		  -| [{'function_name',{'gen_obj_code',3}}] )
	    -| ['compiler_generated'] )
	end
'gen_encode_objectfields'/5 =
    %% Line 750
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <ClassName,[{'typefield',Name,OptOrMand}|Rest],%% Line 751
							 ObjName,%% Line 751
								 ObjectFields,%% Line 751
									      ConstrAcc> when 'true' ->
	      let <EmitFuncClause> =
		  %% Line 753
		  ( fun (_cor5) ->
			%% Line 754
			call 'asn1ct_gen':'emit'
			    ([[39|[101|[110|[99|[95]]]]]|[ObjName|[[39|[40]]|[{'asis',Name}|%% Line 755
											    [[44|[32]]|[_cor5|[[44|[32|[95|[82|[101|[115|[116|[80|[114|[105|[109|[70|[105|[101|[108|[100|[78|[97|[109|[101|[41|[32|[45|[62]]]]]]]]]]]]]]]]]]]]]]]]|['nl']]]]]]]])
		    -| [{'id',{0,0,'-gen_encode_objectfields/5-fun-0-'}}] )
	      in  let <_cor8> =
		      %% Line 760
		      apply 'get_object_field'/2
			  (Name, ObjectFields)
		  in  let <_cor10> =
			  %% Line 760
			  case <_cor8,OptOrMand> of
			    %% Line 761
			    <'false','OPTIONAL'> when 'true' ->
				do  %% Line 762
				    apply EmitFuncClause
					([86|[97|[108]]])
				    do  %% Line 763
					call 'asn1ct_gen':'emit'
					    ([[32|[32|[32|[123|[86|[97|[108|[44|[48|[125]]]]]]]]]]])
					%% Line 764
					[]
			    %% Line 765
			    <'false',{'DEFAULT',DefaultType}> when 'true' ->
				do  %% Line 766
				    apply EmitFuncClause
					([86|[97|[108]]])
				    %% Line 767
				    apply 'gen_encode_default_call'/3
					(ClassName, Name, DefaultType)
			    %% Line 768
			    <{_cor33,TypeSpec},_cor34>
				when call 'erlang':'=:='
				      (_cor33,
				       Name) ->
				do  %% Line 771
				    apply EmitFuncClause
					([86|[97|[108]]])
				    %% Line 772
				    apply 'gen_encode_field_call'/3
					(ObjName, Name, TypeSpec)
			    ( <_fol384,_fol385> when 'true' ->
				  let <_cor9> = {_fol384,_fol385}
				  in  primop 'match_fail'
					  ({'case_clause',_cor9})
			      -| ['compiler_generated'] )
			  end
		      in  do  %% Line 774
			      case apply 'more_genfields'/1
				       (Rest) of
				%% Line 775
				<'true'> when 'true' ->
				    %% Line 776
				    call 'asn1ct_gen':'emit'
					([[59]|['nl']])
				%% Line 777
				<'false'> when 'true' ->
				    %% Line 778
				    call 'asn1ct_gen':'emit'
					([[46]|['nl']])
				( <_cor12> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor12})
				  -| ['compiler_generated'] )
			      end
			      let <_cor13> =
				  %% Line 781
				  call 'erlang':'++'
				      (_cor10, ConstrAcc)
			      in  %% Line 780
				  apply 'gen_encode_objectfields'/5
				      (ClassName, Rest, ObjName, ObjectFields, _cor13)
	  %% Line 782
	  <ClassName,[{'objectfield',Name,_cor35,_cor36,OptOrMand}|Rest],%% Line 783
									 ObjName,%% Line 783
										 ObjectFields,%% Line 783
											      ConstrAcc> when 'true' ->
	      let <CurrentMod> =
		  %% Line 784
		  call 'erlang':'get'
		      ('currmod')
	      in  let <EmitFuncClause> =
		      %% Line 786
		      ( fun (_cor15) ->
			    %% Line 787
			    call 'asn1ct_gen':'emit'
				([[39|[101|[110|[99|[95]]]]]|[ObjName|[[39|[40]]|[{'asis',Name}|%% Line 788
												[[44|[32]]|[_cor15|[[41|[32|[45|[62]]]]|['nl']]]]]]]])
			-| [{'id',{0,0,'-gen_encode_objectfields/5-fun-1-'}}] )
		  in  let <_cor18> =
			  %% Line 792
			  apply 'get_object_field'/2
			      (Name, ObjectFields)
		      in  do  %% Line 792
			      case <_cor18,OptOrMand> of
				%% Line 793
				<'false','OPTIONAL'> when 'true' ->
				    do  %% Line 794
					apply EmitFuncClause
					    ([95|[44|[95]]])
					%% Line 795
					call 'asn1ct_gen':'emit'
					    ([[32|[32|[101|[120|[105|[116|[40|[123|[101|[114|[114|[111|[114|[44|[123|[39|[117|[115|[101|[32|[111|[102|[32|[109|[105|[115|[115|[105|[110|[103|[32|[102|[105|[101|[108|[100|[32|[105|[110|[32|[111|[98|[106|[101|[99|[116|[39|[44|[32]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[{'asis',Name}|%% Line 796
																																										    [[125|[125|[41]]]]]])
				%% Line 797
				<'false',{'DEFAULT',_X_DefaultObject}> when 'true' ->
				    %% Line 798
				    call 'erlang':'exit'
					({'error',{'asn1',{[110|[111|[116|[32|[105|[109|[112|[108|[101|[109|[101|[110|[116|[101|[100|[32|[121|[101|[116]]]]]]]]]]]]]]]]]]],Name}}})
				%% Line 799
				<{_cor37,{'Externalvaluereference',_cor38,_cor39,%% Line 800
										 TypeName}},_cor40>
				    when let <_cor41> =
					  call 'erlang':'=:='
					      (_cor37, Name)
				      in  let <_cor42> =
					      call 'erlang':'=:='
						  (_cor39, CurrentMod)
					  in  call 'erlang':'and'
						  (_cor41, _cor42) ->
				    do  %% Line 801
					apply EmitFuncClause
					    ([32|[86|[97|[108|[44|[32|[91|[72|[124|[84|[93]]]]]]]]]]])
					let <_cor19> =
					    %% Line 802
					    apply 'indent'/1
						(3)
					in  %% Line 802
					    call 'asn1ct_gen':'emit'
						({_cor19,[39|[101|[110|[99|[95]]]]],TypeName,[39|[40|[72|[44|[32|[86|[97|[108|[44|[32|[84|[41]]]]]]]]]]]]})
				%% Line 803
				<{_cor43,{'Externalvaluereference',_cor44,M,TypeName}},_cor45>
				    when call 'erlang':'=:='
					  (_cor43,
					   Name) ->
				    do  %% Line 804
					apply EmitFuncClause
					    ([32|[86|[97|[108|[44|[32|[91|[72|[124|[84|[93]]]]]]]]]]])
					let <_cor20> =
					    %% Line 805
					    apply 'indent'/1
						(3)
					in  %% Line 805
					    call 'asn1ct_gen':'emit'
						({_cor20,[39],M,[39|[58|[39|[101|[110|[99|[95]]]]]]],TypeName,[39|[40|[72|[44|[32|[86|[97|[108|[44|[32|[84|[41]]]]]]]]]]]]})
				%% Line 806
				<{_cor46,TypeSpec},_cor47>
				    when call 'erlang':'=:='
					  (_cor46,
					   Name) ->
				    do  %% Line 807
					apply EmitFuncClause
					    ([32|[86|[97|[108|[44|[32|[91|[72|[124|[84|[93]]]]]]]]]]])
					%% Line 808
					( case TypeSpec of
					    ( <( {'typedef',_cor48,_cor49,_rec42,_cor50}
						 -| ['compiler_generated'] )> when 'true' ->
						  case _rec42 of
						    %% Line 809
						    <{ExtMod,TypeName}> when 'true' ->
							let <_cor23> =
							    %% Line 810
							    apply 'indent'/1
								(3)
							in  %% Line 810
							    call 'asn1ct_gen':'emit'
								({_cor23,[39],ExtMod,[39|[58|[39|[101|[110|[99|[95]]]]]]],TypeName,%% Line 811
																   [39|[40|[72|[44|[32|[86|[97|[108|[44|[32|[84|[41]]]]]]]]]]]]})
						    %% Line 812
						    <TypeName> when 'true' ->
							let <_cor24> =
							    %% Line 813
							    apply 'indent'/1
								(3)
							in  %% Line 813
							    call 'asn1ct_gen':'emit'
								({_cor24,[39|[101|[110|[99|[95]]]]],TypeName,[39|[40|[72|[44|[32|[86|[97|[108|[44|[32|[84|[41]]]]]]]]]]]]})
						  end
					      -| ['compiler_generated'] )
					    ( <_cor51> when 'true' ->
						  ( call ( 'erlang'
							   -| ['compiler_generated'] ):( 'error'
											 -| ['compiler_generated'] )
							(( {'badrecord','typedef'}
							   -| ['compiler_generated'] ))
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					  end
					  -| ['compiler_generated'] )
				( <_fol387,_fol388> when 'true' ->
				      let <_cor26> = {_fol387,_fol388}
				      in  primop 'match_fail'
					      ({'case_clause',_cor26})
				  -| ['compiler_generated'] )
			      end
			      do  %% Line 816
				  case apply 'more_genfields'/1
					   (Rest) of
				    %% Line 817
				    <'true'> when 'true' ->
					%% Line 818
					call 'asn1ct_gen':'emit'
					    ([[59]|['nl']])
				    %% Line 819
				    <'false'> when 'true' ->
					%% Line 820
					call 'asn1ct_gen':'emit'
					    ([[46]|['nl']])
				    ( <_cor27> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_cor27})
				      -| ['compiler_generated'] )
				  end
				  %% Line 822
				  apply 'gen_encode_objectfields'/5
				      (ClassName, Rest, ObjName, ObjectFields, ConstrAcc)
	  %% Line 825
	  <ClassName,[_X_C|Cs],O,OF,Acc> when 'true' ->
	      %% Line 826
	      apply 'gen_encode_objectfields'/5
		  (ClassName, Cs, O, OF, Acc)
	  %% Line 827
	  <_cor52,[],_cor53,_cor54,Acc> when 'true' ->
	      %% Line 828
	      Acc
	  ( <_cor32,_cor31,_cor30,_cor29,_cor28> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor32,_cor31,_cor30,_cor29,_cor28})
		  -| [{'function_name',{'gen_encode_objectfields',5}}] )
	    -| ['compiler_generated'] )
	end
'gen_encode_constr_type'/2 =
    %% Line 830
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Erules,[TypeDef = {'typedef',_cor7,_cor8,_cor9,_cor10}|Rest]> when ( 'true'
										-| ['compiler_generated'] ) ->
	      do  %% Line 831
		  case apply 'is_already_generated'/2
			   ('enc', _cor9) of
		    %% Line 832
		    <'true'> when 'true' ->
			'ok'
		    %% Line 833
		    <'false'> when 'true' ->
			apply 'gen_encode_user'/3
			    (Erules, TypeDef, 'false')
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor4})
		      -| ['compiler_generated'] )
		  end
		  %% Line 835
		  apply 'gen_encode_constr_type'/2
		      (Erules, Rest)
	  %% Line 836
	  <_cor15,[]> when 'true' ->
	      %% Line 837
	      'ok'
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'gen_encode_constr_type',2}}] )
	    -| ['compiler_generated'] )
	end
'gen_encode_field_call'/3 =
    %% Line 839
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <_X_ObjName,_X_FieldName,%% Line 840
				   {'Externaltypereference',_cor57,M,T}> when 'true' ->
	      let <CurrentMod> =
		  %% Line 841
		  call 'erlang':'get'
		      ('currmod')
	      in  %% Line 843
		  ( case call 'asn1_db':'dbget'
			     (M, T) of
		      ( <( {'typedef',_cor58,_cor59,_cor60,_rec44}
			   -| ['compiler_generated'] )> when 'true' ->
			    %% Line 844
			    ( case _rec44 of
				( <( {'type',_rec45,_cor62,_cor63,_cor64,_cor65}
				     -| ['compiler_generated'] )> when 'true' ->
				      let <_cor23> =
					  %% Line 845
					  ( letrec
						'lc$^0'/1 =
						    fun (_cor13) ->
							case _cor13 of
							  <[%% Line 847
							    X|_cor12]> when 'true' ->
							      ( case X of
								  ( <( {'tag',_rec46,_cor67,_cor68,_cor69}
								       -| ['compiler_generated'] )> when 'true' ->
									let <_cor20> =
									    apply 'decode_class'/1
										(_rec46)
									in  let <_cor21> =
										apply 'encode_tag_val'/3
										    (_cor20, _cor69, _cor67)
									    in  let <_cor22> =
										    %% Line 847
										    apply 'lc$^0'/1
											(_cor12)
										in  ( [_cor21|_cor22]
										      -| ['compiler_generated'] )
								    -| ['compiler_generated'] )
								  ( <_cor70> when 'true' ->
									( call ( 'erlang'
										 -| ['compiler_generated'] ):( 'error'
													       -| ['compiler_generated'] )
									      (( {'badrecord','tag'}
										 -| ['compiler_generated'] ))
									  -| ['compiler_generated'] )
								    -| ['compiler_generated'] )
								end
								-| ['compiler_generated'] )
							  <[]> when 'true' ->
							      []
							  ( <_cor13> when 'true' ->
								( primop 'match_fail'
								      ({'function_clause',_cor13})
								  -| [{'function_name',{'lc$^0',1}}] )
							    -| ['compiler_generated'] )
							end
					    in  apply 'lc$^0'/1
						    (_rec45)
					    -| ['list_comprehension'] )
				      in  %% Line 848
					  case <> of
					    %% Line 849
					    <>
						when call 'erlang':'=='
						      (M,
						       CurrentMod) ->
						do  %% Line 850
						    call 'asn1ct_gen':'emit'
							({[32|[32|[32|[39|[101|[110|[99|[95]]]]]]]],T,[39|[40|[86|[97|[108|[44|[32]]]]]]],{'asis',_cor23},[41]})
						    %% Line 851
						    []
					    %% Line 852
					    <> when 'true' ->
						do  %% Line 853
						    call 'asn1ct_gen':'emit'
							({[32|[32|[32|[39]]]],M,[39|[58|[39|[101|[110|[99|[95]]]]]]],T,[39|[40|[86|[97|[108|[44|[32]]]]]]],{'asis',_cor23},[41]})
						    %% Line 854
						    []
					  end
				  -| ['compiler_generated'] )
				( <_cor66> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {'badrecord','type'}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		      ( <_cor61> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','typedef'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  %% Line 856
	  <ObjName,FieldName,Type> when 'true' ->
	      %% Line 857
	      ( case Type of
		  ( <( {'typedef',_cor79,_cor80,_cor81,_rec49}
		       -| ['compiler_generated'] )> when 'true' ->
			%% Line 858
			( case _rec49 of
			    ( <( {'type',_rec50,_cor83,_cor84,_cor85,_cor86}
				 -| ['compiler_generated'] )> when 'true' ->
				  let <_cor43> =
				      %% Line 859
				      ( letrec
					    'lc$^1'/1 =
						fun (_cor33) ->
						    case _cor33 of
						      <[%% Line 861
							X|_cor32]> when 'true' ->
							  ( case X of
							      ( <( {'tag',_rec51,_cor88,_cor89,_cor90}
								   -| ['compiler_generated'] )> when 'true' ->
								    let <_cor40> =
									apply 'decode_class'/1
									    (_rec51)
								    in  let <_cor41> =
									    apply 'encode_tag_val'/3
										(_cor40, _cor90, _cor88)
									in  let <_cor42> =
										%% Line 861
										apply 'lc$^1'/1
										    (_cor32)
									    in  ( [_cor41|_cor42]
										  -| ['compiler_generated'] )
								-| ['compiler_generated'] )
							      ( <_cor91> when 'true' ->
								    ( call ( 'erlang'
									     -| ['compiler_generated'] ):( 'error'
													   -| ['compiler_generated'] )
									  (( {'badrecord','tag'}
									     -| ['compiler_generated'] ))
								      -| ['compiler_generated'] )
								-| ['compiler_generated'] )
							    end
							    -| ['compiler_generated'] )
						      <[]> when 'true' ->
							  []
						      ( <_cor33> when 'true' ->
							    ( primop 'match_fail'
								  ({'function_clause',_cor33})
							      -| [{'function_name',{'lc$^1',1}}] )
							-| ['compiler_generated'] )
						    end
					in  apply 'lc$^1'/1
						(_rec50)
					-| ['list_comprehension'] )
				  in  %% Line 862
				      case _cor81 of
					%% Line 863
					<{'primitive','bif'}> when 'true' ->
					    let <_cor47> =
						%% Line 868
						call 'lists':'reverse'
						    (_cor43)
					    in  do  %% Line 868
						    apply 'gen_encode_prim'/4
							('ber', _rec49, {'asis',_cor47}, %% Line 869
											 [86|[97|[108]]])
						    %% Line 870
						    []
					%% Line 871
					<{'constructed','bif'}> when 'true' ->
					    do  %% Line 872
						call 'asn1ct_gen':'emit'
						    ({[32|[32|[32|[39|[101|[110|[99|[95]]]]]]]],ObjName,'_',FieldName,%% Line 873
														      [39|[40|[86|[97|[108|[44]]]]]],%% Line 873
																		     {'asis',_cor43},%% Line 873
																				     [41]})
						let <_cor48> =
						    %% Line 874
						    call 'lists':'concat'
							([ObjName|['_'|[FieldName|[]]]])
						in  let <_rec55> =
							%% Line 874
							call 'erlang':'list_to_atom'
							    (_cor48)
						    in  let <_cor52> =
							    %% Line 874
							    call 'erlang':'setelement'
								(4, Type, _rec55)
							in  %% Line 874
							    [_cor52|[]]
					%% Line 875
					<{ExtMod,TypeName}> when 'true' ->
					    do  %% Line 876
						call 'asn1ct_gen':'emit'
						    ({[32|[32|[32|[39]]]],ExtMod,[39|[58|[39|[101|[110|[99|[95]]]]]]],TypeName,%% Line 877
															       [39|[40|[86|[97|[108|[44]]]]]],%% Line 877
																			      {'asis',_cor43},%% Line 877
																					      [41]})
						%% Line 878
						[]
					%% Line 879
					<TypeName> when 'true' ->
					    do  %% Line 880
						call 'asn1ct_gen':'emit'
						    ({[32|[32|[32|[39|[101|[110|[99|[95]]]]]]]],TypeName,[39|[40|[86|[97|[108|[44]]]]]],{'asis',_cor43},[41]})
						%% Line 881
						[]
				      end
			      -| ['compiler_generated'] )
			    ( <_cor87> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','type'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  ( <_cor82> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','typedef'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'gen_encode_default_call'/3 =
    %% Line 884
    fun (_cor2,_cor1,_cor0) ->
	let <CurrentMod> =
	    %% Line 885
	    call 'erlang':'get'
		('currmod')
	in  %% Line 886
	    ( case _cor0 of
		( <( {'type',_cor31,_rec57,_cor32,_cor33,_cor34}
		     -| ['compiler_generated'] )> when 'true' ->
		      let <InnerType> =
			  call 'asn1ct_gen':'get_inner'
			      (_rec57)
		      in  let <_cor22> =
			      %% Line 888
			      ( letrec
				    'lc$^0'/1 =
					fun (_cor12) ->
					    case _cor12 of
					      <[X|_cor11]> when 'true' ->
						  ( case X of
						      ( <( {'tag',_rec59,_cor41,_cor42,_cor43}
							   -| ['compiler_generated'] )> when 'true' ->
							    let <_cor19> =
								apply 'decode_class'/1
								    (_rec59)
							    in  let <_cor20> =
								    apply 'encode_tag_val'/3
									(_cor19, _cor43, _cor41)
								in  let <_cor21> =
									apply 'lc$^0'/1
									    (_cor11)
								    in  ( [_cor20|_cor21]
									  -| ['compiler_generated'] )
							-| ['compiler_generated'] )
						      ( <_cor44> when 'true' ->
							    ( call ( 'erlang'
								     -| ['compiler_generated'] ):( 'error'
												   -| ['compiler_generated'] )
								  (( {'badrecord','tag'}
								     -| ['compiler_generated'] ))
							      -| ['compiler_generated'] )
							-| ['compiler_generated'] )
						    end
						    -| ['compiler_generated'] )
					      <[]> when 'true' ->
						  []
					      ( <_cor12> when 'true' ->
						    ( primop 'match_fail'
							  ({'function_clause',_cor12})
						      -| [{'function_name',{'lc$^0',1}}] )
						-| ['compiler_generated'] )
					    end
				in  apply 'lc$^0'/1
					(_cor31)
				-| ['list_comprehension'] )
			  in  %% Line 889
			      case call 'asn1ct_gen':'type'
				       (InnerType) of
				%% Line 890
				<{'constructed','bif'}> when 'true' ->
				    do  %% Line 891
					call 'asn1ct_gen':'emit'
					    ([[32|[32|[32|[39|[101|[110|[99|[95]]]]]]]]|[_cor2|['_'|[_cor1|[[39]|%% Line 892
														 [[40|[86|[97|[108|[44|[32]]]]]]|[{'asis',_cor22}|[[41]]]]]]]]])
					let <_cor24> =
					    %% Line 893
					    call 'lists':'concat'
						([_cor2|['_'|[_cor1|[]]]])
					in  let <_cor25> =
						%% Line 893
						call 'erlang':'list_to_atom'
						    (_cor24)
					    in  %% Line 893
						[{'typedef','false','undefined',_cor25,_cor0}|%% Line 894
											      []]
				%% Line 895
				<{'primitive','bif'}> when 'true' ->
				    let <_cor26> =
					%% Line 896
					call 'lists':'reverse'
					    (_cor22)
				    in  do  %% Line 896
					    apply 'gen_encode_prim'/4
						('ber', _cor0, {'asis',_cor26}, [86|[97|[108]]])
					    %% Line 897
					    []
				%% Line 898
				<{'Externaltypereference',_cor53,_cor54,Etype}>
				    when call 'erlang':'=:='
					  (_cor54,
					   CurrentMod) ->
				    do  %% Line 899
					call 'asn1ct_gen':'emit'
					    ([[32|[32|[32|[39|[101|[110|[99|[95]]]]]]]]|[Etype|[[39|[40|[86|[97|[108|[44|[32]]]]]]]|[{'asis',_cor22}|[[41]|['nl']]]]]])
					%% Line 900
					[]
				%% Line 901
				<{'Externaltypereference',_cor55,Emod,Etype}> when 'true' ->
				    do  %% Line 902
					call 'asn1ct_gen':'emit'
					    ([[32|[32|[32|[39]]]]|[Emod|[[39|[58|[39|[101|[110|[99|[95]]]]]]]|[Etype|[[39|[40|[86|[97|[108|[44|[32]]]]]]]|[{'asis',_cor22}|[[41]|['nl']]]]]]]])
					%% Line 903
					[]
				( <_cor27> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor27})
				  -| ['compiler_generated'] )
			      end
		  -| ['compiler_generated'] )
		( <_cor35> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','type'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	      -| ['compiler_generated'] )
'gen_decode_objectfields'/5 =
    %% Line 914
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <ClassName,[{'typefield',Name,OptOrMand}|Rest],%% Line 915
							 ObjName,%% Line 915
								 ObjectFields,%% Line 915
									      ConstrAcc> when 'true' ->
	      let <EmitFuncClause> =
		  %% Line 917
		  ( fun (_cor5) ->
			%% Line 918
			call 'asn1ct_gen':'emit'
			    ([[39|[100|[101|[99|[95]]]]]|[ObjName|[[39|[40]]|[{'asis',Name}|%% Line 919
											    [[44|[32]]|[_cor5|[[44|[95|[41|[32|[45|[62]]]]]]|['nl']]]]]]]])
		    -| [{'id',{0,0,'-gen_decode_objectfields/5-fun-0-'}}] )
	      in  let <_cor8> =
		      %% Line 924
		      apply 'get_object_field'/2
			  (Name, ObjectFields)
		  in  let <_cor10> =
			  %% Line 924
			  case <_cor8,OptOrMand> of
			    %% Line 925
			    <'false','OPTIONAL'> when 'true' ->
				do  %% Line 926
				    apply EmitFuncClause
					([32|[66|[121|[116|[101|[115]]]]]])
				    do  %% Line 927
					call 'asn1ct_gen':'emit'
					    ([[32|[32|[32|[66|[121|[116|[101|[115]]]]]]]]])
					%% Line 928
					[]
			    %% Line 929
			    <'false',{'DEFAULT',DefaultType}> when 'true' ->
				do  %% Line 930
				    apply EmitFuncClause
					([66|[121|[116|[101|[115]]]]])
				    do  %% Line 931
					apply 'emit_tlv_format'/1
					    ([66|[121|[116|[101|[115]]]]])
					%% Line 932
					apply 'gen_decode_default_call'/4
					    (ClassName, Name, [84|[108|[118]]], DefaultType)
			    %% Line 933
			    <{_cor33,TypeSpec},_cor34>
				when call 'erlang':'=:='
				      (_cor33,
				       Name) ->
				do  %% Line 936
				    apply EmitFuncClause
					([66|[121|[116|[101|[115]]]]])
				    do  %% Line 937
					apply 'emit_tlv_format'/1
					    ([66|[121|[116|[101|[115]]]]])
					%% Line 938
					apply 'gen_decode_field_call'/4
					    (ObjName, Name, [84|[108|[118]]], TypeSpec)
			    ( <_fol501,_fol502> when 'true' ->
				  let <_cor9> = {_fol501,_fol502}
				  in  primop 'match_fail'
					  ({'case_clause',_cor9})
			      -| ['compiler_generated'] )
			  end
		      in  do  %% Line 940
			      case apply 'more_genfields'/1
				       (Rest) of
				%% Line 941
				<'true'> when 'true' ->
				    %% Line 942
				    call 'asn1ct_gen':'emit'
					([[59]|['nl']])
				%% Line 943
				<'false'> when 'true' ->
				    %% Line 944
				    call 'asn1ct_gen':'emit'
					([[46]|['nl']])
				( <_cor12> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor12})
				  -| ['compiler_generated'] )
			      end
			      let <_cor13> =
				  %% Line 946
				  call 'erlang':'++'
				      (_cor10, ConstrAcc)
			      in  %% Line 946
				  apply 'gen_decode_objectfields'/5
				      (ClassName, Rest, ObjName, ObjectFields, _cor13)
	  %% Line 947
	  <ClassName,[{'objectfield',Name,_cor35,_cor36,OptOrMand}|Rest],%% Line 948
									 ObjName,%% Line 948
										 ObjectFields,%% Line 948
											      ConstrAcc> when 'true' ->
	      let <CurrentMod> =
		  %% Line 949
		  call 'erlang':'get'
		      ('currmod')
	      in  let <EmitFuncClause> =
		      %% Line 951
		      ( fun (_cor15) ->
			    %% Line 952
			    call 'asn1ct_gen':'emit'
				([[39|[100|[101|[99|[95]]]]]|[ObjName|[[39|[40]]|[{'asis',Name}|%% Line 953
												[[44|[32]]|[_cor15|[[41|[32|[45|[62]]]]|['nl']]]]]]]])
			-| [{'id',{0,0,'-gen_decode_objectfields/5-fun-1-'}}] )
		  in  let <_cor18> =
			  %% Line 958
			  apply 'get_object_field'/2
			      (Name, ObjectFields)
		      in  do  %% Line 958
			      case <_cor18,OptOrMand> of
				%% Line 959
				<'false','OPTIONAL'> when 'true' ->
				    do  %% Line 960
					apply EmitFuncClause
					    ([95|[44|[95]]])
					%% Line 961
					call 'asn1ct_gen':'emit'
					    ([[32|[32|[101|[120|[105|[116|[40|[123|[101|[114|[114|[111|[114|[44|[123|[39|[105|[108|[108|[101|[103|[97|[108|[32|[117|[115|[101|[32|[111|[102|[32|[109|[105|[115|[115|[105|[110|[103|[32|[102|[105|[101|[108|[100|[32|[105|[110|[32|[111|[98|[106|[101|[99|[116|[39|[44|[32]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[{'asis',Name}|%% Line 962
																																																  [[125|[125|[41]]]]]])
				%% Line 963
				<'false',{'DEFAULT',_X_DefaultObject}> when 'true' ->
				    %% Line 964
				    call 'erlang':'exit'
					({'error',{'asn1',{[110|[111|[116|[32|[105|[109|[112|[108|[101|[109|[101|[110|[116|[101|[100|[32|[121|[101|[116]]]]]]]]]]]]]]]]]]],Name}}})
				%% Line 965
				<{_cor37,{'Externalvaluereference',_cor38,_cor39,%% Line 966
										 TypeName}},_cor40>
				    when let <_cor41> =
					  call 'erlang':'=:='
					      (_cor37, Name)
				      in  let <_cor42> =
					      call 'erlang':'=:='
						  (_cor39, CurrentMod)
					  in  call 'erlang':'and'
						  (_cor41, _cor42) ->
				    do  %% Line 967
					apply EmitFuncClause
					    ([66|[121|[116|[101|[115|[44|[91|[72|[124|[84|[93]]]]]]]]]]])
					let <_cor19> =
					    %% Line 968
					    apply 'indent'/1
						(3)
					in  %% Line 968
					    call 'asn1ct_gen':'emit'
						({_cor19,[39|[100|[101|[99|[95]]]]],TypeName,[39|[40|[72|[44|[32|[66|[121|[116|[101|[115|[44|[32|[84|[41]]]]]]]]]]]]]]})
				%% Line 969
				<{_cor43,{'Externalvaluereference',_cor44,M,TypeName}},_cor45>
				    when call 'erlang':'=:='
					  (_cor43,
					   Name) ->
				    do  %% Line 970
					apply EmitFuncClause
					    ([66|[121|[116|[101|[115|[44|[91|[72|[124|[84|[93]]]]]]]]]]])
					let <_cor20> =
					    %% Line 971
					    apply 'indent'/1
						(3)
					in  %% Line 971
					    call 'asn1ct_gen':'emit'
						({_cor20,[39],M,[39|[58|[39|[100|[101|[99|[95]]]]]]],TypeName,%% Line 972
													      [39|[40|[72|[44|[32|[66|[121|[116|[101|[115|[44|[32|[84|[41]]]]]]]]]]]]]]})
				%% Line 973
				<{_cor46,TypeSpec},_cor47>
				    when call 'erlang':'=:='
					  (_cor46,
					   Name) ->
				    do  %% Line 974
					apply EmitFuncClause
					    ([66|[121|[116|[101|[115|[44|[91|[72|[124|[84|[93]]]]]]]]]]])
					%% Line 976
					( case TypeSpec of
					    ( <( {'typedef',_cor48,_cor49,_rec62,_cor50}
						 -| ['compiler_generated'] )> when 'true' ->
						  case _rec62 of
						    %% Line 977
						    <{ExtMod,TypeName}> when 'true' ->
							let <_cor23> =
							    %% Line 978
							    apply 'indent'/1
								(3)
							in  %% Line 978
							    call 'asn1ct_gen':'emit'
								({_cor23,[39],ExtMod,[39|[58|[39|[100|[101|[99|[95]]]]]]],TypeName,%% Line 979
																   [39|[40|[72|[44|[32|[66|[121|[116|[101|[115|[44|[32|[84|[41]]]]]]]]]]]]]]})
						    %% Line 980
						    <TypeName> when 'true' ->
							let <_cor24> =
							    %% Line 981
							    apply 'indent'/1
								(3)
							in  %% Line 981
							    call 'asn1ct_gen':'emit'
								({_cor24,[39|[100|[101|[99|[95]]]]],TypeName,[39|[40|[72|[44|[32|[66|[121|[116|[101|[115|[44|[32|[84|[41]]]]]]]]]]]]]]})
						  end
					      -| ['compiler_generated'] )
					    ( <_cor51> when 'true' ->
						  ( call ( 'erlang'
							   -| ['compiler_generated'] ):( 'error'
											 -| ['compiler_generated'] )
							(( {'badrecord','typedef'}
							   -| ['compiler_generated'] ))
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					  end
					  -| ['compiler_generated'] )
				( <_fol504,_fol505> when 'true' ->
				      let <_cor26> = {_fol504,_fol505}
				      in  primop 'match_fail'
					      ({'case_clause',_cor26})
				  -| ['compiler_generated'] )
			      end
			      do  %% Line 984
				  case apply 'more_genfields'/1
					   (Rest) of
				    %% Line 985
				    <'true'> when 'true' ->
					%% Line 986
					call 'asn1ct_gen':'emit'
					    ([[59]|['nl']])
				    %% Line 987
				    <'false'> when 'true' ->
					%% Line 988
					call 'asn1ct_gen':'emit'
					    ([[46]|['nl']])
				    ( <_cor27> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_cor27})
				      -| ['compiler_generated'] )
				  end
				  %% Line 990
				  apply 'gen_decode_objectfields'/5
				      (ClassName, Rest, ObjName, ObjectFields, ConstrAcc)
	  %% Line 991
	  <CN,[_X_C|Cs],O,OF,CAcc> when 'true' ->
	      %% Line 992
	      apply 'gen_decode_objectfields'/5
		  (CN, Cs, O, OF, CAcc)
	  %% Line 993
	  <_cor52,[],_cor53,_cor54,CAcc> when 'true' ->
	      %% Line 994
	      CAcc
	  ( <_cor32,_cor31,_cor30,_cor29,_cor28> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor32,_cor31,_cor30,_cor29,_cor28})
		  -| [{'function_name',{'gen_decode_objectfields',5}}] )
	    -| ['compiler_generated'] )
	end
'emit_tlv_format'/1 =
    %% Line 996
    fun (_cor0) ->
	do  %% Line 997
	    apply 'notice_tlv_format_gen'/0
		()
	    %% Line 998
	    call 'asn1ct_gen':'emit'
		([[32|[32|[84|[108|[118|[32|[61|[32|[116|[108|[118|[95|[102|[111|[114|[109|[97|[116|[40]]]]]]]]]]]]]]]]]]]|[_cor0|[[41|[44]]|['nl']]]])
'notice_tlv_format_gen'/0 =
    %% Line 1000
    fun () ->
	let <Module> =
	    %% Line 1001
	    call 'erlang':'get'
		('currmod')
	in  %% Line 1003
	    case call 'erlang':'get'
		     ('tlv_format') of
	      %% Line 1004
	      <{'done',_cor2}>
		  when call 'erlang':'=:='
			(_cor2,
			 Module) ->
		  %% Line 1005
		  'ok'
	      %% Line 1006
	      <_cor3> when 'true' ->
		  %% Line 1007
		  call 'erlang':'put'
		      ('tlv_format', 'true')
	    end
'emit_tlv_format_function'/0 =
    %% Line 1010
    fun () ->
	let <Module> =
	    %% Line 1011
	    call 'erlang':'get'
		('currmod')
	in  %% Line 1013
	    case call 'erlang':'get'
		     ('tlv_format') of
	      %% Line 1014
	      <'true'> when 'true' ->
		  do  %% Line 1016
		      apply 'emit_tlv_format_function1'/0
			  ()
		      %% Line 1017
		      call 'erlang':'put'
			  ('tlv_format', {'done',Module})
	      %% Line 1018
	      <_cor2> when 'true' ->
		  %% Line 1020
		  'ok'
	    end
'emit_tlv_format_function1'/0 =
    %% Line 1022
    fun () ->
	%% Line 1023
	call 'asn1ct_gen':'emit'
	    ([[116|[108|[118|[95|[102|[111|[114|[109|[97|[116|[40|[66|[121|[116|[101|[115|[41|[32|[119|[104|[101|[110|[32|[105|[115|[95|[98|[105|[110|[97|[114|[121|[40|[66|[121|[116|[101|[115|[41|[32|[45|[62]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|['nl'|[[32|[32|[123|[84|[108|[118|[44|[95|[125|[32|[61|[32]]]]]]]]]]]]|[{'call','ber','ber_decode_nif',[[66|[121|[116|[101|[115]]]]]]}|['com'|['nl'|[[32|[32|[84|[108|[118|[59]]]]]]|['nl'|[[116|[108|[118|[95|[102|[111|[114|[109|[97|[116|[40|[66|[121|[116|[101|[115|[41|[32|[45|[62]]]]]]]]]]]]]]]]]]]]|['nl'|[[32|[32|[66|[121|[116|[101|[115|[46]]]]]]]]|['nl']]]]]]]]]]]])
'gen_decode_constr_type'/2 =
    %% Line 1030
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Erules,[TypeDef = {'typedef',_cor9,_cor10,_cor11,_cor12}|Rest]> when ( 'true'
										  -| ['compiler_generated'] ) ->
	      do  %% Line 1031
		  case apply 'is_already_generated'/2
			   ('dec', _cor11) of
		    %% Line 1032
		    <'true'> when 'true' ->
			'ok'
		    %% Line 1033
		    <_cor17> when 'true' ->
			do  %% Line 1034
			    call 'asn1ct_gen':'emit'
				(['nl'|['nl'|%% Line 1035
					     [[39|[100|[101|[99|[95]]]]]|[_cor11|%% Line 1036
										 [[39|[40|[84|[108|[118|[44|[32|[84|[97|[103|[73|[110|[41|[32|[45|[62]]]]]]]]]]]]]]]]|['nl']]]]]])
			    %% Line 1037
			    apply 'gen_decode_user'/2
				(Erules, TypeDef)
		  end
		  %% Line 1039
		  apply 'gen_decode_constr_type'/2
		      (Erules, Rest)
	  %% Line 1040
	  <_cor22,[]> when 'true' ->
	      %% Line 1041
	      'ok'
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'gen_decode_constr_type',2}}] )
	    -| ['compiler_generated'] )
	end
'gen_decode_field_call'/4 =
    %% Line 1044
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <_X_ObjName,_X_FieldName,Bytes,%% Line 1045
					 {'Externaltypereference',_cor56,M,T}> when 'true' ->
	      let <CurrentMod> =
		  %% Line 1046
		  call 'erlang':'get'
		      ('currmod')
	      in  %% Line 1048
		  ( case call 'asn1_db':'dbget'
			     (M, T) of
		      ( <( {'typedef',_cor57,_cor58,_cor59,_rec65}
			   -| ['compiler_generated'] )> when 'true' ->
			    %% Line 1049
			    ( case _rec65 of
				( <( {'type',_rec66,_cor61,_cor62,_cor63,_cor64}
				     -| ['compiler_generated'] )> when 'true' ->
				      let <_cor23> =
					  %% Line 1050
					  ( letrec
						'lc$^0'/1 =
						    fun (_cor14) ->
							case _cor14 of
							  <[%% Line 1051
							    X|_cor13]> when 'true' ->
							      ( case X of
								  ( <( {'tag',_rec67,_cor66,_cor67,_cor68}
								       -| ['compiler_generated'] )> when 'true' ->
									let <_cor19> =
									    apply 'decode_class'/1
										(_rec67)
									in  let <_cor20> =
										call 'erlang':'bsl'
										    (_cor19, 10)
									    in  let <_cor21> =
										    call 'erlang':'+'
											(_cor20, _cor66)
										in  let <_cor22> =
											%% Line 1051
											apply 'lc$^0'/1
											    (_cor13)
										    in  ( [_cor21|_cor22]
											  -| ['compiler_generated'] )
								    -| ['compiler_generated'] )
								  ( <_cor69> when 'true' ->
									( call ( 'erlang'
										 -| ['compiler_generated'] ):( 'error'
													       -| ['compiler_generated'] )
									      (( {'badrecord','tag'}
										 -| ['compiler_generated'] ))
									  -| ['compiler_generated'] )
								    -| ['compiler_generated'] )
								end
								-| ['compiler_generated'] )
							  <[]> when 'true' ->
							      []
							  ( <_cor14> when 'true' ->
								( primop 'match_fail'
								      ({'function_clause',_cor14})
								  -| [{'function_name',{'lc$^0',1}}] )
							    -| ['compiler_generated'] )
							end
					    in  apply 'lc$^0'/1
						    (_rec66)
					    -| ['list_comprehension'] )
				      in  %% Line 1052
					  case <> of
					    %% Line 1053
					    <>
						when call 'erlang':'=='
						      (M,
						       CurrentMod) ->
						do  %% Line 1054
						    call 'asn1ct_gen':'emit'
							({[32|[32|[32|[39|[100|[101|[99|[95]]]]]]]],T,[39|[40]],Bytes,%% Line 1055
														      [44|[32]],%% Line 1055
																{'asis',_cor23},%% Line 1055
																		[41]})
						    %% Line 1056
						    []
					    %% Line 1057
					    <> when 'true' ->
						do  %% Line 1058
						    call 'asn1ct_gen':'emit'
							({[32|[32|[32|[39]]]],M,[39|[58|[39|[100|[101|[99|[95]]]]]]],T,%% Line 1059
														       [39|[40]],%% Line 1059
																 Bytes,%% Line 1059
																       [44|[32]],%% Line 1059
																		 {'asis',_cor23},%% Line 1059
																				 [41]})
						    %% Line 1060
						    []
					  end
				  -| ['compiler_generated'] )
				( <_cor65> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {'badrecord','type'}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		      ( <_cor60> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','typedef'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  %% Line 1062
	  <ObjName,FieldName,Bytes,Type> when 'true' ->
	      %% Line 1063
	      ( case Type of
		  ( <( {'typedef',_cor74,_cor75,_cor76,_rec69}
		       -| ['compiler_generated'] )> when 'true' ->
			%% Line 1064
			( case _rec69 of
			    ( <( {'type',_rec70,_cor78,_cor79,_cor80,_cor81}
				 -| ['compiler_generated'] )> when 'true' ->
				  let <_cor42> =
				      %% Line 1065
				      ( letrec
					    'lc$^1'/1 =
						fun (_cor33) ->
						    case _cor33 of
						      <[%% Line 1066
							X|_cor32]> when 'true' ->
							  ( case X of
							      ( <( {'tag',_rec71,_cor83,_cor84,_cor85}
								   -| ['compiler_generated'] )> when 'true' ->
								    let <_cor38> =
									apply 'decode_class'/1
									    (_rec71)
								    in  let <_cor39> =
									    call 'erlang':'bsl'
										(_cor38, 10)
									in  let <_cor40> =
										call 'erlang':'+'
										    (_cor39, _cor83)
									    in  let <_cor41> =
										    %% Line 1066
										    apply 'lc$^1'/1
											(_cor32)
										in  ( [_cor40|_cor41]
										      -| ['compiler_generated'] )
								-| ['compiler_generated'] )
							      ( <_cor86> when 'true' ->
								    ( call ( 'erlang'
									     -| ['compiler_generated'] ):( 'error'
													   -| ['compiler_generated'] )
									  (( {'badrecord','tag'}
									     -| ['compiler_generated'] ))
								      -| ['compiler_generated'] )
								-| ['compiler_generated'] )
							    end
							    -| ['compiler_generated'] )
						      <[]> when 'true' ->
							  []
						      ( <_cor33> when 'true' ->
							    ( primop 'match_fail'
								  ({'function_clause',_cor33})
							      -| [{'function_name',{'lc$^1',1}}] )
							-| ['compiler_generated'] )
						    end
					in  apply 'lc$^1'/1
						(_rec70)
					-| ['list_comprehension'] )
				  in  %% Line 1067
				      case _cor76 of
					%% Line 1068
					<{'primitive','bif'}> when 'true' ->
					    do  %% Line 1069
						apply 'gen_dec_prim'/3
						    (_rec69, Bytes, _cor42)
						%% Line 1070
						[]
					%% Line 1071
					<{'constructed','bif'}> when 'true' ->
					    do  %% Line 1072
						call 'asn1ct_gen':'emit'
						    ({[32|[32|[32|[39|[100|[101|[99|[95]]]]]]]],ObjName,'_',FieldName,%% Line 1073
														      [39|[40]],%% Line 1073
																Bytes,%% Line 1073
																      [44],%% Line 1073
																	   {'asis',_cor42},%% Line 1073
																			   [41]})
						let <_cor46> =
						    %% Line 1074
						    call 'lists':'concat'
							([ObjName|['_'|[FieldName|[]]]])
						in  let <_rec74> =
							%% Line 1074
							call 'erlang':'list_to_atom'
							    (_cor46)
						    in  let <_cor50> =
							    %% Line 1074
							    call 'erlang':'setelement'
								(4, Type, _rec74)
							in  %% Line 1074
							    [_cor50|[]]
					%% Line 1075
					<{ExtMod,TypeName}> when 'true' ->
					    do  %% Line 1076
						call 'asn1ct_gen':'emit'
						    ({[32|[32|[32|[39]]]],ExtMod,[39|[58|[39|[100|[101|[99|[95]]]]]]],TypeName,%% Line 1077
															       [39|[40]],%% Line 1077
																	 Bytes,%% Line 1077
																	       [44],%% Line 1077
																		    {'asis',_cor42},%% Line 1077
																				    [41]})
						%% Line 1078
						[]
					%% Line 1079
					<TypeName> when 'true' ->
					    do  %% Line 1080
						call 'asn1ct_gen':'emit'
						    ({[32|[32|[32|[39|[100|[101|[99|[95]]]]]]]],TypeName,[39|[40]],Bytes,[44],{'asis',_cor42},[41]})
						%% Line 1081
						[]
				      end
			      -| ['compiler_generated'] )
			    ( <_cor82> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','type'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  ( <_cor77> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','typedef'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'gen_decode_default_call'/4 =
    %% Line 1084
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <CurrentMod> =
	    %% Line 1085
	    call 'erlang':'get'
		('currmod')
	in  %% Line 1086
	    ( case _cor0 of
		( <( {'type',_cor31,_rec76,_cor32,_cor33,_cor34}
		     -| ['compiler_generated'] )> when 'true' ->
		      let <InnerType> =
			  call 'asn1ct_gen':'get_inner'
			      (_rec76)
		      in  let <_cor22> =
			      %% Line 1088
			      ( letrec
				    'lc$^0'/1 =
					fun (_cor13) ->
					    case _cor13 of
					      <[X|_cor12]> when 'true' ->
						  ( case X of
						      ( <( {'tag',_rec78,_cor41,_cor42,_cor43}
							   -| ['compiler_generated'] )> when 'true' ->
							    let <_cor18> =
								apply 'decode_class'/1
								    (_rec78)
							    in  let <_cor19> =
								    call 'erlang':'bsl'
									(_cor18, 10)
								in  let <_cor20> =
									call 'erlang':'+'
									    (_cor19, _cor41)
								    in  let <_cor21> =
									    apply 'lc$^0'/1
										(_cor12)
									in  ( [_cor20|_cor21]
									      -| ['compiler_generated'] )
							-| ['compiler_generated'] )
						      ( <_cor44> when 'true' ->
							    ( call ( 'erlang'
								     -| ['compiler_generated'] ):( 'error'
												   -| ['compiler_generated'] )
								  (( {'badrecord','tag'}
								     -| ['compiler_generated'] ))
							      -| ['compiler_generated'] )
							-| ['compiler_generated'] )
						    end
						    -| ['compiler_generated'] )
					      <[]> when 'true' ->
						  []
					      ( <_cor13> when 'true' ->
						    ( primop 'match_fail'
							  ({'function_clause',_cor13})
						      -| [{'function_name',{'lc$^0',1}}] )
						-| ['compiler_generated'] )
					    end
				in  apply 'lc$^0'/1
					(_cor31)
				-| ['list_comprehension'] )
			  in  %% Line 1089
			      case call 'asn1ct_gen':'type'
				       (InnerType) of
				%% Line 1090
				<{'constructed','bif'}> when 'true' ->
				    do  %% Line 1091
					call 'asn1ct_gen':'emit'
					    ([[32|[32|[32|[39|[100|[101|[99|[95]]]]]]]]|[_cor3|['_'|[_cor2|[[39|[40]]|[_cor1|[[44]|%% Line 1092
																   [{'asis',_cor22}|[[41]]]]]]]]]])
					let <_cor24> =
					    %% Line 1093
					    call 'lists':'concat'
						([_cor3|['_'|%% Line 1094
							     [_cor2|[]]]])
					in  let <_cor25> =
						%% Line 1093
						call 'erlang':'list_to_atom'
						    (_cor24)
					    in  %% Line 1093
						[{'typedef','false','undefined',_cor25,_cor0}|%% Line 1095
											      []]
				%% Line 1096
				<{'primitive','bif'}> when 'true' ->
				    do  %% Line 1097
					apply 'gen_dec_prim'/3
					    (_cor0, _cor1, _cor22)
					%% Line 1098
					[]
				%% Line 1099
				<{'Externaltypereference',_cor49,_cor50,Etype}>
				    when call 'erlang':'=:='
					  (_cor50,
					   CurrentMod) ->
				    do  %% Line 1100
					call 'asn1ct_gen':'emit'
					    ([[32|[32|[32|[39|[100|[101|[99|[95]]]]]]]]|[Etype|[[39|[40]]|[_cor1|[[32|[44]]|[{'asis',_cor22}|[[41]|['nl']]]]]]]])
					%% Line 1101
					[]
				%% Line 1102
				<{'Externaltypereference',_cor51,Emod,Etype}> when 'true' ->
				    do  %% Line 1103
					call 'asn1ct_gen':'emit'
					    ([[32|[32|[32|[39]]]]|[Emod|[[39|[58|[39|[100|[101|[99|[95]]]]]]]|[Etype|[[39|[40]]|[_cor1|[[44|[32]]|%% Line 1104
																		  [{'asis',_cor22}|[[41]|['nl']]]]]]]]]])
					%% Line 1105
					[]
				( <_cor26> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor26})
				  -| ['compiler_generated'] )
			      end
		  -| ['compiler_generated'] )
		( <_cor35> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','type'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	      -| ['compiler_generated'] )
'is_already_generated'/2 =
    %% Line 1115
    fun (_cor1,_cor0) ->
	%% Line 1116
	case call 'erlang':'get'
		 ('class_default_type') of
	  %% Line 1117
	  <'undefined'> when 'true' ->
	      do  %% Line 1118
		  call 'erlang':'put'
		      ('class_default_type', [{_cor1,_cor0}|[]])
		  %% Line 1119
		  'false'
	  %% Line 1120
	  <GeneratedList> when 'true' ->
	      %% Line 1121
	      case call 'lists':'member'
		       ({_cor1,_cor0}, GeneratedList) of
		%% Line 1122
		<'true'> when 'true' ->
		    %% Line 1123
		    'true'
		%% Line 1124
		<'false'> when 'true' ->
		    do  %% Line 1125
			call 'erlang':'put'
			    ('class_default_type', [{_cor1,_cor0}|GeneratedList])
			%% Line 1126
			'false'
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor2})
		  -| ['compiler_generated'] )
	      end
	end
'more_genfields'/1 =
    %% Line 1130
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      %% Line 1131
	      'false'
	  %% Line 1132
	  <[Field|Fields]> when 'true' ->
	      %% Line 1133
	      case call 'erlang':'element'
		       (1, Field) of
		%% Line 1134
		<'typefield'> when 'true' ->
		    %% Line 1135
		    'true'
		%% Line 1136
		<'objectfield'> when 'true' ->
		    %% Line 1137
		    'true'
		%% Line 1138
		<_cor3> when 'true' ->
		    %% Line 1139
		    apply 'more_genfields'/1
			(Fields)
	      end
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'more_genfields',1}}] )
	    -| ['compiler_generated'] )
	end
'gen_objectset_code'/2 =
    %% Line 1147
    fun (_cor1,_cor0) ->
	%% Line 1148
	( case _cor0 of
	    ( <( {'typedef',_cor21,_cor22,_rec80,_cor23}
		 -| ['compiler_generated'] )> when 'true' ->
		  %% Line 1152
		  ( case _cor23 of
		      ( <( {'ObjectSet',_rec82,_cor29,_cor30,_cor31}
			   -| ['compiler_generated'] )> when 'true' ->
			    case _rec82 of
			      <{'Externaltypereference',_cor33,ClassModule,ClassName}> when 'true' ->
				  let <ClassDef> =
				      %% Line 1153
				      call 'asn1_db':'dbget'
					  (ClassModule, ClassName)
				  in  do  %% Line 1156
					  call 'asn1ct_gen':'emit'
					      ({'nl','nl','nl',[37|[37|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]})
					  do  %% Line 1157
					      call 'asn1ct_gen':'emit'
						  ({'nl',[37|[37|[32|[32]]]],_rec80})
					      do  %% Line 1158
						  call 'asn1ct_gen':'emit'
						      ({'nl',[37|[37|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],'nl'})
						  do  %% Line 1159
						      case ClassName of
							%% Line 1160
							<{_X_Module,ExtClassName}> when 'true' ->
							    %% Line 1161
							    apply 'gen_objset_code'/6
								(_cor1, _rec80, _cor30, _cor31, ExtClassName, ClassDef)
							%% Line 1162
							<_cor42> when 'true' ->
							    %% Line 1163
							    apply 'gen_objset_code'/6
								(_cor1, _rec80, _cor30, _cor31, ClassName, ClassDef)
						      end
						      %% Line 1165
						      call 'asn1ct_gen':'emit'
							  ('nl')
			      ( <_cor10> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor10})
				-| ['compiler_generated'] )
			    end
			-| ['compiler_generated'] )
		      ( <_cor32> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','ObjectSet'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	    ( <_cor24> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','typedef'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'gen_objset_code'/6 =
    %% Line 1167
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <ClassFields> =
	    %% Line 1168
	    apply 'get_class_fields'/1
		(_cor0)
	in  let <InternalFuncs> =
		%% Line 1169
		apply 'gen_objset_enc'/8
		    (_cor5, _cor4, _cor3, _cor2, _cor1, %% Line 1170
							ClassFields, %% Line 1170
								     1, %% Line 1170
									[])
	    in  do  %% Line 1171
		    apply 'gen_objset_dec'/7
			(_cor5, _cor4, _cor3, _cor2, _cor1, ClassFields, 1)
		    %% Line 1172
		    apply 'gen_internal_funcs'/2
			(_cor5, InternalFuncs)
'gen_objset_enc'/8 =
    %% Line 1175
    fun (_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <_cor23,_cor24,{'unique','undefined'},_cor25,_cor26,_cor27,_cor28,_cor29> when 'true' ->
	      %% Line 1178
	      []
	  %% Line 1179
	  <Erules,ObjSetName,UniqueName,%% Line 1180
					[{ObjName,Val,Fields}|T],%% Line 1180
								 ClName,%% Line 1180
									ClFields,%% Line 1181
										 NthObj,%% Line 1181
											Acc> when 'true' ->
	      do  %% Line 1182
		  call 'asn1ct_gen':'emit'
		      ([[39|[103|[101|[116|[101|[110|[99|[95]]]]]]]]|[ObjSetName|[[39|[40]]|[{'asis',Val}|[[41|[32|[45|[62]]]]|['nl']]]]]])
		  let <CurrMod> =
		      %% Line 1183
		      call 'erlang':'get'
			  ('currmod')
		  in  let <_cor10> =
			  %% Line 1185
			  case ObjName of
			    %% Line 1186
			    <{'no_mod','no_name'}> when 'true' ->
				%% Line 1187
				apply 'gen_inlined_enc_funs'/4
				    (Fields, ClFields, ObjSetName, NthObj)
			    %% Line 1188
			    <{_cor30,Name}>
				when call 'erlang':'=:='
				      (_cor30,
				       CurrMod) ->
				do  %% Line 1189
				    call 'asn1ct_gen':'emit'
					({[32|[32|[32|[32|[102|[117|[110|[32|[39|[101|[110|[99|[95]]]]]]]]]]]]],Name,[39|[47|[51]]]})
				    %% Line 1190
				    {[],NthObj}
			    %% Line 1191
			    <{ModuleName,Name}> when 'true' ->
				do  %% Line 1192
				    apply 'emit_ext_fun'/3
					('enc', ModuleName, Name)
				    %% Line 1193
				    {[],NthObj}
			    %% Line 1194
			    <_cor31> when 'true' ->
				do  %% Line 1195
				    call 'asn1ct_gen':'emit'
					({[32|[32|[32|[32|[102|[117|[110|[32|[39|[101|[110|[99|[95]]]]]]]]]]]]],ObjName,[39|[47|[51]]]})
				    %% Line 1196
				    {[],NthObj}
			  end
		      in  %% Line 1184
			  case _cor10 of
			    <{InternalFunc,NewNthObj}> when 'true' ->
				do  %% Line 1198
				    call 'asn1ct_gen':'emit'
					({[59],'nl'})
				    let <_cor12> =
					%% Line 1200
					call 'erlang':'++'
					    (InternalFunc, Acc)
				    in  %% Line 1199
					apply 'gen_objset_enc'/8
					    (Erules, ObjSetName, UniqueName, T, ClName, ClFields, %% Line 1200
												  NewNthObj, _cor12)
			    ( <_cor11> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor11})
			      -| ['compiler_generated'] )
			  end
	  %% Line 1202
	  <_cor32,ObjSetName,_X_UniqueName,['EXTENSIONMARK'],_X_ClName,%% Line 1203
								       _X_ClFields,%% Line 1203
										   _X_NthObj,%% Line 1203
											     Acc> when 'true' ->
	      let <_cor13> =
		  %% Line 1205
		  apply 'indent'/1
		      (2)
	      in  do  %% Line 1204
		      call 'asn1ct_gen':'emit'
			  ([[39|[103|[101|[116|[101|[110|[99|[95]]]]]]]]|[ObjSetName|[[39|[40|[95|[41|[32|[45|[62]]]]]]]|['nl'|%% Line 1205
															       [_cor13|[[102|[117|[110|[40|[95|[44|[32|[86|[97|[108|[44|[32|[95|[82|[101|[115|[116|[80|[114|[105|[109|[70|[105|[101|[108|[100|[78|[97|[109|[101|[41|[32|[45|[62]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|['nl']]]]]]])
		      do  %% Line 1206
			  apply 'emit_enc_open_type'/1
			      (4)
			  let <_cor14> =
			      %% Line 1208
			      apply 'indent'/1
				  (2)
			  in  do  %% Line 1207
				  call 'asn1ct_gen':'emit'
				      (['nl'|%% Line 1208
					     [_cor14|[[101|[110|[100|[46]]]]|['nl'|['nl']]]]])
				  %% Line 1209
				  Acc
	  %% Line 1210
	  <_cor33,ObjSetName,UniqueName,[],_cor34,_cor35,_cor36,Acc> when 'true' ->
	      do  %% Line 1211
		  apply 'emit_default_getenc'/2
		      (ObjSetName, UniqueName)
		  do  %% Line 1212
		      call 'asn1ct_gen':'emit'
			  ({[46],'nl','nl'})
		      %% Line 1213
		      Acc
	  ( <_cor22,_cor21,_cor20,_cor19,_cor18,_cor17,_cor16,_cor15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor22,_cor21,_cor20,_cor19,_cor18,_cor17,_cor16,_cor15})
		  -| [{'function_name',{'gen_objset_enc',8}}] )
	    -| ['compiler_generated'] )
	end
'emit_ext_fun'/3 =
    %% Line 1215
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 1216
	    apply 'indent'/1
		(3)
	in  %% Line 1216
	    call 'asn1ct_gen':'emit'
		([_cor3|[[102|[117|[110|[40|[84|[44|[86|[44|[79|[41|[32|[45|[62|[32|[39]]]]]]]]]]]]]]]|[_cor1|[[39|[58|[39]]]|[_cor2|[[95]|%% Line 1217
																	   [_cor0|[[39|[40|[84|[44|[86|[44|[79|[41|[32|[101|[110|[100]]]]]]]]]]]]]]]]]]]])
'emit_default_getenc'/2 =
    %% Line 1219
    fun (_cor1,_cor0) ->
	do  %% Line 1220
	    call 'asn1ct_gen':'emit'
		([[39|[103|[101|[116|[101|[110|[99|[95]]]]]]]]|[_cor1|[[39|[40|[69|[114|[114|[86|[41|[32|[45|[62]]]]]]]]]]|['nl']]]])
	    let <_cor2> =
		%% Line 1221
		apply 'indent'/1
		    (3)
	    in  %% Line 1221
		call 'asn1ct_gen':'emit'
		    ([_cor2|[[102|[117|[110|[40|[67|[44|[86|[44|[95|[41|[32|[45|[62|[32|[101|[120|[105|[116|[40|[123|[39|[84|[121|[112|[101|[32|[110|[111|[116|[32|[99|[111|[109|[112|[97|[116|[105|[98|[108|[101|[32|[119|[105|[116|[104|[32|[116|[97|[98|[108|[101|[32|[99|[111|[110|[115|[116|[114|[97|[105|[110|[116|[39|[44|[123|[99|[111|[109|[112|[111|[110|[101|[110|[116|[44|[67|[125|[44|[123|[118|[97|[108|[117|[101|[44|[86|[125|[44|[32|[123|[117|[110|[105|[113|[117|[101|[95|[110|[97|[109|[101|[95|[97|[110|[100|[95|[118|[97|[108|[117|[101|[44]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[{'asis',_cor0}|[[44|[32|[69|[114|[114|[86|[125|[125|[41|[32|[101|[110|[100]]]]]]]]]]]]]]]]])
'gen_inlined_enc_funs'/4 =
    %% Line 1226
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Fields,T = [{'typefield',_cor10,_cor11}|_cor12],ObjSetName,NthObj> when 'true' ->
	      let <_cor4> =
		  %% Line 1227
		  apply 'indent'/1
		      (3)
	      in  let <_cor5> =
		      %% Line 1228
		      apply 'indent'/1
			  (6)
		  in  do  %% Line 1227
			  call 'asn1ct_gen':'emit'
			      ([_cor4|[[102|[117|[110|[40|[84|[121|[112|[101|[44|[32|[86|[97|[108|[44|[32|[95|[82|[101|[115|[116|[80|[114|[105|[109|[70|[105|[101|[108|[100|[78|[97|[109|[101|[41|[32|[45|[62]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|['nl'|%% Line 1228
																															 [_cor5|[[99|[97|[115|[101|[32|[84|[121|[112|[101|[32|[111|[102]]]]]]]]]]]]|['nl']]]]]])
			  %% Line 1229
			  apply 'gen_inlined_enc_funs1'/6
			      (Fields, T, ObjSetName, [], NthObj, [])
	  %% Line 1230
	  <Fields,[_cor13|Rest],ObjSetName,NthObj> when 'true' ->
	      %% Line 1231
	      apply 'gen_inlined_enc_funs'/4
		  (Fields, Rest, ObjSetName, NthObj)
	  %% Line 1232
	  <_cor14,[],_cor15,NthObj> when 'true' ->
	      %% Line 1233
	      {[],NthObj}
	  ( <_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'gen_inlined_enc_funs',4}}] )
	    -| ['compiler_generated'] )
	end
'gen_inlined_enc_funs1'/6 =
    %% Line 1235
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Fields,[{'typefield',Name,_cor48}|Rest],ObjSetName,%% Line 1236
							      Sep0,%% Line 1236
								   NthObj,%% Line 1236
									  Acc0> when 'true' ->
	      do  %% Line 1237
		  call 'asn1ct_gen':'emit'
		      (Sep0)
		  let <CurrMod> =
		      %% Line 1239
		      call 'erlang':'get'
			  ('currmod')
		  in  let <InternalDefFunName> =
			  %% Line 1240
			  call 'asn1ct_gen':'list2name'
			      ([NthObj|[Name|[ObjSetName|[]]]])
		      in  let <Acc,NAdd> =
			      %% Line 1242
			      case call 'lists':'keyfind'
				       (Name, 1, Fields) of
				%% Line 1243
				<{_cor49,Type = {'type',_cor50,_cor51,_cor52,_cor53,_cor54}}> when 'true' ->
				    %% Line 1244
				    case apply 'emit_inner_of_fun'/2
					     (Type, InternalDefFunName) of
				      <{Ret,N}> when 'true' ->
					  let <_cor10> =
					      %% Line 1245
					      call 'erlang':'++'
						  (Ret, Acc0)
					  in  <_cor10,%% Line 1245
						      N>
				      ( <_cor9> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_cor9})
					-| ['compiler_generated'] )
				    end
				%% Line 1246
				<{_cor55,Type = {'typedef',_cor56,_cor57,_cor58,_cor59}}> when 'true' ->
				    let <_cor11> =
					%% Line 1247
					apply 'indent'/1
					    (9)
				    in  do  %% Line 1247
					    call 'asn1ct_gen':'emit'
						([_cor11|[{'asis',Name}|[[32|[45|[62]]]|['nl']]]])
					    %% Line 1248
					    case apply 'emit_inner_of_fun'/2
						     (Type, InternalDefFunName) of
					      <{Ret,N}> when 'true' ->
						  let <_cor13> =
						      %% Line 1249
						      call 'erlang':'++'
							  (Ret, Acc0)
						  in  <_cor13,%% Line 1249
							      N>
					      ( <_cor12> when 'true' ->
						    primop 'match_fail'
							({'badmatch',_cor12})
						-| ['compiler_generated'] )
					    end
				%% Line 1250
				<{_cor60,{'Externaltypereference',_cor61,M,T}}> when 'true' ->
				    let <_cor14> =
					%% Line 1251
					apply 'indent'/1
					    (9)
				    in  do  %% Line 1251
					    call 'asn1ct_gen':'emit'
						([_cor14|[{'asis',Name}|[[32|[45|[62]]]|['nl']]]])
					    do  %% Line 1252
						case <> of
						  %% Line 1253
						  <>
						      when call 'erlang':'=:='
							    (M,
							     CurrMod) ->
						      let <_cor15> =
							  %% Line 1254
							  apply 'indent'/1
							      (12)
						      in  %% Line 1254
							  call 'asn1ct_gen':'emit'
							      ([_cor15|[[39|[101|[110|[99|[95]]]]]|[T|[[39|[40|[86|[97|[108|[41]]]]]]]]]])
						  %% Line 1255
						  <> when 'true' ->
						      %% Line 1256
						      case call 'asn1_db':'dbget'
							       (M, T) of
							<{'typedef',_cor62,_cor63,_cor64,Type}> when 'true' ->
							    %% Line 1257
							    ( case Type of
								( <( {'type',_rec85,_cor65,_cor66,_cor67,_cor68}
								     -| ['compiler_generated'] )> when 'true' ->
								      let <_cor32> =
									  %% Line 1258
									  ( letrec
										'lc$^0'/1 =
										    fun (_cor22) ->
											case _cor22 of
											  <[%% Line 1260
											    X|_cor21]> when 'true' ->
											      ( case X of
												  ( <( {'tag',_rec86,_cor70,_cor71,_cor72}
												       -| ['compiler_generated'] )> when 'true' ->
													let <_cor29> =
													    apply 'decode_class'/1
														(_rec86)
													in  let <_cor30> =
														apply 'encode_tag_val'/3
														    (_cor29, _cor72, _cor70)
													    in  let <_cor31> =
														    %% Line 1260
														    apply 'lc$^0'/1
															(_cor21)
														in  ( [_cor30|_cor31]
														      -| ['compiler_generated'] )
												    -| ['compiler_generated'] )
												  ( <_cor73> when 'true' ->
													( call ( 'erlang'
														 -| ['compiler_generated'] ):( 'error'
																	       -| ['compiler_generated'] )
													      (( {'badrecord','tag'}
														 -| ['compiler_generated'] ))
													  -| ['compiler_generated'] )
												    -| ['compiler_generated'] )
												end
												-| ['compiler_generated'] )
											  <[]> when 'true' ->
											      []
											  ( <_cor22> when 'true' ->
												( primop 'match_fail'
												      ({'function_clause',_cor22})
												  -| [{'function_name',{'lc$^0',1}}] )
											    -| ['compiler_generated'] )
											end
									    in  apply 'lc$^0'/1
										    (_rec85)
									    -| ['list_comprehension'] )
								      in  let <_cor34> =
									      %% Line 1261
									      apply 'indent'/1
										  (12)
									  in  %% Line 1261
									      call 'asn1ct_gen':'emit'
										  ([_cor34|[[39]|[M|[[39|[58|[39|[101|[110|[99|[95]]]]]]]|[T|[[39|[40|[86|[97|[108|[44|[32]]]]]]]|%% Line 1262
																						  [{'asis',_cor32}|[[41]]]]]]]]])
								  -| ['compiler_generated'] )
								( <_cor69> when 'true' ->
								      ( call ( 'erlang'
									       -| ['compiler_generated'] ):( 'error'
													     -| ['compiler_generated'] )
									    (( {'badrecord','type'}
									       -| ['compiler_generated'] ))
									-| ['compiler_generated'] )
								  -| ['compiler_generated'] )
							      end
							      -| ['compiler_generated'] )
							( <_cor16> when 'true' ->
							      primop 'match_fail'
								  ({'badmatch',_cor16})
							  -| ['compiler_generated'] )
						      end
						end
						%% Line 1264
						<Acc0,0>
				%% Line 1265
				<'false'> when 'true' ->
				    let <_cor35> =
					%% Line 1270
					apply 'indent'/1
					    (9)
				    in  do  %% Line 1270
					    call 'asn1ct_gen':'emit'
						([_cor35|[{'asis',Name}|[[32|[45|[62]]]|['nl']]]])
					    do  %% Line 1271
						apply 'emit_enc_open_type'/1
						    (11)
						%% Line 1272
						<Acc0,0>
				( <_cor36> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor36})
				  -| ['compiler_generated'] )
			      end
			  in  let <_cor39> =
				  %% Line 1274
				  call 'erlang':'+'
				      (NthObj, NAdd)
			      in  %% Line 1274
				  apply 'gen_inlined_enc_funs1'/6
				      (Fields, Rest, ObjSetName, [[59]|['nl']], _cor39, Acc)
	  %% Line 1275
	  <Fields,[_cor82|Rest],ObjSetName,Sep,NthObj,Acc> when 'true' ->
	      %% Line 1276
	      apply 'gen_inlined_enc_funs1'/6
		  (Fields, Rest, ObjSetName, Sep, NthObj, Acc)
	  %% Line 1277
	  <_cor83,[],_cor84,_cor85,NthObj,Acc> when 'true' ->
	      let <_cor40> =
		  %% Line 1278
		  apply 'indent'/1
		      (6)
	      in  let <_cor41> =
		      %% Line 1279
		      apply 'indent'/1
			  (3)
		  in  do  %% Line 1278
			  call 'asn1ct_gen':'emit'
			      (['nl'|[_cor40|[[101|[110|[100]]]|['nl'|%% Line 1279
								      [_cor41|[[101|[110|[100]]]]]]]]])
			  %% Line 1280
			  {Acc,NthObj}
	  ( <_cor47,_cor46,_cor45,_cor44,_cor43,_cor42> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor47,_cor46,_cor45,_cor44,_cor43,_cor42})
		  -| [{'function_name',{'gen_inlined_enc_funs1',6}}] )
	    -| ['compiler_generated'] )
	end
'emit_enc_open_type'/1 =
    %% Line 1282
    fun (_cor0) ->
	let <Indent> =
	    %% Line 1283
	    apply 'indent'/1
		(_cor0)
	in  let <_cor2> =
		%% Line 1285
		apply 'indent'/1
		    (2)
	    in  let <_cor3> =
		    %% Line 1286
		    apply 'indent'/1
			(4)
		in  let <_cor9> =
			%% Line 1287
			case call 'asn1ct':'use_legacy_types'
				 () of
			  %% Line 1288
			  <'false'> when 'true' ->
			      %% Line 1289
			      ['nl'|%% Line 1290
				    [Indent|[[101|[110|[100]]]]]]
			  %% Line 1291
			  <'true'> when 'true' ->
			      let <_cor4> =
				  %% Line 1293
				  apply 'indent'/1
				      (2)
			      in  let <_cor5> =
				      %% Line 1294
				      apply 'indent'/1
					  (4)
				  in  let <_cor6> =
					  %% Line 1295
					  apply 'indent'/1
					      (2)
				      in  let <_cor7> =
					      %% Line 1296
					      apply 'indent'/1
						  (4)
					  in  %% Line 1292
					      [[59]|['nl'|%% Line 1293
							  [Indent|[_cor4|[[66|[105|[110|[32|[119|[104|[101|[110|[32|[105|[115|[95|[98|[105|[110|[97|[114|[121|[40|[66|[105|[110|[41|[32|[45|[62]]]]]]]]]]]]]]]]]]]]]]]]]]|['nl'|%% Line 1294
																												[Indent|[_cor5|[[123|[66|[105|[110|[44|[98|[121|[116|[101|[95|[115|[105|[122|[101|[40|[66|[105|[110|[41|[125|[59]]]]]]]]]]]]]]]]]]]]]|['nl'|%% Line 1295
																																													    [Indent|[_cor6|[[95|[32|[45|[62]]]]|['nl'|%% Line 1296
																																																		      [Indent|[_cor7|[[123|[86|[97|[108|[44|[108|[101|[110|[103|[116|[104|[40|[86|[97|[108|[41|[125]]]]]]]]]]]]]]]]]|['nl'|%% Line 1297
																																																																	   [Indent|[[101|[110|[100]]]]]]]]]]]]]]]]]]]]]]]
			  ( <_cor8> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor8})
			    -| ['compiler_generated'] )
			end
		    in  let <S> =
			    %% Line 1284
			    [Indent|[[99|[97|[115|[101|[32|[86|[97|[108|[32|[111|[102]]]]]]]]]]]|['nl'|%% Line 1285
												       [Indent|[_cor2|[[123|[97|[115|[110|[49|[95|[79|[80|[69|[78|[84|[89|[80|[69|[44|[66|[105|[110|[125|[32|[119|[104|[101|[110|[32|[105|[115|[95|[98|[105|[110|[97|[114|[121|[40|[66|[105|[110|[41|[32|[45|[62]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|['nl'|%% Line 1286
																																												 [Indent|[_cor3|[[123|[66|[105|[110|[44|[98|[121|[116|[101|[95|[115|[105|[122|[101|[40|[66|[105|[110|[41|[125]]]]]]]]]]]]]]]]]]]]|_cor9]]]]]]]]]]
			in  %% Line 1299
			    call 'asn1ct_gen':'emit'
				(S)
'emit_inner_of_fun'/2 =
    %% Line 1301
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <TDef = {'typedef',_cor76,_cor77,{ExtMod,Name},Type},%% Line 1302
							       InternalDefFunName> when 'true' ->
	      %% Line 1303
	      ( case Type of
		  ( <( {'type',_rec89,_cor78,_cor79,_cor80,_cor81}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_cor17> =
			    %% Line 1304
			    ( letrec
				  'lc$^0'/1 =
				      fun (_cor7) ->
					  case _cor7 of
					    <[X|_cor6]> when 'true' ->
						( case X of
						    ( <( {'tag',_rec90,_cor83,_cor84,_cor85}
							 -| ['compiler_generated'] )> when 'true' ->
							  let <_cor14> =
							      apply 'decode_class'/1
								  (_rec90)
							  in  let <_cor15> =
								  apply 'encode_tag_val'/3
								      (_cor14, _cor85, _cor83)
							      in  let <_cor16> =
								      apply 'lc$^0'/1
									  (_cor6)
								  in  ( [_cor15|_cor16]
									-| ['compiler_generated'] )
						      -| ['compiler_generated'] )
						    ( <_cor86> when 'true' ->
							  ( call ( 'erlang'
								   -| ['compiler_generated'] ):( 'error'
												 -| ['compiler_generated'] )
								(( {'badrecord','tag'}
								   -| ['compiler_generated'] ))
							    -| ['compiler_generated'] )
						      -| ['compiler_generated'] )
						  end
						  -| ['compiler_generated'] )
					    <[]> when 'true' ->
						[]
					    ( <_cor7> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor7})
						    -| [{'function_name',{'lc$^0',1}}] )
					      -| ['compiler_generated'] )
					  end
			      in  apply 'lc$^0'/1
				      (_rec89)
			      -| ['list_comprehension'] )
			in  %% Line 1306
			    case <ExtMod,Name> of
			      %% Line 1307
			      <'primitive','bif'> when 'true' ->
				  let <_cor19> =
				      %% Line 1308
				      apply 'indent'/1
					  (12)
				  in  do  %% Line 1308
					  call 'asn1ct_gen':'emit'
					      (_cor19)
					  let <_cor20> =
					      %% Line 1309
					      call 'lists':'reverse'
						  (_cor17)
					  in  do  %% Line 1309
						  apply 'gen_encode_prim'/4
						      ('ber', Type, [{'asis',_cor20}|[]], [86|[97|[108]]])
						  %% Line 1310
						  {[],0}
			      %% Line 1311
			      <'constructed','bif'> when 'true' ->
				  let <_cor21> =
				      %% Line 1312
				      apply 'indent'/1
					  (12)
				  in  do  %% Line 1312
					  call 'asn1ct_gen':'emit'
					      ([_cor21|[[39|[101|[110|[99|[95]]]]]|%% Line 1313
										   [InternalDefFunName|[[39|[40|[86|[97|[108|[44|[32]]]]]]]|[{'asis',_cor17}|[[41]]]]]]])
					  let <_cor24> =
					      %% Line 1314
					      call 'erlang':'setelement'
						  (4, TDef, InternalDefFunName)
					  in  %% Line 1314
					      {[_cor24|[]],1}
			      %% Line 1315
			      <_fol690,_fol691> when 'true' ->
				  let <_cor25> =
				      %% Line 1316
				      apply 'indent'/1
					  (12)
				  in  do  %% Line 1316
					  call 'asn1ct_gen':'emit'
					      ({_cor25,[39],ExtMod,[39|[58|[39|[101|[110|[99|[95]]]]]]],Name,[39|[40|[86|[97|[108]]]]],{'asis',_cor17},[41]})
					  %% Line 1317
					  {[],0}
			    end
		    -| ['compiler_generated'] )
		  ( <_cor82> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','type'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1319
	  <{'typedef',_cor101,_cor102,Name,_cor103},_cor104> when 'true' ->
	      let <_cor27> =
		  %% Line 1323
		  apply 'indent'/1
		      (12)
	      in  do  %% Line 1323
		      call 'asn1ct_gen':'emit'
			  ({_cor27,[39|[101|[110|[99|[95]]]]],Name,[39|[40|[86|[97|[108|[41]]]]]]})
		      %% Line 1324
		      {[],0}
	  %% Line 1325
	  <Type = {'type',_cor105,_cor106,_cor107,_cor108,_cor109},_cor110> when ( 'true'
										   -| ['compiler_generated'] ) ->
	      let <CurrMod> =
		  %% Line 1326
		  call 'erlang':'get'
		      ('currmod')
	      in  do  %% Line 1330
		      case _cor106 of
			%% Line 1331
			<Def>
			    when call 'erlang':'is_atom'
				  (_cor106) ->
			    let <_cor46> =
				%% Line 1333
				( letrec
				      'lc$^1'/1 =
					  fun (_cor36) ->
					      case _cor36 of
						<[%% Line 1334
						  X|_cor35]> when 'true' ->
						    ( case X of
							( <( {'tag',_rec96,_cor121,_cor122,_cor123}
							     -| ['compiler_generated'] )> when 'true' ->
							      let <_cor43> =
								  apply 'decode_class'/1
								      (_rec96)
							      in  let <_cor44> =
								      apply 'encode_tag_val'/3
									  (_cor43, _cor123, _cor121)
								  in  let <_cor45> =
									  %% Line 1334
									  apply 'lc$^1'/1
									      (_cor35)
								      in  ( [_cor44|_cor45]
									    -| ['compiler_generated'] )
							  -| ['compiler_generated'] )
							( <_cor124> when 'true' ->
							      ( call ( 'erlang'
								       -| ['compiler_generated'] ):( 'error'
												     -| ['compiler_generated'] )
								    (( {'badrecord','tag'}
								       -| ['compiler_generated'] ))
								-| ['compiler_generated'] )
							  -| ['compiler_generated'] )
						      end
						      -| ['compiler_generated'] )
						<[]> when 'true' ->
						    []
						( <_cor36> when 'true' ->
						      ( primop 'match_fail'
							    ({'function_clause',_cor36})
							-| [{'function_name',{'lc$^1',1}}] )
						  -| ['compiler_generated'] )
					      end
				  in  apply 'lc$^1'/1
					  (_cor105)
				  -| ['list_comprehension'] )
			    in  let <_cor48> =
				    %% Line 1335
				    apply 'indent'/1
					(9)
				in  let <_cor49> =
					%% Line 1335
					apply 'indent'/1
					    (12)
				    in  do  %% Line 1335
					    call 'asn1ct_gen':'emit'
						([_cor48|[Def|[[32|[45|[62]]]|['nl'|[_cor49|[]]]]]])
					    let <_cor50> =
						%% Line 1336
						call 'lists':'reverse'
						    (_cor46)
					    in  %% Line 1336
						apply 'gen_encode_prim'/4
						    ('ber', Type, {'asis',_cor50}, [86|[97|[108]]])
			%% Line 1337
			<{'Externaltypereference',_cor133,_cor134,T}>
			    when call 'erlang':'=:='
				  (_cor134,
				   CurrMod) ->
			    let <_cor51> =
				%% Line 1338
				apply 'indent'/1
				    (9)
			    in  let <_cor52> =
				    %% Line 1338
				    apply 'indent'/1
					(12)
				in  %% Line 1338
				    call 'asn1ct_gen':'emit'
					([_cor51|[T|[[32|[45|[62]]]|['nl'|[_cor52|[[39|[101|[110|[99|[95]]]]]|[T|%% Line 1339
														 [[39|[40|[86|[97|[108|[41]]]]]]]]]]]]]])
			%% Line 1340
			<{'Externaltypereference',_cor135,ExtMod,T}> when 'true' ->
			    %% Line 1341
			    case call 'asn1_db':'dbget'
				     (ExtMod, T) of
			      <{'typedef',_cor136,_cor137,_cor138,ExtType}> when 'true' ->
				  %% Line 1342
				  ( case ExtType of
				      ( <( {'type',_rec99,_cor139,_cor140,_cor141,_cor142}
					   -| ['compiler_generated'] )> when 'true' ->
					    let <_cor69> =
						%% Line 1343
						( letrec
						      'lc$^2'/1 =
							  fun (_cor59) ->
							      case _cor59 of
								<[%% Line 1345
								  X|_cor58]> when 'true' ->
								    ( case X of
									( <( {'tag',_rec100,_cor144,_cor145,_cor146}
									     -| ['compiler_generated'] )> when 'true' ->
									      let <_cor66> =
										  apply 'decode_class'/1
										      (_rec100)
									      in  let <_cor67> =
										      apply 'encode_tag_val'/3
											  (_cor66, _cor146, _cor144)
										  in  let <_cor68> =
											  %% Line 1345
											  apply 'lc$^2'/1
											      (_cor58)
										      in  ( [_cor67|_cor68]
											    -| ['compiler_generated'] )
									  -| ['compiler_generated'] )
									( <_cor147> when 'true' ->
									      ( call ( 'erlang'
										       -| ['compiler_generated'] ):( 'error'
														     -| ['compiler_generated'] )
										    (( {'badrecord','tag'}
										       -| ['compiler_generated'] ))
										-| ['compiler_generated'] )
									  -| ['compiler_generated'] )
								      end
								      -| ['compiler_generated'] )
								<[]> when 'true' ->
								    []
								( <_cor59> when 'true' ->
								      ( primop 'match_fail'
									    ({'function_clause',_cor59})
									-| [{'function_name',{'lc$^2',1}}] )
								  -| ['compiler_generated'] )
							      end
						  in  apply 'lc$^2'/1
							  (_rec99)
						  -| ['list_comprehension'] )
					    in  let <_cor71> =
						    %% Line 1346
						    apply 'indent'/1
							(9)
						in  let <_cor72> =
							%% Line 1346
							apply 'indent'/1
							    (12)
						    in  %% Line 1346
							call 'asn1ct_gen':'emit'
							    ([_cor71|[T|[[32|[45|[62]]]|['nl'|[_cor72|[ExtMod|[[58|[39|[101|[110|[99|[95]]]]]]|%% Line 1347
																	       [T|[[39|[40|[86|[97|[108|[44|[32]]]]]]]|[{'asis',_cor69}|[[41]]]]]]]]]]]])
					-| ['compiler_generated'] )
				      ( <_cor143> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','type'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
			      ( <_cor53> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor53})
				-| ['compiler_generated'] )
			    end
			( <_cor73> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor73})
			  -| ['compiler_generated'] )
		      end
		      %% Line 1349
		      {[],0}
	  ( <_cor75,_cor74> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor75,_cor74})
		  -| [{'function_name',{'emit_inner_of_fun',2}}] )
	    -| ['compiler_generated'] )
	end
'indent'/1 =
    %% Line 1351
    fun (_cor0) ->
	%% Line 1352
	call 'lists':'duplicate'
	    (_cor0, 32)
'gen_objset_dec'/7 =
    %% Line 1355
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <_cor20,_cor21,{'unique','undefined'},_cor22,_cor23,_cor24,_cor25> when 'true' ->
	      %% Line 1358
	      'ok'
	  %% Line 1359
	  <Erules,ObjSName,UniqueName,[{ObjName,Val,Fields}|T],%% Line 1360
							       ClName,%% Line 1360
								      ClFields,%% Line 1360
									       NthObj> when 'true' ->
	      do  %% Line 1361
		  call 'asn1ct_gen':'emit'
		      ([[39|[103|[101|[116|[100|[101|[99|[95]]]]]]]]|[ObjSName|[[39|[40]]|[{'asis',Val}|[[41|[32|[45|[62]]]]|['nl']]]]]])
		  let <CurrMod> =
		      %% Line 1362
		      call 'erlang':'get'
			  ('currmod')
		  in  let <_cor9> =
			  %% Line 1364
			  case ObjName of
			    %% Line 1365
			    <{'no_mod','no_name'}> when 'true' ->
				%% Line 1366
				apply 'gen_inlined_dec_funs'/4
				    (Fields, ClFields, ObjSName, NthObj)
			    %% Line 1367
			    <{_cor26,Name}>
				when call 'erlang':'=:='
				      (_cor26,
				       CurrMod) ->
				do  %% Line 1368
				    call 'asn1ct_gen':'emit'
					([[32|[32|[32|[32|[102|[117|[110|[32|[39|[100|[101|[99|[95]]]]]]]]]]]]]|[Name|[[39|[47|[51]]]]]])
				    %% Line 1369
				    NthObj
			    %% Line 1370
			    <{ModuleName,Name}> when 'true' ->
				do  %% Line 1371
				    apply 'emit_ext_fun'/3
					('dec', ModuleName, Name)
				    %% Line 1372
				    NthObj
			    %% Line 1373
			    <_cor27> when 'true' ->
				do  %% Line 1374
				    call 'asn1ct_gen':'emit'
					([[32|[32|[32|[32|[102|[117|[110|[32|[39|[100|[101|[99|[95]]]]]]]]]]]]]|[ObjName|[[39|[47|[51]]]]]])
				    %% Line 1375
				    NthObj
			  end
		      in  do  %% Line 1377
			      call 'asn1ct_gen':'emit'
				  ([[59]|['nl']])
			      %% Line 1378
			      apply 'gen_objset_dec'/7
				  (Erules, ObjSName, UniqueName, T, ClName, %% Line 1379
									    ClFields, _cor9)
	  %% Line 1380
	  <_cor28,ObjSetName,_X_UniqueName,['EXTENSIONMARK'],_X_ClName,%% Line 1381
								       _X_ClFields,%% Line 1381
										   _X_NthObj> when 'true' ->
	      do  %% Line 1382
		  call 'asn1ct_gen':'emit'
		      ([[39|[103|[101|[116|[100|[101|[99|[95]]]]]]]]|[ObjSetName|[[39|[40|[95|[41|[32|[45|[62]]]]]]]|['nl']]]])
		  let <_cor11> =
		      %% Line 1383
		      apply 'indent'/1
			  (2)
		  in  do  %% Line 1383
			  call 'asn1ct_gen':'emit'
			      ([_cor11|[[102|[117|[110|[40|[95|[44|[66|[121|[116|[101|[115|[44|[32|[95|[82|[101|[115|[116|[80|[114|[105|[109|[70|[105|[101|[108|[100|[78|[97|[109|[101|[41|[32|[45|[62]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|['nl']]])
			  do  %% Line 1384
			      apply 'emit_dec_open_type'/1
				  (4)
			      let <_cor12> =
				  %% Line 1386
				  apply 'indent'/1
				      (2)
			      in  do  %% Line 1385
				      call 'asn1ct_gen':'emit'
					  (['nl'|%% Line 1386
						 [_cor12|[[101|[110|[100|[46]]]]|['nl'|['nl']]]]])
				      %% Line 1387
				      'ok'
	  %% Line 1388
	  <_cor29,ObjSetName,UniqueName,[],_cor30,_cor31,_cor32> when 'true' ->
	      do  %% Line 1389
		  apply 'emit_default_getdec'/2
		      (ObjSetName, UniqueName)
		  do  %% Line 1390
		      call 'asn1ct_gen':'emit'
			  ([[46]|['nl'|['nl']]])
		      %% Line 1391
		      'ok'
	  ( <_cor19,_cor18,_cor17,_cor16,_cor15,_cor14,_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor19,_cor18,_cor17,_cor16,_cor15,_cor14,_cor13})
		  -| [{'function_name',{'gen_objset_dec',7}}] )
	    -| ['compiler_generated'] )
	end
'emit_default_getdec'/2 =
    %% Line 1393
    fun (_cor1,_cor0) ->
	do  %% Line 1394
	    call 'asn1ct_gen':'emit'
		([[39|[103|[101|[116|[100|[101|[99|[95]]]]]]]]|[_cor1|[[39|[40|[69|[114|[114|[86|[41|[32|[45|[62]]]]]]]]]]|['nl']]]])
	    let <_cor2> =
		%% Line 1395
		apply 'indent'/1
		    (2)
	    in  %% Line 1395
		call 'asn1ct_gen':'emit'
		    ([_cor2|[[102|[117|[110|[40|[67|[44|[86|[44|[95|[41|[32|[45|[62|[32|[101|[120|[105|[116|[40|[123|[123|[99|[111|[109|[112|[111|[110|[101|[110|[116|[44|[67|[125|[44|[123|[118|[97|[108|[117|[101|[44|[86|[125|[44|[123|[117|[110|[105|[113|[117|[101|[95|[110|[97|[109|[101|[95|[97|[110|[100|[95|[118|[97|[108|[117|[101|[44]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[{'asis',_cor0}|[[44|[32|[69|[114|[114|[86|[125|[125|[41|[32|[101|[110|[100]]]]]]]]]]]]]]]]])
'gen_inlined_dec_funs'/4 =
    %% Line 1397
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 1398
	    apply 'indent'/1
		(3)
	in  let <_cor5> =
		%% Line 1399
		apply 'indent'/1
		    (6)
	    in  do  %% Line 1398
		    call 'asn1ct_gen':'emit'
			([_cor4|[[102|[117|[110|[40|[84|[121|[112|[101|[44|[32|[66|[121|[116|[101|[115|[44|[32|[95|[82|[101|[115|[116|[80|[114|[105|[109|[70|[105|[101|[108|[100|[78|[97|[109|[101|[41|[32|[45|[62]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|['nl'|%% Line 1399
																																[_cor5|[[99|[97|[115|[101|[32|[84|[121|[112|[101|[32|[111|[102]]]]]]]]]]]]|['nl']]]]]])
		    %% Line 1400
		    apply 'gen_inlined_dec_funs1'/5
			(_cor3, _cor2, _cor1, [], _cor0)
'gen_inlined_dec_funs1'/5 =
    %% Line 1402
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Fields,[{'typefield',Name,Prop}|Rest],%% Line 1403
						 ObjSetName,%% Line 1403
							    Sep0,%% Line 1403
								 NthObj> when 'true' ->
	      do  %% Line 1404
		  call 'asn1ct_gen':'emit'
		      (Sep0)
		  let <_cor7> =
		      %% Line 1406
		      case Prop of
			%% Line 1407
			<'OPTIONAL'> when 'true' ->
			    'opt_or_default'
			%% Line 1408
			<{'DEFAULT',_cor44}> when 'true' ->
			    'opt_or_default'
			%% Line 1409
			<_cor45> when 'true' ->
			    'mandatory'
		      end
		  in  let <InternalDefFunName> =
			  %% Line 1411
			  [NthObj|[Name|[ObjSetName|[]]]]
		      in  let <_cor34> =
			      %% Line 1412
			      case call 'lists':'keyfind'
				       (Name, 1, Fields) of
				%% Line 1413
				<{_cor46,Type = {'type',_cor47,_cor48,_cor49,_cor50,_cor51}}> when 'true' ->
				    %% Line 1414
				    apply 'emit_inner_of_decfun'/3
					(Type, _cor7, InternalDefFunName)
				%% Line 1415
				<{_cor52,Type = {'typedef',_cor53,_cor54,_cor55,_cor56}}> when 'true' ->
				    let <_cor10> =
					%% Line 1416
					apply 'indent'/1
					    (9)
				    in  do  %% Line 1416
					    call 'asn1ct_gen':'emit'
						([_cor10|[{'asis',Name}|[[32|[45|[62]]]|['nl']]]])
					    %% Line 1417
					    apply 'emit_inner_of_decfun'/3
						(Type, _cor7, InternalDefFunName)
				%% Line 1418
				<{_cor57,{'Externaltypereference',_cor58,M,T}}> when 'true' ->
				    let <_cor11> =
					%% Line 1419
					apply 'indent'/1
					    (9)
				    in  do  %% Line 1419
					    call 'asn1ct_gen':'emit'
						([_cor11|[{'asis',Name}|[[32|[45|[62]]]|['nl']]]])
					    let <CurrMod> =
						%% Line 1420
						call 'erlang':'get'
						    ('currmod')
					    in  do  %% Line 1421
						    case <> of
						      %% Line 1422
						      <>
							  when call 'erlang':'=:='
								(M,
								 CurrMod) ->
							  let <_cor13> =
							      %% Line 1423
							      apply 'indent'/1
								  (12)
							  in  %% Line 1423
							      call 'asn1ct_gen':'emit'
								  ([_cor13|[[39|[100|[101|[99|[95]]]]]|[T|[[39|[40|[66|[121|[116|[101|[115|[41]]]]]]]]]]]])
						      %% Line 1424
						      <> when 'true' ->
							  %% Line 1425
							  case call 'asn1_db':'dbget'
								   (M, T) of
							    <{'typedef',_cor59,_cor60,_cor61,Type}> when 'true' ->
								%% Line 1426
								( case Type of
								    ( <( {'type',_rec103,_cor62,_cor63,_cor64,_cor65}
									 -| ['compiler_generated'] )> when 'true' ->
									  let <_cor29> =
									      %% Line 1427
									      ( letrec
										    'lc$^0'/1 =
											fun (_cor20) ->
											    case _cor20 of
											      <[%% Line 1428
												X|_cor19]> when 'true' ->
												  ( case X of
												      ( <( {'tag',_rec104,_cor67,_cor68,_cor69}
													   -| ['compiler_generated'] )> when 'true' ->
													    let <_cor25> =
														apply 'decode_class'/1
														    (_rec104)
													    in  let <_cor26> =
														    call 'erlang':'bsl'
															(_cor25, 10)
														in  let <_cor27> =
															call 'erlang':'+'
															    (_cor26, _cor67)
														    in  let <_cor28> =
															    %% Line 1428
															    apply 'lc$^0'/1
																(_cor19)
															in  ( [_cor27|_cor28]
															      -| ['compiler_generated'] )
													-| ['compiler_generated'] )
												      ( <_cor70> when 'true' ->
													    ( call ( 'erlang'
														     -| ['compiler_generated'] ):( 'error'
																		   -| ['compiler_generated'] )
														  (( {'badrecord','tag'}
														     -| ['compiler_generated'] ))
													      -| ['compiler_generated'] )
													-| ['compiler_generated'] )
												    end
												    -| ['compiler_generated'] )
											      <[]> when 'true' ->
												  []
											      ( <_cor20> when 'true' ->
												    ( primop 'match_fail'
													  ({'function_clause',_cor20})
												      -| [{'function_name',{'lc$^0',1}}] )
												-| ['compiler_generated'] )
											    end
										in  apply 'lc$^0'/1
											(_rec103)
										-| ['list_comprehension'] )
									  in  let <_cor31> =
										  %% Line 1429
										  apply 'indent'/1
										      (12)
									      in  %% Line 1429
										  call 'asn1ct_gen':'emit'
										      ([_cor31|[[39]|[M|[[39|[58|[39|[100|[101|[99|[95]]]]]]]|[T|[[39|[40|[66|[121|[116|[101|[115|[44|[32]]]]]]]]]|[{'asis',_cor29}|[[41]]]]]]]]])
								      -| ['compiler_generated'] )
								    ( <_cor66> when 'true' ->
									  ( call ( 'erlang'
										   -| ['compiler_generated'] ):( 'error'
														 -| ['compiler_generated'] )
										(( {'badrecord','type'}
										   -| ['compiler_generated'] ))
									    -| ['compiler_generated'] )
								      -| ['compiler_generated'] )
								  end
								  -| ['compiler_generated'] )
							    ( <_cor14> when 'true' ->
								  primop 'match_fail'
								      ({'badmatch',_cor14})
							      -| ['compiler_generated'] )
							  end
						    end
						    %% Line 1431
						    0
				%% Line 1432
				<'false'> when 'true' ->
				    let <_cor32> =
					%% Line 1433
					apply 'indent'/1
					    (9)
				    in  do  %% Line 1433
					    call 'asn1ct_gen':'emit'
						([_cor32|[{'asis',Name}|[[32|[45|[62]]]|['nl']]]])
					    do  %% Line 1434
						apply 'emit_dec_open_type'/1
						    (11)
						%% Line 1435
						0
				( <_cor33> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor33})
				  -| ['compiler_generated'] )
			      end
			  in  let <_cor36> =
				  %% Line 1437
				  call 'erlang':'+'
				      (NthObj, _cor34)
			      in  %% Line 1437
				  apply 'gen_inlined_dec_funs1'/5
				      (Fields, Rest, ObjSetName, [[59]|['nl']], _cor36)
	  %% Line 1438
	  <Fields,[_cor75|Rest],ObjSetName,Sep,NthObj> when 'true' ->
	      %% Line 1439
	      apply 'gen_inlined_dec_funs1'/5
		  (Fields, Rest, ObjSetName, Sep, NthObj)
	  %% Line 1440
	  <_cor76,[],_cor77,_cor78,NthObj> when 'true' ->
	      let <_cor37> =
		  %% Line 1441
		  apply 'indent'/1
		      (6)
	      in  let <_cor38> =
		      %% Line 1442
		      apply 'indent'/1
			  (3)
		  in  do  %% Line 1441
			  call 'asn1ct_gen':'emit'
			      (['nl'|[_cor37|[[101|[110|[100]]]|['nl'|%% Line 1442
								      [_cor38|[[101|[110|[100]]]]]]]]])
			  %% Line 1443
			  NthObj
	  ( <_cor43,_cor42,_cor41,_cor40,_cor39> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor43,_cor42,_cor41,_cor40,_cor39})
		  -| [{'function_name',{'gen_inlined_dec_funs1',5}}] )
	    -| ['compiler_generated'] )
	end
'emit_dec_open_type'/1 =
    %% Line 1445
    fun (_cor0) ->
	let <Indent> =
	    %% Line 1446
	    apply 'indent'/1
		(_cor0)
	in  let <_cor11> =
		%% Line 1447
		case call 'asn1ct':'use_legacy_types'
			 () of
		  %% Line 1448
		  <'false'> when 'true' ->
		      let <_cor2> =
			  %% Line 1450
			  apply 'indent'/1
			      (2)
		      in  let <_cor3> =
			      %% Line 1451
			      apply 'indent'/1
				  (4)
			  in  let <_cor4> =
				  %% Line 1452
				  apply 'indent'/1
				      (2)
			      in  let <_cor5> =
				      %% Line 1453
				      apply 'indent'/1
					  (4)
				  in  %% Line 1449
				      [Indent|[[99|[97|[115|[101|[32|[66|[121|[116|[101|[115|[32|[111|[102]]]]]]]]]]]]]|['nl'|%% Line 1450
															      [Indent|[_cor2|[[66|[105|[110|[32|[119|[104|[101|[110|[32|[105|[115|[95|[98|[105|[110|[97|[114|[121|[40|[66|[105|[110|[41|[32|[45|[62|[32]]]]]]]]]]]]]]]]]]]]]]]]]]]|['nl'|%% Line 1451
																																					 [Indent|[_cor3|[[123|[97|[115|[110|[49|[95|[79|[80|[69|[78|[84|[89|[80|[69|[44|[66|[105|[110|[125|[59]]]]]]]]]]]]]]]]]]]]|['nl'|%% Line 1452
																																																					 [Indent|[_cor4|[[95|[32|[45|[62]]]]|['nl'|%% Line 1453
																																																										   [Indent|[_cor5|[[123|[97|[115|[110|[49|[95|[79|[80|[69|[78|[84|[89|[80|[69|[44]]]]]]]]]]]]]]]|%% Line 1454
																																																																						 [{'call','ber','ber_encode',[[66|[121|[116|[101|[115]]]]]]}|[[125]|['nl'|%% Line 1455
																																																																															  [Indent|[[101|[110|[100]]]]]]]]]]]]]]]]]]]]]]]]]]
		  %% Line 1456
		  <'true'> when 'true' ->
		      let <_cor6> =
			  %% Line 1458
			  apply 'indent'/1
			      (2)
		      in  let <_cor7> =
			      %% Line 1459
			      apply 'indent'/1
				  (4)
			  in  let <_cor8> =
				  %% Line 1460
				  apply 'indent'/1
				      (2)
			      in  let <_cor9> =
				      %% Line 1461
				      apply 'indent'/1
					  (4)
				  in  %% Line 1457
				      [Indent|[[99|[97|[115|[101|[32|[66|[121|[116|[101|[115|[32|[111|[102]]]]]]]]]]]]]|['nl'|%% Line 1458
															      [Indent|[_cor6|[[66|[105|[110|[32|[119|[104|[101|[110|[32|[105|[115|[95|[98|[105|[110|[97|[114|[121|[40|[66|[105|[110|[41|[32|[45|[62|[32]]]]]]]]]]]]]]]]]]]]]]]]]]]|['nl'|%% Line 1459
																																					 [Indent|[_cor7|[[66|[105|[110|[59]]]]|['nl'|%% Line 1460
																																										     [Indent|[_cor8|[[95|[32|[45|[62]]]]|['nl'|%% Line 1461
																																															       [Indent|[_cor9|[{'call','ber','ber_encode',[[66|[121|[116|[101|[115]]]]]]}|['nl'|%% Line 1462
																																																										[Indent|[[101|[110|[100]]]]]]]]]]]]]]]]]]]]]]]]
		  ( <_cor10> when 'true' ->
			primop 'match_fail'
			    ({'case_clause',_cor10})
		    -| ['compiler_generated'] )
		end
	    in  %% Line 1464
		call 'asn1ct_gen':'emit'
		    (_cor11)
'emit_inner_of_decfun'/3 =
    %% Line 1466
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'typedef',_cor57,_cor58,{ExtName,Name},Type},_X_Prop,%% Line 1467
								 InternalDefFunName> when 'true' ->
	      %% Line 1468
	      ( case Type of
		  ( <( {'type',_rec106,_cor59,_cor60,_cor61,_cor62}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_cor17> =
			    %% Line 1470
			    ( letrec
				  'lc$^0'/1 =
				      fun (_cor8) ->
					  case _cor8 of
					    <[X|_cor7]> when 'true' ->
						( case X of
						    ( <( {'tag',_rec107,_cor64,_cor65,_cor66}
							 -| ['compiler_generated'] )> when 'true' ->
							  let <_cor13> =
							      apply 'decode_class'/1
								  (_rec107)
							  in  let <_cor14> =
								  call 'erlang':'bsl'
								      (_cor13, 10)
							      in  let <_cor15> =
								      call 'erlang':'+'
									  (_cor14, _cor64)
								  in  let <_cor16> =
									  apply 'lc$^0'/1
									      (_cor7)
								      in  ( [_cor15|_cor16]
									    -| ['compiler_generated'] )
						      -| ['compiler_generated'] )
						    ( <_cor67> when 'true' ->
							  ( call ( 'erlang'
								   -| ['compiler_generated'] ):( 'error'
												 -| ['compiler_generated'] )
								(( {'badrecord','tag'}
								   -| ['compiler_generated'] ))
							    -| ['compiler_generated'] )
						      -| ['compiler_generated'] )
						  end
						  -| ['compiler_generated'] )
					    <[]> when 'true' ->
						[]
					    ( <_cor8> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor8})
						    -| [{'function_name',{'lc$^0',1}}] )
					      -| ['compiler_generated'] )
					  end
			      in  apply 'lc$^0'/1
				      (_rec106)
			      -| ['list_comprehension'] )
			in  %% Line 1471
			    case <ExtName,Name> of
			      %% Line 1472
			      <'primitive','bif'> when 'true' ->
				  let <_cor19> =
				      %% Line 1473
				      apply 'indent'/1
					  (12)
				  in  do  %% Line 1473
					  call 'asn1ct_gen':'emit'
					      (_cor19)
					  do  %% Line 1474
					      apply 'gen_dec_prim'/3
						  (Type, [66|[121|[116|[101|[115]]]]], _cor17)
					      %% Line 1475
					      0
			      %% Line 1476
			      <'constructed','bif'> when 'true' ->
				  let <_cor20> =
				      %% Line 1477
				      apply 'indent'/1
					  (12)
				  in  let <_cor21> =
					  %% Line 1480
					  call 'asn1ct_gen':'list2name'
					      (InternalDefFunName)
				      in  do  %% Line 1477
					      call 'asn1ct_gen':'emit'
						  ([_cor20|[[39|[100|[101|[99|[95]]]]]|%% Line 1480
										       [_cor21|[[39|[40|[66|[121|[116|[101|[115|[44|[32]]]]]]]]]|%% Line 1481
																		 [{'asis',_cor17}|[[41]]]]]]])
					      %% Line 1482
					      1
			      %% Line 1483
			      <_fol792,_fol793> when 'true' ->
				  let <_cor22> =
				      %% Line 1484
				      apply 'indent'/1
					  (12)
				  in  do  %% Line 1484
					  call 'asn1ct_gen':'emit'
					      ([_cor22|[[39]|[ExtName|[[39|[58|[39|[100|[101|[99|[95]]]]]]]|[Name|[[39|[40|[66|[121|[116|[101|[115|[44|[32]]]]]]]]]|%% Line 1485
																				    [{'asis',_cor17}|[[41]]]]]]]]])
					  %% Line 1486
					  0
			    end
		    -| ['compiler_generated'] )
		  ( <_cor63> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','type'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1488
	  <{'typedef',_cor73,_cor74,Name,_cor75},_X_Prop,_cor76> when 'true' ->
	      let <_cor24> =
		  %% Line 1489
		  apply 'indent'/1
		      (12)
	      in  do  %% Line 1489
		      call 'asn1ct_gen':'emit'
			  ([_cor24|[[39|[100|[101|[99|[95]]]]]|[Name|[[39|[40|[66|[121|[116|[101|[115|[41]]]]]]]]]]]])
		      %% Line 1490
		      0
	  %% Line 1491
	  <Type = {'type',_cor77,_cor78,_cor79,_cor80,_cor81},_X_Prop,_cor82> when 'true' ->
	      let <_cor39> =
		  %% Line 1494
		  ( letrec
			'lc$^1'/1 =
			    fun (_cor30) ->
				case _cor30 of
				  <[X|_cor29]> when 'true' ->
				      ( case X of
					  ( <( {'tag',_rec110,_cor88,_cor89,_cor90}
					       -| ['compiler_generated'] )> when 'true' ->
						let <_cor35> =
						    apply 'decode_class'/1
							(_rec110)
						in  let <_cor36> =
							call 'erlang':'bsl'
							    (_cor35, 10)
						    in  let <_cor37> =
							    call 'erlang':'+'
								(_cor36, _cor88)
							in  let <_cor38> =
								apply 'lc$^1'/1
								    (_cor29)
							    in  ( [_cor37|_cor38]
								  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					  ( <_cor91> when 'true' ->
						( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'error'
										       -| ['compiler_generated'] )
						      (( {'badrecord','tag'}
							 -| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					end
					-| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor30> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor30})
					  -| [{'function_name',{'lc$^1',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^1'/1
			    (_cor77)
		    -| ['list_comprehension'] )
	      in  let <CurrMod> =
		      %% Line 1495
		      call 'erlang':'get'
			  ('currmod')
		  in  let <InnerType> =
			  %% Line 1497
			  call 'asn1ct_gen':'get_inner'
			      (_cor78)
		      in  let <WhatKind> =
			      %% Line 1498
			      call 'asn1ct_gen':'type'
				  (InnerType)
			  in  do  %% Line 1499
				  case WhatKind of
				    %% Line 1500
				    <{'primitive','bif'}> when 'true' ->
					let <_cor47> =
					    %% Line 1501
					    apply 'indent'/1
						(9)
					in  let <_cor48> =
						%% Line 1501
						apply 'indent'/1
						    (12)
					    in  do  %% Line 1501
						    call 'asn1ct_gen':'emit'
							([_cor47|[_cor78|[[32|[45|[62]]]|['nl'|[_cor48|[]]]]]])
						    %% Line 1502
						    apply 'gen_dec_prim'/3
							(Type, [66|[121|[116|[101|[115]]]]], _cor39)
				    %% Line 1503
				    <{'Externaltypereference',_cor101,_cor102,T}>
					when call 'erlang':'=:='
					      (_cor102,
					       CurrMod) ->
					let <_cor49> =
					    %% Line 1504
					    apply 'indent'/1
						(9)
					in  let <_cor50> =
						%% Line 1504
						apply 'indent'/1
						    (12)
					    in  %% Line 1504
						call 'asn1ct_gen':'emit'
						    ([_cor49|[T|[[32|[45|[62]]]|['nl'|[_cor50|[[39|[100|[101|[99|[95]]]]]|[T|%% Line 1506
															     [[39|[40|[66|[121|[116|[101|[115|[41]]]]]]]]]]]]]]]])
				    %% Line 1507
				    <{'Externaltypereference',_cor103,ExtMod,T}> when 'true' ->
					let <_cor51> =
					    %% Line 1508
					    apply 'indent'/1
						(9)
					in  let <_cor52> =
						%% Line 1508
						apply 'indent'/1
						    (12)
					    in  %% Line 1508
						call 'asn1ct_gen':'emit'
						    ([_cor51|[T|[[32|[45|[62]]]|['nl'|[_cor52|[ExtMod|[[58|[39|[100|[101|[99|[95]]]]]]|%% Line 1510
																       [T|[[39|[40|[66|[121|[116|[101|[115|[44|[32]]]]]]]]]|[{'asis',_cor39}|[[41]]]]]]]]]]]])
				    ( <_cor53> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_cor53})
				      -| ['compiler_generated'] )
				  end
				  %% Line 1512
				  0
	  ( <_cor56,_cor55,_cor54> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor56,_cor55,_cor54})
		  -| [{'function_name',{'emit_inner_of_decfun',3}}] )
	    -| ['compiler_generated'] )
	end
'gen_internal_funcs'/2 =
    %% Line 1514
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <_cor6,[]> when 'true' ->
	      %% Line 1515
	      'ok'
	  %% Line 1516
	  <Erules,[TypeDef|Rest]> when 'true' ->
	      do  %% Line 1517
		  apply 'gen_encode_user'/3
		      (Erules, TypeDef, 'false')
		  %% Line 1519
		  ( case TypeDef of
		      ( <( {'typedef',_cor7,_cor8,_rec113,_cor9}
			   -| ['compiler_generated'] )> when 'true' ->
			    do  call 'asn1ct_gen':'emit'
				    (['nl'|['nl'|[[39|[100|[101|[99|[95]]]]]|[_rec113|[[39|[40|[84|[108|[118|[44|[32|[84|[97|[103|[73|[110|[41|[32|[45|[62]]]]]]]]]]]]]]]]|['nl']]]]]])
				do  %% Line 1520
				    apply 'gen_decode_user'/2
					(Erules, TypeDef)
				    %% Line 1521
				    apply 'gen_internal_funcs'/2
					(Erules, Rest)
			-| ['compiler_generated'] )
		      ( <_cor10> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','typedef'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'gen_internal_funcs',2}}] )
	    -| ['compiler_generated'] )
	end
'dbdec'/2 =
    %% Line 1524
    fun (_cor1,_cor0) ->
	%% Line 1525
	call 'asn1ct_gen':'demit'
	    ({[105|[111|[58|[102|[111|[114|[109|[97|[116|[40|[34|[100|[101|[99|[111|[100|[105|[110|[103|[58|[32]]]]]]]]]]]]]]]]]]]]],{'asis',_cor1},[126|[119|[126|[110|[34|[44|[91]]]]]]],_cor0,[93|[41|[44]]],'nl'})
'decode_class'/1 =
    %% Line 1528
    fun (_cor0) ->
	case _cor0 of
	  <'UNIVERSAL'> when 'true' ->
	      %% Line 1529
	      0
	  %% Line 1530
	  <'APPLICATION'> when 'true' ->
	      %% Line 1531
	      64
	  %% Line 1532
	  <'CONTEXT'> when 'true' ->
	      %% Line 1533
	      128
	  %% Line 1534
	  <'PRIVATE'> when 'true' ->
	      %% Line 1535
	      192
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'decode_class',1}}] )
	    -| ['compiler_generated'] )
	end
'decode_type'/1 =
    %% Line 1537
    fun (_cor0) ->
	case _cor0 of
	  <'BOOLEAN'> when 'true' ->
	      1
	  %% Line 1538
	  <'INTEGER'> when 'true' ->
	      2
	  %% Line 1539
	  <'BIT STRING'> when 'true' ->
	      3
	  %% Line 1540
	  <'OCTET STRING'> when 'true' ->
	      4
	  %% Line 1541
	  <'NULL'> when 'true' ->
	      5
	  %% Line 1542
	  <'OBJECT IDENTIFIER'> when 'true' ->
	      6
	  %% Line 1543
	  <'ObjectDescriptor'> when 'true' ->
	      7
	  %% Line 1544
	  <'EXTERNAL'> when 'true' ->
	      8
	  %% Line 1545
	  <'REAL'> when 'true' ->
	      9
	  %% Line 1546
	  <'ENUMERATED'> when 'true' ->
	      10
	  %% Line 1547
	  <'EMBEDDED_PDV'> when 'true' ->
	      11
	  %% Line 1548
	  <'UTF8String'> when 'true' ->
	      12
	  %% Line 1549
	  <'RELATIVE-OID'> when 'true' ->
	      13
	  %% Line 1550
	  <'SEQUENCE'> when 'true' ->
	      16
	  %% Line 1551
	  <'SEQUENCE OF'> when 'true' ->
	      16
	  %% Line 1552
	  <'SET'> when 'true' ->
	      17
	  %% Line 1553
	  <'SET OF'> when 'true' ->
	      17
	  %% Line 1554
	  <'NumericString'> when 'true' ->
	      18
	  %% Line 1555
	  <'PrintableString'> when 'true' ->
	      19
	  %% Line 1556
	  <'TeletexString'> when 'true' ->
	      20
	  %% Line 1557
	  <'T61String'> when 'true' ->
	      20
	  %% Line 1558
	  <'VideotexString'> when 'true' ->
	      21
	  %% Line 1559
	  <'IA5String'> when 'true' ->
	      22
	  %% Line 1560
	  <'UTCTime'> when 'true' ->
	      23
	  %% Line 1561
	  <'GeneralizedTime'> when 'true' ->
	      24
	  %% Line 1562
	  <'GraphicString'> when 'true' ->
	      25
	  %% Line 1563
	  <'VisibleString'> when 'true' ->
	      26
	  %% Line 1564
	  <'GeneralString'> when 'true' ->
	      27
	  %% Line 1565
	  <'UniversalString'> when 'true' ->
	      28
	  %% Line 1566
	  <'BMPString'> when 'true' ->
	      30
	  %% Line 1567
	  <'CHOICE'> when 'true' ->
	      'CHOICE'
	  %% Line 1568
	  <Else> when 'true' ->
	      call 'erlang':'exit'
		  ({'error',{'asn1',{'unrecognized_type',Else}}})
	end
'mkfuncname'/2 =
    %% Line 1570
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'Externaltypereference',_cor6,Mod,EType},DecOrEnc> when 'true' ->
	      let <CurrMod> =
		  %% Line 1571
		  call 'erlang':'get'
		      ('currmod')
	      in  %% Line 1572
		  case CurrMod of
		    %% Line 1573
		    <_cor7>
			when call 'erlang':'=:='
			      (CurrMod,
			       Mod) ->
			%% Line 1574
			call 'lists':'concat'
			    ([[39]|[DecOrEnc|[[95]|[EType|[[39]]]]]])
		    %% Line 1575
		    <_cor8> when 'true' ->
			%% Line 1576
			call 'lists':'concat'
			    ([[39]|[Mod|[[39|[58|[39]]]|[DecOrEnc|[[95]|[EType|[[39]]]]]]]])
		  end
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'mkfuncname',2}}] )
	    -| ['compiler_generated'] )
	end
'get_size_constraint'/1 =
    %% Line 1579
    fun (_cor0) ->
	%% Line 1580
	case call 'lists':'keyfind'
		 ('SizeConstraint', 1, _cor0) of
	  %% Line 1581
	  <'false'> when 'true' ->
	      []
	  %% Line 1582
	  <{_cor3,{_cor4,[]}}> when 'true' ->
	      []
	  %% Line 1583
	  <{_cor5,{Sv,_cor6}}>
	      when call 'erlang':'=:='
		    (_cor6,
		     Sv) ->
	      Sv
	  %% Line 1584
	  <{_cor7,Tc = {_cor8,_cor9}}> when 'true' ->
	      Tc
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor1})
	    -| ['compiler_generated'] )
	end
'get_class_fields'/1 =
    %% Line 1587
    fun (_cor0) ->
	case _cor0 of
	  <{'classdef',_cor3,_cor4,_cor5,ObjClass}> when 'true' ->
	      %% Line 1588
	      ( case ObjClass of
		  ( <( {'objectclass',_rec114,_cor6}
		       -| ['compiler_generated'] )> when 'true' ->
			_rec114
		    -| ['compiler_generated'] )
		  ( <_cor7> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','objectclass'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1589
	  <{'objectclass',Fields,_cor8}> when 'true' ->
	      %% Line 1590
	      Fields
	  %% Line 1591
	  <_cor9> when 'true' ->
	      %% Line 1592
	      []
	end
'get_object_field'/2 =
    %% Line 1594
    fun (_cor1,_cor0) ->
	%% Line 1595
	case call 'lists':'keysearch'
		 (_cor1, 1, _cor0) of
	  %% Line 1596
	  <{'value',Field}> when 'true' ->
	      Field
	  %% Line 1597
	  <'false'> when 'true' ->
	      'false'
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor2})
	    -| ['compiler_generated'] )
	end
'encode_tag_val'/3 =
    %% Line 1602
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Class,Form,TagNo>
	      when call 'erlang':'=<'
		    (TagNo,
		     30) ->
	      let <_cor4> =
		  %% Line 1603
		  call 'erlang':'bsr'
		      (Class, 6)
	      in  let <_cor3> =
		      %% Line 1603
		      call 'erlang':'bsr'
			  (Form, 5)
		  in  %% Line 1603
		      #{#<_cor4>(2,1,'integer',['unsigned'|['big']]),
			#<_cor3>(1,1,'integer',['unsigned'|['big']]),
			#<TagNo>(5,1,'integer',['unsigned'|['big']])}#
	  %% Line 1605
	  <Class,Form,TagNo> when 'true' ->
	      %% Line 1606
	      case apply 'mk_object_val'/1
		       (TagNo) of
		<{Octets,_X_Len}> when 'true' ->
		    let <BinOct> =
			%% Line 1607
			call 'erlang':'list_to_binary'
			    (Octets)
		    in  let <_cor8> =
			    %% Line 1608
			    call 'erlang':'bsr'
				(Class, 6)
			in  let <_cor7> =
				%% Line 1608
				call 'erlang':'bsr'
				    (Form, 5)
			    in  %% Line 1608
				#{#<_cor8>(2,1,'integer',['unsigned'|['big']]),
				  #<_cor7>(1,1,'integer',['unsigned'|['big']]),
				  #<31>(5,1,'integer',['unsigned'|['big']]),
				  #<BinOct>('all',8,'binary',['unsigned'|['big']])}#
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor5})
		  -| ['compiler_generated'] )
	      end
	end
'mk_object_val'/1 =
    %% Line 1617
    fun (_cor0) ->
	case _cor0 of
	  <Val>
	      when call 'erlang':'=<'
		    (_cor0,
		     127) ->
	      let <_cor1> =
		  %% Line 1618
		  call 'erlang':'band'
		      (255, Val)
	      in  %% Line 1618
		  {[_cor1|[]],1}
	  %% Line 1619
	  <Val> when 'true' ->
	      let <_cor3> =
		  %% Line 1620
		  call 'erlang':'bsr'
		      (Val, 7)
	      in  let <_cor2> =
		      %% Line 1620
		      call 'erlang':'band'
			  (Val, 127)
		  in  %% Line 1620
		      apply 'mk_object_val'/3
			  (_cor3, [_cor2|[]], 1)
	end
'mk_object_val'/3 =
    %% Line 1621
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <0,Ack,Len> when 'true' ->
	      %% Line 1622
	      {Ack,Len}
	  %% Line 1623
	  <Val,Ack,Len> when 'true' ->
	      let <_cor6> =
		  %% Line 1624
		  call 'erlang':'bsr'
		      (Val, 7)
	      in  let <_cor4> =
		      %% Line 1624
		      call 'erlang':'band'
			  (Val, 127)
		  in  let <_cor5> =
			  %% Line 1624
			  call 'erlang':'bor'
			      (_cor4, 128)
		      in  let <_cor3> =
			      %% Line 1624
			      call 'erlang':'+'
				  (Len, 1)
			  in  %% Line 1624
			      apply 'mk_object_val'/3
				  (_cor6, [_cor5|Ack], _cor3)
	end
'extaddgroup2sequence'/1 =
    %% Line 1628
    fun (_cor0) ->
	case _cor0 of
	  <ExtList>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      let <_cor3> =
		  %% Line 1629
		  ( fun (_cor1) ->
			case _cor1 of
			  <{'ExtensionAdditionGroup',_cor5}> when 'true' ->
			      %% Line 1630
			      'false'
			  %% Line 1631
			  <'ExtensionAdditionGroupEnd'> when 'true' ->
			      %% Line 1632
			      'false'
			  %% Line 1633
			  <_cor6> when 'true' ->
			      %% Line 1634
			      'true'
			end
		    -| [{'id',{0,0,'-extaddgroup2sequence/1-fun-0-'}}] )
	      in  %% Line 1629
		  call 'lists':'filter'
		      (_cor3, %% Line 1635
			      ExtList)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'extaddgroup2sequence',1}}] )
	    -| ['compiler_generated'] )
	end
'call'/2 =
    %% Line 1637
    fun (_cor1,_cor0) ->
	%% Line 1638
	call 'asn1ct_func':'call'
	    ('ber', _cor1, _cor0)
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('asn1ct_gen_ber_bin_v2')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('asn1ct_gen_ber_bin_v2', _cor0)
end