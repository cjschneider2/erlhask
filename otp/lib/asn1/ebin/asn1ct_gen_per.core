module 'asn1ct_gen_per' ['dialyzer_suppressions'/1,
			 'extaddgroup2sequence'/1,
			 'gen_dec_external'/2,
			 'gen_dec_imm'/2,
			 'gen_dec_prim'/3,
			 'gen_decode'/2,
			 'gen_decode'/3,
			 'gen_encode'/2,
			 'gen_encode'/3,
			 'gen_encode_prim_imm'/3,
			 'gen_obj_code'/3,
			 'gen_objectset_code'/2,
			 'module_info'/0,
			 'module_info'/1]
    attributes []
'dialyzer_suppressions'/1 =
    %% Line 44
    fun (_cor0) ->
	do  %% Line 45
	    case call 'asn1ct_func':'is_used'
		     ({_cor0,'complete',1}) of
	      %% Line 46
	      <'false'> when 'true' ->
		  'ok'
	      %% Line 48
	      <'true'> when 'true' ->
		  %% Line 49
		  call 'asn1ct_gen':'emit'
		      ([[32|[32|[32|[32|[95|[32|[61|[32|[99|[111|[109|[112|[108|[101|[116|[101|[40|[65|[114|[103|[41|[44]]]]]]]]]]]]]]]]]]]]]]|['nl']])
	      ( <_cor1> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor1})
		-| ['compiler_generated'] )
	    end
	    %% Line 51
	    call 'asn1ct_gen':'emit'
		([[32|[32|[32|[32|[111|[107|[46]]]]]]]|['nl']])
'gen_encode'/2 =
    %% Line 54
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Erules,Type = {'typedef',_cor4,_cor5,_cor6,_cor7}> when ( 'true'
								     -| ['compiler_generated'] ) ->
	      %% Line 55
	      apply 'gen_encode_user'/2
		  (Erules, Type)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'gen_encode',2}}] )
	    -| ['compiler_generated'] )
	end
'gen_encode'/3 =
    %% Line 65
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Erules,Typename,{'ComponentType',_cor17,Cname,Type,_cor18,_cor19,_cor20}> when 'true' ->
	      let <NewTypename> =
		  %% Line 66
		  [Cname|Typename]
	      in  %% Line 67
		  apply 'gen_encode'/3
		      (Erules, NewTypename, Type)
	  %% Line 69
	  <Erules,Typename,Type = {'type',_cor21,_cor22,_cor23,_cor24,_cor25}> when ( 'true'
										      -| ['compiler_generated'] ) ->
	      let <InnerType> =
		  %% Line 70
		  call 'asn1ct_gen':'get_inner'
		      (_cor22)
	      in  let <_cor10> =
		      %% Line 72
		      case call 'lists':'keysearch'
			       ('objfun', 1, _cor24) of
			%% Line 73
			<{'value',{_cor36,_X_Name}}> when 'true' ->
			    %% Line 75
			    [44|[32|[79|[98|[106|[70|[117|[110]]]]]]]]
			%% Line 76
			<'false'> when 'true' ->
			    %% Line 77
			    []
			( <_cor9> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor9})
			  -| ['compiler_generated'] )
		      end
		  in  %% Line 79
		      case call 'asn1ct_gen':'type'
			       (InnerType) of
			%% Line 80
			<{'constructed','bif'}> when 'true' ->
			    let <_cor12> =
				%% Line 81
				call 'asn1ct_gen':'list2name'
				    (Typename)
			    in  do  %% Line 81
				    call 'asn1ct_gen':'emit'
					({[39|[101|[110|[99|[95]]]]],_cor12,[39|[40|[86|[97|[108]]]]],_cor10,%% Line 82
													     [41|[32|[45|[62]]]],%% Line 82
																 'nl'})
				    %% Line 83
				    call 'asn1ct_gen':'gen_encode_constructed'
					(Erules, Typename, InnerType, Type)
			%% Line 84
			<_cor37> when 'true' ->
			    %% Line 85
			    'true'
		      end
	  ( <_cor16,_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15,_cor14})
		  -| [{'function_name',{'gen_encode',3}}] )
	    -| ['compiler_generated'] )
	end
'gen_encode_user'/2 =
    %% Line 89
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Erules,D = {'typedef',_cor19,_cor20,_cor21,_cor22}> when ( 'true'
								      -| ['compiler_generated'] ) ->
	      let <CurrMod> =
		  %% Line 90
		  call 'erlang':'get'
		      ('currmod')
	      in  let <Typename> =
		      %% Line 91
		      [_cor21|[]]
		  in  %% Line 93
		      ( case _cor22 of
			  ( <( {'type',_cor31,_rec4,_cor32,_cor33,_cor34}
			       -| ['compiler_generated'] )> when 'true' ->
				let <InnerType> =
				    call 'asn1ct_gen':'get_inner'
					(_rec4)
				in  let <_cor12> =
					%% Line 94
					call 'asn1ct_gen':'list2name'
					    (Typename)
				    in  do  %% Line 94
					    call 'asn1ct_gen':'emit'
						({[39|[101|[110|[99|[95]]]]],_cor12,[39|[40|[86|[97|[108|[41|[32|[45|[62]]]]]]]]],'nl'})
					    %% Line 95
					    case call 'asn1ct_gen':'type'
						     (InnerType) of
					      %% Line 96
					      <{'primitive','bif'}> when 'true' ->
						  do  %% Line 97
						      apply 'gen_encode_prim'/2
							  (Erules, _cor22)
						      %% Line 98
						      call 'asn1ct_gen':'emit'
							  ({[46],'nl'})
					      %% Line 99
					      <'ASN1_OPEN_TYPE'> when 'true' ->
						  let <_cor15> =
						      %% Line 100
						      call 'erlang':'setelement'
							  (3, _cor22, 'ASN1_OPEN_TYPE')
						  in  do  %% Line 100
							  apply 'gen_encode_prim'/2
							      (Erules, _cor15)
							  %% Line 101
							  call 'asn1ct_gen':'emit'
							      ({[46],'nl'})
					      %% Line 102
					      <{'constructed','bif'}> when 'true' ->
						  %% Line 103
						  call 'asn1ct_gen':'gen_encode_constructed'
						      (Erules, Typename, InnerType, D)
					      %% Line 104
					      <{'Externaltypereference',_cor42,_cor43,Etype}>
						  when call 'erlang':'=:='
							(_cor43,
							 CurrMod) ->
						  %% Line 105
						  call 'asn1ct_gen':'emit'
						      ({[39|[101|[110|[99|[95]]]]],Etype,[39|[40|[86|[97|[108|[41|[46]]]]]]],'nl','nl'})
					      %% Line 106
					      <{'Externaltypereference',_cor44,Emod,Etype}> when 'true' ->
						  %% Line 107
						  call 'asn1ct_gen':'emit'
						      ({[39],Emod,[39|[58|[39|[101|[110|[99|[95]]]]]]],Etype,[39|[40|[86|[97|[108|[41|[46]]]]]]],'nl','nl'})
					      ( <_cor16> when 'true' ->
						    primop 'match_fail'
							({'case_clause',_cor16})
						-| ['compiler_generated'] )
					    end
			    -| ['compiler_generated'] )
			  ( <_cor35> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','type'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
	  ( <_cor18,_cor17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor18,_cor17})
		  -| [{'function_name',{'gen_encode_user',2}}] )
	    -| ['compiler_generated'] )
	end
'gen_encode_prim'/2 =
    %% Line 111
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 112
	    call 'asn1ct_name':'curr'
		('val')
	in  let <_cor3> =
		%% Line 112
		call 'asn1ct_gen':'mk_var'
		    (_cor2)
	    in  let <_cor4> =
		    %% Line 112
		    call 'erlang':'atom_to_list'
			(_cor3)
		in  let <Value> = {%% Line 112
			 'var',_cor4}
		    in  %% Line 113
			apply 'gen_encode_prim'/3
			    (_cor1, _cor0, Value)
'gen_encode_prim'/3 =
    %% Line 115
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Erules,D = {'type',_cor10,_cor11,_cor12,_cor13,_cor14},Value> when 'true' ->
	      let <_cor4> =
		  %% Line 116
		  case Erules of
		    %% Line 117
		    <'uper'> when 'true' ->
			'false'
		    %% Line 118
		    <'per'> when 'true' ->
			'true'
		    ( <_cor3> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor3})
		      -| ['compiler_generated'] )
		  end
	      in  let <Imm> =
		      %% Line 120
		      apply 'gen_encode_prim_imm'/3
			  (Value, D, _cor4)
		  in  %% Line 121
		      call 'asn1ct_imm':'enc_cg'
			  (Imm, _cor4)
	  ( <_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7})
		  -| [{'function_name',{'gen_encode_prim',3}}] )
	    -| ['compiler_generated'] )
	end
'gen_encode_prim_imm'/3 =
    %% Line 123
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Val,{'type',_cor20,Type0,Constraint,_cor21,_cor22},Aligned> when 'true' ->
	      %% Line 124
	      case apply 'simplify_type'/1
		       (Type0) of
		%% Line 125
		<'k_m_string'> when 'true' ->
		    let <_cor4> =
			%% Line 126
			case Type0 of
			  %% Line 127
			  <'GeneralizedTime'> when 'true' ->
			      'VisibleString'
			  %% Line 128
			  <'UTCTime'> when 'true' ->
			      'VisibleString'
			  %% Line 129
			  <_cor23> when 'true' ->
			      Type0
			end
		    in  %% Line 131
			call 'asn1ct_imm':'per_enc_k_m_string'
			    (Val, _cor4, Constraint, Aligned)
		%% Line 132
		<'restricted_string'> when 'true' ->
		    %% Line 134
		    call 'asn1ct_imm':'per_enc_restricted_string'
			(Val, {'erlang','iolist_to_binary'}, Aligned)
		%% Line 135
		<{'ENUMERATED',NNL}> when 'true' ->
		    %% Line 136
		    call 'asn1ct_imm':'per_enc_enumerated'
			(Val, NNL, Aligned)
		%% Line 137
		<'INTEGER'> when 'true' ->
		    %% Line 138
		    call 'asn1ct_imm':'per_enc_integer'
			(Val, Constraint, Aligned)
		%% Line 139
		<{'INTEGER',NNL}> when 'true' ->
		    %% Line 140
		    call 'asn1ct_imm':'per_enc_integer'
			(Val, NNL, Constraint, Aligned)
		%% Line 141
		<'REAL'> when 'true' ->
		    %% Line 143
		    call 'asn1ct_imm':'per_enc_restricted_string'
			(Val, {'real_common','encode_real'}, Aligned)
		%% Line 144
		<{'BIT STRING',NNL}> when 'true' ->
		    %% Line 145
		    case call 'asn1ct':'use_legacy_types'
			     () of
		      %% Line 146
		      <'false'> when 'true' ->
			  %% Line 147
			  call 'asn1ct_imm':'per_enc_bit_string'
			      (Val, NNL, %% Line 148
					 Constraint, %% Line 148
						     Aligned)
		      %% Line 149
		      <'true'> when 'true' ->
			  %% Line 150
			  call 'asn1ct_imm':'per_enc_legacy_bit_string'
			      (Val, NNL, %% Line 151
					 Constraint, %% Line 151
						     Aligned)
		      ( <_cor8> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor8})
			-| ['compiler_generated'] )
		    end
		%% Line 153
		<'NULL'> when 'true' ->
		    %% Line 154
		    call 'asn1ct_imm':'per_enc_null'
			(Val, Aligned)
		%% Line 155
		<'OBJECT IDENTIFIER'> when 'true' ->
		    %% Line 157
		    call 'asn1ct_imm':'per_enc_restricted_string'
			(Val, {'per_common','encode_oid'}, Aligned)
		%% Line 158
		<'RELATIVE-OID'> when 'true' ->
		    %% Line 160
		    call 'asn1ct_imm':'per_enc_restricted_string'
			(Val, {'per_common','encode_relative_oid'}, Aligned)
		%% Line 161
		<'BOOLEAN'> when 'true' ->
		    %% Line 162
		    call 'asn1ct_imm':'per_enc_boolean'
			(Val, Aligned)
		%% Line 163
		<'OCTET STRING'> when 'true' ->
		    %% Line 164
		    case call 'asn1ct':'use_legacy_types'
			     () of
		      %% Line 165
		      <'false'> when 'true' ->
			  %% Line 166
			  call 'asn1ct_imm':'per_enc_octet_string'
			      (Val, Constraint, Aligned)
		      %% Line 167
		      <'true'> when 'true' ->
			  %% Line 168
			  call 'asn1ct_imm':'per_enc_legacy_octet_string'
			      (Val, Constraint, %% Line 169
						Aligned)
		      ( <_cor11> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor11})
			-| ['compiler_generated'] )
		    end
		%% Line 171
		<'ASN1_OPEN_TYPE'> when 'true' ->
		    %% Line 172
		    case Constraint of
		      %% Line 173
		      <[{'Externaltypereference',_cor24,_cor25,Tname}|[]]> when 'true' ->
			  let <EncFunc> =
			      %% Line 174
			      apply 'enc_func'/1
				  (Tname)
			  in  let <Imm> =
				  %% Line 175
				  [{'apply',{'local',EncFunc,[]},[Val|[]]}|[]]
			      in  %% Line 176
				  call 'asn1ct_imm':'per_enc_open_type'
				      (Imm, Aligned)
		      %% Line 177
		      <[]> when 'true' ->
			  let <Imm> =
			      %% Line 178
			      [{'call','erlang','iolist_to_binary',[Val|[]]}|[]]
			  in  %% Line 179
			      call 'asn1ct_imm':'per_enc_open_type'
				  (Imm, Aligned)
		      ( <_cor15> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor15})
			-| ['compiler_generated'] )
		    end
		( <_cor16> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor16})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor19,_cor18,_cor17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor19,_cor18,_cor17})
		  -| [{'function_name',{'gen_encode_prim_imm',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_func'/1 =
    %% Line 183
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 184
	    call 'lists':'concat'
		([[100|[101|[99|[95]]]]|[_cor0|[]]])
	in  %% Line 184
	    call 'erlang':'list_to_atom'
		(_cor1)
'enc_func'/1 =
    %% Line 186
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 187
	    call 'lists':'concat'
		([[101|[110|[99|[95]]]]|[_cor0|[]]])
	in  %% Line 187
	    call 'erlang':'list_to_atom'
		(_cor1)
'simplify_type'/1 =
    %% Line 189
    fun (_cor0) ->
	%% Line 190
	case _cor0 of
	  %% Line 191
	  <'BMPString'> when 'true' ->
	      'k_m_string'
	  %% Line 192
	  <'IA5String'> when 'true' ->
	      'k_m_string'
	  %% Line 193
	  <'NumericString'> when 'true' ->
	      'k_m_string'
	  %% Line 194
	  <'PrintableString'> when 'true' ->
	      'k_m_string'
	  %% Line 195
	  <'VisibleString'> when 'true' ->
	      'k_m_string'
	  %% Line 196
	  <'UniversalString'> when 'true' ->
	      'k_m_string'
	  %% Line 197
	  <'GeneralizedTime'> when 'true' ->
	      'k_m_string'
	  %% Line 198
	  <'UTCTime'> when 'true' ->
	      'k_m_string'
	  %% Line 199
	  <'TeletexString'> when 'true' ->
	      'restricted_string'
	  %% Line 200
	  <'T61String'> when 'true' ->
	      'restricted_string'
	  %% Line 201
	  <'VideotexString'> when 'true' ->
	      'restricted_string'
	  %% Line 202
	  <'GraphicString'> when 'true' ->
	      'restricted_string'
	  %% Line 203
	  <'GeneralString'> when 'true' ->
	      'restricted_string'
	  %% Line 204
	  <'UTF8String'> when 'true' ->
	      'restricted_string'
	  %% Line 205
	  <'ObjectDescriptor'> when 'true' ->
	      'restricted_string'
	  %% Line 206
	  <Other> when 'true' ->
	      Other
	end
'gen_obj_code'/3 =
    %% Line 212
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <_X_Erules,_X_Module,{'typedef',_cor6,_cor7,_cor8,_cor9}> when 'true' ->
	      %% Line 213
	      'ok'
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'gen_obj_code',3}}] )
	    -| ['compiler_generated'] )
	end
'gen_objectset_code'/2 =
    %% Line 217
    fun (_cor1,_cor0) ->
	%% Line 218
	'ok'
'gen_decode'/2 =
    %% Line 223
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Erules,Type = {'typedef',_cor9,_cor10,_cor11,_cor12}> when 'true' ->
	      let <DecFunc> =
		  %% Line 224
		  apply 'dec_func'/1
		      (_cor11)
	      in  do  %% Line 225
		      call 'asn1ct_gen':'emit'
			  (['nl'|['nl'|[{'asis',DecFunc}|[[40|[66|[121|[116|[101|[115|[41|[32|[45|[62]]]]]]]]]]|['nl']]]]])
		      do  %% Line 226
			  apply 'dbdec'/1
			      (_cor11)
			  %% Line 227
			  apply 'gen_decode_user'/2
			      (Erules, Type)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'gen_decode',2}}] )
	    -| ['compiler_generated'] )
	end
'gen_decode'/3 =
    %% Line 229
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Erules,Tname,{'ComponentType',_cor18,Cname,Type,_cor19,_cor20,_cor21}> when 'true' ->
	      let <NewTname> =
		  %% Line 230
		  [Cname|Tname]
	      in  %% Line 231
		  apply 'gen_decode'/3
		      (Erules, NewTname, Type)
	  %% Line 233
	  <Erules,Typename,Type = {'type',_cor22,_cor23,_cor24,_cor25,_cor26}> when ( 'true'
										      -| ['compiler_generated'] ) ->
	      let <InnerType> =
		  %% Line 234
		  call 'asn1ct_gen':'get_inner'
		      (_cor23)
	      in  %% Line 235
		  case call 'asn1ct_gen':'type'
			   (InnerType) of
		    %% Line 236
		    <{'constructed','bif'}> when 'true' ->
			let <_cor10> =
			    %% Line 238
			    case _cor25 of
			      %% Line 239
			      <[{'objfun',_cor37}|_X_R]> when 'true' ->
				  %% Line 240
				  [44|[32|[79|[98|[106|[70|[117|[110]]]]]]]]
			      %% Line 241
			      <_cor38> when 'true' ->
				  %% Line 242
				  []
			    end
			in  let <_cor12> =
				%% Line 245
				call 'asn1ct_gen':'list2name'
				    (Typename)
			    in  let <_cor13> =
				    %% Line 245
				    apply 'dec_func'/1
					(_cor12)
				in  do  %% Line 244
					call 'asn1ct_gen':'emit'
					    (['nl'|%% Line 245
						   [{'asis',_cor13}|%% Line 246
								    [[40|[66|[121|[116|[101|[115]]]]]]|[_cor10|[[41|[32|[45|[62]]]]|['nl']]]]]])
					do  %% Line 247
					    apply 'dbdec'/1
						(Typename)
					    %% Line 248
					    call 'asn1ct_gen':'gen_decode_constructed'
						(Erules, Typename, InnerType, Type)
		    %% Line 249
		    <_cor39> when 'true' ->
			%% Line 250
			'true'
		  end
	  ( <_cor17,_cor16,_cor15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor17,_cor16,_cor15})
		  -| [{'function_name',{'gen_decode',3}}] )
	    -| ['compiler_generated'] )
	end
'dbdec'/1 =
    %% Line 253
    fun (_cor0) ->
	case _cor0 of
	  <Type>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      let <_cor1> =
		  %% Line 254
		  call 'asn1ct_gen':'list2name'
		      (Type)
	      in  %% Line 254
		  call 'asn1ct_gen':'demit'
		      ({[105|[111|[58|[102|[111|[114|[109|[97|[116|[40|[34|[100|[101|[99|[111|[100|[105|[110|[103|[58|[32]]]]]]]]]]]]]]]]]]]]],_cor1,[126|[119|[126|[110|[34|[44|[91|[66|[121|[116|[101|[115|[93|[41|[44]]]]]]]]]]]]]]],'nl'})
	  %% Line 255
	  <Type> when 'true' ->
	      %% Line 256
	      call 'asn1ct_gen':'demit'
		  ({[105|[111|[58|[102|[111|[114|[109|[97|[116|[40|[34|[100|[101|[99|[111|[100|[105|[110|[103|[58|[32]]]]]]]]]]]]]]]]]]]]],{'asis',Type},[126|[119|[126|[110|[34|[44|[91|[66|[121|[116|[101|[115|[93|[41|[44]]]]]]]]]]]]]]],'nl'})
	end
'gen_decode_user'/2 =
    %% Line 258
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Erules,D = {'typedef',_cor17,_cor18,_cor19,_cor20}> when ( 'true'
								      -| ['compiler_generated'] ) ->
	      let <Typename> =
		  %% Line 259
		  [_cor19|[]]
	      in  %% Line 261
		  ( case _cor20 of
		      ( <( {'type',_cor29,_rec12,_cor30,_cor31,_cor32}
			   -| ['compiler_generated'] )> when 'true' ->
			    let <InnerType> =
				call 'asn1ct_gen':'get_inner'
				    (_rec12)
			    in  %% Line 262
				case call 'asn1ct_gen':'type'
					 (InnerType) of
				  %% Line 263
				  <{'primitive','bif'}> when 'true' ->
				      do  %% Line 264
					  apply 'gen_dec_prim'/3
					      (Erules, _cor20, [66|[121|[116|[101|[115]]]]])
					  %% Line 265
					  call 'asn1ct_gen':'emit'
					      ({[46],'nl','nl'})
				  %% Line 266
				  <'ASN1_OPEN_TYPE'> when 'true' ->
				      let <_cor13> =
					  %% Line 267
					  call 'erlang':'setelement'
					      (3, _cor20, 'ASN1_OPEN_TYPE')
				      in  do  %% Line 267
					      apply 'gen_dec_prim'/3
						  (Erules, _cor13, [66|[121|[116|[101|[115]]]]])
					      %% Line 268
					      call 'asn1ct_gen':'emit'
						  ({[46],'nl','nl'})
				  %% Line 269
				  <{'constructed','bif'}> when 'true' ->
				      %% Line 270
				      call 'asn1ct_gen':'gen_decode_constructed'
					  (Erules, Typename, InnerType, D)
				  %% Line 271
				  <Etype = {'Externaltypereference',_cor40,_cor41,_cor42}> when 'true' ->
				      do  %% Line 272
					  apply 'gen_dec_external'/2
					      (Etype, [66|[121|[116|[101|[115]]]]])
					  %% Line 273
					  call 'asn1ct_gen':'emit'
					      ([[46]|['nl'|['nl']]])
				  %% Line 274
				  <Other> when 'true' ->
				      %% Line 275
				      call 'erlang':'exit'
					  ({'error',{'asn1',{'unknown',Other}}})
				end
			-| ['compiler_generated'] )
		      ( <_cor33> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','type'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  ( <_cor16,_cor15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15})
		  -| [{'function_name',{'gen_decode_user',2}}] )
	    -| ['compiler_generated'] )
	end
'gen_dec_external'/2 =
    %% Line 278
    fun (_cor1,_cor0) ->
	let <CurrMod> =
	    %% Line 279
	    call 'erlang':'get'
		('currmod')
	in  %% Line 280
	    case _cor1 of
	      <{'Externaltypereference',_cor9,Mod,Type}> when 'true' ->
		  let <_cor5> =
		      %% Line 281
		      case CurrMod of
			%% Line 282
			<_cor10>
			    when call 'erlang':'=:='
				  (CurrMod,
				   Mod) ->
			    []
			%% Line 283
			<_cor11> when 'true' ->
			    [{'asis',Mod}|[[58]]]
		      end
		  in  let <_cor6> =
			  %% Line 284
			  apply 'dec_func'/1
			      (Type)
		      in  %% Line 281
			  call 'asn1ct_gen':'emit'
			      ([_cor5|%% Line 284
				      [{'asis',_cor6}|[[40]|[_cor0|[[41]]]]]])
	      ( <_cor3> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor3})
		-| ['compiler_generated'] )
	    end
'gen_dec_imm'/2 =
    %% Line 286
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Erule,{'type',_cor7,Name,C,_cor8,_cor9}> when 'true' ->
	      let <_cor3> =
		  %% Line 287
		  case Erule of
		    %% Line 288
		    <'uper'> when 'true' ->
			'false'
		    %% Line 289
		    <'per'> when 'true' ->
			'true'
		    ( <_cor2> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor2})
		      -| ['compiler_generated'] )
		  end
	      in  %% Line 291
		  apply 'gen_dec_imm_1'/3
		      (Name, C, _cor3)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'gen_dec_imm',2}}] )
	    -| ['compiler_generated'] )
	end
'gen_dec_imm_1'/3 =
    %% Line 293
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'ASN1_OPEN_TYPE',Constraint,Aligned> when 'true' ->
	      %% Line 294
	      apply 'imm_decode_open_type'/2
		  (Constraint, Aligned)
	  %% Line 295
	  <{'BIT STRING',NNL},Constr0,Aligned> when 'true' ->
	      let <Constr> =
		  %% Line 296
		  call 'asn1ct_imm':'effective_constraint'
		      ('bitstring', Constr0)
	      in  let <Imm> =
		      %% Line 297
		      call 'asn1ct_imm':'per_dec_raw_bitstring'
			  (Constr, Aligned)
		  in  %% Line 298
		      case NNL of
			%% Line 299
			<[]> when 'true' ->
			    %% Line 300
			    case call 'asn1ct':'get_bit_string_format'
				     () of
			      %% Line 301
			      <'compact'> when 'true' ->
				  %% Line 302
				  apply 'gen_dec_bit_string'/2
				      ('decode_compact_bit_string', %% Line 303
								    Imm)
			      %% Line 304
			      <'legacy'> when 'true' ->
				  %% Line 305
				  apply 'gen_dec_bit_string'/2
				      ('decode_legacy_bit_string', %% Line 306
								   Imm)
			      %% Line 307
			      <'bitstring'> when 'true' ->
				  %% Line 308
				  apply 'gen_dec_copy_bitstring'/1
				      (Imm)
			      ( <_cor5> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor5})
				-| ['compiler_generated'] )
			    end
			%% Line 310
			<[_cor32|_cor33]> when 'true' ->
			    let <D> =
				%% Line 311
				( fun (_cor9,_cor8) ->
				      let <As> =
					  %% Line 312
					  [_cor9|[{'asis',NNL}|[]]]
				      in  let <Call> =
					      %% Line 313
					      {'call','per_common','decode_named_bit_string',As}
					  in  %% Line 314
					      call 'asn1ct_gen':'emit'
						  ([[123]|[Call|['com'|[_cor8|[[125]]]]]])
				  -| [{'id',{0,0,'-gen_dec_imm_1/3-fun-0-'}}] )
			    in  %% Line 316
				{'call',D,Imm}
			( <_cor13> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor13})
			  -| ['compiler_generated'] )
		      end
	  %% Line 318
	  <'NULL',_X_Constr,_X_Aligned> when 'true' ->
	      %% Line 319
	      {'value','NULL'}
	  %% Line 320
	  <'BOOLEAN',_X_Constr,_X_Aligned> when 'true' ->
	      %% Line 321
	      call 'asn1ct_imm':'per_dec_boolean'
		  ()
	  %% Line 322
	  <{'ENUMERATED',{Base,Ext}},_X_Constr,Aligned> when 'true' ->
	      %% Line 323
	      call 'asn1ct_imm':'per_dec_enumerated'
		  (Base, Ext, Aligned)
	  %% Line 324
	  <{'ENUMERATED',NamedNumberList},_X_Constr,Aligned> when 'true' ->
	      %% Line 325
	      call 'asn1ct_imm':'per_dec_enumerated'
		  (NamedNumberList, Aligned)
	  %% Line 326
	  <'INTEGER',Constr,Aligned> when 'true' ->
	      %% Line 327
	      call 'asn1ct_imm':'per_dec_integer'
		  (Constr, Aligned)
	  %% Line 328
	  <{'INTEGER',NamedNumberList},Constraint,Aligned> when 'true' ->
	      %% Line 329
	      call 'asn1ct_imm':'per_dec_named_integer'
		  (Constraint, %% Line 330
			       NamedNumberList, %% Line 331
						Aligned)
	  %% Line 332
	  <Type = 'BMPString',Constraint,Aligned> when 'true' ->
	      %% Line 333
	      apply 'gen_dec_k_m_string'/3
		  (Type, Constraint, Aligned)
	  %% Line 334
	  <Type = 'NumericString',Constraint,Aligned> when 'true' ->
	      %% Line 335
	      apply 'gen_dec_k_m_string'/3
		  (Type, Constraint, Aligned)
	  %% Line 336
	  <Type = 'PrintableString',Constraint,Aligned> when 'true' ->
	      %% Line 337
	      apply 'gen_dec_k_m_string'/3
		  (Type, Constraint, Aligned)
	  %% Line 338
	  <Type = 'VisibleString',Constraint,Aligned> when 'true' ->
	      %% Line 339
	      apply 'gen_dec_k_m_string'/3
		  (Type, Constraint, Aligned)
	  %% Line 340
	  <Type = 'IA5String',Constraint,Aligned> when 'true' ->
	      %% Line 341
	      apply 'gen_dec_k_m_string'/3
		  (Type, Constraint, Aligned)
	  %% Line 342
	  <Type = 'UniversalString',Constraint,Aligned> when 'true' ->
	      %% Line 343
	      apply 'gen_dec_k_m_string'/3
		  (Type, Constraint, Aligned)
	  %% Line 344
	  <'UTCTime',Constraint,Aligned> when 'true' ->
	      %% Line 345
	      apply 'gen_dec_k_m_string'/3
		  ('VisibleString', Constraint, Aligned)
	  %% Line 346
	  <'GeneralizedTime',Constraint,Aligned> when 'true' ->
	      %% Line 347
	      apply 'gen_dec_k_m_string'/3
		  ('VisibleString', Constraint, Aligned)
	  %% Line 348
	  <'OCTET STRING',Constraint,Aligned> when 'true' ->
	      let <SzConstr> =
		  %% Line 349
		  call 'asn1ct_imm':'effective_constraint'
		      ('bitstring', Constraint)
	      in  let <Imm> =
		      %% Line 350
		      call 'asn1ct_imm':'per_dec_octet_string'
			  (SzConstr, Aligned)
		  in  %% Line 351
		      case call 'asn1ct':'use_legacy_types'
			       () of
			%% Line 352
			<'false'> when 'true' ->
			    {'convert',{'binary','copy'},Imm}
			%% Line 353
			<'true'> when 'true' ->
			    {'convert','binary_to_list',Imm}
			( <_cor16> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor16})
			  -| ['compiler_generated'] )
		      end
	  %% Line 355
	  <'TeletexString',_X_Constraint,Aligned> when 'true' ->
	      %% Line 356
	      apply 'gen_dec_restricted_string'/1
		  (Aligned)
	  %% Line 357
	  <'T61String',_X_Constraint,Aligned> when 'true' ->
	      %% Line 358
	      apply 'gen_dec_restricted_string'/1
		  (Aligned)
	  %% Line 359
	  <'VideotexString',_X_Constraint,Aligned> when 'true' ->
	      %% Line 360
	      apply 'gen_dec_restricted_string'/1
		  (Aligned)
	  %% Line 361
	  <'GraphicString',_X_Constraint,Aligned> when 'true' ->
	      %% Line 362
	      apply 'gen_dec_restricted_string'/1
		  (Aligned)
	  %% Line 363
	  <'GeneralString',_X_Constraint,Aligned> when 'true' ->
	      %% Line 364
	      apply 'gen_dec_restricted_string'/1
		  (Aligned)
	  %% Line 365
	  <'ObjectDescriptor',_X_Constraint,Aligned> when 'true' ->
	      %% Line 366
	      apply 'gen_dec_restricted_string'/1
		  (Aligned)
	  %% Line 367
	  <'OBJECT IDENTIFIER',_X_Constraint,Aligned> when 'true' ->
	      let <Dec> =
		  %% Line 368
		  ( fun (_cor18,_cor17) ->
			%% Line 369
			call 'asn1ct_gen':'emit'
			    ([[123]|[{'call','per_common','decode_oid',[_cor18|[]]}|['com'|%% Line 370
											   [_cor17|[[125]]]]]])
		    -| [{'id',{0,0,'-gen_dec_imm_1/3-fun-1-'}}] )
	      in  let <_cor22> =
		      %% Line 372
		      apply 'gen_dec_restricted_string'/1
			  (Aligned)
		  in  %% Line 372
		      {'call',Dec,_cor22}
	  %% Line 373
	  <'RELATIVE-OID',_X_Constraint,Aligned> when 'true' ->
	      let <Dec> =
		  %% Line 374
		  ( fun (_cor24,_cor23) ->
			%% Line 375
			call 'asn1ct_gen':'emit'
			    ([[123]|[{'call','per_common','decode_relative_oid',[_cor24|[]]}|['com'|%% Line 376
												    [_cor23|[[125]]]]]])
		    -| [{'id',{0,0,'-gen_dec_imm_1/3-fun-2-'}}] )
	      in  let <_cor28> =
		      %% Line 378
		      apply 'gen_dec_restricted_string'/1
			  (Aligned)
		  in  %% Line 378
		      {'call',Dec,_cor28}
	  %% Line 379
	  <'UTF8String',_X_Constraint,Aligned> when 'true' ->
	      %% Line 380
	      call 'asn1ct_imm':'per_dec_restricted_string'
		  (Aligned)
	  %% Line 381
	  <'REAL',_X_Constraint,Aligned> when 'true' ->
	      %% Line 382
	      call 'asn1ct_imm':'per_dec_real'
		  (Aligned)
	  ( <_cor31,_cor30,_cor29> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor31,_cor30,_cor29})
		  -| [{'function_name',{'gen_dec_imm_1',3}}] )
	    -| ['compiler_generated'] )
	end
'gen_dec_bit_string'/2 =
    %% Line 384
    fun (_cor1,_cor0) ->
	let <D> =
	    %% Line 385
	    ( fun (_cor3,_cor2) ->
		  %% Line 386
		  call 'asn1ct_gen':'emit'
		      ([[123]|[{'call','per_common',_cor1,[_cor3|[]]}|['com'|[_cor2|[[125]]]]]])
	      -| [{'id',{0,0,'-gen_dec_bit_string/2-fun-0-'}}] )
	in  %% Line 388
	    {'call',D,_cor0}
'gen_dec_copy_bitstring'/1 =
    %% Line 390
    fun (_cor0) ->
	let <D> =
	    %% Line 391
	    ( fun (_cor2,_cor1) ->
		  %% Line 392
		  call 'asn1ct_gen':'emit'
		      ([[123|[108|[105|[115|[116|[95|[116|[111|[95|[98|[105|[116|[115|[116|[114|[105|[110|[103|[40|[91]]]]]]]]]]]]]]]]]]]]|[_cor2|[[93|[41|[44]]]|[_cor1|[[125]]]]]])
	      -| [{'id',{0,0,'-gen_dec_copy_bitstring/1-fun-0-'}}] )
	in  %% Line 394
	    {'call',D,_cor0}
'gen_dec_k_m_string'/3 =
    %% Line 396
    fun (_cor2,_cor1,_cor0) ->
	%% Line 397
	call 'asn1ct_imm':'per_dec_k_m_string'
	    (_cor2, _cor1, _cor0)
'gen_dec_restricted_string'/1 =
    %% Line 399
    fun (_cor0) ->
	let <Imm> =
	    %% Line 400
	    call 'asn1ct_imm':'per_dec_restricted_string'
		(_cor0)
	in  %% Line 401
	    {'convert','binary_to_list',Imm}
'gen_dec_prim'/3 =
    %% Line 403
    fun (_cor2,_cor1,_cor0) ->
	let <Imm> =
	    %% Line 404
	    apply 'gen_dec_imm'/2
		(_cor2, _cor1)
	in  %% Line 405
	    call 'asn1ct_imm':'dec_code_gen'
		(Imm, _cor0)
'extaddgroup2sequence'/1 =
    %% Line 412
    fun (_cor0) ->
	%% Line 413
	apply 'extaddgroup2sequence'/3
	    (_cor0, 0, [])
'extaddgroup2sequence'/3 =
    %% Line 415
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[{'ExtensionAdditionGroup',Number0}|T],ExtNum,Acc> when 'true' ->
	      let <_cor4> =
		  %% Line 416
		  case Number0 of
		    <'undefined'> when 'true' ->
			1
		    <_cor19> when 'true' ->
			Number0
		  end
	      in  let <_cor9> =
		      %% Line 418
		      ( fun (_cor7) ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'is_record'
								   -| ['compiler_generated'] )
				  (_cor7, 'ComponentType', 7)
			      -| ['compiler_generated'] )
			-| [{'id',{0,0,'-extaddgroup2sequence/3-fun-0-'}}] )
		  in  %% Line 417
		      case %% Line 418
			   call 'lists':'splitwith'
			       (_cor9, T) of
			<{ExtGroupComps,['ExtensionAdditionGroupEnd'|T2]}> when 'true' ->
			    let <_cor15> =
				%% Line 419
				call 'erlang':'+'
				    (ExtNum, 1)
			    in  let <_cor11> =
				    %% Line 422
				    call 'erlang':'+'
					(ExtNum, 1)
				in  let <_cor12> =
					%% Line 422
					call 'erlang':'integer_to_list'
					    (_cor11)
				    in  let <_cor13> =
					    %% Line 421
					    call 'erlang':'++'
						([69|[120|[116|[65|[100|[100|[71|[114|[111|[117|[112]]]]]]]]]]], _cor12)
					in  let <_cor14> =
						%% Line 421
						call 'erlang':'list_to_atom'
						    (_cor13)
					    in  %% Line 419
						apply 'extaddgroup2sequence'/3
						    (T2, _cor15, %% Line 420
								 [{'ComponentType','undefined',_cor14,%% Line 423
												      {'type',[],{'SEQUENCE','false','false',_cor4,%% Line 425
																		   ExtGroupComps},[],[],'no'},%% Line 426
																					      'OPTIONAL','undefined','undefined'}|%% Line 426
																										  Acc])
			( <_cor10> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor10})
			  -| ['compiler_generated'] )
		      end
	  %% Line 427
	  <[C|T],ExtNum,Acc> when 'true' ->
	      %% Line 428
	      apply 'extaddgroup2sequence'/3
		  (T, ExtNum, [C|Acc])
	  %% Line 429
	  <[],_cor20,Acc> when 'true' ->
	      %% Line 430
	      call 'lists':'reverse'
		  (Acc)
	  ( <_cor18,_cor17,_cor16> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor18,_cor17,_cor16})
		  -| [{'function_name',{'extaddgroup2sequence',3}}] )
	    -| ['compiler_generated'] )
	end
'imm_decode_open_type'/2 =
    %% Line 432
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{'Externaltypereference',_cor4,_cor5,Tname}|[]],Aligned> when 'true' ->
	      %% Line 433
	      apply 'imm_dec_open_type_1'/2
		  (Tname, Aligned)
	  %% Line 434
	  <[{'type',_cor6,{'Externaltypereference',_cor7,_cor8,Tname},_cor9,_cor10,_cor11}|[]],%% Line 435
											       Aligned> when 'true' ->
	      %% Line 436
	      apply 'imm_dec_open_type_1'/2
		  (Tname, Aligned)
	  %% Line 437
	  <_cor12,Aligned> when 'true' ->
	      %% Line 438
	      call 'asn1ct_imm':'per_dec_open_type'
		  (Aligned)
	end
'imm_dec_open_type_1'/2 =
    %% Line 440
    fun (_cor1,_cor0) ->
	let <D> =
	    %% Line 441
	    ( fun (_cor4,_cor3) ->
		  do  %% Line 442
		      call 'asn1ct_name':'new'
			  ('tmpval')
		      let <_cor2> =
			  %% Line 445
			  apply 'dec_func'/1
			      (_cor1)
		      in  %% Line 443
			  call 'asn1ct_gen':'emit'
			      ([[98|[101|[103|[105|[110]]]]]|['nl'|%% Line 444
								   [[123]|[{'curr','tmpval'}|[[44|[95|[125|[32|[61|[32]]]]]]|%% Line 445
															     [{'asis',_cor2}|[[40]|[_cor4|[[41|[44]]|['nl'|%% Line 446
																					   [[123]|[{'curr','tmpval'}|['com'|[_cor3|[[125]|['nl'|[[101|[110|[100]]]]]]]]]]]]]]]]]]]])
	      -| [{'id',{0,0,'-imm_dec_open_type_1/2-fun-0-'}}] )
	in  let <_cor8> =
		%% Line 449
		call 'asn1ct_imm':'per_dec_open_type'
		    (_cor0)
	    in  %% Line 449
		{'call',D,_cor8}
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('asn1ct_gen_per')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('asn1ct_gen_per', _cor0)
end