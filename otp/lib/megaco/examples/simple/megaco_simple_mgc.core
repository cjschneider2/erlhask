module 'megaco_simple_mgc' ['handle_connect'/2,
			    'handle_disconnect'/3,
			    'handle_message_error'/3,
			    'handle_syntax_error'/3,
			    'handle_trans_ack'/4,
			    'handle_trans_long_request'/3,
			    'handle_trans_reply'/4,
			    'handle_trans_request'/3,
			    'handle_trans_request_abort'/4,
			    'handle_unexpected_trans'/3,
			    'init_batch'/3,
			    'module_info'/0,
			    'module_info'/1,
			    'start'/0,
			    'start'/2,
			    'start'/4,
			    'start_batch'/0,
			    'start_batch'/1,
			    'stop'/0,
			    'stop'/1]
    attributes [%% Line 33
		'behaviour' =
		    %% Line 33
		    ['megaco_user']]
'start'/0 =
    %% Line 63
    fun () ->
	%% Line 64
	apply 'start'/2
	    ('false', 'false')
'start'/2 =
    %% Line 66
    fun (_cor1,_cor0) ->
	%% Line 67
	apply 'start'/4
	    ({'deviceName',[99|[111|[110|[116|[114|[111|[108|[108|[101|[114]]]]]]]]]]}, [], _cor1, _cor0)
'start'/4 =
    %% Line 69
    fun (_cor3,_cor2,_cor1,_cor0) ->
	do  %% Line 70
	    call 'erlang':'put'
		('debug', _cor0)
	    do  %% Line 71
		apply 'd'/2
		    ([115|[116|[97|[114|[116|[32|[45|[62|[32|[101|[110|[116|[114|[121|[32|[119|[105|[116|[104|[126|[110|[32|[32|[32|[77|[105|[100|[58|[32|[32|[32|[32|[126|[112|[126|[110|[32|[32|[32|[67|[111|[110|[102|[105|[103|[58|[32|[126|[112|[126|[110|[32|[32|[32|[84|[114|[97|[99|[101|[58|[32|[32|[126|[112]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 74
																																															[_cor3|[_cor2|[_cor1|[]]]])
		do  %% Line 75
		    apply 'init_inline_trace'/1
			(_cor1)
		    %% Line 76
		    case call 'megaco':'start_user'
			     (_cor3, [{'user_mod','megaco_simple_mgc'}|_cor2]) of
		      %% Line 77
		      <'ok'> when 'true' ->
			  do  %% Line 78
			      apply 'd'/1
				  ([115|[116|[97|[114|[116|[32|[45|[62|[32|[117|[115|[101|[114|[32|[115|[116|[97|[114|[116|[101|[100]]]]]]]]]]]]]]]]]]]]])
			      let <_cor4> =
				  catch
				      %% Line 79
				      apply 'do_start'/1
					  (_cor3)
			      in  %% Line 79
				  case _cor4 of
				    %% Line 80
				    <{'EXIT',Reason}> when 'true' ->
					do  %% Line 81
					    apply 'd'/2
						([115|[116|[97|[114|[116|[32|[45|[62|[32|[101|[120|[105|[116|[101|[100|[58|[32|[126|[110|[126|[112]]]]]]]]]]]]]]]]]]]]], [Reason|[]])
					    %% Line 82
					    {'error',Reason}
				    %% Line 83
				    <Other> when 'true' ->
					do  %% Line 84
					    apply 'd'/2
						([115|[116|[97|[114|[116|[32|[45|[62|[32|[79|[116|[104|[101|[114|[58|[32|[126|[110|[126|[112]]]]]]]]]]]]]]]]]]]], [Other|[]])
					    %% Line 85
					    Other
				  end
		      %% Line 87
		      <{'error',Reason}> when 'true' ->
			  do  %% Line 88
			      apply 'd'/2
				  ([115|[116|[97|[114|[116|[32|[45|[62|[32|[117|[115|[101|[114|[32|[115|[116|[97|[114|[116|[32|[102|[97|[105|[108|[101|[100|[58|[32|[126|[110|[126|[112]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Reason|[]])
			      %% Line 89
			      {'error',{'start_user',Reason}}
		      ( <_cor6> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor6})
			-| ['compiler_generated'] )
		    end
'init_inline_trace'/1 =
    %% Line 95
    fun (_cor0) ->
	case _cor0 of
	  <'true'> when 'true' ->
	      %% Line 96
	      call 'megaco':'enable_trace'
		  ('max', 'io')
	  %% Line 97
	  <_cor2> when 'true' ->
	      %% Line 98
	      'ok'
	end
'do_start'/1 =
    %% Line 102
    fun (_cor0) ->
	do  %% Line 103
	    apply 'd'/1
		([100|[111|[95|[115|[116|[97|[114|[116|[32|[45|[62|[32|[101|[110|[116|[114|[121]]]]]]]]]]]]]]]]])
	    let <RecHandle> =
		%% Line 104
		call 'megaco':'user_info'
		    (_cor0, 'receive_handle')
	    in  do  %% Line 105
		    apply 'd'/2
			([100|[111|[95|[115|[116|[97|[114|[116|[32|[45|[62|[32|[82|[101|[99|[72|[97|[110|[100|[108|[101|[58|[32|[126|[110|[126|[112]]]]]]]]]]]]]]]]]]]]]]]]]]], [RecHandle|[]])
		    %% Line 110
		    case RecHandle of
		      <{'megaco_receive_handle',_rec1,_rec2,_rec3,_rec4,_rec5}> when 'true' ->
			  let <_cor5> =
			      {'megaco_receive_handle',_rec1,'megaco_pretty_text_encoder',[],'megaco_tcp',_rec5}
			  in  do  %% Line 111
				  apply 'd'/2
				      ([100|[111|[95|[115|[116|[97|[114|[116|[32|[45|[62|[32|[84|[101|[120|[116|[84|[99|[112|[58|[32|[126|[110|[126|[112]]]]]]]]]]]]]]]]]]]]]]]]], [_cor5|[]])
				  %% Line 112
				  case _cor5 of
				    <{'megaco_receive_handle',_cor30,_cor31,_cor32,_cor33,_cor34}> when 'true' ->
					let <_cor9> =
					    call 'erlang':'setelement'
						(5, _cor5, 'megaco_udp')
					in  do  %% Line 113
						apply 'd'/2
						    ([100|[111|[95|[115|[116|[97|[114|[116|[32|[45|[62|[32|[84|[101|[120|[116|[85|[100|[112|[58|[32|[126|[110|[126|[112]]]]]]]]]]]]]]]]]]]]]]]]], [_cor9|[]])
						let <_cor14> =
						    %% Line 118
						    {'megaco_receive_handle',_rec1,'megaco_binary_encoder',[],'megaco_tcp',_rec5}
						in  do  %% Line 119
							apply 'd'/2
							    ([100|[111|[95|[115|[116|[97|[114|[116|[32|[45|[62|[32|[66|[105|[110|[84|[99|[112|[58|[32|[126|[110|[126|[112]]]]]]]]]]]]]]]]]]]]]]]], [_cor14|[]])
							%% Line 120
							case _cor14 of
							  <{'megaco_receive_handle',_cor37,_cor38,_cor39,_cor40,_cor41}> when 'true' ->
							      let <_cor18> =
								  call 'erlang':'setelement'
								      (5, _cor14, 'megaco_udp')
							      in  do  %% Line 121
								      apply 'd'/2
									  ([100|[111|[95|[115|[116|[97|[114|[116|[32|[45|[62|[32|[66|[105|[110|[85|[100|[112|[58|[32|[126|[110|[126|[112]]]]]]]]]]]]]]]]]]]]]]]], [_cor18|[]])
								      let <ListenTo> =
									  %% Line 123
									  [{2944,_cor5}|%% Line 124
											[{2944,_cor9}|%% Line 125
												      [{2945,_cor14}|%% Line 126
														     [{2945,_cor18}|%% Line 127
																    []]]]]
								      in  do  %% Line 129
									      apply 'd'/1
										  ([100|[111|[95|[115|[116|[97|[114|[116|[32|[45|[62|[32|[115|[116|[97|[114|[116|[32|[116|[114|[97|[110|[115|[112|[111|[114|[116|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]])
									      let <_cor26> =
										  %% Line 131
										  ( letrec
											'lc$^0'/1 =
											    fun (_cor23) ->
												case _cor23 of
												  <[{Port,RH}|_cor22]> when 'true' ->
												      let <_cor24> =
													  apply 'start_transport'/2
													      (Port, RH)
												      in  let <_cor25> =
													      apply 'lc$^0'/1
														  (_cor22)
													  in  ( [{_cor24,Port,RH}|_cor25]
														-| ['compiler_generated'] )
												  ( <[_cor21|_cor22]> when 'true' ->
													apply 'lc$^0'/1
													    (_cor22)
												    -| ['compiler_generated'] )
												  <[]> when 'true' ->
												      []
												  ( <_cor23> when 'true' ->
													( primop 'match_fail'
													      ({'function_clause',_cor23})
													  -| [{'function_name',{'lc$^0',1}}] )
												    -| ['compiler_generated'] )
												end
										    in  apply 'lc$^0'/1
											    (ListenTo)
										    -| ['list_comprehension'] )
									      in  do  %% Line 132
										      apply 'd'/2
											  ([100|[111|[95|[115|[116|[97|[114|[116|[32|[45|[62|[32|[84|[114|[97|[110|[115|[112|[111|[114|[116|[115|[58|[32|[126|[110|[126|[112]]]]]]]]]]]]]]]]]]]]]]]]]]]], [_cor26|[]])
										      %% Line 134
										      {'ok',_cor26}
							  ( <_cor42> when 'true' ->
								( call ( 'erlang'
									 -| ['compiler_generated'] ):( 'error'
												       -| ['compiler_generated'] )
								      (( {'badrecord','megaco_receive_handle'}
									 -| ['compiler_generated'] ))
								  -| ['compiler_generated'] )
							    -| ['compiler_generated'] )
							end
				    ( <_cor35> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {'badrecord','megaco_receive_handle'}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
		      ( <_cor29> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','megaco_receive_handle'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
'start_transport'/2 =
    %% Line 136
    fun (_cor1,_cor0) ->
	%% Line 137
	( case _cor0 of
	    ( <( {'megaco_receive_handle',_cor7,_cor8,_cor9,_rec14,_cor10}
		 -| ['compiler_generated'] )> when 'true' ->
		  case _rec14 of
		    %% Line 138
		    <'megaco_tcp'> when 'true' ->
			apply 'start_tcp'/2
			    (_cor1, _cor0)
		    %% Line 139
		    <'megaco_udp'> when 'true' ->
			apply 'start_udp'/2
			    (_cor1, _cor0)
		    %% Line 140
		    <SendMod> when 'true' ->
			{'error',{'bad_send_mod',SendMod}}
		  end
	      -| ['compiler_generated'] )
	    ( <_cor11> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','megaco_receive_handle'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'start_udp'/2 =
    %% Line 143
    fun (_cor1,_cor0) ->
	do  %% Line 144
	    apply 'd'/2
		([115|[116|[97|[114|[116|[95|[117|[100|[112|[32|[45|[62|[32|[101|[110|[116|[114|[121|[32|[119|[105|[116|[104|[126|[110|[32|[32|[32|[77|[103|[99|[80|[111|[114|[116|[58|[32|[32|[32|[126|[112|[126|[110|[32|[32|[32|[82|[101|[99|[72|[97|[110|[100|[108|[101|[58|[32|[126|[112]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 146
																																											  [_cor1|[_cor0|[]]])
	    %% Line 147
	    case call 'megaco_udp':'start_transport'
		     () of
	      %% Line 148
	      <{'ok',SupPid}> when 'true' ->
		  let <Options> =
		      %% Line 149
		      [{'port',_cor1}|[{'receive_handle',_cor0}|[]]]
		  in  %% Line 150
		      case call 'megaco_udp':'open'
			       (SupPid, Options) of
			%% Line 151
			<{'ok',_X_SendHandle,_X_ControlPid}> when 'true' ->
			    %% Line 152
			    'ok'
			%% Line 153
			<{'error',Reason}> when 'true' ->
			    %% Line 154
			    {'error',{'megaco_udp_open',Reason}}
			( <_cor3> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor3})
			  -| ['compiler_generated'] )
		      end
	      %% Line 156
	      <{'error',Reason}> when 'true' ->
		  %% Line 157
		  {'error',{'megaco_udp_start_transport',Reason}}
	      ( <_cor4> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor4})
		-| ['compiler_generated'] )
	    end
'start_tcp'/2 =
    %% Line 160
    fun (_cor1,_cor0) ->
	do  %% Line 161
	    apply 'd'/2
		([115|[116|[97|[114|[116|[95|[116|[99|[112|[32|[45|[62|[32|[101|[110|[116|[114|[121|[32|[119|[105|[116|[104|[126|[110|[32|[32|[32|[77|[103|[99|[80|[111|[114|[116|[58|[32|[32|[32|[126|[112|[126|[110|[32|[32|[32|[82|[101|[99|[72|[97|[110|[100|[108|[101|[58|[32|[126|[112]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 163
																																											 [_cor1|[_cor0|[]]])
	    %% Line 164
	    case call 'megaco_tcp':'start_transport'
		     () of
	      %% Line 165
	      <{'ok',SupPid}> when 'true' ->
		  do  %% Line 166
		      apply 'd'/2
			  ([115|[116|[97|[114|[116|[95|[116|[99|[112|[32|[45|[62|[32|[116|[114|[97|[110|[115|[112|[111|[114|[116|[32|[115|[116|[97|[114|[116|[101|[100|[58|[32|[126|[110|[32|[32|[32|[83|[117|[112|[80|[105|[100|[58|[32|[126|[112]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 167
																																				   [SupPid|[]])
		      let <Options> =
			  %% Line 168
			  [{'port',_cor1}|[{'receive_handle',_cor0}|[]]]
		      in  %% Line 169
			  case call 'megaco_tcp':'listen'
				   (SupPid, Options) of
			    %% Line 170
			    <'ok'> when 'true' ->
				do  %% Line 171
				    apply 'd'/1
					([115|[116|[97|[114|[116|[95|[116|[99|[112|[32|[45|[62|[32|[108|[105|[115|[116|[101|[110|[32|[111|[107]]]]]]]]]]]]]]]]]]]]]])
				    %% Line 172
				    'ok'
			    %% Line 173
			    <{'error',Reason}> when 'true' ->
				do  %% Line 174
				    apply 'd'/2
					([115|[116|[97|[114|[116|[95|[116|[99|[112|[32|[45|[62|[32|[108|[105|[115|[116|[101|[110|[32|[102|[97|[105|[108|[101|[100|[58|[32|[126|[110|[32|[32|[32|[82|[101|[97|[115|[111|[110|[58|[32|[126|[112]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 175
																																			  [Reason|[]])
				    %% Line 176
				    {'error',{'megaco_tcp_listen',Reason}}
			    ( <_cor3> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor3})
			      -| ['compiler_generated'] )
			  end
	      %% Line 178
	      <{'error',Reason}> when 'true' ->
		  do  %% Line 179
		      apply 'd'/2
			  ([115|[116|[97|[114|[116|[95|[116|[99|[112|[32|[45|[62|[32|[116|[114|[97|[110|[115|[112|[111|[114|[116|[32|[115|[116|[97|[114|[116|[32|[102|[97|[105|[108|[101|[100|[58|[32|[126|[110|[32|[32|[32|[82|[101|[97|[115|[111|[110|[58|[32|[126|[112]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 180
																																							       [Reason|[]])
		      %% Line 181
		      {'error',{'megaco_tcp_start_transport',Reason}}
	      ( <_cor4> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor4})
		-| ['compiler_generated'] )
	    end
'stop'/0 =
    %% Line 188
    fun () ->
	%% Line 189
	( letrec
	      'lc$^0'/1 =
		  fun (_cor3) ->
		      case _cor3 of
			<[Mid|_cor1]> when 'true' ->
			    let <_cor4> =
				apply 'stop'/1
				    (Mid)
			    in  let <_cor5> =
				    apply 'lc$^0'/1
					(_cor1)
				in  ( [{Mid,_cor4}|_cor5]
				      -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_cor3> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor3})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  let <_cor2> =
		  call 'megaco':'system_info'
		      ('users')
	      in  apply 'lc$^0'/1
		      (_cor2)
	  -| ['list_comprehension'] )
'stop'/1 =
    %% Line 191
    fun (_cor0) ->
	do  %% Line 192
	    apply 'd'/2
		([115|[116|[111|[112|[32|[45|[62|[32|[101|[110|[116|[114|[121|[32|[119|[105|[116|[104|[126|[110|[32|[32|[32|[77|[105|[100|[58|[32|[126|[112]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [_cor0|[]])
	    let <Disco> =
		%% Line 193
		( fun (_cor6) ->
		      do  %% Line 194
			  apply 'd'/2
			      ([115|[116|[111|[112|[32|[45|[62|[32|[67|[72|[58|[32|[126|[112]]]]]]]]]]]]]], [_cor6|[]])
			  let <Pid> =
			      %% Line 196
			      call 'megaco':'conn_info'
				  (_cor6, 'control_pid')
			  in  let <SendMod> =
				  %% Line 197
				  call 'megaco':'conn_info'
				      (_cor6, 'send_mod')
			      in  let <SendHandle> =
				      %% Line 198
				      call 'megaco':'conn_info'
					  (_cor6, 'send_handle')
				  in  do  %% Line 200
					  apply 'd'/2
					      ([115|[116|[111|[112|[32|[45|[62|[32|[100|[105|[115|[99|[111|[110|[110|[101|[99|[116]]]]]]]]]]]]]]]]]], [])
					  do  %% Line 201
					      call 'megaco':'disconnect'
						  (_cor6, 'stopped_by_user')
					      do  %% Line 202
						  apply 'd'/2
						      ([115|[116|[111|[112|[32|[45|[62|[32|[99|[97|[110|[99|[101|[108]]]]]]]]]]]]]], [])
						  do  %% Line 203
						      call 'megaco':'cancel'
							  (_cor6, 'stopped_by_user')
						      do  %% Line 204
							  apply 'd'/2
							      ([115|[116|[111|[112|[32|[45|[62|[32|[99|[108|[111|[115|[101|[32|[116|[114|[97|[110|[115|[112|[111|[114|[116|[126|[110|[32|[32|[32|[83|[101|[110|[100|[77|[111|[100|[58|[32|[32|[32|[32|[126|[112|[126|[110|[32|[32|[32|[83|[101|[110|[100|[72|[97|[110|[100|[108|[101|[58|[32|[126|[112]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 206
																																																		     [SendMod|[SendHandle|[]]])
							  %% Line 207
							  case SendMod of
							    %% Line 208
							    <'megaco_tcp'> when 'true' ->
								call 'megaco_tcp':'close'
								    (SendHandle)
							    %% Line 209
							    <'megaco_udp'> when 'true' ->
								call 'megaco_udp':'close'
								    (SendHandle)
							    %% Line 210
							    <_cor13> when 'true' ->
								call 'erlang':'exit'
								    (Pid, 'stopped_by_user')
							  end
		  -| [{'id',{0,0,'-stop/1-fun-0-'}}] )
	    in  let <Conns> =
		    %% Line 213
		    call 'megaco':'user_info'
			(_cor0, 'connections')
		in  do  %% Line 214
			apply 'd'/2
			    ([115|[116|[111|[112|[32|[45|[62|[32|[67|[111|[110|[110|[115|[58|[32|[126|[112]]]]]]]]]]]]]]]]], [Conns|[]])
			let <Disconns> =
			    %% Line 215
			    call 'lists':'map'
				(Disco, Conns)
			in  do  %% Line 216
				apply 'd'/2
				    ([115|[116|[111|[112|[32|[45|[62|[32|[68|[105|[115|[99|[111|[110|[110|[115|[58|[32|[126|[112]]]]]]]]]]]]]]]]]]]], [Disconns|[]])
				do  %% Line 217
				    call 'megaco':'stop_user'
					(_cor0)
				    do  %% Line 218
					case call 'erlang':'whereis'
						 ('megaco_simple_mgc') of
					  %% Line 219
					  <'undefined'> when 'true' ->
					      'ok'
					  %% Line 221
					  <Pid> when 'true' ->
					      do  %% Line 222
						  apply 'd'/2
						      ([115|[116|[111|[112|[32|[45|[62|[32|[80|[105|[100|[58|[32|[126|[112]]]]]]]]]]]]]]], [Pid|[]])
						  do  %% Line 223
						      call 'erlang':'unlink'
							  (Pid)
						      %% Line 224
						      call 'erlang':'exit'
							  (Pid, 'shutdown')
					end
					%% Line 226
					'ok'
'handle_connect'/2 =
    %% Line 232
    fun (_cor1,_cor0) ->
	do  %% Line 233
	    apply 'd'/2
		([104|[97|[110|[100|[108|[101|[95|[99|[111|[110|[110|[101|[99|[116|[32|[45|[62|[32|[101|[110|[116|[114|[121|[32|[119|[105|[116|[104|[126|[110|[32|[32|[32|[67|[111|[110|[110|[72|[97|[110|[100|[108|[101|[58|[32|[32|[32|[32|[32|[32|[126|[112|[126|[110|[32|[32|[32|[80|[114|[111|[116|[111|[99|[111|[108|[86|[101|[114|[115|[105|[111|[110|[58|[32|[126|[112]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 236
																																																							    [_cor1|[_cor0|[]]])
	    %% Line 237
	    'ok'
'handle_disconnect'/3 =
    %% Line 243
    fun (_cor2,_cor1,_cor0) ->
	do  %% Line 244
	    apply 'd'/2
		([104|[97|[110|[100|[108|[101|[95|[100|[105|[115|[99|[111|[110|[110|[101|[99|[116|[32|[45|[62|[32|[101|[110|[116|[114|[121|[32|[119|[105|[116|[104|[126|[110|[32|[32|[32|[67|[111|[110|[110|[72|[97|[110|[100|[108|[101|[58|[32|[32|[32|[32|[32|[32|[126|[112|[126|[110|[32|[32|[32|[80|[114|[111|[116|[111|[99|[111|[108|[86|[101|[114|[115|[105|[111|[110|[58|[32|[126|[112|[126|[110|[32|[32|[32|[82|[101|[97|[115|[111|[110|[58|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[126|[112]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 248
																																																																									      [_cor2|[_cor1|[_cor0|[]]]])
	    do  %% Line 249
		call 'megaco':'cancel'
		    (_cor2, _cor0)
		%% Line 250
		'ok'
'handle_syntax_error'/3 =
    %% Line 256
    fun (_cor2,_cor1,_cor0) ->
	do  %% Line 257
	    apply 'd'/2
		([104|[97|[110|[100|[108|[101|[95|[115|[121|[110|[116|[97|[120|[95|[101|[114|[114|[111|[114|[32|[45|[62|[32|[101|[110|[116|[114|[121|[32|[119|[105|[116|[104|[126|[110|[32|[32|[32|[82|[101|[99|[101|[105|[118|[101|[72|[97|[110|[100|[108|[101|[58|[32|[32|[32|[126|[112|[126|[110|[32|[32|[32|[80|[114|[111|[116|[111|[99|[111|[108|[86|[101|[114|[115|[105|[111|[110|[58|[32|[126|[112|[126|[110|[32|[32|[32|[69|[114|[114|[111|[114|[68|[101|[115|[99|[114|[105|[112|[116|[111|[114|[58|[32|[126|[112]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 261
																																																																												    [_cor2|[_cor1|[_cor0|[]]]])
	    %% Line 262
	    'reply'
'handle_message_error'/3 =
    %% Line 268
    fun (_cor2,_cor1,_cor0) ->
	do  %% Line 269
	    apply 'd'/2
		([104|[97|[110|[100|[108|[101|[95|[109|[101|[115|[115|[97|[103|[101|[95|[101|[114|[114|[111|[114|[32|[45|[62|[32|[101|[110|[116|[114|[121|[32|[119|[105|[116|[104|[126|[110|[32|[32|[32|[67|[111|[110|[110|[72|[97|[110|[100|[108|[101|[58|[32|[32|[32|[32|[32|[32|[126|[112|[126|[110|[32|[32|[32|[80|[114|[111|[116|[111|[99|[111|[108|[86|[101|[114|[115|[105|[111|[110|[58|[32|[126|[112|[126|[110|[32|[32|[32|[69|[114|[114|[111|[114|[68|[101|[115|[99|[114|[105|[112|[116|[111|[114|[58|[32|[126|[112]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 273
																																																																													[_cor2|[_cor1|[_cor0|[]]]])
	    %% Line 274
	    'no_reply'
'handle_trans_request'/3 =
    %% Line 280
    fun (_cor2,_cor1,_cor0) ->
	do  %% Line 281
	    apply 'd'/2
		([104|[97|[110|[100|[108|[101|[95|[116|[114|[97|[110|[115|[95|[114|[101|[113|[117|[101|[115|[116|[32|[45|[62|[32|[101|[110|[116|[114|[121|[32|[119|[105|[116|[104|[126|[110|[32|[32|[32|[67|[111|[110|[110|[72|[97|[110|[100|[108|[101|[58|[32|[32|[32|[32|[32|[32|[126|[112|[126|[110|[32|[32|[32|[80|[114|[111|[116|[111|[99|[111|[108|[86|[101|[114|[115|[105|[111|[110|[58|[32|[126|[112|[126|[110|[32|[32|[32|[65|[99|[116|[105|[111|[110|[82|[101|[113|[117|[101|[115|[116|[115|[58|[32|[32|[126|[112]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 285
																																																																												       [_cor2|[_cor1|[_cor0|[]]]])
	    %% Line 288
	    case _cor0 of
	      %% Line 289
	      <[AR|[]]> when 'true' ->
		  %% Line 290
		  ( case AR of
		      ( <( {'ActionRequest',_rec15,_cor18,_cor19,_cor20}
			   -| ['compiler_generated'] )> when 'true' ->
			    %% Line 291
			    case _cor20 of
			      %% Line 292
			      <[CR|[]]>
				  when call 'erlang':'=:='
					(_rec15,
					 0) ->
				  %% Line 293
				  ( case CR of
				      ( <( {'CommandRequest',_rec17,_cor26,_cor27}
					   -| ['compiler_generated'] )> when 'true' ->
					    case _rec17 of
					      %% Line 294
					      <{'serviceChangeReq',Req}> when 'true' ->
						  let <Rep> =
						      %% Line 295
						      apply 'service_change'/3
							  (_cor2, _cor1, Req)
						  in  %% Line 296
						      {'discard_ack',%% Line 297
								     [{'ActionReply',_rec15,'asn1_NOVALUE','asn1_NOVALUE',%% Line 298
															  [{'serviceChangeReply',Rep}|[]]}|%% Line 298
																			   []]}
					      %% Line 299
					      <_cor29> when 'true' ->
						  %% Line 300
						  {'discard_ack',{'ErrorDescriptor',501,[79|[110|[108|[121|[32|[115|[105|[110|[103|[108|[101|[32|[115|[101|[114|[118|[105|[99|[101|[32|[99|[104|[97|[110|[103|[101|[32|[111|[110|[32|[110|[117|[108|[108|[32|[99|[111|[110|[116|[101|[120|[116|[32|[104|[97|[110|[100|[108|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}}
					    end
					-| ['compiler_generated'] )
				      ( <_cor28> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','CommandRequest'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
			      %% Line 302
			      <_cor30> when 'true' ->
				  %% Line 303
				  {'discard_ack',{'ErrorDescriptor',501,[79|[110|[108|[121|[32|[115|[105|[110|[103|[108|[101|[32|[115|[101|[114|[118|[105|[99|[101|[32|[99|[104|[97|[110|[103|[101|[32|[111|[110|[32|[110|[117|[108|[108|[32|[99|[111|[110|[116|[101|[120|[116|[32|[104|[97|[110|[100|[108|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}}
			    end
			-| ['compiler_generated'] )
		      ( <_cor21> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','ActionRequest'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      %% Line 305
	      <_cor31> when 'true' ->
		  %% Line 306
		  {'discard_ack',{'ErrorDescriptor',501,[79|[110|[108|[121|[32|[115|[105|[110|[103|[108|[101|[32|[115|[101|[114|[118|[105|[99|[101|[32|[99|[104|[97|[110|[103|[101|[32|[111|[110|[32|[110|[117|[108|[108|[32|[99|[111|[110|[116|[101|[120|[116|[32|[104|[97|[110|[100|[108|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}}
	    end
'service_change'/3 =
    %% Line 309
    fun (_cor2,_cor1,_cor0) ->
	%% Line 310
	( case _cor0 of
	    ( <( {'ServiceChangeRequest',_cor18,_rec18}
		 -| ['compiler_generated'] )> when 'true' ->
		  %% Line 312
		  case _rec18 of
		    <{'ServiceChangeParm',_cor20,Address,_cor21,Profile,_cor22,_cor23,_cor24,_cor25,_cor26}> when 'true' ->
			%% Line 314
			case <> of
			  %% Line 315
			  <>
			      when call 'erlang':'=='
				    (_cor18,
				     [{'megaco_term_id','false',[[114|[111|[111|[116]]]]]}]) ->
			      %% Line 316
			      ( case _cor2 of
				  ( <( {'megaco_conn_handle',_rec20,_cor29}
				       -| ['compiler_generated'] )> when 'true' ->
					let <Res> =
					    %% Line 317
					    {'serviceChangeResParms',%% Line 318
								     {'ServiceChangeResParm',_rec20,%% Line 319
												    Address,%% Line 401
													    'asn1_NOVALUE',%% Line 320
															   Profile,%% Line 403
																   'asn1_NOVALUE'}}
					in  %% Line 321
					    {'ServiceChangeReply',_cor18,%% Line 322
									 Res}
				    -| ['compiler_generated'] )
				  ( <_cor30> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','megaco_conn_handle'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			  %% Line 323
			  <> when 'true' ->
			      %% Line 328
			      {'ServiceChangeReply',_cor18,{'errorDescriptor',{'ErrorDescriptor',501,[79|[110|[108|[121|[32|[104|[97|[110|[100|[108|[101|[100|[32|[102|[111|[114|[32|[114|[111|[111|[116]]]]]]]]]]]]]]]]]]]]]}}}
			end
		    ( <_cor6> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor6})
		      -| ['compiler_generated'] )
		  end
	      -| ['compiler_generated'] )
	    ( <_cor19> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','ServiceChangeRequest'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'handle_trans_long_request'/3 =
    %% Line 336
    fun (_cor2,_cor1,_cor0) ->
	%% Line 339
	{'discard_ack',{'ErrorDescriptor',501,[76|[111|[110|[103|[32|[116|[114|[97|[110|[115|[97|[99|[116|[105|[111|[110|[32|[114|[101|[113|[117|[101|[115|[116|[115|[32|[110|[111|[116|[32|[104|[97|[110|[100|[108|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}}
'handle_trans_reply'/4 =
    %% Line 345
    fun (_cor3,_cor2,_cor1,_cor0) ->
	do  %% Line 346
	    apply 'd'/2
		([104|[97|[110|[100|[108|[101|[95|[116|[114|[97|[110|[115|[95|[101|[112|[108|[121|[32|[45|[62|[32|[101|[110|[116|[114|[121|[32|[119|[105|[116|[104|[126|[110|[32|[32|[32|[67|[111|[110|[110|[72|[97|[110|[100|[108|[101|[58|[32|[32|[32|[32|[32|[32|[126|[112|[126|[110|[32|[32|[32|[80|[114|[111|[116|[111|[99|[111|[108|[86|[101|[114|[115|[105|[111|[110|[58|[32|[126|[112|[126|[110|[32|[32|[32|[65|[99|[116|[117|[97|[108|[82|[101|[112|[108|[121|[58|[32|[32|[32|[32|[32|[126|[112|[126|[110|[32|[32|[32|[82|[101|[112|[108|[121|[68|[97|[116|[97|[58|[32|[32|[32|[32|[32|[32|[32|[126|[112]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 351
																																																																																										  [_cor3|[_cor2|[_cor1|[_cor0|[]]]]])
	    %% Line 352
	    'ok'
'handle_trans_ack'/4 =
    %% Line 358
    fun (_cor3,_cor2,_cor1,_cor0) ->
	do  %% Line 359
	    apply 'd'/2
		([104|[97|[110|[100|[108|[101|[95|[116|[114|[97|[110|[115|[95|[97|[99|[107|[32|[45|[62|[32|[101|[110|[116|[114|[121|[32|[119|[105|[116|[104|[126|[110|[32|[32|[32|[67|[111|[110|[110|[72|[97|[110|[100|[108|[101|[58|[32|[32|[32|[32|[32|[32|[126|[112|[126|[110|[32|[32|[32|[80|[114|[111|[116|[111|[99|[111|[108|[86|[101|[114|[115|[105|[111|[110|[58|[32|[126|[112|[126|[110|[32|[32|[32|[99|[107|[83|[116|[97|[116|[117|[115|[58|[32|[32|[32|[32|[32|[32|[32|[32|[126|[112|[126|[110|[32|[32|[32|[65|[99|[107|[68|[97|[116|[97|[58|[32|[32|[32|[32|[32|[32|[32|[32|[32|[126|[112]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 364
																																																																																								     [_cor3|[_cor2|[_cor1|[_cor0|[]]]]])
	    %% Line 365
	    'ok'
'handle_unexpected_trans'/3 =
    %% Line 371
    fun (_cor2,_cor1,_cor0) ->
	do  %% Line 372
	    apply 'd'/2
		([104|[97|[110|[100|[108|[101|[95|[117|[110|[101|[120|[112|[101|[99|[116|[101|[100|[95|[116|[114|[97|[110|[115|[32|[45|[62|[32|[101|[110|[116|[114|[121|[32|[119|[105|[116|[104|[126|[110|[32|[32|[32|[67|[111|[110|[110|[72|[97|[110|[100|[108|[101|[58|[32|[32|[32|[32|[32|[32|[126|[112|[126|[110|[32|[32|[32|[80|[114|[111|[116|[111|[99|[111|[108|[86|[101|[114|[115|[105|[111|[110|[58|[32|[126|[112|[126|[110|[32|[32|[32|[84|[114|[97|[110|[115|[58|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[126|[112]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 376
																																																																														[_cor2|[_cor1|[_cor0|[]]]])
	    %% Line 377
	    'ok'
'handle_trans_request_abort'/4 =
    %% Line 384
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 385
	'ok'
'start_batch'/0 =
    %% Line 391
    fun () ->
	%% Line 392
	apply 'start_batch'/1
	    (['false'])
'start_batch'/1 =
    %% Line 394
    fun (_cor0) ->
	let <Args> =
	    %% Line 396
	    apply 'parse_args'/2
		(_cor0, [{'trace','false'}|[{'debug','false'}]])
	in  let <Trace> =
		%% Line 397
		apply 'get_arg'/2
		    ('trace', Args)
	    in  let <Debug> =
		    %% Line 398
		    apply 'get_arg'/2
			('debug', Args)
		in  let <_cor5> =
			%% Line 399
			call 'erlang':'self'
			    ()
		    in  let <Pid> =
			    %% Line 399
			    call 'erlang':'spawn'
				('megaco_simple_mgc', 'init_batch', [_cor5|[Trace|[Debug|[]]]])
			in  %% Line 400
			    receive
			      %% Line 401
			      <{'init_batch',_cor8,Res}>
				  when call 'erlang':'=:='
					(_cor8,
					 Pid) ->
				  do  %% Line 402
				      call 'io':'format'
					  ([126|[112|[40|[126|[112|[41|[58|[32|[126|[112|[126|[110]]]]]]]]]]]], ['megaco_simple_mgc'|[402|[Res|[]]]])
				      %% Line 403
				      Res
			    after 'infinity' ->
			      'true'
'init_batch'/3 =
    %% Line 406
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 407
	    call 'erlang':'self'
		()
	in  do  %% Line 407
		call 'erlang':'register'
		    ('megaco_simple_mgc', _cor3)
		let <Res> =
		    %% Line 408
		    apply 'start'/2
			(_cor1, _cor0)
		in  let <_cor5> =
			%% Line 409
			call 'erlang':'self'
			    ()
		    in  do  %% Line 409
			    call 'erlang':'!'
				(_cor2, {'init_batch',_cor5,Res})
			    %% Line 410
			    receive
			      
			    after %% Line 411
				  'infinity' ->
			      %% Line 411
			      Res
'parse_args'/2 =
    %% Line 415
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],Acc> when 'true' ->
	      %% Line 416
	      Acc
	  %% Line 417
	  <[Arg|Args],Acc>
	      when call 'erlang':'is_atom'
		    (Arg) ->
	      let <_cor2> =
		  %% Line 418
		  call 'erlang':'atom_to_list'
		      (Arg)
	      in  %% Line 418
		  case call 'string':'tokens'
			   (_cor2, [123|[125|[44]]]) of
		    %% Line 419
		    <[[116|[114|[97|[99|[101]]]]]|[Trace|[]]]> when 'true' ->
			let <_cor3> =
			    %% Line 420
			    call 'erlang':'list_to_atom'
				(Trace)
			in  let <_cor4> =
				%% Line 420
				apply 'parse_args'/3
				    ('trace', _cor3, Acc)
			    in  %% Line 420
				apply 'parse_args'/2
				    (Args, _cor4)
		    %% Line 421
		    <[[100|[101|[98|[117|[103]]]]]|[Debug|[]]]> when 'true' ->
			let <_cor5> =
			    %% Line 422
			    call 'erlang':'list_to_atom'
				(Debug)
			in  let <_cor6> =
				%% Line 422
				apply 'parse_args'/3
				    ('debug', _cor5, Acc)
			    in  %% Line 422
				apply 'parse_args'/2
				    (Args, _cor6)
		    %% Line 423
		    <_X_Invalid> when 'true' ->
			%% Line 424
			apply 'parse_args'/2
			    (Args, Acc)
		  end
	  ( <_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8})
		  -| [{'function_name',{'parse_args',2}}] )
	    -| ['compiler_generated'] )
	end
'parse_args'/3 =
    %% Line 427
    fun (_cor2,_cor1,_cor0) ->
	let <Entry> = {_cor2,_cor1}
	in  %% Line 429
	    case call 'lists':'keyreplace'
		     (_cor2, 1, _cor0, {_cor2,_cor1}) of
	      %% Line 430
	      <_cor8>
		  when call 'erlang':'=:='
			(_cor8,
			 _cor0) ->
		  %% Line 431
		  [Entry|_cor0]
	      %% Line 432
	      <Args2> when 'true' ->
		  %% Line 433
		  Args2
	    end
'get_arg'/2 =
    %% Line 436
    fun (_cor1,_cor0) ->
	%% Line 437
	case call 'lists':'keysearch'
		 (_cor1, 1, _cor0) of
	  <{'value',{_cor5,Val}}>
	      when call 'erlang':'=:='
		    (_cor5,
		     _cor1) ->
	      %% Line 438
	      Val
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'd'/1 =
    %% Line 445
    fun (_cor0) ->
	%% Line 446
	apply 'd'/2
	    (_cor0, [])
'd'/2 =
    %% Line 448
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 449
	    call 'erlang':'get'
		('debug')
	in  %% Line 449
	    apply 'd'/3
		(_cor2, _cor1, _cor0)
'd'/3 =
    %% Line 451
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'true',F,A> when 'true' ->
	      let <_cor3> =
		  %% Line 452
		  call 'erlang':'++'
		      (F, [126|[110]])
	      in  let <_cor4> =
		      %% Line 452
		      call 'erlang':'++'
			  ([83|[73|[77|[80|[76|[69|[95|[77|[71|[67|[58|[32]]]]]]]]]]]], _cor3)
		  in  %% Line 452
		      call 'io':'format'
			  (_cor4, A)
	  %% Line 453
	  <_cor8,_X_F,_X_A> when 'true' ->
	      %% Line 454
	      'ok'
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('megaco_simple_mgc')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('megaco_simple_mgc', _cor0)
end