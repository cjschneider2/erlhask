module 'megaco_codec_transform' ['codecs'/0,
				 'default_message_package'/0,
				 'export_messages'/0,
				 'export_messages'/1,
				 'messages'/0,
				 'messages'/1,
				 'module_info'/0,
				 'module_info'/1]
    attributes [%% Line 24
		'type' =
		    %% Line 24
		    [{{'record','file_info'},[{'typed_record_field',{'record_field',25,{'atom',25,'size'}},{'type',25,'union',[{'atom',25,'undefined'}|[{'type',25,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',26,{'atom',26,'type'}},{'type',26,'union',[{'atom',26,'undefined'}|[{'atom',26,'device'}|[{'atom',26,'directory'}|[{'atom',26,'other'}|[{'atom',26,'regular'}|[{'atom',26,'symlink'}]]]]]]}}|[{'typed_record_field',{'record_field',27,{'atom',27,'access'}},{'type',27,'union',[{'atom',27,'undefined'}|[{'atom',27,'read'}|[{'atom',27,'write'}|[{'atom',27,'read_write'}|[{'atom',27,'none'}]]]]]}}|[{'typed_record_field',{'record_field',28,{'atom',28,'atime'}},{'type',28,'union',[{'atom',28,'undefined'}|[{'remote_type',28,[{'atom',28,'file'}|[{'atom',28,'date_time'}|[[]]]]}|[{'type',28,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',32,{'atom',32,'mtime'}},{'type',32,'union',[{'atom',32,'undefined'}|[{'remote_type',32,[{'atom',32,'file'}|[{'atom',32,'date_time'}|[[]]]]}|[{'type',32,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',34,{'atom',34,'ctime'}},{'type',34,'union',[{'atom',34,'undefined'}|[{'remote_type',34,[{'atom',34,'file'}|[{'atom',34,'date_time'}|[[]]]]}|[{'type',34,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',40,{'atom',40,'mode'}},{'type',40,'union',[{'atom',40,'undefined'}|[{'type',40,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',43,{'atom',43,'links'}},{'type',43,'union',[{'atom',43,'undefined'}|[{'type',43,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',46,{'atom',46,'major_device'}},{'type',46,'union',[{'atom',46,'undefined'}|[{'type',46,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',52,{'atom',52,'minor_device'}},{'type',52,'union',[{'atom',52,'undefined'}|[{'type',52,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',53,{'atom',53,'inode'}},{'type',53,'union',[{'atom',53,'undefined'}|[{'type',53,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',54,{'atom',54,'uid'}},{'type',54,'union',[{'atom',54,'undefined'}|[{'type',54,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',55,{'atom',55,'gid'}},{'type',55,'union',[{'atom',55,'undefined'}|[{'type',55,'non_neg_integer',[]}]]}}]]]]]]]]]]]]],[]}],
		%% Line 58
		'type' =
		    %% Line 58
		    [{{'record','file_descriptor'},[{'typed_record_field',{'record_field',59,{'atom',59,'module'}},{'type',59,'union',[{'atom',59,'undefined'}|[{'type',59,'module',[]}]]}}|[{'typed_record_field',{'record_field',60,{'atom',60,'data'}},{'type',60,'union',[{'atom',60,'undefined'}|[{'type',60,'term',[]}]]}}]],[]}]]
'codecs'/0 =
    %% Line 71
    fun () ->
	%% Line 72
	['pretty'|['compact'|['per'|['ber'|['erlang']]]]]
'default_message_package'/0 =
    %% Line 74
    fun () ->
	%% Line 75
	'time_test'
'messages'/0 =
    %% Line 77
    fun () ->
	%% Line 78
	apply 'messages'/1
	    ('time_test')
'messages'/1 =
    %% Line 80
    fun (_cor0) ->
	case _cor0 of
	  <MessagePackage>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      %% Line 82
	      case apply 'load_messages'/2
		       ([46], MessagePackage) of
		%% Line 83
		<{'error',_X_Reason}> when 'true' ->
		    let <AppLibDir> =
			%% Line 84
			call 'code':'lib_dir'
			    ('megaco')
		    in  let <Dir> =
			    %% Line 85
			    call 'filename':'join'
				([AppLibDir|['examples'|['meas']]])
			in  %% Line 86
			    apply 'load_messages'/2
				(Dir, MessagePackage)
		%% Line 87
		<Else> when 'true' ->
		    %% Line 88
		    Else
	      end
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'messages',1}}] )
	    -| ['compiler_generated'] )
	end
'load_messages'/2 =
    %% Line 91
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 93
	    call 'erlang':'atom_to_list'
		(_cor0)
	in  let <_cor3> =
		%% Line 93
		call 'erlang':'++'
		    (_cor2, [46|[109|[115|[103|[115]]]]])
	    in  let <Filename> =
		    %% Line 93
		    call 'filename':'join'
			([_cor1|[_cor3|[]]])
		in  %% Line 94
		    case call 'file':'consult'
			     (Filename) of
		      %% Line 95
		      <{'ok',[{Codec,Msgs}|[]]}>
			  when try
				( case <> of
				    ( <>
					  when call 'erlang':'is_atom'
						(Codec) ->
					  call 'erlang':'is_list'
					      (Msgs)
				      -| ['compiler_generated'] )
				    ( <> when 'true' ->
					  'false'
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
			    of <Try> ->
				Try
			    catch <T,R> ->
				'false' ->
			  %% Line 96
			  case call 'lists':'member'
				   (Codec, ['pretty'|['compact'|['per'|['ber'|['erlang']]]]]) of
			    %% Line 97
			    <'true'> when 'true' ->
				%% Line 98
				apply 'messages'/2
				    (Codec, Msgs)
			    %% Line 99
			    <'false'> when 'true' ->
				%% Line 100
				{'error',{'unknown_codec',Codec}}
			    ( <_cor8> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor8})
			      -| ['compiler_generated'] )
			  end
		      %% Line 103
		      <{'ok',[{BadCodec,Msgs}|[]]}>
			  when call 'erlang':'is_list'
				(Msgs) ->
			  %% Line 104
			  {'error',{'bad_codec',BadCodec}}
		      %% Line 107
		      <{'ok',[Msgs|[]]}>
			  when call 'erlang':'is_list'
				(Msgs) ->
			  %% Line 108
			  apply 'messages'/2
			      ('pretty', Msgs)
		      %% Line 110
		      <{'ok',Crap}> when 'true' ->
			  %% Line 111
			  {'error',{'bad_messages',Crap}}
		      %% Line 113
		      <Error> when 'true' ->
			  %% Line 114
			  Error
		    end
'messages'/2 =
    %% Line 117
    fun (_cor1,_cor0) ->
	let <OutCodecs> =
	    %% Line 118
	    call 'lists':'delete'
		(_cor1, ['pretty'|['compact'|['per'|['ber'|['erlang']]]]])
	in  %% Line 119
	    apply 'transform_messages'/3
		(_cor1, _cor0, OutCodecs)
'export_messages'/0 =
    %% Line 122
    fun () ->
	%% Line 123
	apply 'export_messages'/1
	    ('time_test')
'export_messages'/1 =
    %% Line 125
    fun (_cor0) ->
	case _cor0 of
	  <MessagePackage>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      %% Line 126
	      case apply 'messages'/1
		       (MessagePackage) of
		%% Line 127
		<TMsgs>
		    when call 'erlang':'is_list'
			  (TMsgs) ->
		    catch
			%% Line 128
			apply 'export_messages'/2
			    (MessagePackage, TMsgs)
		%% Line 129
		<Error> when 'true' ->
		    %% Line 130
		    Error
	      end
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'export_messages',1}}] )
	    -| ['compiler_generated'] )
	end
'export_messages'/2 =
    %% Line 133
    fun (_cor1,_cor0) ->
	do  %% Line 134
	    case call 'file':'make_dir'
		     (_cor1) of
	      %% Line 135
	      <'ok'> when 'true' ->
		  'ok'
	      %% Line 137
	      <{'error','eexist'}> when 'true' ->
		  'ok'
	      %% Line 139
	      <Error> when 'true' ->
		  %% Line 140
		  call 'erlang':'throw'
		      (Error)
	    end
	    %% Line 142
	    apply 'do_export_messages'/2
		(_cor1, _cor0)
'do_export_messages'/2 =
    %% Line 144
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <_X_MessagePackage,[]> when 'true' ->
	      %% Line 145
	      'ok'
	  %% Line 146
	  <MessagePackage,[{Codec,Msgs}|TMsgs]> when 'true' ->
	      do  %% Line 147
		  apply 'ems'/3
		      (MessagePackage, Codec, Msgs)
		  %% Line 148
		  apply 'do_export_messages'/2
		      (MessagePackage, TMsgs)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'do_export_messages',2}}] )
	    -| ['compiler_generated'] )
	end
'transform_messages'/3 =
    %% Line 153
    fun (_cor2,_cor1,_cor0) ->
	let <_cor8> =
	    %% Line 155
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor5) ->
			  case _cor5 of
			    <[Codec|_cor4]> when 'true' ->
				let <_cor6> =
				    apply 'tms'/3
					(_cor1, _cor2, Codec)
				in  let <_cor7> =
					apply 'lc$^0'/1
					    (_cor4)
				    in  ( [{Codec,_cor6}|_cor7]
					  -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor5> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor5})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (_cor0)
	      -| ['list_comprehension'] )
	in  %% Line 154
	    [{_cor2,_cor1}|_cor8]
'tms'/3 =
    %% Line 160
    fun (_cor2,_cor1,_cor0) ->
	%% Line 161
	( letrec
	      'lc$^0'/1 =
		  fun (_cor5) ->
		      case _cor5 of
			<[{Name,FromBin}|_cor4]> when 'true' ->
			    let <_cor6> =
				apply 'tm'/3
				    (FromBin, _cor1, _cor0)
			    in  let <_cor7> =
				    apply 'lc$^0'/1
					(_cor4)
				in  ( [{Name,_cor6}|_cor7]
				      -| ['compiler_generated'] )
			( <[_cor3|_cor4]> when 'true' ->
			      apply 'lc$^0'/1
				  (_cor4)
			  -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_cor5> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor5})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  apply 'lc$^0'/1
		  (_cor2)
	  -| ['list_comprehension'] )
'tm'/3 =
    %% Line 163
    fun (_cor2,_cor1,_cor0) ->
	let <FromMsg> =
	    %% Line 164
	    apply 'decode_message'/2
		(_cor1, _cor2)
	in  %% Line 165
	    apply 'encode_message'/2
		(_cor0, FromMsg)
'ems'/3 =
    %% Line 170
    fun (_cor2,_cor1,_cor0) ->
	let <Dir> =
	    %% Line 171
	    call 'filename':'join'
		([_cor2|[_cor1|[]]])
	in  do  %% Line 172
		case call 'file':'make_dir'
			 (Dir) of
		  %% Line 173
		  <'ok'> when 'true' ->
		      'ok'
		  %% Line 175
		  <{'error','eexist'}> when 'true' ->
		      'ok'
		  %% Line 177
		  <Error> when 'true' ->
		      %% Line 178
		      call 'erlang':'throw'
			  (Error)
		end
		let <Extension> =
		    %% Line 180
		    apply 'extension_of'/1
			(_cor1)
		in  let <F> =
			%% Line 181
			( fun (_cor6) ->
			      case _cor6 of
				<{Name,Bin}> when 'true' ->
				    apply 'em'/5
					(_cor2, _cor1, Name, Extension, Bin)
				( <_cor7> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_cor7})
					-| [{'function_name',{'-ems/3-fun-0-',1}}] )
				  -| ['compiler_generated'] )
			      end
			  -| [{'id',{0,0,'-ems/3-fun-0-'}}] )
		    in  %% Line 182
			call 'lists':'foreach'
			    (F, _cor0)
'em'/5 =
    %% Line 184
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 185
	    call 'erlang':'atom_to_list'
		(_cor2)
	in  let <_cor6> =
		%% Line 185
		call 'erlang':'++'
		    (_cor5, _cor1)
	    in  let <Filename> =
		    %% Line 185
		    call 'filename':'join'
			([_cor4|[_cor3|[_cor6|[]]]])
		in  %% Line 186
		    case call 'file':'open'
			     (Filename, ['raw'|['binary'|['write']]]) of
		      %% Line 187
		      <{'ok',Fd}> when 'true' ->
			  %% Line 188
			  case call 'file':'write'
				   (Fd, _cor0) of
			    %% Line 189
			    <'ok'> when 'true' ->
				do  %% Line 190
				    call 'file':'close'
					(Fd)
				    %% Line 191
				    'ok'
			    %% Line 192
			    <{'error',Reason}> when 'true' ->
				let <_cor8> =
				    %% Line 194
				    call 'erlang':'size'
					(_cor0)
				in  let <S> =
					%% Line 193
					apply 'format'/2
					    ([102|[97|[105|[108|[101|[100|[32|[119|[114|[105|[116|[105|[110|[103|[32|[126|[119|[32|[109|[101|[115|[115|[97|[103|[101|[32|[126|[119|[32|[40|[126|[112|[32|[98|[121|[116|[101|[115|[41|[58|[32|[126|[112]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 194
																																				   [_cor3|[_cor2|[_cor8|[Reason|[]]]]])
				    in  do  %% Line 195
					    call 'file':'close'
						(Fd)
					    %% Line 196
					    call 'erlang':'throw'
						({'error',S})
			    ( <_cor10> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor10})
			      -| ['compiler_generated'] )
			  end
		      %% Line 199
		      <{'error',Reason}> when 'true' ->
			  let <S> =
			      %% Line 200
			      apply 'format'/2
				  ([102|[97|[105|[108|[101|[100|[32|[111|[112|[101|[110|[32|[102|[105|[108|[101|[32|[126|[115|[58|[32|[126|[112]]]]]]]]]]]]]]]]]]]]]]], [Filename|[Reason|[]]])
			  in  %% Line 201
			      call 'erlang':'throw'
				  ({'error',S})
		      ( <_cor12> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor12})
			-| ['compiler_generated'] )
		    end
'decode_message'/2 =
    %% Line 207
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'pretty',BinMsg> when 'true' ->
	      %% Line 210
	      apply 'do_decode'/3
		  ('megaco_pretty_text_encoder', [{'version3','v3'}], BinMsg)
	  %% Line 211
	  <'compact',BinMsg> when 'true' ->
	      %% Line 214
	      apply 'do_decode'/3
		  ('megaco_compact_text_encoder', [{'version3','v3'}], BinMsg)
	  %% Line 215
	  <'ber',BinMsg> when 'true' ->
	      %% Line 218
	      apply 'do_decode'/3
		  ('megaco_ber_encoder', [{'version3','v3'}], BinMsg)
	  %% Line 219
	  <'per',BinMsg> when 'true' ->
	      %% Line 222
	      apply 'do_decode'/3
		  ('megaco_per_encoder', [{'version3','v3'}], BinMsg)
	  %% Line 223
	  <'erlang',BinMsg> when 'true' ->
	      %% Line 226
	      apply 'do_decode'/3
		  ('megaco_erl_dist_encoder', [{'version3','v3'}], BinMsg)
	  ( <_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12})
		  -| [{'function_name',{'decode_message',2}}] )
	    -| ['compiler_generated'] )
	end
'do_decode'/3 =
    %% Line 229
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    catch
		%% Line 230
		call _cor2:'decode_message'
		    (_cor1, _cor0)
	in  %% Line 230
	    case _cor3 of
	      %% Line 231
	      <{'ok',Msg}> when 'true' ->
		  %% Line 232
		  Msg
	      %% Line 233
	      <{'error',Reason}> when 'true' ->
		  let <S> =
		      %% Line 234
		      apply 'format'/2
			  ([100|[101|[99|[111|[100|[101|[32|[101|[114|[114|[111|[114|[58|[32|[126|[112]]]]]]]]]]]]]]]], [Reason|[]])
		  in  %% Line 235
		      call 'erlang':'throw'
			  ({'error',S})
	      %% Line 236
	      <{'EXIT',Reason}> when 'true' ->
		  let <S> =
		      %% Line 237
		      apply 'format'/2
			  ([100|[101|[99|[111|[100|[101|[32|[101|[120|[105|[116|[58|[32|[126|[112]]]]]]]]]]]]]]], [Reason|[]])
		  in  %% Line 238
		      call 'erlang':'throw'
			  ({'error',S})
	      %% Line 239
	      <Other> when 'true' ->
		  let <S> =
		      %% Line 240
		      apply 'format'/2
			  ([117|[110|[107|[110|[119|[111|[110|[32|[100|[101|[99|[111|[100|[101|[32|[114|[101|[115|[117|[108|[116|[58|[32|[126|[112]]]]]]]]]]]]]]]]]]]]]]]]], [Other|[]])
		  in  %% Line 241
		      call 'erlang':'throw'
			  ({'error',S})
	    end
'encode_message'/2 =
    %% Line 248
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'pretty',Msg> when 'true' ->
	      %% Line 251
	      apply 'do_encode'/3
		  ('megaco_pretty_text_encoder', [{'version3','v3'}], Msg)
	  %% Line 252
	  <'compact',Msg> when 'true' ->
	      %% Line 255
	      apply 'do_encode'/3
		  ('megaco_compact_text_encoder', [{'version3','v3'}], Msg)
	  %% Line 256
	  <'ber',Msg> when 'true' ->
	      %% Line 259
	      apply 'do_encode'/3
		  ('megaco_ber_bin_encoder', [{'version3','v3'}], Msg)
	  %% Line 260
	  <'per',Msg> when 'true' ->
	      %% Line 263
	      apply 'do_encode'/3
		  ('megaco_per_bin_encoder', [{'version3','v3'}], Msg)
	  %% Line 264
	  <'erlang',Msg> when 'true' ->
	      %% Line 267
	      apply 'do_encode'/3
		  ('megaco_erl_dist_encoder', [{'version3','v3'}], Msg)
	  ( <_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12})
		  -| [{'function_name',{'encode_message',2}}] )
	    -| ['compiler_generated'] )
	end
'do_encode'/3 =
    %% Line 270
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    catch
		%% Line 271
		call _cor2:'encode_message'
		    (_cor1, _cor0)
	in  %% Line 271
	    case _cor3 of
	      %% Line 272
	      <{'ok',Bin}> when 'true' ->
		  %% Line 273
		  Bin
	      %% Line 274
	      <{'error',Reason}> when 'true' ->
		  let <S> =
		      %% Line 275
		      apply 'format'/2
			  ([101|[110|[99|[111|[100|[101|[32|[101|[114|[114|[111|[114|[58|[32|[126|[112]]]]]]]]]]]]]]]], [Reason|[]])
		  in  %% Line 276
		      call 'erlang':'throw'
			  ({'error',S})
	      %% Line 277
	      <{'EXIT',Reason}> when 'true' ->
		  let <S> =
		      %% Line 278
		      apply 'format'/2
			  ([101|[110|[99|[111|[100|[101|[32|[101|[120|[105|[116|[58|[32|[126|[112]]]]]]]]]]]]]]], [Reason|[]])
		  in  %% Line 279
		      call 'erlang':'throw'
			  ({'error',S})
	      %% Line 280
	      <Other> when 'true' ->
		  let <S> =
		      %% Line 281
		      apply 'format'/2
			  ([117|[110|[107|[110|[119|[111|[110|[32|[101|[110|[99|[111|[100|[101|[32|[114|[101|[115|[117|[108|[116|[58|[32|[126|[112]]]]]]]]]]]]]]]]]]]]]]]]], [Other|[]])
		  in  %% Line 282
		      call 'erlang':'throw'
			  ({'error',S})
	    end
'extension_of'/1 =
    %% Line 288
    fun (_cor0) ->
	case _cor0 of
	  <'pretty'> when 'true' ->
	      %% Line 289
	      [46|[116|[120|[116]]]]
	  %% Line 290
	  <'compact'> when 'true' ->
	      %% Line 291
	      [46|[116|[120|[116]]]]
	  %% Line 292
	  <'ber'> when 'true' ->
	      %% Line 293
	      [46|[98|[105|[110]]]]
	  %% Line 294
	  <'per'> when 'true' ->
	      %% Line 295
	      [46|[98|[105|[110]]]]
	  %% Line 296
	  <'erlang'> when 'true' ->
	      %% Line 297
	      [46|[98|[105|[110]]]]
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'extension_of',1}}] )
	    -| ['compiler_generated'] )
	end
'format'/2 =
    %% Line 304
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 305
	    call 'io_lib':'format'
		(_cor1, _cor0)
	in  %% Line 305
	    call 'lists':'flatten'
		(_cor2)
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('megaco_codec_transform')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('megaco_codec_transform', _cor0)
end