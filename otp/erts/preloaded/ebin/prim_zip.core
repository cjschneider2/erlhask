module 'prim_zip' ['close'/1,
		   'foldl'/3,
		   'module_info'/0,
		   'module_info'/1,
		   'open'/1,
		   'open'/3,
		   'splitter'/3]
    attributes [%% Line 24
		'type' =
		    %% Line 24
		    [{{'record','file_info'},[{'typed_record_field',{'record_field',25,{'atom',25,'size'}},{'type',25,'union',[{'atom',25,'undefined'}|[{'type',25,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',26,{'atom',26,'type'}},{'type',26,'union',[{'atom',26,'undefined'}|[{'atom',26,'device'}|[{'atom',26,'directory'}|[{'atom',26,'other'}|[{'atom',26,'regular'}|[{'atom',26,'symlink'}]]]]]]}}|[{'typed_record_field',{'record_field',27,{'atom',27,'access'}},{'type',27,'union',[{'atom',27,'undefined'}|[{'atom',27,'read'}|[{'atom',27,'write'}|[{'atom',27,'read_write'}|[{'atom',27,'none'}]]]]]}}|[{'typed_record_field',{'record_field',28,{'atom',28,'atime'}},{'type',28,'union',[{'atom',28,'undefined'}|[{'remote_type',28,[{'atom',28,'file'}|[{'atom',28,'date_time'}|[[]]]]}|[{'type',28,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',32,{'atom',32,'mtime'}},{'type',32,'union',[{'atom',32,'undefined'}|[{'remote_type',32,[{'atom',32,'file'}|[{'atom',32,'date_time'}|[[]]]]}|[{'type',32,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',34,{'atom',34,'ctime'}},{'type',34,'union',[{'atom',34,'undefined'}|[{'remote_type',34,[{'atom',34,'file'}|[{'atom',34,'date_time'}|[[]]]]}|[{'type',34,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',40,{'atom',40,'mode'}},{'type',40,'union',[{'atom',40,'undefined'}|[{'type',40,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',43,{'atom',43,'links'}},{'type',43,'union',[{'atom',43,'undefined'}|[{'type',43,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',46,{'atom',46,'major_device'}},{'type',46,'union',[{'atom',46,'undefined'}|[{'type',46,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',52,{'atom',52,'minor_device'}},{'type',52,'union',[{'atom',52,'undefined'}|[{'type',52,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',53,{'atom',53,'inode'}},{'type',53,'union',[{'atom',53,'undefined'}|[{'type',53,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',54,{'atom',54,'uid'}},{'type',54,'union',[{'atom',54,'undefined'}|[{'type',54,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',55,{'atom',55,'gid'}},{'type',55,'union',[{'atom',55,'undefined'}|[{'type',55,'non_neg_integer',[]}]]}}]]]]]]]]]]]]],[]}],
		%% Line 58
		'type' =
		    %% Line 58
		    [{{'record','file_descriptor'},[{'typed_record_field',{'record_field',59,{'atom',59,'module'}},{'type',59,'union',[{'atom',59,'undefined'}|[{'type',59,'module',[]}]]}}|[{'typed_record_field',{'record_field',60,{'atom',60,'data'}},{'type',60,'union',[{'atom',60,'undefined'}|[{'type',60,'term',[]}]]}}]],[]}],
		%% Line 20
		'type' =
		    %% Line 20
		    [{{'record','zip_file'},[{'typed_record_field',{'record_field',21,{'atom',21,'name'}},{'type',21,'union',[{'atom',21,'undefined'}|[{'type',21,'string',[]}]]}}|[{'typed_record_field',{'record_field',22,{'atom',22,'info'}},{'type',22,'union',[{'atom',22,'undefined'}|[{'remote_type',22,[{'atom',22,'file'}|[{'atom',22,'file_info'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',23,{'atom',23,'comment'}},{'type',23,'union',[{'atom',23,'undefined'}|[{'type',23,'string',[]}]]}}|[{'typed_record_field',{'record_field',24,{'atom',24,'offset'}},{'type',24,'union',[{'atom',24,'undefined'}|[{'type',24,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',25,{'atom',25,'comp_size'}},{'type',25,'union',[{'atom',25,'undefined'}|[{'type',25,'non_neg_integer',[]}]]}}]]]]],[]}],
		%% Line 28
		'type' =
		    %% Line 28
		    [{{'record','zip_comment'},[{'typed_record_field',{'record_field',29,{'atom',29,'comment'}},{'type',29,'union',[{'atom',29,'undefined'}|[{'type',29,'string',[]}]]}}],[]}],
		%% Line 42
		'type' =
		    %% Line 42
		    [{{'record','local_file_header'},[{'record_field',42,{'atom',42,'version_needed'}}|[{'record_field',43,{'atom',43,'gp_flag'}}|[{'record_field',44,{'atom',44,'comp_method'}}|[{'record_field',45,{'atom',45,'last_mod_time'}}|[{'record_field',46,{'atom',46,'last_mod_date'}}|[{'record_field',47,{'atom',47,'crc32'}}|[{'record_field',48,{'atom',48,'comp_size'}}|[{'record_field',49,{'atom',49,'uncomp_size'}}|[{'record_field',50,{'atom',50,'file_name_length'}}|[{'record_field',51,{'atom',51,'extra_field_length'}}]]]]]]]]]],[]}],
		%% Line 62
		'type' =
		    %% Line 62
		    [{{'record','cd_file_header'},[{'record_field',62,{'atom',62,'version_made_by'}}|[{'record_field',63,{'atom',63,'version_needed'}}|[{'record_field',64,{'atom',64,'gp_flag'}}|[{'record_field',65,{'atom',65,'comp_method'}}|[{'record_field',66,{'atom',66,'last_mod_time'}}|[{'record_field',67,{'atom',67,'last_mod_date'}}|[{'record_field',68,{'atom',68,'crc32'}}|[{'record_field',69,{'atom',69,'comp_size'}}|[{'record_field',70,{'atom',70,'uncomp_size'}}|[{'record_field',71,{'atom',71,'file_name_length'}}|[{'record_field',72,{'atom',72,'extra_field_length'}}|[{'record_field',73,{'atom',73,'file_comment_length'}}|[{'record_field',74,{'atom',74,'disk_num_start'}}|[{'record_field',75,{'atom',75,'internal_attr'}}|[{'record_field',76,{'atom',76,'external_attr'}}|[{'record_field',77,{'atom',77,'local_header_offset'}}]]]]]]]]]]]]]]]],[]}],
		%% Line 81
		'type' =
		    %% Line 81
		    [{{'record','unix_extra_field'},[{'record_field',81,{'atom',81,'atime'}}|[{'record_field',82,{'atom',82,'mtime'}}|[{'record_field',83,{'atom',83,'uid'}}|[{'record_field',84,{'atom',84,'gid'}}]]]],[]}],
		%% Line 88
		'type' =
		    %% Line 88
		    [{{'record','extended_timestamp'},[{'record_field',88,{'atom',88,'mtime'}}|[{'record_field',89,{'atom',89,'atime'}}|[{'record_field',90,{'atom',90,'ctime'}}]]],[]}],
		%% Line 95
		'type' =
		    %% Line 95
		    [{{'record','eocd'},[{'record_field',95,{'atom',95,'disk_num'}}|[{'record_field',96,{'atom',96,'start_disk_num'}}|[{'record_field',97,{'atom',97,'entries_on_disk'}}|[{'record_field',98,{'atom',98,'entries'}}|[{'record_field',99,{'atom',99,'size'}}|[{'record_field',100,{'atom',100,'offset'}}|[{'record_field',101,{'atom',101,'zip_comment_length'}}]]]]]]],[]}],
		%% Line 46
		'type' =
		    %% Line 46
		    [{{'record','primzip_file'},[{'record_field',47,{'atom',47,'name'}}|[{'record_field',48,{'atom',48,'get_info'}}|[{'record_field',49,{'atom',49,'get_bin'}}]]],[]}],
		%% Line 51
		'type' =
		    %% Line 51
		    [{{'record','primzip'},[{'typed_record_field',{'record_field',52,{'atom',52,'files'},{'nil',52}},{'type',52,'list',[{'type',52,'record',[{'atom',52,'primzip_file'}]}]}}|[{'record_field',53,{'atom',53,'zlib'}}|[{'record_field',54,{'atom',54,'input'}}|[{'record_field',55,{'atom',55,'in'}}]]]],[]}]]
'filter_fun'/0 =
    %% Line 57
    fun () ->
	%% Line 60
	( fun (_cor3,_cor2) ->
	      case <_cor3,_cor2> of
		<{_X_Name,_X_GetInfoFun,_X_GetBinFun},Acc> when 'true' ->
		    %% Line 61
		    {'true','true',Acc}
		( <_cor5,_cor4> when 'true' ->
		      ( primop 'match_fail'
			    ({'function_clause',_cor5,_cor4})
			-| [{'function_name',{'-filter_fun/0-fun-0-',2}}] )
		  -| ['compiler_generated'] )
	      end
	  -| [{'id',{0,0,'-filter_fun/0-fun-0-'}}] )
'open'/1 =
    %% Line 65
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 66
	    apply 'filter_fun'/0
		()
	in  %% Line 66
	    apply 'open'/3
		(_cor1, 'undefined', _cor0)
'open'/3 =
    %% Line 68
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <FilterFun,FilterAcc,F>
	      when call 'erlang':'is_function'
		    (FilterFun,
		     2) ->
	      %% Line 69
	      try
		  %% Line 70
		  apply 'do_open'/3
		      (FilterFun, FilterAcc, F)
	      of <_cor3> ->
		  _cor3
	      catch <_cor6,_cor5,_cor4> ->
		  case <_cor6,_cor5,_cor4> of
		    %% Line 72
		    <'throw',{'filter_fun_throw',Reason},_cor12> when 'true' ->
			%% Line 73
			call 'erlang':'throw'
			    (Reason)
		    %% Line 74
		    <'throw',InternalReason,_cor13> when 'true' ->
			%% Line 75
			{'error',InternalReason}
		    %% Line 76
		    <Class,Reason,_cor14> when 'true' ->
			let <_cor7> =
			    %% Line 77
			    call 'erlang':'get_stacktrace'
				()
			in  let <_cor8> =
				%% Line 77
				call 'erlang':'raise'
				    (Class, Reason, _cor7)
			    in  %% Line 77
				call 'erlang':'error'
				    (_cor8)
		  end
	  %% Line 79
	  <_cor15,_cor16,_cor17> when 'true' ->
	      %% Line 80
	      {'error','einval'}
	end
'do_open'/3 =
    %% Line 82
    fun (_cor2,_cor1,_cor0) ->
	let <Input> =
	    %% Line 83
	    apply 'get_zip_input'/1
		(_cor0)
	in  let <In0> =
		%% Line 84
		apply Input
		    ({'open',_cor0,['read'|['binary'|['raw']]]}, [])
	    in  let <Z> =
		    %% Line 85
		    call 'zlib':'open'
			()
		in  let <PrimZip> =
			%% Line 86
			{'primzip',[],Z,Input,In0}
		    in  %% Line 87
			try
			    %% Line 88
			    case apply 'get_central_dir'/3
				     (PrimZip, _cor2, _cor1) of
			      <{PrimZip2,FilterAcc2}> when 'true' ->
				  %% Line 89
				  {'ok',PrimZip2,FilterAcc2}
			      ( <_cor7> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor7})
				-| ['compiler_generated'] )
			    end
			of <_cor8> ->
			    _cor8
			catch <_cor11,_cor10,_cor9> ->
			    let <_X_> =
				%% Line 92
				apply 'close'/1
				    (PrimZip)
			    in  let <_cor13> =
				    %% Line 93
				    call 'erlang':'get_stacktrace'
					()
				in  let <_cor14> =
					%% Line 93
					call 'erlang':'raise'
					    (_cor11, _cor10, _cor13)
				    in  %% Line 93
					call 'erlang':'error'
					    (_cor14)
'foldl'/3 =
    %% Line 97
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <FilterFun,FilterAcc,PrimZip = {'primzip',Files,_cor13,_cor14,_cor15}>
	      when %% Line 98
		call 'erlang':'is_function'
		    (FilterFun,
		     2) ->
	      %% Line 99
	      try
		  %% Line 100
		  case %% Line 101
		       apply 'do_foldl'/6
			   (FilterFun, FilterAcc, Files, [], PrimZip, PrimZip) of
		    <{'ok',FilterAcc2,PrimZip2}> when 'true' ->
			%% Line 102
			{'ok',PrimZip2,FilterAcc2}
		    ( <_cor3> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor3})
		      -| ['compiler_generated'] )
		  end
	      of <_cor4> ->
		  _cor4
	      catch <_cor7,_cor6,_cor5> ->
		  case <_cor7,_cor6,_cor5> of
		    %% Line 104
		    <'throw',{'filter_fun_throw',Reason},_cor16> when 'true' ->
			%% Line 105
			call 'erlang':'throw'
			    (Reason)
		    %% Line 106
		    <'throw',InternalReason,_cor17> when 'true' ->
			%% Line 107
			{'error',InternalReason}
		    %% Line 108
		    <Class,Reason,_cor18> when 'true' ->
			let <_cor8> =
			    %% Line 109
			    call 'erlang':'get_stacktrace'
				()
			in  let <_cor9> =
				%% Line 109
				call 'erlang':'raise'
				    (Class, Reason, _cor8)
			    in  %% Line 109
				call 'erlang':'error'
				    (_cor9)
		  end
	  %% Line 111
	  <_cor19,_cor20,_cor21> when 'true' ->
	      %% Line 112
	      {'error','einval'}
	end
'do_foldl'/6 =
    %% Line 114
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <FilterFun,FilterAcc,[PF|Tail],Acc0,PrimZip,PrimZipOrig> when 'true' ->
	      %% Line 115
	      case PF of
		<{'primzip_file',F,GetInfo,GetBin}> when 'true' ->
		    %% Line 116
		    try
			apply FilterFun
			    ({F,GetInfo,GetBin}, FilterAcc)
		    of <_cor7> ->
			case _cor7 of
			  %% Line 117
			  <{Continue,Include,FilterAcc2}> when 'true' ->
			      let <Acc1> =
				  %% Line 118
				  apply 'include_acc'/3
				      (Include, PF, Acc0)
			      in  %% Line 119
				  case Continue of
				    %% Line 120
				    <'true'> when 'true' ->
					%% Line 121
					apply 'do_foldl'/6
					    (FilterFun, FilterAcc2, Tail, Acc1, PrimZip, PrimZipOrig)
				    %% Line 122
				    <'false'> when 'true' ->
					%% Line 123
					{'ok',FilterAcc2,PrimZipOrig}
				    ( <_cor9> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_cor9})
				      -| ['compiler_generated'] )
				  end
			  %% Line 125
			  <FilterRes> when 'true' ->
			      %% Line 126
			      call 'erlang':'throw'
				  ({'illegal_filter',FilterRes})
			end
		    catch <_cor13,_cor12,_cor11> ->
			case <_cor13,_cor12,_cor11> of
			  %% Line 128
			  <'throw',Reason,_cor24> when 'true' ->
			      %% Line 129
			      call 'erlang':'throw'
				  ({'filter_fun_throw',Reason})
			  ( <_cor13,_cor12,_cor11> when 'true' ->
				primop 'raise'
				    (_cor11, _cor12)
			    -| ['compiler_generated'] )
			end
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor6})
		  -| ['compiler_generated'] )
	      end
	  %% Line 131
	  <_X_FilterFun,FilterAcc,[],Acc,PrimZip,_X_PrimZipOrig> when 'true' ->
	      let <_rec0> =
		  %% Line 132
		  apply 'reverse'/1
		      (Acc)
	      in  %% Line 132
		  case PrimZip of
		    <{'primzip',_cor25,_cor26,_cor27,_cor28}> when 'true' ->
			let <_cor17> =
			    call 'erlang':'setelement'
				(2, PrimZip, _rec0)
			in  {'ok',FilterAcc,_cor17}
		    ( <_cor29> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','primzip'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  ( <_cor23,_cor22,_cor21,_cor20,_cor19,_cor18> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor23,_cor22,_cor21,_cor20,_cor19,_cor18})
		  -| [{'function_name',{'do_foldl',6}}] )
	    -| ['compiler_generated'] )
	end
'include_acc'/3 =
    %% Line 134
    fun (_cor2,_cor1,_cor0) ->
	%% Line 135
	case _cor2 of
	  %% Line 136
	  <'false'> when 'true' ->
	      _cor0
	  %% Line 138
	  <'true'> when 'true' ->
	      %% Line 139
	      [_cor1|_cor0]
	  %% Line 140
	  <{'true',Nick}> when 'true' ->
	      %% Line 141
	      case _cor1 of
		<{'primzip_file',_cor16,_cor17,_cor18}> when 'true' ->
		    let <_cor5> =
			call 'erlang':'setelement'
			    (2, _cor1, Nick)
		    in  [_cor5|_cor0]
		( <_cor19> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','primzip_file'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 142
	  <{'true',Nick,GetInfo,GetBin}> when 'true' ->
	      let <PF2> =
		  %% Line 143
		  {'primzip_file',Nick,GetInfo,GetBin}
	      in  %% Line 144
		  [PF2|_cor0]
	  %% Line 145
	  <List>
	      when call 'erlang':'is_list'
		    (_cor2) ->
	      let <Fun> =
		  %% Line 147
		  ( fun (_cor8,_cor7) ->
			apply 'include_acc'/3
			    (_cor8, _cor1, _cor7)
		    -| [{'id',{0,0,'-include_acc/3-fun-0-'}}] )
	      in  %% Line 148
		  apply 'lists_foldl'/3
		      (Fun, _cor0, List)
	  %% Line 149
	  <Bad> when 'true' ->
	      %% Line 150
	      call 'erlang':'throw'
		  ({'illegal_filter',Bad})
	end
'lists_foldl'/3 =
    %% Line 153
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <F,Accu,[Hd|Tail]> when 'true' ->
	      let <_cor3> =
		  %% Line 154
		  apply F
		      (Hd, Accu)
	      in  %% Line 154
		  apply 'lists_foldl'/3
		      (F, _cor3, Tail)
	  %% Line 155
	  <F,Accu,[]>
	      when call 'erlang':'is_function'
		    (F,
		     2) ->
	      %% Line 156
	      Accu
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'lists_foldl',3}}] )
	    -| ['compiler_generated'] )
	end
'close'/1 =
    %% Line 159
    fun (_cor0) ->
	case _cor0 of
	  <{'primzip',_cor2,Z,Input,In0}> when 'true' ->
	      do  %% Line 160
		  apply Input
		      ('close', In0)
		  %% Line 161
		  call 'zlib':'close'
		      (Z)
	  %% Line 162
	  <_cor3> when 'true' ->
	      %% Line 163
	      {'error','einval'}
	end
'get_zip_input'/1 =
    %% Line 165
    fun (_cor0) ->
	case _cor0 of
	  <{F,B}>
	      when let <_cor1> =
		    call 'erlang':'is_binary'
			(B)
		in  let <_cor2> =
			call 'erlang':'is_list'
			    (F)
		    in  call 'erlang':'and'
			    (_cor1, _cor2) ->
	      %% Line 166
	      ( 'binary_io'/2
		-| [{'id',{0,0,'-get_zip_input/1-fun-0-'}}] )
	  %% Line 167
	  <F>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      %% Line 168
	      ( 'prim_file_io'/2
		-| [{'id',{0,0,'-get_zip_input/1-fun-1-'}}] )
	  %% Line 169
	  <_cor4> when 'true' ->
	      %% Line 170
	      call 'erlang':'throw'
		  ('einval')
	end
'get_z_file'/4 =
    %% Line 173
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <F,Offset,ChunkSize,{'primzip',_cor26,Z,Input,In0}> when 'true' ->
	      %% Line 174
	      case apply Input
		       ({'pread',Offset,ChunkSize}, In0) of
		%% Line 175
		<{B = #{#<67324752>(32,1,'integer',['unsigned'|['little']]),
			#<%% Line 176
			  BLH>(%% Line 176
			       26,8,'binary',['unsigned'|['big']]),
			#<_cor27>(%% Line 176
				  'all',8,'binary',['unsigned'|['big']])}#,%% Line 176
									   _X_In1}> when 'true' ->
		    %% Line 180
		    case %% Line 181
			 apply 'local_file_header_from_bin'/2
			     (BLH, F) of
		      <{'local_file_header',_cor28,GPFlag,CompMethod,_cor29,_cor30,_cor31,_cor32,_cor33,FNLen,EFLen}> when 'true' ->
			  let <_cor16> =
			      %% Line 182
			      call 'erlang':'+'
				  (30, FNLen)
			  in  let <_cor17> =
				  %% Line 182
				  call 'erlang':'+'
				      (_cor16, EFLen)
			      in  let <_cor5> =
				      %% Line 183
				      apply 'offset_over_z_data_descriptor'/1
					  (GPFlag)
				  in  let <DataOffs> =
					  %% Line 183
					  call 'erlang':'+'
					      (_cor17, _cor5)
				      in  %% Line 184
					  case ( B
						 -| ['reuse_for_context'] ) of
					    %% Line 185
					    <#{#<_cor34>(DataOffs,8,'binary',['unsigned'|['big']]),
					       #<Data>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
						%% Line 186
						apply 'get_z_all'/4
						    (CompMethod, Data, Z, F)
					    %% Line 190
					    <_cor35> when 'true' ->
						%% Line 191
						call 'erlang':'throw'
						    ({'bad_local_file_offset',F})
					  end
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
		%% Line 193
		<_cor36> when 'true' ->
		    %% Line 194
		    call 'erlang':'throw'
			({'bad_local_file_header',F})
	      end
	  ( <_cor25,_cor24,_cor23,_cor22> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor25,_cor24,_cor23,_cor22})
		  -| [{'function_name',{'get_z_file',4}}] )
	    -| ['compiler_generated'] )
	end
'get_z_all'/4 =
    %% Line 201
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <8,Compressed,Z,_X_F> when 'true' ->
	      %% Line 202
	      case call 'zlib':'inflateInit'
		       (Z, -15) of
		<'ok'> when 'true' ->
		    let <Uncompressed> =
			%% Line 203
			call 'zlib':'inflate'
			    (Z, Compressed)
		    in  do  catch
				%% Line 205
				call 'zlib':'inflateEnd'
				    (Z)
			    %% Line 206
			    call 'erlang':'iolist_to_binary'
				(Uncompressed)
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 207
	  <0,Stored,_X_Z,_X_F> when 'true' ->
	      %% Line 210
	      Stored
	  %% Line 211
	  <CompMethod,_cor11,_cor12,F> when 'true' ->
	      %% Line 212
	      call 'erlang':'throw'
		  ({'unsupported_compression',F,CompMethod})
	end
'offset_over_z_data_descriptor'/1 =
    %% Line 215
    fun (_cor0) ->
	case _cor0 of
	  <GPFlag>
	      when try
		    let <_cor1> =
			call 'erlang':'band'
			    (_cor0, 8)
		    in  call 'erlang':'=:='
			    (_cor1, 8)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 216
	      12
	  %% Line 217
	  <_X_GPFlag> when 'true' ->
	      %% Line 218
	      0
	end
'get_central_dir'/3 =
    %% Line 221
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <PrimZip = {'primzip',_cor31,_cor32,Input,In0},FilterFun,FilterAcc> when 'true' ->
	      %% Line 222
	      case apply 'get_end_of_central_dir'/3
		       (In0, 22, Input) of
		<{B,In1}> when 'true' ->
		    %% Line 223
		    case apply 'eocd_and_comment_from_bin'/1
			     (B) of
		      <{EOCD,_X_BComment}> when 'true' ->
			  %% Line 224
			  ( case EOCD of
			      ( <( {'eocd',_cor33,_cor34,_cor35,_cor36,_cor37,_rec3,_cor38}
				   -| ['compiler_generated'] )> when 'true' ->
				    case apply Input
					     ({'pread',_rec3,_cor37}, In1) of
				      <{BCD,In2}> when 'true' ->
					  let <_cor25> =
					      %% Line 227
					      call 'erlang':'setelement'
						  (5, PrimZip, In2)
					  in  %% Line 228
					      case <> of
						%% Line 229
						<>
						    when call 'erlang':'=:='
							  (_cor36,
							   0) ->
						    %% Line 230
						    {_cor25,FilterAcc}
						%% Line 231
						<> when 'true' ->
						    %% Line 232
						    case apply 'get_file_header'/1
							     (BCD) of
						      <{F,Offset,CFH,BCDRest}> when 'true' ->
							  %% Line 233
							  apply 'get_cd_loop'/11
							      (_cor36, BCDRest, [], _cor25, F, Offset, CFH, _rec3, FilterFun, FilterAcc, PrimZip)
						      ( <_cor27> when 'true' ->
							    primop 'match_fail'
								({'badmatch',_cor27})
							-| ['compiler_generated'] )
						    end
					      end
				      ( <_cor16> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_cor16})
					-| ['compiler_generated'] )
				    end
				-| ['compiler_generated'] )
			      ( <_cor39> when 'true' ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {'badrecord','eocd'}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
		      ( <_cor11> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor11})
			-| ['compiler_generated'] )
		    end
		( <_cor10> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor10})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor30,_cor29,_cor28> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor30,_cor29,_cor28})
		  -| [{'function_name',{'get_central_dir',3}}] )
	    -| ['compiler_generated'] )
	end
'get_cd_loop'/11 =
    %% Line 236
    fun (_cor10,_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <NextF,NextOffset,NextCFH,BCDRest,Size> =
	    %% Line 238
	    case <> of
	      %% Line 239
	      <>
		  when call 'erlang':'=:='
			(_cor10,
			 1) ->
		  let <_cor11> =
		      %% Line 240
		      call 'erlang':'-'
			  (_cor3, _cor5)
		  in  %% Line 240
		      <'undefined','undefined','undefined','undefined',_cor11>
	      %% Line 241
	      <> when 'true' ->
		  %% Line 242
		  case apply 'get_file_header'/1
			   (_cor9) of
		    <{NextF0,NextOffset0,NextCFH0,BCDRest0}> when 'true' ->
			let <_cor13> =
			    %% Line 243
			    call 'erlang':'-'
				(NextOffset0, _cor5)
			in  %% Line 243
			    <NextF0,NextOffset0,NextCFH0,BCDRest0,_cor13>
		    ( <_cor12> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor12})
		      -| ['compiler_generated'] )
		  end
	    end
	in  let <GetInfo> =
		%% Line 246
		( fun () ->
		      apply 'cd_file_header_to_file_info'/3
			  (_cor6, _cor4, #{}#)
		  -| [{'id',{0,0,'-get_cd_loop/11-fun-0-'}}] )
	    in  let <GetBin> =
		    %% Line 247
		    ( fun () ->
			  apply 'get_z_file'/4
			      (_cor6, _cor5, Size, _cor7)
		      -| [{'id',{0,0,'-get_cd_loop/11-fun-1-'}}] )
		in  let <PF> =
			%% Line 248
			{'primzip_file',_cor6,GetInfo,GetBin}
		    in  %% Line 249
			try
			    apply _cor2
				({_cor6,GetInfo,GetBin}, _cor1)
			of <_cor19> ->
			    case _cor19 of
			      %% Line 250
			      <{Continue,Include,FilterAcc2}> when 'true' ->
				  let <_cor30> =
				      %% Line 252
				      case Include of
					%% Line 253
					<'false'> when 'true' ->
					    _cor8
					%% Line 255
					<'true'> when 'true' ->
					    %% Line 256
					    [PF|_cor8]
					%% Line 257
					<{'true',Nick}> when 'true' ->
					    %% Line 258
					    case PF of
					      <{'primzip_file',_cor54,_cor55,_cor56}> when 'true' ->
						  let <_cor22> =
						      call 'erlang':'setelement'
							  (2, PF, Nick)
						  in  [_cor22|_cor8]
					      ( <_cor57> when 'true' ->
						    ( call ( 'erlang'
							     -| ['compiler_generated'] ):( 'error'
											   -| ['compiler_generated'] )
							  (( {'badrecord','primzip_file'}
							     -| ['compiler_generated'] ))
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					    end
					%% Line 259
					<{'true',Nick,GI,GB}> when 'true' ->
					    let <PF2> =
						%% Line 260
						{'primzip_file',Nick,GI,GB}
					    in  %% Line 261
						[PF2|_cor8]
					%% Line 262
					<List>
					    when call 'erlang':'is_list'
						  (Include) ->
					    let <Fun> =
						%% Line 264
						( fun (_cor25,_cor24) ->
						      apply 'include_acc'/3
							  (_cor25, PF, _cor24)
						  -| [{'id',{0,0,'-get_cd_loop/11-fun-2-'}}] )
					    in  %% Line 265
						apply 'lists_foldl'/3
						    (Fun, _cor8, List)
					( <_cor29> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_cor29})
					  -| ['compiler_generated'] )
				      end
				  in  %% Line 267
				      case Continue of
					%% Line 268
					<'true'>
					    when call 'erlang':'>'
						  (_cor10,
						   1) ->
					    let <_cor32> =
						%% Line 269
						call 'erlang':'-'
						    (_cor10, 1)
					    in  %% Line 269
						apply 'get_cd_loop'/11
						    (_cor32, BCDRest, _cor30, _cor7, NextF, NextOffset, NextCFH, _cor3, _cor2, FilterAcc2, _cor0)
					%% Line 270
					<'true'> when 'true' ->
					    let <_rec9> =
						%% Line 271
						apply 'reverse'/1
						    (_cor30)
					    in  %% Line 271
						case _cor7 of
						  <{'primzip',_cor58,_cor59,_cor60,_cor61}> when 'true' ->
						      let <_cor36> =
							  call 'erlang':'setelement'
							      (2, _cor7, _rec9)
						      in  %% Line 272
							  {_cor36,FilterAcc2}
						  ( <_cor62> when 'true' ->
							( call ( 'erlang'
								 -| ['compiler_generated'] ):( 'error'
											       -| ['compiler_generated'] )
							      (( {'badrecord','primzip'}
								 -| ['compiler_generated'] ))
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						end
					%% Line 273
					<'false'> when 'true' ->
					    %% Line 274
					    {_cor0,FilterAcc2}
					( <_cor38> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_cor38})
					  -| ['compiler_generated'] )
				      end
			      %% Line 276
			      <FilterRes> when 'true' ->
				  %% Line 277
				  call 'erlang':'throw'
				      ({'illegal_filter',FilterRes})
			    end
			catch <_cor42,_cor41,_cor40> ->
			    case <_cor42,_cor41,_cor40> of
			      %% Line 279
			      <'throw',Reason,_cor63> when 'true' ->
				  %% Line 280
				  call 'erlang':'throw'
				      ({'filter_fun_throw',Reason})
			      ( <_cor42,_cor41,_cor40> when 'true' ->
				    primop 'raise'
					(_cor40, _cor41)
				-| ['compiler_generated'] )
			    end
'get_file_header'/1 =
    %% Line 283
    fun (_cor0) ->
	%% Line 285
	case _cor0 of
	  %% Line 286
	  <#{#<33639248>(32,1,'integer',['unsigned'|['little']]),
	     #<%% Line 287
	       B>(%% Line 287
		  42,8,'binary',['unsigned'|['big']]),
	     #<_cor24>(%% Line 288
		       'all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      let <CFH> =
		  %% Line 293
		  apply 'cd_file_header_from_bin'/1
		      (B)
	      in  %% Line 294
		  ( case CFH of
		      ( <( {'cd_file_header',_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_rec11,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40}
			   -| ['compiler_generated'] )> when 'true' ->
			    let <_cor14> =
				%% Line 297
				call 'erlang':'+'
				    (_rec11, _cor35)
			    in  let <ToGet> =
				    %% Line 297
				    call 'erlang':'+'
					(_cor14, _cor36)
				in  %% Line 299
				    case ( _cor0
					   -| ['reuse_for_context'] ) of
				      %% Line 300
				      <#{#<_cor74>(46,8,'binary',['unsigned'|['big']]),
					 #<%% Line 301
					   G>(ToGet,8,'binary',['unsigned'|['big']]),
					 #<%% Line 302
					   Rest>(%% Line 302
						 'all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
					  let <FileName> =
					      %% Line 307
					      apply 'get_filename_from_b2'/4
						  (G, _rec11, _cor35, _cor36)
					  in  %% Line 309
					      {FileName,_cor40,CFH,Rest}
				      %% Line 304
				      <_cor75> when 'true' ->
					  %% Line 305
					  call 'erlang':'throw'
					      ('bad_central_directory')
				    end
			-| ['compiler_generated'] )
		      ( <_cor41> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','cd_file_header'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  %% Line 290
	  <_cor25> when 'true' ->
	      %% Line 291
	      call 'erlang':'throw'
		  ('bad_central_directory')
	end
'get_filename_from_b2'/4 =
    %% Line 311
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 312
	case ( _cor3
	       -| ['reuse_for_context'] ) of
	  %% Line 313
	  <#{#<BFileName>(_cor2,8,'binary',['unsigned'|['big']]),
	     #<%% Line 314
	       _X_BExtra>(_cor1,8,'binary',['unsigned'|['big']]),
	     #<%% Line 315
	       _X_BComment>(_cor0,8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      %% Line 316
	      call 'erlang':'binary_to_list'
		  (BFileName)
	  %% Line 317
	  <_cor9> when 'true' ->
	      %% Line 318
	      call 'erlang':'throw'
		  ('bad_central_directory')
	end
'get_end_of_central_dir'/3 =
    %% Line 324
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <_X_In,Sz,_X_Input>
	      when call 'erlang':'>'
		    (Sz,
		     65535) ->
	      %% Line 325
	      call 'erlang':'throw'
		  ('bad_eocd')
	  %% Line 326
	  <In0,Sz,Input> when 'true' ->
	      let <_cor3> =
		  %% Line 327
		  call 'erlang':'-'
		      (Sz)
	      in  let <In1> =
		      %% Line 327
		      apply Input
			  ({'seek','eof',_cor3}, In0)
		  in  %% Line 328
		      case apply Input
			       ({'read',Sz}, In1) of
			<{B,In2}> when 'true' ->
			    %% Line 329
			    case apply 'find_eocd_header'/1
				     (B) of
			      %% Line 330
			      <'none'> when 'true' ->
				  let <_cor6> =
				      %% Line 331
				      call 'erlang':'+'
					  (Sz, Sz)
				  in  %% Line 331
				      apply 'get_end_of_central_dir'/3
					  (In2, _cor6, Input)
			      %% Line 332
			      <Header> when 'true' ->
				  %% Line 333
				  {Header,In2}
			    end
			( <_cor5> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor5})
			  -| ['compiler_generated'] )
		      end
	end
'find_eocd_header'/1 =
    %% Line 337
    fun (_cor0) ->
	case ( _cor0
	       -| ['reuse_for_context'] ) of
	  <#{#<101010256>(32,1,'integer',['unsigned'|['little']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      %% Line 338
	      Rest
	  %% Line 339
	  <#{#<_cor11>(8,1,'integer',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#>
	      when %% Line 340
		try
		    let <_cor9> =
			call 'erlang':'byte_size'
			    (Rest)
		    in  call 'erlang':'>'
			    (_cor9, 18)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 341
	      apply 'find_eocd_header'/1
		  (Rest)
	  %% Line 342
	  <_cor12> when 'true' ->
	      %% Line 343
	      'none'
	end
'prim_file_io'/2 =
    %% Line 346
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'file_info',F},_cor15> when 'true' ->
	      %% Line 347
	      case call 'prim_file':'read_file_info'
		       (F) of
		%% Line 348
		<{'ok',Info}> when 'true' ->
		    Info
		%% Line 349
		<{'error',E}> when 'true' ->
		    call 'erlang':'throw'
			(E)
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 351
	  <{'open',FN,Opts},_cor16> when 'true' ->
	      let <_cor4> =
		  catch
		      let <_cor3> =
			  %% Line 352
			  call 'erlang':'++'
			      (Opts, ['binary'])
		      in  %% Line 352
			  call 'prim_file':'open'
			      (FN, _cor3)
	      in  %% Line 352
		  case _cor4 of
		    %% Line 353
		    <{'ok',H}> when 'true' ->
			%% Line 354
			H
		    %% Line 355
		    <{'error',E}> when 'true' ->
			%% Line 356
			call 'erlang':'throw'
			    (E)
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor5})
		      -| ['compiler_generated'] )
		  end
	  %% Line 358
	  <{'read',N},H> when 'true' ->
	      %% Line 359
	      case call 'prim_file':'read'
		       (H, N) of
		%% Line 360
		<{'ok',B}> when 'true' ->
		    {B,H}
		%% Line 361
		<'eof'> when 'true' ->
		    {'eof',H}
		%% Line 362
		<{'error',E}> when 'true' ->
		    call 'erlang':'throw'
			(E)
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor6})
		  -| ['compiler_generated'] )
	      end
	  %% Line 364
	  <{'pread',Pos,N},H> when 'true' ->
	      %% Line 365
	      case call 'prim_file':'pread'
		       (H, Pos, N) of
		%% Line 366
		<{'ok',B}> when 'true' ->
		    {B,H}
		%% Line 367
		<'eof'> when 'true' ->
		    {'eof',H}
		%% Line 368
		<{'error',E}> when 'true' ->
		    call 'erlang':'throw'
			(E)
		( <_cor7> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor7})
		  -| ['compiler_generated'] )
	      end
	  %% Line 370
	  <{'seek',S,Pos},H> when 'true' ->
	      %% Line 371
	      case call 'prim_file':'position'
		       (H, {S,Pos}) of
		%% Line 372
		<{'ok',_X_NewPos}> when 'true' ->
		    H
		%% Line 373
		<{'error',Error}> when 'true' ->
		    call 'erlang':'throw'
			(Error)
		( <_cor8> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor8})
		  -| ['compiler_generated'] )
	      end
	  %% Line 375
	  <{'write',Data},H> when 'true' ->
	      %% Line 376
	      case call 'prim_file':'write'
		       (H, Data) of
		%% Line 377
		<'ok'> when 'true' ->
		    H
		%% Line 378
		<{'error',Error}> when 'true' ->
		    call 'erlang':'throw'
			(Error)
		( <_cor9> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor9})
		  -| ['compiler_generated'] )
	      end
	  %% Line 380
	  <{'pwrite',Pos,Data},H> when 'true' ->
	      %% Line 381
	      case call 'prim_file':'pwrite'
		       (H, Pos, Data) of
		%% Line 382
		<'ok'> when 'true' ->
		    H
		%% Line 383
		<{'error',Error}> when 'true' ->
		    call 'erlang':'throw'
			(Error)
		( <_cor10> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor10})
		  -| ['compiler_generated'] )
	      end
	  %% Line 385
	  <{'close',FN},H> when 'true' ->
	      %% Line 386
	      case call 'prim_file':'close'
		       (H) of
		%% Line 387
		<'ok'> when 'true' ->
		    FN
		%% Line 388
		<{'error',Error}> when 'true' ->
		    call 'erlang':'throw'
			(Error)
		( <_cor11> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor11})
		  -| ['compiler_generated'] )
	      end
	  %% Line 390
	  <'close',H> when 'true' ->
	      %% Line 391
	      apply 'prim_file_io'/2
		  ({'close','ok'}, H)
	  %% Line 392
	  <{'set_file_info',F,FI},H> when 'true' ->
	      %% Line 393
	      case call 'prim_file':'write_file_info'
		       (F, FI) of
		%% Line 394
		<'ok'> when 'true' ->
		    H
		%% Line 395
		<{'error',Error}> when 'true' ->
		    call 'erlang':'throw'
			(Error)
		( <_cor12> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor12})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor14,_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13})
		  -| [{'function_name',{'prim_file_io',2}}] )
	    -| ['compiler_generated'] )
	end
'binary_io'/2 =
    %% Line 398
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'pread',NewPos,N},{OldPos,B}> when 'true' ->
	      %% Line 399
	      case B of
		%% Line 400
		<#{#<_cor25>(NewPos,8,'binary',['unsigned'|['big']]),
		   #<Read>(N,8,'binary',['unsigned'|['big']]),
		   #<_X_Rest>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
		    let <_cor2> =
			%% Line 401
			call 'erlang':'+'
			    (NewPos, N)
		    in  %% Line 401
			{Read,{_cor2,B}}
		%% Line 402
		<_cor26> when 'true' ->
		    %% Line 403
		    {'eof',{OldPos,B}}
	      end
	  %% Line 405
	  <{'read',N},{Pos,B}>
	      when try
		    let <_cor4> =
			call 'erlang':'byte_size'
			    (B)
		    in  call 'erlang':'>='
			    (Pos, _cor4)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor5> =
		  %% Line 406
		  call 'erlang':'+'
		      (Pos, N)
	      in  %% Line 406
		  {'eof',{_cor5,B}}
	  %% Line 407
	  <{'read',N},{Pos,B}>
	      when try
		    let <_cor7> =
			call 'erlang':'+'
			    (Pos, N)
		    in  let <_cor6> =
			    call 'erlang':'byte_size'
				(B)
			in  call 'erlang':'>'
				(_cor7, _cor6)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 408
	      case B of
		%% Line 409
		<#{#<_cor27>(Pos,8,'binary',['unsigned'|['big']]),
		   #<Read>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
		    let <_cor8> =
			%% Line 410
			call 'erlang':'byte_size'
			    (B)
		    in  %% Line 410
			{Read,{_cor8,B}}
		%% Line 411
		<_cor28> when 'true' ->
		    %% Line 412
		    {'eof',{Pos,B}}
	      end
	  %% Line 414
	  <{'read',N},{Pos,B}> when 'true' ->
	      %% Line 415
	      case B of
		%% Line 416
		<#{#<_cor29>(Pos,8,'binary',['unsigned'|['big']]),
		   #<Read>(N,8,'binary',['unsigned'|['big']]),
		   #<_cor30>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
		    let <_cor10> =
			%% Line 417
			call 'erlang':'+'
			    (Pos, N)
		    in  %% Line 417
			{Read,{_cor10,B}}
		%% Line 418
		<_cor31> when 'true' ->
		    %% Line 419
		    {'eof',{Pos,B}}
	      end
	  %% Line 421
	  <{'seek','bof',Pos},{_X_OldPos,B}> when 'true' ->
	      %% Line 422
	      {Pos,B}
	  %% Line 423
	  <{'seek','cur',Pos},{OldPos,B}> when 'true' ->
	      let <_cor12> =
		  %% Line 424
		  call 'erlang':'+'
		      (OldPos, Pos)
	      in  %% Line 424
		  {_cor12,B}
	  %% Line 425
	  <{'seek','eof',Pos},{_X_OldPos,B}> when 'true' ->
	      let <_cor13> =
		  %% Line 426
		  call 'erlang':'byte_size'
		      (B)
	      in  let <_cor14> =
		      %% Line 426
		      call 'erlang':'+'
			  (_cor13, Pos)
		  in  %% Line 426
		      {_cor14,B}
	  %% Line 427
	  <{'file_info',{_X_Filename,B}},A> when 'true' ->
	      %% Line 428
	      apply 'binary_io'/2
		  ({'file_info',B}, A)
	  %% Line 429
	  <{'file_info',B},_cor32> when 'true' ->
	      let <Type,Size> =
		  %% Line 431
		  case <> of
		    %% Line 432
		    <>
			when call 'erlang':'is_binary'
			      (B) ->
			let <_cor15> =
			    call 'erlang':'byte_size'
				(B)
			in  <'regular',_cor15>
		    %% Line 433
		    <>
			when call 'erlang':'=:='
			      (B,
			       'directory') ->
			<'directory',0>
		    ( <> when 'true' ->
			  primop 'match_fail'
			      ('if_clause')
		      -| ['compiler_generated'] )
		  end
	      in  let <Now> =
		      %% Line 435
		      call 'erlang':'localtime'
			  ()
		  in  %% Line 436
		      {'file_info',Size,Type,'read_write',%% Line 437
							  Now,%% Line 437
							      Now,%% Line 437
								  Now,%% Line 438
								      0,%% Line 438
									1,%% Line 438
									  0,%% Line 439
									    0,%% Line 439
									      0,%% Line 439
										0,%% Line 439
										  0}
	  %% Line 440
	  <{'pwrite',Pos,Data},{OldPos,B}> when 'true' ->
	      let <_cor19> =
		  %% Line 441
		  apply 'pwrite_binary'/3
		      (B, Pos, Data)
	      in  %% Line 441
		  {OldPos,_cor19}
	  %% Line 442
	  <{'write',Data},{Pos,B}> when 'true' ->
	      let <_cor21> =
		  %% Line 443
		  call 'erlang':'iolist_size'
		      (Data)
	      in  let <_cor22> =
		      %% Line 443
		      call 'erlang':'+'
			  (Pos, _cor21)
		  in  let <_cor20> =
			  %% Line 443
			  apply 'pwrite_binary'/3
			      (B, Pos, Data)
		      in  %% Line 443
			  {_cor22,_cor20}
	  %% Line 444
	  <{'open',{_X_Filename,B},_X_Opts},_cor33> when 'true' ->
	      %% Line 445
	      {0,B}
	  %% Line 446
	  <{'open',B,_X_Opts},_cor34>
	      when call 'erlang':'is_binary'
		    (B) ->
	      %% Line 447
	      {0,B}
	  %% Line 448
	  <{'open',Filename,_X_Opts},_cor35>
	      when call 'erlang':'is_list'
		    (Filename) ->
	      %% Line 449
	      {0,#{}#}
	  %% Line 450
	  <'close',{_X_Pos,B}> when 'true' ->
	      %% Line 451
	      B
	  %% Line 452
	  <{'close',FN},{_X_Pos,B}> when 'true' ->
	      %% Line 453
	      {FN,B}
	  ( <_cor24,_cor23> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor24,_cor23})
		  -| [{'function_name',{'binary_io',2}}] )
	    -| ['compiler_generated'] )
	end
'eocd_and_comment_from_bin'/1 =
    %% Line 456
    fun (_cor0) ->
	case ( _cor0
	       -| ['reuse_for_context'] ) of
	  <#{#<DiskNum>(16,1,'integer',['unsigned'|['little']]),
	     #<%% Line 457
	       StartDiskNum>(%% Line 457
			     16,1,'integer',['unsigned'|['little']]),
	     #<%% Line 458
	       EntriesOnDisk>(%% Line 458
			      16,1,'integer',['unsigned'|['little']]),
	     #<%% Line 459
	       Entries>(%% Line 459
			16,1,'integer',['unsigned'|['little']]),
	     #<%% Line 460
	       Size>(%% Line 460
		     32,1,'integer',['unsigned'|['little']]),
	     #<%% Line 461
	       Offset>(%% Line 461
		       32,1,'integer',['unsigned'|['little']]),
	     #<%% Line 462
	       ZipCommentLength>(%% Line 462
				 16,1,'integer',['unsigned'|['little']]),
	     #<%% Line 463
	       Comment>(%% Line 462
			ZipCommentLength,8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      %% Line 464
	      {{'eocd',DiskNum,%% Line 465
			       StartDiskNum,%% Line 466
					    EntriesOnDisk,%% Line 467
							  Entries,%% Line 468
								  Size,%% Line 469
								       Offset,%% Line 470
									      ZipCommentLength},%% Line 471
												Comment}
	  %% Line 472
	  <_cor2> when 'true' ->
	      %% Line 473
	      call 'erlang':'throw'
		  ('bad_eocd')
	end
'cd_file_header_to_file_info'/3 =
    %% Line 476
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <FileName,%% Line 477
		    {'cd_file_header',_cor11,_cor12,_cor13,_cor14,%% Line 478
								  ModTime,%% Line 479
									  ModDate,_cor15,_cor16,UncompSize,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23},%% Line 480
																			     ExtraField>
	      when %% Line 480
		call 'erlang':'is_binary'
		    (ExtraField) ->
	      let <T> =
		  %% Line 481
		  apply 'dos_date_time_to_datetime'/2
		      (ModDate, ModTime)
	      in  let <_cor5> =
		      %% Line 483
		      case apply 'last'/1
			       (FileName) of
			%% Line 484
			<47> when 'true' ->
			    'directory'
			%% Line 485
			<_cor24> when 'true' ->
			    'regular'
		      end
		  in  let <FI> =
			  %% Line 487
			  {'file_info',UncompSize,_cor5,%% Line 489
							'read_write',%% Line 490
								     T,%% Line 491
								       T,%% Line 492
									 T,%% Line 493
									   54,%% Line 494
									      1,%% Line 495
										0,%% Line 496
										  0,%% Line 497
										    0,%% Line 498
										      0,%% Line 499
											0}
		      in  %% Line 500
			  apply 'add_extra_info'/2
			      (FI, ExtraField)
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'cd_file_header_to_file_info',3}}] )
	    -| ['compiler_generated'] )
	end
'add_extra_info'/2 =
    %% Line 508
    fun (_cor1,_cor0) ->
	_cor1
'dos_date_time_to_datetime'/2 =
    %% Line 530
    fun (_cor1,_cor0) ->
	%% Line 531
	case #{#<_cor0>(16,1,'integer',['unsigned'|['big']])}# of
	  <#{#<Hour>(5,1,'integer',['unsigned'|['big']]),
	     #<Min>(6,1,'integer',['unsigned'|['big']]),
	     #<Sec>(5,1,'integer',['unsigned'|['big']])}#> when 'true' ->
	      %% Line 532
	      case #{#<_cor1>(16,1,'integer',['unsigned'|['big']])}# of
		<#{#<YearFrom1980>(7,1,'integer',['unsigned'|['big']]),
		   #<Month>(4,1,'integer',['unsigned'|['big']]),
		   #<Day>(5,1,'integer',['unsigned'|['big']])}#> when 'true' ->
		    let <_cor4> =
			%% Line 533
			call 'erlang':'+'
			    (YearFrom1980, 1980)
		    in  %% Line 533
			{{_cor4,Month,Day},%% Line 534
					   {Hour,Min,Sec}}
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'cd_file_header_from_bin'/1 =
    %% Line 536
    fun (_cor0) ->
	case ( _cor0
	       -| ['reuse_for_context'] ) of
	  <#{#<VersionMadeBy>(16,1,'integer',['unsigned'|['little']]),
	     #<%% Line 537
	       VersionNeeded>(%% Line 537
			      16,1,'integer',['unsigned'|['little']]),
	     #<%% Line 538
	       GPFlag>(%% Line 538
		       16,1,'integer',['unsigned'|['little']]),
	     #<%% Line 539
	       CompMethod>(%% Line 539
			   16,1,'integer',['unsigned'|['little']]),
	     #<%% Line 540
	       LastModTime>(%% Line 540
			    16,1,'integer',['unsigned'|['little']]),
	     #<%% Line 541
	       LastModDate>(%% Line 541
			    16,1,'integer',['unsigned'|['little']]),
	     #<%% Line 542
	       CRC32>(%% Line 542
		      32,1,'integer',['unsigned'|['little']]),
	     #<%% Line 543
	       CompSize>(%% Line 543
			 32,1,'integer',['unsigned'|['little']]),
	     #<%% Line 544
	       UncompSize>(%% Line 544
			   32,1,'integer',['unsigned'|['little']]),
	     #<%% Line 545
	       FileNameLength>(%% Line 545
			       16,1,'integer',['unsigned'|['little']]),
	     #<%% Line 546
	       ExtraFieldLength>(%% Line 546
				 16,1,'integer',['unsigned'|['little']]),
	     #<%% Line 547
	       FileCommentLength>(%% Line 547
				  16,1,'integer',['unsigned'|['little']]),
	     #<%% Line 548
	       DiskNumStart>(%% Line 548
			     16,1,'integer',['unsigned'|['little']]),
	     #<%% Line 549
	       InternalAttr>(%% Line 549
			     16,1,'integer',['unsigned'|['little']]),
	     #<%% Line 550
	       ExternalAttr>(%% Line 550
			     32,1,'integer',['unsigned'|['little']]),
	     #<%% Line 551
	       LocalHeaderOffset>(%% Line 551
				  32,1,'integer',['unsigned'|['little']])}#> when 'true' ->
	      %% Line 552
	      {'cd_file_header',VersionMadeBy,%% Line 553
					      VersionNeeded,%% Line 554
							    GPFlag,%% Line 555
								   CompMethod,%% Line 556
									      LastModTime,%% Line 557
											  LastModDate,%% Line 558
												      CRC32,%% Line 559
													    CompSize,%% Line 560
														     UncompSize,%% Line 561
																FileNameLength,%% Line 562
																	       ExtraFieldLength,%% Line 563
																				FileCommentLength,%% Line 564
																						  DiskNumStart,%% Line 565
																							       InternalAttr,%% Line 566
																									    ExternalAttr,%% Line 567
																											 LocalHeaderOffset}
	  %% Line 568
	  <_cor2> when 'true' ->
	      %% Line 569
	      call 'erlang':'throw'
		  ('bad_cd_file_header')
	end
'local_file_header_from_bin'/2 =
    %% Line 571
    fun (_cor1,_cor0) ->
	case <( _cor1
		-| ['reuse_for_context'] ),_cor0> of
	  <#{#<VersionNeeded>(16,1,'integer',['unsigned'|['little']]),
	     #<%% Line 572
	       GPFlag>(%% Line 572
		       16,1,'integer',['unsigned'|['little']]),
	     #<%% Line 573
	       CompMethod>(%% Line 573
			   16,1,'integer',['unsigned'|['little']]),
	     #<%% Line 574
	       LastModTime>(%% Line 574
			    16,1,'integer',['unsigned'|['little']]),
	     #<%% Line 575
	       LastModDate>(%% Line 575
			    16,1,'integer',['unsigned'|['little']]),
	     #<%% Line 576
	       CRC32>(%% Line 576
		      32,1,'integer',['unsigned'|['little']]),
	     #<%% Line 577
	       CompSize>(%% Line 577
			 32,1,'integer',['unsigned'|['little']]),
	     #<%% Line 578
	       UncompSize>(%% Line 578
			   32,1,'integer',['unsigned'|['little']]),
	     #<%% Line 579
	       FileNameLength>(%% Line 579
			       16,1,'integer',['unsigned'|['little']]),
	     #<%% Line 580
	       ExtraFieldLength>(%% Line 580
				 16,1,'integer',['unsigned'|['little']])}#,%% Line 581
									   _X_F> when 'true' ->
	      %% Line 582
	      {'local_file_header',VersionNeeded,%% Line 583
						 GPFlag,%% Line 584
							CompMethod,%% Line 585
								   LastModTime,%% Line 586
									       LastModDate,%% Line 587
											   CRC32,%% Line 588
												 CompSize,%% Line 589
													  UncompSize,%% Line 590
														     FileNameLength,%% Line 591
																    ExtraFieldLength}
	  %% Line 592
	  <_cor4,F> when 'true' ->
	      %% Line 593
	      call 'erlang':'throw'
		  ({'bad_local_file_header',F})
	end
'split_iolist'/2 =
    %% Line 597
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <B,Pos>
	      when call 'erlang':'is_binary'
		    (B) ->
	      %% Line 598
	      call 'erlang':'split_binary'
		  (B, Pos)
	  %% Line 599
	  <L,Pos>
	      when call 'erlang':'is_list'
		    (L) ->
	      %% Line 600
	      apply 'splitter'/3
		  ([], L, Pos)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'split_iolist',2}}] )
	    -| ['compiler_generated'] )
	end
'splitter'/3 =
    %% Line 602
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Left,Right,0> when 'true' ->
	      %% Line 603
	      {Left,Right}
	  %% Line 604
	  <#{}#,Right,RelPos> when 'true' ->
	      %% Line 605
	      apply 'split_iolist'/2
		  (Right, RelPos)
	  %% Line 606
	  <Left,[A|Right],RelPos>
	      when let <_cor3> =
		    call 'erlang':'is_list'
			(A)
		in  let <_cor4> =
			call 'erlang':'is_binary'
			    (A)
		    in  call 'erlang':'or'
			    (_cor3, _cor4) ->
	      let <Sz> =
		  %% Line 607
		  call 'erlang':'iolist_size'
		      (A)
	      in  %% Line 608
		  case call 'erlang':'>'
			   (Sz, RelPos) of
		    %% Line 609
		    <'true'> when 'true' ->
			%% Line 610
			case apply 'split_iolist'/2
				 (A, RelPos) of
			  <{Leftx,Rightx}> when 'true' ->
			      %% Line 611
			      {[Left|Leftx],[Rightx|[Right|[]]]}
			  ( <_cor6> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor6})
			    -| ['compiler_generated'] )
			end
		    %% Line 612
		    <_cor13> when 'true' ->
			let <_cor7> =
			    %% Line 613
			    call 'erlang':'-'
				(RelPos, Sz)
			in  %% Line 613
			    apply 'splitter'/3
				([Left|A], Right, _cor7)
		  end
	  %% Line 615
	  <Left,[A|Right],RelPos>
	      when call 'erlang':'is_integer'
		    (A) ->
	      let <_cor9> =
		  %% Line 616
		  call 'erlang':'-'
		      (RelPos, 1)
	      in  %% Line 616
		  apply 'splitter'/3
		      ([Left|[A|[]]], Right, _cor9)
	  %% Line 617
	  <Left,Right,RelPos>
	      when call 'erlang':'is_binary'
		    (Right) ->
	      %% Line 618
	      apply 'splitter'/3
		  (Left, [Right|[]], RelPos)
	  ( <_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10})
		  -| [{'function_name',{'splitter',3}}] )
	    -| ['compiler_generated'] )
	end
'skip_iolist'/2 =
    %% Line 620
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <B,Pos>
	      when call 'erlang':'is_binary'
		    (B) ->
	      %% Line 621
	      case ( B
		     -| ['reuse_for_context'] ) of
		%% Line 622
		<#{#<_cor5>(Pos,8,'binary',['unsigned'|['big']]),
		   #<Bin>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
		    Bin
		%% Line 623
		<_cor6> when 'true' ->
		    #{}#
	      end
	  %% Line 625
	  <L,Pos>
	      when call 'erlang':'is_list'
		    (L) ->
	      %% Line 626
	      apply 'skipper'/2
		  (L, Pos)
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'skip_iolist',2}}] )
	    -| ['compiler_generated'] )
	end
'skipper'/2 =
    %% Line 628
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Right,0> when 'true' ->
	      %% Line 629
	      Right
	  %% Line 630
	  <[A|Right],RelPos>
	      when let <_cor2> =
		    call 'erlang':'is_list'
			(A)
		in  let <_cor3> =
			call 'erlang':'is_binary'
			    (A)
		    in  call 'erlang':'or'
			    (_cor2, _cor3) ->
	      let <Sz> =
		  %% Line 631
		  call 'erlang':'iolist_size'
		      (A)
	      in  %% Line 632
		  case call 'erlang':'>'
			   (Sz, RelPos) of
		    %% Line 633
		    <'true'> when 'true' ->
			let <Rightx> =
			    %% Line 634
			    apply 'skip_iolist'/2
				(A, RelPos)
			in  %% Line 635
			    [Rightx|[Right|[]]]
		    %% Line 636
		    <_cor11> when 'true' ->
			let <_cor6> =
			    %% Line 637
			    call 'erlang':'-'
				(RelPos, Sz)
			in  %% Line 637
			    apply 'skip_iolist'/2
				(Right, _cor6)
		  end
	  %% Line 639
	  <[A|Right],RelPos>
	      when call 'erlang':'is_integer'
		    (A) ->
	      let <_cor8> =
		  %% Line 640
		  call 'erlang':'-'
		      (RelPos, 1)
	      in  %% Line 640
		  apply 'skip_iolist'/2
		      (Right, _cor8)
	  ( <_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9})
		  -| [{'function_name',{'skipper',2}}] )
	    -| ['compiler_generated'] )
	end
'pwrite_iolist'/3 =
    %% Line 642
    fun (_cor2,_cor1,_cor0) ->
	%% Line 643
	case apply 'split_iolist'/2
		 (_cor2, _cor1) of
	  <{Left,Right}> when 'true' ->
	      let <Sz> =
		  %% Line 644
		  call 'erlang':'iolist_size'
		      (_cor0)
	      in  let <R> =
		      %% Line 645
		      apply 'skip_iolist'/2
			  (Right, Sz)
		  in  %% Line 646
		      [Left|[_cor0|R]]
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'pwrite_binary'/3 =
    %% Line 648
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 649
	    apply 'pwrite_iolist'/3
		(_cor2, _cor1, _cor0)
	in  %% Line 649
	    call 'erlang':'iolist_to_binary'
		(_cor3)
'reverse'/1 =
    %% Line 651
    fun (_cor0) ->
	%% Line 652
	apply 'reverse'/2
	    (_cor0, [])
'reverse'/2 =
    %% Line 654
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[H|T],Y> when 'true' ->
	      %% Line 655
	      apply 'reverse'/2
		  (T, [H|Y])
	  %% Line 656
	  <[],X> when 'true' ->
	      %% Line 657
	      X
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'reverse',2}}] )
	    -| ['compiler_generated'] )
	end
'last'/1 =
    %% Line 659
    fun (_cor0) ->
	case _cor0 of
	  <[E|Es]> when 'true' ->
	      apply 'last'/2
		  (E, Es)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'last',1}}] )
	    -| ['compiler_generated'] )
	end
'last'/2 =
    %% Line 661
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <_cor4,[E|Es]> when 'true' ->
	      apply 'last'/2
		  (E, Es)
	  %% Line 662
	  <E,[]> when 'true' ->
	      E
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'last',2}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('prim_zip')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('prim_zip', _cor0)
end