module 'erlang' ['abs'/1,
		 'adler32'/1,
		 'adler32'/2,
		 'adler32_combine'/3,
		 'alloc_info'/1,
		 'alloc_sizes'/1,
		 'append'/2,
		 'append_element'/2,
		 'apply'/2,
		 'apply'/3,
		 'atom_to_binary'/2,
		 'atom_to_list'/1,
		 'await_proc_exit'/3,
		 'await_sched_wall_time_modifications'/2,
		 'binary_part'/2,
		 'binary_part'/3,
		 'binary_to_atom'/2,
		 'binary_to_existing_atom'/2,
		 'binary_to_float'/1,
		 'binary_to_integer'/1,
		 'binary_to_integer'/2,
		 'binary_to_list'/1,
		 'binary_to_list'/3,
		 'binary_to_term'/1,
		 'binary_to_term'/2,
		 'bit_size'/1,
		 'bitsize'/1,
		 'bitstring_to_list'/1,
		 'bump_reductions'/1,
		 'byte_size'/1,
		 'call_on_load_function'/1,
		 'cancel_timer'/1,
		 'check_old_code'/1,
		 'check_process_code'/2,
		 'check_process_code'/3,
		 'crasher'/6,
		 'crc32'/1,
		 'crc32'/2,
		 'crc32_combine'/3,
		 'date'/0,
		 'decode_packet'/3,
		 'delay_trap'/2,
		 'delete_element'/2,
		 'delete_module'/1,
		 'demonitor'/1,
		 'demonitor'/2,
		 'dexit'/2,
		 'dgroup_leader'/2,
		 'disconnect_node'/1,
		 'display'/1,
		 'display_nl'/0,
		 'display_string'/1,
		 'dist_exit'/3,
		 'dlink'/1,
		 'dmonitor_node'/3,
		 'dmonitor_p'/2,
		 'dsend'/2,
		 'dsend'/3,
		 'dt_append_vm_tag_data'/1,
		 'dt_get_tag'/0,
		 'dt_get_tag_data'/0,
		 'dt_prepend_vm_tag_data'/1,
		 'dt_put_tag'/1,
		 'dt_restore_tag'/1,
		 'dt_spread_tag'/1,
		 'dunlink'/1,
		 'element'/2,
		 'erase'/0,
		 'erase'/1,
		 'error'/1,
		 'error'/2,
		 'exit'/1,
		 'exit'/2,
		 'external_size'/1,
		 'external_size'/2,
		 'finish_after_on_load'/2,
		 'finish_loading'/1,
		 'float'/1,
		 'float_to_binary'/1,
		 'float_to_binary'/2,
		 'float_to_list'/1,
		 'float_to_list'/2,
		 'flush_monitor_message'/2,
		 'format_cpu_topology'/1,
		 'fun_info'/1,
		 'fun_info'/2,
		 'fun_to_list'/1,
		 'function_exported'/3,
		 'garbage_collect'/0,
		 'garbage_collect'/1,
		 'garbage_collect'/2,
		 'garbage_collect_message_area'/0,
		 'gather_gc_info_result'/1,
		 'gather_sched_wall_time_result'/1,
		 'get'/0,
		 'get'/1,
		 'get_cookie'/0,
		 'get_keys'/1,
		 'get_module_info'/1,
		 'get_module_info'/2,
		 'get_stacktrace'/0,
		 'group_leader'/0,
		 'group_leader'/2,
		 'halt'/0,
		 'halt'/1,
		 'halt'/2,
		 'hash'/2,
		 'hd'/1,
		 'hibernate'/3,
		 'insert_element'/3,
		 'integer_to_binary'/1,
		 'integer_to_binary'/2,
		 'integer_to_list'/1,
		 'integer_to_list'/2,
		 'iolist_size'/1,
		 'iolist_to_binary'/1,
		 'is_alive'/0,
		 'is_atom'/1,
		 'is_binary'/1,
		 'is_bitstring'/1,
		 'is_boolean'/1,
		 'is_builtin'/3,
		 'is_float'/1,
		 'is_function'/1,
		 'is_function'/2,
		 'is_integer'/1,
		 'is_list'/1,
		 'is_map'/1,
		 'is_number'/1,
		 'is_pid'/1,
		 'is_port'/1,
		 'is_process_alive'/1,
		 'is_record'/2,
		 'is_record'/3,
		 'is_reference'/1,
		 'is_tuple'/1,
		 'length'/1,
		 'link'/1,
		 'list_to_atom'/1,
		 'list_to_binary'/1,
		 'list_to_bitstring'/1,
		 'list_to_existing_atom'/1,
		 'list_to_float'/1,
		 'list_to_integer'/1,
		 'list_to_integer'/2,
		 'list_to_pid'/1,
		 'list_to_tuple'/1,
		 'load_module'/2,
		 'load_nif'/2,
		 'loaded'/0,
		 'localtime'/0,
		 'localtime_to_universaltime'/1,
		 'localtime_to_universaltime'/2,
		 'make_fun'/3,
		 'make_ref'/0,
		 'make_tuple'/2,
		 'make_tuple'/3,
		 'map_size'/1,
		 'match_spec_test'/3,
		 'max'/2,
		 'md5'/1,
		 'md5_final'/1,
		 'md5_init'/0,
		 'md5_update'/2,
		 'memory'/0,
		 'memory'/1,
		 'min'/2,
		 'module_info'/0,
		 'module_info'/1,
		 'module_loaded'/1,
		 'monitor'/2,
		 'monitor_node'/2,
		 'monitor_node'/3,
		 'nif_error'/1,
		 'nif_error'/2,
		 'node'/0,
		 'node'/1,
		 'nodes'/0,
		 'nodes'/1,
		 'now'/0,
		 'open_port'/2,
		 'phash'/2,
		 'phash2'/1,
		 'phash2'/2,
		 'pid_to_list'/1,
		 'port_call'/2,
		 'port_call'/3,
		 'port_close'/1,
		 'port_command'/2,
		 'port_command'/3,
		 'port_connect'/2,
		 'port_control'/3,
		 'port_get_data'/1,
		 'port_info'/1,
		 'port_info'/2,
		 'port_set_data'/2,
		 'port_to_list'/1,
		 'ports'/0,
		 'posixtime_to_universaltime'/1,
		 'pre_loaded'/0,
		 'prepare_loading'/2,
		 'process_display'/2,
		 'process_flag'/2,
		 'process_flag'/3,
		 'process_info'/1,
		 'process_info'/2,
		 'processes'/0,
		 'purge_module'/1,
		 'put'/2,
		 'raise'/3,
		 'read_timer'/1,
		 'ref_to_list'/1,
		 'register'/2,
		 'registered'/0,
		 'resume_process'/1,
		 'round'/1,
		 'self'/0,
		 'send'/2,
		 'send'/3,
		 'send_after'/3,
		 'send_nosuspend'/2,
		 'send_nosuspend'/3,
		 'seq_trace'/2,
		 'seq_trace_info'/1,
		 'seq_trace_print'/1,
		 'seq_trace_print'/2,
		 'set_cookie'/2,
		 'set_cpu_topology'/1,
		 'setelement'/3,
		 'setnode'/2,
		 'setnode'/3,
		 'size'/1,
		 'spawn'/1,
		 'spawn'/2,
		 'spawn'/3,
		 'spawn'/4,
		 'spawn_link'/1,
		 'spawn_link'/2,
		 'spawn_link'/3,
		 'spawn_link'/4,
		 'spawn_monitor'/1,
		 'spawn_monitor'/3,
		 'spawn_opt'/1,
		 'spawn_opt'/2,
		 'spawn_opt'/3,
		 'spawn_opt'/4,
		 'spawn_opt'/5,
		 'split_binary'/2,
		 'start_timer'/3,
		 'statistics'/1,
		 'subtract'/2,
		 'suspend_process'/1,
		 'suspend_process'/2,
		 'system_flag'/2,
		 'system_info'/1,
		 'system_monitor'/0,
		 'system_monitor'/1,
		 'system_monitor'/2,
		 'system_profile'/0,
		 'system_profile'/2,
		 'term_to_binary'/1,
		 'term_to_binary'/2,
		 'throw'/1,
		 'time'/0,
		 'tl'/1,
		 'trace'/3,
		 'trace_delivered'/1,
		 'trace_info'/2,
		 'trace_pattern'/2,
		 'trace_pattern'/3,
		 'trunc'/1,
		 'tuple_size'/1,
		 'tuple_to_list'/1,
		 'universaltime'/0,
		 'universaltime_to_localtime'/1,
		 'universaltime_to_posixtime'/1,
		 'unlink'/1,
		 'unregister'/1,
		 'whereis'/1,
		 'yield'/0]
    attributes [%% Line 51
		'deprecated' =
		    %% Line 51
		    [{'hash',2}],
		%% Line 60
		'export_type' =
		    %% Line 60
		    [{'timestamp',0}],
		%% Line 62
		'type' =
		    %% Line 62
		    [{'ext_binary',{'type',62,'binary',[]},[]}],
		%% Line 63
		'type' =
		    %% Line 63
		    [{'timestamp',{'type',63,'tuple',[{'ann_type',63,[{'var',63,'MegaSecs'}|[{'type',63,'non_neg_integer',[]}]]}|[{'ann_type',64,[{'var',64,'Secs'}|[{'type',64,'non_neg_integer',[]}]]}|[{'ann_type',65,[{'var',65,'MicroSecs'}|[{'type',65,'non_neg_integer',[]}]]}]]]},[]}],
		%% Line 155
		'type' =
		    %% Line 155
		    [{'fun_info_item',{'type',156,'union',[{'atom',156,'arity'}|[{'atom',157,'env'}|[{'atom',158,'index'}|[{'atom',159,'name'}|[{'atom',160,'module'}|[{'atom',161,'new_index'}|[{'atom',162,'new_uniq'}|[{'atom',163,'pid'}|[{'atom',164,'type'}|[{'atom',165,'uniq'}]]]]]]]]]]},[]}],
		%% Line 167
		'type' =
		    %% Line 167
		    [{'seq_trace_info',{'type',168,'union',[{'atom',168,'send'}|[{'atom',169,'receive'}|[{'atom',170,'print'}|[{'atom',171,'timestamp'}|[{'atom',172,'label'}|[{'atom',173,'serial'}]]]]]]},[]}],
		%% Line 175
		'type' =
		    %% Line 175
		    [{'seq_trace_info_returns',{'type',176,'union',[{'type',176,'tuple',[{'type',176,'seq_trace_info',[]}|[{'type',176,'union',[{'type',176,'non_neg_integer',[]}|[{'type',177,'boolean',[]}|[{'type',178,'tuple',[{'type',178,'non_neg_integer',[]}|[{'type',178,'non_neg_integer',[]}]]}]]]}]]}|[{'type',179,'nil',[]}]]},[]}],
		%% Line 181
		'type' =
		    %% Line 181
		    [{'system_profile_option',{'type',182,'union',[{'atom',182,'exclusive'}|[{'atom',183,'runnable_ports'}|[{'atom',184,'runnable_procs'}|[{'atom',185,'scheduler'}]]]]},[]}],
		%% Line 187
		'type' =
		    %% Line 187
		    [{'system_monitor_option',{'type',188,'union',[{'atom',188,'busy_port'}|[{'atom',189,'busy_dist_port'}|[{'type',190,'tuple',[{'atom',190,'long_gc'}|[{'type',190,'non_neg_integer',[]}]]}|[{'type',191,'tuple',[{'atom',191,'long_schedule'}|[{'type',191,'non_neg_integer',[]}]]}|[{'type',192,'tuple',[{'atom',192,'large_heap'}|[{'type',192,'non_neg_integer',[]}]]}]]]]]},[]}],
		%% Line 195
		'type' =
		    %% Line 195
		    [{'raise_stacktrace',{'type',196,'union',[{'type',196,'list',[{'type',196,'union',[{'type',196,'tuple',[{'type',196,'module',[]}|[{'type',196,'atom',[]}|[{'type',196,'union',[{'type',196,'arity',[]}|[{'type',196,'list',[{'type',196,'term',[]}]}]]}]]]}|[{'type',197,'tuple',[{'type',197,'function',[]}|[{'type',197,'list',[{'type',197,'term',[]}]}]]}]]}]}|[{'type',198,'list',[{'type',198,'union',[{'type',198,'tuple',[{'type',198,'module',[]}|[{'type',198,'atom',[]}|[{'type',198,'union',[{'type',198,'arity',[]}|[{'type',198,'list',[{'type',198,'term',[]}]}]]}|[{'type',198,'list',[{'type',198,'tuple',[{'type',198,'atom',[]}|[{'type',198,'term',[]}]]}]}]]]]}|[{'type',199,'tuple',[{'type',199,'function',[]}|[{'type',199,'list',[{'type',199,'term',[]}]}|[{'type',199,'list',[{'type',199,'tuple',[{'type',199,'atom',[]}|[{'type',199,'term',[]}]]}]}]]]}]]}]}]]},[]}],
		%% Line 201
		'type' =
		    %% Line 201
		    [{'bitstring_list',{'type',202,'maybe_improper_list',[{'type',202,'union',[{'type',202,'byte',[]}|[{'type',202,'bitstring',[]}|[{'type',202,'bitstring_list',[]}]]]}|[{'type',202,'union',[{'type',202,'bitstring',[]}|[{'type',202,'nil',[]}]]}]]},[]}],
		%% Line 204
		'type' =
		    %% Line 204
		    [{'trace_flag',{'type',205,'union',[{'atom',205,'all'}|[{'atom',206,'send'}|[{'atom',207,'receive'}|[{'atom',208,'procs'}|[{'atom',209,'call'}|[{'atom',210,'silent'}|[{'atom',211,'return_to'}|[{'atom',212,'running'}|[{'atom',213,'exiting'}|[{'atom',214,'garbage_collection'}|[{'atom',215,'timestamp'}|[{'atom',216,'cpu_timestamp'}|[{'atom',217,'arity'}|[{'atom',218,'set_on_spawn'}|[{'atom',219,'set_on_first_spawn'}|[{'atom',220,'set_on_link'}|[{'atom',221,'set_on_first_link'}|[{'type',222,'tuple',[{'atom',222,'tracer'}|[{'type',222,'union',[{'type',222,'pid',[]}|[{'type',222,'port',[]}]]}]]}]]]]]]]]]]]]]]]]]]},[]}],
		%% Line 224
		'type' =
		    %% Line 224
		    [{'trace_info_item_result',{'type',225,'union',[{'type',225,'tuple',[{'atom',225,'traced'}|[{'type',225,'union',[{'atom',225,'global'}|[{'atom',225,'local'}|[{'atom',225,'false'}|[{'atom',225,'undefined'}]]]]}]]}|[{'type',226,'tuple',[{'atom',226,'match_spec'}|[{'type',226,'union',[{'type',226,'trace_match_spec',[]}|[{'atom',226,'false'}|[{'atom',226,'undefined'}]]]}]]}|[{'type',227,'tuple',[{'atom',227,'meta'}|[{'type',227,'union',[{'type',227,'pid',[]}|[{'type',227,'port',[]}|[{'atom',227,'false'}|[{'atom',227,'undefined'}|[{'type',227,'nil',[]}]]]]]}]]}|[{'type',228,'tuple',[{'atom',228,'meta_match_spec'}|[{'type',228,'union',[{'type',228,'trace_match_spec',[]}|[{'atom',228,'false'}|[{'atom',228,'undefined'}]]]}]]}|[{'type',229,'tuple',[{'atom',229,'call_count'}|[{'type',229,'union',[{'type',229,'non_neg_integer',[]}|[{'type',229,'boolean',[]}|[{'atom',229,'undefined'}]]]}]]}|[{'type',230,'tuple',[{'atom',230,'call_time'}|[{'type',230,'union',[{'type',230,'list',[{'type',230,'tuple',[{'type',230,'pid',[]}|[{'type',230,'non_neg_integer',[]}|[{'type',231,'non_neg_integer',[]}|[{'type',231,'non_neg_integer',[]}]]]]}]}|[{'type',231,'boolean',[]}|[{'atom',231,'undefined'}]]]}]]}]]]]]]},[]}],
		%% Line 233
		'type' =
		    %% Line 233
		    [{'trace_info_flag',{'type',234,'union',[{'atom',234,'send'}|[{'atom',235,'receive'}|[{'atom',236,'set_on_spawn'}|[{'atom',237,'call'}|[{'atom',238,'return_to'}|[{'atom',239,'procs'}|[{'atom',240,'set_on_first_spawn'}|[{'atom',241,'set_on_link'}|[{'atom',242,'running'}|[{'atom',243,'garbage_collection'}|[{'atom',244,'timestamp'}|[{'atom',245,'arity'}]]]]]]]]]]]]},[]}],
		%% Line 247
		'type' =
		    %% Line 247
		    [{'trace_info_return',{'type',248,'union',[{'atom',248,'undefined'}|[{'type',249,'tuple',[{'atom',249,'flags'}|[{'type',249,'list',[{'type',249,'trace_info_flag',[]}]}]]}|[{'type',250,'tuple',[{'atom',250,'tracer'}|[{'type',250,'union',[{'type',250,'pid',[]}|[{'type',250,'port',[]}|[{'type',250,'nil',[]}]]]}]]}|[{'type',251,'trace_info_item_result',[]}|[{'type',252,'tuple',[{'atom',252,'all'}|[{'type',252,'union',[{'type',252,'list',[{'type',252,'trace_info_item_result',[]}]}|[{'atom',252,'false'}|[{'atom',252,'undefined'}]]]}]]}]]]]]},[]}],
		%% Line 256
		'spec' =
		    %% Line 256
		    [{{'erlang','adler32',1},[{'type',256,'bounded_fun',[{'type',256,'fun',[{'type',256,'product',[{'var',256,'Data'}]}|[{'type',256,'non_neg_integer',[]}]]}|[[{'type',257,'constraint',[{'atom',257,'is_subtype'}|[[{'var',257,'Data'}|[{'type',257,'iodata',[]}]]]]}]]]}]}],
		%% Line 262
		'spec' =
		    %% Line 262
		    [{{'erlang','adler32',2},[{'type',262,'bounded_fun',[{'type',262,'fun',[{'type',262,'product',[{'var',262,'OldAdler'}|[{'var',262,'Data'}]]}|[{'type',262,'non_neg_integer',[]}]]}|[[{'type',263,'constraint',[{'atom',263,'is_subtype'}|[[{'var',263,'OldAdler'}|[{'type',263,'non_neg_integer',[]}]]]]}|[{'type',264,'constraint',[{'atom',264,'is_subtype'}|[[{'var',264,'Data'}|[{'type',264,'iodata',[]}]]]]}]]]]}]}],
		%% Line 269
		'spec' =
		    %% Line 269
		    [{{'erlang','adler32_combine',3},[{'type',269,'bounded_fun',[{'type',269,'fun',[{'type',269,'product',[{'var',269,'FirstAdler'}|[{'var',269,'SecondAdler'}|[{'var',269,'SecondSize'}]]]}|[{'type',269,'non_neg_integer',[]}]]}|[[{'type',270,'constraint',[{'atom',270,'is_subtype'}|[[{'var',270,'FirstAdler'}|[{'type',270,'non_neg_integer',[]}]]]]}|[{'type',271,'constraint',[{'atom',271,'is_subtype'}|[[{'var',271,'SecondAdler'}|[{'type',271,'non_neg_integer',[]}]]]]}|[{'type',272,'constraint',[{'atom',272,'is_subtype'}|[[{'var',272,'SecondSize'}|[{'type',272,'non_neg_integer',[]}]]]]}]]]]]}]}],
		%% Line 277
		'spec' =
		    %% Line 277
		    [{{'erlang','append_element',2},[{'type',277,'bounded_fun',[{'type',277,'fun',[{'type',277,'product',[{'var',277,'Tuple1'}|[{'var',277,'Term'}]]}|[{'var',277,'Tuple2'}]]}|[[{'type',278,'constraint',[{'atom',278,'is_subtype'}|[[{'var',278,'Tuple1'}|[{'type',278,'tuple','any'}]]]]}|[{'type',279,'constraint',[{'atom',279,'is_subtype'}|[[{'var',279,'Tuple2'}|[{'type',279,'tuple','any'}]]]]}|[{'type',280,'constraint',[{'atom',280,'is_subtype'}|[[{'var',280,'Term'}|[{'type',280,'term',[]}]]]]}]]]]]}]}],
		%% Line 285
		'spec' =
		    %% Line 285
		    [{{'atom_to_binary',2},[{'type',285,'bounded_fun',[{'type',285,'fun',[{'type',285,'product',[{'var',285,'Atom'}|[{'var',285,'Encoding'}]]}|[{'type',285,'binary',[]}]]}|[[{'type',286,'constraint',[{'atom',286,'is_subtype'}|[[{'var',286,'Atom'}|[{'type',286,'atom',[]}]]]]}|[{'type',287,'constraint',[{'atom',287,'is_subtype'}|[[{'var',287,'Encoding'}|[{'type',287,'union',[{'atom',287,'latin1'}|[{'atom',287,'unicode'}|[{'atom',287,'utf8'}]]]}]]]]}]]]]}]}],
		%% Line 292
		'spec' =
		    %% Line 292
		    [{{'atom_to_list',1},[{'type',292,'bounded_fun',[{'type',292,'fun',[{'type',292,'product',[{'var',292,'Atom'}]}|[{'type',292,'string',[]}]]}|[[{'type',293,'constraint',[{'atom',293,'is_subtype'}|[[{'var',293,'Atom'}|[{'type',293,'atom',[]}]]]]}]]]}]}],
		%% Line 299
		'spec' =
		    %% Line 299
		    [{{'binary_part',2},[{'type',299,'bounded_fun',[{'type',299,'fun',[{'type',299,'product',[{'var',299,'Subject'}|[{'var',299,'PosLen'}]]}|[{'type',299,'binary',[]}]]}|[[{'type',300,'constraint',[{'atom',300,'is_subtype'}|[[{'var',300,'Subject'}|[{'type',300,'binary',[]}]]]]}|[{'type',301,'constraint',[{'atom',301,'is_subtype'}|[[{'var',301,'PosLen'}|[{'type',301,'tuple',[{'ann_type',301,[{'var',301,'Start'}|[{'type',301,'non_neg_integer',[]}]]}|[{'ann_type',301,[{'var',301,'Length'}|[{'type',301,'integer',[]}]]}]]}]]]]}]]]]}]}],
		%% Line 307
		'spec' =
		    %% Line 307
		    [{{'binary_part',3},[{'type',307,'bounded_fun',[{'type',307,'fun',[{'type',307,'product',[{'var',307,'Subject'}|[{'var',307,'Start'}|[{'var',307,'Length'}]]]}|[{'type',307,'binary',[]}]]}|[[{'type',308,'constraint',[{'atom',308,'is_subtype'}|[[{'var',308,'Subject'}|[{'type',308,'binary',[]}]]]]}|[{'type',309,'constraint',[{'atom',309,'is_subtype'}|[[{'var',309,'Start'}|[{'type',309,'non_neg_integer',[]}]]]]}|[{'type',310,'constraint',[{'atom',310,'is_subtype'}|[[{'var',310,'Length'}|[{'type',310,'integer',[]}]]]]}]]]]]}]}],
		%% Line 315
		'spec' =
		    %% Line 315
		    [{{'binary_to_atom',2},[{'type',315,'bounded_fun',[{'type',315,'fun',[{'type',315,'product',[{'var',315,'Binary'}|[{'var',315,'Encoding'}]]}|[{'type',315,'atom',[]}]]}|[[{'type',316,'constraint',[{'atom',316,'is_subtype'}|[[{'var',316,'Binary'}|[{'type',316,'binary',[]}]]]]}|[{'type',317,'constraint',[{'atom',317,'is_subtype'}|[[{'var',317,'Encoding'}|[{'type',317,'union',[{'atom',317,'latin1'}|[{'atom',317,'unicode'}|[{'atom',317,'utf8'}]]]}]]]]}]]]]}]}],
		%% Line 322
		'spec' =
		    %% Line 322
		    [{{'binary_to_existing_atom',2},[{'type',322,'bounded_fun',[{'type',322,'fun',[{'type',322,'product',[{'var',322,'Binary'}|[{'var',322,'Encoding'}]]}|[{'type',322,'atom',[]}]]}|[[{'type',323,'constraint',[{'atom',323,'is_subtype'}|[[{'var',323,'Binary'}|[{'type',323,'binary',[]}]]]]}|[{'type',324,'constraint',[{'atom',324,'is_subtype'}|[[{'var',324,'Encoding'}|[{'type',324,'union',[{'atom',324,'latin1'}|[{'atom',324,'unicode'}|[{'atom',324,'utf8'}]]]}]]]]}]]]]}]}],
		%% Line 329
		'spec' =
		    %% Line 329
		    [{{'binary_to_float',1},[{'type',329,'bounded_fun',[{'type',329,'fun',[{'type',329,'product',[{'var',329,'Binary'}]}|[{'type',329,'float',[]}]]}|[[{'type',330,'constraint',[{'atom',330,'is_subtype'}|[[{'var',330,'Binary'}|[{'type',330,'binary',[]}]]]]}]]]}]}],
		%% Line 335
		'spec' =
		    %% Line 335
		    [{{'binary_to_integer',1},[{'type',335,'bounded_fun',[{'type',335,'fun',[{'type',335,'product',[{'var',335,'Binary'}]}|[{'type',335,'integer',[]}]]}|[[{'type',336,'constraint',[{'atom',336,'is_subtype'}|[[{'var',336,'Binary'}|[{'type',336,'binary',[]}]]]]}]]]}]}],
		%% Line 341
		'spec' =
		    %% Line 341
		    [{{'binary_to_integer',2},[{'type',341,'bounded_fun',[{'type',341,'fun',[{'type',341,'product',[{'var',341,'Binary'}|[{'var',341,'Base'}]]}|[{'type',341,'integer',[]}]]}|[[{'type',342,'constraint',[{'atom',342,'is_subtype'}|[[{'var',342,'Binary'}|[{'type',342,'binary',[]}]]]]}|[{'type',343,'constraint',[{'atom',343,'is_subtype'}|[[{'var',343,'Base'}|[{'type',343,'range',[{'integer',343,2}|[{'integer',343,36}]]}]]]]}]]]]}]}],
		%% Line 348
		'spec' =
		    %% Line 348
		    [{{'binary_to_list',1},[{'type',348,'bounded_fun',[{'type',348,'fun',[{'type',348,'product',[{'var',348,'Binary'}]}|[{'type',348,'list',[{'type',348,'byte',[]}]}]]}|[[{'type',349,'constraint',[{'atom',349,'is_subtype'}|[[{'var',349,'Binary'}|[{'type',349,'binary',[]}]]]]}]]]}]}],
		%% Line 354
		'spec' =
		    %% Line 354
		    [{{'binary_to_list',3},[{'type',354,'bounded_fun',[{'type',354,'fun',[{'type',354,'product',[{'var',354,'Binary'}|[{'var',354,'Start'}|[{'var',354,'Stop'}]]]}|[{'type',354,'list',[{'type',354,'byte',[]}]}]]}|[[{'type',355,'constraint',[{'atom',355,'is_subtype'}|[[{'var',355,'Binary'}|[{'type',355,'binary',[]}]]]]}|[{'type',356,'constraint',[{'atom',356,'is_subtype'}|[[{'var',356,'Start'}|[{'type',356,'pos_integer',[]}]]]]}|[{'type',357,'constraint',[{'atom',357,'is_subtype'}|[[{'var',357,'Stop'}|[{'type',357,'pos_integer',[]}]]]]}]]]]]}]}],
		%% Line 362
		'spec' =
		    %% Line 362
		    [{{'binary_to_term',1},[{'type',362,'bounded_fun',[{'type',362,'fun',[{'type',362,'product',[{'var',362,'Binary'}]}|[{'type',362,'term',[]}]]}|[[{'type',363,'constraint',[{'atom',363,'is_subtype'}|[[{'var',363,'Binary'}|[{'type',363,'ext_binary',[]}]]]]}]]]}]}],
		%% Line 368
		'spec' =
		    %% Line 368
		    [{{'binary_to_term',2},[{'type',368,'bounded_fun',[{'type',368,'fun',[{'type',368,'product',[{'var',368,'Binary'}|[{'var',368,'Opts'}]]}|[{'type',368,'term',[]}]]}|[[{'type',369,'constraint',[{'atom',369,'is_subtype'}|[[{'var',369,'Binary'}|[{'type',369,'ext_binary',[]}]]]]}|[{'type',370,'constraint',[{'atom',370,'is_subtype'}|[[{'var',370,'Opts'}|[{'type',370,'list',[{'atom',370,'safe'}]}]]]]}]]]]}]}],
		%% Line 376
		'spec' =
		    %% Line 376
		    [{{'bit_size',1},[{'type',376,'bounded_fun',[{'type',376,'fun',[{'type',376,'product',[{'var',376,'Bitstring'}]}|[{'type',376,'non_neg_integer',[]}]]}|[[{'type',377,'constraint',[{'atom',377,'is_subtype'}|[[{'var',377,'Bitstring'}|[{'type',377,'bitstring',[]}]]]]}]]]}]}],
		%% Line 382
		'spec' =
		    %% Line 382
		    [{{'bitsize',1},[{'type',382,'bounded_fun',[{'type',382,'fun',[{'type',382,'product',[{'var',382,'P1'}]}|[{'type',382,'non_neg_integer',[]}]]}|[[{'type',383,'constraint',[{'atom',383,'is_subtype'}|[[{'var',383,'P1'}|[{'type',383,'bitstring',[]}]]]]}]]]}]}],
		%% Line 388
		'spec' =
		    %% Line 388
		    [{{'bitstring_to_list',1},[{'type',388,'bounded_fun',[{'type',388,'fun',[{'type',388,'product',[{'var',388,'Bitstring'}]}|[{'type',388,'list',[{'type',388,'union',[{'type',388,'byte',[]}|[{'type',388,'bitstring',[]}]]}]}]]}|[[{'type',389,'constraint',[{'atom',389,'is_subtype'}|[[{'var',389,'Bitstring'}|[{'type',389,'bitstring',[]}]]]]}]]]}]}],
		%% Line 394
		'spec' =
		    %% Line 394
		    [{{'erlang','bump_reductions',1},[{'type',394,'bounded_fun',[{'type',394,'fun',[{'type',394,'product',[{'var',394,'Reductions'}]}|[{'atom',394,'true'}]]}|[[{'type',395,'constraint',[{'atom',395,'is_subtype'}|[[{'var',395,'Reductions'}|[{'type',395,'pos_integer',[]}]]]]}]]]}]}],
		%% Line 401
		'spec' =
		    %% Line 401
		    [{{'byte_size',1},[{'type',401,'bounded_fun',[{'type',401,'fun',[{'type',401,'product',[{'var',401,'Bitstring'}]}|[{'type',401,'non_neg_integer',[]}]]}|[[{'type',402,'constraint',[{'atom',402,'is_subtype'}|[[{'var',402,'Bitstring'}|[{'type',402,'bitstring',[]}]]]]}]]]}]}],
		%% Line 407
		'spec' =
		    %% Line 407
		    [{{'erlang','call_on_load_function',1},[{'type',407,'bounded_fun',[{'type',407,'fun',[{'type',407,'product',[{'var',407,'P1'}]}|[{'type',407,'term',[]}]]}|[[{'type',408,'constraint',[{'atom',408,'is_subtype'}|[[{'var',408,'P1'}|[{'type',408,'atom',[]}]]]]}]]]}]}],
		%% Line 413
		'spec' =
		    %% Line 413
		    [{{'erlang','cancel_timer',1},[{'type',413,'bounded_fun',[{'type',413,'fun',[{'type',413,'product',[{'var',413,'TimerRef'}]}|[{'type',413,'union',[{'var',413,'Time'}|[{'atom',413,'false'}]]}]]}|[[{'type',414,'constraint',[{'atom',414,'is_subtype'}|[[{'var',414,'TimerRef'}|[{'type',414,'reference',[]}]]]]}|[{'type',415,'constraint',[{'atom',415,'is_subtype'}|[[{'var',415,'Time'}|[{'type',415,'non_neg_integer',[]}]]]]}]]]]}]}],
		%% Line 420
		'spec' =
		    %% Line 420
		    [{{'check_old_code',1},[{'type',420,'bounded_fun',[{'type',420,'fun',[{'type',420,'product',[{'var',420,'Module'}]}|[{'type',420,'boolean',[]}]]}|[[{'type',421,'constraint',[{'atom',421,'is_subtype'}|[[{'var',421,'Module'}|[{'type',421,'module',[]}]]]]}]]]}]}],
		%% Line 426
		'spec' =
		    %% Line 426
		    [{{'check_process_code',2},[{'type',426,'bounded_fun',[{'type',426,'fun',[{'type',426,'product',[{'var',426,'Pid'}|[{'var',426,'Module'}]]}|[{'var',426,'CheckResult'}]]}|[[{'type',427,'constraint',[{'atom',427,'is_subtype'}|[[{'var',427,'Pid'}|[{'type',427,'pid',[]}]]]]}|[{'type',428,'constraint',[{'atom',428,'is_subtype'}|[[{'var',428,'Module'}|[{'type',428,'module',[]}]]]]}|[{'type',429,'constraint',[{'atom',429,'is_subtype'}|[[{'var',429,'CheckResult'}|[{'type',429,'boolean',[]}]]]]}]]]]]}]}],
		%% Line 438
		'spec' =
		    %% Line 438
		    [{{'check_process_code',3},[{'type',438,'bounded_fun',[{'type',438,'fun',[{'type',438,'product',[{'var',438,'Pid'}|[{'var',438,'Module'}|[{'var',438,'OptionList'}]]]}|[{'type',438,'union',[{'var',438,'CheckResult'}|[{'atom',438,'async'}]]}]]}|[[{'type',439,'constraint',[{'atom',439,'is_subtype'}|[[{'var',439,'Pid'}|[{'type',439,'pid',[]}]]]]}|[{'type',440,'constraint',[{'atom',440,'is_subtype'}|[[{'var',440,'Module'}|[{'type',440,'module',[]}]]]]}|[{'type',441,'constraint',[{'atom',441,'is_subtype'}|[[{'var',441,'RequestId'}|[{'type',441,'term',[]}]]]]}|[{'type',442,'constraint',[{'atom',442,'is_subtype'}|[[{'var',442,'Option'}|[{'type',442,'union',[{'type',442,'tuple',[{'atom',442,'async'}|[{'var',442,'RequestId'}]]}|[{'type',442,'tuple',[{'atom',442,'allow_gc'}|[{'type',442,'boolean',[]}]]}]]}]]]]}|[{'type',443,'constraint',[{'atom',443,'is_subtype'}|[[{'var',443,'OptionList'}|[{'type',443,'list',[{'var',443,'Option'}]}]]]]}|[{'type',444,'constraint',[{'atom',444,'is_subtype'}|[[{'var',444,'CheckResult'}|[{'type',444,'union',[{'type',444,'boolean',[]}|[{'atom',444,'aborted'}]]}]]]]}]]]]]]]]}]}],
		%% Line 493
		'spec' =
		    %% Line 493
		    [{{'erlang','crc32',1},[{'type',493,'bounded_fun',[{'type',493,'fun',[{'type',493,'product',[{'var',493,'Data'}]}|[{'type',493,'non_neg_integer',[]}]]}|[[{'type',494,'constraint',[{'atom',494,'is_subtype'}|[[{'var',494,'Data'}|[{'type',494,'iodata',[]}]]]]}]]]}]}],
		%% Line 499
		'spec' =
		    %% Line 499
		    [{{'erlang','crc32',2},[{'type',499,'bounded_fun',[{'type',499,'fun',[{'type',499,'product',[{'var',499,'OldCrc'}|[{'var',499,'Data'}]]}|[{'type',499,'non_neg_integer',[]}]]}|[[{'type',500,'constraint',[{'atom',500,'is_subtype'}|[[{'var',500,'OldCrc'}|[{'type',500,'non_neg_integer',[]}]]]]}|[{'type',501,'constraint',[{'atom',501,'is_subtype'}|[[{'var',501,'Data'}|[{'type',501,'iodata',[]}]]]]}]]]]}]}],
		%% Line 506
		'spec' =
		    %% Line 506
		    [{{'erlang','crc32_combine',3},[{'type',506,'bounded_fun',[{'type',506,'fun',[{'type',506,'product',[{'var',506,'FirstCrc'}|[{'var',506,'SecondCrc'}|[{'var',506,'SecondSize'}]]]}|[{'type',506,'non_neg_integer',[]}]]}|[[{'type',507,'constraint',[{'atom',507,'is_subtype'}|[[{'var',507,'FirstCrc'}|[{'type',507,'non_neg_integer',[]}]]]]}|[{'type',508,'constraint',[{'atom',508,'is_subtype'}|[[{'var',508,'SecondCrc'}|[{'type',508,'non_neg_integer',[]}]]]]}|[{'type',509,'constraint',[{'atom',509,'is_subtype'}|[[{'var',509,'SecondSize'}|[{'type',509,'non_neg_integer',[]}]]]]}]]]]]}]}],
		%% Line 514
		'spec' =
		    %% Line 514
		    [{{'date',0},[{'type',514,'bounded_fun',[{'type',514,'fun',[{'type',514,'product',[]}|[{'var',514,'Date'}]]}|[[{'type',515,'constraint',[{'atom',515,'is_subtype'}|[[{'var',515,'Date'}|[{'remote_type',515,[{'atom',515,'calendar'}|[{'atom',515,'date'}|[[]]]]}]]]]}]]]}]}],
		%% Line 520
		'spec' =
		    %% Line 520
		    [{{'erlang','decode_packet',3},[{'type',520,'bounded_fun',[{'type',520,'fun',[{'type',520,'product',[{'var',520,'Type'}|[{'var',520,'Bin'}|[{'var',520,'Options'}]]]}|[{'type',521,'union',[{'type',521,'tuple',[{'atom',521,'ok'}|[{'var',521,'Packet'}|[{'var',521,'Rest'}]]]}|[{'type',522,'tuple',[{'atom',522,'more'}|[{'var',522,'Length'}]]}|[{'type',523,'tuple',[{'atom',523,'error'}|[{'var',523,'Reason'}]]}]]]}]]}|[[{'type',524,'constraint',[{'atom',524,'is_subtype'}|[[{'var',524,'Type'}|[{'type',524,'union',[{'atom',524,'raw'}|[{'integer',524,0}|[{'integer',524,1}|[{'integer',524,2}|[{'integer',524,4}|[{'atom',524,'asn1'}|[{'atom',524,'cdr'}|[{'atom',524,'sunrm'}|[{'atom',524,'fcgi'}|[{'atom',525,'tpkt'}|[{'atom',525,'line'}|[{'atom',525,'http'}|[{'atom',525,'http_bin'}|[{'atom',525,'httph'}|[{'atom',525,'httph_bin'}]]]]]]]]]]]]]]]}]]]]}|[{'type',526,'constraint',[{'atom',526,'is_subtype'}|[[{'var',526,'Bin'}|[{'type',526,'binary',[]}]]]]}|[{'type',527,'constraint',[{'atom',527,'is_subtype'}|[[{'var',527,'Options'}|[{'type',527,'list',[{'var',527,'Opt'}]}]]]]}|[{'type',528,'constraint',[{'atom',528,'is_subtype'}|[[{'var',528,'Opt'}|[{'type',528,'union',[{'type',528,'tuple',[{'atom',528,'packet_size'}|[{'type',528,'non_neg_integer',[]}]]}|[{'type',529,'tuple',[{'atom',529,'line_length'}|[{'type',529,'non_neg_integer',[]}]]}]]}]]]]}|[{'type',530,'constraint',[{'atom',530,'is_subtype'}|[[{'var',530,'Packet'}|[{'type',530,'union',[{'type',530,'binary',[]}|[{'var',530,'HttpPacket'}]]}]]]]}|[{'type',531,'constraint',[{'atom',531,'is_subtype'}|[[{'var',531,'Rest'}|[{'type',531,'binary',[]}]]]]}|[{'type',532,'constraint',[{'atom',532,'is_subtype'}|[[{'var',532,'Length'}|[{'type',532,'union',[{'type',532,'non_neg_integer',[]}|[{'atom',532,'undefined'}]]}]]]]}|[{'type',533,'constraint',[{'atom',533,'is_subtype'}|[[{'var',533,'Reason'}|[{'type',533,'term',[]}]]]]}|[{'type',534,'constraint',[{'atom',534,'is_subtype'}|[[{'var',534,'HttpPacket'}|[{'type',534,'union',[{'var',534,'HttpRequest'}|[{'var',535,'HttpResponse'}|[{'var',536,'HttpHeader'}|[{'atom',537,'http_eoh'}|[{'var',538,'HttpError'}]]]]]}]]]]}|[{'type',539,'constraint',[{'atom',539,'is_subtype'}|[[{'var',539,'HttpRequest'}|[{'type',539,'tuple',[{'atom',539,'http_request'}|[{'var',539,'HttpMethod'}|[{'var',539,'HttpUri'}|[{'var',539,'HttpVersion'}]]]]}]]]]}|[{'type',540,'constraint',[{'atom',540,'is_subtype'}|[[{'var',540,'HttpResponse'}|[{'type',540,'tuple',[{'atom',540,'http_response'}|[{'var',540,'HttpVersion'}|[{'type',540,'integer',[]}|[{'var',540,'HttpString'}]]]]}]]]]}|[{'type',541,'constraint',[{'atom',541,'is_subtype'}|[[{'var',541,'HttpHeader'}|[{'type',541,'tuple',[{'atom',541,'http_header'}|[{'type',542,'integer',[]}|[{'var',543,'HttpField'}|[{'ann_type',544,[{'var',544,'Reserved'}|[{'type',544,'term',[]}]]}|[{'ann_type',545,[{'var',545,'Value'}|[{'var',545,'HttpString'}]]}]]]]]}]]]]}|[{'type',546,'constraint',[{'atom',546,'is_subtype'}|[[{'var',546,'HttpError'}|[{'type',546,'tuple',[{'atom',546,'http_error'}|[{'var',546,'HttpString'}]]}]]]]}|[{'type',547,'constraint',[{'atom',547,'is_subtype'}|[[{'var',547,'HttpMethod'}|[{'type',547,'union',[{'atom',547,'OPTIONS'}|[{'atom',547,'GET'}|[{'atom',547,'HEAD'}|[{'atom',547,'POST'}|[{'atom',547,'PUT'}|[{'atom',547,'DELETE'}|[{'atom',548,'TRACE'}|[{'var',548,'HttpString'}]]]]]]]]}]]]]}|[{'type',549,'constraint',[{'atom',549,'is_subtype'}|[[{'var',549,'HttpUri'}|[{'type',549,'union',[{'atom',549,'*'}|[{'type',550,'tuple',[{'atom',550,'absoluteURI'}|[{'type',551,'union',[{'atom',551,'http'}|[{'atom',551,'https'}]]}|[{'ann_type',552,[{'var',552,'Host'}|[{'var',552,'HttpString'}]]}|[{'ann_type',553,[{'var',553,'Port'}|[{'type',553,'union',[{'remote_type',553,[{'atom',553,'inet'}|[{'atom',553,'port_number'}|[[]]]]}|[{'atom',553,'undefined'}]]}]]}|[{'ann_type',554,[{'var',554,'Path'}|[{'var',554,'HttpString'}]]}]]]]]}|[{'type',555,'tuple',[{'atom',555,'scheme'}|[{'ann_type',555,[{'var',555,'Scheme'}|[{'var',555,'HttpString'}]]}|[{'var',555,'HttpString'}]]]}|[{'type',556,'tuple',[{'atom',556,'abs_path'}|[{'var',556,'HttpString'}]]}|[{'var',557,'HttpString'}]]]]]}]]]]}|[{'type',558,'constraint',[{'atom',558,'is_subtype'}|[[{'var',558,'HttpVersion'}|[{'type',558,'tuple',[{'ann_type',558,[{'var',558,'Major'}|[{'type',558,'non_neg_integer',[]}]]}|[{'ann_type',558,[{'var',558,'Minor'}|[{'type',558,'non_neg_integer',[]}]]}]]}]]]]}|[{'type',559,'constraint',[{'atom',559,'is_subtype'}|[[{'var',559,'HttpField'}|[{'type',559,'union',[{'atom',559,'Cache-Control'}|[{'atom',560,'Connection'}|[{'atom',561,'Date'}|[{'atom',562,'Pragma'}|[{'atom',563,'Transfer-Encoding'}|[{'atom',564,'Upgrade'}|[{'atom',565,'Via'}|[{'atom',566,'Accept'}|[{'atom',567,'Accept-Charset'}|[{'atom',568,'Accept-Encoding'}|[{'atom',569,'Accept-Language'}|[{'atom',570,'Authorization'}|[{'atom',571,'From'}|[{'atom',572,'Host'}|[{'atom',573,'If-Modified-Since'}|[{'atom',574,'If-Match'}|[{'atom',575,'If-None-Match'}|[{'atom',576,'If-Range'}|[{'atom',577,'If-Unmodified-Since'}|[{'atom',578,'Max-Forwards'}|[{'atom',579,'Proxy-Authorization'}|[{'atom',580,'Range'}|[{'atom',581,'Referer'}|[{'atom',582,'User-Agent'}|[{'atom',583,'Age'}|[{'atom',584,'Location'}|[{'atom',585,'Proxy-Authenticate'}|[{'atom',586,'Public'}|[{'atom',587,'Retry-After'}|[{'atom',588,'Server'}|[{'atom',589,'Vary'}|[{'atom',590,'Warning'}|[{'atom',591,'Www-Authenticate'}|[{'atom',592,'Allow'}|[{'atom',593,'Content-Base'}|[{'atom',594,'Content-Encoding'}|[{'atom',595,'Content-Language'}|[{'atom',596,'Content-Length'}|[{'atom',597,'Content-Location'}|[{'atom',598,'Content-Md5'}|[{'atom',599,'Content-Range'}|[{'atom',600,'Content-Type'}|[{'atom',601,'Etag'}|[{'atom',602,'Expires'}|[{'atom',603,'Last-Modified'}|[{'atom',604,'Accept-Ranges'}|[{'atom',605,'Set-Cookie'}|[{'atom',606,'Set-Cookie2'}|[{'atom',607,'X-Forwarded-For'}|[{'atom',608,'Cookie'}|[{'atom',609,'Keep-Alive'}|[{'atom',610,'Proxy-Connection'}|[{'var',611,'HttpString'}]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}]]]]}|[{'type',612,'constraint',[{'atom',612,'is_subtype'}|[[{'var',612,'HttpString'}|[{'type',612,'union',[{'type',612,'string',[]}|[{'type',612,'binary',[]}]]}]]]]}]]]]]]]]]]]]]]]]]]]]}]}],
		%% Line 617
		'spec' =
		    %% Line 617
		    [{{'erlang','delete_element',2},[{'type',617,'bounded_fun',[{'type',617,'fun',[{'type',617,'product',[{'var',617,'Index'}|[{'var',617,'Tuple1'}]]}|[{'var',617,'Tuple2'}]]}|[[{'type',618,'constraint',[{'atom',618,'is_subtype'}|[[{'var',618,'Index'}|[{'type',618,'pos_integer',[]}]]]]}|[{'type',619,'constraint',[{'atom',619,'is_subtype'}|[[{'var',619,'Tuple1'}|[{'type',619,'tuple','any'}]]]]}|[{'type',620,'constraint',[{'atom',620,'is_subtype'}|[[{'var',620,'Tuple2'}|[{'type',620,'tuple','any'}]]]]}]]]]]}]}],
		%% Line 625
		'spec' =
		    %% Line 625
		    [{{'delete_module',1},[{'type',625,'bounded_fun',[{'type',625,'fun',[{'type',625,'product',[{'var',625,'Module'}]}|[{'type',625,'union',[{'atom',625,'true'}|[{'atom',625,'undefined'}]]}]]}|[[{'type',626,'constraint',[{'atom',626,'is_subtype'}|[[{'var',626,'Module'}|[{'type',626,'module',[]}]]]]}]]]}]}],
		%% Line 631
		'spec' =
		    %% Line 631
		    [{{'demonitor',1},[{'type',631,'bounded_fun',[{'type',631,'fun',[{'type',631,'product',[{'var',631,'MonitorRef'}]}|[{'atom',631,'true'}]]}|[[{'type',632,'constraint',[{'atom',632,'is_subtype'}|[[{'var',632,'MonitorRef'}|[{'type',632,'reference',[]}]]]]}]]]}]}],
		%% Line 637
		'spec' =
		    %% Line 637
		    [{{'demonitor',2},[{'type',637,'bounded_fun',[{'type',637,'fun',[{'type',637,'product',[{'var',637,'MonitorRef'}|[{'var',637,'OptionList'}]]}|[{'type',637,'boolean',[]}]]}|[[{'type',638,'constraint',[{'atom',638,'is_subtype'}|[[{'var',638,'MonitorRef'}|[{'type',638,'reference',[]}]]]]}|[{'type',639,'constraint',[{'atom',639,'is_subtype'}|[[{'var',639,'OptionList'}|[{'type',639,'list',[{'var',639,'Option'}]}]]]]}|[{'type',640,'constraint',[{'atom',640,'is_subtype'}|[[{'var',640,'Option'}|[{'type',640,'union',[{'atom',640,'flush'}|[{'atom',640,'info'}]]}]]]]}]]]]]}]}],
		%% Line 645
		'spec' =
		    %% Line 645
		    [{{'erlang','display',1},[{'type',645,'bounded_fun',[{'type',645,'fun',[{'type',645,'product',[{'var',645,'Term'}]}|[{'atom',645,'true'}]]}|[[{'type',646,'constraint',[{'atom',646,'is_subtype'}|[[{'var',646,'Term'}|[{'type',646,'term',[]}]]]]}]]]}]}],
		%% Line 651
		'spec' =
		    %% Line 651
		    [{{'erlang','display_nl',0},[{'type',651,'fun',[{'type',651,'product',[]}|[{'atom',651,'true'}]]}]}],
		%% Line 656
		'spec' =
		    %% Line 656
		    [{{'erlang','display_string',1},[{'type',656,'bounded_fun',[{'type',656,'fun',[{'type',656,'product',[{'var',656,'P1'}]}|[{'atom',656,'true'}]]}|[[{'type',657,'constraint',[{'atom',657,'is_subtype'}|[[{'var',657,'P1'}|[{'type',657,'string',[]}]]]]}]]]}]}],
		%% Line 662
		'spec' =
		    %% Line 662
		    [{{'erlang','dist_exit',3},[{'type',662,'bounded_fun',[{'type',662,'fun',[{'type',662,'product',[{'var',662,'P1'}|[{'var',662,'P2'}|[{'var',662,'P3'}]]]}|[{'atom',662,'true'}]]}|[[{'type',663,'constraint',[{'atom',663,'is_subtype'}|[[{'var',663,'P1'}|[{'type',663,'pid',[]}]]]]}|[{'type',664,'constraint',[{'atom',664,'is_subtype'}|[[{'var',664,'P2'}|[{'type',664,'union',[{'atom',664,'kill'}|[{'atom',664,'noconnection'}|[{'atom',664,'normal'}]]]}]]]]}|[{'type',665,'constraint',[{'atom',665,'is_subtype'}|[[{'var',665,'P3'}|[{'type',665,'union',[{'type',665,'pid',[]}|[{'type',665,'port',[]}]]}]]]]}]]]]]}]}],
		%% Line 670
		'spec' =
		    %% Line 670
		    [{{'erlang','dt_append_vm_tag_data',1},[{'type',670,'bounded_fun',[{'type',670,'fun',[{'type',670,'product',[{'var',670,'IoData'}]}|[{'var',670,'IoDataRet'}]]}|[[{'type',671,'constraint',[{'atom',671,'is_subtype'}|[[{'var',671,'IoData'}|[{'type',671,'iodata',[]}]]]]}|[{'type',672,'constraint',[{'atom',672,'is_subtype'}|[[{'var',672,'IoDataRet'}|[{'type',672,'iodata',[]}]]]]}]]]]}]}],
		%% Line 677
		'spec' =
		    %% Line 677
		    [{{'erlang','dt_get_tag',0},[{'type',677,'fun',[{'type',677,'product',[]}|[{'type',677,'union',[{'type',677,'binary',[]}|[{'atom',677,'undefined'}]]}]]}]}],
		%% Line 682
		'spec' =
		    %% Line 682
		    [{{'erlang','dt_get_tag_data',0},[{'type',682,'fun',[{'type',682,'product',[]}|[{'type',682,'union',[{'type',682,'binary',[]}|[{'atom',682,'undefined'}]]}]]}]}],
		%% Line 687
		'spec' =
		    %% Line 687
		    [{{'erlang','dt_prepend_vm_tag_data',1},[{'type',687,'bounded_fun',[{'type',687,'fun',[{'type',687,'product',[{'var',687,'IoData'}]}|[{'var',687,'IoDataRet'}]]}|[[{'type',688,'constraint',[{'atom',688,'is_subtype'}|[[{'var',688,'IoData'}|[{'type',688,'iodata',[]}]]]]}|[{'type',689,'constraint',[{'atom',689,'is_subtype'}|[[{'var',689,'IoDataRet'}|[{'type',689,'iodata',[]}]]]]}]]]]}]}],
		%% Line 694
		'spec' =
		    %% Line 694
		    [{{'erlang','dt_put_tag',1},[{'type',694,'bounded_fun',[{'type',694,'fun',[{'type',694,'product',[{'var',694,'IoData'}]}|[{'type',694,'union',[{'type',694,'binary',[]}|[{'atom',694,'undefined'}]]}]]}|[[{'type',695,'constraint',[{'atom',695,'is_subtype'}|[[{'var',695,'IoData'}|[{'type',695,'iodata',[]}]]]]}]]]}]}],
		%% Line 700
		'spec' =
		    %% Line 700
		    [{{'erlang','dt_restore_tag',1},[{'type',700,'bounded_fun',[{'type',700,'fun',[{'type',700,'product',[{'var',700,'TagData'}]}|[{'atom',700,'true'}]]}|[[{'type',701,'constraint',[{'atom',701,'is_subtype'}|[[{'var',701,'TagData'}|[{'type',701,'term',[]}]]]]}]]]}]}],
		%% Line 706
		'spec' =
		    %% Line 706
		    [{{'erlang','dt_spread_tag',1},[{'type',706,'bounded_fun',[{'type',706,'fun',[{'type',706,'product',[{'type',706,'boolean',[]}]}|[{'var',706,'TagData'}]]}|[[{'type',707,'constraint',[{'atom',707,'is_subtype'}|[[{'var',707,'TagData'}|[{'type',707,'term',[]}]]]]}]]]}]}],
		%% Line 712
		'spec' =
		    %% Line 712
		    [{{'erase',0},[{'type',712,'bounded_fun',[{'type',712,'fun',[{'type',712,'product',[]}|[{'type',712,'list',[{'type',712,'tuple',[{'var',712,'Key'}|[{'var',712,'Val'}]]}]}]]}|[[{'type',713,'constraint',[{'atom',713,'is_subtype'}|[[{'var',713,'Key'}|[{'type',713,'term',[]}]]]]}|[{'type',714,'constraint',[{'atom',714,'is_subtype'}|[[{'var',714,'Val'}|[{'type',714,'term',[]}]]]]}]]]]}]}],
		%% Line 719
		'spec' =
		    %% Line 719
		    [{{'erase',1},[{'type',719,'bounded_fun',[{'type',719,'fun',[{'type',719,'product',[{'var',719,'Key'}]}|[{'type',719,'union',[{'var',719,'Val'}|[{'atom',719,'undefined'}]]}]]}|[[{'type',720,'constraint',[{'atom',720,'is_subtype'}|[[{'var',720,'Key'}|[{'type',720,'term',[]}]]]]}|[{'type',721,'constraint',[{'atom',721,'is_subtype'}|[[{'var',721,'Val'}|[{'type',721,'term',[]}]]]]}]]]]}]}],
		%% Line 727
		'spec' =
		    %% Line 727
		    [{{'error',1},[{'type',727,'bounded_fun',[{'type',727,'fun',[{'type',727,'product',[{'var',727,'Reason'}]}|[{'type',727,'no_return',[]}]]}|[[{'type',728,'constraint',[{'atom',728,'is_subtype'}|[[{'var',728,'Reason'}|[{'type',728,'term',[]}]]]]}]]]}]}],
		%% Line 734
		'spec' =
		    %% Line 734
		    [{{'error',2},[{'type',734,'bounded_fun',[{'type',734,'fun',[{'type',734,'product',[{'var',734,'Reason'}|[{'var',734,'Args'}]]}|[{'type',734,'no_return',[]}]]}|[[{'type',735,'constraint',[{'atom',735,'is_subtype'}|[[{'var',735,'Reason'}|[{'type',735,'term',[]}]]]]}|[{'type',736,'constraint',[{'atom',736,'is_subtype'}|[[{'var',736,'Args'}|[{'type',736,'list',[{'type',736,'term',[]}]}]]]]}]]]]}]}],
		%% Line 742
		'spec' =
		    %% Line 742
		    [{{'exit',1},[{'type',742,'bounded_fun',[{'type',742,'fun',[{'type',742,'product',[{'var',742,'Reason'}]}|[{'type',742,'no_return',[]}]]}|[[{'type',743,'constraint',[{'atom',743,'is_subtype'}|[[{'var',743,'Reason'}|[{'type',743,'term',[]}]]]]}]]]}]}],
		%% Line 748
		'spec' =
		    %% Line 748
		    [{{'exit',2},[{'type',748,'bounded_fun',[{'type',748,'fun',[{'type',748,'product',[{'var',748,'Pid'}|[{'var',748,'Reason'}]]}|[{'atom',748,'true'}]]}|[[{'type',749,'constraint',[{'atom',749,'is_subtype'}|[[{'var',749,'Pid'}|[{'type',749,'union',[{'type',749,'pid',[]}|[{'type',749,'port',[]}]]}]]]]}|[{'type',750,'constraint',[{'atom',750,'is_subtype'}|[[{'var',750,'Reason'}|[{'type',750,'term',[]}]]]]}]]]]}]}],
		%% Line 755
		'spec' =
		    %% Line 755
		    [{{'erlang','external_size',1},[{'type',755,'bounded_fun',[{'type',755,'fun',[{'type',755,'product',[{'var',755,'Term'}]}|[{'type',755,'non_neg_integer',[]}]]}|[[{'type',756,'constraint',[{'atom',756,'is_subtype'}|[[{'var',756,'Term'}|[{'type',756,'term',[]}]]]]}]]]}]}],
		%% Line 761
		'spec' =
		    %% Line 761
		    [{{'erlang','external_size',2},[{'type',761,'bounded_fun',[{'type',761,'fun',[{'type',761,'product',[{'var',761,'Term'}|[{'var',761,'Options'}]]}|[{'type',761,'non_neg_integer',[]}]]}|[[{'type',762,'constraint',[{'atom',762,'is_subtype'}|[[{'var',762,'Term'}|[{'type',762,'term',[]}]]]]}|[{'type',763,'constraint',[{'atom',763,'is_subtype'}|[[{'var',763,'Options'}|[{'type',763,'list',[{'type',763,'tuple',[{'atom',763,'minor_version'}|[{'ann_type',763,[{'var',763,'Version'}|[{'type',763,'non_neg_integer',[]}]]}]]}]}]]]]}]]]]}]}],
		%% Line 768
		'spec' =
		    %% Line 768
		    [{{'erlang','finish_loading',1},[{'type',768,'bounded_fun',[{'type',768,'fun',[{'type',768,'product',[{'var',768,'PreparedCodeBinaries'}]}|[{'type',768,'union',[{'atom',768,'ok'}|[{'var',768,'Error'}]]}]]}|[[{'type',769,'constraint',[{'atom',769,'is_subtype'}|[[{'var',769,'PreparedCodeBinaries'}|[{'type',769,'list',[{'var',769,'PreparedCodeBinary'}]}]]]]}|[{'type',770,'constraint',[{'atom',770,'is_subtype'}|[[{'var',770,'PreparedCodeBinary'}|[{'type',770,'binary',[]}]]]]}|[{'type',771,'constraint',[{'atom',771,'is_subtype'}|[[{'var',771,'ModuleList'}|[{'type',771,'list',[{'type',771,'module',[]}]}]]]]}|[{'type',772,'constraint',[{'atom',772,'is_subtype'}|[[{'var',772,'Error'}|[{'type',772,'union',[{'type',772,'tuple',[{'atom',772,'not_purged'}|[{'var',772,'ModuleList'}]]}|[{'type',772,'tuple',[{'atom',772,'on_load'}|[{'var',772,'ModuleList'}]]}]]}]]]]}]]]]]]}]}],
		%% Line 777
		'spec' =
		    %% Line 777
		    [{{'erlang','finish_after_on_load',2},[{'type',777,'bounded_fun',[{'type',777,'fun',[{'type',777,'product',[{'var',777,'P1'}|[{'var',777,'P2'}]]}|[{'atom',777,'true'}]]}|[[{'type',778,'constraint',[{'atom',778,'is_subtype'}|[[{'var',778,'P1'}|[{'type',778,'atom',[]}]]]]}|[{'type',779,'constraint',[{'atom',779,'is_subtype'}|[[{'var',779,'P2'}|[{'type',779,'boolean',[]}]]]]}]]]]}]}],
		%% Line 785
		'spec' =
		    %% Line 785
		    [{{'float',1},[{'type',785,'bounded_fun',[{'type',785,'fun',[{'type',785,'product',[{'var',785,'Number'}]}|[{'type',785,'float',[]}]]}|[[{'type',786,'constraint',[{'atom',786,'is_subtype'}|[[{'var',786,'Number'}|[{'type',786,'number',[]}]]]]}]]]}]}],
		%% Line 791
		'spec' =
		    %% Line 791
		    [{{'float_to_binary',1},[{'type',791,'bounded_fun',[{'type',791,'fun',[{'type',791,'product',[{'var',791,'Float'}]}|[{'type',791,'binary',[]}]]}|[[{'type',792,'constraint',[{'atom',792,'is_subtype'}|[[{'var',792,'Float'}|[{'type',792,'float',[]}]]]]}]]]}]}],
		%% Line 797
		'spec' =
		    %% Line 797
		    [{{'float_to_binary',2},[{'type',797,'bounded_fun',[{'type',797,'fun',[{'type',797,'product',[{'var',797,'Float'}|[{'var',797,'Options'}]]}|[{'type',797,'binary',[]}]]}|[[{'type',798,'constraint',[{'atom',798,'is_subtype'}|[[{'var',798,'Float'}|[{'type',798,'float',[]}]]]]}|[{'type',799,'constraint',[{'atom',799,'is_subtype'}|[[{'var',799,'Options'}|[{'type',799,'list',[{'var',799,'Option'}]}]]]]}|[{'type',800,'constraint',[{'atom',800,'is_subtype'}|[[{'var',800,'Option'}|[{'type',800,'union',[{'type',800,'tuple',[{'atom',800,'decimals'}|[{'ann_type',800,[{'var',800,'Decimals'}|[{'type',800,'range',[{'integer',800,0}|[{'integer',800,253}]]}]]}]]}|[{'type',801,'tuple',[{'atom',801,'scientific'}|[{'ann_type',801,[{'var',801,'Decimals'}|[{'type',801,'range',[{'integer',801,0}|[{'integer',801,249}]]}]]}]]}|[{'atom',802,'compact'}]]]}]]]]}]]]]]}]}],
		%% Line 807
		'spec' =
		    %% Line 807
		    [{{'float_to_list',1},[{'type',807,'bounded_fun',[{'type',807,'fun',[{'type',807,'product',[{'var',807,'Float'}]}|[{'type',807,'string',[]}]]}|[[{'type',808,'constraint',[{'atom',808,'is_subtype'}|[[{'var',808,'Float'}|[{'type',808,'float',[]}]]]]}]]]}]}],
		%% Line 813
		'spec' =
		    %% Line 813
		    [{{'float_to_list',2},[{'type',813,'bounded_fun',[{'type',813,'fun',[{'type',813,'product',[{'var',813,'Float'}|[{'var',813,'Options'}]]}|[{'type',813,'string',[]}]]}|[[{'type',814,'constraint',[{'atom',814,'is_subtype'}|[[{'var',814,'Float'}|[{'type',814,'float',[]}]]]]}|[{'type',815,'constraint',[{'atom',815,'is_subtype'}|[[{'var',815,'Options'}|[{'type',815,'list',[{'var',815,'Option'}]}]]]]}|[{'type',816,'constraint',[{'atom',816,'is_subtype'}|[[{'var',816,'Option'}|[{'type',816,'union',[{'type',816,'tuple',[{'atom',816,'decimals'}|[{'ann_type',816,[{'var',816,'Decimals'}|[{'type',816,'range',[{'integer',816,0}|[{'integer',816,253}]]}]]}]]}|[{'type',817,'tuple',[{'atom',817,'scientific'}|[{'ann_type',817,[{'var',817,'Decimals'}|[{'type',817,'range',[{'integer',817,0}|[{'integer',817,249}]]}]]}]]}|[{'atom',818,'compact'}]]]}]]]]}]]]]]}]}],
		%% Line 823
		'spec' =
		    %% Line 823
		    [{{'erlang','fun_info',2},[{'type',823,'bounded_fun',[{'type',823,'fun',[{'type',823,'product',[{'var',823,'Fun'}|[{'var',823,'Item'}]]}|[{'type',823,'tuple',[{'var',823,'Item'}|[{'var',823,'Info'}]]}]]}|[[{'type',824,'constraint',[{'atom',824,'is_subtype'}|[[{'var',824,'Fun'}|[{'type',824,'function',[]}]]]]}|[{'type',825,'constraint',[{'atom',825,'is_subtype'}|[[{'var',825,'Item'}|[{'type',825,'fun_info_item',[]}]]]]}|[{'type',826,'constraint',[{'atom',826,'is_subtype'}|[[{'var',826,'Info'}|[{'type',826,'term',[]}]]]]}]]]]]}]}],
		%% Line 831
		'spec' =
		    %% Line 831
		    [{{'erlang','fun_to_list',1},[{'type',831,'bounded_fun',[{'type',831,'fun',[{'type',831,'product',[{'var',831,'Fun'}]}|[{'type',831,'string',[]}]]}|[[{'type',832,'constraint',[{'atom',832,'is_subtype'}|[[{'var',832,'Fun'}|[{'type',832,'function',[]}]]]]}]]]}]}],
		%% Line 837
		'spec' =
		    %% Line 837
		    [{{'erlang','function_exported',3},[{'type',837,'bounded_fun',[{'type',837,'fun',[{'type',837,'product',[{'var',837,'Module'}|[{'var',837,'Function'}|[{'var',837,'Arity'}]]]}|[{'type',837,'boolean',[]}]]}|[[{'type',838,'constraint',[{'atom',838,'is_subtype'}|[[{'var',838,'Module'}|[{'type',838,'module',[]}]]]]}|[{'type',839,'constraint',[{'atom',839,'is_subtype'}|[[{'var',839,'Function'}|[{'type',839,'atom',[]}]]]]}|[{'type',840,'constraint',[{'atom',840,'is_subtype'}|[[{'var',840,'Arity'}|[{'type',840,'arity',[]}]]]]}]]]]]}]}],
		%% Line 845
		'spec' =
		    %% Line 845
		    [{{'garbage_collect',0},[{'type',845,'fun',[{'type',845,'product',[]}|[{'atom',845,'true'}]]}]}],
		%% Line 850
		'spec' =
		    %% Line 850
		    [{{'garbage_collect',1},[{'type',850,'bounded_fun',[{'type',850,'fun',[{'type',850,'product',[{'var',850,'Pid'}]}|[{'var',850,'GCResult'}]]}|[[{'type',851,'constraint',[{'atom',851,'is_subtype'}|[[{'var',851,'Pid'}|[{'type',851,'pid',[]}]]]]}|[{'type',852,'constraint',[{'atom',852,'is_subtype'}|[[{'var',852,'GCResult'}|[{'type',852,'boolean',[]}]]]]}]]]]}]}],
		%% Line 861
		'spec' =
		    %% Line 861
		    [{{'garbage_collect',2},[{'type',861,'bounded_fun',[{'type',861,'fun',[{'type',861,'product',[{'var',861,'Pid'}|[{'var',861,'OptionList'}]]}|[{'type',861,'union',[{'var',861,'GCResult'}|[{'atom',861,'async'}]]}]]}|[[{'type',862,'constraint',[{'atom',862,'is_subtype'}|[[{'var',862,'Pid'}|[{'type',862,'pid',[]}]]]]}|[{'type',863,'constraint',[{'atom',863,'is_subtype'}|[[{'var',863,'RequestId'}|[{'type',863,'term',[]}]]]]}|[{'type',864,'constraint',[{'atom',864,'is_subtype'}|[[{'var',864,'Option'}|[{'type',864,'tuple',[{'atom',864,'async'}|[{'var',864,'RequestId'}]]}]]]]}|[{'type',865,'constraint',[{'atom',865,'is_subtype'}|[[{'var',865,'OptionList'}|[{'type',865,'list',[{'var',865,'Option'}]}]]]]}|[{'type',866,'constraint',[{'atom',866,'is_subtype'}|[[{'var',866,'GCResult'}|[{'type',866,'boolean',[]}]]]]}]]]]]]]}]}],
		%% Line 907
		'spec' =
		    %% Line 907
		    [{{'erlang','garbage_collect_message_area',0},[{'type',907,'fun',[{'type',907,'product',[]}|[{'type',907,'boolean',[]}]]}]}],
		%% Line 912
		'spec' =
		    %% Line 912
		    [{{'get',0},[{'type',912,'bounded_fun',[{'type',912,'fun',[{'type',912,'product',[]}|[{'type',912,'list',[{'type',912,'tuple',[{'var',912,'Key'}|[{'var',912,'Val'}]]}]}]]}|[[{'type',913,'constraint',[{'atom',913,'is_subtype'}|[[{'var',913,'Key'}|[{'type',913,'term',[]}]]]]}|[{'type',914,'constraint',[{'atom',914,'is_subtype'}|[[{'var',914,'Val'}|[{'type',914,'term',[]}]]]]}]]]]}]}],
		%% Line 919
		'spec' =
		    %% Line 919
		    [{{'get',1},[{'type',919,'bounded_fun',[{'type',919,'fun',[{'type',919,'product',[{'var',919,'Key'}]}|[{'type',919,'union',[{'var',919,'Val'}|[{'atom',919,'undefined'}]]}]]}|[[{'type',920,'constraint',[{'atom',920,'is_subtype'}|[[{'var',920,'Key'}|[{'type',920,'term',[]}]]]]}|[{'type',921,'constraint',[{'atom',921,'is_subtype'}|[[{'var',921,'Val'}|[{'type',921,'term',[]}]]]]}]]]]}]}],
		%% Line 926
		'spec' =
		    %% Line 926
		    [{{'get_keys',1},[{'type',926,'bounded_fun',[{'type',926,'fun',[{'type',926,'product',[{'var',926,'Val'}]}|[{'type',926,'list',[{'var',926,'Key'}]}]]}|[[{'type',927,'constraint',[{'atom',927,'is_subtype'}|[[{'var',927,'Val'}|[{'type',927,'term',[]}]]]]}|[{'type',928,'constraint',[{'atom',928,'is_subtype'}|[[{'var',928,'Key'}|[{'type',928,'term',[]}]]]]}]]]]}]}],
		%% Line 933
		'spec' =
		    %% Line 933
		    [{{'erlang','get_module_info',1},[{'type',933,'bounded_fun',[{'type',933,'fun',[{'type',933,'product',[{'var',933,'P1'}]}|[{'type',933,'list',[{'type',933,'tuple',[{'type',933,'atom',[]}|[{'type',933,'list',[{'type',933,'tuple',[{'type',933,'atom',[]}|[{'type',933,'term',[]}]]}]}]]}]}]]}|[[{'type',934,'constraint',[{'atom',934,'is_subtype'}|[[{'var',934,'P1'}|[{'type',934,'atom',[]}]]]]}]]]}]}],
		%% Line 939
		'spec' =
		    %% Line 939
		    [{{'erlang','get_stacktrace',0},[{'type',939,'fun',[{'type',939,'product',[]}|[{'type',939,'list',[{'type',939,'stack_item',[]}]}]]}]}],
		%% Line 944
		'spec' =
		    %% Line 944
		    [{{'group_leader',0},[{'type',944,'fun',[{'type',944,'product',[]}|[{'type',944,'pid',[]}]]}]}],
		%% Line 949
		'spec' =
		    %% Line 949
		    [{{'group_leader',2},[{'type',949,'bounded_fun',[{'type',949,'fun',[{'type',949,'product',[{'var',949,'GroupLeader'}|[{'var',949,'Pid'}]]}|[{'atom',949,'true'}]]}|[[{'type',950,'constraint',[{'atom',950,'is_subtype'}|[[{'var',950,'GroupLeader'}|[{'type',950,'pid',[]}]]]]}|[{'type',951,'constraint',[{'atom',951,'is_subtype'}|[[{'var',951,'Pid'}|[{'type',951,'pid',[]}]]]]}]]]]}]}],
		%% Line 957
		'spec' =
		    %% Line 957
		    [{{'halt',0},[{'type',957,'fun',[{'type',957,'product',[]}|[{'type',957,'no_return',[]}]]}]}],
		%% Line 963
		'spec' =
		    %% Line 963
		    [{{'halt',1},[{'type',963,'bounded_fun',[{'type',963,'fun',[{'type',963,'product',[{'var',963,'Status'}]}|[{'type',963,'no_return',[]}]]}|[[{'type',964,'constraint',[{'atom',964,'is_subtype'}|[[{'var',964,'Status'}|[{'type',964,'union',[{'type',964,'non_neg_integer',[]}|[{'atom',964,'abort'}|[{'type',964,'string',[]}]]]}]]]]}]]]}]}],
		%% Line 970
		'spec' =
		    %% Line 970
		    [{{'halt',2},[{'type',970,'bounded_fun',[{'type',970,'fun',[{'type',970,'product',[{'var',970,'Status'}|[{'var',970,'Options'}]]}|[{'type',970,'no_return',[]}]]}|[[{'type',971,'constraint',[{'atom',971,'is_subtype'}|[[{'var',971,'Status'}|[{'type',971,'union',[{'type',971,'non_neg_integer',[]}|[{'atom',971,'abort'}|[{'type',971,'string',[]}]]]}]]]]}|[{'type',972,'constraint',[{'atom',972,'is_subtype'}|[[{'var',972,'Options'}|[{'type',972,'list',[{'var',972,'Option'}]}]]]]}|[{'type',973,'constraint',[{'atom',973,'is_subtype'}|[[{'var',973,'Option'}|[{'type',973,'tuple',[{'atom',973,'flush'}|[{'type',973,'boolean',[]}]]}]]]]}]]]]]}]}],
		%% Line 978
		'spec' =
		    %% Line 978
		    [{{'erlang','hash',2},[{'type',978,'bounded_fun',[{'type',978,'fun',[{'type',978,'product',[{'var',978,'Term'}|[{'var',978,'Range'}]]}|[{'type',978,'pos_integer',[]}]]}|[[{'type',979,'constraint',[{'atom',979,'is_subtype'}|[[{'var',979,'Term'}|[{'type',979,'term',[]}]]]]}|[{'type',980,'constraint',[{'atom',980,'is_subtype'}|[[{'var',980,'Range'}|[{'type',980,'pos_integer',[]}]]]]}]]]]}]}],
		%% Line 985
		'spec' =
		    %% Line 985
		    [{{'erlang','hibernate',3},[{'type',985,'bounded_fun',[{'type',985,'fun',[{'type',985,'product',[{'var',985,'Module'}|[{'var',985,'Function'}|[{'var',985,'Args'}]]]}|[{'type',985,'no_return',[]}]]}|[[{'type',986,'constraint',[{'atom',986,'is_subtype'}|[[{'var',986,'Module'}|[{'type',986,'module',[]}]]]]}|[{'type',987,'constraint',[{'atom',987,'is_subtype'}|[[{'var',987,'Function'}|[{'type',987,'atom',[]}]]]]}|[{'type',988,'constraint',[{'atom',988,'is_subtype'}|[[{'var',988,'Args'}|[{'type',988,'list',[{'type',988,'term',[]}]}]]]]}]]]]]}]}],
		%% Line 993
		'spec' =
		    %% Line 993
		    [{{'erlang','insert_element',3},[{'type',993,'bounded_fun',[{'type',993,'fun',[{'type',993,'product',[{'var',993,'Index'}|[{'var',993,'Tuple1'}|[{'var',993,'Term'}]]]}|[{'var',993,'Tuple2'}]]}|[[{'type',994,'constraint',[{'atom',994,'is_subtype'}|[[{'var',994,'Index'}|[{'type',994,'pos_integer',[]}]]]]}|[{'type',995,'constraint',[{'atom',995,'is_subtype'}|[[{'var',995,'Tuple1'}|[{'type',995,'tuple','any'}]]]]}|[{'type',996,'constraint',[{'atom',996,'is_subtype'}|[[{'var',996,'Tuple2'}|[{'type',996,'tuple','any'}]]]]}|[{'type',997,'constraint',[{'atom',997,'is_subtype'}|[[{'var',997,'Term'}|[{'type',997,'term',[]}]]]]}]]]]]]}]}],
		%% Line 1002
		'spec' =
		    %% Line 1002
		    [{{'integer_to_binary',1},[{'type',1002,'bounded_fun',[{'type',1002,'fun',[{'type',1002,'product',[{'var',1002,'Integer'}]}|[{'type',1002,'binary',[]}]]}|[[{'type',1003,'constraint',[{'atom',1003,'is_subtype'}|[[{'var',1003,'Integer'}|[{'type',1003,'integer',[]}]]]]}]]]}]}],
		%% Line 1008
		'spec' =
		    %% Line 1008
		    [{{'integer_to_list',1},[{'type',1008,'bounded_fun',[{'type',1008,'fun',[{'type',1008,'product',[{'var',1008,'Integer'}]}|[{'type',1008,'string',[]}]]}|[[{'type',1009,'constraint',[{'atom',1009,'is_subtype'}|[[{'var',1009,'Integer'}|[{'type',1009,'integer',[]}]]]]}]]]}]}],
		%% Line 1014
		'spec' =
		    %% Line 1014
		    [{{'iolist_size',1},[{'type',1014,'bounded_fun',[{'type',1014,'fun',[{'type',1014,'product',[{'var',1014,'Item'}]}|[{'type',1014,'non_neg_integer',[]}]]}|[[{'type',1015,'constraint',[{'atom',1015,'is_subtype'}|[[{'var',1015,'Item'}|[{'type',1015,'union',[{'type',1015,'iolist',[]}|[{'type',1015,'binary',[]}]]}]]]]}]]]}]}],
		%% Line 1020
		'spec' =
		    %% Line 1020
		    [{{'iolist_to_binary',1},[{'type',1020,'bounded_fun',[{'type',1020,'fun',[{'type',1020,'product',[{'var',1020,'IoListOrBinary'}]}|[{'type',1020,'binary',[]}]]}|[[{'type',1021,'constraint',[{'atom',1021,'is_subtype'}|[[{'var',1021,'IoListOrBinary'}|[{'type',1021,'union',[{'type',1021,'iolist',[]}|[{'type',1021,'binary',[]}]]}]]]]}]]]}]}],
		%% Line 1026
		'spec' =
		    %% Line 1026
		    [{{'is_alive',0},[{'type',1026,'fun',[{'type',1026,'product',[]}|[{'type',1026,'boolean',[]}]]}]}],
		%% Line 1031
		'spec' =
		    %% Line 1031
		    [{{'erlang','is_builtin',3},[{'type',1031,'bounded_fun',[{'type',1031,'fun',[{'type',1031,'product',[{'var',1031,'Module'}|[{'var',1031,'Function'}|[{'var',1031,'Arity'}]]]}|[{'type',1031,'boolean',[]}]]}|[[{'type',1032,'constraint',[{'atom',1032,'is_subtype'}|[[{'var',1032,'Module'}|[{'type',1032,'module',[]}]]]]}|[{'type',1033,'constraint',[{'atom',1033,'is_subtype'}|[[{'var',1033,'Function'}|[{'type',1033,'atom',[]}]]]]}|[{'type',1034,'constraint',[{'atom',1034,'is_subtype'}|[[{'var',1034,'Arity'}|[{'type',1034,'arity',[]}]]]]}]]]]]}]}],
		%% Line 1039
		'spec' =
		    %% Line 1039
		    [{{'is_process_alive',1},[{'type',1039,'bounded_fun',[{'type',1039,'fun',[{'type',1039,'product',[{'var',1039,'Pid'}]}|[{'type',1039,'boolean',[]}]]}|[[{'type',1040,'constraint',[{'atom',1040,'is_subtype'}|[[{'var',1040,'Pid'}|[{'type',1040,'pid',[]}]]]]}]]]}]}],
		%% Line 1046
		'spec' =
		    %% Line 1046
		    [{{'length',1},[{'type',1046,'bounded_fun',[{'type',1046,'fun',[{'type',1046,'product',[{'var',1046,'List'}]}|[{'type',1046,'non_neg_integer',[]}]]}|[[{'type',1047,'constraint',[{'atom',1047,'is_subtype'}|[[{'var',1047,'List'}|[{'type',1047,'list',[{'type',1047,'term',[]}]}]]]]}]]]}]}],
		%% Line 1052
		'spec' =
		    %% Line 1052
		    [{{'link',1},[{'type',1052,'bounded_fun',[{'type',1052,'fun',[{'type',1052,'product',[{'var',1052,'PidOrPort'}]}|[{'atom',1052,'true'}]]}|[[{'type',1053,'constraint',[{'atom',1053,'is_subtype'}|[[{'var',1053,'PidOrPort'}|[{'type',1053,'union',[{'type',1053,'pid',[]}|[{'type',1053,'port',[]}]]}]]]]}]]]}]}],
		%% Line 1058
		'spec' =
		    %% Line 1058
		    [{{'list_to_atom',1},[{'type',1058,'bounded_fun',[{'type',1058,'fun',[{'type',1058,'product',[{'var',1058,'String'}]}|[{'type',1058,'atom',[]}]]}|[[{'type',1059,'constraint',[{'atom',1059,'is_subtype'}|[[{'var',1059,'String'}|[{'type',1059,'string',[]}]]]]}]]]}]}],
		%% Line 1064
		'spec' =
		    %% Line 1064
		    [{{'list_to_binary',1},[{'type',1064,'bounded_fun',[{'type',1064,'fun',[{'type',1064,'product',[{'var',1064,'IoList'}]}|[{'type',1064,'binary',[]}]]}|[[{'type',1065,'constraint',[{'atom',1065,'is_subtype'}|[[{'var',1065,'IoList'}|[{'type',1065,'iolist',[]}]]]]}]]]}]}],
		%% Line 1070
		'spec' =
		    %% Line 1070
		    [{{'list_to_bitstring',1},[{'type',1070,'bounded_fun',[{'type',1070,'fun',[{'type',1070,'product',[{'var',1070,'BitstringList'}]}|[{'type',1070,'bitstring',[]}]]}|[[{'type',1071,'constraint',[{'atom',1071,'is_subtype'}|[[{'var',1071,'BitstringList'}|[{'type',1071,'bitstring_list',[]}]]]]}]]]}]}],
		%% Line 1076
		'spec' =
		    %% Line 1076
		    [{{'list_to_existing_atom',1},[{'type',1076,'bounded_fun',[{'type',1076,'fun',[{'type',1076,'product',[{'var',1076,'String'}]}|[{'type',1076,'atom',[]}]]}|[[{'type',1077,'constraint',[{'atom',1077,'is_subtype'}|[[{'var',1077,'String'}|[{'type',1077,'string',[]}]]]]}]]]}]}],
		%% Line 1082
		'spec' =
		    %% Line 1082
		    [{{'list_to_float',1},[{'type',1082,'bounded_fun',[{'type',1082,'fun',[{'type',1082,'product',[{'var',1082,'String'}]}|[{'type',1082,'float',[]}]]}|[[{'type',1083,'constraint',[{'atom',1083,'is_subtype'}|[[{'var',1083,'String'}|[{'type',1083,'string',[]}]]]]}]]]}]}],
		%% Line 1088
		'spec' =
		    %% Line 1088
		    [{{'list_to_integer',1},[{'type',1088,'bounded_fun',[{'type',1088,'fun',[{'type',1088,'product',[{'var',1088,'String'}]}|[{'type',1088,'integer',[]}]]}|[[{'type',1089,'constraint',[{'atom',1089,'is_subtype'}|[[{'var',1089,'String'}|[{'type',1089,'string',[]}]]]]}]]]}]}],
		%% Line 1094
		'spec' =
		    %% Line 1094
		    [{{'list_to_integer',2},[{'type',1094,'bounded_fun',[{'type',1094,'fun',[{'type',1094,'product',[{'var',1094,'String'}|[{'var',1094,'Base'}]]}|[{'type',1094,'integer',[]}]]}|[[{'type',1095,'constraint',[{'atom',1095,'is_subtype'}|[[{'var',1095,'String'}|[{'type',1095,'string',[]}]]]]}|[{'type',1096,'constraint',[{'atom',1096,'is_subtype'}|[[{'var',1096,'Base'}|[{'type',1096,'range',[{'integer',1096,2}|[{'integer',1096,36}]]}]]]]}]]]]}]}],
		%% Line 1101
		'spec' =
		    %% Line 1101
		    [{{'list_to_pid',1},[{'type',1101,'bounded_fun',[{'type',1101,'fun',[{'type',1101,'product',[{'var',1101,'String'}]}|[{'type',1101,'pid',[]}]]}|[[{'type',1102,'constraint',[{'atom',1102,'is_subtype'}|[[{'var',1102,'String'}|[{'type',1102,'string',[]}]]]]}]]]}]}],
		%% Line 1107
		'spec' =
		    %% Line 1107
		    [{{'list_to_tuple',1},[{'type',1107,'bounded_fun',[{'type',1107,'fun',[{'type',1107,'product',[{'var',1107,'List'}]}|[{'type',1107,'tuple','any'}]]}|[[{'type',1108,'constraint',[{'atom',1108,'is_subtype'}|[[{'var',1108,'List'}|[{'type',1108,'list',[{'type',1108,'term',[]}]}]]]]}]]]}]}],
		%% Line 1113
		'spec' =
		    %% Line 1113
		    [{{'erlang','loaded',0},[{'type',1113,'bounded_fun',[{'type',1113,'fun',[{'type',1113,'product',[]}|[{'type',1113,'list',[{'var',1113,'Module'}]}]]}|[[{'type',1114,'constraint',[{'atom',1114,'is_subtype'}|[[{'var',1114,'Module'}|[{'type',1114,'module',[]}]]]]}]]]}]}],
		%% Line 1119
		'spec' =
		    %% Line 1119
		    [{{'erlang','localtime',0},[{'type',1119,'bounded_fun',[{'type',1119,'fun',[{'type',1119,'product',[]}|[{'var',1119,'DateTime'}]]}|[[{'type',1120,'constraint',[{'atom',1120,'is_subtype'}|[[{'var',1120,'DateTime'}|[{'remote_type',1120,[{'atom',1120,'calendar'}|[{'atom',1120,'datetime'}|[[]]]]}]]]]}]]]}]}],
		%% Line 1125
		'spec' =
		    %% Line 1125
		    [{{'make_ref',0},[{'type',1125,'fun',[{'type',1125,'product',[]}|[{'type',1125,'reference',[]}]]}]}],
		%% Line 1130
		'spec' =
		    %% Line 1130
		    [{{'map_size',1},[{'type',1130,'bounded_fun',[{'type',1130,'fun',[{'type',1130,'product',[{'var',1130,'Map'}]}|[{'type',1130,'non_neg_integer',[]}]]}|[[{'type',1131,'constraint',[{'atom',1131,'is_subtype'}|[[{'var',1131,'Map'}|[{'type',1131,'map','any'}]]]]}]]]}]}],
		%% Line 1136
		'spec' =
		    %% Line 1136
		    [{{'erlang','match_spec_test',3},[{'type',1136,'bounded_fun',[{'type',1136,'fun',[{'type',1136,'product',[{'var',1136,'P1'}|[{'var',1136,'P2'}|[{'var',1136,'P3'}]]]}|[{'var',1136,'TestResult'}]]}|[[{'type',1137,'constraint',[{'atom',1137,'is_subtype'}|[[{'var',1137,'P1'}|[{'type',1137,'union',[{'type',1137,'list',[{'type',1137,'term',[]}]}|[{'type',1137,'tuple','any'}]]}]]]]}|[{'type',1138,'constraint',[{'atom',1138,'is_subtype'}|[[{'var',1138,'P2'}|[{'type',1138,'term',[]}]]]]}|[{'type',1139,'constraint',[{'atom',1139,'is_subtype'}|[[{'var',1139,'P3'}|[{'type',1139,'union',[{'atom',1139,'table'}|[{'atom',1139,'trace'}]]}]]]]}|[{'type',1140,'constraint',[{'atom',1140,'is_subtype'}|[[{'var',1140,'TestResult'}|[{'type',1140,'union',[{'type',1140,'tuple',[{'atom',1140,'ok'}|[{'type',1140,'term',[]}|[{'type',1140,'list',[{'atom',1140,'return_trace'}]}|[{'type',1140,'list',[{'type',1140,'tuple',[{'type',1140,'union',[{'atom',1140,'error'}|[{'atom',1140,'warning'}]]}|[{'type',1140,'string',[]}]]}]}]]]]}|[{'type',1140,'tuple',[{'atom',1140,'error'}|[{'type',1140,'list',[{'type',1140,'tuple',[{'type',1140,'union',[{'atom',1140,'error'}|[{'atom',1140,'warning'}]]}|[{'type',1140,'string',[]}]]}]}]]}]]}]]]]}]]]]]]}]}],
		%% Line 1145
		'spec' =
		    %% Line 1145
		    [{{'erlang','md5',1},[{'type',1145,'bounded_fun',[{'type',1145,'fun',[{'type',1145,'product',[{'var',1145,'Data'}]}|[{'var',1145,'Digest'}]]}|[[{'type',1146,'constraint',[{'atom',1146,'is_subtype'}|[[{'var',1146,'Data'}|[{'type',1146,'iodata',[]}]]]]}|[{'type',1147,'constraint',[{'atom',1147,'is_subtype'}|[[{'var',1147,'Digest'}|[{'type',1147,'binary',[]}]]]]}]]]]}]}],
		%% Line 1152
		'spec' =
		    %% Line 1152
		    [{{'erlang','md5_final',1},[{'type',1152,'bounded_fun',[{'type',1152,'fun',[{'type',1152,'product',[{'var',1152,'Context'}]}|[{'var',1152,'Digest'}]]}|[[{'type',1153,'constraint',[{'atom',1153,'is_subtype'}|[[{'var',1153,'Context'}|[{'type',1153,'binary',[]}]]]]}|[{'type',1154,'constraint',[{'atom',1154,'is_subtype'}|[[{'var',1154,'Digest'}|[{'type',1154,'binary',[]}]]]]}]]]]}]}],
		%% Line 1159
		'spec' =
		    %% Line 1159
		    [{{'erlang','md5_init',0},[{'type',1159,'bounded_fun',[{'type',1159,'fun',[{'type',1159,'product',[]}|[{'var',1159,'Context'}]]}|[[{'type',1160,'constraint',[{'atom',1160,'is_subtype'}|[[{'var',1160,'Context'}|[{'type',1160,'binary',[]}]]]]}]]]}]}],
		%% Line 1165
		'spec' =
		    %% Line 1165
		    [{{'erlang','md5_update',2},[{'type',1165,'bounded_fun',[{'type',1165,'fun',[{'type',1165,'product',[{'var',1165,'Context'}|[{'var',1165,'Data'}]]}|[{'var',1165,'NewContext'}]]}|[[{'type',1166,'constraint',[{'atom',1166,'is_subtype'}|[[{'var',1166,'Context'}|[{'type',1166,'binary',[]}]]]]}|[{'type',1167,'constraint',[{'atom',1167,'is_subtype'}|[[{'var',1167,'Data'}|[{'type',1167,'iodata',[]}]]]]}|[{'type',1168,'constraint',[{'atom',1168,'is_subtype'}|[[{'var',1168,'NewContext'}|[{'type',1168,'binary',[]}]]]]}]]]]]}]}],
		%% Line 1173
		'spec' =
		    %% Line 1173
		    [{{'module_loaded',1},[{'type',1173,'bounded_fun',[{'type',1173,'fun',[{'type',1173,'product',[{'var',1173,'Module'}]}|[{'type',1173,'boolean',[]}]]}|[[{'type',1174,'constraint',[{'atom',1174,'is_subtype'}|[[{'var',1174,'Module'}|[{'type',1174,'module',[]}]]]]}]]]}]}],
		%% Line 1179
		'spec' =
		    %% Line 1179
		    [{{'monitor',2},[{'type',1179,'bounded_fun',[{'type',1179,'fun',[{'type',1179,'product',[{'var',1179,'Type'}|[{'var',1179,'Item'}]]}|[{'var',1179,'MonitorRef'}]]}|[[{'type',1180,'constraint',[{'atom',1180,'is_subtype'}|[[{'var',1180,'Type'}|[{'atom',1180,'process'}]]]]}|[{'type',1181,'constraint',[{'atom',1181,'is_subtype'}|[[{'var',1181,'Item'}|[{'type',1181,'union',[{'type',1181,'pid',[]}|[{'var',1181,'RegName'}|[{'type',1181,'tuple',[{'var',1181,'RegName'}|[{'var',1181,'Node'}]]}]]]}]]]]}|[{'type',1182,'constraint',[{'atom',1182,'is_subtype'}|[[{'var',1182,'RegName'}|[{'type',1182,'module',[]}]]]]}|[{'type',1183,'constraint',[{'atom',1183,'is_subtype'}|[[{'var',1183,'Node'}|[{'type',1183,'node',[]}]]]]}|[{'type',1184,'constraint',[{'atom',1184,'is_subtype'}|[[{'var',1184,'MonitorRef'}|[{'type',1184,'reference',[]}]]]]}]]]]]]]}]}],
		%% Line 1189
		'spec' =
		    %% Line 1189
		    [{{'monitor_node',2},[{'type',1189,'bounded_fun',[{'type',1189,'fun',[{'type',1189,'product',[{'var',1189,'Node'}|[{'var',1189,'Flag'}]]}|[{'atom',1189,'true'}]]}|[[{'type',1190,'constraint',[{'atom',1190,'is_subtype'}|[[{'var',1190,'Node'}|[{'type',1190,'node',[]}]]]]}|[{'type',1191,'constraint',[{'atom',1191,'is_subtype'}|[[{'var',1191,'Flag'}|[{'type',1191,'boolean',[]}]]]]}]]]]}]}],
		%% Line 1196
		'spec' =
		    %% Line 1196
		    [{{'erlang','monitor_node',3},[{'type',1196,'bounded_fun',[{'type',1196,'fun',[{'type',1196,'product',[{'var',1196,'Node'}|[{'var',1196,'Flag'}|[{'var',1196,'Options'}]]]}|[{'atom',1196,'true'}]]}|[[{'type',1197,'constraint',[{'atom',1197,'is_subtype'}|[[{'var',1197,'Node'}|[{'type',1197,'node',[]}]]]]}|[{'type',1198,'constraint',[{'atom',1198,'is_subtype'}|[[{'var',1198,'Flag'}|[{'type',1198,'boolean',[]}]]]]}|[{'type',1199,'constraint',[{'atom',1199,'is_subtype'}|[[{'var',1199,'Options'}|[{'type',1199,'list',[{'var',1199,'Option'}]}]]]]}|[{'type',1200,'constraint',[{'atom',1200,'is_subtype'}|[[{'var',1200,'Option'}|[{'atom',1200,'allow_passive_connect'}]]]]}]]]]]]}]}],
		%% Line 1206
		'spec' =
		    %% Line 1206
		    [{{'erlang','nif_error',1},[{'type',1206,'bounded_fun',[{'type',1206,'fun',[{'type',1206,'product',[{'var',1206,'Reason'}]}|[{'type',1206,'no_return',[]}]]}|[[{'type',1207,'constraint',[{'atom',1207,'is_subtype'}|[[{'var',1207,'Reason'}|[{'type',1207,'term',[]}]]]]}]]]}]}],
		%% Line 1213
		'spec' =
		    %% Line 1213
		    [{{'erlang','nif_error',2},[{'type',1213,'bounded_fun',[{'type',1213,'fun',[{'type',1213,'product',[{'var',1213,'Reason'}|[{'var',1213,'Args'}]]}|[{'type',1213,'no_return',[]}]]}|[[{'type',1214,'constraint',[{'atom',1214,'is_subtype'}|[[{'var',1214,'Reason'}|[{'type',1214,'term',[]}]]]]}|[{'type',1215,'constraint',[{'atom',1215,'is_subtype'}|[[{'var',1215,'Args'}|[{'type',1215,'list',[{'type',1215,'term',[]}]}]]]]}]]]]}]}],
		%% Line 1221
		'spec' =
		    %% Line 1221
		    [{{'node',0},[{'type',1221,'bounded_fun',[{'type',1221,'fun',[{'type',1221,'product',[]}|[{'var',1221,'Node'}]]}|[[{'type',1222,'constraint',[{'atom',1222,'is_subtype'}|[[{'var',1222,'Node'}|[{'type',1222,'node',[]}]]]]}]]]}]}],
		%% Line 1228
		'spec' =
		    %% Line 1228
		    [{{'node',1},[{'type',1228,'bounded_fun',[{'type',1228,'fun',[{'type',1228,'product',[{'var',1228,'Arg'}]}|[{'var',1228,'Node'}]]}|[[{'type',1229,'constraint',[{'atom',1229,'is_subtype'}|[[{'var',1229,'Arg'}|[{'type',1229,'union',[{'type',1229,'pid',[]}|[{'type',1229,'port',[]}|[{'type',1229,'reference',[]}]]]}]]]]}|[{'type',1230,'constraint',[{'atom',1230,'is_subtype'}|[[{'var',1230,'Node'}|[{'type',1230,'node',[]}]]]]}]]]]}]}],
		%% Line 1235
		'spec' =
		    %% Line 1235
		    [{{'now',0},[{'type',1235,'bounded_fun',[{'type',1235,'fun',[{'type',1235,'product',[]}|[{'var',1235,'Timestamp'}]]}|[[{'type',1236,'constraint',[{'atom',1236,'is_subtype'}|[[{'var',1236,'Timestamp'}|[{'type',1236,'timestamp',[]}]]]]}]]]}]}],
		%% Line 1241
		'spec' =
		    %% Line 1241
		    [{{'erlang','phash',2},[{'type',1241,'bounded_fun',[{'type',1241,'fun',[{'type',1241,'product',[{'var',1241,'Term'}|[{'var',1241,'Range'}]]}|[{'var',1241,'Hash'}]]}|[[{'type',1242,'constraint',[{'atom',1242,'is_subtype'}|[[{'var',1242,'Term'}|[{'type',1242,'term',[]}]]]]}|[{'type',1243,'constraint',[{'atom',1243,'is_subtype'}|[[{'var',1243,'Range'}|[{'type',1243,'pos_integer',[]}]]]]}|[{'type',1244,'constraint',[{'atom',1244,'is_subtype'}|[[{'var',1244,'Hash'}|[{'type',1244,'pos_integer',[]}]]]]}]]]]]}]}],
		%% Line 1249
		'spec' =
		    %% Line 1249
		    [{{'erlang','phash2',1},[{'type',1249,'bounded_fun',[{'type',1249,'fun',[{'type',1249,'product',[{'var',1249,'Term'}]}|[{'var',1249,'Hash'}]]}|[[{'type',1250,'constraint',[{'atom',1250,'is_subtype'}|[[{'var',1250,'Term'}|[{'type',1250,'term',[]}]]]]}|[{'type',1251,'constraint',[{'atom',1251,'is_subtype'}|[[{'var',1251,'Hash'}|[{'type',1251,'non_neg_integer',[]}]]]]}]]]]}]}],
		%% Line 1256
		'spec' =
		    %% Line 1256
		    [{{'erlang','phash2',2},[{'type',1256,'bounded_fun',[{'type',1256,'fun',[{'type',1256,'product',[{'var',1256,'Term'}|[{'var',1256,'Range'}]]}|[{'var',1256,'Hash'}]]}|[[{'type',1257,'constraint',[{'atom',1257,'is_subtype'}|[[{'var',1257,'Term'}|[{'type',1257,'term',[]}]]]]}|[{'type',1258,'constraint',[{'atom',1258,'is_subtype'}|[[{'var',1258,'Range'}|[{'type',1258,'pos_integer',[]}]]]]}|[{'type',1259,'constraint',[{'atom',1259,'is_subtype'}|[[{'var',1259,'Hash'}|[{'type',1259,'non_neg_integer',[]}]]]]}]]]]]}]}],
		%% Line 1264
		'spec' =
		    %% Line 1264
		    [{{'pid_to_list',1},[{'type',1264,'bounded_fun',[{'type',1264,'fun',[{'type',1264,'product',[{'var',1264,'Pid'}]}|[{'type',1264,'string',[]}]]}|[[{'type',1265,'constraint',[{'atom',1265,'is_subtype'}|[[{'var',1265,'Pid'}|[{'type',1265,'pid',[]}]]]]}]]]}]}],
		%% Line 1270
		'spec' =
		    %% Line 1270
		    [{{'erlang','port_to_list',1},[{'type',1270,'bounded_fun',[{'type',1270,'fun',[{'type',1270,'product',[{'var',1270,'Port'}]}|[{'type',1270,'string',[]}]]}|[[{'type',1271,'constraint',[{'atom',1271,'is_subtype'}|[[{'var',1271,'Port'}|[{'type',1271,'port',[]}]]]]}]]]}]}],
		%% Line 1276
		'spec' =
		    %% Line 1276
		    [{{'erlang','ports',0},[{'type',1276,'fun',[{'type',1276,'product',[]}|[{'type',1276,'list',[{'type',1276,'port',[]}]}]]}]}],
		%% Line 1281
		'spec' =
		    %% Line 1281
		    [{{'erlang','posixtime_to_universaltime',1},[{'type',1281,'bounded_fun',[{'type',1281,'fun',[{'type',1281,'product',[{'var',1281,'P1'}]}|[{'type',1281,'tuple',[{'remote_type',1281,[{'atom',1281,'calendar'}|[{'atom',1281,'date'}|[[]]]]}|[{'remote_type',1281,[{'atom',1281,'calendar'}|[{'atom',1281,'time'}|[[]]]]}]]}]]}|[[{'type',1282,'constraint',[{'atom',1282,'is_subtype'}|[[{'var',1282,'P1'}|[{'type',1282,'integer',[]}]]]]}]]]}]}],
		%% Line 1287
		'spec' =
		    %% Line 1287
		    [{{'erlang','prepare_loading',2},[{'type',1287,'bounded_fun',[{'type',1287,'fun',[{'type',1287,'product',[{'var',1287,'Module'}|[{'var',1287,'Code'}]]}|[{'type',1287,'union',[{'var',1287,'PreparedCode'}|[{'type',1287,'tuple',[{'atom',1287,'error'}|[{'var',1287,'Reason'}]]}]]}]]}|[[{'type',1288,'constraint',[{'atom',1288,'is_subtype'}|[[{'var',1288,'Module'}|[{'type',1288,'module',[]}]]]]}|[{'type',1289,'constraint',[{'atom',1289,'is_subtype'}|[[{'var',1289,'Code'}|[{'type',1289,'binary',[]}]]]]}|[{'type',1290,'constraint',[{'atom',1290,'is_subtype'}|[[{'var',1290,'PreparedCode'}|[{'type',1290,'binary',[]}]]]]}|[{'type',1291,'constraint',[{'atom',1291,'is_subtype'}|[[{'var',1291,'Reason'}|[{'atom',1291,'bad_file'}]]]]}]]]]]]}]}],
		%% Line 1296
		'spec' =
		    %% Line 1296
		    [{{'pre_loaded',0},[{'type',1296,'fun',[{'type',1296,'product',[]}|[{'type',1296,'list',[{'type',1296,'module',[]}]}]]}]}],
		%% Line 1301
		'spec' =
		    %% Line 1301
		    [{{'erlang','process_display',2},[{'type',1301,'bounded_fun',[{'type',1301,'fun',[{'type',1301,'product',[{'var',1301,'Pid'}|[{'var',1301,'Type'}]]}|[{'atom',1301,'true'}]]}|[[{'type',1302,'constraint',[{'atom',1302,'is_subtype'}|[[{'var',1302,'Pid'}|[{'type',1302,'pid',[]}]]]]}|[{'type',1303,'constraint',[{'atom',1303,'is_subtype'}|[[{'var',1303,'Type'}|[{'atom',1303,'backtrace'}]]]]}]]]]}]}],
		%% Line 1308
		'spec' =
		    %% Line 1308
		    [{{'process_flag',3},[{'type',1308,'bounded_fun',[{'type',1308,'fun',[{'type',1308,'product',[{'var',1308,'Pid'}|[{'var',1308,'Flag'}|[{'var',1308,'Value'}]]]}|[{'var',1308,'OldValue'}]]}|[[{'type',1309,'constraint',[{'atom',1309,'is_subtype'}|[[{'var',1309,'Pid'}|[{'type',1309,'pid',[]}]]]]}|[{'type',1310,'constraint',[{'atom',1310,'is_subtype'}|[[{'var',1310,'Flag'}|[{'atom',1310,'save_calls'}]]]]}|[{'type',1311,'constraint',[{'atom',1311,'is_subtype'}|[[{'var',1311,'Value'}|[{'type',1311,'non_neg_integer',[]}]]]]}|[{'type',1312,'constraint',[{'atom',1312,'is_subtype'}|[[{'var',1312,'OldValue'}|[{'type',1312,'non_neg_integer',[]}]]]]}]]]]]]}]}],
		%% Line 1317
		'spec' =
		    %% Line 1317
		    [{{'process_info',1},[{'type',1317,'bounded_fun',[{'type',1317,'fun',[{'type',1317,'product',[{'var',1317,'Pid'}]}|[{'var',1317,'Info'}]]}|[[{'type',1318,'constraint',[{'atom',1318,'is_subtype'}|[[{'var',1318,'Pid'}|[{'type',1318,'pid',[]}]]]]}|[{'type',1319,'constraint',[{'atom',1319,'is_subtype'}|[[{'var',1319,'Info'}|[{'type',1319,'union',[{'type',1319,'list',[{'var',1319,'InfoTuple'}]}|[{'atom',1319,'undefined'}]]}]]]]}|[{'type',1320,'constraint',[{'atom',1320,'is_subtype'}|[[{'var',1320,'InfoTuple'}|[{'type',1320,'process_info_result_item',[]}]]]]}]]]]]}]}],
		%% Line 1325
		'spec' =
		    %% Line 1325
		    [{{'processes',0},[{'type',1325,'fun',[{'type',1325,'product',[]}|[{'type',1325,'list',[{'type',1325,'pid',[]}]}]]}]}],
		%% Line 1330
		'spec' =
		    %% Line 1330
		    [{{'purge_module',1},[{'type',1330,'bounded_fun',[{'type',1330,'fun',[{'type',1330,'product',[{'var',1330,'Module'}]}|[{'atom',1330,'true'}]]}|[[{'type',1331,'constraint',[{'atom',1331,'is_subtype'}|[[{'var',1331,'Module'}|[{'type',1331,'atom',[]}]]]]}]]]}]}],
		%% Line 1336
		'spec' =
		    %% Line 1336
		    [{{'put',2},[{'type',1336,'bounded_fun',[{'type',1336,'fun',[{'type',1336,'product',[{'var',1336,'Key'}|[{'var',1336,'Val'}]]}|[{'type',1336,'term',[]}]]}|[[{'type',1337,'constraint',[{'atom',1337,'is_subtype'}|[[{'var',1337,'Key'}|[{'type',1337,'term',[]}]]]]}|[{'type',1338,'constraint',[{'atom',1338,'is_subtype'}|[[{'var',1338,'Val'}|[{'type',1338,'term',[]}]]]]}]]]]}]}],
		%% Line 1343
		'spec' =
		    %% Line 1343
		    [{{'erlang','raise',3},[{'type',1343,'bounded_fun',[{'type',1343,'fun',[{'type',1343,'product',[{'var',1343,'Class'}|[{'var',1343,'Reason'}|[{'var',1343,'Stacktrace'}]]]}|[{'type',1343,'no_return',[]}]]}|[[{'type',1344,'constraint',[{'atom',1344,'is_subtype'}|[[{'var',1344,'Class'}|[{'type',1344,'union',[{'atom',1344,'error'}|[{'atom',1344,'exit'}|[{'atom',1344,'throw'}]]]}]]]]}|[{'type',1345,'constraint',[{'atom',1345,'is_subtype'}|[[{'var',1345,'Reason'}|[{'type',1345,'term',[]}]]]]}|[{'type',1346,'constraint',[{'atom',1346,'is_subtype'}|[[{'var',1346,'Stacktrace'}|[{'type',1346,'raise_stacktrace',[]}]]]]}]]]]]}]}],
		%% Line 1351
		'spec' =
		    %% Line 1351
		    [{{'erlang','read_timer',1},[{'type',1351,'bounded_fun',[{'type',1351,'fun',[{'type',1351,'product',[{'var',1351,'TimerRef'}]}|[{'type',1351,'union',[{'type',1351,'non_neg_integer',[]}|[{'atom',1351,'false'}]]}]]}|[[{'type',1352,'constraint',[{'atom',1352,'is_subtype'}|[[{'var',1352,'TimerRef'}|[{'type',1352,'reference',[]}]]]]}]]]}]}],
		%% Line 1357
		'spec' =
		    %% Line 1357
		    [{{'erlang','ref_to_list',1},[{'type',1357,'bounded_fun',[{'type',1357,'fun',[{'type',1357,'product',[{'var',1357,'Ref'}]}|[{'type',1357,'string',[]}]]}|[[{'type',1358,'constraint',[{'atom',1358,'is_subtype'}|[[{'var',1358,'Ref'}|[{'type',1358,'reference',[]}]]]]}]]]}]}],
		%% Line 1363
		'spec' =
		    %% Line 1363
		    [{{'register',2},[{'type',1363,'bounded_fun',[{'type',1363,'fun',[{'type',1363,'product',[{'var',1363,'RegName'}|[{'var',1363,'PidOrPort'}]]}|[{'atom',1363,'true'}]]}|[[{'type',1364,'constraint',[{'atom',1364,'is_subtype'}|[[{'var',1364,'RegName'}|[{'type',1364,'atom',[]}]]]]}|[{'type',1365,'constraint',[{'atom',1365,'is_subtype'}|[[{'var',1365,'PidOrPort'}|[{'type',1365,'union',[{'type',1365,'port',[]}|[{'type',1365,'pid',[]}]]}]]]]}]]]]}]}],
		%% Line 1370
		'spec' =
		    %% Line 1370
		    [{{'registered',0},[{'type',1370,'bounded_fun',[{'type',1370,'fun',[{'type',1370,'product',[]}|[{'type',1370,'list',[{'var',1370,'RegName'}]}]]}|[[{'type',1371,'constraint',[{'atom',1371,'is_subtype'}|[[{'var',1371,'RegName'}|[{'type',1371,'atom',[]}]]]]}]]]}]}],
		%% Line 1376
		'spec' =
		    %% Line 1376
		    [{{'erlang','resume_process',1},[{'type',1376,'bounded_fun',[{'type',1376,'fun',[{'type',1376,'product',[{'var',1376,'Suspendee'}]}|[{'atom',1376,'true'}]]}|[[{'type',1377,'constraint',[{'atom',1377,'is_subtype'}|[[{'var',1377,'Suspendee'}|[{'type',1377,'pid',[]}]]]]}]]]}]}],
		%% Line 1383
		'spec' =
		    %% Line 1383
		    [{{'round',1},[{'type',1383,'bounded_fun',[{'type',1383,'fun',[{'type',1383,'product',[{'var',1383,'Number'}]}|[{'type',1383,'integer',[]}]]}|[[{'type',1384,'constraint',[{'atom',1384,'is_subtype'}|[[{'var',1384,'Number'}|[{'type',1384,'number',[]}]]]]}]]]}]}],
		%% Line 1390
		'spec' =
		    %% Line 1390
		    [{{'self',0},[{'type',1390,'fun',[{'type',1390,'product',[]}|[{'type',1390,'pid',[]}]]}]}],
		%% Line 1395
		'spec' =
		    %% Line 1395
		    [{{'erlang','send_after',3},[{'type',1395,'bounded_fun',[{'type',1395,'fun',[{'type',1395,'product',[{'var',1395,'Time'}|[{'var',1395,'Dest'}|[{'var',1395,'Msg'}]]]}|[{'var',1395,'TimerRef'}]]}|[[{'type',1396,'constraint',[{'atom',1396,'is_subtype'}|[[{'var',1396,'Time'}|[{'type',1396,'non_neg_integer',[]}]]]]}|[{'type',1397,'constraint',[{'atom',1397,'is_subtype'}|[[{'var',1397,'Dest'}|[{'type',1397,'union',[{'type',1397,'pid',[]}|[{'type',1397,'atom',[]}]]}]]]]}|[{'type',1398,'constraint',[{'atom',1398,'is_subtype'}|[[{'var',1398,'Msg'}|[{'type',1398,'term',[]}]]]]}|[{'type',1399,'constraint',[{'atom',1399,'is_subtype'}|[[{'var',1399,'TimerRef'}|[{'type',1399,'reference',[]}]]]]}]]]]]]}]}],
		%% Line 1404
		'spec' =
		    %% Line 1404
		    [{{'erlang','seq_trace',2},[{'type',1404,'bounded_fun',[{'type',1404,'fun',[{'type',1404,'product',[{'var',1404,'P1'}|[{'var',1404,'P2'}]]}|[{'type',1404,'union',[{'type',1404,'seq_trace_info_returns',[]}|[{'type',1404,'tuple',[{'type',1404,'term',[]}|[{'type',1404,'term',[]}|[{'type',1404,'term',[]}|[{'type',1404,'term',[]}|[{'type',1404,'term',[]}]]]]]}]]}]]}|[[{'type',1405,'constraint',[{'atom',1405,'is_subtype'}|[[{'var',1405,'P1'}|[{'type',1405,'atom',[]}]]]]}|[{'type',1406,'constraint',[{'atom',1406,'is_subtype'}|[[{'var',1406,'P2'}|[{'type',1406,'union',[{'type',1406,'boolean',[]}|[{'type',1406,'tuple',[{'type',1406,'integer',[]}|[{'type',1406,'integer',[]}]]}|[{'type',1406,'integer',[]}|[{'type',1406,'nil',[]}]]]]}]]]]}]]]]}]}],
		%% Line 1411
		'spec' =
		    %% Line 1411
		    [{{'erlang','seq_trace_print',1},[{'type',1411,'bounded_fun',[{'type',1411,'fun',[{'type',1411,'product',[{'var',1411,'P1'}]}|[{'type',1411,'boolean',[]}]]}|[[{'type',1412,'constraint',[{'atom',1412,'is_subtype'}|[[{'var',1412,'P1'}|[{'type',1412,'term',[]}]]]]}]]]}]}],
		%% Line 1417
		'spec' =
		    %% Line 1417
		    [{{'erlang','seq_trace_print',2},[{'type',1417,'bounded_fun',[{'type',1417,'fun',[{'type',1417,'product',[{'var',1417,'P1'}|[{'var',1417,'P2'}]]}|[{'type',1417,'boolean',[]}]]}|[[{'type',1418,'constraint',[{'atom',1418,'is_subtype'}|[[{'var',1418,'P1'}|[{'type',1418,'union',[{'type',1418,'atom',[]}|[{'type',1418,'integer',[]}]]}]]]]}|[{'type',1419,'constraint',[{'atom',1419,'is_subtype'}|[[{'var',1419,'P2'}|[{'type',1419,'term',[]}]]]]}]]]]}]}],
		%% Line 1424
		'spec' =
		    %% Line 1424
		    [{{'erlang','setnode',2},[{'type',1424,'bounded_fun',[{'type',1424,'fun',[{'type',1424,'product',[{'var',1424,'P1'}|[{'var',1424,'P2'}]]}|[{'atom',1424,'true'}]]}|[[{'type',1425,'constraint',[{'atom',1425,'is_subtype'}|[[{'var',1425,'P1'}|[{'type',1425,'atom',[]}]]]]}|[{'type',1426,'constraint',[{'atom',1426,'is_subtype'}|[[{'var',1426,'P2'}|[{'type',1426,'integer',[]}]]]]}]]]]}]}],
		%% Line 1431
		'spec' =
		    %% Line 1431
		    [{{'erlang','setnode',3},[{'type',1431,'bounded_fun',[{'type',1431,'fun',[{'type',1431,'product',[{'var',1431,'P1'}|[{'var',1431,'P2'}|[{'var',1431,'P3'}]]]}|[{'atom',1431,'true'}]]}|[[{'type',1432,'constraint',[{'atom',1432,'is_subtype'}|[[{'var',1432,'P1'}|[{'type',1432,'atom',[]}]]]]}|[{'type',1433,'constraint',[{'atom',1433,'is_subtype'}|[[{'var',1433,'P2'}|[{'type',1433,'port',[]}]]]]}|[{'type',1434,'constraint',[{'atom',1434,'is_subtype'}|[[{'var',1434,'P3'}|[{'type',1434,'tuple',[{'type',1434,'term',[]}|[{'type',1434,'term',[]}|[{'type',1434,'term',[]}|[{'type',1434,'term',[]}]]]]}]]]]}]]]]]}]}],
		%% Line 1440
		'spec' =
		    %% Line 1440
		    [{{'size',1},[{'type',1440,'bounded_fun',[{'type',1440,'fun',[{'type',1440,'product',[{'var',1440,'Item'}]}|[{'type',1440,'non_neg_integer',[]}]]}|[[{'type',1441,'constraint',[{'atom',1441,'is_subtype'}|[[{'var',1441,'Item'}|[{'type',1441,'union',[{'type',1441,'tuple','any'}|[{'type',1441,'binary',[]}]]}]]]]}]]]}]}],
		%% Line 1446
		'spec' =
		    %% Line 1446
		    [{{'spawn',3},[{'type',1446,'bounded_fun',[{'type',1446,'fun',[{'type',1446,'product',[{'var',1446,'Module'}|[{'var',1446,'Function'}|[{'var',1446,'Args'}]]]}|[{'type',1446,'pid',[]}]]}|[[{'type',1447,'constraint',[{'atom',1447,'is_subtype'}|[[{'var',1447,'Module'}|[{'type',1447,'module',[]}]]]]}|[{'type',1448,'constraint',[{'atom',1448,'is_subtype'}|[[{'var',1448,'Function'}|[{'type',1448,'atom',[]}]]]]}|[{'type',1449,'constraint',[{'atom',1449,'is_subtype'}|[[{'var',1449,'Args'}|[{'type',1449,'list',[{'type',1449,'term',[]}]}]]]]}]]]]]}]}],
		%% Line 1454
		'spec' =
		    %% Line 1454
		    [{{'spawn_link',3},[{'type',1454,'bounded_fun',[{'type',1454,'fun',[{'type',1454,'product',[{'var',1454,'Module'}|[{'var',1454,'Function'}|[{'var',1454,'Args'}]]]}|[{'type',1454,'pid',[]}]]}|[[{'type',1455,'constraint',[{'atom',1455,'is_subtype'}|[[{'var',1455,'Module'}|[{'type',1455,'module',[]}]]]]}|[{'type',1456,'constraint',[{'atom',1456,'is_subtype'}|[[{'var',1456,'Function'}|[{'type',1456,'atom',[]}]]]]}|[{'type',1457,'constraint',[{'atom',1457,'is_subtype'}|[[{'var',1457,'Args'}|[{'type',1457,'list',[{'type',1457,'term',[]}]}]]]]}]]]]]}]}],
		%% Line 1462
		'spec' =
		    %% Line 1462
		    [{{'split_binary',2},[{'type',1462,'bounded_fun',[{'type',1462,'fun',[{'type',1462,'product',[{'var',1462,'Bin'}|[{'var',1462,'Pos'}]]}|[{'type',1462,'tuple',[{'type',1462,'binary',[]}|[{'type',1462,'binary',[]}]]}]]}|[[{'type',1463,'constraint',[{'atom',1463,'is_subtype'}|[[{'var',1463,'Bin'}|[{'type',1463,'binary',[]}]]]]}|[{'type',1464,'constraint',[{'atom',1464,'is_subtype'}|[[{'var',1464,'Pos'}|[{'type',1464,'non_neg_integer',[]}]]]]}]]]]}]}],
		%% Line 1469
		'spec' =
		    %% Line 1469
		    [{{'erlang','start_timer',3},[{'type',1469,'bounded_fun',[{'type',1469,'fun',[{'type',1469,'product',[{'var',1469,'Time'}|[{'var',1469,'Dest'}|[{'var',1469,'Msg'}]]]}|[{'var',1469,'TimerRef'}]]}|[[{'type',1470,'constraint',[{'atom',1470,'is_subtype'}|[[{'var',1470,'Time'}|[{'type',1470,'non_neg_integer',[]}]]]]}|[{'type',1471,'constraint',[{'atom',1471,'is_subtype'}|[[{'var',1471,'Dest'}|[{'type',1471,'union',[{'type',1471,'pid',[]}|[{'type',1471,'atom',[]}]]}]]]]}|[{'type',1472,'constraint',[{'atom',1472,'is_subtype'}|[[{'var',1472,'Msg'}|[{'type',1472,'term',[]}]]]]}|[{'type',1473,'constraint',[{'atom',1473,'is_subtype'}|[[{'var',1473,'TimerRef'}|[{'type',1473,'reference',[]}]]]]}]]]]]]}]}],
		%% Line 1478
		'spec' =
		    %% Line 1478
		    [{{'erlang','suspend_process',2},[{'type',1478,'bounded_fun',[{'type',1478,'fun',[{'type',1478,'product',[{'var',1478,'Suspendee'}|[{'var',1478,'OptList'}]]}|[{'type',1478,'boolean',[]}]]}|[[{'type',1479,'constraint',[{'atom',1479,'is_subtype'}|[[{'var',1479,'Suspendee'}|[{'type',1479,'pid',[]}]]]]}|[{'type',1480,'constraint',[{'atom',1480,'is_subtype'}|[[{'var',1480,'OptList'}|[{'type',1480,'list',[{'var',1480,'Opt'}]}]]]]}|[{'type',1481,'constraint',[{'atom',1481,'is_subtype'}|[[{'var',1481,'Opt'}|[{'type',1481,'union',[{'atom',1481,'unless_suspending'}|[{'atom',1481,'asynchronous'}]]}]]]]}]]]]]}]}],
		%% Line 1486
		'spec' =
		    %% Line 1486
		    [{{'erlang','system_monitor',0},[{'type',1486,'bounded_fun',[{'type',1486,'fun',[{'type',1486,'product',[]}|[{'var',1486,'MonSettings'}]]}|[[{'type',1487,'constraint',[{'atom',1487,'is_subtype'}|[[{'var',1487,'MonSettings'}|[{'type',1487,'union',[{'atom',1487,'undefined'}|[{'type',1487,'tuple',[{'var',1487,'MonitorPid'}|[{'var',1487,'Options'}]]}]]}]]]]}|[{'type',1488,'constraint',[{'atom',1488,'is_subtype'}|[[{'var',1488,'MonitorPid'}|[{'type',1488,'pid',[]}]]]]}|[{'type',1489,'constraint',[{'atom',1489,'is_subtype'}|[[{'var',1489,'Options'}|[{'type',1489,'list',[{'type',1489,'system_monitor_option',[]}]}]]]]}]]]]]}]}],
		%% Line 1494
		'spec' =
		    %% Line 1494
		    [{{'erlang','system_monitor',1},[{'type',1494,'bounded_fun',[{'type',1494,'fun',[{'type',1494,'product',[{'var',1494,'Arg'}]}|[{'var',1494,'MonSettings'}]]}|[[{'type',1495,'constraint',[{'atom',1495,'is_subtype'}|[[{'var',1495,'Arg'}|[{'type',1495,'union',[{'atom',1495,'undefined'}|[{'type',1495,'tuple',[{'var',1495,'MonitorPid'}|[{'var',1495,'Options'}]]}]]}]]]]}|[{'type',1496,'constraint',[{'atom',1496,'is_subtype'}|[[{'var',1496,'MonSettings'}|[{'type',1496,'union',[{'atom',1496,'undefined'}|[{'type',1496,'tuple',[{'var',1496,'MonitorPid'}|[{'var',1496,'Options'}]]}]]}]]]]}|[{'type',1497,'constraint',[{'atom',1497,'is_subtype'}|[[{'var',1497,'MonitorPid'}|[{'type',1497,'pid',[]}]]]]}|[{'type',1498,'constraint',[{'atom',1498,'is_subtype'}|[[{'var',1498,'Options'}|[{'type',1498,'list',[{'type',1498,'system_monitor_option',[]}]}]]]]}]]]]]]}]}],
		%% Line 1503
		'spec' =
		    %% Line 1503
		    [{{'erlang','system_monitor',2},[{'type',1503,'bounded_fun',[{'type',1503,'fun',[{'type',1503,'product',[{'var',1503,'MonitorPid'}|[{'var',1503,'Options'}]]}|[{'var',1503,'MonSettings'}]]}|[[{'type',1504,'constraint',[{'atom',1504,'is_subtype'}|[[{'var',1504,'MonitorPid'}|[{'type',1504,'pid',[]}]]]]}|[{'type',1505,'constraint',[{'atom',1505,'is_subtype'}|[[{'var',1505,'Options'}|[{'type',1505,'list',[{'type',1505,'system_monitor_option',[]}]}]]]]}|[{'type',1506,'constraint',[{'atom',1506,'is_subtype'}|[[{'var',1506,'MonSettings'}|[{'type',1506,'union',[{'atom',1506,'undefined'}|[{'type',1506,'tuple',[{'var',1506,'OldMonitorPid'}|[{'var',1506,'OldOptions'}]]}]]}]]]]}|[{'type',1507,'constraint',[{'atom',1507,'is_subtype'}|[[{'var',1507,'OldMonitorPid'}|[{'type',1507,'pid',[]}]]]]}|[{'type',1508,'constraint',[{'atom',1508,'is_subtype'}|[[{'var',1508,'OldOptions'}|[{'type',1508,'list',[{'type',1508,'system_monitor_option',[]}]}]]]]}]]]]]]]}]}],
		%% Line 1513
		'spec' =
		    %% Line 1513
		    [{{'erlang','system_profile',0},[{'type',1513,'bounded_fun',[{'type',1513,'fun',[{'type',1513,'product',[]}|[{'var',1513,'ProfilerSettings'}]]}|[[{'type',1514,'constraint',[{'atom',1514,'is_subtype'}|[[{'var',1514,'ProfilerSettings'}|[{'type',1514,'union',[{'atom',1514,'undefined'}|[{'type',1514,'tuple',[{'var',1514,'ProfilerPid'}|[{'var',1514,'Options'}]]}]]}]]]]}|[{'type',1515,'constraint',[{'atom',1515,'is_subtype'}|[[{'var',1515,'ProfilerPid'}|[{'type',1515,'union',[{'type',1515,'pid',[]}|[{'type',1515,'port',[]}]]}]]]]}|[{'type',1516,'constraint',[{'atom',1516,'is_subtype'}|[[{'var',1516,'Options'}|[{'type',1516,'list',[{'type',1516,'system_profile_option',[]}]}]]]]}]]]]]}]}],
		%% Line 1521
		'spec' =
		    %% Line 1521
		    [{{'erlang','system_profile',2},[{'type',1521,'bounded_fun',[{'type',1521,'fun',[{'type',1521,'product',[{'var',1521,'ProfilerPid'}|[{'var',1521,'Options'}]]}|[{'var',1521,'ProfilerSettings'}]]}|[[{'type',1522,'constraint',[{'atom',1522,'is_subtype'}|[[{'var',1522,'ProfilerPid'}|[{'type',1522,'union',[{'type',1522,'pid',[]}|[{'type',1522,'port',[]}|[{'atom',1522,'undefined'}]]]}]]]]}|[{'type',1523,'constraint',[{'atom',1523,'is_subtype'}|[[{'var',1523,'Options'}|[{'type',1523,'list',[{'type',1523,'system_profile_option',[]}]}]]]]}|[{'type',1524,'constraint',[{'atom',1524,'is_subtype'}|[[{'var',1524,'ProfilerSettings'}|[{'type',1524,'union',[{'atom',1524,'undefined'}|[{'type',1524,'tuple',[{'type',1524,'union',[{'type',1524,'pid',[]}|[{'type',1524,'port',[]}]]}|[{'type',1524,'list',[{'type',1524,'system_profile_option',[]}]}]]}]]}]]]]}]]]]]}]}],
		%% Line 1530
		'spec' =
		    %% Line 1530
		    [{{'throw',1},[{'type',1530,'bounded_fun',[{'type',1530,'fun',[{'type',1530,'product',[{'var',1530,'Any'}]}|[{'type',1530,'no_return',[]}]]}|[[{'type',1531,'constraint',[{'atom',1531,'is_subtype'}|[[{'var',1531,'Any'}|[{'type',1531,'term',[]}]]]]}]]]}]}],
		%% Line 1536
		'spec' =
		    %% Line 1536
		    [{{'time',0},[{'type',1536,'bounded_fun',[{'type',1536,'fun',[{'type',1536,'product',[]}|[{'var',1536,'Time'}]]}|[[{'type',1537,'constraint',[{'atom',1537,'is_subtype'}|[[{'var',1537,'Time'}|[{'remote_type',1537,[{'atom',1537,'calendar'}|[{'atom',1537,'time'}|[[]]]]}]]]]}]]]}]}],
		%% Line 1542
		'spec' =
		    %% Line 1542
		    [{{'erlang','trace',3},[{'type',1542,'bounded_fun',[{'type',1542,'fun',[{'type',1542,'product',[{'var',1542,'PidSpec'}|[{'var',1542,'How'}|[{'var',1542,'FlagList'}]]]}|[{'type',1542,'integer',[]}]]}|[[{'type',1543,'constraint',[{'atom',1543,'is_subtype'}|[[{'var',1543,'PidSpec'}|[{'type',1543,'union',[{'type',1543,'pid',[]}|[{'atom',1543,'existing'}|[{'atom',1543,'new'}|[{'atom',1543,'all'}]]]]}]]]]}|[{'type',1544,'constraint',[{'atom',1544,'is_subtype'}|[[{'var',1544,'How'}|[{'type',1544,'boolean',[]}]]]]}|[{'type',1545,'constraint',[{'atom',1545,'is_subtype'}|[[{'var',1545,'FlagList'}|[{'type',1545,'list',[{'type',1545,'trace_flag',[]}]}]]]]}]]]]]}]}],
		%% Line 1550
		'spec' =
		    %% Line 1550
		    [{{'erlang','trace_delivered',1},[{'type',1550,'bounded_fun',[{'type',1550,'fun',[{'type',1550,'product',[{'var',1550,'Tracee'}]}|[{'var',1550,'Ref'}]]}|[[{'type',1551,'constraint',[{'atom',1551,'is_subtype'}|[[{'var',1551,'Tracee'}|[{'type',1551,'union',[{'type',1551,'pid',[]}|[{'atom',1551,'all'}]]}]]]]}|[{'type',1552,'constraint',[{'atom',1552,'is_subtype'}|[[{'var',1552,'Ref'}|[{'type',1552,'reference',[]}]]]]}]]]]}]}],
		%% Line 1557
		'spec' =
		    %% Line 1557
		    [{{'erlang','trace_info',2},[{'type',1557,'bounded_fun',[{'type',1557,'fun',[{'type',1557,'product',[{'var',1557,'PidOrFunc'}|[{'var',1557,'Item'}]]}|[{'var',1557,'Res'}]]}|[[{'type',1558,'constraint',[{'atom',1558,'is_subtype'}|[[{'var',1558,'PidOrFunc'}|[{'type',1558,'union',[{'type',1558,'pid',[]}|[{'atom',1558,'new'}|[{'type',1558,'tuple',[{'var',1558,'Module'}|[{'var',1558,'Function'}|[{'var',1558,'Arity'}]]]}|[{'atom',1558,'on_load'}]]]]}]]]]}|[{'type',1559,'constraint',[{'atom',1559,'is_subtype'}|[[{'var',1559,'Module'}|[{'type',1559,'module',[]}]]]]}|[{'type',1560,'constraint',[{'atom',1560,'is_subtype'}|[[{'var',1560,'Function'}|[{'type',1560,'atom',[]}]]]]}|[{'type',1561,'constraint',[{'atom',1561,'is_subtype'}|[[{'var',1561,'Arity'}|[{'type',1561,'arity',[]}]]]]}|[{'type',1562,'constraint',[{'atom',1562,'is_subtype'}|[[{'var',1562,'Item'}|[{'type',1562,'union',[{'atom',1562,'flags'}|[{'atom',1562,'tracer'}|[{'atom',1562,'traced'}|[{'atom',1562,'match_spec'}|[{'atom',1562,'meta'}|[{'atom',1562,'meta_match_spec'}|[{'atom',1562,'call_count'}|[{'atom',1562,'call_time'}|[{'atom',1562,'all'}]]]]]]]]]}]]]]}|[{'type',1563,'constraint',[{'atom',1563,'is_subtype'}|[[{'var',1563,'Res'}|[{'type',1563,'trace_info_return',[]}]]]]}]]]]]]]]}]}],
		%% Line 1569
		'spec' =
		    %% Line 1569
		    [{{'trunc',1},[{'type',1569,'bounded_fun',[{'type',1569,'fun',[{'type',1569,'product',[{'var',1569,'Number'}]}|[{'type',1569,'integer',[]}]]}|[[{'type',1570,'constraint',[{'atom',1570,'is_subtype'}|[[{'var',1570,'Number'}|[{'type',1570,'number',[]}]]]]}]]]}]}],
		%% Line 1576
		'spec' =
		    %% Line 1576
		    [{{'tuple_size',1},[{'type',1576,'bounded_fun',[{'type',1576,'fun',[{'type',1576,'product',[{'var',1576,'Tuple'}]}|[{'type',1576,'non_neg_integer',[]}]]}|[[{'type',1577,'constraint',[{'atom',1577,'is_subtype'}|[[{'var',1577,'Tuple'}|[{'type',1577,'tuple','any'}]]]]}]]]}]}],
		%% Line 1582
		'spec' =
		    %% Line 1582
		    [{{'erlang','universaltime',0},[{'type',1582,'bounded_fun',[{'type',1582,'fun',[{'type',1582,'product',[]}|[{'var',1582,'DateTime'}]]}|[[{'type',1583,'constraint',[{'atom',1583,'is_subtype'}|[[{'var',1583,'DateTime'}|[{'remote_type',1583,[{'atom',1583,'calendar'}|[{'atom',1583,'datetime'}|[[]]]]}]]]]}]]]}]}],
		%% Line 1588
		'spec' =
		    %% Line 1588
		    [{{'erlang','universaltime_to_posixtime',1},[{'type',1588,'bounded_fun',[{'type',1588,'fun',[{'type',1588,'product',[{'var',1588,'P1'}]}|[{'type',1588,'integer',[]}]]}|[[{'type',1589,'constraint',[{'atom',1589,'is_subtype'}|[[{'var',1589,'P1'}|[{'type',1589,'tuple',[{'remote_type',1589,[{'atom',1589,'calendar'}|[{'atom',1589,'date'}|[[]]]]}|[{'remote_type',1589,[{'atom',1589,'calendar'}|[{'atom',1589,'time'}|[[]]]]}]]}]]]]}]]]}]}],
		%% Line 1594
		'spec' =
		    %% Line 1594
		    [{{'unlink',1},[{'type',1594,'bounded_fun',[{'type',1594,'fun',[{'type',1594,'product',[{'var',1594,'Id'}]}|[{'atom',1594,'true'}]]}|[[{'type',1595,'constraint',[{'atom',1595,'is_subtype'}|[[{'var',1595,'Id'}|[{'type',1595,'union',[{'type',1595,'pid',[]}|[{'type',1595,'port',[]}]]}]]]]}]]]}]}],
		%% Line 1600
		'spec' =
		    %% Line 1600
		    [{{'unregister',1},[{'type',1600,'bounded_fun',[{'type',1600,'fun',[{'type',1600,'product',[{'var',1600,'RegName'}]}|[{'atom',1600,'true'}]]}|[[{'type',1601,'constraint',[{'atom',1601,'is_subtype'}|[[{'var',1601,'RegName'}|[{'type',1601,'atom',[]}]]]]}]]]}]}],
		%% Line 1606
		'spec' =
		    %% Line 1606
		    [{{'whereis',1},[{'type',1606,'bounded_fun',[{'type',1606,'fun',[{'type',1606,'product',[{'var',1606,'RegName'}]}|[{'type',1606,'union',[{'type',1606,'pid',[]}|[{'type',1606,'port',[]}|[{'atom',1606,'undefined'}]]]}]]}|[[{'type',1607,'constraint',[{'atom',1607,'is_subtype'}|[[{'var',1607,'RegName'}|[{'type',1607,'atom',[]}]]]]}]]]}]}],
		%% Line 1620
		'spec' =
		    %% Line 1620
		    [{{'abs',1},[{'type',1620,'bounded_fun',[{'type',1620,'fun',[{'type',1620,'product',[{'var',1620,'Float'}]}|[{'type',1620,'float',[]}]]}|[[{'type',1621,'constraint',[{'atom',1621,'is_subtype'}|[[{'var',1621,'Float'}|[{'type',1621,'float',[]}]]]]}]]]}|[{'type',1622,'bounded_fun',[{'type',1622,'fun',[{'type',1622,'product',[{'var',1622,'Int'}]}|[{'type',1622,'non_neg_integer',[]}]]}|[[{'type',1623,'constraint',[{'atom',1623,'is_subtype'}|[[{'var',1623,'Int'}|[{'type',1623,'integer',[]}]]]]}]]]}]]}],
		%% Line 1629
		'spec' =
		    %% Line 1629
		    [{{'erlang','append',2},[{'type',1629,'bounded_fun',[{'type',1629,'fun',[{'type',1629,'product',[{'var',1629,'List'}|[{'var',1629,'Tail'}]]}|[{'type',1629,'maybe_improper_list',[]}]]}|[[{'type',1630,'constraint',[{'atom',1630,'is_subtype'}|[[{'var',1630,'List'}|[{'type',1630,'list',[{'type',1630,'term',[]}]}]]]]}|[{'type',1631,'constraint',[{'atom',1631,'is_subtype'}|[[{'var',1631,'Tail'}|[{'type',1631,'term',[]}]]]]}]]]]}]}],
		%% Line 1636
		'spec' =
		    %% Line 1636
		    [{{'element',2},[{'type',1636,'bounded_fun',[{'type',1636,'fun',[{'type',1636,'product',[{'var',1636,'N'}|[{'var',1636,'Tuple'}]]}|[{'type',1636,'term',[]}]]}|[[{'type',1637,'constraint',[{'atom',1637,'is_subtype'}|[[{'var',1637,'N'}|[{'type',1637,'pos_integer',[]}]]]]}|[{'type',1638,'constraint',[{'atom',1638,'is_subtype'}|[[{'var',1638,'Tuple'}|[{'type',1638,'tuple','any'}]]]]}]]]]}]}],
		%% Line 1643
		'spec' =
		    %% Line 1643
		    [{{'erlang','get_module_info',2},[{'type',1643,'bounded_fun',[{'type',1643,'fun',[{'type',1643,'product',[{'var',1643,'Module'}|[{'var',1643,'Item'}]]}|[{'var',1643,'ModuleInfo'}]]}|[[{'type',1644,'constraint',[{'atom',1644,'is_subtype'}|[[{'var',1644,'Module'}|[{'type',1644,'atom',[]}]]]]}|[{'type',1645,'constraint',[{'atom',1645,'is_subtype'}|[[{'var',1645,'Item'}|[{'type',1645,'union',[{'atom',1645,'module'}|[{'atom',1645,'imports'}|[{'atom',1645,'exports'}|[{'atom',1645,'functions'}|[{'atom',1645,'attributes'}|[{'atom',1645,'compile'}|[{'atom',1645,'native_addresses'}]]]]]]]}]]]]}|[{'type',1646,'constraint',[{'atom',1646,'is_subtype'}|[[{'var',1646,'ModuleInfo'}|[{'type',1646,'union',[{'type',1646,'atom',[]}|[{'type',1646,'nil',[]}|[{'type',1646,'list',[{'type',1646,'tuple',[{'type',1646,'atom',[]}|[{'type',1646,'arity',[]}]]}]}|[{'type',1646,'list',[{'type',1646,'tuple',[{'type',1646,'atom',[]}|[{'type',1646,'term',[]}]]}]}|[{'type',1646,'list',[{'type',1646,'tuple',[{'type',1646,'atom',[]}|[{'type',1646,'arity',[]}|[{'type',1646,'integer',[]}]]]}]}]]]]]}]]]]}]]]]]}]}],
		%% Line 1651
		'spec' =
		    %% Line 1651
		    [{{'hd',1},[{'type',1651,'bounded_fun',[{'type',1651,'fun',[{'type',1651,'product',[{'var',1651,'List'}]}|[{'type',1651,'term',[]}]]}|[[{'type',1652,'constraint',[{'atom',1652,'is_subtype'}|[[{'var',1652,'List'}|[{'type',1652,'nonempty_list',[{'type',1652,'term',[]}]}]]]]}]]]}]}],
		%% Line 1659
		'spec' =
		    %% Line 1659
		    [{{'is_atom',1},[{'type',1659,'bounded_fun',[{'type',1659,'fun',[{'type',1659,'product',[{'var',1659,'Term'}]}|[{'type',1659,'boolean',[]}]]}|[[{'type',1660,'constraint',[{'atom',1660,'is_subtype'}|[[{'var',1660,'Term'}|[{'type',1660,'term',[]}]]]]}]]]}]}],
		%% Line 1665
		'spec' =
		    %% Line 1665
		    [{{'is_binary',1},[{'type',1665,'bounded_fun',[{'type',1665,'fun',[{'type',1665,'product',[{'var',1665,'Term'}]}|[{'type',1665,'boolean',[]}]]}|[[{'type',1666,'constraint',[{'atom',1666,'is_subtype'}|[[{'var',1666,'Term'}|[{'type',1666,'term',[]}]]]]}]]]}]}],
		%% Line 1671
		'spec' =
		    %% Line 1671
		    [{{'is_bitstring',1},[{'type',1671,'bounded_fun',[{'type',1671,'fun',[{'type',1671,'product',[{'var',1671,'Term'}]}|[{'type',1671,'boolean',[]}]]}|[[{'type',1672,'constraint',[{'atom',1672,'is_subtype'}|[[{'var',1672,'Term'}|[{'type',1672,'term',[]}]]]]}]]]}]}],
		%% Line 1677
		'spec' =
		    %% Line 1677
		    [{{'is_boolean',1},[{'type',1677,'bounded_fun',[{'type',1677,'fun',[{'type',1677,'product',[{'var',1677,'Term'}]}|[{'type',1677,'boolean',[]}]]}|[[{'type',1678,'constraint',[{'atom',1678,'is_subtype'}|[[{'var',1678,'Term'}|[{'type',1678,'term',[]}]]]]}]]]}]}],
		%% Line 1683
		'spec' =
		    %% Line 1683
		    [{{'is_float',1},[{'type',1683,'bounded_fun',[{'type',1683,'fun',[{'type',1683,'product',[{'var',1683,'Term'}]}|[{'type',1683,'boolean',[]}]]}|[[{'type',1684,'constraint',[{'atom',1684,'is_subtype'}|[[{'var',1684,'Term'}|[{'type',1684,'term',[]}]]]]}]]]}]}],
		%% Line 1689
		'spec' =
		    %% Line 1689
		    [{{'is_function',1},[{'type',1689,'bounded_fun',[{'type',1689,'fun',[{'type',1689,'product',[{'var',1689,'Term'}]}|[{'type',1689,'boolean',[]}]]}|[[{'type',1690,'constraint',[{'atom',1690,'is_subtype'}|[[{'var',1690,'Term'}|[{'type',1690,'term',[]}]]]]}]]]}]}],
		%% Line 1695
		'spec' =
		    %% Line 1695
		    [{{'is_function',2},[{'type',1695,'bounded_fun',[{'type',1695,'fun',[{'type',1695,'product',[{'var',1695,'Term'}|[{'var',1695,'Arity'}]]}|[{'type',1695,'boolean',[]}]]}|[[{'type',1696,'constraint',[{'atom',1696,'is_subtype'}|[[{'var',1696,'Term'}|[{'type',1696,'term',[]}]]]]}|[{'type',1697,'constraint',[{'atom',1697,'is_subtype'}|[[{'var',1697,'Arity'}|[{'type',1697,'arity',[]}]]]]}]]]]}]}],
		%% Line 1702
		'spec' =
		    %% Line 1702
		    [{{'is_integer',1},[{'type',1702,'bounded_fun',[{'type',1702,'fun',[{'type',1702,'product',[{'var',1702,'Term'}]}|[{'type',1702,'boolean',[]}]]}|[[{'type',1703,'constraint',[{'atom',1703,'is_subtype'}|[[{'var',1703,'Term'}|[{'type',1703,'term',[]}]]]]}]]]}]}],
		%% Line 1708
		'spec' =
		    %% Line 1708
		    [{{'is_list',1},[{'type',1708,'bounded_fun',[{'type',1708,'fun',[{'type',1708,'product',[{'var',1708,'Term'}]}|[{'type',1708,'boolean',[]}]]}|[[{'type',1709,'constraint',[{'atom',1709,'is_subtype'}|[[{'var',1709,'Term'}|[{'type',1709,'term',[]}]]]]}]]]}]}],
		%% Line 1714
		'spec' =
		    %% Line 1714
		    [{{'is_number',1},[{'type',1714,'bounded_fun',[{'type',1714,'fun',[{'type',1714,'product',[{'var',1714,'Term'}]}|[{'type',1714,'boolean',[]}]]}|[[{'type',1715,'constraint',[{'atom',1715,'is_subtype'}|[[{'var',1715,'Term'}|[{'type',1715,'term',[]}]]]]}]]]}]}],
		%% Line 1720
		'spec' =
		    %% Line 1720
		    [{{'is_pid',1},[{'type',1720,'bounded_fun',[{'type',1720,'fun',[{'type',1720,'product',[{'var',1720,'Term'}]}|[{'type',1720,'boolean',[]}]]}|[[{'type',1721,'constraint',[{'atom',1721,'is_subtype'}|[[{'var',1721,'Term'}|[{'type',1721,'term',[]}]]]]}]]]}]}],
		%% Line 1726
		'spec' =
		    %% Line 1726
		    [{{'is_map',1},[{'type',1726,'bounded_fun',[{'type',1726,'fun',[{'type',1726,'product',[{'var',1726,'Term'}]}|[{'type',1726,'boolean',[]}]]}|[[{'type',1727,'constraint',[{'atom',1727,'is_subtype'}|[[{'var',1727,'Term'}|[{'type',1727,'term',[]}]]]]}]]]}]}],
		%% Line 1732
		'spec' =
		    %% Line 1732
		    [{{'is_port',1},[{'type',1732,'bounded_fun',[{'type',1732,'fun',[{'type',1732,'product',[{'var',1732,'Term'}]}|[{'type',1732,'boolean',[]}]]}|[[{'type',1733,'constraint',[{'atom',1733,'is_subtype'}|[[{'var',1733,'Term'}|[{'type',1733,'term',[]}]]]]}]]]}]}],
		%% Line 1738
		'spec' =
		    %% Line 1738
		    [{{'is_record',2},[{'type',1738,'bounded_fun',[{'type',1738,'fun',[{'type',1738,'product',[{'var',1738,'Term'}|[{'var',1738,'RecordTag'}]]}|[{'type',1738,'boolean',[]}]]}|[[{'type',1739,'constraint',[{'atom',1739,'is_subtype'}|[[{'var',1739,'Term'}|[{'type',1739,'term',[]}]]]]}|[{'type',1740,'constraint',[{'atom',1740,'is_subtype'}|[[{'var',1740,'RecordTag'}|[{'type',1740,'atom',[]}]]]]}]]]]}]}],
		%% Line 1745
		'spec' =
		    %% Line 1745
		    [{{'is_record',3},[{'type',1745,'bounded_fun',[{'type',1745,'fun',[{'type',1745,'product',[{'var',1745,'Term'}|[{'var',1745,'RecordTag'}|[{'var',1745,'Size'}]]]}|[{'type',1745,'boolean',[]}]]}|[[{'type',1746,'constraint',[{'atom',1746,'is_subtype'}|[[{'var',1746,'Term'}|[{'type',1746,'term',[]}]]]]}|[{'type',1747,'constraint',[{'atom',1747,'is_subtype'}|[[{'var',1747,'RecordTag'}|[{'type',1747,'atom',[]}]]]]}|[{'type',1748,'constraint',[{'atom',1748,'is_subtype'}|[[{'var',1748,'Size'}|[{'type',1748,'non_neg_integer',[]}]]]]}]]]]]}]}],
		%% Line 1753
		'spec' =
		    %% Line 1753
		    [{{'is_reference',1},[{'type',1753,'bounded_fun',[{'type',1753,'fun',[{'type',1753,'product',[{'var',1753,'Term'}]}|[{'type',1753,'boolean',[]}]]}|[[{'type',1754,'constraint',[{'atom',1754,'is_subtype'}|[[{'var',1754,'Term'}|[{'type',1754,'term',[]}]]]]}]]]}]}],
		%% Line 1759
		'spec' =
		    %% Line 1759
		    [{{'is_tuple',1},[{'type',1759,'bounded_fun',[{'type',1759,'fun',[{'type',1759,'product',[{'var',1759,'Term'}]}|[{'type',1759,'boolean',[]}]]}|[[{'type',1760,'constraint',[{'atom',1760,'is_subtype'}|[[{'var',1760,'Term'}|[{'type',1760,'term',[]}]]]]}]]]}]}],
		%% Line 1764
		'spec' =
		    %% Line 1764
		    [{{'load_module',2},[{'type',1764,'bounded_fun',[{'type',1764,'fun',[{'type',1764,'product',[{'var',1764,'Module'}|[{'var',1764,'Binary'}]]}|[{'type',1764,'union',[{'type',1764,'tuple',[{'atom',1764,'module'}|[{'var',1764,'Module'}]]}|[{'type',1764,'tuple',[{'atom',1764,'error'}|[{'var',1764,'Reason'}]]}]]}]]}|[[{'type',1765,'constraint',[{'atom',1765,'is_subtype'}|[[{'var',1765,'Module'}|[{'type',1765,'module',[]}]]]]}|[{'type',1766,'constraint',[{'atom',1766,'is_subtype'}|[[{'var',1766,'Binary'}|[{'type',1766,'binary',[]}]]]]}|[{'type',1767,'constraint',[{'atom',1767,'is_subtype'}|[[{'var',1767,'Reason'}|[{'type',1767,'union',[{'atom',1767,'badfile'}|[{'atom',1767,'not_purged'}|[{'atom',1767,'on_load'}]]]}]]]]}]]]]]}]}],
		%% Line 1781
		'spec' =
		    %% Line 1781
		    [{{'erlang','load_nif',2},[{'type',1781,'bounded_fun',[{'type',1781,'fun',[{'type',1781,'product',[{'var',1781,'Path'}|[{'var',1781,'LoadInfo'}]]}|[{'type',1781,'union',[{'atom',1781,'ok'}|[{'var',1781,'Error'}]]}]]}|[[{'type',1782,'constraint',[{'atom',1782,'is_subtype'}|[[{'var',1782,'Path'}|[{'type',1782,'string',[]}]]]]}|[{'type',1783,'constraint',[{'atom',1783,'is_subtype'}|[[{'var',1783,'LoadInfo'}|[{'type',1783,'term',[]}]]]]}|[{'type',1784,'constraint',[{'atom',1784,'is_subtype'}|[[{'var',1784,'Error'}|[{'type',1784,'tuple',[{'atom',1784,'error'}|[{'type',1784,'tuple',[{'var',1784,'Reason'}|[{'ann_type',1784,[{'var',1784,'Text'}|[{'type',1784,'string',[]}]]}]]}]]}]]]]}|[{'type',1785,'constraint',[{'atom',1785,'is_subtype'}|[[{'var',1785,'Reason'}|[{'type',1785,'union',[{'atom',1785,'load_failed'}|[{'atom',1785,'bad_lib'}|[{'atom',1785,'load'}|[{'atom',1785,'reload'}|[{'atom',1785,'upgrade'}|[{'atom',1785,'old_code'}]]]]]]}]]]]}]]]]]]}]}],
		%% Line 1789
		'spec' =
		    %% Line 1789
		    [{{'erlang','localtime_to_universaltime',2},[{'type',1789,'bounded_fun',[{'type',1789,'fun',[{'type',1789,'product',[{'var',1789,'Localtime'}|[{'var',1789,'IsDst'}]]}|[{'var',1789,'Universaltime'}]]}|[[{'type',1790,'constraint',[{'atom',1790,'is_subtype'}|[[{'var',1790,'Localtime'}|[{'remote_type',1790,[{'atom',1790,'calendar'}|[{'atom',1790,'datetime'}|[[]]]]}]]]]}|[{'type',1791,'constraint',[{'atom',1791,'is_subtype'}|[[{'var',1791,'Universaltime'}|[{'remote_type',1791,[{'atom',1791,'calendar'}|[{'atom',1791,'datetime'}|[[]]]]}]]]]}|[{'type',1792,'constraint',[{'atom',1792,'is_subtype'}|[[{'var',1792,'IsDst'}|[{'type',1792,'union',[{'atom',1792,'true'}|[{'atom',1792,'false'}|[{'atom',1792,'undefined'}]]]}]]]]}]]]]]}]}],
		%% Line 1799
		'spec' =
		    %% Line 1799
		    [{{'erlang','make_fun',3},[{'type',1799,'bounded_fun',[{'type',1799,'fun',[{'type',1799,'product',[{'var',1799,'Module'}|[{'var',1799,'Function'}|[{'var',1799,'Arity'}]]]}|[{'type',1799,'function',[]}]]}|[[{'type',1800,'constraint',[{'atom',1800,'is_subtype'}|[[{'var',1800,'Module'}|[{'type',1800,'atom',[]}]]]]}|[{'type',1801,'constraint',[{'atom',1801,'is_subtype'}|[[{'var',1801,'Function'}|[{'type',1801,'atom',[]}]]]]}|[{'type',1802,'constraint',[{'atom',1802,'is_subtype'}|[[{'var',1802,'Arity'}|[{'type',1802,'arity',[]}]]]]}]]]]]}]}],
		%% Line 1807
		'spec' =
		    %% Line 1807
		    [{{'erlang','make_tuple',2},[{'type',1807,'bounded_fun',[{'type',1807,'fun',[{'type',1807,'product',[{'var',1807,'Arity'}|[{'var',1807,'InitialValue'}]]}|[{'type',1807,'tuple','any'}]]}|[[{'type',1808,'constraint',[{'atom',1808,'is_subtype'}|[[{'var',1808,'Arity'}|[{'type',1808,'arity',[]}]]]]}|[{'type',1809,'constraint',[{'atom',1809,'is_subtype'}|[[{'var',1809,'InitialValue'}|[{'type',1809,'term',[]}]]]]}]]]]}]}],
		%% Line 1814
		'spec' =
		    %% Line 1814
		    [{{'erlang','make_tuple',3},[{'type',1814,'bounded_fun',[{'type',1814,'fun',[{'type',1814,'product',[{'var',1814,'Arity'}|[{'var',1814,'DefaultValue'}|[{'var',1814,'InitList'}]]]}|[{'type',1814,'tuple','any'}]]}|[[{'type',1815,'constraint',[{'atom',1815,'is_subtype'}|[[{'var',1815,'Arity'}|[{'type',1815,'arity',[]}]]]]}|[{'type',1816,'constraint',[{'atom',1816,'is_subtype'}|[[{'var',1816,'DefaultValue'}|[{'type',1816,'term',[]}]]]]}|[{'type',1817,'constraint',[{'atom',1817,'is_subtype'}|[[{'var',1817,'InitList'}|[{'type',1817,'list',[{'type',1817,'tuple',[{'ann_type',1817,[{'var',1817,'Position'}|[{'type',1817,'pos_integer',[]}]]}|[{'type',1817,'term',[]}]]}]}]]]]}]]]]]}]}],
		%% Line 1821
		'spec' =
		    %% Line 1821
		    [{{'nodes',1},[{'type',1821,'bounded_fun',[{'type',1821,'fun',[{'type',1821,'product',[{'var',1821,'Arg'}]}|[{'var',1821,'Nodes'}]]}|[[{'type',1822,'constraint',[{'atom',1822,'is_subtype'}|[[{'var',1822,'Arg'}|[{'type',1822,'union',[{'var',1822,'NodeType'}|[{'type',1822,'list',[{'var',1822,'NodeType'}]}]]}]]]]}|[{'type',1823,'constraint',[{'atom',1823,'is_subtype'}|[[{'var',1823,'NodeType'}|[{'type',1823,'union',[{'atom',1823,'visible'}|[{'atom',1823,'hidden'}|[{'atom',1823,'connected'}|[{'atom',1823,'this'}|[{'atom',1823,'known'}]]]]]}]]]]}|[{'type',1824,'constraint',[{'atom',1824,'is_subtype'}|[[{'var',1824,'Nodes'}|[{'type',1824,'list',[{'type',1824,'node',[]}]}]]]]}]]]]]}]}],
		%% Line 1828
		'spec' =
		    %% Line 1828
		    [{{'open_port',2},[{'type',1828,'bounded_fun',[{'type',1828,'fun',[{'type',1828,'product',[{'var',1828,'PortName'}|[{'var',1828,'PortSettings'}]]}|[{'type',1828,'port',[]}]]}|[[{'type',1829,'constraint',[{'atom',1829,'is_subtype'}|[[{'var',1829,'PortName'}|[{'type',1829,'union',[{'type',1829,'tuple',[{'atom',1829,'spawn'}|[{'ann_type',1829,[{'var',1829,'Command'}|[{'type',1829,'union',[{'type',1829,'string',[]}|[{'type',1829,'binary',[]}]]}]]}]]}|[{'type',1830,'tuple',[{'atom',1830,'spawn_driver'}|[{'ann_type',1830,[{'var',1830,'Command'}|[{'type',1830,'union',[{'type',1830,'string',[]}|[{'type',1830,'binary',[]}]]}]]}]]}|[{'type',1831,'tuple',[{'atom',1831,'spawn_executable'}|[{'ann_type',1831,[{'var',1831,'FileName'}|[{'remote_type',1831,[{'atom',1831,'file'}|[{'atom',1831,'name'}|[[]]]]}]]}]]}|[{'type',1832,'tuple',[{'atom',1832,'fd'}|[{'ann_type',1832,[{'var',1832,'In'}|[{'type',1832,'non_neg_integer',[]}]]}|[{'ann_type',1832,[{'var',1832,'Out'}|[{'type',1832,'non_neg_integer',[]}]]}]]]}]]]]}]]]]}|[{'type',1833,'constraint',[{'atom',1833,'is_subtype'}|[[{'var',1833,'PortSettings'}|[{'type',1833,'list',[{'var',1833,'Opt'}]}]]]]}|[{'type',1834,'constraint',[{'atom',1834,'is_subtype'}|[[{'var',1834,'Opt'}|[{'type',1834,'union',[{'type',1834,'tuple',[{'atom',1834,'packet'}|[{'ann_type',1834,[{'var',1834,'N'}|[{'type',1834,'union',[{'integer',1834,1}|[{'integer',1834,2}|[{'integer',1834,4}]]]}]]}]]}|[{'atom',1835,'stream'}|[{'type',1836,'tuple',[{'atom',1836,'line'}|[{'ann_type',1836,[{'var',1836,'L'}|[{'type',1836,'non_neg_integer',[]}]]}]]}|[{'type',1837,'tuple',[{'atom',1837,'cd'}|[{'ann_type',1837,[{'var',1837,'Dir'}|[{'type',1837,'union',[{'type',1837,'string',[]}|[{'type',1837,'binary',[]}]]}]]}]]}|[{'type',1838,'tuple',[{'atom',1838,'env'}|[{'ann_type',1838,[{'var',1838,'Env'}|[{'type',1838,'list',[{'type',1838,'tuple',[{'ann_type',1838,[{'var',1838,'Name'}|[{'type',1838,'string',[]}]]}|[{'ann_type',1838,[{'var',1838,'Val'}|[{'type',1838,'union',[{'type',1838,'string',[]}|[{'atom',1838,'false'}]]}]]}]]}]}]]}]]}|[{'type',1839,'tuple',[{'atom',1839,'args'}|[{'type',1839,'list',[{'type',1839,'union',[{'type',1839,'string',[]}|[{'type',1839,'binary',[]}]]}]}]]}|[{'type',1840,'tuple',[{'atom',1840,'arg0'}|[{'type',1840,'union',[{'type',1840,'string',[]}|[{'type',1840,'binary',[]}]]}]]}|[{'atom',1841,'exit_status'}|[{'atom',1842,'use_stdio'}|[{'atom',1843,'nouse_stdio'}|[{'atom',1844,'stderr_to_stdout'}|[{'atom',1845,'in'}|[{'atom',1846,'out'}|[{'atom',1847,'binary'}|[{'atom',1848,'eof'}|[{'type',1849,'tuple',[{'atom',1849,'parallelism'}|[{'ann_type',1849,[{'var',1849,'Boolean'}|[{'type',1849,'boolean',[]}]]}]]}|[{'atom',1850,'hide'}]]]]]]]]]]]]]]]]]}]]]]}]]]]]}]}],
		%% Line 1854
		'type' =
		    %% Line 1854
		    [{'priority_level',{'type',1855,'union',[{'atom',1855,'low'}|[{'atom',1855,'normal'}|[{'atom',1855,'high'}|[{'atom',1855,'max'}]]]]},[]}],
		%% Line 1857
		'spec' =
		    %% Line 1857
		    [{{'process_flag',2},[{'type',1857,'bounded_fun',[{'type',1857,'fun',[{'type',1857,'product',[{'atom',1857,'trap_exit'}|[{'var',1857,'Boolean'}]]}|[{'var',1857,'OldBoolean'}]]}|[[{'type',1858,'constraint',[{'atom',1858,'is_subtype'}|[[{'var',1858,'Boolean'}|[{'type',1858,'boolean',[]}]]]]}|[{'type',1859,'constraint',[{'atom',1859,'is_subtype'}|[[{'var',1859,'OldBoolean'}|[{'type',1859,'boolean',[]}]]]]}]]]]}|[{'type',1860,'bounded_fun',[{'type',1860,'fun',[{'type',1860,'product',[{'atom',1860,'error_handler'}|[{'var',1860,'Module'}]]}|[{'var',1860,'OldModule'}]]}|[[{'type',1861,'constraint',[{'atom',1861,'is_subtype'}|[[{'var',1861,'Module'}|[{'type',1861,'atom',[]}]]]]}|[{'type',1862,'constraint',[{'atom',1862,'is_subtype'}|[[{'var',1862,'OldModule'}|[{'type',1862,'atom',[]}]]]]}]]]]}|[{'type',1863,'bounded_fun',[{'type',1863,'fun',[{'type',1863,'product',[{'atom',1863,'min_heap_size'}|[{'var',1863,'MinHeapSize'}]]}|[{'var',1863,'OldMinHeapSize'}]]}|[[{'type',1864,'constraint',[{'atom',1864,'is_subtype'}|[[{'var',1864,'MinHeapSize'}|[{'type',1864,'non_neg_integer',[]}]]]]}|[{'type',1865,'constraint',[{'atom',1865,'is_subtype'}|[[{'var',1865,'OldMinHeapSize'}|[{'type',1865,'non_neg_integer',[]}]]]]}]]]]}|[{'type',1866,'bounded_fun',[{'type',1866,'fun',[{'type',1866,'product',[{'atom',1866,'min_bin_vheap_size'}|[{'var',1866,'MinBinVHeapSize'}]]}|[{'var',1866,'OldMinBinVHeapSize'}]]}|[[{'type',1867,'constraint',[{'atom',1867,'is_subtype'}|[[{'var',1867,'MinBinVHeapSize'}|[{'type',1867,'non_neg_integer',[]}]]]]}|[{'type',1868,'constraint',[{'atom',1868,'is_subtype'}|[[{'var',1868,'OldMinBinVHeapSize'}|[{'type',1868,'non_neg_integer',[]}]]]]}]]]]}|[{'type',1869,'bounded_fun',[{'type',1869,'fun',[{'type',1869,'product',[{'atom',1869,'priority'}|[{'var',1869,'Level'}]]}|[{'var',1869,'OldLevel'}]]}|[[{'type',1870,'constraint',[{'atom',1870,'is_subtype'}|[[{'var',1870,'Level'}|[{'type',1870,'priority_level',[]}]]]]}|[{'type',1871,'constraint',[{'atom',1871,'is_subtype'}|[[{'var',1871,'OldLevel'}|[{'type',1871,'priority_level',[]}]]]]}]]]]}|[{'type',1872,'bounded_fun',[{'type',1872,'fun',[{'type',1872,'product',[{'atom',1872,'save_calls'}|[{'var',1872,'N'}]]}|[{'var',1872,'OldN'}]]}|[[{'type',1873,'constraint',[{'atom',1873,'is_subtype'}|[[{'var',1873,'N'}|[{'type',1873,'range',[{'integer',1873,0}|[{'integer',1873,10000}]]}]]]]}|[{'type',1874,'constraint',[{'atom',1874,'is_subtype'}|[[{'var',1874,'OldN'}|[{'type',1874,'range',[{'integer',1874,0}|[{'integer',1874,10000}]]}]]]]}]]]]}|[{'type',1875,'bounded_fun',[{'type',1875,'fun',[{'type',1875,'product',[{'atom',1875,'sensitive'}|[{'var',1875,'Boolean'}]]}|[{'var',1875,'OldBoolean'}]]}|[[{'type',1876,'constraint',[{'atom',1876,'is_subtype'}|[[{'var',1876,'Boolean'}|[{'type',1876,'boolean',[]}]]]]}|[{'type',1877,'constraint',[{'atom',1877,'is_subtype'}|[[{'var',1877,'OldBoolean'}|[{'type',1877,'boolean',[]}]]]]}]]]]}|[{'type',1879,'fun',[{'type',1879,'product',[{'type',1879,'tuple',[{'atom',1879,'monitor_nodes'}|[{'type',1879,'term',[]}]]}|[{'type',1879,'term',[]}]]}|[{'type',1879,'term',[]}]]}|[{'type',1880,'fun',[{'type',1880,'product',[{'atom',1880,'monitor_nodes'}|[{'type',1880,'term',[]}]]}|[{'type',1880,'term',[]}]]}]]]]]]]]]}],
		%% Line 1885
		'type' =
		    %% Line 1885
		    [{'process_info_item',{'type',1886,'union',[{'atom',1886,'backtrace'}|[{'atom',1887,'binary'}|[{'atom',1888,'catchlevel'}|[{'atom',1889,'current_function'}|[{'atom',1890,'current_location'}|[{'atom',1891,'current_stacktrace'}|[{'atom',1892,'dictionary'}|[{'atom',1893,'error_handler'}|[{'atom',1894,'garbage_collection'}|[{'atom',1895,'group_leader'}|[{'atom',1896,'heap_size'}|[{'atom',1897,'initial_call'}|[{'atom',1898,'links'}|[{'atom',1899,'last_calls'}|[{'atom',1900,'memory'}|[{'atom',1901,'message_queue_len'}|[{'atom',1902,'messages'}|[{'atom',1903,'min_heap_size'}|[{'atom',1904,'min_bin_vheap_size'}|[{'atom',1905,'monitored_by'}|[{'atom',1906,'monitors'}|[{'atom',1907,'priority'}|[{'atom',1908,'reductions'}|[{'atom',1909,'registered_name'}|[{'atom',1910,'sequential_trace_token'}|[{'atom',1911,'stack_size'}|[{'atom',1912,'status'}|[{'atom',1913,'suspending'}|[{'atom',1914,'total_heap_size'}|[{'atom',1915,'trace'}|[{'atom',1916,'trap_exit'}]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]},[]}],
		%% Line 1918
		'type' =
		    %% Line 1918
		    [{'process_info_result_item',{'type',1919,'union',[{'type',1919,'tuple',[{'atom',1919,'backtrace'}|[{'ann_type',1919,[{'var',1919,'Bin'}|[{'type',1919,'binary',[]}]]}]]}|[{'type',1920,'tuple',[{'atom',1920,'binary'}|[{'ann_type',1920,[{'var',1920,'BinInfo'}|[{'type',1920,'list',[{'type',1920,'tuple',[{'type',1920,'non_neg_integer',[]}|[{'type',1921,'non_neg_integer',[]}|[{'type',1922,'non_neg_integer',[]}]]]}]}]]}]]}|[{'type',1923,'tuple',[{'atom',1923,'catchlevel'}|[{'ann_type',1923,[{'var',1923,'CatchLevel'}|[{'type',1923,'non_neg_integer',[]}]]}]]}|[{'type',1924,'tuple',[{'atom',1924,'current_function'}|[{'type',1925,'tuple',[{'ann_type',1925,[{'var',1925,'Module'}|[{'type',1925,'module',[]}]]}|[{'ann_type',1925,[{'var',1925,'Function'}|[{'type',1925,'atom',[]}]]}|[{'ann_type',1925,[{'var',1925,'Arity'}|[{'type',1925,'arity',[]}]]}]]]}]]}|[{'type',1926,'tuple',[{'atom',1926,'current_location'}|[{'type',1927,'tuple',[{'ann_type',1927,[{'var',1927,'Module'}|[{'type',1927,'module',[]}]]}|[{'ann_type',1927,[{'var',1927,'Function'}|[{'type',1927,'atom',[]}]]}|[{'ann_type',1927,[{'var',1927,'Arity'}|[{'type',1927,'arity',[]}]]}|[{'ann_type',1928,[{'var',1928,'Location'}|[{'type',1928,'list',[{'type',1928,'union',[{'type',1928,'tuple',[{'atom',1928,'file'}|[{'ann_type',1928,[{'var',1928,'Filename'}|[{'type',1928,'string',[]}]]}]]}|[{'type',1929,'tuple',[{'atom',1929,'line'}|[{'ann_type',1929,[{'var',1929,'Line'}|[{'type',1929,'pos_integer',[]}]]}]]}]]}]}]]}]]]]}]]}|[{'type',1930,'tuple',[{'atom',1930,'current_stacktrace'}|[{'ann_type',1930,[{'var',1930,'Stack'}|[{'type',1930,'list',[{'type',1930,'stack_item',[]}]}]]}]]}|[{'type',1931,'tuple',[{'atom',1931,'dictionary'}|[{'ann_type',1931,[{'var',1931,'Dictionary'}|[{'type',1931,'list',[{'type',1931,'tuple',[{'ann_type',1931,[{'var',1931,'Key'}|[{'type',1931,'term',[]}]]}|[{'ann_type',1931,[{'var',1931,'Value'}|[{'type',1931,'term',[]}]]}]]}]}]]}]]}|[{'type',1932,'tuple',[{'atom',1932,'error_handler'}|[{'ann_type',1932,[{'var',1932,'Module'}|[{'type',1932,'module',[]}]]}]]}|[{'type',1933,'tuple',[{'atom',1933,'garbage_collection'}|[{'ann_type',1933,[{'var',1933,'GCInfo'}|[{'type',1933,'list',[{'type',1933,'tuple',[{'type',1933,'atom',[]}|[{'type',1933,'non_neg_integer',[]}]]}]}]]}]]}|[{'type',1934,'tuple',[{'atom',1934,'group_leader'}|[{'ann_type',1934,[{'var',1934,'GroupLeader'}|[{'type',1934,'pid',[]}]]}]]}|[{'type',1935,'tuple',[{'atom',1935,'heap_size'}|[{'ann_type',1935,[{'var',1935,'Size'}|[{'type',1935,'non_neg_integer',[]}]]}]]}|[{'type',1936,'tuple',[{'atom',1936,'initial_call'}|[{'type',1936,'mfa',[]}]]}|[{'type',1937,'tuple',[{'atom',1937,'links'}|[{'ann_type',1937,[{'var',1937,'PidsAndPorts'}|[{'type',1937,'list',[{'type',1937,'union',[{'type',1937,'pid',[]}|[{'type',1937,'port',[]}]]}]}]]}]]}|[{'type',1938,'tuple',[{'atom',1938,'last_calls'}|[{'type',1938,'union',[{'atom',1938,'false'}|[{'paren_type',1938,[{'ann_type',1938,[{'var',1938,'Calls'}|[{'type',1938,'list',[{'type',1938,'mfa',[]}]}]]}]}]]}]]}|[{'type',1939,'tuple',[{'atom',1939,'memory'}|[{'ann_type',1939,[{'var',1939,'Size'}|[{'type',1939,'non_neg_integer',[]}]]}]]}|[{'type',1940,'tuple',[{'atom',1940,'message_queue_len'}|[{'ann_type',1940,[{'var',1940,'MessageQueueLen'}|[{'type',1940,'non_neg_integer',[]}]]}]]}|[{'type',1941,'tuple',[{'atom',1941,'messages'}|[{'ann_type',1941,[{'var',1941,'MessageQueue'}|[{'type',1941,'list',[{'type',1941,'term',[]}]}]]}]]}|[{'type',1942,'tuple',[{'atom',1942,'min_heap_size'}|[{'ann_type',1942,[{'var',1942,'MinHeapSize'}|[{'type',1942,'non_neg_integer',[]}]]}]]}|[{'type',1943,'tuple',[{'atom',1943,'min_bin_vheap_size'}|[{'ann_type',1943,[{'var',1943,'MinBinVHeapSize'}|[{'type',1943,'non_neg_integer',[]}]]}]]}|[{'type',1944,'tuple',[{'atom',1944,'monitored_by'}|[{'ann_type',1944,[{'var',1944,'Pids'}|[{'type',1944,'list',[{'type',1944,'pid',[]}]}]]}]]}|[{'type',1945,'tuple',[{'atom',1945,'monitors'}|[{'ann_type',1946,[{'var',1946,'Monitors'}|[{'type',1946,'list',[{'type',1946,'tuple',[{'atom',1946,'process'}|[{'ann_type',1946,[{'var',1946,'Pid'}|[{'type',1946,'union',[{'type',1946,'pid',[]}|[{'type',1947,'tuple',[{'ann_type',1947,[{'var',1947,'RegName'}|[{'type',1947,'atom',[]}]]}|[{'ann_type',1947,[{'var',1947,'Node'}|[{'type',1947,'node',[]}]]}]]}]]}]]}]]}]}]]}]]}|[{'type',1948,'tuple',[{'atom',1948,'priority'}|[{'ann_type',1948,[{'var',1948,'Level'}|[{'type',1948,'priority_level',[]}]]}]]}|[{'type',1949,'tuple',[{'atom',1949,'reductions'}|[{'ann_type',1949,[{'var',1949,'Number'}|[{'type',1949,'non_neg_integer',[]}]]}]]}|[{'type',1950,'tuple',[{'atom',1950,'registered_name'}|[{'ann_type',1950,[{'var',1950,'Atom'}|[{'type',1950,'atom',[]}]]}]]}|[{'type',1951,'tuple',[{'atom',1951,'sequential_trace_token'}|[{'type',1951,'union',[{'type',1951,'nil',[]}|[{'paren_type',1951,[{'ann_type',1951,[{'var',1951,'SequentialTraceToken'}|[{'type',1951,'term',[]}]]}]}]]}]]}|[{'type',1952,'tuple',[{'atom',1952,'stack_size'}|[{'ann_type',1952,[{'var',1952,'Size'}|[{'type',1952,'non_neg_integer',[]}]]}]]}|[{'type',1953,'tuple',[{'atom',1953,'status'}|[{'ann_type',1953,[{'var',1953,'Status'}|[{'type',1953,'union',[{'atom',1953,'exiting'}|[{'atom',1953,'garbage_collecting'}|[{'atom',1953,'waiting'}|[{'atom',1953,'running'}|[{'atom',1953,'runnable'}|[{'atom',1953,'suspended'}]]]]]]}]]}]]}|[{'type',1954,'tuple',[{'atom',1954,'suspending'}|[{'ann_type',1955,[{'var',1955,'SuspendeeList'}|[{'type',1955,'list',[{'type',1955,'tuple',[{'ann_type',1955,[{'var',1955,'Suspendee'}|[{'type',1955,'pid',[]}]]}|[{'ann_type',1956,[{'var',1956,'ActiveSuspendCount'}|[{'type',1956,'non_neg_integer',[]}]]}|[{'ann_type',1957,[{'var',1957,'OutstandingSuspendCount'}|[{'type',1957,'non_neg_integer',[]}]]}]]]}]}]]}]]}|[{'type',1958,'tuple',[{'atom',1958,'total_heap_size'}|[{'ann_type',1958,[{'var',1958,'Size'}|[{'type',1958,'non_neg_integer',[]}]]}]]}|[{'type',1959,'tuple',[{'atom',1959,'trace'}|[{'ann_type',1959,[{'var',1959,'InternalTraceFlags'}|[{'type',1959,'non_neg_integer',[]}]]}]]}|[{'type',1960,'tuple',[{'atom',1960,'trap_exit'}|[{'ann_type',1960,[{'var',1960,'Boolean'}|[{'type',1960,'boolean',[]}]]}]]}]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]},[]}],
		%% Line 1962
		'type' =
		    %% Line 1962
		    [{'stack_item',{'type',1963,'tuple',[{'ann_type',1963,[{'var',1963,'Module'}|[{'type',1963,'module',[]}]]}|[{'ann_type',1964,[{'var',1964,'Function'}|[{'type',1964,'atom',[]}]]}|[{'ann_type',1965,[{'var',1965,'Arity'}|[{'type',1965,'union',[{'type',1965,'arity',[]}|[{'paren_type',1965,[{'ann_type',1965,[{'var',1965,'Args'}|[{'type',1965,'list',[{'type',1965,'term',[]}]}]]}]}]]}]]}|[{'ann_type',1966,[{'var',1966,'Location'}|[{'type',1966,'list',[{'type',1966,'union',[{'type',1966,'tuple',[{'atom',1966,'file'}|[{'ann_type',1966,[{'var',1966,'Filename'}|[{'type',1966,'string',[]}]]}]]}|[{'type',1967,'tuple',[{'atom',1967,'line'}|[{'ann_type',1967,[{'var',1967,'Line'}|[{'type',1967,'pos_integer',[]}]]}]]}]]}]}]]}]]]]},[]}],
		%% Line 1969
		'spec' =
		    %% Line 1969
		    [{{'process_info',2},[{'type',1969,'bounded_fun',[{'type',1969,'fun',[{'type',1969,'product',[{'var',1969,'Pid'}|[{'var',1969,'Item'}]]}|[{'type',1970,'union',[{'var',1970,'InfoTuple'}|[{'type',1970,'nil',[]}|[{'atom',1970,'undefined'}]]]}]]}|[[{'type',1971,'constraint',[{'atom',1971,'is_subtype'}|[[{'var',1971,'Pid'}|[{'type',1971,'pid',[]}]]]]}|[{'type',1972,'constraint',[{'atom',1972,'is_subtype'}|[[{'var',1972,'Item'}|[{'type',1972,'process_info_item',[]}]]]]}|[{'type',1973,'constraint',[{'atom',1973,'is_subtype'}|[[{'var',1973,'InfoTuple'}|[{'type',1973,'process_info_result_item',[]}]]]]}]]]]]}|[{'type',1974,'bounded_fun',[{'type',1974,'fun',[{'type',1974,'product',[{'var',1974,'Pid'}|[{'var',1974,'ItemList'}]]}|[{'type',1974,'union',[{'var',1974,'InfoTupleList'}|[{'type',1974,'nil',[]}|[{'atom',1974,'undefined'}]]]}]]}|[[{'type',1975,'constraint',[{'atom',1975,'is_subtype'}|[[{'var',1975,'Pid'}|[{'type',1975,'pid',[]}]]]]}|[{'type',1976,'constraint',[{'atom',1976,'is_subtype'}|[[{'var',1976,'ItemList'}|[{'type',1976,'list',[{'var',1976,'Item'}]}]]]]}|[{'type',1977,'constraint',[{'atom',1977,'is_subtype'}|[[{'var',1977,'Item'}|[{'type',1977,'process_info_item',[]}]]]]}|[{'type',1978,'constraint',[{'atom',1978,'is_subtype'}|[[{'var',1978,'InfoTupleList'}|[{'type',1978,'list',[{'var',1978,'InfoTuple'}]}]]]]}|[{'type',1979,'constraint',[{'atom',1979,'is_subtype'}|[[{'var',1979,'InfoTuple'}|[{'type',1979,'process_info_result_item',[]}]]]]}]]]]]]]}]]}],
		%% Line 1983
		'spec' =
		    %% Line 1983
		    [{{'erlang','send',2},[{'type',1983,'bounded_fun',[{'type',1983,'fun',[{'type',1983,'product',[{'var',1983,'Dest'}|[{'var',1983,'Msg'}]]}|[{'var',1983,'Msg'}]]}|[[{'type',1984,'constraint',[{'atom',1984,'is_subtype'}|[[{'var',1984,'Dest'}|[{'type',1984,'dst',[]}]]]]}|[{'type',1985,'constraint',[{'atom',1985,'is_subtype'}|[[{'var',1985,'Msg'}|[{'type',1985,'term',[]}]]]]}]]]]}]}],
		%% Line 1989
		'spec' =
		    %% Line 1989
		    [{{'erlang','send',3},[{'type',1989,'bounded_fun',[{'type',1989,'fun',[{'type',1989,'product',[{'var',1989,'Dest'}|[{'var',1989,'Msg'}|[{'var',1989,'Options'}]]]}|[{'var',1989,'Res'}]]}|[[{'type',1990,'constraint',[{'atom',1990,'is_subtype'}|[[{'var',1990,'Dest'}|[{'type',1990,'dst',[]}]]]]}|[{'type',1991,'constraint',[{'atom',1991,'is_subtype'}|[[{'var',1991,'Msg'}|[{'type',1991,'term',[]}]]]]}|[{'type',1992,'constraint',[{'atom',1992,'is_subtype'}|[[{'var',1992,'Options'}|[{'type',1992,'list',[{'type',1992,'union',[{'atom',1992,'nosuspend'}|[{'atom',1992,'noconnect'}]]}]}]]]]}|[{'type',1993,'constraint',[{'atom',1993,'is_subtype'}|[[{'var',1993,'Res'}|[{'type',1993,'union',[{'atom',1993,'ok'}|[{'atom',1993,'nosuspend'}|[{'atom',1993,'noconnect'}]]]}]]]]}]]]]]]}]}],
		%% Line 1998
		'spec' =
		    %% Line 1998
		    [{{'erlang','seq_trace_info',1},[{'type',1998,'fun',[{'type',1998,'product',[{'atom',1998,'send'}]}|[{'type',1998,'tuple',[{'atom',1998,'send'}|[{'type',1998,'boolean',[]}]]}]]}|[{'type',1999,'fun',[{'type',1999,'product',[{'atom',1999,'receive'}]}|[{'type',1999,'tuple',[{'atom',1999,'receive'}|[{'type',1999,'boolean',[]}]]}]]}|[{'type',2000,'fun',[{'type',2000,'product',[{'atom',2000,'print'}]}|[{'type',2000,'tuple',[{'atom',2000,'print'}|[{'type',2000,'boolean',[]}]]}]]}|[{'type',2001,'fun',[{'type',2001,'product',[{'atom',2001,'timestamp'}]}|[{'type',2001,'tuple',[{'atom',2001,'timestamp'}|[{'type',2001,'boolean',[]}]]}]]}|[{'type',2002,'fun',[{'type',2002,'product',[{'atom',2002,'label'}]}|[{'type',2002,'union',[{'type',2002,'nil',[]}|[{'type',2002,'tuple',[{'atom',2002,'label'}|[{'type',2002,'non_neg_integer',[]}]]}]]}]]}|[{'type',2003,'fun',[{'type',2003,'product',[{'atom',2003,'serial'}]}|[{'type',2003,'union',[{'type',2003,'nil',[]}|[{'type',2003,'tuple',[{'atom',2003,'serial'}|[{'type',2003,'tuple',[{'type',2003,'non_neg_integer',[]}|[{'type',2003,'non_neg_integer',[]}]]}]]}]]}]]}]]]]]]}],
		%% Line 2008
		'spec' =
		    %% Line 2008
		    [{{'setelement',3},[{'type',2008,'bounded_fun',[{'type',2008,'fun',[{'type',2008,'product',[{'var',2008,'Index'}|[{'var',2008,'Tuple1'}|[{'var',2008,'Value'}]]]}|[{'var',2008,'Tuple2'}]]}|[[{'type',2009,'constraint',[{'atom',2009,'is_subtype'}|[[{'var',2009,'Index'}|[{'type',2009,'pos_integer',[]}]]]]}|[{'type',2010,'constraint',[{'atom',2010,'is_subtype'}|[[{'var',2010,'Tuple1'}|[{'type',2010,'tuple','any'}]]]]}|[{'type',2011,'constraint',[{'atom',2011,'is_subtype'}|[[{'var',2011,'Tuple2'}|[{'type',2011,'tuple','any'}]]]]}|[{'type',2012,'constraint',[{'atom',2012,'is_subtype'}|[[{'var',2012,'Value'}|[{'type',2012,'term',[]}]]]]}]]]]]]}]}],
		%% Line 2016
		'spec' =
		    %% Line 2016
		    [{{'erlang','spawn_opt',1},[{'type',2016,'bounded_fun',[{'type',2016,'fun',[{'type',2016,'product',[{'type',2016,'tuple',[{'var',2016,'Module'}|[{'var',2016,'Function'}|[{'var',2016,'Args'}|[{'var',2016,'Options'}]]]]}]}|[{'type',2016,'union',[{'type',2016,'pid',[]}|[{'type',2016,'tuple',[{'type',2016,'pid',[]}|[{'type',2016,'reference',[]}]]}]]}]]}|[[{'type',2017,'constraint',[{'atom',2017,'is_subtype'}|[[{'var',2017,'Module'}|[{'type',2017,'module',[]}]]]]}|[{'type',2018,'constraint',[{'atom',2018,'is_subtype'}|[[{'var',2018,'Function'}|[{'type',2018,'atom',[]}]]]]}|[{'type',2019,'constraint',[{'atom',2019,'is_subtype'}|[[{'var',2019,'Args'}|[{'type',2019,'list',[{'type',2019,'term',[]}]}]]]]}|[{'type',2020,'constraint',[{'atom',2020,'is_subtype'}|[[{'var',2020,'Options'}|[{'type',2020,'list',[{'var',2020,'Option'}]}]]]]}|[{'type',2021,'constraint',[{'atom',2021,'is_subtype'}|[[{'var',2021,'Option'}|[{'type',2021,'union',[{'atom',2021,'link'}|[{'atom',2021,'monitor'}|[{'type',2022,'tuple',[{'atom',2022,'priority'}|[{'ann_type',2022,[{'var',2022,'Level'}|[{'type',2022,'priority_level',[]}]]}]]}|[{'type',2023,'tuple',[{'atom',2023,'fullsweep_after'}|[{'ann_type',2023,[{'var',2023,'Number'}|[{'type',2023,'non_neg_integer',[]}]]}]]}|[{'type',2024,'tuple',[{'atom',2024,'min_heap_size'}|[{'ann_type',2024,[{'var',2024,'Size'}|[{'type',2024,'non_neg_integer',[]}]]}]]}|[{'type',2025,'tuple',[{'atom',2025,'min_bin_vheap_size'}|[{'ann_type',2025,[{'var',2025,'VSize'}|[{'type',2025,'non_neg_integer',[]}]]}]]}]]]]]]}]]]]}]]]]]]]}]}],
		%% Line 2029
		'spec' =
		    %% Line 2029
		    [{{'statistics',1},[{'type',2029,'bounded_fun',[{'type',2029,'fun',[{'type',2029,'product',[{'atom',2029,'context_switches'}]}|[{'type',2029,'tuple',[{'var',2029,'ContextSwitches'}|[{'integer',2029,0}]]}]]}|[[{'type',2030,'constraint',[{'atom',2030,'is_subtype'}|[[{'var',2030,'ContextSwitches'}|[{'type',2030,'non_neg_integer',[]}]]]]}]]]}|[{'type',2031,'bounded_fun',[{'type',2031,'fun',[{'type',2031,'product',[{'atom',2031,'exact_reductions'}]}|[{'type',2031,'tuple',[{'var',2031,'Total_Exact_Reductions'}|[{'var',2032,'Exact_Reductions_Since_Last_Call'}]]}]]}|[[{'type',2033,'constraint',[{'atom',2033,'is_subtype'}|[[{'var',2033,'Total_Exact_Reductions'}|[{'type',2033,'non_neg_integer',[]}]]]]}|[{'type',2034,'constraint',[{'atom',2034,'is_subtype'}|[[{'var',2034,'Exact_Reductions_Since_Last_Call'}|[{'type',2034,'non_neg_integer',[]}]]]]}]]]]}|[{'type',2035,'bounded_fun',[{'type',2035,'fun',[{'type',2035,'product',[{'atom',2035,'garbage_collection'}]}|[{'type',2035,'tuple',[{'var',2035,'Number_of_GCs'}|[{'var',2035,'Words_Reclaimed'}|[{'integer',2035,0}]]]}]]}|[[{'type',2036,'constraint',[{'atom',2036,'is_subtype'}|[[{'var',2036,'Number_of_GCs'}|[{'type',2036,'non_neg_integer',[]}]]]]}|[{'type',2037,'constraint',[{'atom',2037,'is_subtype'}|[[{'var',2037,'Words_Reclaimed'}|[{'type',2037,'non_neg_integer',[]}]]]]}]]]]}|[{'type',2038,'bounded_fun',[{'type',2038,'fun',[{'type',2038,'product',[{'atom',2038,'io'}]}|[{'type',2038,'tuple',[{'type',2038,'tuple',[{'atom',2038,'input'}|[{'var',2038,'Input'}]]}|[{'type',2038,'tuple',[{'atom',2038,'output'}|[{'var',2038,'Output'}]]}]]}]]}|[[{'type',2039,'constraint',[{'atom',2039,'is_subtype'}|[[{'var',2039,'Input'}|[{'type',2039,'non_neg_integer',[]}]]]]}|[{'type',2040,'constraint',[{'atom',2040,'is_subtype'}|[[{'var',2040,'Output'}|[{'type',2040,'non_neg_integer',[]}]]]]}]]]]}|[{'type',2041,'bounded_fun',[{'type',2041,'fun',[{'type',2041,'product',[{'atom',2041,'reductions'}]}|[{'type',2041,'tuple',[{'var',2041,'Total_Reductions'}|[{'var',2042,'Reductions_Since_Last_Call'}]]}]]}|[[{'type',2043,'constraint',[{'atom',2043,'is_subtype'}|[[{'var',2043,'Total_Reductions'}|[{'type',2043,'non_neg_integer',[]}]]]]}|[{'type',2044,'constraint',[{'atom',2044,'is_subtype'}|[[{'var',2044,'Reductions_Since_Last_Call'}|[{'type',2044,'non_neg_integer',[]}]]]]}]]]]}|[{'type',2045,'fun',[{'type',2045,'product',[{'atom',2045,'run_queue'}]}|[{'type',2045,'non_neg_integer',[]}]]}|[{'type',2046,'bounded_fun',[{'type',2046,'fun',[{'type',2046,'product',[{'atom',2046,'runtime'}]}|[{'type',2046,'tuple',[{'var',2046,'Total_Run_Time'}|[{'var',2046,'Time_Since_Last_Call'}]]}]]}|[[{'type',2047,'constraint',[{'atom',2047,'is_subtype'}|[[{'var',2047,'Total_Run_Time'}|[{'type',2047,'non_neg_integer',[]}]]]]}|[{'type',2048,'constraint',[{'atom',2048,'is_subtype'}|[[{'var',2048,'Time_Since_Last_Call'}|[{'type',2048,'non_neg_integer',[]}]]]]}]]]]}|[{'type',2049,'bounded_fun',[{'type',2049,'fun',[{'type',2049,'product',[{'atom',2049,'scheduler_wall_time'}]}|[{'type',2049,'union',[{'type',2049,'list',[{'type',2049,'tuple',[{'var',2049,'SchedulerId'}|[{'var',2049,'ActiveTime'}|[{'var',2049,'TotalTime'}]]]}]}|[{'atom',2049,'undefined'}]]}]]}|[[{'type',2050,'constraint',[{'atom',2050,'is_subtype'}|[[{'var',2050,'SchedulerId'}|[{'type',2050,'pos_integer',[]}]]]]}|[{'type',2051,'constraint',[{'atom',2051,'is_subtype'}|[[{'var',2051,'ActiveTime'}|[{'type',2051,'non_neg_integer',[]}]]]]}|[{'type',2052,'constraint',[{'atom',2052,'is_subtype'}|[[{'var',2052,'TotalTime'}|[{'type',2052,'non_neg_integer',[]}]]]]}]]]]]}|[{'type',2053,'bounded_fun',[{'type',2053,'fun',[{'type',2053,'product',[{'atom',2053,'wall_clock'}]}|[{'type',2053,'tuple',[{'var',2053,'Total_Wallclock_Time'}|[{'var',2054,'Wallclock_Time_Since_Last_Call'}]]}]]}|[[{'type',2055,'constraint',[{'atom',2055,'is_subtype'}|[[{'var',2055,'Total_Wallclock_Time'}|[{'type',2055,'non_neg_integer',[]}]]]]}|[{'type',2056,'constraint',[{'atom',2056,'is_subtype'}|[[{'var',2056,'Wallclock_Time_Since_Last_Call'}|[{'type',2056,'non_neg_integer',[]}]]]]}]]]]}]]]]]]]]]}],
		%% Line 2062
		'spec' =
		    %% Line 2062
		    [{{'erlang','subtract',2},[{'type',2062,'fun',[{'type',2062,'product',[{'type',2062,'list',[{'type',2062,'term',[]}]}|[{'type',2062,'list',[{'type',2062,'term',[]}]}]]}|[{'type',2062,'list',[{'type',2062,'term',[]}]}]]}]}],
		%% Line 2066
		'type' =
		    %% Line 2066
		    [{'scheduler_bind_type',{'type',2067,'union',[{'atom',2067,'no_node_processor_spread'}|[{'atom',2068,'no_node_thread_spread'}|[{'atom',2069,'no_spread'}|[{'atom',2070,'processor_spread'}|[{'atom',2071,'spread'}|[{'atom',2072,'thread_spread'}|[{'atom',2073,'thread_no_node_processor_spread'}|[{'atom',2074,'unbound'}]]]]]]]]},[]}],
		%% Line 2076
		'spec' =
		    %% Line 2076
		    [{{'erlang','system_flag',2},[{'type',2076,'bounded_fun',[{'type',2076,'fun',[{'type',2076,'product',[{'atom',2076,'backtrace_depth'}|[{'var',2076,'Depth'}]]}|[{'var',2076,'OldDepth'}]]}|[[{'type',2077,'constraint',[{'atom',2077,'is_subtype'}|[[{'var',2077,'Depth'}|[{'type',2077,'non_neg_integer',[]}]]]]}|[{'type',2078,'constraint',[{'atom',2078,'is_subtype'}|[[{'var',2078,'OldDepth'}|[{'type',2078,'non_neg_integer',[]}]]]]}]]]]}|[{'type',2079,'bounded_fun',[{'type',2079,'fun',[{'type',2079,'product',[{'atom',2079,'cpu_topology'}|[{'var',2079,'CpuTopology'}]]}|[{'var',2079,'OldCpuTopology'}]]}|[[{'type',2080,'constraint',[{'atom',2080,'is_subtype'}|[[{'var',2080,'CpuTopology'}|[{'type',2080,'cpu_topology',[]}]]]]}|[{'type',2081,'constraint',[{'atom',2081,'is_subtype'}|[[{'var',2081,'OldCpuTopology'}|[{'type',2081,'cpu_topology',[]}]]]]}]]]]}|[{'type',2082,'bounded_fun',[{'type',2082,'fun',[{'type',2082,'product',[{'atom',2082,'dirty_cpu_schedulers_online'}|[{'var',2082,'DirtyCPUSchedulersOnline'}]]}|[{'var',2083,'OldDirtyCPUSchedulersOnline'}]]}|[[{'type',2084,'constraint',[{'atom',2084,'is_subtype'}|[[{'var',2084,'DirtyCPUSchedulersOnline'}|[{'type',2084,'pos_integer',[]}]]]]}|[{'type',2085,'constraint',[{'atom',2085,'is_subtype'}|[[{'var',2085,'OldDirtyCPUSchedulersOnline'}|[{'type',2085,'pos_integer',[]}]]]]}]]]]}|[{'type',2086,'bounded_fun',[{'type',2086,'fun',[{'type',2086,'product',[{'atom',2086,'fullsweep_after'}|[{'var',2086,'Number'}]]}|[{'var',2086,'OldNumber'}]]}|[[{'type',2087,'constraint',[{'atom',2087,'is_subtype'}|[[{'var',2087,'Number'}|[{'type',2087,'non_neg_integer',[]}]]]]}|[{'type',2088,'constraint',[{'atom',2088,'is_subtype'}|[[{'var',2088,'OldNumber'}|[{'type',2088,'non_neg_integer',[]}]]]]}]]]]}|[{'type',2089,'bounded_fun',[{'type',2089,'fun',[{'type',2089,'product',[{'atom',2089,'min_heap_size'}|[{'var',2089,'MinHeapSize'}]]}|[{'var',2089,'OldMinHeapSize'}]]}|[[{'type',2090,'constraint',[{'atom',2090,'is_subtype'}|[[{'var',2090,'MinHeapSize'}|[{'type',2090,'non_neg_integer',[]}]]]]}|[{'type',2091,'constraint',[{'atom',2091,'is_subtype'}|[[{'var',2091,'OldMinHeapSize'}|[{'type',2091,'non_neg_integer',[]}]]]]}]]]]}|[{'type',2092,'bounded_fun',[{'type',2092,'fun',[{'type',2092,'product',[{'atom',2092,'min_bin_vheap_size'}|[{'var',2092,'MinBinVHeapSize'}]]}|[{'var',2093,'OldMinBinVHeapSize'}]]}|[[{'type',2094,'constraint',[{'atom',2094,'is_subtype'}|[[{'var',2094,'MinBinVHeapSize'}|[{'type',2094,'non_neg_integer',[]}]]]]}|[{'type',2095,'constraint',[{'atom',2095,'is_subtype'}|[[{'var',2095,'OldMinBinVHeapSize'}|[{'type',2095,'non_neg_integer',[]}]]]]}]]]]}|[{'type',2096,'bounded_fun',[{'type',2096,'fun',[{'type',2096,'product',[{'atom',2096,'multi_scheduling'}|[{'var',2096,'BlockState'}]]}|[{'var',2096,'OldBlockState'}]]}|[[{'type',2097,'constraint',[{'atom',2097,'is_subtype'}|[[{'var',2097,'BlockState'}|[{'type',2097,'union',[{'atom',2097,'block'}|[{'atom',2097,'unblock'}]]}]]]]}|[{'type',2098,'constraint',[{'atom',2098,'is_subtype'}|[[{'var',2098,'OldBlockState'}|[{'type',2098,'union',[{'atom',2098,'block'}|[{'atom',2098,'unblock'}|[{'atom',2098,'enabled'}]]]}]]]]}]]]]}|[{'type',2099,'bounded_fun',[{'type',2099,'fun',[{'type',2099,'product',[{'atom',2099,'scheduler_bind_type'}|[{'var',2099,'How'}]]}|[{'var',2099,'OldBindType'}]]}|[[{'type',2100,'constraint',[{'atom',2100,'is_subtype'}|[[{'var',2100,'How'}|[{'type',2100,'union',[{'type',2100,'scheduler_bind_type',[]}|[{'atom',2100,'default_bind'}]]}]]]]}|[{'type',2101,'constraint',[{'atom',2101,'is_subtype'}|[[{'var',2101,'OldBindType'}|[{'type',2101,'scheduler_bind_type',[]}]]]]}]]]]}|[{'type',2102,'bounded_fun',[{'type',2102,'fun',[{'type',2102,'product',[{'atom',2102,'scheduler_wall_time'}|[{'var',2102,'Boolean'}]]}|[{'var',2102,'OldBoolean'}]]}|[[{'type',2103,'constraint',[{'atom',2103,'is_subtype'}|[[{'var',2103,'Boolean'}|[{'type',2103,'boolean',[]}]]]]}|[{'type',2104,'constraint',[{'atom',2104,'is_subtype'}|[[{'var',2104,'OldBoolean'}|[{'type',2104,'boolean',[]}]]]]}]]]]}|[{'type',2105,'bounded_fun',[{'type',2105,'fun',[{'type',2105,'product',[{'atom',2105,'schedulers_online'}|[{'var',2105,'SchedulersOnline'}]]}|[{'var',2106,'OldSchedulersOnline'}]]}|[[{'type',2107,'constraint',[{'atom',2107,'is_subtype'}|[[{'var',2107,'SchedulersOnline'}|[{'type',2107,'pos_integer',[]}]]]]}|[{'type',2108,'constraint',[{'atom',2108,'is_subtype'}|[[{'var',2108,'OldSchedulersOnline'}|[{'type',2108,'pos_integer',[]}]]]]}]]]]}|[{'type',2109,'bounded_fun',[{'type',2109,'fun',[{'type',2109,'product',[{'atom',2109,'trace_control_word'}|[{'var',2109,'TCW'}]]}|[{'var',2109,'OldTCW'}]]}|[[{'type',2110,'constraint',[{'atom',2110,'is_subtype'}|[[{'var',2110,'TCW'}|[{'type',2110,'non_neg_integer',[]}]]]]}|[{'type',2111,'constraint',[{'atom',2111,'is_subtype'}|[[{'var',2111,'OldTCW'}|[{'type',2111,'non_neg_integer',[]}]]]]}]]]]}|[{'type',2113,'fun',[{'type',2113,'product',[{'atom',2113,'internal_cpu_topology'}|[{'type',2113,'term',[]}]]}|[{'type',2113,'term',[]}]]}|[{'type',2114,'fun',[{'type',2114,'product',[{'atom',2114,'sequential_tracer'}|[{'type',2114,'union',[{'type',2114,'pid',[]}|[{'type',2114,'port',[]}|[{'atom',2114,'false'}]]]}]]}|[{'type',2114,'union',[{'type',2114,'pid',[]}|[{'type',2114,'port',[]}|[{'atom',2114,'false'}]]]}]]}|[{'type',2115,'fun',[{'type',2115,'product',[{'integer',2115,1}|[{'integer',2115,0}]]}|[{'atom',2115,'true'}]]}]]]]]]]]]]]]]]}],
		%% Line 2120
		'spec' =
		    %% Line 2120
		    [{{'term_to_binary',1},[{'type',2120,'bounded_fun',[{'type',2120,'fun',[{'type',2120,'product',[{'var',2120,'Term'}]}|[{'type',2120,'ext_binary',[]}]]}|[[{'type',2121,'constraint',[{'atom',2121,'is_subtype'}|[[{'var',2121,'Term'}|[{'type',2121,'term',[]}]]]]}]]]}]}],
		%% Line 2125
		'spec' =
		    %% Line 2125
		    [{{'term_to_binary',2},[{'type',2125,'bounded_fun',[{'type',2125,'fun',[{'type',2125,'product',[{'var',2125,'Term'}|[{'var',2125,'Options'}]]}|[{'type',2125,'ext_binary',[]}]]}|[[{'type',2126,'constraint',[{'atom',2126,'is_subtype'}|[[{'var',2126,'Term'}|[{'type',2126,'term',[]}]]]]}|[{'type',2127,'constraint',[{'atom',2127,'is_subtype'}|[[{'var',2127,'Options'}|[{'type',2127,'list',[{'type',2127,'union',[{'atom',2127,'compressed'}|[{'type',2128,'tuple',[{'atom',2128,'compressed'}|[{'ann_type',2128,[{'var',2128,'Level'}|[{'type',2128,'range',[{'integer',2128,0}|[{'integer',2128,9}]]}]]}]]}|[{'type',2129,'tuple',[{'atom',2129,'minor_version'}|[{'ann_type',2129,[{'var',2129,'Version'}|[{'type',2129,'range',[{'integer',2129,0}|[{'integer',2129,1}]]}]]}]]}]]]}]}]]]]}]]]]}]}],
		%% Line 2134
		'spec' =
		    %% Line 2134
		    [{{'tl',1},[{'type',2134,'bounded_fun',[{'type',2134,'fun',[{'type',2134,'product',[{'var',2134,'List'}]}|[{'type',2134,'term',[]}]]}|[[{'type',2135,'constraint',[{'atom',2135,'is_subtype'}|[[{'var',2135,'List'}|[{'type',2135,'nonempty_list',[{'type',2135,'term',[]}]}]]]]}]]]}]}],
		%% Line 2139
		'type' =
		    %% Line 2139
		    [{'trace_pattern_mfa',{'type',2140,'union',[{'type',2140,'tuple',[{'type',2140,'atom',[]}|[{'type',2140,'atom',[]}|[{'type',2140,'union',[{'type',2140,'arity',[]}|[{'atom',2140,'_'}]]}]]]}|[{'atom',2140,'on_load'}]]},[]}],
		%% Line 2141
		'type' =
		    %% Line 2141
		    [{'trace_match_spec',{'type',2142,'list',[{'type',2142,'tuple',[{'type',2142,'union',[{'type',2142,'list',[{'type',2142,'term',[]}]}|[{'atom',2142,'_'}]]}|[{'type',2142,'list',[{'type',2142,'term',[]}]}|[{'type',2142,'list',[{'type',2142,'term',[]}]}]]]}]},[]}],
		%% Line 2144
		'spec' =
		    %% Line 2144
		    [{{'erlang','trace_pattern',2},[{'type',2144,'bounded_fun',[{'type',2144,'fun',[{'type',2144,'product',[{'var',2144,'MFA'}|[{'var',2144,'MatchSpec'}]]}|[{'type',2144,'non_neg_integer',[]}]]}|[[{'type',2145,'constraint',[{'atom',2145,'is_subtype'}|[[{'var',2145,'MFA'}|[{'type',2145,'trace_pattern_mfa',[]}]]]]}|[{'type',2146,'constraint',[{'atom',2146,'is_subtype'}|[[{'var',2146,'MatchSpec'}|[{'type',2146,'union',[{'paren_type',2146,[{'ann_type',2146,[{'var',2146,'MatchSpecList'}|[{'type',2146,'trace_match_spec',[]}]]}]}|[{'type',2147,'boolean',[]}|[{'atom',2148,'restart'}|[{'atom',2149,'pause'}]]]]}]]]]}]]]]}]}],
		%% Line 2153
		'type' =
		    %% Line 2153
		    [{'trace_pattern_flag',{'type',2154,'union',[{'atom',2154,'global'}|[{'atom',2154,'local'}|[{'atom',2155,'meta'}|[{'type',2155,'tuple',[{'atom',2155,'meta'}|[{'ann_type',2155,[{'var',2155,'Pid'}|[{'type',2155,'pid',[]}]]}]]}|[{'atom',2156,'call_count'}|[{'atom',2157,'call_time'}]]]]]]},[]}],
		%% Line 2159
		'spec' =
		    %% Line 2159
		    [{{'erlang','trace_pattern',3},[{'type',2159,'bounded_fun',[{'type',2159,'fun',[{'type',2159,'product',[{'var',2159,'MFA'}|[{'var',2159,'MatchSpec'}|[{'var',2159,'FlagList'}]]]}|[{'type',2159,'non_neg_integer',[]}]]}|[[{'type',2160,'constraint',[{'atom',2160,'is_subtype'}|[[{'var',2160,'MFA'}|[{'type',2160,'trace_pattern_mfa',[]}]]]]}|[{'type',2161,'constraint',[{'atom',2161,'is_subtype'}|[[{'var',2161,'MatchSpec'}|[{'type',2161,'union',[{'paren_type',2161,[{'ann_type',2161,[{'var',2161,'MatchSpecList'}|[{'type',2161,'trace_match_spec',[]}]]}]}|[{'type',2162,'boolean',[]}|[{'atom',2163,'restart'}|[{'atom',2164,'pause'}]]]]}]]]]}|[{'type',2165,'constraint',[{'atom',2165,'is_subtype'}|[[{'var',2165,'FlagList'}|[{'type',2165,'list',[{'type',2165,'trace_pattern_flag',[]}]}]]]]}]]]]]}]}],
		%% Line 2170
		'spec' =
		    %% Line 2170
		    [{{'tuple_to_list',1},[{'type',2170,'bounded_fun',[{'type',2170,'fun',[{'type',2170,'product',[{'var',2170,'Tuple'}]}|[{'type',2170,'list',[{'type',2170,'term',[]}]}]]}|[[{'type',2171,'constraint',[{'atom',2171,'is_subtype'}|[[{'var',2171,'Tuple'}|[{'type',2171,'tuple','any'}]]]]}]]]}]}],
		%% Line 2175
		'type' =
		    %% Line 2175
		    [{'cpu_topology',{'type',2176,'union',[{'type',2176,'list',[{'ann_type',2176,[{'var',2176,'LevelEntry'}|[{'type',2176,'level_entry',[]}]]}]}|[{'atom',2176,'undefined'}]]},[]}],
		%% Line 2177
		'type' =
		    %% Line 2177
		    [{'level_entry',{'type',2178,'union',[{'type',2178,'tuple',[{'ann_type',2178,[{'var',2178,'LevelTag'}|[{'type',2178,'level_tag',[]}]]}|[{'ann_type',2178,[{'var',2178,'SubLevel'}|[{'type',2178,'sub_level',[]}]]}]]}|[{'type',2179,'tuple',[{'ann_type',2179,[{'var',2179,'LevelTag'}|[{'type',2179,'level_tag',[]}]]}|[{'ann_type',2180,[{'var',2180,'InfoList'}|[{'type',2180,'info_list',[]}]]}|[{'ann_type',2181,[{'var',2181,'SubLevel'}|[{'type',2181,'sub_level',[]}]]}]]]}]]},[]}],
		%% Line 2182
		'type' =
		    %% Line 2182
		    [{'level_tag',{'type',2182,'union',[{'atom',2182,'core'}|[{'atom',2182,'node'}|[{'atom',2182,'processor'}|[{'atom',2182,'thread'}]]]]},[]}],
		%% Line 2183
		'type' =
		    %% Line 2183
		    [{'sub_level',{'type',2183,'union',[{'type',2183,'list',[{'ann_type',2183,[{'var',2183,'LevelEntry'}|[{'type',2183,'level_entry',[]}]]}]}|[{'paren_type',2184,[{'ann_type',2184,[{'var',2184,'LogicalCpuId'}|[{'type',2184,'tuple',[{'atom',2184,'logical'}|[{'type',2184,'non_neg_integer',[]}]]}]]}]}]]},[]}],
		%% Line 2185
		'type' =
		    %% Line 2185
		    [{'info_list',{'type',2185,'nil',[]},[]}],
		%% Line 2189
		'spec' =
		    %% Line 2189
		    [{{'erlang','system_info',1},[{'type',2190,'fun',[{'type',2190,'product',[{'atom',2190,'allocated_areas'}]}|[{'type',2190,'list',[{'type',2190,'tuple','any'}]}]]}|[{'type',2191,'bounded_fun',[{'type',2191,'fun',[{'type',2191,'product',[{'atom',2191,'allocator'}]}|[{'type',2192,'tuple',[{'var',2192,'Allocator'}|[{'var',2192,'Version'}|[{'var',2192,'Features'}|[{'var',2192,'Settings'}]]]]}]]}|[[{'type',2193,'constraint',[{'atom',2193,'is_subtype'}|[[{'var',2193,'Allocator'}|[{'type',2193,'union',[{'atom',2193,'undefined'}|[{'atom',2193,'glibc'}]]}]]]]}|[{'type',2194,'constraint',[{'atom',2194,'is_subtype'}|[[{'var',2194,'Version'}|[{'type',2194,'list',[{'type',2194,'non_neg_integer',[]}]}]]]]}|[{'type',2195,'constraint',[{'atom',2195,'is_subtype'}|[[{'var',2195,'Features'}|[{'type',2195,'list',[{'type',2195,'atom',[]}]}]]]]}|[{'type',2196,'constraint',[{'atom',2196,'is_subtype'}|[[{'var',2196,'Settings'}|[{'type',2196,'list',[{'type',2196,'tuple',[{'ann_type',2196,[{'var',2196,'Subsystem'}|[{'type',2196,'atom',[]}]]}|[{'type',2197,'list',[{'type',2197,'tuple',[{'ann_type',2197,[{'var',2197,'Parameter'}|[{'type',2197,'atom',[]}]]}|[{'ann_type',2198,[{'var',2198,'Value'}|[{'type',2198,'term',[]}]]}]]}]}]]}]}]]]]}]]]]]]}|[{'type',2199,'bounded_fun',[{'type',2199,'fun',[{'type',2199,'product',[{'atom',2199,'alloc_util_allocators'}]}|[{'type',2199,'list',[{'var',2199,'Alloc'}]}]]}|[[{'type',2200,'constraint',[{'atom',2200,'is_subtype'}|[[{'var',2200,'Alloc'}|[{'type',2200,'atom',[]}]]]]}]]]}|[{'type',2201,'bounded_fun',[{'type',2201,'fun',[{'type',2201,'product',[{'type',2201,'tuple',[{'atom',2201,'allocator'}|[{'var',2201,'Alloc'}]]}]}|[{'type',2201,'list',[{'var',2201,'_'}]}]]}|[[{'type',2202,'constraint',[{'atom',2202,'is_subtype'}|[[{'var',2202,'Alloc'}|[{'type',2202,'atom',[]}]]]]}]]]}|[{'type',2203,'bounded_fun',[{'type',2203,'fun',[{'type',2203,'product',[{'type',2203,'tuple',[{'atom',2203,'allocator_sizes'}|[{'var',2203,'Alloc'}]]}]}|[{'type',2203,'list',[{'var',2203,'_'}]}]]}|[[{'type',2204,'constraint',[{'atom',2204,'is_subtype'}|[[{'var',2204,'Alloc'}|[{'type',2204,'atom',[]}]]]]}]]]}|[{'type',2205,'fun',[{'type',2205,'product',[{'atom',2205,'build_type'}]}|[{'type',2205,'union',[{'atom',2205,'opt'}|[{'atom',2205,'debug'}|[{'atom',2205,'purify'}|[{'atom',2205,'quantify'}|[{'atom',2205,'purecov'}|[{'atom',2206,'gcov'}|[{'atom',2206,'valgrind'}|[{'atom',2206,'gprof'}|[{'atom',2206,'lcnt'}|[{'atom',2206,'frmptr'}]]]]]]]]]]}]]}|[{'type',2207,'fun',[{'type',2207,'product',[{'atom',2207,'c_compiler_used'}]}|[{'type',2207,'tuple',[{'type',2207,'atom',[]}|[{'type',2207,'term',[]}]]}]]}|[{'type',2208,'fun',[{'type',2208,'product',[{'atom',2208,'check_io'}]}|[{'type',2208,'list',[{'var',2208,'_'}]}]]}|[{'type',2209,'fun',[{'type',2209,'product',[{'atom',2209,'compat_rel'}]}|[{'type',2209,'integer',[]}]]}|[{'type',2210,'bounded_fun',[{'type',2210,'fun',[{'type',2210,'product',[{'atom',2210,'cpu_topology'}]}|[{'var',2210,'CpuTopology'}]]}|[[{'type',2211,'constraint',[{'atom',2211,'is_subtype'}|[[{'var',2211,'CpuTopology'}|[{'type',2211,'cpu_topology',[]}]]]]}]]]}|[{'type',2212,'bounded_fun',[{'type',2212,'fun',[{'type',2212,'product',[{'type',2212,'tuple',[{'atom',2212,'cpu_topology'}|[{'type',2212,'union',[{'atom',2212,'defined'}|[{'atom',2212,'detected'}|[{'atom',2212,'used'}]]]}]]}]}|[{'var',2212,'CpuTopology'}]]}|[[{'type',2213,'constraint',[{'atom',2213,'is_subtype'}|[[{'var',2213,'CpuTopology'}|[{'type',2213,'cpu_topology',[]}]]]]}]]]}|[{'type',2214,'fun',[{'type',2214,'product',[{'atom',2214,'creation'}]}|[{'type',2214,'integer',[]}]]}|[{'type',2215,'fun',[{'type',2215,'product',[{'atom',2215,'debug_compiled'}]}|[{'type',2215,'boolean',[]}]]}|[{'type',2216,'fun',[{'type',2216,'product',[{'atom',2216,'dirty_cpu_schedulers'}]}|[{'type',2216,'non_neg_integer',[]}]]}|[{'type',2217,'fun',[{'type',2217,'product',[{'atom',2217,'dirty_cpu_schedulers_online'}]}|[{'type',2217,'non_neg_integer',[]}]]}|[{'type',2218,'fun',[{'type',2218,'product',[{'atom',2218,'dirty_io_schedulers'}]}|[{'type',2218,'non_neg_integer',[]}]]}|[{'type',2219,'fun',[{'type',2219,'product',[{'atom',2219,'dist'}]}|[{'type',2219,'binary',[]}]]}|[{'type',2220,'fun',[{'type',2220,'product',[{'atom',2220,'dist_buf_busy_limit'}]}|[{'type',2220,'non_neg_integer',[]}]]}|[{'type',2221,'fun',[{'type',2221,'product',[{'atom',2221,'dist_ctrl'}]}|[{'type',2221,'tuple',[{'ann_type',2221,[{'var',2221,'Node'}|[{'type',2221,'node',[]}]]}|[{'ann_type',2222,[{'var',2222,'ControllingEntity'}|[{'type',2222,'union',[{'type',2222,'port',[]}|[{'type',2222,'pid',[]}]]}]]}]]}]]}|[{'type',2223,'fun',[{'type',2223,'product',[{'atom',2223,'driver_version'}]}|[{'type',2223,'string',[]}]]}|[{'type',2224,'fun',[{'type',2224,'product',[{'atom',2224,'dynamic_trace'}]}|[{'type',2224,'union',[{'atom',2224,'none'}|[{'atom',2224,'dtrace'}|[{'atom',2224,'systemtap'}]]]}]]}|[{'type',2225,'fun',[{'type',2225,'product',[{'atom',2225,'dynamic_trace_probes'}]}|[{'type',2225,'boolean',[]}]]}|[{'type',2226,'fun',[{'type',2226,'product',[{'atom',2226,'elib_malloc'}]}|[{'atom',2226,'false'}]]}|[{'type',2227,'fun',[{'type',2227,'product',[{'atom',2227,'ets_limit'}]}|[{'type',2227,'pos_integer',[]}]]}|[{'type',2228,'fun',[{'type',2228,'product',[{'atom',2228,'fullsweep_after'}]}|[{'type',2228,'tuple',[{'atom',2228,'fullsweep_after'}|[{'type',2228,'non_neg_integer',[]}]]}]]}|[{'type',2229,'fun',[{'type',2229,'product',[{'atom',2229,'garbage_collection'}]}|[{'type',2229,'list',[{'type',2229,'tuple',[{'type',2229,'atom',[]}|[{'type',2229,'integer',[]}]]}]}]]}|[{'type',2230,'fun',[{'type',2230,'product',[{'atom',2230,'heap_sizes'}]}|[{'type',2230,'list',[{'type',2230,'non_neg_integer',[]}]}]]}|[{'type',2231,'fun',[{'type',2231,'product',[{'atom',2231,'heap_type'}]}|[{'atom',2231,'private'}]]}|[{'type',2232,'fun',[{'type',2232,'product',[{'atom',2232,'info'}]}|[{'type',2232,'binary',[]}]]}|[{'type',2233,'fun',[{'type',2233,'product',[{'atom',2233,'kernel_poll'}]}|[{'type',2233,'boolean',[]}]]}|[{'type',2234,'fun',[{'type',2234,'product',[{'atom',2234,'loaded'}]}|[{'type',2234,'binary',[]}]]}|[{'type',2235,'fun',[{'type',2235,'product',[{'type',2235,'union',[{'atom',2235,'logical_processors'}|[{'atom',2236,'logical_processors_available'}|[{'atom',2237,'logical_processors_online'}]]]}]}|[{'type',2237,'union',[{'atom',2237,'unknown'}|[{'type',2237,'pos_integer',[]}]]}]]}|[{'type',2238,'fun',[{'type',2238,'product',[{'atom',2238,'machine'}]}|[{'type',2238,'string',[]}]]}|[{'type',2239,'fun',[{'type',2239,'product',[{'atom',2239,'min_heap_size'}]}|[{'type',2239,'tuple',[{'atom',2239,'min_heap_size'}|[{'ann_type',2239,[{'var',2239,'MinHeapSize'}|[{'type',2239,'pos_integer',[]}]]}]]}]]}|[{'type',2240,'fun',[{'type',2240,'product',[{'atom',2240,'min_bin_vheap_size'}]}|[{'type',2240,'tuple',[{'atom',2240,'min_bin_vheap_size'}|[{'ann_type',2241,[{'var',2241,'MinBinVHeapSize'}|[{'type',2241,'pos_integer',[]}]]}]]}]]}|[{'type',2242,'fun',[{'type',2242,'product',[{'atom',2242,'modified_timing_level'}]}|[{'type',2242,'union',[{'type',2242,'integer',[]}|[{'atom',2242,'undefined'}]]}]]}|[{'type',2243,'fun',[{'type',2243,'product',[{'atom',2243,'multi_scheduling'}]}|[{'type',2243,'union',[{'atom',2243,'disabled'}|[{'atom',2243,'blocked'}|[{'atom',2243,'enabled'}]]]}]]}|[{'type',2244,'fun',[{'type',2244,'product',[{'atom',2244,'multi_scheduling_blockers'}]}|[{'type',2244,'list',[{'ann_type',2244,[{'var',2244,'PID'}|[{'type',2244,'pid',[]}]]}]}]]}|[{'type',2245,'fun',[{'type',2245,'product',[{'atom',2245,'otp_release'}]}|[{'type',2245,'string',[]}]]}|[{'type',2246,'fun',[{'type',2246,'product',[{'atom',2246,'port_count'}]}|[{'type',2246,'non_neg_integer',[]}]]}|[{'type',2247,'fun',[{'type',2247,'product',[{'atom',2247,'port_limit'}]}|[{'type',2247,'pos_integer',[]}]]}|[{'type',2248,'fun',[{'type',2248,'product',[{'atom',2248,'process_count'}]}|[{'type',2248,'pos_integer',[]}]]}|[{'type',2249,'fun',[{'type',2249,'product',[{'atom',2249,'process_limit'}]}|[{'type',2249,'pos_integer',[]}]]}|[{'type',2250,'fun',[{'type',2250,'product',[{'atom',2250,'procs'}]}|[{'type',2250,'binary',[]}]]}|[{'type',2251,'fun',[{'type',2251,'product',[{'atom',2251,'scheduler_bind_type'}]}|[{'type',2251,'union',[{'atom',2251,'spread'}|[{'atom',2252,'processor_spread'}|[{'atom',2253,'thread_spread'}|[{'atom',2254,'thread_no_node_processor_spread'}|[{'atom',2255,'no_node_processor_spread'}|[{'atom',2256,'no_node_thread_spread'}|[{'atom',2257,'no_spread'}|[{'atom',2258,'unbound'}]]]]]]]]}]]}|[{'type',2259,'fun',[{'type',2259,'product',[{'atom',2259,'scheduler_bindings'}]}|[{'type',2259,'tuple','any'}]]}|[{'type',2260,'fun',[{'type',2260,'product',[{'atom',2260,'scheduler_id'}]}|[{'ann_type',2260,[{'var',2260,'SchedulerId'}|[{'type',2260,'pos_integer',[]}]]}]]}|[{'type',2261,'fun',[{'type',2261,'product',[{'type',2261,'union',[{'atom',2261,'schedulers'}|[{'atom',2261,'schedulers_online'}]]}]}|[{'type',2261,'pos_integer',[]}]]}|[{'type',2262,'fun',[{'type',2262,'product',[{'atom',2262,'smp_support'}]}|[{'type',2262,'boolean',[]}]]}|[{'type',2263,'fun',[{'type',2263,'product',[{'atom',2263,'system_version'}]}|[{'type',2263,'string',[]}]]}|[{'type',2264,'fun',[{'type',2264,'product',[{'atom',2264,'system_architecture'}]}|[{'type',2264,'string',[]}]]}|[{'type',2265,'fun',[{'type',2265,'product',[{'atom',2265,'threads'}]}|[{'type',2265,'boolean',[]}]]}|[{'type',2266,'fun',[{'type',2266,'product',[{'atom',2266,'thread_pool_size'}]}|[{'type',2266,'non_neg_integer',[]}]]}|[{'type',2267,'fun',[{'type',2267,'product',[{'atom',2267,'tolerant_timeofday'}]}|[{'type',2267,'union',[{'atom',2267,'enabled'}|[{'atom',2267,'disabled'}]]}]]}|[{'type',2268,'fun',[{'type',2268,'product',[{'atom',2268,'trace_control_word'}]}|[{'type',2268,'non_neg_integer',[]}]]}|[{'type',2269,'fun',[{'type',2269,'product',[{'atom',2269,'update_cpu_info'}]}|[{'type',2269,'union',[{'atom',2269,'changed'}|[{'atom',2269,'unchanged'}]]}]]}|[{'type',2270,'fun',[{'type',2270,'product',[{'atom',2270,'version'}]}|[{'type',2270,'string',[]}]]}|[{'type',2271,'fun',[{'type',2271,'product',[{'type',2271,'union',[{'atom',2271,'wordsize'}|[{'type',2271,'tuple',[{'atom',2271,'wordsize'}|[{'atom',2271,'internal'}]]}|[{'type',2271,'tuple',[{'atom',2271,'wordsize'}|[{'atom',2271,'external'}]]}]]]}]}|[{'type',2271,'union',[{'integer',2271,4}|[{'integer',2271,8}]]}]]}]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}],
		%% Line 2275
		'spec' =
		    %% Line 2275
		    [{{'erlang','universaltime_to_localtime',1},[{'type',2275,'bounded_fun',[{'type',2275,'fun',[{'type',2275,'product',[{'var',2275,'Universaltime'}]}|[{'var',2275,'Localtime'}]]}|[[{'type',2276,'constraint',[{'atom',2276,'is_subtype'}|[[{'var',2276,'Localtime'}|[{'remote_type',2276,[{'atom',2276,'calendar'}|[{'atom',2276,'datetime'}|[[]]]]}]]]]}|[{'type',2277,'constraint',[{'atom',2277,'is_subtype'}|[[{'var',2277,'Universaltime'}|[{'remote_type',2277,[{'atom',2277,'calendar'}|[{'atom',2277,'datetime'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 2288
		'spec' =
		    %% Line 2288
		    [{{'apply',2},[{'type',2288,'bounded_fun',[{'type',2288,'fun',[{'type',2288,'product',[{'var',2288,'Fun'}|[{'var',2288,'Args'}]]}|[{'type',2288,'term',[]}]]}|[[{'type',2289,'constraint',[{'atom',2289,'is_subtype'}|[[{'var',2289,'Fun'}|[{'type',2289,'function',[]}]]]]}|[{'type',2290,'constraint',[{'atom',2290,'is_subtype'}|[[{'var',2290,'Args'}|[{'type',2290,'list',[{'type',2290,'term',[]}]}]]]]}]]]]}]}],
		%% Line 2295
		'spec' =
		    %% Line 2295
		    [{{'apply',3},[{'type',2295,'bounded_fun',[{'type',2295,'fun',[{'type',2295,'product',[{'var',2295,'Module'}|[{'var',2295,'Function'}|[{'var',2295,'Args'}]]]}|[{'type',2295,'term',[]}]]}|[[{'type',2296,'constraint',[{'atom',2296,'is_subtype'}|[[{'var',2296,'Module'}|[{'type',2296,'module',[]}]]]]}|[{'type',2297,'constraint',[{'atom',2297,'is_subtype'}|[[{'var',2297,'Function'}|[{'type',2297,'atom',[]}]]]]}|[{'type',2298,'constraint',[{'atom',2298,'is_subtype'}|[[{'var',2298,'Args'}|[{'type',2298,'list',[{'type',2298,'term',[]}]}]]]]}]]]]]}]}],
		%% Line 2304
		'spec' =
		    %% Line 2304
		    [{{'spawn',1},[{'type',2304,'bounded_fun',[{'type',2304,'fun',[{'type',2304,'product',[{'var',2304,'Fun'}]}|[{'type',2304,'pid',[]}]]}|[[{'type',2305,'constraint',[{'atom',2305,'is_subtype'}|[[{'var',2305,'Fun'}|[{'type',2305,'function',[]}]]]]}]]]}]}],
		%% Line 2313
		'spec' =
		    %% Line 2313
		    [{{'spawn',2},[{'type',2313,'bounded_fun',[{'type',2313,'fun',[{'type',2313,'product',[{'var',2313,'Node'}|[{'var',2313,'Fun'}]]}|[{'type',2313,'pid',[]}]]}|[[{'type',2314,'constraint',[{'atom',2314,'is_subtype'}|[[{'var',2314,'Node'}|[{'type',2314,'node',[]}]]]]}|[{'type',2315,'constraint',[{'atom',2315,'is_subtype'}|[[{'var',2315,'Fun'}|[{'type',2315,'function',[]}]]]]}]]]]}]}],
		%% Line 2325
		'spec' =
		    %% Line 2325
		    [{{'spawn_link',1},[{'type',2325,'bounded_fun',[{'type',2325,'fun',[{'type',2325,'product',[{'var',2325,'Fun'}]}|[{'type',2325,'pid',[]}]]}|[[{'type',2326,'constraint',[{'atom',2326,'is_subtype'}|[[{'var',2326,'Fun'}|[{'type',2326,'function',[]}]]]]}]]]}]}],
		%% Line 2334
		'spec' =
		    %% Line 2334
		    [{{'spawn_link',2},[{'type',2334,'bounded_fun',[{'type',2334,'fun',[{'type',2334,'product',[{'var',2334,'Node'}|[{'var',2334,'Fun'}]]}|[{'type',2334,'pid',[]}]]}|[[{'type',2335,'constraint',[{'atom',2335,'is_subtype'}|[[{'var',2335,'Node'}|[{'type',2335,'node',[]}]]]]}|[{'type',2336,'constraint',[{'atom',2336,'is_subtype'}|[[{'var',2336,'Fun'}|[{'type',2336,'function',[]}]]]]}]]]]}]}],
		%% Line 2348
		'spec' =
		    %% Line 2348
		    [{{'spawn_monitor',1},[{'type',2348,'bounded_fun',[{'type',2348,'fun',[{'type',2348,'product',[{'var',2348,'Fun'}]}|[{'type',2348,'tuple',[{'type',2348,'pid',[]}|[{'type',2348,'reference',[]}]]}]]}|[[{'type',2349,'constraint',[{'atom',2349,'is_subtype'}|[[{'var',2349,'Fun'}|[{'type',2349,'function',[]}]]]]}]]]}]}],
		%% Line 2355
		'spec' =
		    %% Line 2355
		    [{{'spawn_monitor',3},[{'type',2355,'bounded_fun',[{'type',2355,'fun',[{'type',2355,'product',[{'var',2355,'Module'}|[{'var',2355,'Function'}|[{'var',2355,'Args'}]]]}|[{'type',2355,'tuple',[{'type',2355,'pid',[]}|[{'type',2355,'reference',[]}]]}]]}|[[{'type',2356,'constraint',[{'atom',2356,'is_subtype'}|[[{'var',2356,'Module'}|[{'type',2356,'module',[]}]]]]}|[{'type',2357,'constraint',[{'atom',2357,'is_subtype'}|[[{'var',2357,'Function'}|[{'type',2357,'atom',[]}]]]]}|[{'type',2358,'constraint',[{'atom',2358,'is_subtype'}|[[{'var',2358,'Args'}|[{'type',2358,'list',[{'type',2358,'term',[]}]}]]]]}]]]]]}]}],
		%% Line 2366
		'spec' =
		    %% Line 2366
		    [{{'spawn_opt',2},[{'type',2366,'bounded_fun',[{'type',2366,'fun',[{'type',2366,'product',[{'var',2366,'Fun'}|[{'var',2366,'Options'}]]}|[{'type',2366,'union',[{'type',2366,'pid',[]}|[{'type',2366,'tuple',[{'type',2366,'pid',[]}|[{'type',2366,'reference',[]}]]}]]}]]}|[[{'type',2367,'constraint',[{'atom',2367,'is_subtype'}|[[{'var',2367,'Fun'}|[{'type',2367,'function',[]}]]]]}|[{'type',2368,'constraint',[{'atom',2368,'is_subtype'}|[[{'var',2368,'Options'}|[{'type',2368,'list',[{'var',2368,'Option'}]}]]]]}|[{'type',2369,'constraint',[{'atom',2369,'is_subtype'}|[[{'var',2369,'Option'}|[{'type',2369,'union',[{'atom',2369,'link'}|[{'atom',2369,'monitor'}|[{'type',2370,'tuple',[{'atom',2370,'priority'}|[{'ann_type',2370,[{'var',2370,'Level'}|[{'type',2370,'priority_level',[]}]]}]]}|[{'type',2371,'tuple',[{'atom',2371,'fullsweep_after'}|[{'ann_type',2371,[{'var',2371,'Number'}|[{'type',2371,'non_neg_integer',[]}]]}]]}|[{'type',2372,'tuple',[{'atom',2372,'min_heap_size'}|[{'ann_type',2372,[{'var',2372,'Size'}|[{'type',2372,'non_neg_integer',[]}]]}]]}|[{'type',2373,'tuple',[{'atom',2373,'min_bin_vheap_size'}|[{'ann_type',2373,[{'var',2373,'VSize'}|[{'type',2373,'non_neg_integer',[]}]]}]]}]]]]]]}]]]]}]]]]]}]}],
		%% Line 2383
		'spec' =
		    %% Line 2383
		    [{{'spawn_opt',3},[{'type',2383,'bounded_fun',[{'type',2383,'fun',[{'type',2383,'product',[{'var',2383,'Node'}|[{'var',2383,'Fun'}|[{'var',2383,'Options'}]]]}|[{'type',2383,'union',[{'type',2383,'pid',[]}|[{'type',2383,'tuple',[{'type',2383,'pid',[]}|[{'type',2383,'reference',[]}]]}]]}]]}|[[{'type',2384,'constraint',[{'atom',2384,'is_subtype'}|[[{'var',2384,'Node'}|[{'type',2384,'node',[]}]]]]}|[{'type',2385,'constraint',[{'atom',2385,'is_subtype'}|[[{'var',2385,'Fun'}|[{'type',2385,'function',[]}]]]]}|[{'type',2386,'constraint',[{'atom',2386,'is_subtype'}|[[{'var',2386,'Options'}|[{'type',2386,'list',[{'var',2386,'Option'}]}]]]]}|[{'type',2387,'constraint',[{'atom',2387,'is_subtype'}|[[{'var',2387,'Option'}|[{'type',2387,'union',[{'atom',2387,'link'}|[{'atom',2387,'monitor'}|[{'type',2388,'tuple',[{'atom',2388,'priority'}|[{'ann_type',2388,[{'var',2388,'Level'}|[{'type',2388,'priority_level',[]}]]}]]}|[{'type',2389,'tuple',[{'atom',2389,'fullsweep_after'}|[{'ann_type',2389,[{'var',2389,'Number'}|[{'type',2389,'non_neg_integer',[]}]]}]]}|[{'type',2390,'tuple',[{'atom',2390,'min_heap_size'}|[{'ann_type',2390,[{'var',2390,'Size'}|[{'type',2390,'non_neg_integer',[]}]]}]]}|[{'type',2391,'tuple',[{'atom',2391,'min_bin_vheap_size'}|[{'ann_type',2391,[{'var',2391,'VSize'}|[{'type',2391,'non_neg_integer',[]}]]}]]}]]]]]]}]]]]}]]]]]]}]}],
		%% Line 2403
		'spec' =
		    %% Line 2403
		    [{{'spawn',4},[{'type',2403,'bounded_fun',[{'type',2403,'fun',[{'type',2403,'product',[{'var',2403,'Node'}|[{'var',2403,'Module'}|[{'var',2403,'Function'}|[{'var',2403,'Args'}]]]]}|[{'type',2403,'pid',[]}]]}|[[{'type',2404,'constraint',[{'atom',2404,'is_subtype'}|[[{'var',2404,'Node'}|[{'type',2404,'node',[]}]]]]}|[{'type',2405,'constraint',[{'atom',2405,'is_subtype'}|[[{'var',2405,'Module'}|[{'type',2405,'module',[]}]]]]}|[{'type',2406,'constraint',[{'atom',2406,'is_subtype'}|[[{'var',2406,'Function'}|[{'type',2406,'atom',[]}]]]]}|[{'type',2407,'constraint',[{'atom',2407,'is_subtype'}|[[{'var',2407,'Args'}|[{'type',2407,'list',[{'type',2407,'term',[]}]}]]]]}]]]]]]}]}],
		%% Line 2438
		'spec' =
		    %% Line 2438
		    [{{'spawn_link',4},[{'type',2438,'bounded_fun',[{'type',2438,'fun',[{'type',2438,'product',[{'var',2438,'Node'}|[{'var',2438,'Module'}|[{'var',2438,'Function'}|[{'var',2438,'Args'}]]]]}|[{'type',2438,'pid',[]}]]}|[[{'type',2439,'constraint',[{'atom',2439,'is_subtype'}|[[{'var',2439,'Node'}|[{'type',2439,'node',[]}]]]]}|[{'type',2440,'constraint',[{'atom',2440,'is_subtype'}|[[{'var',2440,'Module'}|[{'type',2440,'module',[]}]]]]}|[{'type',2441,'constraint',[{'atom',2441,'is_subtype'}|[[{'var',2441,'Function'}|[{'type',2441,'atom',[]}]]]]}|[{'type',2442,'constraint',[{'atom',2442,'is_subtype'}|[[{'var',2442,'Args'}|[{'type',2442,'list',[{'type',2442,'term',[]}]}]]]]}]]]]]]}]}],
		%% Line 2473
		'spec' =
		    %% Line 2473
		    [{{'spawn_opt',4},[{'type',2473,'bounded_fun',[{'type',2473,'fun',[{'type',2473,'product',[{'var',2473,'Module'}|[{'var',2473,'Function'}|[{'var',2473,'Args'}|[{'var',2473,'Options'}]]]]}|[{'type',2474,'union',[{'type',2474,'pid',[]}|[{'type',2474,'tuple',[{'type',2474,'pid',[]}|[{'type',2474,'reference',[]}]]}]]}]]}|[[{'type',2475,'constraint',[{'atom',2475,'is_subtype'}|[[{'var',2475,'Module'}|[{'type',2475,'module',[]}]]]]}|[{'type',2476,'constraint',[{'atom',2476,'is_subtype'}|[[{'var',2476,'Function'}|[{'type',2476,'atom',[]}]]]]}|[{'type',2477,'constraint',[{'atom',2477,'is_subtype'}|[[{'var',2477,'Args'}|[{'type',2477,'list',[{'type',2477,'term',[]}]}]]]]}|[{'type',2478,'constraint',[{'atom',2478,'is_subtype'}|[[{'var',2478,'Options'}|[{'type',2478,'list',[{'var',2478,'Option'}]}]]]]}|[{'type',2479,'constraint',[{'atom',2479,'is_subtype'}|[[{'var',2479,'Option'}|[{'type',2479,'union',[{'atom',2479,'link'}|[{'atom',2479,'monitor'}|[{'type',2480,'tuple',[{'atom',2480,'priority'}|[{'ann_type',2480,[{'var',2480,'Level'}|[{'type',2480,'priority_level',[]}]]}]]}|[{'type',2481,'tuple',[{'atom',2481,'fullsweep_after'}|[{'ann_type',2481,[{'var',2481,'Number'}|[{'type',2481,'non_neg_integer',[]}]]}]]}|[{'type',2482,'tuple',[{'atom',2482,'min_heap_size'}|[{'ann_type',2482,[{'var',2482,'Size'}|[{'type',2482,'non_neg_integer',[]}]]}]]}|[{'type',2483,'tuple',[{'atom',2483,'min_bin_vheap_size'}|[{'ann_type',2483,[{'var',2483,'VSize'}|[{'type',2483,'non_neg_integer',[]}]]}]]}]]]]]]}]]]]}]]]]]]]}]}],
		%% Line 2492
		'spec' =
		    %% Line 2492
		    [{{'spawn_opt',5},[{'type',2492,'bounded_fun',[{'type',2492,'fun',[{'type',2492,'product',[{'var',2492,'Node'}|[{'var',2492,'Module'}|[{'var',2492,'Function'}|[{'var',2492,'Args'}|[{'var',2492,'Options'}]]]]]}|[{'type',2493,'union',[{'type',2493,'pid',[]}|[{'type',2493,'tuple',[{'type',2493,'pid',[]}|[{'type',2493,'reference',[]}]]}]]}]]}|[[{'type',2494,'constraint',[{'atom',2494,'is_subtype'}|[[{'var',2494,'Node'}|[{'type',2494,'node',[]}]]]]}|[{'type',2495,'constraint',[{'atom',2495,'is_subtype'}|[[{'var',2495,'Module'}|[{'type',2495,'module',[]}]]]]}|[{'type',2496,'constraint',[{'atom',2496,'is_subtype'}|[[{'var',2496,'Function'}|[{'type',2496,'atom',[]}]]]]}|[{'type',2497,'constraint',[{'atom',2497,'is_subtype'}|[[{'var',2497,'Args'}|[{'type',2497,'list',[{'type',2497,'term',[]}]}]]]]}|[{'type',2498,'constraint',[{'atom',2498,'is_subtype'}|[[{'var',2498,'Options'}|[{'type',2498,'list',[{'var',2498,'Option'}]}]]]]}|[{'type',2499,'constraint',[{'atom',2499,'is_subtype'}|[[{'var',2499,'Option'}|[{'type',2499,'union',[{'atom',2499,'link'}|[{'atom',2499,'monitor'}|[{'type',2500,'tuple',[{'atom',2500,'priority'}|[{'ann_type',2500,[{'var',2500,'Level'}|[{'type',2500,'priority_level',[]}]]}]]}|[{'type',2501,'tuple',[{'atom',2501,'fullsweep_after'}|[{'ann_type',2501,[{'var',2501,'Number'}|[{'type',2501,'non_neg_integer',[]}]]}]]}|[{'type',2502,'tuple',[{'atom',2502,'min_heap_size'}|[{'ann_type',2502,[{'var',2502,'Size'}|[{'type',2502,'non_neg_integer',[]}]]}]]}|[{'type',2503,'tuple',[{'atom',2503,'min_bin_vheap_size'}|[{'ann_type',2503,[{'var',2503,'VSize'}|[{'type',2503,'non_neg_integer',[]}]]}]]}]]]]]]}]]]]}]]]]]]]]}]}],
		%% Line 2575
		'spec' =
		    %% Line 2575
		    [{{'erlang','yield',0},[{'type',2575,'fun',[{'type',2575,'product',[]}|[{'atom',2575,'true'}]]}]}],
		%% Line 2579
		'spec' =
		    %% Line 2579
		    [{{'nodes',0},[{'type',2579,'bounded_fun',[{'type',2579,'fun',[{'type',2579,'product',[]}|[{'var',2579,'Nodes'}]]}|[[{'type',2580,'constraint',[{'atom',2580,'is_subtype'}|[[{'var',2580,'Nodes'}|[{'type',2580,'list',[{'type',2580,'node',[]}]}]]]]}]]]}]}],
		%% Line 2584
		'spec' =
		    %% Line 2584
		    [{{'disconnect_node',1},[{'type',2584,'bounded_fun',[{'type',2584,'fun',[{'type',2584,'product',[{'var',2584,'Node'}]}|[{'type',2584,'union',[{'type',2584,'boolean',[]}|[{'atom',2584,'ignored'}]]}]]}|[[{'type',2585,'constraint',[{'atom',2585,'is_subtype'}|[[{'var',2585,'Node'}|[{'type',2585,'node',[]}]]]]}]]]}]}],
		%% Line 2589
		'spec' =
		    %% Line 2589
		    [{{'erlang','fun_info',1},[{'type',2589,'bounded_fun',[{'type',2589,'fun',[{'type',2589,'product',[{'var',2589,'Fun'}]}|[{'type',2589,'list',[{'type',2589,'tuple',[{'var',2589,'Item'}|[{'var',2589,'Info'}]]}]}]]}|[[{'type',2590,'constraint',[{'atom',2590,'is_subtype'}|[[{'var',2590,'Fun'}|[{'type',2590,'function',[]}]]]]}|[{'type',2591,'constraint',[{'atom',2591,'is_subtype'}|[[{'var',2591,'Item'}|[{'type',2591,'union',[{'atom',2591,'arity'}|[{'atom',2591,'env'}|[{'atom',2591,'index'}|[{'atom',2591,'name'}|[{'atom',2592,'module'}|[{'atom',2592,'new_index'}|[{'atom',2592,'new_uniq'}|[{'atom',2592,'pid'}|[{'atom',2592,'type'}|[{'atom',2592,'uniq'}]]]]]]]]]]}]]]]}|[{'type',2593,'constraint',[{'atom',2593,'is_subtype'}|[[{'var',2593,'Info'}|[{'type',2593,'term',[]}]]]]}]]]]]}]}],
		%% Line 2605
		'type' =
		    %% Line 2605
		    [{'dst',{'type',2605,'union',[{'type',2605,'pid',[]}|[{'type',2606,'port',[]}|[{'paren_type',2607,[{'ann_type',2607,[{'var',2607,'RegName'}|[{'type',2607,'atom',[]}]]}]}|[{'type',2608,'tuple',[{'ann_type',2608,[{'var',2608,'RegName'}|[{'type',2608,'atom',[]}]]}|[{'ann_type',2608,[{'var',2608,'Node'}|[{'type',2608,'node',[]}]]}]]}]]]]},[]}],
		%% Line 2610
		'spec' =
		    %% Line 2610
		    [{{'erlang','send_nosuspend',2},[{'type',2610,'bounded_fun',[{'type',2610,'fun',[{'type',2610,'product',[{'var',2610,'Dest'}|[{'var',2610,'Msg'}]]}|[{'type',2610,'boolean',[]}]]}|[[{'type',2611,'constraint',[{'atom',2611,'is_subtype'}|[[{'var',2611,'Dest'}|[{'type',2611,'dst',[]}]]]]}|[{'type',2612,'constraint',[{'atom',2612,'is_subtype'}|[[{'var',2612,'Msg'}|[{'type',2612,'term',[]}]]]]}]]]]}]}],
		%% Line 2616
		'spec' =
		    %% Line 2616
		    [{{'erlang','send_nosuspend',3},[{'type',2616,'bounded_fun',[{'type',2616,'fun',[{'type',2616,'product',[{'var',2616,'Dest'}|[{'var',2616,'Msg'}|[{'var',2616,'Options'}]]]}|[{'type',2616,'boolean',[]}]]}|[[{'type',2617,'constraint',[{'atom',2617,'is_subtype'}|[[{'var',2617,'Dest'}|[{'type',2617,'dst',[]}]]]]}|[{'type',2618,'constraint',[{'atom',2618,'is_subtype'}|[[{'var',2618,'Msg'}|[{'type',2618,'term',[]}]]]]}|[{'type',2619,'constraint',[{'atom',2619,'is_subtype'}|[[{'var',2619,'Options'}|[{'type',2619,'list',[{'atom',2619,'noconnect'}]}]]]]}]]]]]}]}],
		%% Line 2626
		'spec' =
		    %% Line 2626
		    [{{'erlang','localtime_to_universaltime',1},[{'type',2626,'bounded_fun',[{'type',2626,'fun',[{'type',2626,'product',[{'var',2626,'Localtime'}]}|[{'var',2626,'Universaltime'}]]}|[[{'type',2627,'constraint',[{'atom',2627,'is_subtype'}|[[{'var',2627,'Localtime'}|[{'remote_type',2627,[{'atom',2627,'calendar'}|[{'atom',2627,'datetime'}|[[]]]]}]]]]}|[{'type',2628,'constraint',[{'atom',2628,'is_subtype'}|[[{'var',2628,'Universaltime'}|[{'remote_type',2628,[{'atom',2628,'calendar'}|[{'atom',2628,'datetime'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 2632
		'spec' =
		    %% Line 2632
		    [{{'erlang','suspend_process',1},[{'type',2632,'bounded_fun',[{'type',2632,'fun',[{'type',2632,'product',[{'var',2632,'Suspendee'}]}|[{'atom',2632,'true'}]]}|[[{'type',2633,'constraint',[{'atom',2633,'is_subtype'}|[[{'var',2633,'Suspendee'}|[{'type',2633,'pid',[]}]]]]}]]]}]}],
		%% Line 2662
		'spec' =
		    %% Line 2662
		    [{{'port_command',2},[{'type',2662,'bounded_fun',[{'type',2662,'fun',[{'type',2662,'product',[{'var',2662,'Port'}|[{'var',2662,'Data'}]]}|[{'atom',2662,'true'}]]}|[[{'type',2663,'constraint',[{'atom',2663,'is_subtype'}|[[{'var',2663,'Port'}|[{'type',2663,'union',[{'type',2663,'port',[]}|[{'type',2663,'atom',[]}]]}]]]]}|[{'type',2664,'constraint',[{'atom',2664,'is_subtype'}|[[{'var',2664,'Data'}|[{'type',2664,'iodata',[]}]]]]}]]]]}]}],
		%% Line 2675
		'spec' =
		    %% Line 2675
		    [{{'port_command',3},[{'type',2675,'bounded_fun',[{'type',2675,'fun',[{'type',2675,'product',[{'var',2675,'Port'}|[{'var',2675,'Data'}|[{'var',2675,'OptionList'}]]]}|[{'type',2675,'boolean',[]}]]}|[[{'type',2676,'constraint',[{'atom',2676,'is_subtype'}|[[{'var',2676,'Port'}|[{'type',2676,'union',[{'type',2676,'port',[]}|[{'type',2676,'atom',[]}]]}]]]]}|[{'type',2677,'constraint',[{'atom',2677,'is_subtype'}|[[{'var',2677,'Data'}|[{'type',2677,'iodata',[]}]]]]}|[{'type',2678,'constraint',[{'atom',2678,'is_subtype'}|[[{'var',2678,'Option'}|[{'type',2678,'union',[{'atom',2678,'force'}|[{'atom',2678,'nosuspend'}]]}]]]]}|[{'type',2679,'constraint',[{'atom',2679,'is_subtype'}|[[{'var',2679,'OptionList'}|[{'type',2679,'list',[{'var',2679,'Option'}]}]]]]}]]]]]]}]}],
		%% Line 2690
		'spec' =
		    %% Line 2690
		    [{{'port_connect',2},[{'type',2690,'bounded_fun',[{'type',2690,'fun',[{'type',2690,'product',[{'var',2690,'Port'}|[{'var',2690,'Pid'}]]}|[{'atom',2690,'true'}]]}|[[{'type',2691,'constraint',[{'atom',2691,'is_subtype'}|[[{'var',2691,'Port'}|[{'type',2691,'union',[{'type',2691,'port',[]}|[{'type',2691,'atom',[]}]]}]]]]}|[{'type',2692,'constraint',[{'atom',2692,'is_subtype'}|[[{'var',2692,'Pid'}|[{'type',2692,'pid',[]}]]]]}]]]]}]}],
		%% Line 2703
		'spec' =
		    %% Line 2703
		    [{{'port_close',1},[{'type',2703,'bounded_fun',[{'type',2703,'fun',[{'type',2703,'product',[{'var',2703,'Port'}]}|[{'atom',2703,'true'}]]}|[[{'type',2704,'constraint',[{'atom',2704,'is_subtype'}|[[{'var',2704,'Port'}|[{'type',2704,'union',[{'type',2704,'port',[]}|[{'type',2704,'atom',[]}]]}]]]]}]]]}]}],
		%% Line 2715
		'spec' =
		    %% Line 2715
		    [{{'port_control',3},[{'type',2715,'bounded_fun',[{'type',2715,'fun',[{'type',2715,'product',[{'var',2715,'Port'}|[{'var',2715,'Operation'}|[{'var',2715,'Data'}]]]}|[{'type',2715,'union',[{'type',2715,'iodata',[]}|[{'type',2715,'binary',[]}]]}]]}|[[{'type',2716,'constraint',[{'atom',2716,'is_subtype'}|[[{'var',2716,'Port'}|[{'type',2716,'union',[{'type',2716,'port',[]}|[{'type',2716,'atom',[]}]]}]]]]}|[{'type',2717,'constraint',[{'atom',2717,'is_subtype'}|[[{'var',2717,'Operation'}|[{'type',2717,'integer',[]}]]]]}|[{'type',2718,'constraint',[{'atom',2718,'is_subtype'}|[[{'var',2718,'Data'}|[{'type',2718,'iodata',[]}]]]]}]]]]]}]}],
		%% Line 2729
		'spec' =
		    %% Line 2729
		    [{{'erlang','port_call',2},[{'type',2729,'bounded_fun',[{'type',2729,'fun',[{'type',2729,'product',[{'var',2729,'Port'}|[{'var',2729,'Data'}]]}|[{'type',2729,'term',[]}]]}|[[{'type',2730,'constraint',[{'atom',2730,'is_subtype'}|[[{'var',2730,'Port'}|[{'type',2730,'union',[{'type',2730,'port',[]}|[{'type',2730,'atom',[]}]]}]]]]}|[{'type',2731,'constraint',[{'atom',2731,'is_subtype'}|[[{'var',2731,'Data'}|[{'type',2731,'term',[]}]]]]}]]]]}]}],
		%% Line 2742
		'spec' =
		    %% Line 2742
		    [{{'erlang','port_call',3},[{'type',2742,'bounded_fun',[{'type',2742,'fun',[{'type',2742,'product',[{'var',2742,'Port'}|[{'var',2742,'Operation'}|[{'var',2742,'Data'}]]]}|[{'type',2742,'term',[]}]]}|[[{'type',2743,'constraint',[{'atom',2743,'is_subtype'}|[[{'var',2743,'Port'}|[{'type',2743,'union',[{'type',2743,'port',[]}|[{'type',2743,'atom',[]}]]}]]]]}|[{'type',2744,'constraint',[{'atom',2744,'is_subtype'}|[[{'var',2744,'Operation'}|[{'type',2744,'integer',[]}]]]]}|[{'type',2745,'constraint',[{'atom',2745,'is_subtype'}|[[{'var',2745,'Data'}|[{'type',2745,'term',[]}]]]]}]]]]]}]}],
		%% Line 2756
		'spec' =
		    %% Line 2756
		    [{{'erlang','port_info',1},[{'type',2756,'bounded_fun',[{'type',2756,'fun',[{'type',2756,'product',[{'var',2756,'Port'}]}|[{'var',2756,'Result'}]]}|[[{'type',2757,'constraint',[{'atom',2757,'is_subtype'}|[[{'var',2757,'Port'}|[{'type',2757,'union',[{'type',2757,'port',[]}|[{'type',2757,'atom',[]}]]}]]]]}|[{'type',2758,'constraint',[{'atom',2758,'is_subtype'}|[[{'var',2758,'ResultItem'}|[{'type',2758,'union',[{'type',2758,'tuple',[{'atom',2758,'registered_name'}|[{'ann_type',2758,[{'var',2758,'RegisteredName'}|[{'type',2758,'atom',[]}]]}]]}|[{'type',2759,'tuple',[{'atom',2759,'id'}|[{'ann_type',2759,[{'var',2759,'Index'}|[{'type',2759,'non_neg_integer',[]}]]}]]}|[{'type',2760,'tuple',[{'atom',2760,'connected'}|[{'ann_type',2760,[{'var',2760,'Pid'}|[{'type',2760,'pid',[]}]]}]]}|[{'type',2761,'tuple',[{'atom',2761,'links'}|[{'ann_type',2761,[{'var',2761,'Pids'}|[{'type',2761,'list',[{'type',2761,'pid',[]}]}]]}]]}|[{'type',2762,'tuple',[{'atom',2762,'name'}|[{'ann_type',2762,[{'var',2762,'String'}|[{'type',2762,'string',[]}]]}]]}|[{'type',2763,'tuple',[{'atom',2763,'input'}|[{'ann_type',2763,[{'var',2763,'Bytes'}|[{'type',2763,'non_neg_integer',[]}]]}]]}|[{'type',2764,'tuple',[{'atom',2764,'output'}|[{'ann_type',2764,[{'var',2764,'Bytes'}|[{'type',2764,'non_neg_integer',[]}]]}]]}|[{'type',2765,'tuple',[{'atom',2765,'os_pid'}|[{'ann_type',2765,[{'var',2765,'OsPid'}|[{'type',2765,'union',[{'type',2765,'non_neg_integer',[]}|[{'atom',2765,'undefined'}]]}]]}]]}]]]]]]]]}]]]]}|[{'type',2766,'constraint',[{'atom',2766,'is_subtype'}|[[{'var',2766,'Result'}|[{'type',2766,'union',[{'type',2766,'list',[{'var',2766,'ResultItem'}]}|[{'atom',2766,'undefined'}]]}]]]]}]]]]]}]}],
		%% Line 2777
		'spec' =
		    %% Line 2777
		    [{{'erlang','port_info',2},[{'type',2777,'bounded_fun',[{'type',2777,'fun',[{'type',2777,'product',[{'var',2777,'Port'}|[{'atom',2777,'connected'}]]}|[{'type',2777,'union',[{'type',2777,'tuple',[{'atom',2777,'connected'}|[{'var',2777,'Pid'}]]}|[{'atom',2777,'undefined'}]]}]]}|[[{'type',2778,'constraint',[{'atom',2778,'is_subtype'}|[[{'var',2778,'Port'}|[{'type',2778,'union',[{'type',2778,'port',[]}|[{'type',2778,'atom',[]}]]}]]]]}|[{'type',2779,'constraint',[{'atom',2779,'is_subtype'}|[[{'var',2779,'Pid'}|[{'type',2779,'pid',[]}]]]]}]]]]}|[{'type',2780,'bounded_fun',[{'type',2780,'fun',[{'type',2780,'product',[{'var',2780,'Port'}|[{'atom',2780,'id'}]]}|[{'type',2780,'union',[{'type',2780,'tuple',[{'atom',2780,'id'}|[{'var',2780,'Index'}]]}|[{'atom',2780,'undefined'}]]}]]}|[[{'type',2781,'constraint',[{'atom',2781,'is_subtype'}|[[{'var',2781,'Port'}|[{'type',2781,'union',[{'type',2781,'port',[]}|[{'type',2781,'atom',[]}]]}]]]]}|[{'type',2782,'constraint',[{'atom',2782,'is_subtype'}|[[{'var',2782,'Index'}|[{'type',2782,'non_neg_integer',[]}]]]]}]]]]}|[{'type',2783,'bounded_fun',[{'type',2783,'fun',[{'type',2783,'product',[{'var',2783,'Port'}|[{'atom',2783,'input'}]]}|[{'type',2783,'union',[{'type',2783,'tuple',[{'atom',2783,'input'}|[{'var',2783,'Bytes'}]]}|[{'atom',2783,'undefined'}]]}]]}|[[{'type',2784,'constraint',[{'atom',2784,'is_subtype'}|[[{'var',2784,'Port'}|[{'type',2784,'union',[{'type',2784,'port',[]}|[{'type',2784,'atom',[]}]]}]]]]}|[{'type',2785,'constraint',[{'atom',2785,'is_subtype'}|[[{'var',2785,'Bytes'}|[{'type',2785,'non_neg_integer',[]}]]]]}]]]]}|[{'type',2786,'bounded_fun',[{'type',2786,'fun',[{'type',2786,'product',[{'var',2786,'Port'}|[{'atom',2786,'links'}]]}|[{'type',2786,'union',[{'type',2786,'tuple',[{'atom',2786,'links'}|[{'var',2786,'Pids'}]]}|[{'atom',2786,'undefined'}]]}]]}|[[{'type',2787,'constraint',[{'atom',2787,'is_subtype'}|[[{'var',2787,'Port'}|[{'type',2787,'union',[{'type',2787,'port',[]}|[{'type',2787,'atom',[]}]]}]]]]}|[{'type',2788,'constraint',[{'atom',2788,'is_subtype'}|[[{'var',2788,'Pids'}|[{'type',2788,'list',[{'type',2788,'pid',[]}]}]]]]}]]]]}|[{'type',2789,'bounded_fun',[{'type',2789,'fun',[{'type',2789,'product',[{'var',2789,'Port'}|[{'atom',2789,'locking'}]]}|[{'type',2789,'union',[{'type',2789,'tuple',[{'atom',2789,'locking'}|[{'var',2789,'Locking'}]]}|[{'atom',2789,'undefined'}]]}]]}|[[{'type',2790,'constraint',[{'atom',2790,'is_subtype'}|[[{'var',2790,'Port'}|[{'type',2790,'union',[{'type',2790,'port',[]}|[{'type',2790,'atom',[]}]]}]]]]}|[{'type',2791,'constraint',[{'atom',2791,'is_subtype'}|[[{'var',2791,'Locking'}|[{'type',2791,'union',[{'atom',2791,'false'}|[{'atom',2791,'port_level'}|[{'atom',2791,'driver_level'}]]]}]]]]}]]]]}|[{'type',2792,'bounded_fun',[{'type',2792,'fun',[{'type',2792,'product',[{'var',2792,'Port'}|[{'atom',2792,'memory'}]]}|[{'type',2792,'union',[{'type',2792,'tuple',[{'atom',2792,'memory'}|[{'var',2792,'Bytes'}]]}|[{'atom',2792,'undefined'}]]}]]}|[[{'type',2793,'constraint',[{'atom',2793,'is_subtype'}|[[{'var',2793,'Port'}|[{'type',2793,'union',[{'type',2793,'port',[]}|[{'type',2793,'atom',[]}]]}]]]]}|[{'type',2794,'constraint',[{'atom',2794,'is_subtype'}|[[{'var',2794,'Bytes'}|[{'type',2794,'non_neg_integer',[]}]]]]}]]]]}|[{'type',2795,'bounded_fun',[{'type',2795,'fun',[{'type',2795,'product',[{'var',2795,'Port'}|[{'atom',2795,'monitors'}]]}|[{'type',2795,'union',[{'type',2795,'tuple',[{'atom',2795,'monitors'}|[{'var',2795,'Monitors'}]]}|[{'atom',2795,'undefined'}]]}]]}|[[{'type',2796,'constraint',[{'atom',2796,'is_subtype'}|[[{'var',2796,'Port'}|[{'type',2796,'union',[{'type',2796,'port',[]}|[{'type',2796,'atom',[]}]]}]]]]}|[{'type',2797,'constraint',[{'atom',2797,'is_subtype'}|[[{'var',2797,'Monitors'}|[{'type',2797,'list',[{'type',2797,'tuple',[{'atom',2797,'process'}|[{'type',2797,'pid',[]}]]}]}]]]]}]]]]}|[{'type',2798,'bounded_fun',[{'type',2798,'fun',[{'type',2798,'product',[{'var',2798,'Port'}|[{'atom',2798,'name'}]]}|[{'type',2798,'union',[{'type',2798,'tuple',[{'atom',2798,'name'}|[{'var',2798,'Name'}]]}|[{'atom',2798,'undefined'}]]}]]}|[[{'type',2799,'constraint',[{'atom',2799,'is_subtype'}|[[{'var',2799,'Port'}|[{'type',2799,'union',[{'type',2799,'port',[]}|[{'type',2799,'atom',[]}]]}]]]]}|[{'type',2800,'constraint',[{'atom',2800,'is_subtype'}|[[{'var',2800,'Name'}|[{'type',2800,'string',[]}]]]]}]]]]}|[{'type',2801,'bounded_fun',[{'type',2801,'fun',[{'type',2801,'product',[{'var',2801,'Port'}|[{'atom',2801,'os_pid'}]]}|[{'type',2801,'union',[{'type',2801,'tuple',[{'atom',2801,'os_pid'}|[{'var',2801,'OsPid'}]]}|[{'atom',2801,'undefined'}]]}]]}|[[{'type',2802,'constraint',[{'atom',2802,'is_subtype'}|[[{'var',2802,'Port'}|[{'type',2802,'union',[{'type',2802,'port',[]}|[{'type',2802,'atom',[]}]]}]]]]}|[{'type',2803,'constraint',[{'atom',2803,'is_subtype'}|[[{'var',2803,'OsPid'}|[{'type',2803,'union',[{'type',2803,'non_neg_integer',[]}|[{'atom',2803,'undefined'}]]}]]]]}]]]]}|[{'type',2804,'bounded_fun',[{'type',2804,'fun',[{'type',2804,'product',[{'var',2804,'Port'}|[{'atom',2804,'output'}]]}|[{'type',2804,'union',[{'type',2804,'tuple',[{'atom',2804,'output'}|[{'var',2804,'Bytes'}]]}|[{'atom',2804,'undefined'}]]}]]}|[[{'type',2805,'constraint',[{'atom',2805,'is_subtype'}|[[{'var',2805,'Port'}|[{'type',2805,'union',[{'type',2805,'port',[]}|[{'type',2805,'atom',[]}]]}]]]]}|[{'type',2806,'constraint',[{'atom',2806,'is_subtype'}|[[{'var',2806,'Bytes'}|[{'type',2806,'non_neg_integer',[]}]]]]}]]]]}|[{'type',2807,'bounded_fun',[{'type',2807,'fun',[{'type',2807,'product',[{'var',2807,'Port'}|[{'atom',2807,'parallelism'}]]}|[{'type',2807,'union',[{'type',2807,'tuple',[{'atom',2807,'parallelism'}|[{'var',2807,'Boolean'}]]}|[{'atom',2807,'undefined'}]]}]]}|[[{'type',2808,'constraint',[{'atom',2808,'is_subtype'}|[[{'var',2808,'Port'}|[{'type',2808,'union',[{'type',2808,'port',[]}|[{'type',2808,'atom',[]}]]}]]]]}|[{'type',2809,'constraint',[{'atom',2809,'is_subtype'}|[[{'var',2809,'Boolean'}|[{'type',2809,'boolean',[]}]]]]}]]]]}|[{'type',2810,'bounded_fun',[{'type',2810,'fun',[{'type',2810,'product',[{'var',2810,'Port'}|[{'atom',2810,'queue_size'}]]}|[{'type',2810,'union',[{'type',2810,'tuple',[{'atom',2810,'queue_size'}|[{'var',2810,'Bytes'}]]}|[{'atom',2810,'undefined'}]]}]]}|[[{'type',2811,'constraint',[{'atom',2811,'is_subtype'}|[[{'var',2811,'Port'}|[{'type',2811,'union',[{'type',2811,'port',[]}|[{'type',2811,'atom',[]}]]}]]]]}|[{'type',2812,'constraint',[{'atom',2812,'is_subtype'}|[[{'var',2812,'Bytes'}|[{'type',2812,'non_neg_integer',[]}]]]]}]]]]}|[{'type',2813,'bounded_fun',[{'type',2813,'fun',[{'type',2813,'product',[{'var',2813,'Port'}|[{'atom',2813,'registered_name'}]]}|[{'type',2813,'union',[{'type',2813,'tuple',[{'atom',2813,'registered_name'}|[{'var',2813,'RegisteredName'}]]}|[{'type',2813,'nil',[]}|[{'atom',2813,'undefined'}]]]}]]}|[[{'type',2814,'constraint',[{'atom',2814,'is_subtype'}|[[{'var',2814,'Port'}|[{'type',2814,'union',[{'type',2814,'port',[]}|[{'type',2814,'atom',[]}]]}]]]]}|[{'type',2815,'constraint',[{'atom',2815,'is_subtype'}|[[{'var',2815,'RegisteredName'}|[{'type',2815,'atom',[]}]]]]}]]]]}]]]]]]]]]]]]]}],
		%% Line 2826
		'spec' =
		    %% Line 2826
		    [{{'erlang','port_set_data',2},[{'type',2826,'bounded_fun',[{'type',2826,'fun',[{'type',2826,'product',[{'var',2826,'Port'}|[{'var',2826,'Data'}]]}|[{'atom',2826,'true'}]]}|[[{'type',2827,'constraint',[{'atom',2827,'is_subtype'}|[[{'var',2827,'Port'}|[{'type',2827,'union',[{'type',2827,'port',[]}|[{'type',2827,'atom',[]}]]}]]]]}|[{'type',2828,'constraint',[{'atom',2828,'is_subtype'}|[[{'var',2828,'Data'}|[{'type',2828,'term',[]}]]]]}]]]]}]}],
		%% Line 2833
		'spec' =
		    %% Line 2833
		    [{{'erlang','port_get_data',1},[{'type',2833,'bounded_fun',[{'type',2833,'fun',[{'type',2833,'product',[{'var',2833,'Port'}]}|[{'type',2833,'term',[]}]]}|[[{'type',2834,'constraint',[{'atom',2834,'is_subtype'}|[[{'var',2834,'Port'}|[{'type',2834,'union',[{'type',2834,'port',[]}|[{'type',2834,'atom',[]}]]}]]]]}]]]}]}],
		%% Line 2846
		'spec' =
		    %% Line 2846
		    [{{'erlang','dlink',1},[{'type',2846,'fun',[{'type',2846,'product',[{'type',2846,'union',[{'type',2846,'pid',[]}|[{'type',2846,'port',[]}]]}]}|[{'atom',2846,'true'}]]}]}],
		%% Line 2854
		'spec' =
		    %% Line 2854
		    [{{'erlang','dunlink',1},[{'type',2854,'fun',[{'type',2854,'product',[{'type',2854,'identifier',[]}]}|[{'atom',2854,'true'}]]}]}],
		%% Line 2924
		'spec' =
		    %% Line 2924
		    [{{'erlang','dmonitor_p',2},[{'type',2924,'fun',[{'type',2924,'product',[{'atom',2924,'process'}|[{'type',2924,'union',[{'type',2924,'pid',[]}|[{'type',2924,'tuple',[{'type',2924,'atom',[]}|[{'type',2924,'atom',[]}]]}]]}]]}|[{'type',2924,'reference',[]}]]}]}],
		%% Line 2948
		'spec' =
		    %% Line 2948
		    [{{'erlang','delay_trap',2},[{'type',2948,'fun',[{'type',2948,'product',[{'var',2948,'Result'}|[{'type',2948,'timeout',[]}]]}|[{'var',2948,'Result'}]]}]}],
		%% Line 2959
		'spec' =
		    %% Line 2959
		    [{{'erlang','set_cookie',2},[{'type',2959,'bounded_fun',[{'type',2959,'fun',[{'type',2959,'product',[{'var',2959,'Node'}|[{'var',2959,'Cookie'}]]}|[{'atom',2959,'true'}]]}|[[{'type',2960,'constraint',[{'atom',2960,'is_subtype'}|[[{'var',2960,'Node'}|[{'type',2960,'node',[]}]]]]}|[{'type',2961,'constraint',[{'atom',2961,'is_subtype'}|[[{'var',2961,'Cookie'}|[{'type',2961,'atom',[]}]]]]}]]]]}]}],
		%% Line 2970
		'spec' =
		    %% Line 2970
		    [{{'erlang','get_cookie',0},[{'type',2970,'bounded_fun',[{'type',2970,'fun',[{'type',2970,'product',[]}|[{'type',2970,'union',[{'var',2970,'Cookie'}|[{'atom',2970,'nocookie'}]]}]]}|[[{'type',2971,'constraint',[{'atom',2971,'is_subtype'}|[[{'var',2971,'Cookie'}|[{'type',2971,'atom',[]}]]]]}]]]}]}],
		%% Line 2975
		'spec' =
		    %% Line 2975
		    [{{'integer_to_list',2},[{'type',2975,'bounded_fun',[{'type',2975,'fun',[{'type',2975,'product',[{'var',2975,'Integer'}|[{'var',2975,'Base'}]]}|[{'type',2975,'string',[]}]]}|[[{'type',2976,'constraint',[{'atom',2976,'is_subtype'}|[[{'var',2976,'Integer'}|[{'type',2976,'integer',[]}]]]]}|[{'type',2977,'constraint',[{'atom',2977,'is_subtype'}|[[{'var',2977,'Base'}|[{'type',2977,'range',[{'integer',2977,2}|[{'integer',2977,36}]]}]]]]}]]]]}]}],
		%% Line 3005
		'spec' =
		    %% Line 3005
		    [{{'integer_to_binary',2},[{'type',3005,'bounded_fun',[{'type',3005,'fun',[{'type',3005,'product',[{'var',3005,'Integer'}|[{'var',3005,'Base'}]]}|[{'type',3005,'binary',[]}]]}|[[{'type',3006,'constraint',[{'atom',3006,'is_subtype'}|[[{'var',3006,'Integer'}|[{'type',3006,'integer',[]}]]]]}|[{'type',3007,'constraint',[{'atom',3007,'is_subtype'}|[[{'var',3007,'Base'}|[{'type',3007,'range',[{'integer',3007,2}|[{'integer',3007,36}]]}]]]]}]]]]}]}],
		%% Line 3043
		'type' =
		    %% Line 3043
		    [{{'record','cpu'},[{'record_field',3043,{'atom',3043,'node'},{'op',3043,'-',{'integer',3043,1}}}|[{'record_field',3044,{'atom',3044,'processor'},{'op',3044,'-',{'integer',3044,1}}}|[{'record_field',3045,{'atom',3045,'processor_node'},{'op',3045,'-',{'integer',3045,1}}}|[{'record_field',3046,{'atom',3046,'core'},{'op',3046,'-',{'integer',3046,1}}}|[{'record_field',3047,{'atom',3047,'thread'},{'op',3047,'-',{'integer',3047,1}}}|[{'record_field',3048,{'atom',3048,'logical'},{'op',3048,'-',{'integer',3048,1}}}]]]]]],[]}],
		%% Line 3197
		'spec' =
		    %% Line 3197
		    [{{'erlang','await_proc_exit',3},[{'type',3197,'fun',[{'type',3197,'product',[{'type',3197,'dst',[]}|[{'type',3197,'union',[{'atom',3197,'apply'}|[{'atom',3197,'data'}|[{'atom',3197,'reason'}]]]}|[{'type',3197,'term',[]}]]]}|[{'type',3197,'term',[]}]]}]}],
		%% Line 3213
		'spec' =
		    %% Line 3213
		    [{{'min',2},[{'type',3213,'bounded_fun',[{'type',3213,'fun',[{'type',3213,'product',[{'var',3213,'Term1'}|[{'var',3213,'Term2'}]]}|[{'var',3213,'Minimum'}]]}|[[{'type',3214,'constraint',[{'atom',3214,'is_subtype'}|[[{'var',3214,'Term1'}|[{'type',3214,'term',[]}]]]]}|[{'type',3215,'constraint',[{'atom',3215,'is_subtype'}|[[{'var',3215,'Term2'}|[{'type',3215,'term',[]}]]]]}|[{'type',3216,'constraint',[{'atom',3216,'is_subtype'}|[[{'var',3216,'Minimum'}|[{'type',3216,'term',[]}]]]]}]]]]]}]}],
		%% Line 3220
		'spec' =
		    %% Line 3220
		    [{{'max',2},[{'type',3220,'bounded_fun',[{'type',3220,'fun',[{'type',3220,'product',[{'var',3220,'Term1'}|[{'var',3220,'Term2'}]]}|[{'var',3220,'Maximum'}]]}|[[{'type',3221,'constraint',[{'atom',3221,'is_subtype'}|[[{'var',3221,'Term1'}|[{'type',3221,'term',[]}]]]]}|[{'type',3222,'constraint',[{'atom',3222,'is_subtype'}|[[{'var',3222,'Term2'}|[{'type',3222,'term',[]}]]]]}|[{'type',3223,'constraint',[{'atom',3223,'is_subtype'}|[[{'var',3223,'Maximum'}|[{'type',3223,'term',[]}]]]]}]]]]]}]}],
		%% Line 3235
		'type' =
		    %% Line 3235
		    [{'memory_type',{'type',3235,'union',[{'atom',3235,'total'}|[{'atom',3235,'processes'}|[{'atom',3235,'processes_used'}|[{'atom',3235,'system'}|[{'atom',3236,'atom'}|[{'atom',3236,'atom_used'}|[{'atom',3236,'binary'}|[{'atom',3236,'code'}|[{'atom',3236,'ets'}|[{'atom',3237,'low'}|[{'atom',3237,'maximum'}]]]]]]]]]]]},[]}],
		%% Line 3244
		'type' =
		    %% Line 3244
		    [{{'record','memory'},[{'record_field',3244,{'atom',3244,'total'},{'integer',3244,0}}|[{'record_field',3245,{'atom',3245,'processes'},{'integer',3245,0}}|[{'record_field',3246,{'atom',3246,'processes_used'},{'integer',3246,0}}|[{'record_field',3247,{'atom',3247,'system'},{'integer',3247,0}}|[{'record_field',3248,{'atom',3248,'atom'},{'integer',3248,0}}|[{'record_field',3249,{'atom',3249,'atom_used'},{'integer',3249,0}}|[{'record_field',3250,{'atom',3250,'binary'},{'integer',3250,0}}|[{'record_field',3251,{'atom',3251,'code'},{'integer',3251,0}}|[{'record_field',3252,{'atom',3252,'ets'},{'integer',3252,0}}|[{'record_field',3253,{'atom',3253,'low'},{'integer',3253,0}}|[{'record_field',3254,{'atom',3254,'maximum'},{'integer',3254,0}}]]]]]]]]]]],[]}],
		%% Line 3256
		'spec' =
		    %% Line 3256
		    [{{'erlang','memory',0},[{'type',3256,'bounded_fun',[{'type',3256,'fun',[{'type',3256,'product',[]}|[{'type',3256,'list',[{'type',3256,'tuple',[{'var',3256,'Type'}|[{'var',3256,'Size'}]]}]}]]}|[[{'type',3257,'constraint',[{'atom',3257,'is_subtype'}|[[{'var',3257,'Type'}|[{'type',3257,'memory_type',[]}]]]]}|[{'type',3258,'constraint',[{'atom',3258,'is_subtype'}|[[{'var',3258,'Size'}|[{'type',3258,'non_neg_integer',[]}]]]]}]]]]}]}],
		%% Line 3283
		'spec' =
		    %% Line 3283
		    [{{'erlang','memory',1},[{'type',3283,'fun',[{'type',3283,'product',[{'ann_type',3283,[{'var',3283,'Type'}|[{'type',3283,'memory_type',[]}]]}]}|[{'type',3283,'non_neg_integer',[]}]]}|[{'type',3284,'fun',[{'type',3284,'product',[{'ann_type',3284,[{'var',3284,'TypeList'}|[{'type',3284,'list',[{'type',3284,'memory_type',[]}]}]]}]}|[{'type',3284,'list',[{'type',3284,'tuple',[{'type',3284,'memory_type',[]}|[{'type',3284,'non_neg_integer',[]}]]}]}]]}]]}],
		%% Line 3649
		'spec' =
		    %% Line 3649
		    [{{'erlang','await_sched_wall_time_modifications',2},[{'type',3649,'bounded_fun',[{'type',3649,'fun',[{'type',3649,'product',[{'var',3649,'Ref'}|[{'var',3649,'Result'}]]}|[{'type',3649,'boolean',[]}]]}|[[{'type',3650,'constraint',[{'atom',3650,'is_subtype'}|[[{'var',3650,'Ref'}|[{'type',3650,'reference',[]}]]]]}|[{'type',3651,'constraint',[{'atom',3651,'is_subtype'}|[[{'var',3651,'Result'}|[{'type',3651,'boolean',[]}]]]]}]]]]}]}],
		%% Line 3657
		'spec' =
		    %% Line 3657
		    [{{'erlang','gather_sched_wall_time_result',1},[{'type',3657,'bounded_fun',[{'type',3657,'fun',[{'type',3657,'product',[{'var',3657,'Ref'}]}|[{'type',3657,'list',[{'type',3657,'tuple',[{'type',3657,'pos_integer',[]}|[{'type',3658,'non_neg_integer',[]}|[{'type',3659,'non_neg_integer',[]}]]]}]}]]}|[[{'type',3660,'constraint',[{'atom',3660,'is_subtype'}|[[{'var',3660,'Ref'}|[{'type',3660,'reference',[]}]]]]}]]]}]}],
		%% Line 3680
		'spec' =
		    %% Line 3680
		    [{{'erlang','gather_gc_info_result',1},[{'type',3680,'bounded_fun',[{'type',3680,'fun',[{'type',3680,'product',[{'var',3680,'Ref'}]}|[{'type',3681,'tuple',[{'type',3681,'number',[]}|[{'type',3681,'number',[]}|[{'integer',3681,0}]]]}]]}|[[{'type',3681,'constraint',[{'atom',3681,'is_subtype'}|[[{'var',3681,'Ref'}|[{'type',3681,'reference',[]}]]]]}]]]}]}]]
'adler32'/1 =
    %% Line 258
    fun (_cor0) ->
	%% Line 259
	call 'erlang':'nif_error'
	    ('undefined')
'adler32'/2 =
    %% Line 265
    fun (_cor1,_cor0) ->
	%% Line 266
	call 'erlang':'nif_error'
	    ('undefined')
'adler32_combine'/3 =
    %% Line 273
    fun (_cor2,_cor1,_cor0) ->
	%% Line 274
	call 'erlang':'nif_error'
	    ('undefined')
'append_element'/2 =
    %% Line 281
    fun (_cor1,_cor0) ->
	%% Line 282
	call 'erlang':'nif_error'
	    ('undefined')
'atom_to_binary'/2 =
    %% Line 288
    fun (_cor1,_cor0) ->
	%% Line 289
	call 'erlang':'nif_error'
	    ('undefined')
'atom_to_list'/1 =
    %% Line 294
    fun (_cor0) ->
	%% Line 295
	call 'erlang':'nif_error'
	    ('undefined')
'binary_part'/2 =
    %% Line 302
    fun (_cor1,_cor0) ->
	%% Line 303
	call 'erlang':'nif_error'
	    ('undefined')
'binary_part'/3 =
    %% Line 311
    fun (_cor2,_cor1,_cor0) ->
	%% Line 312
	call 'erlang':'nif_error'
	    ('undefined')
'binary_to_atom'/2 =
    %% Line 318
    fun (_cor1,_cor0) ->
	%% Line 319
	call 'erlang':'nif_error'
	    ('undefined')
'binary_to_existing_atom'/2 =
    %% Line 325
    fun (_cor1,_cor0) ->
	%% Line 326
	call 'erlang':'nif_error'
	    ('undefined')
'binary_to_float'/1 =
    %% Line 331
    fun (_cor0) ->
	%% Line 332
	call 'erlang':'nif_error'
	    ('undefined')
'binary_to_integer'/1 =
    %% Line 337
    fun (_cor0) ->
	%% Line 338
	call 'erlang':'nif_error'
	    ('undefined')
'binary_to_integer'/2 =
    %% Line 344
    fun (_cor1,_cor0) ->
	%% Line 345
	call 'erlang':'nif_error'
	    ('undefined')
'binary_to_list'/1 =
    %% Line 350
    fun (_cor0) ->
	%% Line 351
	call 'erlang':'nif_error'
	    ('undefined')
'binary_to_list'/3 =
    %% Line 358
    fun (_cor2,_cor1,_cor0) ->
	%% Line 359
	call 'erlang':'nif_error'
	    ('undefined')
'binary_to_term'/1 =
    %% Line 364
    fun (_cor0) ->
	%% Line 365
	call 'erlang':'nif_error'
	    ('undefined')
'binary_to_term'/2 =
    %% Line 371
    fun (_cor1,_cor0) ->
	%% Line 372
	call 'erlang':'nif_error'
	    ('undefined')
'bit_size'/1 =
    %% Line 378
    fun (_cor0) ->
	%% Line 379
	call 'erlang':'nif_error'
	    ('undefined')
'bitsize'/1 =
    %% Line 384
    fun (_cor0) ->
	%% Line 385
	call 'erlang':'nif_error'
	    ('undefined')
'bitstring_to_list'/1 =
    %% Line 390
    fun (_cor0) ->
	%% Line 391
	call 'erlang':'nif_error'
	    ('undefined')
'bump_reductions'/1 =
    %% Line 396
    fun (_cor0) ->
	%% Line 397
	call 'erlang':'nif_error'
	    ('undefined')
'byte_size'/1 =
    %% Line 403
    fun (_cor0) ->
	%% Line 404
	call 'erlang':'nif_error'
	    ('undefined')
'call_on_load_function'/1 =
    %% Line 409
    fun (_cor0) ->
	%% Line 410
	call 'erlang':'nif_error'
	    ('undefined')
'cancel_timer'/1 =
    %% Line 416
    fun (_cor0) ->
	%% Line 417
	call 'erlang':'nif_error'
	    ('undefined')
'check_old_code'/1 =
    %% Line 422
    fun (_cor0) ->
	%% Line 423
	call 'erlang':'nif_error'
	    ('undefined')
'check_process_code'/2 =
    %% Line 430
    fun (_cor1,_cor0) ->
	%% Line 431
	try
	    %% Line 432
	    call 'erlang':'check_process_code'
		(_cor1, _cor0, [{'allow_gc','true'}])
	of <_cor2> ->
	    _cor2
	catch <_cor5,_cor4,_cor3> ->
	    case <_cor5,_cor4,_cor3> of
	      %% Line 434
	      <'error',Error,_cor8> when 'true' ->
		  call 'erlang':'error'
		      (Error, [_cor1|[_cor0|[]]])
	      ( <_cor5,_cor4,_cor3> when 'true' ->
		    primop 'raise'
			(_cor3, _cor4)
		-| ['compiler_generated'] )
	    end
'check_process_code'/3 =
    %% Line 445
    fun (_cor2,_cor1,_cor0) ->
	%% Line 446
	try
	    %% Line 447
	    case apply 'get_cpc_opts'/3
		     (_cor0, 'sync', 'true') of
	      <{Async,AllowGC}> when 'true' ->
		  %% Line 448
		  case Async of
		    %% Line 449
		    <{'async',ReqId}> when 'true' ->
			let <_cor4> =
			    %% Line 450
			    call 'erlang':'self'
				()
			in  %% Line 450
			    case call 'erlang':'process_info'
				     (_cor4, %% Line 451
					     'priority') of
			      <{'priority',Prio}> when 'true' ->
				  do  %% Line 452
				      call 'erts_internal':'request_system_task'
					  (_cor2, %% Line 453
						  Prio, %% Line 454
							{'check_process_code',%% Line 455
									      ReqId,_cor1,%% Line 457
											  AllowGC})
				      %% Line 458
				      'async'
			      ( <_cor5> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor5})
				-| ['compiler_generated'] )
			    end
		    %% Line 459
		    <'sync'> when 'true' ->
			let <_cor6> =
			    %% Line 460
			    call 'erlang':'self'
				()
			in  %% Line 460
			    case <> of
			      %% Line 461
			      <>
				  when call 'erlang':'=='
					(_cor2,
					 _cor6) ->
				  %% Line 462
				  call 'erts_internal':'check_process_code'
				      (_cor1, %% Line 463
					      [{'allow_gc',AllowGC}|[]])
			      %% Line 464
			      <> when 'true' ->
				  let <_cor7> =
				      %% Line 465
				      call 'erlang':'self'
					  ()
				  in  %% Line 465
				      case call 'erlang':'process_info'
					       (_cor7, %% Line 466
						       'priority') of
					<{'priority',Prio}> when 'true' ->
					    let <ReqId> =
						%% Line 467
						call 'erlang':'make_ref'
						    ()
					    in  do  %% Line 468
						    call 'erts_internal':'request_system_task'
							(_cor2, %% Line 469
								Prio, %% Line 470
								      {'check_process_code',%% Line 471
											    ReqId,_cor1,%% Line 473
													AllowGC})
						    %% Line 474
						    receive
						      %% Line 475
						      <{'check_process_code',_cor19,CheckResult}>
							  when call 'erlang':'=:='
								(_cor19,
								 ReqId) ->
							  %% Line 476
							  CheckResult
						    after 'infinity' ->
						      'true'
					( <_cor8> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_cor8})
					  -| ['compiler_generated'] )
				      end
			    end
		    ( <_cor11> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor11})
		      -| ['compiler_generated'] )
		  end
	      ( <_cor3> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor3})
		-| ['compiler_generated'] )
	    end
	of <_cor12> ->
	    _cor12
	catch <_cor15,_cor14,_cor13> ->
	    case <_cor15,_cor14,_cor13> of
	      %% Line 481
	      <'error',Error,_cor20> when 'true' ->
		  call 'erlang':'error'
		      (Error, [_cor2|[_cor1|[_cor0|[]]]])
	      ( <_cor15,_cor14,_cor13> when 'true' ->
		    primop 'raise'
			(_cor13, _cor14)
		-| ['compiler_generated'] )
	    end
'get_cpc_opts'/3 =
    %% Line 485
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[AsyncTuple = {'async',_X_ReqId}|Options],_X_OldAsync,AllowGC> when 'true' ->
	      %% Line 486
	      apply 'get_cpc_opts'/3
		  (Options, AsyncTuple, AllowGC)
	  %% Line 487
	  <[{'allow_gc',AllowGC}|Options],Async,_X_OldAllowGC> when 'true' ->
	      %% Line 488
	      apply 'get_cpc_opts'/3
		  (Options, Async, AllowGC)
	  %% Line 489
	  <[],Async,AllowGC> when 'true' ->
	      %% Line 490
	      {Async,AllowGC}
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'get_cpc_opts',3}}] )
	    -| ['compiler_generated'] )
	end
'crc32'/1 =
    %% Line 495
    fun (_cor0) ->
	%% Line 496
	call 'erlang':'nif_error'
	    ('undefined')
'crc32'/2 =
    %% Line 502
    fun (_cor1,_cor0) ->
	%% Line 503
	call 'erlang':'nif_error'
	    ('undefined')
'crc32_combine'/3 =
    %% Line 510
    fun (_cor2,_cor1,_cor0) ->
	%% Line 511
	call 'erlang':'nif_error'
	    ('undefined')
'date'/0 =
    %% Line 516
    fun () ->
	%% Line 517
	call 'erlang':'nif_error'
	    ('undefined')
'decode_packet'/3 =
    %% Line 613
    fun (_cor2,_cor1,_cor0) ->
	%% Line 614
	call 'erlang':'nif_error'
	    ('undefined')
'delete_element'/2 =
    %% Line 621
    fun (_cor1,_cor0) ->
	%% Line 622
	call 'erlang':'nif_error'
	    ('undefined')
'delete_module'/1 =
    %% Line 627
    fun (_cor0) ->
	%% Line 628
	call 'erlang':'nif_error'
	    ('undefined')
'demonitor'/1 =
    %% Line 633
    fun (_cor0) ->
	%% Line 634
	call 'erlang':'nif_error'
	    ('undefined')
'demonitor'/2 =
    %% Line 641
    fun (_cor1,_cor0) ->
	%% Line 642
	call 'erlang':'nif_error'
	    ('undefined')
'display'/1 =
    %% Line 647
    fun (_cor0) ->
	%% Line 648
	call 'erlang':'nif_error'
	    ('undefined')
'display_nl'/0 =
    %% Line 652
    fun () ->
	%% Line 653
	call 'erlang':'nif_error'
	    ('undefined')
'display_string'/1 =
    %% Line 658
    fun (_cor0) ->
	%% Line 659
	call 'erlang':'nif_error'
	    ('undefined')
'dist_exit'/3 =
    %% Line 666
    fun (_cor2,_cor1,_cor0) ->
	%% Line 667
	call 'erlang':'nif_error'
	    ('undefined')
'dt_append_vm_tag_data'/1 =
    %% Line 673
    fun (_cor0) ->
	%% Line 674
	call 'erlang':'nif_error'
	    ('undefined')
'dt_get_tag'/0 =
    %% Line 678
    fun () ->
	%% Line 679
	call 'erlang':'nif_error'
	    ('undefined')
'dt_get_tag_data'/0 =
    %% Line 683
    fun () ->
	%% Line 684
	call 'erlang':'nif_error'
	    ('undefined')
'dt_prepend_vm_tag_data'/1 =
    %% Line 690
    fun (_cor0) ->
	%% Line 691
	call 'erlang':'nif_error'
	    ('undefined')
'dt_put_tag'/1 =
    %% Line 696
    fun (_cor0) ->
	%% Line 697
	call 'erlang':'nif_error'
	    ('undefined')
'dt_restore_tag'/1 =
    %% Line 702
    fun (_cor0) ->
	%% Line 703
	call 'erlang':'nif_error'
	    ('undefined')
'dt_spread_tag'/1 =
    %% Line 708
    fun (_cor0) ->
	%% Line 709
	call 'erlang':'nif_error'
	    ('undefined')
'erase'/0 =
    %% Line 715
    fun () ->
	%% Line 716
	call 'erlang':'nif_error'
	    ('undefined')
'erase'/1 =
    %% Line 722
    fun (_cor0) ->
	%% Line 723
	call 'erlang':'nif_error'
	    ('undefined')
'error'/1 =
    %% Line 729
    fun (_cor0) ->
	%% Line 730
	call 'erlang':'nif_error'
	    ('undefined')
'error'/2 =
    %% Line 737
    fun (_cor1,_cor0) ->
	%% Line 738
	call 'erlang':'nif_error'
	    ('undefined')
'exit'/1 =
    %% Line 744
    fun (_cor0) ->
	%% Line 745
	call 'erlang':'nif_error'
	    ('undefined')
'exit'/2 =
    %% Line 751
    fun (_cor1,_cor0) ->
	%% Line 752
	call 'erlang':'nif_error'
	    ('undefined')
'external_size'/1 =
    %% Line 757
    fun (_cor0) ->
	%% Line 758
	call 'erlang':'nif_error'
	    ('undefined')
'external_size'/2 =
    %% Line 764
    fun (_cor1,_cor0) ->
	%% Line 765
	call 'erlang':'nif_error'
	    ('undefined')
'finish_loading'/1 =
    %% Line 773
    fun (_cor0) ->
	%% Line 774
	call 'erlang':'nif_error'
	    ('undefined')
'finish_after_on_load'/2 =
    %% Line 780
    fun (_cor1,_cor0) ->
	%% Line 781
	call 'erlang':'nif_error'
	    ('undefined')
'float'/1 =
    %% Line 787
    fun (_cor0) ->
	%% Line 788
	call 'erlang':'nif_error'
	    ('undefined')
'float_to_binary'/1 =
    %% Line 793
    fun (_cor0) ->
	%% Line 794
	call 'erlang':'nif_error'
	    ('undefined')
'float_to_binary'/2 =
    %% Line 803
    fun (_cor1,_cor0) ->
	%% Line 804
	call 'erlang':'nif_error'
	    ('undefined')
'float_to_list'/1 =
    %% Line 809
    fun (_cor0) ->
	%% Line 810
	call 'erlang':'nif_error'
	    ('undefined')
'float_to_list'/2 =
    %% Line 819
    fun (_cor1,_cor0) ->
	%% Line 820
	call 'erlang':'nif_error'
	    ('undefined')
'fun_info'/2 =
    %% Line 827
    fun (_cor1,_cor0) ->
	%% Line 828
	call 'erlang':'nif_error'
	    ('undefined')
'fun_to_list'/1 =
    %% Line 833
    fun (_cor0) ->
	%% Line 834
	call 'erlang':'nif_error'
	    ('undefined')
'function_exported'/3 =
    %% Line 841
    fun (_cor2,_cor1,_cor0) ->
	%% Line 842
	call 'erlang':'nif_error'
	    ('undefined')
'garbage_collect'/0 =
    %% Line 846
    fun () ->
	%% Line 847
	call 'erlang':'nif_error'
	    ('undefined')
'garbage_collect'/1 =
    %% Line 853
    fun (_cor0) ->
	%% Line 854
	try
	    %% Line 855
	    call 'erlang':'garbage_collect'
		(_cor0, [])
	of <_cor1> ->
	    _cor1
	catch <_cor4,_cor3,_cor2> ->
	    case <_cor4,_cor3,_cor2> of
	      %% Line 857
	      <'error',Error,_cor6> when 'true' ->
		  call 'erlang':'error'
		      (Error, [_cor0|[]])
	      ( <_cor4,_cor3,_cor2> when 'true' ->
		    primop 'raise'
			(_cor2, _cor3)
		-| ['compiler_generated'] )
	    end
'garbage_collect'/2 =
    %% Line 867
    fun (_cor1,_cor0) ->
	%% Line 868
	try
	    %% Line 870
	    case apply 'get_gc_opts'/2
		     (_cor0, 'sync') of
	      %% Line 871
	      <{'async',ReqId}> when 'true' ->
		  let <_cor3> =
		      %% Line 872
		      call 'erlang':'self'
			  ()
		  in  %% Line 872
		      case call 'erlang':'process_info'
			       (_cor3, %% Line 873
				       'priority') of
			<{'priority',Prio}> when 'true' ->
			    do  %% Line 874
				call 'erts_internal':'request_system_task'
				    (_cor1, %% Line 875
					    Prio, %% Line 876
						  {'garbage_collect',ReqId})
				%% Line 877
				'async'
			( <_cor4> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor4})
			  -| ['compiler_generated'] )
		      end
	      %% Line 878
	      <'sync'> when 'true' ->
		  let <_cor5> =
		      %% Line 879
		      call 'erlang':'self'
			  ()
		  in  %% Line 879
		      case <> of
			%% Line 880
			<>
			    when call 'erlang':'=='
				  (_cor1,
				   _cor5) ->
			    %% Line 881
			    call 'erlang':'garbage_collect'
				()
			%% Line 882
			<> when 'true' ->
			    let <_cor6> =
				%% Line 883
				call 'erlang':'self'
				    ()
			    in  %% Line 883
				case call 'erlang':'process_info'
					 (_cor6, %% Line 884
						 'priority') of
				  <{'priority',Prio}> when 'true' ->
				      let <ReqId> =
					  %% Line 885
					  call 'erlang':'make_ref'
					      ()
				      in  do  %% Line 886
					      call 'erts_internal':'request_system_task'
						  (_cor1, %% Line 887
							  Prio, %% Line 888
								{'garbage_collect',%% Line 889
										   ReqId})
					      %% Line 890
					      receive
						%% Line 891
						<{'garbage_collect',_cor17,GCResult}>
						    when call 'erlang':'=:='
							  (_cor17,
							   ReqId) ->
						    %% Line 892
						    GCResult
					      after 'infinity' ->
						'true'
				  ( <_cor7> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor7})
				    -| ['compiler_generated'] )
				end
		      end
	      ( <_cor10> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor10})
		-| ['compiler_generated'] )
	    end
	of <_cor11> ->
	    _cor11
	catch <_cor14,_cor13,_cor12> ->
	    case <_cor14,_cor13,_cor12> of
	      %% Line 897
	      <'error',Error,_cor18> when 'true' ->
		  call 'erlang':'error'
		      (Error, [_cor1|[_cor0|[]]])
	      ( <_cor14,_cor13,_cor12> when 'true' ->
		    primop 'raise'
			(_cor12, _cor13)
		-| ['compiler_generated'] )
	    end
'get_gc_opts'/2 =
    %% Line 901
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[AsyncTuple = {'async',_X_ReqId}|Options],_X_OldAsync> when 'true' ->
	      %% Line 902
	      apply 'get_gc_opts'/2
		  (Options, AsyncTuple)
	  %% Line 903
	  <[],Async> when 'true' ->
	      %% Line 904
	      Async
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'get_gc_opts',2}}] )
	    -| ['compiler_generated'] )
	end
'garbage_collect_message_area'/0 =
    %% Line 908
    fun () ->
	%% Line 909
	call 'erlang':'nif_error'
	    ('undefined')
'get'/0 =
    %% Line 915
    fun () ->
	%% Line 916
	call 'erlang':'nif_error'
	    ('undefined')
'get'/1 =
    %% Line 922
    fun (_cor0) ->
	%% Line 923
	call 'erlang':'nif_error'
	    ('undefined')
'get_keys'/1 =
    %% Line 929
    fun (_cor0) ->
	%% Line 930
	call 'erlang':'nif_error'
	    ('undefined')
'get_module_info'/1 =
    %% Line 935
    fun (_cor0) ->
	%% Line 936
	call 'erlang':'nif_error'
	    ('undefined')
'get_stacktrace'/0 =
    %% Line 940
    fun () ->
	%% Line 941
	call 'erlang':'nif_error'
	    ('undefined')
'group_leader'/0 =
    %% Line 945
    fun () ->
	%% Line 946
	call 'erlang':'nif_error'
	    ('undefined')
'group_leader'/2 =
    %% Line 952
    fun (_cor1,_cor0) ->
	%% Line 953
	call 'erlang':'nif_error'
	    ('undefined')
'halt'/0 =
    %% Line 958
    fun () ->
	%% Line 959
	call 'erlang':'nif_error'
	    ('undefined')
'halt'/1 =
    %% Line 965
    fun (_cor0) ->
	%% Line 966
	call 'erlang':'nif_error'
	    ('undefined')
'halt'/2 =
    %% Line 974
    fun (_cor1,_cor0) ->
	%% Line 975
	call 'erlang':'nif_error'
	    ('undefined')
'hash'/2 =
    %% Line 981
    fun (_cor1,_cor0) ->
	%% Line 982
	call 'erlang':'nif_error'
	    ('undefined')
'hibernate'/3 =
    %% Line 989
    fun (_cor2,_cor1,_cor0) ->
	%% Line 990
	call 'erlang':'nif_error'
	    ('undefined')
'insert_element'/3 =
    %% Line 998
    fun (_cor2,_cor1,_cor0) ->
	%% Line 999
	call 'erlang':'nif_error'
	    ('undefined')
'integer_to_binary'/1 =
    %% Line 1004
    fun (_cor0) ->
	%% Line 1005
	call 'erlang':'nif_error'
	    ('undefined')
'integer_to_list'/1 =
    %% Line 1010
    fun (_cor0) ->
	%% Line 1011
	call 'erlang':'nif_error'
	    ('undefined')
'iolist_size'/1 =
    %% Line 1016
    fun (_cor0) ->
	%% Line 1017
	call 'erlang':'nif_error'
	    ('undefined')
'iolist_to_binary'/1 =
    %% Line 1022
    fun (_cor0) ->
	%% Line 1023
	call 'erlang':'nif_error'
	    ('undefined')
'is_alive'/0 =
    %% Line 1027
    fun () ->
	%% Line 1028
	call 'erlang':'nif_error'
	    ('undefined')
'is_builtin'/3 =
    %% Line 1035
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1036
	call 'erlang':'nif_error'
	    ('undefined')
'is_process_alive'/1 =
    %% Line 1041
    fun (_cor0) ->
	%% Line 1042
	call 'erlang':'nif_error'
	    ('undefined')
'length'/1 =
    %% Line 1048
    fun (_cor0) ->
	%% Line 1049
	call 'erlang':'nif_error'
	    ('undefined')
'link'/1 =
    %% Line 1054
    fun (_cor0) ->
	%% Line 1055
	call 'erlang':'nif_error'
	    ('undefined')
'list_to_atom'/1 =
    %% Line 1060
    fun (_cor0) ->
	%% Line 1061
	call 'erlang':'nif_error'
	    ('undefined')
'list_to_binary'/1 =
    %% Line 1066
    fun (_cor0) ->
	%% Line 1067
	call 'erlang':'nif_error'
	    ('undefined')
'list_to_bitstring'/1 =
    %% Line 1072
    fun (_cor0) ->
	%% Line 1073
	call 'erlang':'nif_error'
	    ('undefined')
'list_to_existing_atom'/1 =
    %% Line 1078
    fun (_cor0) ->
	%% Line 1079
	call 'erlang':'nif_error'
	    ('undefined')
'list_to_float'/1 =
    %% Line 1084
    fun (_cor0) ->
	%% Line 1085
	call 'erlang':'nif_error'
	    ('undefined')
'list_to_integer'/1 =
    %% Line 1090
    fun (_cor0) ->
	%% Line 1091
	call 'erlang':'nif_error'
	    ('undefined')
'list_to_integer'/2 =
    %% Line 1097
    fun (_cor1,_cor0) ->
	%% Line 1098
	call 'erlang':'nif_error'
	    ('undefined')
'list_to_pid'/1 =
    %% Line 1103
    fun (_cor0) ->
	%% Line 1104
	call 'erlang':'nif_error'
	    ('undefined')
'list_to_tuple'/1 =
    %% Line 1109
    fun (_cor0) ->
	%% Line 1110
	call 'erlang':'nif_error'
	    ('undefined')
'loaded'/0 =
    %% Line 1115
    fun () ->
	%% Line 1116
	call 'erlang':'nif_error'
	    ('undefined')
'localtime'/0 =
    %% Line 1121
    fun () ->
	%% Line 1122
	call 'erlang':'nif_error'
	    ('undefined')
'make_ref'/0 =
    %% Line 1126
    fun () ->
	%% Line 1127
	call 'erlang':'nif_error'
	    ('undefined')
'map_size'/1 =
    %% Line 1132
    fun (_cor0) ->
	%% Line 1133
	call 'erlang':'nif_error'
	    ('undefined')
'match_spec_test'/3 =
    %% Line 1141
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1142
	call 'erlang':'nif_error'
	    ('undefined')
'md5'/1 =
    %% Line 1148
    fun (_cor0) ->
	%% Line 1149
	call 'erlang':'nif_error'
	    ('undefined')
'md5_final'/1 =
    %% Line 1155
    fun (_cor0) ->
	%% Line 1156
	call 'erlang':'nif_error'
	    ('undefined')
'md5_init'/0 =
    %% Line 1161
    fun () ->
	%% Line 1162
	call 'erlang':'nif_error'
	    ('undefined')
'md5_update'/2 =
    %% Line 1169
    fun (_cor1,_cor0) ->
	%% Line 1170
	call 'erlang':'nif_error'
	    ('undefined')
'module_loaded'/1 =
    %% Line 1175
    fun (_cor0) ->
	%% Line 1176
	call 'erlang':'nif_error'
	    ('undefined')
'monitor'/2 =
    %% Line 1185
    fun (_cor1,_cor0) ->
	%% Line 1186
	call 'erlang':'nif_error'
	    ('undefined')
'monitor_node'/2 =
    %% Line 1192
    fun (_cor1,_cor0) ->
	%% Line 1193
	call 'erlang':'nif_error'
	    ('undefined')
'monitor_node'/3 =
    %% Line 1201
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1202
	call 'erlang':'nif_error'
	    ('undefined')
'nif_error'/1 =
    %% Line 1208
    fun (_cor0) ->
	%% Line 1209
	call 'erlang':'nif_error'
	    ('undefined')
'nif_error'/2 =
    %% Line 1216
    fun (_cor1,_cor0) ->
	%% Line 1217
	call 'erlang':'nif_error'
	    ('undefined')
'node'/0 =
    %% Line 1223
    fun () ->
	%% Line 1224
	call 'erlang':'nif_error'
	    ('undefined')
'node'/1 =
    %% Line 1231
    fun (_cor0) ->
	%% Line 1232
	call 'erlang':'nif_error'
	    ('undefined')
'now'/0 =
    %% Line 1237
    fun () ->
	%% Line 1238
	call 'erlang':'nif_error'
	    ('undefined')
'phash'/2 =
    %% Line 1245
    fun (_cor1,_cor0) ->
	%% Line 1246
	call 'erlang':'nif_error'
	    ('undefined')
'phash2'/1 =
    %% Line 1252
    fun (_cor0) ->
	%% Line 1253
	call 'erlang':'nif_error'
	    ('undefined')
'phash2'/2 =
    %% Line 1260
    fun (_cor1,_cor0) ->
	%% Line 1261
	call 'erlang':'nif_error'
	    ('undefined')
'pid_to_list'/1 =
    %% Line 1266
    fun (_cor0) ->
	%% Line 1267
	call 'erlang':'nif_error'
	    ('undefined')
'port_to_list'/1 =
    %% Line 1272
    fun (_cor0) ->
	%% Line 1273
	call 'erlang':'nif_error'
	    ('undefined')
'ports'/0 =
    %% Line 1277
    fun () ->
	%% Line 1278
	call 'erlang':'nif_error'
	    ('undefined')
'posixtime_to_universaltime'/1 =
    %% Line 1283
    fun (_cor0) ->
	%% Line 1284
	call 'erlang':'nif_error'
	    ('undefined')
'prepare_loading'/2 =
    %% Line 1292
    fun (_cor1,_cor0) ->
	%% Line 1293
	call 'erlang':'nif_error'
	    ('undefined')
'pre_loaded'/0 =
    %% Line 1297
    fun () ->
	%% Line 1298
	call 'erlang':'nif_error'
	    ('undefined')
'process_display'/2 =
    %% Line 1304
    fun (_cor1,_cor0) ->
	%% Line 1305
	call 'erlang':'nif_error'
	    ('undefined')
'process_flag'/3 =
    %% Line 1313
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1314
	call 'erlang':'nif_error'
	    ('undefined')
'process_info'/1 =
    %% Line 1321
    fun (_cor0) ->
	%% Line 1322
	call 'erlang':'nif_error'
	    ('undefined')
'processes'/0 =
    %% Line 1326
    fun () ->
	%% Line 1327
	call 'erlang':'nif_error'
	    ('undefined')
'purge_module'/1 =
    %% Line 1332
    fun (_cor0) ->
	%% Line 1333
	call 'erlang':'nif_error'
	    ('undefined')
'put'/2 =
    %% Line 1339
    fun (_cor1,_cor0) ->
	%% Line 1340
	call 'erlang':'nif_error'
	    ('undefined')
'raise'/3 =
    %% Line 1347
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1348
	call 'erlang':'nif_error'
	    ('undefined')
'read_timer'/1 =
    %% Line 1353
    fun (_cor0) ->
	%% Line 1354
	call 'erlang':'nif_error'
	    ('undefined')
'ref_to_list'/1 =
    %% Line 1359
    fun (_cor0) ->
	%% Line 1360
	call 'erlang':'nif_error'
	    ('undefined')
'register'/2 =
    %% Line 1366
    fun (_cor1,_cor0) ->
	%% Line 1367
	call 'erlang':'nif_error'
	    ('undefined')
'registered'/0 =
    %% Line 1372
    fun () ->
	%% Line 1373
	call 'erlang':'nif_error'
	    ('undefined')
'resume_process'/1 =
    %% Line 1378
    fun (_cor0) ->
	%% Line 1379
	call 'erlang':'nif_error'
	    ('undefined')
'round'/1 =
    %% Line 1385
    fun (_cor0) ->
	%% Line 1386
	call 'erlang':'nif_error'
	    ('undefined')
'self'/0 =
    %% Line 1391
    fun () ->
	%% Line 1392
	call 'erlang':'nif_error'
	    ('undefined')
'send_after'/3 =
    %% Line 1400
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1401
	call 'erlang':'nif_error'
	    ('undefined')
'seq_trace'/2 =
    %% Line 1407
    fun (_cor1,_cor0) ->
	%% Line 1408
	call 'erlang':'nif_error'
	    ('undefined')
'seq_trace_print'/1 =
    %% Line 1413
    fun (_cor0) ->
	%% Line 1414
	call 'erlang':'nif_error'
	    ('undefined')
'seq_trace_print'/2 =
    %% Line 1420
    fun (_cor1,_cor0) ->
	%% Line 1421
	call 'erlang':'nif_error'
	    ('undefined')
'setnode'/2 =
    %% Line 1427
    fun (_cor1,_cor0) ->
	%% Line 1428
	call 'erlang':'nif_error'
	    ('undefined')
'setnode'/3 =
    %% Line 1435
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1436
	call 'erlang':'nif_error'
	    ('undefined')
'size'/1 =
    %% Line 1442
    fun (_cor0) ->
	%% Line 1443
	call 'erlang':'nif_error'
	    ('undefined')
'spawn'/3 =
    %% Line 1450
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1451
	call 'erlang':'nif_error'
	    ('undefined')
'spawn_link'/3 =
    %% Line 1458
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1459
	call 'erlang':'nif_error'
	    ('undefined')
'split_binary'/2 =
    %% Line 1465
    fun (_cor1,_cor0) ->
	%% Line 1466
	call 'erlang':'nif_error'
	    ('undefined')
'start_timer'/3 =
    %% Line 1474
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1475
	call 'erlang':'nif_error'
	    ('undefined')
'suspend_process'/2 =
    %% Line 1482
    fun (_cor1,_cor0) ->
	%% Line 1483
	call 'erlang':'nif_error'
	    ('undefined')
'system_monitor'/0 =
    %% Line 1490
    fun () ->
	%% Line 1491
	call 'erlang':'nif_error'
	    ('undefined')
'system_monitor'/1 =
    %% Line 1499
    fun (_cor0) ->
	%% Line 1500
	call 'erlang':'nif_error'
	    ('undefined')
'system_monitor'/2 =
    %% Line 1509
    fun (_cor1,_cor0) ->
	%% Line 1510
	call 'erlang':'nif_error'
	    ('undefined')
'system_profile'/0 =
    %% Line 1517
    fun () ->
	%% Line 1518
	call 'erlang':'nif_error'
	    ('undefined')
'system_profile'/2 =
    %% Line 1525
    fun (_cor1,_cor0) ->
	%% Line 1526
	call 'erlang':'nif_error'
	    ('undefined')
'throw'/1 =
    %% Line 1532
    fun (_cor0) ->
	%% Line 1533
	call 'erlang':'nif_error'
	    ('undefined')
'time'/0 =
    %% Line 1538
    fun () ->
	%% Line 1539
	call 'erlang':'nif_error'
	    ('undefined')
'trace'/3 =
    %% Line 1546
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1547
	call 'erlang':'nif_error'
	    ('undefined')
'trace_delivered'/1 =
    %% Line 1553
    fun (_cor0) ->
	%% Line 1554
	call 'erlang':'nif_error'
	    ('undefined')
'trace_info'/2 =
    %% Line 1564
    fun (_cor1,_cor0) ->
	%% Line 1565
	call 'erlang':'nif_error'
	    ('undefined')
'trunc'/1 =
    %% Line 1571
    fun (_cor0) ->
	%% Line 1572
	call 'erlang':'nif_error'
	    ('undefined')
'tuple_size'/1 =
    %% Line 1578
    fun (_cor0) ->
	%% Line 1579
	call 'erlang':'nif_error'
	    ('undefined')
'universaltime'/0 =
    %% Line 1584
    fun () ->
	%% Line 1585
	call 'erlang':'nif_error'
	    ('undefined')
'universaltime_to_posixtime'/1 =
    %% Line 1590
    fun (_cor0) ->
	%% Line 1591
	call 'erlang':'nif_error'
	    ('undefined')
'unlink'/1 =
    %% Line 1596
    fun (_cor0) ->
	%% Line 1597
	call 'erlang':'nif_error'
	    ('undefined')
'unregister'/1 =
    %% Line 1602
    fun (_cor0) ->
	%% Line 1603
	call 'erlang':'nif_error'
	    ('undefined')
'whereis'/1 =
    %% Line 1608
    fun (_cor0) ->
	%% Line 1609
	call 'erlang':'nif_error'
	    ('undefined')
'abs'/1 =
    %% Line 1624
    fun (_cor0) ->
	%% Line 1625
	call 'erlang':'nif_error'
	    ('undefined')
'append'/2 =
    %% Line 1632
    fun (_cor1,_cor0) ->
	%% Line 1633
	call 'erlang':'nif_error'
	    ('undefined')
'element'/2 =
    %% Line 1639
    fun (_cor1,_cor0) ->
	%% Line 1640
	call 'erlang':'nif_error'
	    ('undefined')
'get_module_info'/2 =
    %% Line 1647
    fun (_cor1,_cor0) ->
	%% Line 1648
	call 'erlang':'nif_error'
	    ('undefined')
'hd'/1 =
    %% Line 1653
    fun (_cor0) ->
	%% Line 1654
	call 'erlang':'nif_error'
	    ('undefined')
'is_atom'/1 =
    %% Line 1661
    fun (_cor0) ->
	%% Line 1662
	call 'erlang':'nif_error'
	    ('undefined')
'is_binary'/1 =
    %% Line 1667
    fun (_cor0) ->
	%% Line 1668
	call 'erlang':'nif_error'
	    ('undefined')
'is_bitstring'/1 =
    %% Line 1673
    fun (_cor0) ->
	%% Line 1674
	call 'erlang':'nif_error'
	    ('undefined')
'is_boolean'/1 =
    %% Line 1679
    fun (_cor0) ->
	%% Line 1680
	call 'erlang':'nif_error'
	    ('undefined')
'is_float'/1 =
    %% Line 1685
    fun (_cor0) ->
	%% Line 1686
	call 'erlang':'nif_error'
	    ('undefined')
'is_function'/1 =
    %% Line 1691
    fun (_cor0) ->
	%% Line 1692
	call 'erlang':'nif_error'
	    ('undefined')
'is_function'/2 =
    %% Line 1698
    fun (_cor1,_cor0) ->
	%% Line 1699
	call 'erlang':'nif_error'
	    ('undefined')
'is_integer'/1 =
    %% Line 1704
    fun (_cor0) ->
	%% Line 1705
	call 'erlang':'nif_error'
	    ('undefined')
'is_list'/1 =
    %% Line 1710
    fun (_cor0) ->
	%% Line 1711
	call 'erlang':'nif_error'
	    ('undefined')
'is_number'/1 =
    %% Line 1716
    fun (_cor0) ->
	%% Line 1717
	call 'erlang':'nif_error'
	    ('undefined')
'is_pid'/1 =
    %% Line 1722
    fun (_cor0) ->
	%% Line 1723
	call 'erlang':'nif_error'
	    ('undefined')
'is_map'/1 =
    %% Line 1728
    fun (_cor0) ->
	%% Line 1729
	call 'erlang':'nif_error'
	    ('undefined')
'is_port'/1 =
    %% Line 1734
    fun (_cor0) ->
	%% Line 1735
	call 'erlang':'nif_error'
	    ('undefined')
'is_record'/2 =
    %% Line 1741
    fun (_cor1,_cor0) ->
	%% Line 1742
	call 'erlang':'nif_error'
	    ('undefined')
'is_record'/3 =
    %% Line 1749
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1750
	call 'erlang':'nif_error'
	    ('undefined')
'is_reference'/1 =
    %% Line 1755
    fun (_cor0) ->
	%% Line 1756
	call 'erlang':'nif_error'
	    ('undefined')
'is_tuple'/1 =
    %% Line 1761
    fun (_cor0) ->
	%% Line 1762
	call 'erlang':'nif_error'
	    ('undefined')
'load_module'/2 =
    %% Line 1768
    fun (_cor1,_cor0) ->
	%% Line 1769
	case call 'erlang':'prepare_loading'
		 (_cor1, _cor0) of
	  %% Line 1770
	  <Error = {'error',_cor6}> when 'true' ->
	      %% Line 1771
	      Error
	  %% Line 1772
	  <Bin>
	      when call 'erlang':'is_binary'
		    (Bin) ->
	      %% Line 1773
	      case call 'erlang':'finish_loading'
		       ([Bin|[]]) of
		%% Line 1774
		<'ok'> when 'true' ->
		    %% Line 1775
		    {'module',_cor1}
		%% Line 1776
		<{Error,[_cor7|[]]}>
		    when call 'erlang':'=:='
			  (_cor7,
			   _cor1) ->
		    %% Line 1777
		    {'error',Error}
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor3})
	    -| ['compiler_generated'] )
	end
'load_nif'/2 =
    %% Line 1786
    fun (_cor1,_cor0) ->
	%% Line 1787
	call 'erlang':'nif_error'
	    ('undefined')
'localtime_to_universaltime'/2 =
    %% Line 1793
    fun (_cor1,_cor0) ->
	%% Line 1794
	call 'erlang':'nif_error'
	    ('undefined')
'make_fun'/3 =
    %% Line 1803
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1804
	call 'erlang':'nif_error'
	    ('undefined')
'make_tuple'/2 =
    %% Line 1810
    fun (_cor1,_cor0) ->
	%% Line 1811
	call 'erlang':'nif_error'
	    ('undefined')
'make_tuple'/3 =
    %% Line 1818
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1819
	call 'erlang':'nif_error'
	    ('undefined')
'nodes'/1 =
    %% Line 1825
    fun (_cor0) ->
	%% Line 1826
	call 'erlang':'nif_error'
	    ('undefined')
'open_port'/2 =
    %% Line 1851
    fun (_cor1,_cor0) ->
	%% Line 1852
	call 'erlang':'nif_error'
	    ('undefined')
'process_flag'/2 =
    %% Line 1882
    fun (_cor1,_cor0) ->
	%% Line 1883
	call 'erlang':'nif_error'
	    ('undefined')
'process_info'/2 =
    %% Line 1980
    fun (_cor1,_cor0) ->
	%% Line 1981
	call 'erlang':'nif_error'
	    ('undefined')
'send'/2 =
    %% Line 1986
    fun (_cor1,_cor0) ->
	%% Line 1987
	call 'erlang':'nif_error'
	    ('undefined')
'send'/3 =
    %% Line 1994
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1995
	call 'erlang':'nif_error'
	    ('undefined')
'seq_trace_info'/1 =
    %% Line 2004
    fun (_cor0) ->
	%% Line 2005
	call 'erlang':'nif_error'
	    ('undefined')
'setelement'/3 =
    %% Line 2013
    fun (_cor2,_cor1,_cor0) ->
	%% Line 2014
	call 'erlang':'nif_error'
	    ('undefined')
'spawn_opt'/1 =
    %% Line 2026
    fun (_cor0) ->
	%% Line 2027
	call 'erlang':'nif_error'
	    ('undefined')
'statistics'/1 =
    %% Line 2057
    fun (_cor0) ->
	%% Line 2058
	call 'erlang':'nif_error'
	    ('undefined')
'subtract'/2 =
    %% Line 2063
    fun (_cor1,_cor0) ->
	%% Line 2064
	call 'erlang':'nif_error'
	    ('undefined')
'system_flag'/2 =
    %% Line 2117
    fun (_cor1,_cor0) ->
	%% Line 2118
	call 'erlang':'nif_error'
	    ('undefined')
'term_to_binary'/1 =
    %% Line 2122
    fun (_cor0) ->
	%% Line 2123
	call 'erlang':'nif_error'
	    ('undefined')
'term_to_binary'/2 =
    %% Line 2130
    fun (_cor1,_cor0) ->
	%% Line 2131
	call 'erlang':'nif_error'
	    ('undefined')
'tl'/1 =
    %% Line 2136
    fun (_cor0) ->
	%% Line 2137
	call 'erlang':'nif_error'
	    ('undefined')
'trace_pattern'/2 =
    %% Line 2150
    fun (_cor1,_cor0) ->
	%% Line 2151
	call 'erlang':'nif_error'
	    ('undefined')
'trace_pattern'/3 =
    %% Line 2166
    fun (_cor2,_cor1,_cor0) ->
	%% Line 2167
	call 'erlang':'nif_error'
	    ('undefined')
'tuple_to_list'/1 =
    %% Line 2172
    fun (_cor0) ->
	%% Line 2173
	call 'erlang':'nif_error'
	    ('undefined')
'system_info'/1 =
    %% Line 2272
    fun (_cor0) ->
	%% Line 2273
	call 'erlang':'nif_error'
	    ('undefined')
'universaltime_to_localtime'/1 =
    %% Line 2278
    fun (_cor0) ->
	%% Line 2279
	call 'erlang':'nif_error'
	    ('undefined')
'apply'/2 =
    %% Line 2291
    fun (_cor1,_cor0) ->
	%% Line 2292
	call 'erlang':'apply'
	    (_cor1, _cor0)
'apply'/3 =
    %% Line 2299
    fun (_cor2,_cor1,_cor0) ->
	%% Line 2300
	call 'erlang':'apply'
	    (_cor2, _cor1, _cor0)
'spawn'/1 =
    %% Line 2306
    fun (_cor0) ->
	case _cor0 of
	  <F>
	      when call 'erlang':'is_function'
		    (_cor0) ->
	      %% Line 2307
	      call 'erlang':'spawn'
		  ('erlang', 'apply', [F|[[]]])
	  %% Line 2308
	  <MF = {M,F}>
	      when let <_cor1> =
		    call 'erlang':'is_atom'
			(M)
		in  let <_cor2> =
			call 'erlang':'is_atom'
			    (F)
		    in  call 'erlang':'and'
			    (_cor1, _cor2) ->
	      %% Line 2309
	      call 'erlang':'spawn'
		  ('erlang', 'apply', [MF|[[]]])
	  %% Line 2310
	  <F> when 'true' ->
	      %% Line 2311
	      call 'erlang':'error'
		  ('badarg', [F|[]])
	end
'spawn'/2 =
    %% Line 2316
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <N,F>
	      when try
		    let <_cor2> =
			call 'erlang':'node'
			    ()
		    in  call 'erlang':'=:='
			    (N, _cor2)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 2317
	      call 'erlang':'spawn'
		  (F)
	  %% Line 2318
	  <N,F>
	      when call 'erlang':'is_function'
		    (F) ->
	      %% Line 2319
	      call 'erlang':'spawn'
		  (N, 'erlang', 'apply', [F|[[]]])
	  %% Line 2320
	  <N,MF = {M,F}>
	      when let <_cor3> =
		    call 'erlang':'is_atom'
			(M)
		in  let <_cor4> =
			call 'erlang':'is_atom'
			    (F)
		    in  call 'erlang':'and'
			    (_cor3, _cor4) ->
	      %% Line 2321
	      call 'erlang':'spawn'
		  (N, 'erlang', 'apply', [MF|[[]]])
	  %% Line 2322
	  <N,F> when 'true' ->
	      %% Line 2323
	      call 'erlang':'error'
		  ('badarg', [N|[F|[]]])
	end
'spawn_link'/1 =
    %% Line 2327
    fun (_cor0) ->
	case _cor0 of
	  <F>
	      when call 'erlang':'is_function'
		    (_cor0) ->
	      %% Line 2328
	      call 'erlang':'spawn_link'
		  ('erlang', 'apply', [F|[[]]])
	  %% Line 2329
	  <MF = {M,F}>
	      when let <_cor1> =
		    call 'erlang':'is_atom'
			(M)
		in  let <_cor2> =
			call 'erlang':'is_atom'
			    (F)
		    in  call 'erlang':'and'
			    (_cor1, _cor2) ->
	      %% Line 2330
	      call 'erlang':'spawn_link'
		  ('erlang', 'apply', [MF|[[]]])
	  %% Line 2331
	  <F> when 'true' ->
	      %% Line 2332
	      call 'erlang':'error'
		  ('badarg', [F|[]])
	end
'spawn_link'/2 =
    %% Line 2337
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <N,F>
	      when try
		    let <_cor2> =
			call 'erlang':'node'
			    ()
		    in  call 'erlang':'=:='
			    (N, _cor2)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 2338
	      apply 'spawn_link'/1
		  (F)
	  %% Line 2339
	  <N,F>
	      when call 'erlang':'is_function'
		    (F) ->
	      %% Line 2340
	      apply 'spawn_link'/4
		  (N, 'erlang', 'apply', [F|[[]]])
	  %% Line 2341
	  <N,MF = {M,F}>
	      when let <_cor3> =
		    call 'erlang':'is_atom'
			(M)
		in  let <_cor4> =
			call 'erlang':'is_atom'
			    (F)
		    in  call 'erlang':'and'
			    (_cor3, _cor4) ->
	      %% Line 2342
	      apply 'spawn_link'/4
		  (N, 'erlang', 'apply', [MF|[[]]])
	  %% Line 2343
	  <N,F> when 'true' ->
	      %% Line 2344
	      call 'erlang':'error'
		  ('badarg', [N|[F|[]]])
	end
'spawn_monitor'/1 =
    %% Line 2350
    fun (_cor0) ->
	case _cor0 of
	  <F>
	      when call 'erlang':'is_function'
		    (_cor0,
		     0) ->
	      %% Line 2351
	      call 'erlang':'spawn_opt'
		  ({'erlang','apply',[F|[[]]],['monitor']})
	  %% Line 2352
	  <F> when 'true' ->
	      %% Line 2353
	      call 'erlang':'error'
		  ('badarg', [F|[]])
	end
'spawn_monitor'/3 =
    %% Line 2359
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <M,F,A>
	      when try
		    let <_cor3> =
			call 'erlang':'is_atom'
			    (M)
		    in  let <_cor4> =
			    %% Line 2360
			    call 'erlang':'is_atom'
				(F)
			in  let <_cor5> =
				%% Line 2361
				call 'erlang':'is_list'
				    (A)
			    in  let <_cor6> =
				    call 'erlang':'and'
					(_cor4, _cor5)
				in  call 'erlang':'and'
					(_cor3, _cor6)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 2362
	      call 'erlang':'spawn_opt'
		  ({M,F,A,['monitor']})
	  %% Line 2363
	  <M,F,A> when 'true' ->
	      %% Line 2364
	      call 'erlang':'error'
		  ('badarg', [M|[F|[A|[]]]])
	end
'spawn_opt'/2 =
    %% Line 2374
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <F,O>
	      when call 'erlang':'is_function'
		    (F) ->
	      %% Line 2375
	      apply 'spawn_opt'/4
		  ('erlang', 'apply', [F|[[]]], O)
	  %% Line 2376
	  <MF = {M,F},O>
	      when let <_cor2> =
		    call 'erlang':'is_atom'
			(M)
		in  let <_cor3> =
			call 'erlang':'is_atom'
			    (F)
		    in  call 'erlang':'and'
			    (_cor2, _cor3) ->
	      %% Line 2377
	      apply 'spawn_opt'/4
		  ('erlang', 'apply', [MF|[[]]], O)
	  %% Line 2378
	  <{M,F,A},O> when 'true' ->
	      %% Line 2379
	      apply 'spawn_opt'/4
		  (M, F, A, O)
	  %% Line 2380
	  <F,O> when 'true' ->
	      %% Line 2381
	      call 'erlang':'error'
		  ('badarg', [F|[O|[]]])
	end
'spawn_opt'/3 =
    %% Line 2392
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <N,F,O>
	      when try
		    let <_cor3> =
			call 'erlang':'node'
			    ()
		    in  call 'erlang':'=:='
			    (N, _cor3)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 2393
	      apply 'spawn_opt'/2
		  (F, O)
	  %% Line 2394
	  <N,F,O>
	      when call 'erlang':'is_function'
		    (F) ->
	      %% Line 2395
	      apply 'spawn_opt'/5
		  (N, 'erlang', 'apply', [F|[[]]], O)
	  %% Line 2396
	  <N,MF = {M,F},O>
	      when let <_cor4> =
		    call 'erlang':'is_atom'
			(M)
		in  let <_cor5> =
			call 'erlang':'is_atom'
			    (F)
		    in  call 'erlang':'and'
			    (_cor4, _cor5) ->
	      %% Line 2397
	      apply 'spawn_opt'/5
		  (N, 'erlang', 'apply', [MF|[[]]], O)
	  %% Line 2398
	  <N,F,O> when 'true' ->
	      %% Line 2399
	      call 'erlang':'error'
		  ('badarg', [N|[F|[O|[]]]])
	end
'spawn'/4 =
    %% Line 2408
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <N,M,F,A>
	      when try
		    let <_cor4> =
			call 'erlang':'node'
			    ()
		    in  let <_cor5> =
			    call 'erlang':'=:='
				(N, _cor4)
			in  let <_cor6> =
				%% Line 2409
				call 'erlang':'is_atom'
				    (M)
			    in  let <_cor7> =
				    %% Line 2410
				    call 'erlang':'is_atom'
					(F)
				in  let <_cor8> =
					%% Line 2411
					call 'erlang':'is_list'
					    (A)
				    in  let <_cor9> =
					    call 'erlang':'and'
						(_cor7, _cor8)
					in  let <_cor10> =
						call 'erlang':'and'
						    (_cor6, _cor9)
					    in  call 'erlang':'and'
						    (_cor5, _cor10)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 2412
	      call 'erlang':'spawn'
		  (M, F, A)
	  %% Line 2413
	  <N,M,F,A>
	      when try
		    let <_cor11> =
			call 'erlang':'is_atom'
			    (N)
		    in  let <_cor12> =
			    %% Line 2414
			    call 'erlang':'is_atom'
				(M)
			in  let <_cor13> =
				%% Line 2415
				call 'erlang':'is_atom'
				    (F)
			    in  let <_cor14> =
				    call 'erlang':'and'
					(_cor12, _cor13)
				in  call 'erlang':'and'
					(_cor11, _cor14)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 2416
		  case apply 'is_well_formed_list'/1
			   (A) of
		    %% Line 2417
		    <'true'> when 'true' ->
			'ok'
		    %% Line 2419
		    <'false'> when 'true' ->
			%% Line 2420
			call 'erlang':'error'
			    ('badarg', [N|[M|[F|[A|[]]]]])
		    ( <_cor15> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor15})
		      -| ['compiler_generated'] )
		  end
		  let <_cor17> =
		      catch
			  let <_cor16> =
			      %% Line 2423
			      call 'erlang':'group_leader'
				  ()
			  in  %% Line 2422
			      call 'gen_server':'call'
				  ({'net_kernel',N}, %% Line 2423
						     {'spawn',M,F,A,_cor16}, %% Line 2424
									     'infinity')
		  in  %% Line 2422
		      case _cor17 of
			%% Line 2425
			<Pid>
			    when call 'erlang':'is_pid'
				  (_cor17) ->
			    %% Line 2426
			    Pid
			%% Line 2427
			<Error> when 'true' ->
			    %% Line 2428
			    case apply 'remote_spawn_error'/2
				     (Error, {'no_link',N,M,F,A,[]}) of
			      %% Line 2429
			      <{'fault',Fault}> when 'true' ->
				  %% Line 2430
				  call 'erlang':'error'
				      (Fault, [N|[M|[F|[A|[]]]]])
			      %% Line 2431
			      <Pid> when 'true' ->
				  %% Line 2432
				  Pid
			    end
		      end
	  %% Line 2435
	  <N,M,F,A> when 'true' ->
	      %% Line 2436
	      call 'erlang':'error'
		  ('badarg', [N|[M|[F|[A|[]]]]])
	end
'spawn_link'/4 =
    %% Line 2443
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <N,M,F,A>
	      when try
		    let <_cor4> =
			call 'erlang':'node'
			    ()
		    in  let <_cor5> =
			    call 'erlang':'=:='
				(N, _cor4)
			in  let <_cor6> =
				%% Line 2444
				call 'erlang':'is_atom'
				    (M)
			    in  let <_cor7> =
				    %% Line 2445
				    call 'erlang':'is_atom'
					(F)
				in  let <_cor8> =
					%% Line 2446
					call 'erlang':'is_list'
					    (A)
				    in  let <_cor9> =
					    call 'erlang':'and'
						(_cor7, _cor8)
					in  let <_cor10> =
						call 'erlang':'and'
						    (_cor6, _cor9)
					    in  call 'erlang':'and'
						    (_cor5, _cor10)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 2447
	      call 'erlang':'spawn_link'
		  (M, F, A)
	  %% Line 2448
	  <N,M,F,A>
	      when try
		    let <_cor11> =
			call 'erlang':'is_atom'
			    (N)
		    in  let <_cor12> =
			    %% Line 2449
			    call 'erlang':'is_atom'
				(M)
			in  let <_cor13> =
				%% Line 2450
				call 'erlang':'is_atom'
				    (F)
			    in  let <_cor14> =
				    call 'erlang':'and'
					(_cor12, _cor13)
				in  call 'erlang':'and'
					(_cor11, _cor14)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 2451
		  case apply 'is_well_formed_list'/1
			   (A) of
		    %% Line 2452
		    <'true'> when 'true' ->
			'ok'
		    %% Line 2454
		    <_cor24> when 'true' ->
			%% Line 2455
			call 'erlang':'error'
			    ('badarg', [N|[M|[F|[A|[]]]]])
		  end
		  let <_cor17> =
		      catch
			  let <_cor16> =
			      %% Line 2458
			      call 'erlang':'group_leader'
				  ()
			  in  %% Line 2457
			      call 'gen_server':'call'
				  ({'net_kernel',N}, %% Line 2458
						     {'spawn_link',M,F,A,_cor16}, %% Line 2459
										  'infinity')
		  in  %% Line 2457
		      case _cor17 of
			%% Line 2460
			<Pid>
			    when call 'erlang':'is_pid'
				  (_cor17) ->
			    %% Line 2461
			    Pid
			%% Line 2462
			<Error> when 'true' ->
			    %% Line 2463
			    case apply 'remote_spawn_error'/2
				     (Error, {'link',N,M,F,A,[]}) of
			      %% Line 2464
			      <{'fault',Fault}> when 'true' ->
				  %% Line 2465
				  call 'erlang':'error'
				      (Fault, [N|[M|[F|[A|[]]]]])
			      %% Line 2466
			      <Pid> when 'true' ->
				  %% Line 2467
				  Pid
			    end
		      end
	  %% Line 2470
	  <N,M,F,A> when 'true' ->
	      %% Line 2471
	      call 'erlang':'error'
		  ('badarg', [N|[M|[F|[A|[]]]]])
	end
'spawn_opt'/4 =
    %% Line 2484
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    catch
		%% Line 2485
		call 'erlang':'spawn_opt'
		    ({_cor3,_cor2,_cor1,_cor0})
	in  %% Line 2485
	    case _cor4 of
	      %% Line 2486
	      <{'EXIT',{Reason,_cor10}}> when 'true' ->
		  %% Line 2487
		  call 'erlang':'error'
		      (Reason, [_cor3|[_cor2|[_cor1|[_cor0|[]]]]])
	      %% Line 2488
	      <Res> when 'true' ->
		  %% Line 2489
		  Res
	    end
'spawn_opt'/5 =
    %% Line 2504
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <N,M,F,A,O>
	      when try
		    let <_cor5> =
			call 'erlang':'node'
			    ()
		    in  let <_cor6> =
			    call 'erlang':'=:='
				(N, _cor5)
			in  let <_cor7> =
				%% Line 2505
				call 'erlang':'is_atom'
				    (M)
			    in  let <_cor8> =
				    %% Line 2505
				    call 'erlang':'is_atom'
					(F)
				in  let <_cor9> =
					%% Line 2506
					call 'erlang':'is_list'
					    (A)
				    in  let <_cor10> =
					    %% Line 2506
					    call 'erlang':'is_list'
						(O)
					in  let <_cor11> =
						call 'erlang':'and'
						    (_cor9, _cor10)
					    in  let <_cor12> =
						    call 'erlang':'and'
							(_cor8, _cor11)
						in  let <_cor13> =
							call 'erlang':'and'
							    (_cor7, _cor12)
						    in  call 'erlang':'and'
							    (_cor6, _cor13)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 2507
	      apply 'spawn_opt'/4
		  (M, F, A, O)
	  %% Line 2508
	  <N,M,F,A,O>
	      when try
		    let <_cor14> =
			call 'erlang':'is_atom'
			    (N)
		    in  let <_cor15> =
			    %% Line 2509
			    call 'erlang':'is_atom'
				(M)
			in  let <_cor16> =
				%% Line 2510
				call 'erlang':'is_atom'
				    (F)
			    in  let <_cor17> =
				    call 'erlang':'and'
					(_cor15, _cor16)
				in  call 'erlang':'and'
					(_cor14, _cor17)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor19> =
		  %% Line 2511
		  apply 'is_well_formed_list'/1
		      (A)
	      in  let <_cor18> =
		      %% Line 2511
		      apply 'is_well_formed_list'/1
			  (O)
		  in  do  %% Line 2511
			  case <_cor19,_cor18> of
			    %% Line 2512
			    <'true','true'> when 'true' ->
				'ok'
			    %% Line 2514
			    <_fol313,_fol314> when 'true' ->
				%% Line 2515
				call 'erlang':'error'
				    ('badarg', [N|[M|[F|[A|[O|[]]]]]])
			  end
			  do  %% Line 2517
			      case call 'lists':'member'
				       ('monitor', O) of
				%% Line 2518
				<'false'> when 'true' ->
				    'ok'
				%% Line 2519
				<'true'> when 'true' ->
				    call 'erlang':'error'
					('badarg', [N|[M|[F|[A|[O|[]]]]]])
				( <_cor21> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor21})
				  -| ['compiler_generated'] )
			      end
			      let <_cor26> =
				  %% Line 2521
				  ( fun (_cor23,_cor22) ->
					case <_cor23,_cor22> of
					  <'link',{_cor38,NewOpts}> when 'true' ->
					      %% Line 2522
					      {'link',NewOpts}
					  %% Line 2523
					  <Opt,{LO,NewOpts}> when 'true' ->
					      %% Line 2524
					      {LO,[Opt|NewOpts]}
					  ( <_cor25,_cor24> when 'true' ->
						( primop 'match_fail'
						      ({'function_clause',_cor25,_cor24})
						  -| [{'function_name',{'-spawn_opt/5-fun-0-',2}}] )
					    -| ['compiler_generated'] )
					end
				    -| [{'id',{0,0,'-spawn_opt/5-fun-0-'}}] )
			      in  %% Line 2521
				  case call 'lists':'foldl'
					   (_cor26, %% Line 2526
						    {'no_link',[]}, %% Line 2527
								    O) of
				    <{L,NO}> when 'true' ->
					let <_cor29> =
					    catch
						let <_cor28> =
						    %% Line 2529
						    call 'erlang':'group_leader'
							()
						in  %% Line 2528
						    call 'gen_server':'call'
							({'net_kernel',N}, %% Line 2529
									   {'spawn_opt',M,F,A,NO,L,_cor28}, %% Line 2530
													    'infinity')
					in  %% Line 2528
					    case _cor29 of
					      %% Line 2531
					      <Pid>
						  when call 'erlang':'is_pid'
							(_cor29) ->
						  %% Line 2532
						  Pid
					      %% Line 2533
					      <Error> when 'true' ->
						  %% Line 2534
						  case apply 'remote_spawn_error'/2
							   (Error, {L,N,M,F,A,NO}) of
						    %% Line 2535
						    <{'fault',Fault}> when 'true' ->
							%% Line 2536
							call 'erlang':'error'
							    (Fault, [N|[M|[F|[A|[O|[]]]]]])
						    %% Line 2537
						    <Pid> when 'true' ->
							%% Line 2538
							Pid
						  end
					    end
				    ( <_cor27> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor27})
				      -| ['compiler_generated'] )
				  end
	  %% Line 2541
	  <N,M,F,A,O> when 'true' ->
	      %% Line 2542
	      call 'erlang':'error'
		  ('badarg', [N|[M|[F|[A|[O|[]]]]]])
	end
'remote_spawn_error'/2 =
    %% Line 2544
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'EXIT',{{'nodedown',N},_cor7}},{L,_cor8,M,F,A,O}>
	      when call 'erlang':'=:='
		    (_cor8,
		     N) ->
	      let <Opts,LL> =
		  %% Line 2545
		  case <> of
		    %% Line 2546
		    <>
			when call 'erlang':'=:='
			      (L,
			       'link') ->
			%% Line 2547
			<['link'|O],['link']>
		    %% Line 2548
		    <> when 'true' ->
			%% Line 2549
			<O,[]>
		  end
	      in  %% Line 2551
		  apply 'spawn_opt'/4
		      ('erlang', 'crasher', [N|[M|[F|[A|[Opts|['noconnection']]]]]], LL)
	  %% Line 2552
	  <{'EXIT',{Reason,_cor9}},_cor10> when 'true' ->
	      %% Line 2553
	      {'fault',Reason}
	  %% Line 2554
	  <{'EXIT',Reason},_cor11> when 'true' ->
	      %% Line 2555
	      {'fault',Reason}
	  %% Line 2556
	  <Other,_cor12> when 'true' ->
	      %% Line 2557
	      {'fault',Other}
	end
'is_well_formed_list'/1 =
    %% Line 2559
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      %% Line 2560
	      'true'
	  %% Line 2561
	  <[_cor2|Rest]> when 'true' ->
	      %% Line 2562
	      apply 'is_well_formed_list'/1
		  (Rest)
	  %% Line 2563
	  <_cor3> when 'true' ->
	      %% Line 2564
	      'false'
	end
'crasher'/6 =
    %% Line 2566
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Node,Mod,Fun,Args,[],Reason> when 'true' ->
	      do  %% Line 2567
		  call 'error_logger':'warning_msg'
		      ([42|[42|[32|[67|[97|[110|[32|[110|[111|[116|[32|[115|[116|[97|[114|[116|[32|[126|[119|[58|[126|[119|[44|[126|[119|[32|[111|[110|[32|[126|[119|[32|[42|[42|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 2568
																												[Mod|[Fun|[Args|[Node|[]]]]])
		  %% Line 2569
		  call 'erlang':'exit'
		      (Reason)
	  %% Line 2570
	  <Node,Mod,Fun,Args,Opts,Reason> when 'true' ->
	      do  %% Line 2571
		  call 'error_logger':'warning_msg'
		      ([42|[42|[32|[67|[97|[110|[32|[110|[111|[116|[32|[115|[116|[97|[114|[116|[32|[126|[119|[58|[126|[119|[44|[126|[119|[32|[40|[126|[119|[41|[32|[111|[110|[32|[126|[119|[32|[42|[42|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 2572
																															   [Mod|[Fun|[Args|[Opts|[Node|[]]]]]])
		  %% Line 2573
		  call 'erlang':'exit'
		      (Reason)
	end
'yield'/0 =
    %% Line 2576
    fun () ->
	%% Line 2577
	call 'erlang':'yield'
	    ()
'nodes'/0 =
    %% Line 2581
    fun () ->
	%% Line 2582
	call 'erlang':'nodes'
	    ('visible')
'disconnect_node'/1 =
    %% Line 2586
    fun (_cor0) ->
	%% Line 2587
	call 'net_kernel':'disconnect'
	    (_cor0)
'fun_info'/1 =
    %% Line 2594
    fun (_cor0) ->
	case _cor0 of
	  <Fun>
	      when call 'erlang':'is_function'
		    (_cor0) ->
	      %% Line 2596
	      apply 'fun_info_1'/3
		  (['type'|['env'|['arity'|['name'|['uniq'|['index'|['new_uniq'|['new_index'|['module'|['pid']]]]]]]]]], Fun, [])
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'fun_info',1}}] )
	    -| ['compiler_generated'] )
	end
'fun_info_1'/3 =
    %% Line 2598
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[K|Ks],Fun,A> when 'true' ->
	      %% Line 2599
	      case call 'erlang':'fun_info'
		       (Fun, K) of
		%% Line 2600
		<{_cor7,'undefined'}>
		    when call 'erlang':'=:='
			  (_cor7,
			   K) ->
		    apply 'fun_info_1'/3
			(Ks, Fun, A)
		%% Line 2601
		<P = {_cor8,_cor9}>
		    when call 'erlang':'=:='
			  (_cor8,
			   K) ->
		    apply 'fun_info_1'/3
			(Ks, Fun, [P|A])
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2603
	  <[],_cor10,A> when 'true' ->
	      A
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'fun_info_1',3}}] )
	    -| ['compiler_generated'] )
	end
'send_nosuspend'/2 =
    %% Line 2613
    fun (_cor1,_cor0) ->
	%% Line 2614
	apply 'send_nosuspend'/3
	    (_cor1, _cor0, [])
'send_nosuspend'/3 =
    %% Line 2620
    fun (_cor2,_cor1,_cor0) ->
	%% Line 2621
	case call 'erlang':'send'
		 (_cor2, _cor1, ['nosuspend'|_cor0]) of
	  %% Line 2622
	  <'ok'> when 'true' ->
	      'true'
	  %% Line 2623
	  <_cor7> when 'true' ->
	      'false'
	end
'localtime_to_universaltime'/1 =
    %% Line 2629
    fun (_cor0) ->
	%% Line 2630
	call 'erlang':'localtime_to_universaltime'
	    (_cor0, 'undefined')
'suspend_process'/1 =
    %% Line 2634
    fun (_cor0) ->
	let <_cor1> =
	    catch
		%% Line 2635
		call 'erlang':'suspend_process'
		    (_cor0, [])
	in  %% Line 2635
	    case _cor1 of
	      %% Line 2636
	      <{'EXIT',{Reason,_cor4}}> when 'true' ->
		  call 'erlang':'error'
		      (Reason, [_cor0|[]])
	      %% Line 2637
	      <{'EXIT',Reason}> when 'true' ->
		  call 'erlang':'error'
		      (Reason, [_cor0|[]])
	      %% Line 2638
	      <Res> when 'true' ->
		  Res
	    end
'port_command'/2 =
    %% Line 2666
    fun (_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 2667
	    case call 'erts_internal':'port_command'
		     (_cor1, _cor0, []) of
	      %% Line 2668
	      <Ref>
		  when call 'erlang':'is_reference'
			(Ref) ->
		  receive
		    <{_cor7,Res}>
			when call 'erlang':'=:='
			      (_cor7,
			       Ref) ->
			Res
		  after 'infinity' ->
		    'true'
	      %% Line 2669
	      <Res> when 'true' ->
		  Res
	    end
	in  %% Line 2667
	    case _cor3 of
	      %% Line 2671
	      <'true'> when 'true' ->
		  'true'
	      %% Line 2672
	      <Error> when 'true' ->
		  call 'erlang':'error'
		      (Error, [_cor1|[_cor0|[]]])
	    end
'port_command'/3 =
    %% Line 2681
    fun (_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 2682
	    case call 'erts_internal':'port_command'
		     (_cor2, _cor1, _cor0) of
	      %% Line 2683
	      <Ref>
		  when call 'erlang':'is_reference'
			(Ref) ->
		  receive
		    <{_cor11,Res}>
			when call 'erlang':'=:='
			      (_cor11,
			       Ref) ->
			Res
		  after 'infinity' ->
		    'true'
	      %% Line 2684
	      <Res> when 'true' ->
		  Res
	    end
	in  %% Line 2682
	    case _cor4 of
	      %% Line 2686
	      <Bool>
		  when let <_cor5> =
			call 'erlang':'=:='
			    (_cor4, 'true')
		    in  let <_cor6> =
			    call 'erlang':'=:='
				(_cor4, 'false')
			in  call 'erlang':'or'
				(_cor5, _cor6) ->
		  Bool
	      %% Line 2687
	      <Error> when 'true' ->
		  call 'erlang':'error'
		      (Error, [_cor2|[_cor1|[_cor0|[]]]])
	    end
'port_connect'/2 =
    %% Line 2694
    fun (_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 2695
	    case call 'erts_internal':'port_connect'
		     (_cor1, _cor0) of
	      %% Line 2696
	      <Ref>
		  when call 'erlang':'is_reference'
			(Ref) ->
		  receive
		    <{_cor7,Res}>
			when call 'erlang':'=:='
			      (_cor7,
			       Ref) ->
			Res
		  after 'infinity' ->
		    'true'
	      %% Line 2697
	      <Res> when 'true' ->
		  Res
	    end
	in  %% Line 2695
	    case _cor3 of
	      %% Line 2699
	      <'true'> when 'true' ->
		  'true'
	      %% Line 2700
	      <Error> when 'true' ->
		  call 'erlang':'error'
		      (Error, [_cor1|[_cor0|[]]])
	    end
'port_close'/1 =
    %% Line 2706
    fun (_cor0) ->
	let <_cor2> =
	    %% Line 2707
	    case call 'erts_internal':'port_close'
		     (_cor0) of
	      %% Line 2708
	      <Ref>
		  when call 'erlang':'is_reference'
			(Ref) ->
		  receive
		    <{_cor5,Res}>
			when call 'erlang':'=:='
			      (_cor5,
			       Ref) ->
			Res
		  after 'infinity' ->
		    'true'
	      %% Line 2709
	      <Res> when 'true' ->
		  Res
	    end
	in  %% Line 2707
	    case _cor2 of
	      %% Line 2711
	      <'true'> when 'true' ->
		  'true'
	      %% Line 2712
	      <Error> when 'true' ->
		  call 'erlang':'error'
		      (Error, [_cor0|[]])
	    end
'port_control'/3 =
    %% Line 2720
    fun (_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 2721
	    case call 'erts_internal':'port_control'
		     (_cor2, _cor1, _cor0) of
	      %% Line 2722
	      <Ref>
		  when call 'erlang':'is_reference'
			(Ref) ->
		  receive
		    <{_cor9,Res}>
			when call 'erlang':'=:='
			      (_cor9,
			       Ref) ->
			Res
		  after 'infinity' ->
		    'true'
	      %% Line 2723
	      <Res> when 'true' ->
		  Res
	    end
	in  %% Line 2721
	    case _cor4 of
	      %% Line 2725
	      <'badarg'> when 'true' ->
		  call 'erlang':'error'
		      ('badarg', [_cor2|[_cor1|[_cor0|[]]]])
	      %% Line 2726
	      <Result> when 'true' ->
		  Result
	    end
'port_call'/2 =
    %% Line 2733
    fun (_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 2734
	    case call 'erts_internal':'port_call'
		     (_cor1, 0, _cor0) of
	      %% Line 2735
	      <Ref>
		  when call 'erlang':'is_reference'
			(Ref) ->
		  receive
		    <{_cor7,Res}>
			when call 'erlang':'=:='
			      (_cor7,
			       Ref) ->
			Res
		  after 'infinity' ->
		    'true'
	      %% Line 2736
	      <Res> when 'true' ->
		  Res
	    end
	in  %% Line 2734
	    case _cor3 of
	      %% Line 2738
	      <{'ok',Result}> when 'true' ->
		  Result
	      %% Line 2739
	      <Error> when 'true' ->
		  call 'erlang':'error'
		      (Error, [_cor1|[_cor0|[]]])
	    end
'port_call'/3 =
    %% Line 2747
    fun (_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 2748
	    case call 'erts_internal':'port_call'
		     (_cor2, _cor1, _cor0) of
	      %% Line 2749
	      <Ref>
		  when call 'erlang':'is_reference'
			(Ref) ->
		  receive
		    <{_cor9,Res}>
			when call 'erlang':'=:='
			      (_cor9,
			       Ref) ->
			Res
		  after 'infinity' ->
		    'true'
	      %% Line 2750
	      <Res> when 'true' ->
		  Res
	    end
	in  %% Line 2748
	    case _cor4 of
	      %% Line 2752
	      <{'ok',Result}> when 'true' ->
		  Result
	      %% Line 2753
	      <Error> when 'true' ->
		  call 'erlang':'error'
		      (Error, [_cor2|[_cor1|[_cor0|[]]]])
	    end
'port_info'/1 =
    %% Line 2768
    fun (_cor0) ->
	let <_cor2> =
	    %% Line 2769
	    case call 'erts_internal':'port_info'
		     (_cor0) of
	      %% Line 2770
	      <Ref>
		  when call 'erlang':'is_reference'
			(Ref) ->
		  receive
		    <{_cor5,Res}>
			when call 'erlang':'=:='
			      (_cor5,
			       Ref) ->
			Res
		  after 'infinity' ->
		    'true'
	      %% Line 2771
	      <Res> when 'true' ->
		  Res
	    end
	in  %% Line 2769
	    case _cor2 of
	      %% Line 2773
	      <'badarg'> when 'true' ->
		  call 'erlang':'error'
		      ('badarg', [_cor0|[]])
	      %% Line 2774
	      <Result> when 'true' ->
		  Result
	    end
'port_info'/2 =
    %% Line 2817
    fun (_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 2818
	    case call 'erts_internal':'port_info'
		     (_cor1, _cor0) of
	      %% Line 2819
	      <Ref>
		  when call 'erlang':'is_reference'
			(Ref) ->
		  receive
		    <{_cor7,Res}>
			when call 'erlang':'=:='
			      (_cor7,
			       Ref) ->
			Res
		  after 'infinity' ->
		    'true'
	      %% Line 2820
	      <Res> when 'true' ->
		  Res
	    end
	in  %% Line 2818
	    case _cor3 of
	      %% Line 2822
	      <'badarg'> when 'true' ->
		  call 'erlang':'error'
		      ('badarg', [_cor1|[_cor0|[]]])
	      %% Line 2823
	      <Result> when 'true' ->
		  Result
	    end
'port_set_data'/2 =
    %% Line 2830
    fun (_cor1,_cor0) ->
	%% Line 2831
	call 'erlang':'nif_error'
	    ('undefined')
'port_get_data'/1 =
    %% Line 2836
    fun (_cor0) ->
	%% Line 2837
	call 'erlang':'nif_error'
	    ('undefined')
'dlink'/1 =
    %% Line 2847
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 2848
	    call 'erlang':'node'
		(_cor0)
	in  %% Line 2848
	    case call 'net_kernel':'connect'
		     (_cor1) of
	      %% Line 2849
	      <'true'> when 'true' ->
		  call 'erlang':'link'
		      (_cor0)
	      %% Line 2850
	      <'false'> when 'true' ->
		  let <_cor2> =
		      call 'erlang':'self'
			  ()
		  in  do  call 'erlang':'dist_exit'
			      (_cor2, 'noconnection', _cor0)
			  'true'
	      ( <_cor3> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor3})
		-| ['compiler_generated'] )
	    end
'dunlink'/1 =
    %% Line 2855
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 2856
	    call 'erlang':'node'
		(_cor0)
	in  %% Line 2856
	    case call 'net_kernel':'connect'
		     (_cor1) of
	      %% Line 2857
	      <'true'> when 'true' ->
		  call 'erlang':'unlink'
		      (_cor0)
	      %% Line 2858
	      <'false'> when 'true' ->
		  'true'
	      ( <_cor2> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor2})
		-| ['compiler_generated'] )
	    end
'dmonitor_node'/3 =
    %% Line 2861
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Node,Flag,[]> when 'true' ->
	      %% Line 2862
	      case call 'net_kernel':'connect'
		       (Node) of
		%% Line 2863
		<'true'> when 'true' ->
		    call 'erlang':'monitor_node'
			(Node, Flag, [])
		%% Line 2864
		<'false'> when 'true' ->
		    let <_cor3> =
			call 'erlang':'self'
			    ()
		    in  do  call 'erlang':'!'
				(_cor3, {'nodedown',Node})
			    'true'
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2867
	  <Node,Flag,Opts> when 'true' ->
	      %% Line 2868
	      case call 'lists':'member'
		       ('allow_passive_connect', Opts) of
		%% Line 2869
		<'true'> when 'true' ->
		    %% Line 2870
		    case call 'net_kernel':'passive_cnct'
			     (Node) of
		      %% Line 2871
		      <'true'> when 'true' ->
			  call 'erlang':'monitor_node'
			      (Node, Flag, Opts)
		      %% Line 2872
		      <'false'> when 'true' ->
			  let <_cor5> =
			      call 'erlang':'self'
				  ()
			  in  do  call 'erlang':'!'
				      (_cor5, {'nodedown',Node})
				  'true'
		      ( <_cor6> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor6})
			-| ['compiler_generated'] )
		    end
		%% Line 2874
		<_cor11> when 'true' ->
		    %% Line 2875
		    apply 'dmonitor_node'/3
			(Node, Flag, [])
	      end
	end
'dgroup_leader'/2 =
    %% Line 2878
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 2879
	    call 'erlang':'node'
		(_cor0)
	in  %% Line 2879
	    case call 'net_kernel':'connect'
		     (_cor2) of
	      %% Line 2880
	      <'true'> when 'true' ->
		  call 'erlang':'group_leader'
		      (_cor1, _cor0)
	      %% Line 2881
	      <'false'> when 'true' ->
		  'true'
	      ( <_cor3> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor3})
		-| ['compiler_generated'] )
	    end
'dexit'/2 =
    %% Line 2884
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 2885
	    call 'erlang':'node'
		(_cor1)
	in  %% Line 2885
	    case call 'net_kernel':'connect'
		     (_cor2) of
	      %% Line 2886
	      <'true'> when 'true' ->
		  call 'erlang':'exit'
		      (_cor1, _cor0)
	      %% Line 2887
	      <'false'> when 'true' ->
		  'true'
	      ( <_cor3> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor3})
		-| ['compiler_generated'] )
	    end
'dsend'/2 =
    %% Line 2890
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Pid,Msg>
	      when call 'erlang':'is_pid'
		    (Pid) ->
	      let <_cor2> =
		  %% Line 2891
		  call 'erlang':'node'
		      (Pid)
	      in  %% Line 2891
		  case call 'net_kernel':'connect'
			   (_cor2) of
		    %% Line 2892
		    <'true'> when 'true' ->
			call 'erlang':'send'
			    (Pid, Msg)
		    %% Line 2893
		    <'false'> when 'true' ->
			Msg
		    ( <_cor3> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor3})
		      -| ['compiler_generated'] )
		  end
	  %% Line 2895
	  <Port,Msg>
	      when call 'erlang':'is_port'
		    (Port) ->
	      let <_cor4> =
		  %% Line 2896
		  call 'erlang':'node'
		      (Port)
	      in  %% Line 2896
		  case call 'net_kernel':'connect'
			   (_cor4) of
		    %% Line 2897
		    <'true'> when 'true' ->
			call 'erlang':'send'
			    (Port, Msg)
		    %% Line 2898
		    <'false'> when 'true' ->
			Msg
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor5})
		      -| ['compiler_generated'] )
		  end
	  %% Line 2900
	  <{Name,Node},Msg> when 'true' ->
	      %% Line 2901
	      case call 'net_kernel':'connect'
		       (Node) of
		%% Line 2902
		<'true'> when 'true' ->
		    call 'erlang':'send'
			({Name,Node}, Msg)
		%% Line 2903
		<'false'> when 'true' ->
		    Msg
		%% Line 2904
		<'ignored'> when 'true' ->
		    Msg
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor6})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'dsend',2}}] )
	    -| ['compiler_generated'] )
	end
'dsend'/3 =
    %% Line 2907
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Pid,Msg,Opts>
	      when call 'erlang':'is_pid'
		    (Pid) ->
	      let <_cor3> =
		  %% Line 2908
		  call 'erlang':'node'
		      (Pid)
	      in  %% Line 2908
		  case call 'net_kernel':'connect'
			   (_cor3) of
		    %% Line 2909
		    <'true'> when 'true' ->
			call 'erlang':'send'
			    (Pid, Msg, Opts)
		    %% Line 2910
		    <'false'> when 'true' ->
			'ok'
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor4})
		      -| ['compiler_generated'] )
		  end
	  %% Line 2912
	  <Port,Msg,Opts>
	      when call 'erlang':'is_port'
		    (Port) ->
	      let <_cor5> =
		  %% Line 2913
		  call 'erlang':'node'
		      (Port)
	      in  %% Line 2913
		  case call 'net_kernel':'connect'
			   (_cor5) of
		    %% Line 2914
		    <'true'> when 'true' ->
			call 'erlang':'send'
			    (Port, Msg, Opts)
		    %% Line 2915
		    <'false'> when 'true' ->
			'ok'
		    ( <_cor6> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor6})
		      -| ['compiler_generated'] )
		  end
	  %% Line 2917
	  <{Name,Node},Msg,Opts> when 'true' ->
	      %% Line 2918
	      case call 'net_kernel':'connect'
		       (Node) of
		%% Line 2919
		<'true'> when 'true' ->
		    call 'erlang':'send'
			({Name,Node}, Msg, Opts)
		%% Line 2920
		<'false'> when 'true' ->
		    'ok'
		%% Line 2921
		<'ignored'> when 'true' ->
		    'ok'
		( <_cor7> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor7})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'dsend',3}}] )
	    -| ['compiler_generated'] )
	end
'dmonitor_p'/2 =
    %% Line 2925
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'process',ProcSpec> when 'true' ->
	      let <_cor8> =
		  %% Line 2929
		  case ProcSpec of
		    %% Line 2930
		    <{S,N}>
			when try
			      let <_cor2> =
				  call 'erlang':'is_atom'
				      (S)
			      in  let <_cor3> =
				      %% Line 2931
				      call 'erlang':'is_atom'
					  (N)
				  in  let <_cor4> =
					  %% Line 2932
					  call 'erlang':'node'
					      ()
				      in  let <_cor5> =
					      %% Line 2932
					      call 'erlang':'=/='
						  (N, _cor4)
					  in  let <_cor6> =
						  call 'erlang':'and'
						      (_cor3, _cor5)
					      in  call 'erlang':'and'
						      (_cor2, _cor6)
			  of <Try> ->
			      Try
			  catch <T,R> ->
			      'false' ->
			%% Line 2932
			N
		    %% Line 2933
		    <_cor15>
			when call 'erlang':'is_pid'
			      (ProcSpec) ->
			call 'erlang':'node'
			    (ProcSpec)
		    ( <_cor7> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor7})
		      -| ['compiler_generated'] )
		  end
	      in  %% Line 2935
		  case call 'net_kernel':'connect'
			   (_cor8) of
		    %% Line 2936
		    <'true'> when 'true' ->
			%% Line 2937
			call 'erlang':'monitor'
			    ('process', ProcSpec)
		    %% Line 2938
		    <'false'> when 'true' ->
			let <Ref> =
			    %% Line 2939
			    call 'erlang':'make_ref'
				()
			in  let <_cor11> =
				%% Line 2940
				call 'erlang':'self'
				    ()
			    in  do  %% Line 2940
				    call 'erlang':'!'
					(_cor11, {'DOWN',Ref,'process',ProcSpec,'noconnection'})
				    %% Line 2941
				    Ref
		    ( <_cor12> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor12})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor14,_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13})
		  -| [{'function_name',{'dmonitor_p',2}}] )
	    -| ['compiler_generated'] )
	end
'delay_trap'/2 =
    %% Line 2949
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Result,0> when 'true' ->
	      do  call 'erlang':'yield'
		      ()
		  Result
	  %% Line 2950
	  <Result,Timeout> when 'true' ->
	      receive
		
	      after Timeout ->
		Result
	end
'set_cookie'/2 =
    %% Line 2962
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Node,C>
	      when let <_cor2> =
		    call 'erlang':'=/='
			(Node, 'nonode@nohost')
		in  let <_cor3> =
			call 'erlang':'is_atom'
			    (Node)
		    in  call 'erlang':'and'
			    (_cor2, _cor3) ->
	      %% Line 2963
	      case <> of
		%% Line 2964
		<>
		    when call 'erlang':'is_atom'
			  (C) ->
		    %% Line 2965
		    call 'auth':'set_cookie'
			(Node, C)
		%% Line 2966
		<> when 'true' ->
		    %% Line 2967
		    call 'erlang':'error'
			('badarg')
	      end
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'set_cookie',2}}] )
	    -| ['compiler_generated'] )
	end
'get_cookie'/0 =
    %% Line 2972
    fun () ->
	%% Line 2973
	call 'auth':'get_cookie'
	    ()
'integer_to_list'/2 =
    %% Line 2978
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <I,10> when 'true' ->
	      %% Line 2979
	      call 'erlang':'integer_to_list'
		  (I)
	  %% Line 2980
	  <I,Base>
	      when %% Line 2981
		try
		    let <_cor2> =
			call 'erlang':'is_integer'
			    (I)
		    in  let <_cor3> =
			    call 'erlang':'is_integer'
				(Base)
			in  let <_cor4> =
				%% Line 2982
				call 'erlang':'>='
				    (Base, 2)
			    in  let <_cor8> =
				    %% Line 2982
				    call 'erlang':'=<'
					(Base, 36)
				in  let <_cor9> =
					call 'erlang':'and'
					    (_cor4, _cor8)
				    in  let <_cor10> =
					    call 'erlang':'and'
						(_cor3, _cor9)
					in  call 'erlang':'and'
						(_cor2, _cor10)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 2983
	      case <> of
		<>
		    when call 'erlang':'<'
			  (I,
			   0) ->
		    let <_cor11> =
			%% Line 2984
			call 'erlang':'-'
			    (I)
		    in  let <_cor12> =
			    %% Line 2984
			    apply 'integer_to_list'/3
				(_cor11, Base, [])
			in  %% Line 2984
			    [45|_cor12]
		%% Line 2985
		<> when 'true' ->
		    %% Line 2986
		    apply 'integer_to_list'/3
			(I, Base, [])
	      end
	  %% Line 2988
	  <I,Base> when 'true' ->
	      %% Line 2989
	      call 'erlang':'error'
		  ('badarg', [I|[Base|[]]])
	end
'integer_to_list'/3 =
    %% Line 2991
    fun (_cor2,_cor1,_cor0) ->
	let <D> =
	    %% Line 2992
	    call 'erlang':'rem'
		(_cor2, _cor1)
	in  let <I1> =
		%% Line 2993
		call 'erlang':'div'
		    (_cor2, _cor1)
	    in  let <_cor8> =
		    %% Line 2994
		    case <> of
		      <>
			  when call 'erlang':'>='
				(D,
				 10) ->
			  let <_cor5> =
			      %% Line 2995
			      call 'erlang':'-'
				  (D, 10)
			  in  let <_cor6> =
				  %% Line 2995
				  call 'erlang':'+'
				      (_cor5, 65)
			      in  %% Line 2995
				  [_cor6|_cor0]
		      %% Line 2996
		      <> when 'true' ->
			  let <_cor7> =
			      %% Line 2997
			      call 'erlang':'+'
				  (D, 48)
			  in  %% Line 2997
			      [_cor7|_cor0]
		    end
		in  %% Line 2999
		    case <> of
		      <>
			  when call 'erlang':'=:='
				(I1,
				 0) ->
			  _cor8
		      %% Line 3001
		      <> when 'true' ->
			  %% Line 3002
			  apply 'integer_to_list'/3
			      (I1, _cor1, _cor8)
		    end
'integer_to_binary'/2 =
    %% Line 3008
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <I,10> when 'true' ->
	      %% Line 3009
	      call 'erlang':'integer_to_binary'
		  (I)
	  %% Line 3010
	  <I,Base>
	      when %% Line 3011
		try
		    let <_cor2> =
			call 'erlang':'is_integer'
			    (I)
		    in  let <_cor3> =
			    call 'erlang':'is_integer'
				(Base)
			in  let <_cor4> =
				%% Line 3012
				call 'erlang':'>='
				    (Base, 2)
			    in  let <_cor8> =
				    %% Line 3012
				    call 'erlang':'=<'
					(Base, 36)
				in  let <_cor9> =
					call 'erlang':'and'
					    (_cor4, _cor8)
				    in  let <_cor10> =
					    call 'erlang':'and'
						(_cor3, _cor9)
					in  call 'erlang':'and'
						(_cor2, _cor10)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 3013
	      case <> of
		<>
		    when call 'erlang':'<'
			  (I,
			   0) ->
		    let <_cor11> =
			%% Line 3014
			call 'erlang':'-'
			    (I)
		    in  let <_cor12> =
			    %% Line 3014
			    apply 'integer_to_binary'/3
				(_cor11, Base, #{}#)
			in  %% Line 3014
			    #{#<45>(8,1,'integer',['unsigned'|['big']]),
			      #<_cor12>('all',8,'binary',['unsigned'|['big']])}#
		%% Line 3015
		<> when 'true' ->
		    %% Line 3016
		    apply 'integer_to_binary'/3
			(I, Base, #{}#)
	      end
	  %% Line 3018
	  <I,Base> when 'true' ->
	      %% Line 3019
	      call 'erlang':'error'
		  ('badarg', [I|[Base|[]]])
	end
'integer_to_binary'/3 =
    %% Line 3021
    fun (_cor2,_cor1,_cor0) ->
	let <D> =
	    %% Line 3022
	    call 'erlang':'rem'
		(_cor2, _cor1)
	in  let <I1> =
		%% Line 3023
		call 'erlang':'div'
		    (_cor2, _cor1)
	    in  let <_cor8> =
		    %% Line 3024
		    case <> of
		      %% Line 3025
		      <>
			  when call 'erlang':'>='
				(D,
				 10) ->
			  let <_cor5> =
			      call 'erlang':'-'
				  (D, 10)
			  in  let <_cor6> =
				  call 'erlang':'+'
				      (_cor5, 65)
			      in  #{#<_cor6>(8,1,'integer',['unsigned'|['big']]),
				    #<_cor0>('all',8,'binary',['unsigned'|['big']])}#
		      %% Line 3026
		      <> when 'true' ->
			  let <_cor7> =
			      call 'erlang':'+'
				  (D, 48)
			  in  #{#<_cor7>(8,1,'integer',['unsigned'|['big']]),
				#<_cor0>('all',8,'binary',['unsigned'|['big']])}#
		    end
		in  %% Line 3028
		    case <> of
		      %% Line 3029
		      <>
			  when call 'erlang':'=:='
				(I1,
				 0) ->
			  _cor8
		      %% Line 3030
		      <> when 'true' ->
			  apply 'integer_to_binary'/3
			      (I1, _cor1, _cor8)
		    end
'flush_monitor_message'/2 =
    %% Line 3038
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Ref,Res>
	      when let <_cor2> =
		    call 'erlang':'is_reference'
			(Ref)
		in  let <_cor3> =
			%% Line 3039
			call 'erlang':'is_atom'
			    (Res)
		    in  call 'erlang':'and'
			    (_cor2, _cor3) ->
	      do  %% Line 3040
		  receive
		    <{_cor6,_cor7,_cor8,_cor9,_cor10}>
			when call 'erlang':'=:='
			      (_cor7,
			       Ref) ->
			'ok'
		  after 0 ->
		    'ok'
		  %% Line 3041
		  Res
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'flush_monitor_message',2}}] )
	    -| ['compiler_generated'] )
	end
'set_cpu_topology'/1 =
    %% Line 3054
    fun (_cor0) ->
	%% Line 3055
	try
	    let <_cor1> =
		%% Line 3056
		apply 'cput_e2i'/1
		    (_cor0)
	    in  let <_cor2> =
		    call 'erlang':'system_flag'
			('internal_cpu_topology', _cor1)
		in  apply 'format_cpu_topology'/1
			(_cor2)
	of <_cor3> ->
	    _cor3
	catch <_cor6,_cor5,_cor4> ->
	    case <_cor6,_cor5,_cor4> of
	      %% Line 3058
	      <Class,Exception,_cor10>
		  when let <_cor7> =
			call 'erlang':'=/='
			    (Class, 'error')
		    in  let <_cor8> =
			    call 'erlang':'=/='
				(Exception, 'internal_error')
			in  call 'erlang':'or'
				(_cor7, _cor8) ->
		  %% Line 3059
		  call 'erlang':'error'
		      ('badarg', [_cor0|[]])
	      ( <_cor6,_cor5,_cor4> when 'true' ->
		    primop 'raise'
			(_cor4, _cor5)
		-| ['compiler_generated'] )
	    end
'cput_e2i_clvl'/2 =
    %% Line 3062
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'logical',_cor7},_X_PLvl> when 'true' ->
	      %% Line 3063
	      7
	  %% Line 3064
	  <[E|_cor8],PLvl> when 'true' ->
	      %% Line 3065
	      case call 'erlang':'element'
		       (1, E) of
		%% Line 3066
		<'node'> when 'true' ->
		    case PLvl of
		      %% Line 3067
		      <0> when 'true' ->
			  2
		      %% Line 3068
		      <3> when 'true' ->
			  4
		      ( <_cor2> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor2})
			-| ['compiler_generated'] )
		    end
		%% Line 3070
		<'processor'> when 'true' ->
		    case PLvl of
		      %% Line 3071
		      <0> when 'true' ->
			  2
		      %% Line 3072
		      <2> when 'true' ->
			  3
		      ( <_cor3> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor3})
			-| ['compiler_generated'] )
		    end
		%% Line 3074
		<'core'> when 'true' ->
		    5
		%% Line 3075
		<'thread'> when 'true' ->
		    6
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'cput_e2i_clvl',2}}] )
	    -| ['compiler_generated'] )
	end
'cput_e2i'/1 =
    %% Line 3078
    fun (_cor0) ->
	case _cor0 of
	  <'undefined'> when 'true' ->
	      %% Line 3079
	      'undefined'
	  %% Line 3080
	  <E> when 'true' ->
	      let <_cor1> =
		  %% Line 3081
		  apply 'cput_e2i_clvl'/2
		      (E, 0)
	      in  let <_cor10> =
		      %% Line 3081
		      apply 'cput_e2i'/7
			  (E, -1, -1, {'cpu',-1,-1,-1,-1,-1,-1}, 0, _cor1, [])
		  in  %% Line 3081
		      apply 'rvrs'/1
			  (_cor10)
	end
'cput_e2i'/7 =
    %% Line 3083
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[],_X_NId,_X_PId,_X_IS,_X_PLvl,_X_Lvl,Res> when 'true' ->
	      %% Line 3084
	      Res
	  %% Line 3085
	  <[E|Es],NId0,PId,IS,PLvl,Lvl,Res0> when 'true' ->
	      %% Line 3086
	      case apply 'cput_e2i'/7
		       (E, NId0, PId, IS, PLvl, Lvl, Res0) of
		%% Line 3087
		<[]> when 'true' ->
		    %% Line 3088
		    apply 'cput_e2i'/7
			(Es, NId0, PId, IS, PLvl, Lvl, Res0)
		%% Line 3091
		<Res1 = [CPU = {'cpu',N,P,PN,_cor77,_cor78,_cor79}|_cor80]> when 'true' ->
		    let <_cor8> =
			%% Line 3092
			case <> of
			  %% Line 3093
			  <>
			      when call 'erlang':'>'
				    (N,
				     PN) ->
			      N
			  %% Line 3094
			  <> when 'true' ->
			      PN
			end
		    in  %% Line 3096
			apply 'cput_e2i'/7
			    (Es, _cor8, P, CPU, PLvl, Lvl, Res1)
		( <_cor10> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor10})
		  -| ['compiler_generated'] )
	      end
	  %% Line 3098
	  <{Tag,[],TagList},Nid,PId,CPU,PLvl,Lvl,Res> when 'true' ->
	      %% Line 3100
	      apply 'cput_e2i'/7
		  ({Tag,TagList}, Nid, PId, CPU, PLvl, Lvl, Res)
	  %% Line 3101
	  <{'node',NL},Nid0,PId,_X_CPU,0,2,Res> when 'true' ->
	      let <Nid1> =
		  %% Line 3102
		  call 'erlang':'+'
		      (Nid0, 1)
	      in  let <Lvl> =
		      %% Line 3103
		      apply 'cput_e2i_clvl'/2
			  (NL, 2)
		  in  %% Line 3104
		      apply 'cput_e2i'/7
			  (NL, Nid1, PId, {'cpu',Nid1,-1,-1,-1,-1,-1}, 2, Lvl, Res)
	  %% Line 3105
	  <{'processor',PL},Nid,PId0,_X_CPU,0,2,Res> when 'true' ->
	      let <PId1> =
		  %% Line 3106
		  call 'erlang':'+'
		      (PId0, 1)
	      in  let <Lvl> =
		      %% Line 3107
		      apply 'cput_e2i_clvl'/2
			  (PL, 3)
		  in  %% Line 3108
		      apply 'cput_e2i'/7
			  (PL, Nid, PId1, {'cpu',-1,PId1,-1,-1,-1,-1}, 3, Lvl, Res)
	  %% Line 3109
	  <{'processor',PL},Nid,PId0,CPU,PLvl,CLvl,Res>
	      when let <_cor25> =
		    %% Line 3110
		    call 'erlang':'<'
			(PLvl, 3)
		in  let <_cor26> =
			%% Line 3110
			call 'erlang':'=<'
			    (CLvl, 3)
		    in  %% Line 3110
			call 'erlang':'and'
			    (_cor25, _cor26) ->
	      let <PId1> =
		  %% Line 3111
		  call 'erlang':'+'
		      (PId0, 1)
	      in  let <Lvl> =
		      %% Line 3112
		      apply 'cput_e2i_clvl'/2
			  (PL, 3)
		  in  %% Line 3116
		      case CPU of
			<{'cpu',_rec1,_rec2,_rec3,_rec4,_rec5,_rec6}> when 'true' ->
			    let <_cor34> =
				{'cpu',_rec1,PId1,-1,-1,-1,_rec6}
			    in  apply 'cput_e2i'/7
				    (PL, Nid, PId1, _cor34, 3, Lvl, Res)
			( <_cor81> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','cpu'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
	  %% Line 3117
	  <{'node',NL},Nid0,PId,CPU,3,4,%% Line 3118
					Res> when 'true' ->
	      let <Nid1> =
		  %% Line 3119
		  call 'erlang':'+'
		      (Nid0, 1)
	      in  let <Lvl> =
		      %% Line 3120
		      apply 'cput_e2i_clvl'/2
			  (NL, 4)
		  in  %% Line 3121
		      case CPU of
			<{'cpu',_cor82,_cor83,_cor84,_cor85,_cor86,_cor87}> when 'true' ->
			    let <_cor39> =
				call 'erlang':'setelement'
				    (4, CPU, Nid1)
			    in  apply 'cput_e2i'/7
				    (NL, Nid1, PId, _cor39, %% Line 3122
							    4, %% Line 3122
							       Lvl, %% Line 3122
								    Res)
			( <_cor88> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','cpu'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
	  %% Line 3123
	  <{'core',CL},Nid,PId,CPU = {'cpu',_cor89,_cor90,_cor91,C0,_cor92,_cor93},PLvl,5,Res>
	      when %% Line 3124
		call 'erlang':'<'
		    (PLvl,
		     5) ->
	      let <Lvl> =
		  %% Line 3125
		  apply 'cput_e2i_clvl'/2
		      (CL, 5)
	      in  let <_rec8> =
		      %% Line 3126
		      call 'erlang':'+'
			  (C0, 1)
		  in  let <_cor44> =
			  %% Line 3126
			  call 'erlang':'setelement'
			      (6, CPU, -1)
		      in  let <_cor46> =
			      %% Line 3126
			      call 'erlang':'setelement'
				  (5, _cor44, _rec8)
			  in  %% Line 3126
			      apply 'cput_e2i'/7
				  (CL, Nid, PId, _cor46, 5, Lvl, %% Line 3127
								 Res)
	  %% Line 3128
	  <{'thread',TL},Nid,PId,CPU = {'cpu',_cor101,_cor102,_cor103,_cor104,T0,_cor105},PLvl,6,%% Line 3129
												 Res>
	      when %% Line 3129
		call 'erlang':'<'
		    (PLvl,
		     6) ->
	      let <Lvl> =
		  %% Line 3130
		  apply 'cput_e2i_clvl'/2
		      (TL, 6)
	      in  let <_rec10> =
		      %% Line 3131
		      call 'erlang':'+'
			  (T0, 1)
		  in  let <_cor51> =
			  %% Line 3131
			  call 'erlang':'setelement'
			      (6, CPU, _rec10)
		      in  %% Line 3131
			  apply 'cput_e2i'/7
			      (TL, Nid, PId, _cor51, 6, Lvl, Res)
	  %% Line 3132
	  <{'logical',ID},_X_Nid,PId,CPU = {'cpu',_cor113,P,_cor114,C,T,_cor115},%% Line 3133
										 PLvl,%% Line 3133
										      7,%% Line 3133
											Res>
	      when %% Line 3134
		try
		    let <_cor52> =
			call 'erlang':'<'
			    (PLvl, 7)
		    in  let <_cor53> =
			    call 'erlang':'is_integer'
				(ID)
			in  let <_cor54> =
				call 'erlang':'=<'
				    (0, ID)
			    in  let <_cor55> =
				    call 'erlang':'<'
					(ID, 65536)
				in  let <_cor56> =
					call 'erlang':'and'
					    (_cor54, _cor55)
				    in  let <_cor57> =
					    call 'erlang':'and'
						(_cor53, _cor56)
					in  call 'erlang':'and'
						(_cor52, _cor57)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor59> =
		  %% Line 3135
		  case P of
		    <-1> when 'true' ->
			call 'erlang':'+'
			    (PId, 1)
		    <_cor116> when 'true' ->
			P
		  end
	      in  let <_cor62> =
		      %% Line 3136
		      case C of
			<-1> when 'true' ->
			    0
			<_cor117> when 'true' ->
			    C
		      end
		  in  let <_cor65> =
			  %% Line 3137
			  case T of
			    <-1> when 'true' ->
				0
			    <_cor118> when 'true' ->
				T
			  end
		      in  let <_cor69> =
			      %% Line 3138
			      {'cpu',_cor113,_cor59,_cor114,_cor62,_cor65,ID}
			  in  %% Line 3135
			      [_cor69|%% Line 3138
				      Res]
	  ( <_cor76,_cor75,_cor74,_cor73,_cor72,_cor71,_cor70> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor76,_cor75,_cor74,_cor73,_cor72,_cor71,_cor70})
		  -| [{'function_name',{'cput_e2i',7}}] )
	    -| ['compiler_generated'] )
	end
'format_cpu_topology'/1 =
    %% Line 3145
    fun (_cor0) ->
	%% Line 3146
	try
	    apply 'cput_i2e'/1
		(_cor0)
	of <_cor1> ->
	    _cor1
	catch <_cor4,_cor3,_cor2> ->
	    %% Line 3147
	    call 'erlang':'error'
		('internal_error', [_cor0|[]])
'cput_i2e'/1 =
    %% Line 3151
    fun (_cor0) ->
	case _cor0 of
	  <'undefined'> when 'true' ->
	      'undefined'
	  %% Line 3152
	  <Is> when 'true' ->
	      let <_cor1> =
		  apply 'cput_i2e_tag_map'/0
		      ()
	      in  apply 'cput_i2e'/4
		      (Is, 'true', 2, _cor1)
	end
'cput_i2e'/4 =
    %% Line 3154
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[],_X_Frst,_X_Lvl,_X_TM> when 'true' ->
	      %% Line 3155
	      []
	  %% Line 3156
	  <[{'cpu',_cor9,_cor10,_cor11,_cor12,_cor13,LID}|_cor14],_X_Frst,Lvl,_X_TM>
	      when call 'erlang':'=='
		    (Lvl,
		     7) ->
	      %% Line 3157
	      {'logical',LID}
	  %% Line 3158
	  <[I = {'cpu',_cor15,_cor16,_cor17,_cor18,_cor19,_cor20}|Is],Frst,Lvl,TM> when 'true' ->
	      let <_cor4> =
		  %% Line 3159
		  call 'erlang':'element'
		      (Lvl, I)
	      in  %% Line 3159
		  apply 'cput_i2e'/6
		      (_cor4, Frst, Is, [I|[]], Lvl, TM)
	  ( <_cor8,_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6,_cor5})
		  -| [{'function_name',{'cput_i2e',4}}] )
	    -| ['compiler_generated'] )
	end
'cput_i2e'/6 =
    %% Line 3161
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <V,Frst,[I|Is],SameV,Lvl,TM>
	      when try
		    let <_cor6> =
			call 'erlang':'element'
			    (Lvl, I)
		    in  call 'erlang':'=:='
			    (V, _cor6)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 3162
	      apply 'cput_i2e'/6
		  (V, Frst, Is, [I|SameV], Lvl, TM)
	  %% Line 3163
	  <-1,'true',[],SameV,Lvl,TM> when 'true' ->
	      let <_cor8> =
		  %% Line 3164
		  apply 'rvrs'/1
		      (SameV)
	      in  let <_cor7> =
		      %% Line 3164
		      call 'erlang':'+'
			  (Lvl, 1)
		  in  %% Line 3164
		      apply 'cput_i2e'/4
			  (_cor8, 'true', _cor7, TM)
	  %% Line 3165
	  <_X_V,'true',[],SameV,Lvl,TM>
	      when let <_cor9> =
		    call 'erlang':'=/='
			(Lvl, 3)
		in  let <_cor10> =
			%% Line 3166
			call 'erlang':'=/='
			    (Lvl, 4)
		    in  call 'erlang':'and'
			    (_cor9, _cor10) ->
	      let <_cor12> =
		  %% Line 3167
		  apply 'rvrs'/1
		      (SameV)
	      in  let <_cor11> =
		      %% Line 3167
		      call 'erlang':'+'
			  (Lvl, 1)
		  in  %% Line 3167
		      apply 'cput_i2e'/4
			  (_cor12, 'true', _cor11, TM)
	  %% Line 3168
	  <-1,_X_Frst,Is,SameV,2,TM> when 'true' ->
	      let <_cor14> =
		  %% Line 3169
		  apply 'rvrs'/1
		      (SameV)
	      in  let <_cor15> =
		      %% Line 3169
		      apply 'cput_i2e'/4
			  (_cor14, 'true', 3, TM)
		  in  let <_cor13> =
			  %% Line 3170
			  apply 'cput_i2e'/4
			      (Is, 'false', 2, TM)
		      in  %% Line 3170
			  call 'erlang':'++'
			      (_cor15, _cor13)
	  %% Line 3171
	  <_X_V,_X_Frst,Is,SameV,Lvl,TM> when 'true' ->
	      let <_cor19> =
		  %% Line 3172
		  apply 'cput_i2e_tag'/2
		      (Lvl, TM)
	      in  let <_cor17> =
		      %% Line 3172
		      apply 'rvrs'/1
			  (SameV)
		  in  let <_cor16> =
			  %% Line 3172
			  call 'erlang':'+'
			      (Lvl, 1)
		      in  let <_cor18> =
			      %% Line 3172
			      apply 'cput_i2e'/4
				  (_cor17, 'true', _cor16, TM)
			  in  let <_cor20> =
				  %% Line 3173
				  apply 'cput_i2e'/4
				      (Is, 'false', Lvl, TM)
			      in  %% Line 3172
				  [{_cor19,_cor18}|_cor20]
	end
'cput_i2e_tag_map'/0 =
    %% Line 3175
    fun () ->
	{'cpu','node','processor','processor_node','core','thread','logical'}
'cput_i2e_tag'/2 =
    %% Line 3177
    fun (_cor1,_cor0) ->
	%% Line 3178
	case call 'erlang':'element'
		 (_cor1, _cor0) of
	  <'processor_node'> when 'true' ->
	      'node'
	  <Other> when 'true' ->
	      Other
	end
'rvrs'/1 =
    %% Line 3180
    fun (_cor0) ->
	case _cor0 of
	  <L = [_cor2|[]]> when 'true' ->
	      L
	  %% Line 3181
	  <Xs> when 'true' ->
	      apply 'rvrs'/2
		  (Xs, [])
	end
'rvrs'/2 =
    %% Line 3183
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],Ys> when 'true' ->
	      Ys
	  %% Line 3184
	  <[X|Xs],Ys> when 'true' ->
	      apply 'rvrs'/2
		  (Xs, [X|Ys])
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'rvrs',2}}] )
	    -| ['compiler_generated'] )
	end
'await_proc_exit'/3 =
    %% Line 3198
    fun (_cor2,_cor1,_cor0) ->
	let <Mon> =
	    %% Line 3199
	    call 'erlang':'monitor'
		('process', _cor2)
	in  %% Line 3200
	    receive
	      %% Line 3201
	      <{'DOWN',_cor9,'process',_X_Proc,Reason}>
		  when call 'erlang':'=:='
			(_cor9,
			 Mon) ->
		  %% Line 3202
		  case _cor1 of
		    %% Line 3203
		    <'apply'> when 'true' ->
			%% Line 3204
			case _cor0 of
			  <{M,F,A}> when 'true' ->
			      %% Line 3205
			      call 'erlang':'apply'
				  (M, F, A)
			  ( <_cor4> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor4})
			    -| ['compiler_generated'] )
			end
		    %% Line 3206
		    <'data'> when 'true' ->
			_cor0
		    %% Line 3208
		    <'reason'> when 'true' ->
			%% Line 3209
			Reason
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor5})
		      -| ['compiler_generated'] )
		  end
	    after 'infinity' ->
	      'true'
'min'/2 =
    %% Line 3217
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <A,B>
	      when call 'erlang':'>'
		    (A,
		     B) ->
	      B
	  %% Line 3218
	  <A,_cor4> when 'true' ->
	      A
	end
'max'/2 =
    %% Line 3224
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <A,B>
	      when call 'erlang':'<'
		    (A,
		     B) ->
	      B
	  %% Line 3225
	  <A,_cor4> when 'true' ->
	      A
	end
'memory'/0 =
    %% Line 3259
    fun () ->
	let <_cor0> =
	    %% Line 3260
	    call 'erlang':'system_info'
		('alloc_util_allocators')
	in  let <_cor1> =
		%% Line 3260
		call 'erlang':'--'
		    (_cor0, ['mseg_alloc'])
	    in  let <_cor2> =
		    %% Line 3260
		    apply 'au_mem_data'/1
			(_cor1)
		in  %% Line 3260
		    case apply 'aa_mem_data'/1
			     (_cor2) of
		      %% Line 3261
		      <'notsup'> when 'true' ->
			  %% Line 3262
			  call 'erlang':'error'
			      ('notsup')
		      %% Line 3263
		      <Mem> when 'true' ->
			  %% Line 3264
			  ( case Mem of
			      ( <( {'memory',_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_rec22}
				   -| ['compiler_generated'] )> when 'true' ->
				    let <_cor8> =
					case _rec22 of
					  %% Line 3265
					  <0> when 'true' ->
					      []
					  %% Line 3266
					  <_cor47> when 'true' ->
					      [{'maximum',_rec22}|[]]
					end
				    in  let <_cor15> =
					    %% Line 3268
					    case _cor45 of
					      %% Line 3269
					      <0> when 'true' ->
						  _cor8
					      %% Line 3270
					      <_cor70> when 'true' ->
						  [{'low',_cor45}|_cor8]
					    end
					in  %% Line 3272
					    [{'total',_cor36}|%% Line 3273
							      [{'processes',_cor37}|%% Line 3274
										    [{'processes_used',_cor38}|%% Line 3275
													       [{'system',_cor39}|%% Line 3276
																  [{'atom',_cor40}|%% Line 3277
																		   [{'atom_used',_cor41}|%% Line 3278
																					 [{'binary',_cor42}|%% Line 3279
																							    [{'code',_cor43}|%% Line 3280
																									     [{'ets',_cor44}|_cor15]]]]]]]]]
				-| ['compiler_generated'] )
			      ( <_cor46> when 'true' ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {'badrecord','memory'}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
		    end
'memory'/1 =
    %% Line 3285
    fun (_cor0) ->
	case _cor0 of
	  <Type>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      %% Line 3286
	      case apply 'need_mem_info'/1
		       (Type) of
		<{AA,ALCU,ChkSup,BadArgZero}> when 'true' ->
		    %% Line 3287
		    case apply 'get_mem_data'/3
			     (ChkSup, ALCU, AA) of
		      %% Line 3288
		      <'notsup'> when 'true' ->
			  %% Line 3289
			  call 'erlang':'error'
			      ('notsup', [Type|[]])
		      %% Line 3290
		      <Mem> when 'true' ->
			  let <Value> =
			      %% Line 3291
			      apply 'get_memval'/2
				  (Type, Mem)
			  in  %% Line 3292
			      case <BadArgZero,Value> of
				%% Line 3293
				<'true',0> when 'true' ->
				    call 'erlang':'error'
					('badarg', [Type|[]])
				%% Line 3294
				<_fol684,_fol685> when 'true' ->
				    Value
			      end
		    end
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 3297
	  <Types>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      %% Line 3298
	      case apply 'need_mem_info_list'/1
		       (Types) of
		<{AA,ALCU,ChkSup,BadArgZeroList}> when 'true' ->
		    %% Line 3299
		    case apply 'get_mem_data'/3
			     (ChkSup, ALCU, AA) of
		      %% Line 3300
		      <'notsup'> when 'true' ->
			  %% Line 3301
			  call 'erlang':'error'
			      ('notsup', [Types|[]])
		      %% Line 3302
		      <Mem> when 'true' ->
			  %% Line 3303
			  case apply 'memory_result_list'/3
				   (Types, BadArgZeroList, Mem) of
			    %% Line 3304
			    <'badarg'> when 'true' ->
				call 'erlang':'error'
				    ('badarg', [Types|[]])
			    %% Line 3305
			    <Result> when 'true' ->
				Result
			  end
		    end
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor5})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8})
		  -| [{'function_name',{'memory',1}}] )
	    -| ['compiler_generated'] )
	end
'memory_result_list'/3 =
    %% Line 3309
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],[],_X_Mem> when 'true' ->
	      %% Line 3310
	      []
	  %% Line 3311
	  <[T|Ts],[BAZ|BAZs],Mem> when 'true' ->
	      %% Line 3312
	      case apply 'memory_result_list'/3
		       (Ts, BAZs, Mem) of
		%% Line 3313
		<'badarg'> when 'true' ->
		    'badarg'
		%% Line 3314
		<TVs> when 'true' ->
		    let <V> =
			%% Line 3315
			apply 'get_memval'/2
			    (T, Mem)
		    in  %% Line 3316
			case <BAZ,V> of
			  %% Line 3317
			  <'true',0> when 'true' ->
			      'badarg'
			  %% Line 3318
			  <_fol688,_fol689> when 'true' ->
			      [{T,V}|TVs]
			end
	      end
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'memory_result_list',3}}] )
	    -| ['compiler_generated'] )
	end
'get_mem_data'/3 =
    %% Line 3322
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'true',AlcUAllocs,NeedAllocatedAreas> when 'true' ->
	      %% Line 3323
	      case apply 'memory_is_supported'/0
		       () of
		%% Line 3324
		<'false'> when 'true' ->
		    'notsup'
		%% Line 3325
		<'true'> when 'true' ->
		    apply 'get_mem_data'/3
			('false', AlcUAllocs, NeedAllocatedAreas)
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 3327
	  <'false',AlcUAllocs,NeedAllocatedAreas> when 'true' ->
	      let <_cor5> =
		  %% Line 3328
		  case AlcUAllocs of
		    %% Line 3329
		    <[]> when 'true' ->
			{'memory',0,0,0,0,0,0,0,0,0,0,0}
		    %% Line 3330
		    <_cor11> when 'true' ->
			%% Line 3331
			apply 'au_mem_data'/1
			    (AlcUAllocs)
		  end
	      in  %% Line 3333
		  case NeedAllocatedAreas of
		    %% Line 3334
		    <'true'> when 'true' ->
			apply 'aa_mem_data'/1
			    (_cor5)
		    %% Line 3335
		    <'false'> when 'true' ->
			_cor5
		    ( <_cor7> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor7})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'get_mem_data',3}}] )
	    -| ['compiler_generated'] )
	end
'need_mem_info_list'/1 =
    %% Line 3338
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      %% Line 3339
	      {'false',[],'false',[]}
	  %% Line 3340
	  <[T|Ts]> when 'true' ->
	      %% Line 3341
	      case apply 'need_mem_info_list'/1
		       (Ts) of
		<{MAA,MALCU,MChkSup,MBadArgZero}> when 'true' ->
		    %% Line 3342
		    case apply 'need_mem_info'/1
			     (T) of
		      <{AA,ALCU,ChkSup,BadArgZero}> when 'true' ->
			  let <_cor8> =
			      %% Line 3343
			      case AA of
				%% Line 3344
				<'true'> when 'true' ->
				    'true'
				%% Line 3345
				<_cor10> when 'true' ->
				    MAA
			      end
			  in  let <_cor5> =
				  %% Line 3347
				  call 'erlang':'--'
				      (MALCU, ALCU)
			      in  let <_cor6> =
				      %% Line 3347
				      call 'erlang':'++'
					  (ALCU, _cor5)
				  in  let <_cor4> =
					  %% Line 3348
					  case ChkSup of
					    %% Line 3349
					    <'true'> when 'true' ->
						'true'
					    %% Line 3350
					    <_cor11> when 'true' ->
						MChkSup
					  end
				      in  %% Line 3343
					  {_cor8,_cor6,_cor4,%% Line 3352
							     [BadArgZero|MBadArgZero]}
		      ( <_cor2> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor2})
			-| ['compiler_generated'] )
		    end
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9})
		  -| [{'function_name',{'need_mem_info_list',1}}] )
	    -| ['compiler_generated'] )
	end
'need_mem_info'/1 =
    %% Line 3354
    fun (_cor0) ->
	case _cor0 of
	  <Type>
	      when let <_cor1> =
		    call 'erlang':'=:='
			(_cor0, 'total')
		in  let <_cor2> =
			%% Line 3355
			call 'erlang':'=:='
			    (_cor0, 'system')
		    in  call 'erlang':'or'
			    (_cor1, _cor2) ->
	      let <_cor3> =
		  %% Line 3356
		  call 'erlang':'system_info'
		      ('alloc_util_allocators')
	      in  let <_cor4> =
		      %% Line 3356
		      call 'erlang':'--'
			  (_cor3, ['mseg_alloc'])
		  in  %% Line 3356
		      {'true',_cor4,'false','false'}
	  %% Line 3357
	  <Type>
	      when let <_cor5> =
		    call 'erlang':'=:='
			(_cor0, 'processes')
		in  let <_cor6> =
			%% Line 3358
			call 'erlang':'=:='
			    (_cor0, 'processes_used')
		    in  call 'erlang':'or'
			    (_cor5, _cor6) ->
	      %% Line 3359
	      {'true',['eheap_alloc'|['fix_alloc']],'true','false'}
	  %% Line 3360
	  <Type>
	      when let <_cor7> =
		    call 'erlang':'=:='
			(_cor0, 'atom')
		in  let <_cor8> =
			%% Line 3361
			call 'erlang':'=:='
			    (_cor0, 'atom_used')
		    in  let <_cor9> =
			    %% Line 3362
			    call 'erlang':'=:='
				(_cor0, 'code')
			in  let <_cor10> =
				%% Line 3361
				call 'erlang':'or'
				    (_cor8, _cor9)
			    in  call 'erlang':'or'
				    (_cor7, _cor10) ->
	      %% Line 3363
	      {'true',[],'true','false'}
	  %% Line 3364
	  <'binary'> when 'true' ->
	      %% Line 3365
	      {'false',['binary_alloc'],'true','false'}
	  %% Line 3366
	  <'ets'> when 'true' ->
	      %% Line 3367
	      {'true',['ets_alloc'],'true','false'}
	  %% Line 3368
	  <'low'> when 'true' ->
	      %% Line 3370
	      case call 'erlang':'system_info'
		       ('allocator') of
		<{_cor17,_cor18,FeatureList,_cor19}> when 'true' ->
		    let <_cor14> =
			%% Line 3371
			case call 'erlang':'--'
				 (['ll_low_alloc'|['std_low_alloc']], FeatureList) of
			  %% Line 3372
			  <[]> when 'true' ->
			      ['ll_low_alloc'|['std_low_alloc']]
			  %% Line 3373
			  <_cor20> when 'true' ->
			      []
			end
		    in  %% Line 3375
			{'false',_cor14,'true','true'}
		( <_cor12> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor12})
		  -| ['compiler_generated'] )
	      end
	  %% Line 3376
	  <'maximum'> when 'true' ->
	      %% Line 3377
	      {'true',[],'true','true'}
	  %% Line 3378
	  <_cor21> when 'true' ->
	      %% Line 3379
	      {'false',[],'false','true'}
	end
'get_memval'/2 =
    %% Line 3381
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'total',{'memory',V,_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13}> when 'true' ->
	      V
	  %% Line 3382
	  <'processes',{'memory',_cor14,V,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23}> when 'true' ->
	      V
	  %% Line 3383
	  <'processes_used',{'memory',_cor24,_cor25,V,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33}> when 'true' ->
	      V
	  %% Line 3384
	  <'system',{'memory',_cor34,_cor35,_cor36,V,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43}> when 'true' ->
	      V
	  %% Line 3385
	  <'atom',{'memory',_cor44,_cor45,_cor46,_cor47,V,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53}> when 'true' ->
	      V
	  %% Line 3386
	  <'atom_used',{'memory',_cor54,_cor55,_cor56,_cor57,_cor58,V,_cor59,_cor60,_cor61,_cor62,_cor63}> when 'true' ->
	      V
	  %% Line 3387
	  <'binary',{'memory',_cor64,_cor65,_cor66,_cor67,_cor68,_cor69,V,_cor70,_cor71,_cor72,_cor73}> when 'true' ->
	      V
	  %% Line 3388
	  <'code',{'memory',_cor74,_cor75,_cor76,_cor77,_cor78,_cor79,_cor80,V,_cor81,_cor82,_cor83}> when 'true' ->
	      V
	  %% Line 3389
	  <'ets',{'memory',_cor84,_cor85,_cor86,_cor87,_cor88,_cor89,_cor90,_cor91,V,_cor92,_cor93}> when 'true' ->
	      V
	  %% Line 3390
	  <'low',{'memory',_cor94,_cor95,_cor96,_cor97,_cor98,_cor99,_cor100,_cor101,_cor102,V,_cor103}> when 'true' ->
	      V
	  %% Line 3391
	  <'maximum',{'memory',_cor104,_cor105,_cor106,_cor107,_cor108,_cor109,_cor110,_cor111,_cor112,_cor113,V}> when 'true' ->
	      V
	  %% Line 3392
	  <_cor114,{'memory',_cor115,_cor116,_cor117,_cor118,_cor119,_cor120,_cor121,_cor122,_cor123,_cor124,_cor125}> when 'true' ->
	      0
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'get_memval',2}}] )
	    -| ['compiler_generated'] )
	end
'memory_is_supported'/0 =
    %% Line 3394
    fun () ->
	%% Line 3395
	case call 'erlang':'system_info'
		 ('allocator') of
	  <{_cor4,_cor5,FeatureList,_cor6}> when 'true' ->
	      let <_cor1> =
		  %% Line 3396
		  call 'erlang':'system_info'
		      ('alloc_util_allocators')
	      in  let <_cor2> =
		      %% Line 3397
		      call 'erlang':'--'
			  (_cor1, ['mseg_alloc'])
		  in  %% Line 3396
		      case %% Line 3398
			   call 'erlang':'--'
			       (_cor2, FeatureList) of
			%% Line 3399
			<[]> when 'true' ->
			    'true'
			%% Line 3400
			<_cor7> when 'true' ->
			    'false'
		      end
	  ( <_cor0> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor0})
	    -| ['compiler_generated'] )
	end
'get_blocks_size'/2 =
    %% Line 3403
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{'blocks_size',Sz,_cor6,_cor7}|Rest],Acc> when 'true' ->
	      let <_cor2> =
		  %% Line 3404
		  call 'erlang':'+'
		      (Acc, Sz)
	      in  %% Line 3404
		  apply 'get_blocks_size'/2
		      (Rest, _cor2)
	  %% Line 3405
	  <[{_cor8,_cor9,_cor10,_cor11}|Rest],Acc> when 'true' ->
	      %% Line 3406
	      apply 'get_blocks_size'/2
		  (Rest, Acc)
	  %% Line 3407
	  <[{'blocks_size',Sz}|Rest],Acc> when 'true' ->
	      let <_cor3> =
		  %% Line 3408
		  call 'erlang':'+'
		      (Acc, Sz)
	      in  %% Line 3408
		  apply 'get_blocks_size'/2
		      (Rest, _cor3)
	  %% Line 3409
	  <[{_cor12,_cor13}|Rest],Acc> when 'true' ->
	      %% Line 3410
	      apply 'get_blocks_size'/2
		  (Rest, Acc)
	  %% Line 3411
	  <[],Acc> when 'true' ->
	      %% Line 3412
	      Acc
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'get_blocks_size',2}}] )
	    -| ['compiler_generated'] )
	end
'blocks_size'/2 =
    %% Line 3414
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{Carriers,SizeList}|Rest],Acc>
	      when let <_cor2> =
		    call 'erlang':'=:='
			(Carriers, 'mbcs')
		in  let <_cor3> =
			%% Line 3415
			call 'erlang':'=:='
			    (Carriers, 'mbcs_pool')
		    in  let <_cor4> =
			    %% Line 3416
			    call 'erlang':'=:='
				(Carriers, 'sbcs')
			in  let <_cor5> =
				%% Line 3415
				call 'erlang':'or'
				    (_cor3, _cor4)
			    in  call 'erlang':'or'
				    (_cor2, _cor5) ->
	      let <_cor6> =
		  %% Line 3417
		  apply 'get_blocks_size'/2
		      (SizeList, Acc)
	      in  %% Line 3417
		  apply 'blocks_size'/2
		      (Rest, _cor6)
	  %% Line 3418
	  <[_cor9|Rest],Acc> when 'true' ->
	      %% Line 3419
	      apply 'blocks_size'/2
		  (Rest, Acc)
	  %% Line 3420
	  <[],Acc> when 'true' ->
	      %% Line 3421
	      Acc
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'blocks_size',2}}] )
	    -| ['compiler_generated'] )
	end
'get_fix_proc'/2 =
    %% Line 3423
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{ProcType,A1,U1}|Rest],{A0,U0}>
	      when let <_cor2> =
		    call 'erlang':'=:='
			(ProcType, 'proc')
		in  let <_cor3> =
			%% Line 3424
			call 'erlang':'=:='
			    (ProcType, 'monitor_sh')
		    in  let <_cor4> =
			    %% Line 3425
			    call 'erlang':'=:='
				(ProcType, 'nlink_sh')
			in  let <_cor5> =
				%% Line 3426
				call 'erlang':'=:='
				    (ProcType, 'msg_ref')
			    in  let <_cor6> =
				    %% Line 3425
				    call 'erlang':'or'
					(_cor4, _cor5)
				in  let <_cor7> =
					%% Line 3424
					call 'erlang':'or'
					    (_cor3, _cor6)
				    in  call 'erlang':'or'
					    (_cor2, _cor7) ->
	      let <_cor9> =
		  %% Line 3427
		  call 'erlang':'+'
		      (A0, A1)
	      in  let <_cor8> =
		      %% Line 3427
		      call 'erlang':'+'
			  (U0, U1)
		  in  %% Line 3427
		      apply 'get_fix_proc'/2
			  (Rest, {_cor9,_cor8})
	  %% Line 3428
	  <[_cor12|Rest],Acc> when 'true' ->
	      %% Line 3429
	      apply 'get_fix_proc'/2
		  (Rest, Acc)
	  %% Line 3430
	  <[],Acc> when 'true' ->
	      %% Line 3431
	      Acc
	  ( <_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10})
		  -| [{'function_name',{'get_fix_proc',2}}] )
	    -| ['compiler_generated'] )
	end
'fix_proc'/2 =
    %% Line 3433
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{'fix_types',SizeList}|_X_Rest],Acc> when 'true' ->
	      %% Line 3434
	      apply 'get_fix_proc'/2
		  (SizeList, Acc)
	  %% Line 3435
	  <[{'fix_types',Mask,SizeList}|_X_Rest],Acc> when 'true' ->
	      %% Line 3436
	      case apply 'get_fix_proc'/2
		       (SizeList, Acc) of
		<{A,U}> when 'true' ->
		    %% Line 3437
		    {Mask,A,U}
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 3438
	  <[_cor5|Rest],Acc> when 'true' ->
	      %% Line 3439
	      apply 'fix_proc'/2
		  (Rest, Acc)
	  %% Line 3440
	  <[],Acc> when 'true' ->
	      %% Line 3441
	      Acc
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'fix_proc',2}}] )
	    -| ['compiler_generated'] )
	end
'is_low_alloc'/2 =
    %% Line 3443
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <_X_A,[]> when 'true' ->
	      %% Line 3444
	      'false'
	  %% Line 3445
	  <A,[_cor4|_X_As]>
	      when call 'erlang':'=:='
		    (_cor4,
		     A) ->
	      %% Line 3446
	      'true'
	  %% Line 3447
	  <A,[_X_A|As]> when 'true' ->
	      %% Line 3448
	      apply 'is_low_alloc'/2
		  (A, As)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'is_low_alloc',2}}] )
	    -| ['compiler_generated'] )
	end
'is_low_alloc'/1 =
    %% Line 3450
    fun (_cor0) ->
	%% Line 3451
	apply 'is_low_alloc'/2
	    (_cor0, ['ll_low_alloc'|['std_low_alloc']])
'au_mem_data'/2 =
    %% Line 3453
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'notsup',_cor69> when 'true' ->
	      %% Line 3454
	      'notsup'
	  %% Line 3455
	  <_cor70,[{_cor71,'false'}|_cor72]> when 'true' ->
	      %% Line 3456
	      'notsup'
	  %% Line 3457
	  <Mem = {'memory',Tot,%% Line 3458
			       Proc,%% Line 3459
				    ProcU,_cor73,_cor74,_cor75,_cor76,_cor77,_cor78,_cor79,_cor80},%% Line 3460
												   [{'eheap_alloc',_cor81,Data}|Rest]> when 'true' ->
	      let <Sz> =
		  %% Line 3461
		  apply 'blocks_size'/2
		      (Data, 0)
	      in  let <_rec35> =
		      %% Line 3462
		      call 'erlang':'+'
			  (Tot, Sz)
		  in  let <_rec36> =
			  %% Line 3463
			  call 'erlang':'+'
			      (Proc, Sz)
		      in  let <_rec37> =
			      %% Line 3464
			      call 'erlang':'+'
				  (ProcU, Sz)
			  in  let <_cor7> =
				  %% Line 3464
				  call 'erlang':'setelement'
				      (4, Mem, _rec37)
			      in  let <_cor8> =
				      %% Line 3463
				      call 'erlang':'setelement'
					  (3, _cor7, _rec36)
				  in  let <_cor10> =
					  %% Line 3462
					  call 'erlang':'setelement'
					      (2, _cor8, _rec35)
				      in  %% Line 3462
					  apply 'au_mem_data'/2
					      (_cor10, %% Line 3465
						       Rest)
	  %% Line 3466
	  <Mem = {'memory',Tot,_cor94,_cor95,%% Line 3467
					     Sys,_cor96,_cor97,_cor98,_cor99,%% Line 3468
									     Ets,_cor100,_cor101},%% Line 3469
												  [{'ets_alloc',_cor102,Data}|Rest]> when 'true' ->
	      let <Sz> =
		  %% Line 3470
		  apply 'blocks_size'/2
		      (Data, 0)
	      in  let <_rec39> =
		      %% Line 3471
		      call 'erlang':'+'
			  (Tot, Sz)
		  in  let <_rec40> =
			  %% Line 3472
			  call 'erlang':'+'
			      (Sys, Sz)
		      in  let <_rec41> =
			      %% Line 3473
			      call 'erlang':'+'
				  (Ets, Sz)
			  in  let <_cor16> =
				  %% Line 3473
				  call 'erlang':'setelement'
				      (10, Mem, _rec41)
			      in  let <_cor17> =
				      %% Line 3472
				      call 'erlang':'setelement'
					  (5, _cor16, _rec40)
				  in  let <_cor19> =
					  %% Line 3471
					  call 'erlang':'setelement'
					      (2, _cor17, _rec39)
				      in  %% Line 3471
					  apply 'au_mem_data'/2
					      (_cor19, %% Line 3474
						       Rest)
	  %% Line 3475
	  <Mem = {'memory',Tot,_cor115,_cor116,%% Line 3476
					       Sys,_cor117,_cor118,%% Line 3477
								   Bin,_cor119,_cor120,_cor121,_cor122},%% Line 3478
													[{'binary_alloc',_cor123,Data}|Rest]> when 'true' ->
	      let <Sz> =
		  %% Line 3479
		  apply 'blocks_size'/2
		      (Data, 0)
	      in  let <_rec43> =
		      %% Line 3480
		      call 'erlang':'+'
			  (Tot, Sz)
		  in  let <_rec44> =
			  %% Line 3481
			  call 'erlang':'+'
			      (Sys, Sz)
		      in  let <_rec45> =
			      %% Line 3482
			      call 'erlang':'+'
				  (Bin, Sz)
			  in  let <_cor25> =
				  %% Line 3482
				  call 'erlang':'setelement'
				      (8, Mem, _rec45)
			      in  let <_cor26> =
				      %% Line 3481
				      call 'erlang':'setelement'
					  (5, _cor25, _rec44)
				  in  let <_cor28> =
					  %% Line 3480
					  call 'erlang':'setelement'
					      (2, _cor26, _rec43)
				      in  %% Line 3480
					  apply 'au_mem_data'/2
					      (_cor28, %% Line 3483
						       Rest)
	  %% Line 3484
	  <Mem = {'memory',Tot,%% Line 3485
			       Proc,%% Line 3486
				    ProcU,%% Line 3487
					  Sys,_cor136,_cor137,_cor138,_cor139,_cor140,_cor141,_cor142},%% Line 3488
												       [{'fix_alloc',_cor143,Data}|Rest]> when 'true' ->
	      let <Sz> =
		  %% Line 3489
		  apply 'blocks_size'/2
		      (Data, 0)
	      in  %% Line 3490
		  case apply 'fix_proc'/2
			   (Data, {0,0}) of
		    %% Line 3491
		    <{A,U}> when 'true' ->
			let <_rec47> =
			    %% Line 3492
			    call 'erlang':'+'
				(Tot, Sz)
			in  let <_rec48> =
				%% Line 3493
				call 'erlang':'+'
				    (Proc, A)
			    in  let <_rec49> =
				    %% Line 3494
				    call 'erlang':'+'
					(ProcU, U)
				in  let <_cor33> =
					%% Line 3495
					call 'erlang':'+'
					    (Sys, Sz)
				    in  let <_rec50> =
					    %% Line 3495
					    call 'erlang':'-'
						(_cor33, A)
					in  let <_cor36> =
						%% Line 3495
						call 'erlang':'setelement'
						    (5, Mem, _rec50)
					    in  let <_cor37> =
						    %% Line 3494
						    call 'erlang':'setelement'
							(4, _cor36, _rec49)
						in  let <_cor38> =
							%% Line 3493
							call 'erlang':'setelement'
							    (3, _cor37, _rec48)
						    in  let <_cor40> =
							    %% Line 3492
							    call 'erlang':'setelement'
								(2, _cor38, _rec47)
							in  %% Line 3492
							    apply 'au_mem_data'/2
								(_cor40, %% Line 3496
									 Rest)
		    %% Line 3497
		    <{Mask,A,U}> when 'true' ->
			let <_rec52> =
			    %% Line 3498
			    call 'erlang':'+'
				(Tot, Sz)
			in  let <_cor42> =
				%% Line 3499
				call 'erlang':'+'
				    (Proc, A)
			    in  let <_rec53> =
				    %% Line 3499
				    call 'erlang':'band'
					(Mask, _cor42)
				in  let <_cor44> =
					%% Line 3500
					call 'erlang':'+'
					    (ProcU, U)
				    in  let <_rec54> =
					    %% Line 3500
					    call 'erlang':'band'
						(Mask, _cor44)
					in  let <_cor46> =
						%% Line 3501
						call 'erlang':'+'
						    (Sys, Sz)
					    in  let <_cor47> =
						    %% Line 3501
						    call 'erlang':'-'
							(_cor46, A)
						in  let <_rec55> =
							%% Line 3501
							call 'erlang':'band'
							    (Mask, _cor47)
						    in  let <_cor50> =
							    %% Line 3501
							    call 'erlang':'setelement'
								(5, Mem, _rec55)
							in  let <_cor51> =
								%% Line 3500
								call 'erlang':'setelement'
								    (4, _cor50, _rec54)
							    in  let <_cor52> =
								    %% Line 3499
								    call 'erlang':'setelement'
									(3, _cor51, _rec53)
								in  let <_cor54> =
									%% Line 3498
									call 'erlang':'setelement'
									    (2, _cor52, _rec52)
								    in  %% Line 3498
									apply 'au_mem_data'/2
									    (_cor54, %% Line 3502
										     Rest)
		    ( <_cor55> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor55})
		      -| ['compiler_generated'] )
		  end
	  %% Line 3504
	  <Mem = {'memory',Tot,_cor168,_cor169,%% Line 3505
					       Sys,_cor170,_cor171,_cor172,_cor173,_cor174,%% Line 3506
											   Low,_cor175},%% Line 3507
													[{A,_cor176,Data}|Rest]> when 'true' ->
	      let <Sz> =
		  %% Line 3508
		  apply 'blocks_size'/2
		      (Data, 0)
	      in  let <_rec57> =
		      %% Line 3509
		      call 'erlang':'+'
			  (Tot, Sz)
		  in  let <_rec58> =
			  %% Line 3510
			  call 'erlang':'+'
			      (Sys, Sz)
		      in  let <_cor60> =
			      %% Line 3511
			      case apply 'is_low_alloc'/1
				       (A) of
				%% Line 3512
				<'true'> when 'true' ->
				    call 'erlang':'+'
					(Low, Sz)
				%% Line 3513
				<'false'> when 'true' ->
				    Low
				( <_cor59> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor59})
				  -| ['compiler_generated'] )
			      end
			  in  let <_cor63> =
				  %% Line 3511
				  call 'erlang':'setelement'
				      (11, Mem, _cor60)
			      in  let <_cor64> =
				      %% Line 3510
				      call 'erlang':'setelement'
					  (5, _cor63, _rec58)
				  in  let <_cor66> =
					  %% Line 3509
					  call 'erlang':'setelement'
					      (2, _cor64, _rec57)
				      in  %% Line 3509
					  apply 'au_mem_data'/2
					      (_cor66, %% Line 3515
						       Rest)
	  %% Line 3516
	  <EMD,[]> when 'true' ->
	      %% Line 3517
	      EMD
	  ( <_cor68,_cor67> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor68,_cor67})
		  -| [{'function_name',{'au_mem_data',2}}] )
	    -| ['compiler_generated'] )
	end
'au_mem_data'/1 =
    %% Line 3519
    fun (_cor0) ->
	let <Ref> =
	    %% Line 3520
	    call 'erlang':'make_ref'
		()
	in  do  %% Line 3521
		call 'erlang':'system_info'
		    ({'memory_internal',Ref,_cor0})
		%% Line 3522
		apply 'receive_emd'/1
		    (Ref)
'receive_emd'/3 =
    %% Line 3524
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <_X_Ref,EMD,0> when 'true' ->
	      %% Line 3525
	      EMD
	  %% Line 3526
	  <Ref,EMD,N> when 'true' ->
	      %% Line 3527
	      receive
		%% Line 3528
		<{_cor8,_cor9,Data}>
		    when call 'erlang':'=:='
			  (_cor8,
			   Ref) ->
		    let <_cor4> =
			%% Line 3529
			apply 'au_mem_data'/2
			    (EMD, Data)
		    in  let <_cor3> =
			    %% Line 3529
			    call 'erlang':'-'
				(N, 1)
			in  %% Line 3529
			    apply 'receive_emd'/3
				(Ref, _cor4, _cor3)
	      after 'infinity' ->
		'true'
	end
'receive_emd'/1 =
    %% Line 3532
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 3533
	    call 'erlang':'system_info'
		('schedulers')
	in  %% Line 3533
	    apply 'receive_emd'/3
		(_cor0, {'memory',0,0,0,0,0,0,0,0,0,0,0}, _cor1)
'aa_mem_data'/2 =
    %% Line 3535
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Mem = {'memory',_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66},%% Line 3536
													 [{'maximum',Max}|Rest]> when 'true' ->
	      let <_cor4> =
		  %% Line 3537
		  call 'erlang':'setelement'
		      (12, Mem, Max)
	      in  %% Line 3537
		  apply 'aa_mem_data'/2
		      (_cor4, %% Line 3538
			      Rest)
	  %% Line 3539
	  <Mem = {'memory',_cor79,_cor80,_cor81,_cor82,_cor83,_cor84,_cor85,_cor86,_cor87,_cor88,_cor89},%% Line 3540
													 [{'total',Tot}|Rest]> when 'true' ->
	      let <_cor6> =
		  %% Line 3542
		  call 'erlang':'setelement'
		      (5, Mem, 0)
	      in  let <_cor8> =
		      %% Line 3541
		      call 'erlang':'setelement'
			  (2, _cor6, Tot)
		  in  %% Line 3541
		      apply 'aa_mem_data'/2
			  (_cor8, %% Line 3543
				  Rest)
	  %% Line 3544
	  <Mem = {'memory',_cor102,_cor103,_cor104,_cor105,Atom,%% Line 3545
								AtomU,_cor106,_cor107,_cor108,_cor109,_cor110},%% Line 3546
													       [{'atom_space',Alloced,Used}|Rest]> when 'true' ->
	      let <_rec63> =
		  %% Line 3547
		  call 'erlang':'+'
		      (Atom, Alloced)
	      in  let <_rec64> =
		      %% Line 3548
		      call 'erlang':'+'
			  (AtomU, Used)
		  in  let <_cor12> =
			  %% Line 3548
			  call 'erlang':'setelement'
			      (7, Mem, _rec64)
		      in  let <_cor14> =
			      %% Line 3547
			      call 'erlang':'setelement'
				  (6, _cor12, _rec63)
			  in  %% Line 3547
			      apply 'aa_mem_data'/2
				  (_cor14, %% Line 3549
					   Rest)
	  %% Line 3550
	  <Mem = {'memory',_cor123,_cor124,_cor125,_cor126,Atom,%% Line 3551
								AtomU,_cor127,_cor128,_cor129,_cor130,_cor131},%% Line 3552
													       [{'atom_table',Sz}|Rest]> when 'true' ->
	      let <_rec66> =
		  %% Line 3553
		  call 'erlang':'+'
		      (Atom, Sz)
	      in  let <_rec67> =
		      %% Line 3554
		      call 'erlang':'+'
			  (AtomU, Sz)
		  in  let <_cor18> =
			  %% Line 3554
			  call 'erlang':'setelement'
			      (7, Mem, _rec67)
		      in  let <_cor20> =
			      %% Line 3553
			      call 'erlang':'setelement'
				  (6, _cor18, _rec66)
			  in  %% Line 3553
			      apply 'aa_mem_data'/2
				  (_cor20, %% Line 3555
					   Rest)
	  %% Line 3556
	  <Mem = {'memory',_cor144,_cor145,_cor146,_cor147,_cor148,_cor149,_cor150,_cor151,Ets,_cor152,_cor153},%% Line 3557
														[{'ets_misc',Sz}|Rest]> when 'true' ->
	      let <_rec69> =
		  %% Line 3558
		  call 'erlang':'+'
		      (Ets, Sz)
	      in  let <_cor24> =
		      %% Line 3558
		      call 'erlang':'setelement'
			  (10, Mem, _rec69)
		  in  %% Line 3558
		      apply 'aa_mem_data'/2
			  (_cor24, %% Line 3559
				   Rest)
	  %% Line 3560
	  <Mem = {'memory',_cor166,Proc,%% Line 3561
					ProcU,%% Line 3562
					      Sys,_cor167,_cor168,_cor169,_cor170,_cor171,_cor172,_cor173},%% Line 3563
													   [{ProcData,Sz}|Rest]>
	      when let <_cor25> =
		    %% Line 3563
		    call 'erlang':'=:='
			(ProcData, 'bif_timer')
		in  let <_cor26> =
			%% Line 3564
			call 'erlang':'=:='
			    (ProcData, 'link_lh')
		    in  let <_cor27> =
			    %% Line 3565
			    call 'erlang':'=:='
				(ProcData, 'process_table')
			in  let <_cor28> =
				%% Line 3564
				call 'erlang':'or'
				    (_cor26, _cor27)
			    in  %% Line 3563
				call 'erlang':'or'
				    (_cor25, _cor28) ->
	      let <_rec71> =
		  %% Line 3566
		  call 'erlang':'+'
		      (Proc, Sz)
	      in  let <_rec72> =
		      %% Line 3567
		      call 'erlang':'+'
			  (ProcU, Sz)
		  in  let <_rec73> =
			  %% Line 3568
			  call 'erlang':'-'
			      (Sys, Sz)
		      in  let <_cor33> =
			      %% Line 3568
			      call 'erlang':'setelement'
				  (5, Mem, _rec73)
			  in  let <_cor34> =
				  %% Line 3567
				  call 'erlang':'setelement'
				      (4, _cor33, _rec72)
			      in  let <_cor36> =
				      %% Line 3566
				      call 'erlang':'setelement'
					  (3, _cor34, _rec71)
				  in  %% Line 3566
				      apply 'aa_mem_data'/2
					  (_cor36, %% Line 3569
						   Rest)
	  %% Line 3570
	  <Mem = {'memory',_cor186,_cor187,_cor188,_cor189,_cor190,_cor191,_cor192,Code,_cor193,_cor194,_cor195},%% Line 3571
														 [{CodeData,Sz}|Rest]>
	      when let <_cor37> =
		    %% Line 3571
		    call 'erlang':'=:='
			(CodeData, 'module_table')
		in  let <_cor38> =
			%% Line 3572
			call 'erlang':'=:='
			    (CodeData, 'export_table')
		    in  let <_cor39> =
			    %% Line 3573
			    call 'erlang':'=:='
				(CodeData, 'export_list')
			in  let <_cor40> =
				%% Line 3574
				call 'erlang':'=:='
				    (CodeData, 'fun_table')
			    in  let <_cor41> =
				    %% Line 3575
				    call 'erlang':'=:='
					(CodeData, 'module_refs')
				in  let <_cor42> =
					%% Line 3576
					call 'erlang':'=:='
					    (CodeData, 'loaded_code')
				    in  let <_cor43> =
					    %% Line 3575
					    call 'erlang':'or'
						(_cor41, _cor42)
					in  let <_cor44> =
						%% Line 3574
						call 'erlang':'or'
						    (_cor40, _cor43)
					    in  let <_cor45> =
						    %% Line 3573
						    call 'erlang':'or'
							(_cor39, _cor44)
						in  let <_cor46> =
							%% Line 3572
							call 'erlang':'or'
							    (_cor38, _cor45)
						    in  %% Line 3571
							call 'erlang':'or'
							    (_cor37, _cor46) ->
	      let <_rec75> =
		  %% Line 3577
		  call 'erlang':'+'
		      (Code, Sz)
	      in  let <_cor50> =
		      %% Line 3577
		      call 'erlang':'setelement'
			  (9, Mem, _rec75)
		  in  %% Line 3577
		      apply 'aa_mem_data'/2
			  (_cor50, %% Line 3578
				   Rest)
	  %% Line 3579
	  <EMD,[{_cor208,_cor209}|Rest]> when 'true' ->
	      %% Line 3580
	      apply 'aa_mem_data'/2
		  (EMD, Rest)
	  %% Line 3581
	  <Mem = {'memory',Tot,%% Line 3582
			       Proc,_cor210,%% Line 3583
					    Sys,_cor211,_cor212,_cor213,_cor214,_cor215,_cor216,_cor217},%% Line 3584
													 []>
	      when %% Line 3584
		call 'erlang':'=<'
		    (Sys,
		     0) ->
	      let <_rec77> =
		  %% Line 3586
		  call 'erlang':'-'
		      (Tot, Proc)
	      in  %% Line 3586
		  call 'erlang':'setelement'
		      (5, Mem, _rec77)
	  %% Line 3587
	  <EMD,[]> when 'true' ->
	      %% Line 3588
	      EMD
	  ( <_cor55,_cor54> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor55,_cor54})
		  -| [{'function_name',{'aa_mem_data',2}}] )
	    -| ['compiler_generated'] )
	end
'aa_mem_data'/1 =
    %% Line 3590
    fun (_cor0) ->
	case _cor0 of
	  <'notsup'> when 'true' ->
	      %% Line 3591
	      'notsup'
	  %% Line 3592
	  <EMD> when 'true' ->
	      let <_cor1> =
		  %% Line 3593
		  call 'erlang':'system_info'
		      ('allocated_areas')
	      in  %% Line 3593
		  apply 'aa_mem_data'/2
		      (EMD, _cor1)
	end
'alloc_info'/1 =
    %% Line 3600
    fun (_cor0) ->
	%% Line 3601
	apply 'get_alloc_info'/2
	    ('allocator', _cor0)
'alloc_sizes'/1 =
    %% Line 3603
    fun (_cor0) ->
	%% Line 3604
	apply 'get_alloc_info'/2
	    ('allocator_sizes', _cor0)
'get_alloc_info'/2 =
    %% Line 3606
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Type,AAtom>
	      when call 'erlang':'is_atom'
		    (AAtom) ->
	      %% Line 3607
	      case apply 'get_alloc_info'/2
		       (Type, [AAtom|[]]) of
		<[{_cor8,Result}|[]]>
		    when call 'erlang':'=:='
			  (_cor8,
			   AAtom) ->
		    %% Line 3608
		    Result
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 3609
	  <Type,AList>
	      when call 'erlang':'is_list'
		    (AList) ->
	      let <Ref> =
		  %% Line 3610
		  call 'erlang':'make_ref'
		      ()
	      in  do  %% Line 3611
		      call 'erlang':'system_info'
			  ({Type,Ref,AList})
		      let <_cor5> =
			  %% Line 3613
			  call 'erlang':'system_info'
			      ('schedulers')
		      in  let <_cor4> =
			      %% Line 3614
			      apply 'mk_res_list'/1
				  (AList)
			  in  %% Line 3612
			      apply 'receive_allocator'/3
				  (Ref, _cor5, _cor4)
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6})
		  -| [{'function_name',{'get_alloc_info',2}}] )
	    -| ['compiler_generated'] )
	end
'mk_res_list'/1 =
    %% Line 3616
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      %% Line 3617
	      []
	  %% Line 3618
	  <[Alloc|Rest]> when 'true' ->
	      let <_cor1> =
		  %% Line 3619
		  apply 'mk_res_list'/1
		      (Rest)
	      in  %% Line 3619
		  [{Alloc,[]}|_cor1]
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'mk_res_list',1}}] )
	    -| ['compiler_generated'] )
	end
'insert_instance'/3 =
    %% Line 3621
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <I,N,Rest>
	      when call 'erlang':'is_atom'
		    (N) ->
	      %% Line 3622
	      [{N,I}|Rest]
	  %% Line 3623
	  <I,N,[]> when 'true' ->
	      %% Line 3624
	      [{'instance',N,I}|[]]
	  %% Line 3625
	  <I,N,Rest = [{'instance',M,_cor7}|_cor8]>
	      when call 'erlang':'<'
		    (N,
		     M) ->
	      %% Line 3626
	      [{'instance',N,I}|Rest]
	  %% Line 3627
	  <I,N,[Prev|Rest]> when 'true' ->
	      let <_cor3> =
		  %% Line 3628
		  apply 'insert_instance'/3
		      (I, N, Rest)
	      in  %% Line 3628
		  [Prev|_cor3]
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'insert_instance',3}}] )
	    -| ['compiler_generated'] )
	end
'insert_info'/2 =
    %% Line 3630
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],Ys> when 'true' ->
	      %% Line 3631
	      Ys
	  %% Line 3632
	  <[{A,'false'}|Xs],[{_cor7,_X_IList}|Ys]>
	      when call 'erlang':'=:='
		    (_cor7,
		     A) ->
	      %% Line 3633
	      apply 'insert_info'/2
		  (Xs, [{A,'false'}|Ys])
	  %% Line 3634
	  <[{A,N,I}|Xs],[{_cor8,IList}|Ys]>
	      when call 'erlang':'=:='
		    (_cor8,
		     A) ->
	      let <_cor2> =
		  %% Line 3635
		  apply 'insert_instance'/3
		      (I, N, IList)
	      in  %% Line 3635
		  apply 'insert_info'/2
		      (Xs, [{A,_cor2}|Ys])
	  %% Line 3636
	  <Xs = [{A1,_cor9}|_cor10],[Y = {A2,_cor11}|Ys]>
	      when call 'erlang':'/='
		    (A1,
		     A2) ->
	      let <_cor3> =
		  %% Line 3637
		  apply 'insert_info'/2
		      (Xs, Ys)
	      in  %% Line 3637
		  [Y|_cor3]
	  %% Line 3638
	  <Xs = [{A1,_cor12,_cor13}|_cor14],[Y = {A2,_cor15}|Ys]>
	      when call 'erlang':'/='
		    (A1,
		     A2) ->
	      let <_cor4> =
		  %% Line 3639
		  apply 'insert_info'/2
		      (Xs, Ys)
	      in  %% Line 3639
		  [Y|_cor4]
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'insert_info',2}}] )
	    -| ['compiler_generated'] )
	end
'receive_allocator'/3 =
    %% Line 3641
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <_X_Ref,0,Acc> when 'true' ->
	      %% Line 3642
	      Acc
	  %% Line 3643
	  <Ref,N,Acc> when 'true' ->
	      %% Line 3644
	      receive
		%% Line 3645
		<{_cor8,_cor9,InfoList}>
		    when call 'erlang':'=:='
			  (_cor8,
			   Ref) ->
		    let <_cor4> =
			%% Line 3646
			call 'erlang':'-'
			    (N, 1)
		    in  let <_cor3> =
			    %% Line 3646
			    apply 'insert_info'/2
				(InfoList, Acc)
			in  %% Line 3646
			    apply 'receive_allocator'/3
				(Ref, _cor4, _cor3)
	      after 'infinity' ->
		'true'
	end
'await_sched_wall_time_modifications'/2 =
    %% Line 3653
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 3654
	    call 'erlang':'system_info'
		('schedulers')
	in  do  %% Line 3654
		apply 'sched_wall_time'/2
		    (_cor1, _cor2)
		_cor0
'gather_sched_wall_time_result'/1 =
    %% Line 3662
    fun (_cor0) ->
	case _cor0 of
	  <Ref>
	      when call 'erlang':'is_reference'
		    (_cor0) ->
	      let <_cor1> =
		  %% Line 3663
		  call 'erlang':'system_info'
		      ('schedulers')
	      in  %% Line 3663
		  apply 'sched_wall_time'/3
		      (Ref, _cor1, [])
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'gather_sched_wall_time_result',1}}] )
	    -| ['compiler_generated'] )
	end
'sched_wall_time'/2 =
    %% Line 3665
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <_X_Ref,0> when 'true' ->
	      %% Line 3666
	      'ok'
	  %% Line 3667
	  <Ref,N> when 'true' ->
	      %% Line 3668
	      receive
		<_cor5>
		    when call 'erlang':'=:='
			  (_cor5,
			   Ref) ->
		    let <_cor2> =
			call 'erlang':'-'
			    (N, 1)
		    in  apply 'sched_wall_time'/2
			    (Ref, _cor2)
	      after 'infinity' ->
		'true'
	end
'sched_wall_time'/3 =
    %% Line 3670
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <_X_Ref,0,Acc> when 'true' ->
	      %% Line 3671
	      Acc
	  %% Line 3672
	  <Ref,N,'undefined'> when 'true' ->
	      %% Line 3673
	      receive
		<{_cor9,_cor10}>
		    when call 'erlang':'=:='
			  (_cor9,
			   Ref) ->
		    let <_cor3> =
			call 'erlang':'-'
			    (N, 1)
		    in  apply 'sched_wall_time'/3
			    (Ref, _cor3, 'undefined')
	      after 'infinity' ->
		'true'
	  %% Line 3674
	  <Ref,N,Acc> when 'true' ->
	      %% Line 3675
	      receive
		%% Line 3676
		<{_cor11,'undefined'}>
		    when call 'erlang':'=:='
			  (_cor11,
			   Ref) ->
		    let <_cor4> =
			call 'erlang':'-'
			    (N, 1)
		    in  apply 'sched_wall_time'/3
			    (Ref, _cor4, 'undefined')
		%% Line 3677
		<{_cor12,SWT}>
		    when call 'erlang':'=:='
			  (_cor12,
			   Ref) ->
		    let <_cor5> =
			call 'erlang':'-'
			    (N, 1)
		    in  apply 'sched_wall_time'/3
			    (Ref, _cor5, [SWT|Acc])
	      after 'infinity' ->
		'true'
	end
'gather_gc_info_result'/1 =
    %% Line 3683
    fun (_cor0) ->
	case _cor0 of
	  <Ref>
	      when call 'erlang':'is_reference'
		    (_cor0) ->
	      let <_cor1> =
		  %% Line 3684
		  call 'erlang':'system_info'
		      ('schedulers')
	      in  %% Line 3684
		  apply 'gc_info'/3
		      (Ref, _cor1, {0,0})
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'gather_gc_info_result',1}}] )
	    -| ['compiler_generated'] )
	end
'gc_info'/3 =
    %% Line 3686
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <_X_Ref,0,{Colls,Recl}> when 'true' ->
	      %% Line 3687
	      {Colls,Recl,0}
	  %% Line 3688
	  <Ref,N,{OrigColls,OrigRecl}> when 'true' ->
	      %% Line 3689
	      receive
		%% Line 3690
		<{_cor9,{_cor10,Colls,Recl}}>
		    when call 'erlang':'=:='
			  (_cor9,
			   Ref) ->
		    let <_cor5> =
			%% Line 3691
			call 'erlang':'-'
			    (N, 1)
		    in  let <_cor4> =
			    %% Line 3691
			    call 'erlang':'+'
				(Colls, OrigColls)
			in  let <_cor3> =
				%% Line 3691
				call 'erlang':'+'
				    (Recl, OrigRecl)
			    in  %% Line 3691
				apply 'gc_info'/3
				    (Ref, _cor5, {_cor4,_cor3})
	      after 'infinity' ->
		'true'
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'gc_info',3}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('erlang')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('erlang', _cor0)
end