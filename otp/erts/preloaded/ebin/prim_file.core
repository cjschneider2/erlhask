module 'prim_file' ['advise'/4,
		    'allocate'/3,
		    'altname'/1,
		    'altname'/2,
		    'close'/1,
		    'copy'/3,
		    'datasync'/1,
		    'del_dir'/1,
		    'del_dir'/2,
		    'delete'/1,
		    'delete'/2,
		    'get_cwd'/0,
		    'get_cwd'/1,
		    'get_cwd'/2,
		    'internal_name2native'/1,
		    'internal_native2name'/1,
		    'internal_normalize_utf8'/1,
		    'ipread_s32bu_p32bu'/3,
		    'is_translatable'/1,
		    'list_dir'/1,
		    'list_dir'/2,
		    'list_dir_all'/1,
		    'list_dir_all'/2,
		    'make_dir'/1,
		    'make_dir'/2,
		    'make_link'/2,
		    'make_link'/3,
		    'make_symlink'/2,
		    'make_symlink'/3,
		    'module_info'/0,
		    'module_info'/1,
		    'open'/1,
		    'open'/2,
		    'open'/3,
		    'open_int'/4,
		    'open_mode'/1,
		    'open_mode'/4,
		    'position'/2,
		    'pread'/2,
		    'pread'/3,
		    'pwrite'/2,
		    'pwrite'/3,
		    'read'/2,
		    'read_file'/1,
		    'read_file'/2,
		    'read_file_info'/1,
		    'read_file_info'/2,
		    'read_file_info'/3,
		    'read_line'/1,
		    'read_link'/1,
		    'read_link'/2,
		    'read_link_all'/1,
		    'read_link_all'/2,
		    'read_link_info'/1,
		    'read_link_info'/2,
		    'read_link_info'/3,
		    'rename'/2,
		    'rename'/3,
		    'sendfile'/8,
		    'set_cwd'/1,
		    'set_cwd'/2,
		    'start'/0,
		    'stop'/1,
		    'sync'/1,
		    'truncate'/1,
		    'write'/2,
		    'write_file'/2,
		    'write_file_info'/2,
		    'write_file_info'/3,
		    'write_file_info'/4]
    attributes [%% Line 24
		'type' =
		    %% Line 24
		    [{{'record','file_info'},[{'typed_record_field',{'record_field',25,{'atom',25,'size'}},{'type',25,'union',[{'atom',25,'undefined'}|[{'type',25,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',26,{'atom',26,'type'}},{'type',26,'union',[{'atom',26,'undefined'}|[{'atom',26,'device'}|[{'atom',26,'directory'}|[{'atom',26,'other'}|[{'atom',26,'regular'}|[{'atom',26,'symlink'}]]]]]]}}|[{'typed_record_field',{'record_field',27,{'atom',27,'access'}},{'type',27,'union',[{'atom',27,'undefined'}|[{'atom',27,'read'}|[{'atom',27,'write'}|[{'atom',27,'read_write'}|[{'atom',27,'none'}]]]]]}}|[{'typed_record_field',{'record_field',28,{'atom',28,'atime'}},{'type',28,'union',[{'atom',28,'undefined'}|[{'remote_type',28,[{'atom',28,'file'}|[{'atom',28,'date_time'}|[[]]]]}|[{'type',28,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',32,{'atom',32,'mtime'}},{'type',32,'union',[{'atom',32,'undefined'}|[{'remote_type',32,[{'atom',32,'file'}|[{'atom',32,'date_time'}|[[]]]]}|[{'type',32,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',34,{'atom',34,'ctime'}},{'type',34,'union',[{'atom',34,'undefined'}|[{'remote_type',34,[{'atom',34,'file'}|[{'atom',34,'date_time'}|[[]]]]}|[{'type',34,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',40,{'atom',40,'mode'}},{'type',40,'union',[{'atom',40,'undefined'}|[{'type',40,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',43,{'atom',43,'links'}},{'type',43,'union',[{'atom',43,'undefined'}|[{'type',43,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',46,{'atom',46,'major_device'}},{'type',46,'union',[{'atom',46,'undefined'}|[{'type',46,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',52,{'atom',52,'minor_device'}},{'type',52,'union',[{'atom',52,'undefined'}|[{'type',52,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',53,{'atom',53,'inode'}},{'type',53,'union',[{'atom',53,'undefined'}|[{'type',53,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',54,{'atom',54,'uid'}},{'type',54,'union',[{'atom',54,'undefined'}|[{'type',54,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',55,{'atom',55,'gid'}},{'type',55,'union',[{'atom',55,'undefined'}|[{'type',55,'non_neg_integer',[]}]]}}]]]]]]]]]]]]],[]}],
		%% Line 58
		'type' =
		    %% Line 58
		    [{{'record','file_descriptor'},[{'typed_record_field',{'record_field',59,{'atom',59,'module'}},{'type',59,'union',[{'atom',59,'undefined'}|[{'type',59,'module',[]}]]}}|[{'typed_record_field',{'record_field',60,{'atom',60,'data'}},{'type',60,'union',[{'atom',60,'undefined'}|[{'type',60,'term',[]}]]}}]],[]}],
		%% Line 163
		'type' =
		    %% Line 163
		    [{'prim_file_name',{'type',163,'union',[{'type',163,'string',[]}|[{'remote_type',163,[{'atom',163,'unicode'}|[{'atom',163,'unicode_binary'}|[[]]]]}]]},[]}],
		%% Line 164
		'type' =
		    %% Line 164
		    [{'prim_file_name_error',{'type',164,'union',[{'atom',164,'error'}|[{'atom',164,'ignore'}|[{'atom',164,'warning'}]]]},[]}],
		%% Line 166
		'spec' =
		    %% Line 166
		    [{{'internal_name2native',1},[{'type',166,'fun',[{'type',166,'product',[{'type',166,'prim_file_name',[]}]}|[{'type',166,'binary',[]}]]}]}],
		%% Line 171
		'spec' =
		    %% Line 171
		    [{{'internal_native2name',1},[{'type',171,'fun',[{'type',171,'product',[{'type',171,'binary',[]}]}|[{'type',172,'union',[{'type',172,'prim_file_name',[]}|[{'type',172,'tuple',[{'atom',172,'error'}|[{'type',172,'prim_file_name_error',[]}]]}]]}]]}]}],
		%% Line 177
		'spec' =
		    %% Line 177
		    [{{'internal_normalize_utf8',1},[{'type',177,'fun',[{'type',177,'product',[{'remote_type',177,[{'atom',177,'unicode'}|[{'atom',177,'unicode_binary'}|[[]]]]}]}|[{'type',177,'string',[]}]]}]}],
		%% Line 182
		'spec' =
		    %% Line 182
		    [{{'is_translatable',1},[{'type',182,'fun',[{'type',182,'product',[{'type',182,'prim_file_name',[]}]}|[{'type',182,'boolean',[]}]]}]}]]
'internal_name2native'/1 =
    %% Line 168
    fun (_cor0) ->
	%% Line 169
	call 'erlang':'nif_error'
	    ('undefined')
'internal_native2name'/1 =
    %% Line 174
    fun (_cor0) ->
	%% Line 175
	call 'erlang':'nif_error'
	    ('undefined')
'internal_normalize_utf8'/1 =
    %% Line 179
    fun (_cor0) ->
	%% Line 180
	call 'erlang':'nif_error'
	    ('undefined')
'is_translatable'/1 =
    %% Line 184
    fun (_cor0) ->
	%% Line 185
	call 'erlang':'nif_error'
	    ('undefined')
'open'/3 =
    %% Line 199
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Port,File,ModeList>
	      when try
		    let <_cor3> =
			call 'erlang':'is_port'
			    (Port)
		    in  %% Line 200
			( let <_cor6> =
			      ( case <> of
				  ( <>
					when ( call 'erlang':'is_list'
						(File)
					    -| ['compiler_generated'] ) ->
					'true'
				    -| ['compiler_generated'] )
				  ( <> when 'true' ->
					( call 'erlang':'is_binary'
					      (File)
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			  in  let <_cor8> =
				  %% Line 201
				  ( call 'erlang':'is_list'
					(ModeList)
				    -| ['compiler_generated'] )
			      in  let <_cor9> =
				      ( call 'erlang':'and'
					    (( _cor6
					       -| ['compiler_generated'] ), _cor8)
					-| ['compiler_generated'] )
				  in  ( call 'erlang':'and'
					    (_cor3, _cor9)
					-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 202
	      case apply 'open_mode'/1
		       (ModeList) of
		%% Line 203
		<{Mode,_X_Portopts,_X_Setopts}> when 'true' ->
		    %% Line 204
		    apply 'open_int'/4
			(Port, File, Mode, [])
		%% Line 205
		<Reason> when 'true' ->
		    %% Line 206
		    {'error',Reason}
	      end
	  %% Line 208
	  <_cor14,_cor15,_cor16> when 'true' ->
	      %% Line 209
	      {'error','badarg'}
	end
'open'/2 =
    %% Line 212
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <File,ModeList>
	      when try
		    ( let <_cor4> =
			  ( case <> of
			      ( <>
				    when ( call 'erlang':'is_list'
					    (File)
					-| ['compiler_generated'] ) ->
				    'true'
				-| ['compiler_generated'] )
			      ( <> when 'true' ->
				    ( call 'erlang':'is_binary'
					  (File)
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
		      in  let <_cor6> =
			      %% Line 213
			      ( call 'erlang':'is_list'
				    (ModeList)
				-| ['compiler_generated'] )
			  in  ( call 'erlang':'and'
				    (( _cor4
				       -| ['compiler_generated'] ), _cor6)
				-| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 214
	      case apply 'open_mode'/1
		       (ModeList) of
		%% Line 215
		<{Mode,Portopts,Setopts}> when 'true' ->
		    %% Line 216
		    apply 'open_int'/4
			({[101|[102|[105|[108|[101]]]]],Portopts}, File, Mode, Setopts)
		%% Line 217
		<Reason> when 'true' ->
		    %% Line 218
		    {'error',Reason}
	      end
	  %% Line 220
	  <_cor10,_cor11> when 'true' ->
	      %% Line 221
	      {'error','badarg'}
	end
'open'/1 =
    %% Line 225
    fun (_cor0) ->
	case _cor0 of
	  <Portopts>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      %% Line 226
	      apply 'drv_open'/2
		  ([101|[102|[105|[108|[101]]]]], ['binary'|Portopts])
	  %% Line 227
	  <_cor2> when 'true' ->
	      %% Line 228
	      {'error','badarg'}
	end
'open_int'/4 =
    %% Line 230
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{Driver,Portopts},File,Mode,Setopts> when 'true' ->
	      %% Line 231
	      case apply 'drv_open'/2
		       (Driver, Portopts) of
		%% Line 232
		<{'ok',Port}> when 'true' ->
		    %% Line 233
		    apply 'open_int'/4
			(Port, File, Mode, Setopts)
		%% Line 234
		<Error = {'error',_cor13}> when 'true' ->
		    %% Line 235
		    Error
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 237
	  <Port,File,Mode,Setopts> when 'true' ->
	      let <M> =
		  %% Line 238
		  call 'erlang':'band'
		      (Mode, 127)
	      in  let <_cor6> =
		      %% Line 239
		      #{#<1>(8,1,'integer',['unsigned'|['big']]),
			#<M>(32,1,'integer',['unsigned'|['big']])}#
		  in  let <_cor7> =
			  %% Line 239
			  apply 'pathname'/1
			      (File)
		      in  %% Line 239
			  case apply 'drv_command'/2
				   (Port, [_cor6|[_cor7|[]]]) of
			    %% Line 240
			    <{'ok',Number}> when 'true' ->
				%% Line 241
				apply 'open_int_setopts'/3
				    (Port, Number, Setopts)
			    %% Line 242
			    <Error> when 'true' ->
				do  %% Line 243
				    apply 'drv_close'/1
					(Port)
				    %% Line 244
				    Error
			  end
	end
'open_int_setopts'/3 =
    %% Line 247
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Port,Number,[]> when 'true' ->
	      %% Line 248
	      {'ok',{'file_descriptor','prim_file',{Port,Number}}}
	  %% Line 249
	  <Port,Number,[Cmd|Tail]> when 'true' ->
	      %% Line 250
	      case apply 'drv_command'/2
		       (Port, Cmd) of
		%% Line 251
		<'ok'> when 'true' ->
		    %% Line 252
		    apply 'open_int_setopts'/3
			(Port, Number, Tail)
		%% Line 253
		<Error> when 'true' ->
		    do  %% Line 254
			apply 'drv_close'/1
			    (Port)
			%% Line 255
			Error
	      end
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'open_int_setopts',3}}] )
	    -| ['compiler_generated'] )
	end
'close'/1 =
    %% Line 262
    fun (_cor0) ->
	case _cor0 of
	  <{'file_descriptor','prim_file',{Port,_cor3}}> when 'true' ->
	      %% Line 263
	      case apply 'drv_command'/2
		       (Port, #{#<23>(8,1,'integer',['unsigned'|['big']])}#) of
		%% Line 264
		<'ok'> when 'true' ->
		    %% Line 265
		    apply 'drv_close'/1
			(Port)
		%% Line 266
		<Error> when 'true' ->
		    %% Line 267
		    Error
	      end
	  %% Line 270
	  <Port>
	      when call 'erlang':'is_port'
		    (_cor0) ->
	      %% Line 271
	      apply 'drv_close'/1
		  (Port)
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'close',1}}] )
	    -| ['compiler_generated'] )
	end
'advise'/4 =
    %% Line 278
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{'file_descriptor','prim_file',{Port,_cor15}},%% Line 279
							 Offset,%% Line 279
								Length,%% Line 279
								       Advise> when 'true' ->
	      %% Line 280
	      case Advise of
		%% Line 281
		<'normal'> when 'true' ->
		    let <Cmd> =
			%% Line 282
			#{#<31>(8,1,'integer',['unsigned'|['big']]),
			  #<Offset>(64,1,'integer',['signed'|['big']]),
			  #<Length>(64,1,'integer',['signed'|['big']]),
			  #<0>(32,1,'integer',['signed'|['big']])}#
		    in  %% Line 283
			apply 'drv_command'/2
			    (Port, Cmd)
		%% Line 284
		<'random'> when 'true' ->
		    let <Cmd> =
			%% Line 285
			#{#<31>(8,1,'integer',['unsigned'|['big']]),
			  #<Offset>(64,1,'integer',['signed'|['big']]),
			  #<Length>(64,1,'integer',['signed'|['big']]),
			  #<1>(32,1,'integer',['signed'|['big']])}#
		    in  %% Line 286
			apply 'drv_command'/2
			    (Port, Cmd)
		%% Line 287
		<'sequential'> when 'true' ->
		    let <Cmd> =
			%% Line 288
			#{#<31>(8,1,'integer',['unsigned'|['big']]),
			  #<Offset>(64,1,'integer',['signed'|['big']]),
			  #<Length>(64,1,'integer',['signed'|['big']]),
			  #<2>(32,1,'integer',['signed'|['big']])}#
		    in  %% Line 289
			apply 'drv_command'/2
			    (Port, Cmd)
		%% Line 290
		<'will_need'> when 'true' ->
		    let <Cmd> =
			%% Line 291
			#{#<31>(8,1,'integer',['unsigned'|['big']]),
			  #<Offset>(64,1,'integer',['signed'|['big']]),
			  #<Length>(64,1,'integer',['signed'|['big']]),
			  #<3>(32,1,'integer',['signed'|['big']])}#
		    in  %% Line 292
			apply 'drv_command'/2
			    (Port, Cmd)
		%% Line 293
		<'dont_need'> when 'true' ->
		    let <Cmd> =
			%% Line 294
			#{#<31>(8,1,'integer',['unsigned'|['big']]),
			  #<Offset>(64,1,'integer',['signed'|['big']]),
			  #<Length>(64,1,'integer',['signed'|['big']]),
			  #<4>(32,1,'integer',['signed'|['big']])}#
		    in  %% Line 295
			apply 'drv_command'/2
			    (Port, Cmd)
		%% Line 296
		<'no_reuse'> when 'true' ->
		    let <Cmd> =
			%% Line 297
			#{#<31>(8,1,'integer',['unsigned'|['big']]),
			  #<Offset>(64,1,'integer',['signed'|['big']]),
			  #<Length>(64,1,'integer',['signed'|['big']]),
			  #<5>(32,1,'integer',['signed'|['big']])}#
		    in  %% Line 298
			apply 'drv_command'/2
			    (Port, Cmd)
		%% Line 299
		<_cor16> when 'true' ->
		    %% Line 300
		    {'error','einval'}
	      end
	  ( <_cor14,_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12,_cor11})
		  -| [{'function_name',{'advise',4}}] )
	    -| ['compiler_generated'] )
	end
'allocate'/3 =
    %% Line 304
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'file_descriptor','prim_file',{Port,_cor7}},Offset,Length> when 'true' ->
	      let <Cmd> =
		  %% Line 305
		  #{#<33>(8,1,'integer',['unsigned'|['big']]),
		    #<Offset>(64,1,'integer',['signed'|['big']]),
		    #<Length>(64,1,'integer',['signed'|['big']])}#
	      in  %% Line 306
		  apply 'drv_command'/2
		      (Port, Cmd)
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'allocate',3}}] )
	    -| ['compiler_generated'] )
	end
'write'/2 =
    %% Line 309
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'file_descriptor','prim_file',{Port,_cor6}},Bytes> when 'true' ->
	      let <_cor2> =
		  %% Line 310
		  call 'erlang':'dt_prepend_vm_tag_data'
		      (Bytes)
	      in  %% Line 310
		  case apply 'drv_command_nt'/3
			   (Port, [4|[_cor2|[]]], 'undefined') of
		    %% Line 311
		    <{'ok',_X_Size}> when 'true' ->
			%% Line 312
			'ok'
		    %% Line 313
		    <Error> when 'true' ->
			%% Line 314
			Error
		  end
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'write',2}}] )
	    -| ['compiler_generated'] )
	end
'pwrite'/2 =
    %% Line 318
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'file_descriptor','prim_file',{Port,_cor4}},L>
	      when %% Line 319
		call 'erlang':'is_list'
		    (L) ->
	      %% Line 320
	      apply 'pwrite_int'/5
		  (Port, L, 0, [], [])
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'pwrite',2}}] )
	    -| ['compiler_generated'] )
	end
'pwrite_int'/5 =
    %% Line 322
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <_cor21,[],0,[],[]> when 'true' ->
	      %% Line 323
	      'ok'
	  %% Line 324
	  <Port,[],N,Spec,Data> when 'true' ->
	      let <_cor5> =
		  %% Line 325
		  #{#<N>(32,1,'integer',['unsigned'|['big']])}#
	      in  let <_cor6> =
		      %% Line 325
		      call 'erlang':'dt_prepend_vm_tag_data'
			  (_cor5)
		  in  let <_cor7> =
			  %% Line 325
			  apply 'reverse'/1
			      (Spec)
		      in  let <Header> =
			      %% Line 325
			      call 'erlang':'list_to_binary'
				  ([24|[_cor6|_cor7]])
			  in  let <_cor9> =
				  %% Line 326
				  apply 'reverse'/1
				      (Data)
			      in  %% Line 326
				  case apply 'drv_command_nt'/3
					   (Port, [Header|_cor9], 'undefined') of
				    %% Line 327
				    <{'ok',_X_Size}> when 'true' ->
					%% Line 328
					'ok'
				    %% Line 329
				    <Error> when 'true' ->
					%% Line 330
					Error
				  end
	  %% Line 332
	  <Port,[{Offs,Bytes}|T],N,Spec,Data>
	      when %% Line 333
		call 'erlang':'is_integer'
		    (Offs) ->
	      %% Line 334
	      case <> of
		%% Line 335
		<>
		    when let <_cor13> =
			  call 'erlang':'=<'
			      (-9223372036854775808, Offs)
		      in  let <_cor15> =
			      call 'erlang':'<'
				  (Offs, 9223372036854775808)
			  in  call 'erlang':'and'
				  (_cor13, _cor15) ->
		    %% Line 336
		    apply 'pwrite_int'/7
			(Port, T, N, Spec, Data, Offs, Bytes)
		%% Line 337
		<> when 'true' ->
		    %% Line 338
		    {'error','einval'}
	      end
	  %% Line 340
	  <_cor22,[_cor23|_cor24],_X_N,_X_Spec,_X_Data> when 'true' ->
	      %% Line 341
	      {'error','badarg'}
	  ( <_cor20,_cor19,_cor18,_cor17,_cor16> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor20,_cor19,_cor18,_cor17,_cor16})
		  -| [{'function_name',{'pwrite_int',5}}] )
	    -| ['compiler_generated'] )
	end
'pwrite_int'/7 =
    %% Line 343
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Port,T,N,Spec,Data,Offs,Bin>
	      when %% Line 344
		call 'erlang':'is_binary'
		    (Bin) ->
	      let <Size> =
		  %% Line 345
		  call 'erlang':'byte_size'
		      (Bin)
	      in  let <_cor9> =
		      %% Line 346
		      call 'erlang':'+'
			  (N, 1)
		  in  let <_cor8> =
			  %% Line 347
			  #{#<Offs>(64,1,'integer',['signed'|['big']]),
			    #<Size>(64,1,'integer',['unsigned'|['big']])}#
		      in  %% Line 346
			  apply 'pwrite_int'/5
			      (Port, T, _cor9, %% Line 347
					       [_cor8|Spec], %% Line 348
							     [Bin|Data])
	  %% Line 349
	  <Port,T,N,Spec,Data,Offs,Bytes> when 'true' ->
	      %% Line 350
	      try
		  call 'erlang':'list_to_binary'
		      (Bytes)
	      of <_cor10> ->
		  %% Line 352
		  apply 'pwrite_int'/7
		      (Port, T, N, Spec, Data, Offs, _cor10)
	      catch <_cor14,_cor13,_cor12> ->
		  case <_cor14,_cor13,_cor12> of
		    %% Line 354
		    <'error',Reason,_cor22> when 'true' ->
			%% Line 355
			{'error',Reason}
		    ( <_cor14,_cor13,_cor12> when 'true' ->
			  primop 'raise'
			      (_cor12, _cor13)
		      -| ['compiler_generated'] )
		  end
	end
'pwrite'/3 =
    %% Line 361
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'file_descriptor','prim_file',{Port,_cor12}},Offs,Bytes>
	      when %% Line 362
		call 'erlang':'is_integer'
		    (Offs) ->
	      %% Line 363
	      case <> of
		%% Line 364
		<>
		    when let <_cor5> =
			  call 'erlang':'=<'
			      (-9223372036854775808, Offs)
		      in  let <_cor7> =
			      call 'erlang':'<'
				  (Offs, 9223372036854775808)
			  in  call 'erlang':'and'
				  (_cor5, _cor7) ->
		    %% Line 365
		    case apply 'pwrite_int'/7
			     (Port, [], 0, [], [], Offs, Bytes) of
		      %% Line 366
		      <{'error',{_cor13,Reason}}> when 'true' ->
			  %% Line 367
			  {'error',Reason}
		      %% Line 368
		      <Result> when 'true' ->
			  %% Line 369
			  Result
		    end
		%% Line 371
		<> when 'true' ->
		    %% Line 372
		    {'error','einval'}
	      end
	  %% Line 374
	  <{'file_descriptor','prim_file',_cor14},_cor15,_cor16> when 'true' ->
	      %% Line 375
	      {'error','badarg'}
	  ( <_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9})
		  -| [{'function_name',{'pwrite',3}}] )
	    -| ['compiler_generated'] )
	end
'datasync'/1 =
    %% Line 379
    fun (_cor0) ->
	case _cor0 of
	  <{'file_descriptor','prim_file',{Port,_cor2}}> when 'true' ->
	      %% Line 380
	      apply 'drv_command'/2
		  (Port, [30])
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'datasync',1}}] )
	    -| ['compiler_generated'] )
	end
'sync'/1 =
    %% Line 383
    fun (_cor0) ->
	case _cor0 of
	  <{'file_descriptor','prim_file',{Port,_cor2}}> when 'true' ->
	      %% Line 384
	      apply 'drv_command'/2
		  (Port, [9])
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'sync',1}}] )
	    -| ['compiler_generated'] )
	end
'read_line'/1 =
    %% Line 387
    fun (_cor0) ->
	case _cor0 of
	  <{'file_descriptor','prim_file',{Port,_cor4}}> when 'true' ->
	      %% Line 388
	      case apply 'drv_command'/2
		       (Port, #{#<29>(8,1,'integer',['unsigned'|['big']])}#) of
		%% Line 389
		<{'ok',{0,_X_Data}}> when 'true' ->
		    %% Line 390
		    'eof'
		%% Line 391
		<{'ok',{_X_Size,Data}}> when 'true' ->
		    %% Line 392
		    {'ok',Data}
		%% Line 393
		<{'error','enomem'}> when 'true' ->
		    do  %% Line 394
			call 'erlang':'garbage_collect'
			    ()
			%% Line 395
			case apply 'drv_command'/2
				 (Port, #{#<29>(8,1,'integer',['unsigned'|['big']])}#) of
			  %% Line 396
			  <{'ok',{0,_X_Data}}> when 'true' ->
			      %% Line 397
			      'eof'
			  %% Line 398
			  <{'ok',{_X_Size,Data}}> when 'true' ->
			      %% Line 399
			      {'ok',Data}
			  %% Line 400
			  <Other> when 'true' ->
			      %% Line 401
			      Other
			end
		%% Line 403
		<Error> when 'true' ->
		    %% Line 404
		    Error
	      end
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'read_line',1}}] )
	    -| ['compiler_generated'] )
	end
'read'/2 =
    %% Line 408
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'file_descriptor','prim_file',{Port,_cor11}},Size>
	      when let <_cor2> =
		    %% Line 409
		    call 'erlang':'is_integer'
			(Size)
		in  let <_cor3> =
			%% Line 409
			call 'erlang':'=<'
			    (0, Size)
		    in  %% Line 409
			call 'erlang':'and'
			    (_cor2, _cor3) ->
	      %% Line 410
	      case <> of
		%% Line 411
		<>
		    when call 'erlang':'<'
			  (Size,
			   9223372036854775808) ->
		    let <_cor5> =
			%% Line 412
			#{#<2>(8,1,'integer',['unsigned'|['big']]),
			  #<Size>(64,1,'integer',['unsigned'|['big']])}#
		    in  %% Line 412
			case apply 'drv_command'/2
				 (Port, _cor5) of
			  %% Line 413
			  <{'ok',{0,_X_Data}}>
			      when call 'erlang':'=/='
				    (Size,
				     0) ->
			      %% Line 414
			      'eof'
			  %% Line 415
			  <{'ok',{_X_Size,Data}}> when 'true' ->
			      %% Line 416
			      {'ok',Data}
			  %% Line 417
			  <{'error','enomem'}> when 'true' ->
			      do  %% Line 420
				  call 'erlang':'garbage_collect'
				      ()
				  let <_cor6> =
				      %% Line 421
				      #{#<2>(8,1,'integer',['unsigned'|['big']]),
					#<Size>(64,1,'integer',['unsigned'|['big']])}#
				  in  %% Line 421
				      case apply 'drv_command'/2
					       (Port, _cor6) of
					%% Line 422
					<{'ok',{0,_X_Data}}>
					    when call 'erlang':'=/='
						  (Size,
						   0) ->
					    %% Line 423
					    'eof'
					%% Line 424
					<{'ok',{_X_Size,Data}}> when 'true' ->
					    %% Line 425
					    {'ok',Data}
					%% Line 426
					<Other> when 'true' ->
					    %% Line 427
					    Other
				      end
			  %% Line 429
			  <Error> when 'true' ->
			      %% Line 430
			      Error
			end
		%% Line 432
		<> when 'true' ->
		    %% Line 433
		    {'error','einval'}
	      end
	  ( <_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9})
		  -| [{'function_name',{'read',2}}] )
	    -| ['compiler_generated'] )
	end
'pread'/2 =
    %% Line 437
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'file_descriptor','prim_file',{Port,_cor4}},L>
	      when %% Line 438
		call 'erlang':'is_list'
		    (L) ->
	      %% Line 439
	      apply 'pread_int'/4
		  (Port, L, 0, [])
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'pread',2}}] )
	    -| ['compiler_generated'] )
	end
'pread_int'/4 =
    %% Line 441
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <_cor25,[],0,[]> when 'true' ->
	      %% Line 442
	      {'ok',[]}
	  %% Line 443
	  <Port,[],N,Spec> when 'true' ->
	      let <_cor4> =
		  %% Line 444
		  #{#<0>(32,1,'integer',['unsigned'|['big']]),
		    #<N>(32,1,'integer',['unsigned'|['big']])}#
	      in  let <_cor5> =
		      %% Line 444
		      call 'erlang':'dt_prepend_vm_tag_data'
			  (_cor4)
		  in  let <_cor6> =
			  %% Line 444
			  apply 'reverse'/1
			      (Spec)
		      in  %% Line 444
			  apply 'drv_command_nt'/3
			      (Port, [25|[_cor5|_cor6]], 'undefined')
	  %% Line 445
	  <Port,[{Offs,Size}|T],N,Spec>
	      when %% Line 446
		try
		    let <_cor7> =
			call 'erlang':'is_integer'
			    (Offs)
		    in  let <_cor8> =
			    call 'erlang':'is_integer'
				(Size)
			in  let <_cor9> =
				call 'erlang':'=<'
				    (0, Size)
			    in  let <_cor10> =
				    call 'erlang':'and'
					(_cor8, _cor9)
				in  call 'erlang':'and'
					(_cor7, _cor10)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 447
	      case <> of
		%% Line 448
		<>
		    when try
			  let <_cor13> =
			      call 'erlang':'=<'
				  (-9223372036854775808, Offs)
			  in  let <_cor15> =
				  call 'erlang':'<'
				      (Offs, 9223372036854775808)
			      in  let <_cor17> =
				      %% Line 449
				      call 'erlang':'<'
					  (Size, 9223372036854775808)
				  in  let <_cor18> =
					  call 'erlang':'and'
					      (_cor15, _cor17)
				      in  call 'erlang':'and'
					      (_cor13, _cor18)
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false' ->
		    let <_cor20> =
			%% Line 450
			call 'erlang':'+'
			    (N, 1)
		    in  let <_cor19> =
			    %% Line 450
			    #{#<Offs>(64,1,'integer',['signed'|['big']]),
			      #<Size>(64,1,'integer',['unsigned'|['big']])}#
			in  %% Line 450
			    apply 'pread_int'/4
				(Port, T, _cor20, [_cor19|Spec])
		%% Line 451
		<> when 'true' ->
		    %% Line 452
		    {'error','einval'}
	      end
	  %% Line 454
	  <_cor26,[_cor27|_cor28],_X_N,_X_Spec> when 'true' ->
	      %% Line 455
	      {'error','badarg'}
	  ( <_cor24,_cor23,_cor22,_cor21> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor24,_cor23,_cor22,_cor21})
		  -| [{'function_name',{'pread_int',4}}] )
	    -| ['compiler_generated'] )
	end
'pread'/3 =
    %% Line 460
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'file_descriptor','prim_file',{Port,_cor21}},Offs,Size>
	      when %% Line 461
		try
		    let <_cor3> =
			call 'erlang':'is_integer'
			    (Offs)
		    in  let <_cor4> =
			    call 'erlang':'is_integer'
				(Size)
			in  let <_cor5> =
				call 'erlang':'=<'
				    (0, Size)
			    in  let <_cor6> =
				    call 'erlang':'and'
					(_cor4, _cor5)
				in  call 'erlang':'and'
					(_cor3, _cor6)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 462
	      case <> of
		%% Line 463
		<>
		    when try
			  let <_cor9> =
			      call 'erlang':'=<'
				  (-9223372036854775808, Offs)
			  in  let <_cor11> =
				  call 'erlang':'<'
				      (Offs, 9223372036854775808)
			      in  let <_cor13> =
				      %% Line 464
				      call 'erlang':'<'
					  (Size, 9223372036854775808)
				  in  let <_cor14> =
					  call 'erlang':'and'
					      (_cor11, _cor13)
				      in  call 'erlang':'and'
					      (_cor9, _cor14)
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false' ->
		    let <_cor15> =
			%% Line 466
			#{#<0>(32,1,'integer',['unsigned'|['big']]),
			  #<1>(32,1,'integer',['unsigned'|['big']]),
			  #<%% Line 467
			    Offs>(%% Line 467
				  64,1,'integer',['signed'|['big']]),
			  #<%% Line 467
			    Size>(%% Line 467
				  64,1,'integer',['unsigned'|['big']])}#
		    in  let <_cor16> =
			    %% Line 466
			    call 'erlang':'dt_prepend_vm_tag_data'
				(_cor15)
			in  %% Line 465
			    case apply 'drv_command_nt'/3
				     (Port, %% Line 466
					    [25|[_cor16|%% Line 467
							[]]], %% Line 467
							      'undefined') of
			      %% Line 468
			      <{'ok',['eof']}> when 'true' ->
				  %% Line 469
				  'eof'
			      %% Line 470
			      <{'ok',[Data|[]]}> when 'true' ->
				  %% Line 471
				  {'ok',Data}
			      %% Line 472
			      <Error> when 'true' ->
				  %% Line 473
				  Error
			    end
		%% Line 475
		<> when 'true' ->
		    %% Line 476
		    {'error','einval'}
	      end
	  %% Line 478
	  <{'file_descriptor','prim_file',{_cor22,_cor23}},_cor24,_cor25> when 'true' ->
	      %% Line 479
	      {'error','badarg'}
	  ( <_cor20,_cor19,_cor18> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor20,_cor19,_cor18})
		  -| [{'function_name',{'pread',3}}] )
	    -| ['compiler_generated'] )
	end
'position'/2 =
    %% Line 484
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'file_descriptor','prim_file',{Port,_cor11}},At> when 'true' ->
	      %% Line 485
	      case apply 'lseek_position'/1
		       (At) of
		%% Line 486
		<{Offs,Whence}>
		    when let <_cor4> =
			  %% Line 487
			  call 'erlang':'=<'
			      (-9223372036854775808, Offs)
		      in  let <_cor6> =
			      %% Line 487
			      call 'erlang':'<'
				  (Offs, 9223372036854775808)
			  in  %% Line 487
			      call 'erlang':'and'
				  (_cor4, _cor6) ->
		    let <_cor7> =
			%% Line 488
			#{#<3>(8,1,'integer',['unsigned'|['big']]),
			  #<Offs>(64,1,'integer',['signed'|['big']]),
			  #<Whence>(32,1,'integer',['unsigned'|['big']])}#
		    in  %% Line 488
			apply 'drv_command'/2
			    (Port, _cor7)
		%% Line 489
		<{_cor12,_cor13}> when 'true' ->
		    %% Line 490
		    {'error','einval'}
		%% Line 491
		<Reason> when 'true' ->
		    %% Line 492
		    {'error',Reason}
	      end
	  ( <_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9})
		  -| [{'function_name',{'position',2}}] )
	    -| ['compiler_generated'] )
	end
'truncate'/1 =
    %% Line 496
    fun (_cor0) ->
	case _cor0 of
	  <{'file_descriptor','prim_file',{Port,_cor2}}> when 'true' ->
	      %% Line 497
	      apply 'drv_command'/2
		  (Port, #{#<14>(8,1,'integer',['unsigned'|['big']])}#)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'truncate',1}}] )
	    -| ['compiler_generated'] )
	end
'copy'/3 =
    %% Line 502
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Source = {'file_descriptor','prim_file',_cor10},Dest = %% Line 503
								  {'file_descriptor','prim_file',_cor11},%% Line 504
													 Length>
	      when let <_cor5> =
		    let <_cor3> =
			%% Line 505
			call 'erlang':'is_integer'
			    (Length)
		    in  let <_cor4> =
			    %% Line 505
			    call 'erlang':'>='
				(Length, 0)
			in  %% Line 505
			    call 'erlang':'and'
				(_cor3, _cor4)
		in  let <_cor6> =
			%% Line 506
			call 'erlang':'is_atom'
			    (Length)
		    in  %% Line 505
			call 'erlang':'or'
			    (_cor5, _cor6) ->
	      %% Line 508
	      call 'file':'copy_opened'
		  (Source, Dest, Length)
	  ( <_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7})
		  -| [{'function_name',{'copy',3}}] )
	    -| ['compiler_generated'] )
	end
'ipread_s32bu_p32bu'/3 =
    %% Line 512
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Handle = {'file_descriptor','prim_file',%% Line 513
						   {_cor21,_cor22}},%% Line 514
								    Offs,%% Line 515
									 Infinity>
	      when %% Line 515
		call 'erlang':'is_atom'
		    (Infinity) ->
	      %% Line 516
	      apply 'ipread_s32bu_p32bu'/3
		  (Handle, Offs, 2147483647)
	  %% Line 517
	  <{'file_descriptor','prim_file',{Port,_cor23}},%% Line 518
							 Offs,%% Line 519
							      MaxSize>
	      when let <_cor5> =
		    %% Line 520
		    call 'erlang':'is_integer'
			(Offs)
		in  let <_cor6> =
			%% Line 520
			call 'erlang':'is_integer'
			    (MaxSize)
		    in  %% Line 520
			call 'erlang':'and'
			    (_cor5, _cor6) ->
	      %% Line 521
	      case <> of
		%% Line 522
		<>
		    when try
			  let <_cor9> =
			      call 'erlang':'=<'
				  (-9223372036854775808, Offs)
			  in  let <_cor11> =
				  call 'erlang':'<'
				      (Offs, 9223372036854775808)
			      in  let <_cor12> =
				      %% Line 523
				      call 'erlang':'=<'
					  (0, MaxSize)
				  in  let <_cor14> =
					  %% Line 523
					  call 'erlang':'<'
					      (MaxSize, 2147483648)
				      in  let <_cor15> =
					      call 'erlang':'and'
						  (_cor12, _cor14)
					  in  let <_cor16> =
						  call 'erlang':'and'
						      (_cor11, _cor15)
					      in  call 'erlang':'and'
						      (_cor9, _cor16)
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false' ->
		    let <_cor17> =
			%% Line 524
			#{#<27>(8,1,'integer',['unsigned'|['big']]),
			  #<0>(8,1,'integer',['unsigned'|['big']]),
			  #<%% Line 525
			    Offs>(%% Line 525
				  64,1,'integer',['unsigned'|['big']]),
			  #<%% Line 525
			    MaxSize>(%% Line 525
				     32,1,'integer',['unsigned'|['big']])}#
		    in  %% Line 524
			apply 'drv_command'/2
			    (Port, _cor17)
		%% Line 526
		<> when 'true' ->
		    %% Line 527
		    {'error','einval'}
	      end
	  %% Line 529
	  <{'file_descriptor','prim_file',{_cor24,_cor25}},%% Line 530
							   _X_Offs,%% Line 531
								   _X_MaxSize> when 'true' ->
	      %% Line 532
	      {'error','badarg'}
	  ( <_cor20,_cor19,_cor18> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor20,_cor19,_cor18})
		  -| [{'function_name',{'ipread_s32bu_p32bu',3}}] )
	    -| ['compiler_generated'] )
	end
'read_file'/1 =
    %% Line 537
    fun (_cor0) ->
	case _cor0 of
	  <File>
	      when try
		    ( case <> of
			( <>
			      when call 'erlang':'is_list'
				    (_cor0) ->
			      'true'
			  -| ['compiler_generated'] )
			( <> when 'true' ->
			      call 'erlang':'is_binary'
				  (_cor0)
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 538
	      case apply 'drv_open'/2
		       ([101|[102|[105|[108|[101]]]]], ['binary']) of
		%% Line 539
		<{'ok',Port}> when 'true' ->
		    let <Result> =
			%% Line 540
			apply 'read_file'/2
			    (Port, File)
		    in  do  %% Line 541
			    apply 'close'/1
				(Port)
			    %% Line 542
			    Result
		%% Line 543
		<Error = {'error',_cor7}> when 'true' ->
		    %% Line 544
		    Error
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 546
	  <_cor8> when 'true' ->
	      %% Line 547
	      {'error','badarg'}
	end
'read_file'/2 =
    %% Line 550
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Port,File>
	      when try
		    let <_cor2> =
			call 'erlang':'is_port'
			    (Port)
		    in  %% Line 551
			( let <_cor5> =
			      ( case <> of
				  ( <>
					when ( call 'erlang':'is_list'
						(File)
					    -| ['compiler_generated'] ) ->
					'true'
				    -| ['compiler_generated'] )
				  ( <> when 'true' ->
					( call 'erlang':'is_binary'
					      (File)
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			  in  ( call 'erlang':'and'
				    (_cor2, ( _cor5
					      -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor7> =
		  %% Line 552
		  apply 'pathname'/1
		      (File)
	      in  let <Cmd> =
		      %% Line 552
		      [15|_cor7]
		  in  %% Line 553
		      case apply 'drv_command'/2
			       (Port, Cmd) of
			%% Line 554
			<{'error','enomem'}> when 'true' ->
			    do  %% Line 559
				call 'erlang':'garbage_collect'
				    ()
				%% Line 560
				apply 'drv_command'/2
				    (Port, Cmd)
			%% Line 561
			<Result> when 'true' ->
			    %% Line 562
			    Result
		      end
	  %% Line 564
	  <_cor12,_cor13> when 'true' ->
	      %% Line 565
	      {'error','badarg'}
	end
'write_file'/2 =
    %% Line 570
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <File,Bin>
	      when try
		    ( case <> of
			( <>
			      when call 'erlang':'is_list'
				    (File) ->
			      'true'
			  -| ['compiler_generated'] )
			( <> when 'true' ->
			      call 'erlang':'is_binary'
				  (File)
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 571
	      case apply 'open'/2
		       (File, ['binary'|['write']]) of
		%% Line 572
		<{'ok',Handle}> when 'true' ->
		    let <Result> =
			%% Line 573
			apply 'write'/2
			    (Handle, Bin)
		    in  do  %% Line 574
			    apply 'close'/1
				(Handle)
			    %% Line 575
			    Result
		%% Line 576
		<Error> when 'true' ->
		    %% Line 577
		    Error
	      end
	  %% Line 579
	  <_cor9,_cor10> when 'true' ->
	      %% Line 580
	      {'error','badarg'}
	end
'sendfile'/8 =
    %% Line 586
    fun (_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <{'file_descriptor','prim_file',{Port,_cor30}},%% Line 587
							 Dest,%% Line 587
							      Offset,%% Line 587
								     Bytes,%% Line 587
									   _X_ChunkSize,%% Line 587
											Headers,%% Line 587
												Trailers,%% Line 588
													 Flags> when 'true' ->
	      %% Line 589
	      case call 'erlang':'port_get_data'
		       (Dest) of
		%% Line 590
		<Data>
		    when let <_cor8> =
			  call 'erlang':'=:='
			      (Data, 'inet_tcp')
		      in  let <_cor9> =
			      call 'erlang':'=:='
				  (Data, 'inet6_tcp')
			  in  call 'erlang':'or'
				  (_cor8, _cor9) ->
		    %% Line 591
		    case call 'inet':'lock_socket'
			     (Dest, 'true') of
		      <'ok'> when 'true' ->
			  %% Line 592
			  case call 'prim_inet':'getfd'
				   (Dest) of
			    <{'ok',DestFD}> when 'true' ->
				let <IntFlags> =
				    %% Line 593
				    apply 'translate_sendfile_flags'/1
					(Flags)
				in  %% Line 594
				    letrec
					'after$^0'/0 =
					    fun () ->
						let <_cor31> =
						    %% Line 602
						    call 'inet':'lock_socket'
							(Dest, 'false')
						in  %% Line 602
						    case _cor31 of
						      <'ok'> when 'true' ->
							  ( _cor31
							    -| ['compiler_generated'] )
						      ( <_cor16> when 'true' ->
							    primop 'match_fail'
								({'badmatch',_cor16})
							-| ['compiler_generated'] )
						    end
				    in  try
					    let <_cor14> =
						%% Line 598
						call 'erlang':'iolist_size'
						    (Headers)
					    in  let <_cor13> =
						    %% Line 599
						    call 'erlang':'iolist_size'
							(Trailers)
						in  let <_cor15> =
							#{#<32>(8,1,'integer',['unsigned'|['big']]),
							  #<DestFD>(32,1,'integer',['unsigned'|['big']]),
							  #<%% Line 595
							    IntFlags>(%% Line 595
								      8,1,'integer',['unsigned'|['big']]),
							  #<%% Line 596
							    Offset>(%% Line 596
								    64,1,'integer',['unsigned'|['big']]),
							  #<%% Line 597
							    Bytes>(%% Line 597
								   64,1,'integer',['unsigned'|['big']]),
							  #<_cor14>(%% Line 598
								    32,1,'integer',['unsigned'|['big']]),
							  #<_cor13>(%% Line 599
								    32,1,'integer',['unsigned'|['big']])}#
						    in  apply 'drv_command'/2
							    (Port, [_cor15|%% Line 600
									   [Headers|[Trailers|[]]]])
					of <_cor17> ->
					    do  ( apply 'after$^0'/0
						      ()
						  -| ['compiler_generated'] )
						_cor17
					catch <_cor20,_cor19,_cor18> ->
					    do  ( apply 'after$^0'/0
						      ()
						  -| ['compiler_generated'] )
						primop 'raise'
						    (_cor18, _cor19)
			    ( <_cor11> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor11})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor10> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor10})
			-| ['compiler_generated'] )
		    end
		%% Line 604
		<_X_Else> when 'true' ->
		    %% Line 605
		    {'error','badarg'}
	      end
	  ( <_cor29,_cor28,_cor27,_cor26,_cor25,_cor24,_cor23,_cor22> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor29,_cor28,_cor27,_cor26,_cor25,_cor24,_cor23,_cor22})
		  -| [{'function_name',{'sendfile',8}}] )
	    -| ['compiler_generated'] )
	end
'translate_sendfile_flags'/1 =
    %% Line 608
    fun (_cor0) ->
	case _cor0 of
	  <[{'use_threads','true'}|T]> when 'true' ->
	      let <_cor1> =
		  %% Line 609
		  apply 'translate_sendfile_flags'/1
		      (T)
	      in  %% Line 609
		  call 'erlang':'bor'
		      (1, _cor1)
	  %% Line 610
	  <[_cor3|T]> when 'true' ->
	      %% Line 611
	      apply 'translate_sendfile_flags'/1
		  (T)
	  %% Line 612
	  <[]> when 'true' ->
	      %% Line 613
	      0
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'translate_sendfile_flags',1}}] )
	    -| ['compiler_generated'] )
	end
'start'/0 =
    %% Line 625
    fun () ->
	%% Line 626
	apply 'drv_open'/2
	    ([101|[102|[105|[108|[101]]]]], ['binary'])
'stop'/1 =
    %% Line 628
    fun (_cor0) ->
	case _cor0 of
	  <Port>
	      when call 'erlang':'is_port'
		    (_cor0) ->
	      %% Line 629
	      try
		  call 'erlang':'port_close'
		      (Port)
	      of <_cor1> ->
		  %% Line 631
		  'ok'
	      catch <_cor5,_cor4,_cor3> ->
		  %% Line 634
		  'ok'
	  ( <_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6})
		  -| [{'function_name',{'stop',1}}] )
	    -| ['compiler_generated'] )
	end
'get_cwd'/0 =
    %% Line 647
    fun () ->
	%% Line 648
	apply 'get_cwd_int'/1
	    (0)
'get_cwd'/1 =
    %% Line 650
    fun (_cor0) ->
	case _cor0 of
	  <Port>
	      when call 'erlang':'is_port'
		    (_cor0) ->
	      %% Line 651
	      apply 'get_cwd_int'/2
		  (Port, 0)
	  %% Line 652
	  <[]> when 'true' ->
	      %% Line 653
	      apply 'get_cwd_int'/1
		  (0)
	  %% Line 654
	  <[Letter|[58|_cor10]]>
	      when let <_cor1> =
		    call 'erlang':'=<'
			(97, Letter)
		in  let <_cor2> =
			call 'erlang':'=<'
			    (Letter, 122)
		    in  call 'erlang':'and'
			    (_cor1, _cor2) ->
	      let <_cor3> =
		  %% Line 655
		  call 'erlang':'-'
		      (Letter, 97)
	      in  let <_cor4> =
		      %% Line 655
		      call 'erlang':'+'
			  (_cor3, 1)
		  in  %% Line 655
		      apply 'get_cwd_int'/1
			  (_cor4)
	  %% Line 656
	  <[Letter|[58|_cor11]]>
	      when let <_cor5> =
		    call 'erlang':'=<'
			(65, Letter)
		in  let <_cor6> =
			call 'erlang':'=<'
			    (Letter, 90)
		    in  call 'erlang':'and'
			    (_cor5, _cor6) ->
	      let <_cor7> =
		  %% Line 657
		  call 'erlang':'-'
		      (Letter, 65)
	      in  let <_cor8> =
		      %% Line 657
		      call 'erlang':'+'
			  (_cor7, 1)
		  in  %% Line 657
		      apply 'get_cwd_int'/1
			  (_cor8)
	  %% Line 658
	  <[_cor12|_cor13]> when 'true' ->
	      %% Line 659
	      {'error','einval'}
	  %% Line 660
	  <_cor14> when 'true' ->
	      %% Line 661
	      {'error','badarg'}
	end
'get_cwd'/2 =
    %% Line 663
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Port,[]>
	      when call 'erlang':'is_port'
		    (Port) ->
	      %% Line 664
	      apply 'get_cwd_int'/2
		  (Port, 0)
	  %% Line 665
	  <Port,[Letter|[58|_cor16]]>
	      when %% Line 666
		try
		    let <_cor2> =
			call 'erlang':'is_port'
			    (Port)
		    in  let <_cor3> =
			    call 'erlang':'=<'
				(97, Letter)
			in  let <_cor4> =
				call 'erlang':'=<'
				    (Letter, 122)
			    in  let <_cor5> =
				    call 'erlang':'and'
					(_cor3, _cor4)
				in  call 'erlang':'and'
					(_cor2, _cor5)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor6> =
		  %% Line 667
		  call 'erlang':'-'
		      (Letter, 97)
	      in  let <_cor7> =
		      %% Line 667
		      call 'erlang':'+'
			  (_cor6, 1)
		  in  %% Line 667
		      apply 'get_cwd_int'/2
			  (Port, _cor7)
	  %% Line 668
	  <Port,[Letter|[58|_cor17]]>
	      when %% Line 669
		try
		    let <_cor8> =
			call 'erlang':'is_port'
			    (Port)
		    in  let <_cor9> =
			    call 'erlang':'=<'
				(65, Letter)
			in  let <_cor10> =
				call 'erlang':'=<'
				    (Letter, 90)
			    in  let <_cor11> =
				    call 'erlang':'and'
					(_cor9, _cor10)
				in  call 'erlang':'and'
					(_cor8, _cor11)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor12> =
		  %% Line 670
		  call 'erlang':'-'
		      (Letter, 65)
	      in  let <_cor13> =
		      %% Line 670
		      call 'erlang':'+'
			  (_cor12, 1)
		  in  %% Line 670
		      apply 'get_cwd_int'/2
			  (Port, _cor13)
	  %% Line 671
	  <Port,[_cor18|_cor19]>
	      when call 'erlang':'is_port'
		    (Port) ->
	      %% Line 672
	      {'error','einval'}
	  %% Line 673
	  <_cor20,_cor21> when 'true' ->
	      %% Line 674
	      {'error','badarg'}
	end
'get_cwd_int'/1 =
    %% Line 676
    fun (_cor0) ->
	%% Line 677
	apply 'get_cwd_int'/2
	    ({[101|[102|[105|[108|[101]]]]],['binary']}, _cor0)
'get_cwd_int'/2 =
    %% Line 679
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 680
	    #{#<6>(8,1,'integer',['unsigned'|['big']]),
	      #<_cor0>(8,1,'integer',['unsigned'|['big']])}#
	in  %% Line 680
	    apply 'drv_command'/3
		(_cor1, _cor2, %% Line 681
			       ( 'handle_fname_response'/1
				 -| [{'id',{0,0,'-get_cwd_int/2-fun-0-'}}] ))
'set_cwd'/1 =
    %% Line 687
    fun (_cor0) ->
	%% Line 688
	apply 'set_cwd_int'/2
	    ({[101|[102|[105|[108|[101]]]]],['binary']}, _cor0)
'set_cwd'/2 =
    %% Line 690
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Port,Dir>
	      when call 'erlang':'is_port'
		    (Port) ->
	      %% Line 691
	      apply 'set_cwd_int'/2
		  (Port, Dir)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'set_cwd',2}}] )
	    -| ['compiler_generated'] )
	end
'set_cwd_int'/2 =
    %% Line 693
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Port,Dir>
	      when call 'erlang':'is_binary'
		    (Dir) ->
	      %% Line 694
	      case call 'prim_file':'is_translatable'
		       (Dir) of
		%% Line 695
		<'false'> when 'true' ->
		    %% Line 696
		    {'error','no_translation'}
		%% Line 697
		<'true'> when 'true' ->
		    let <_cor2> =
			%% Line 698
			apply 'pathname'/1
			    (Dir)
		    in  %% Line 698
			apply 'drv_command'/2
			    (Port, [8|[_cor2|[]]])
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 700
	  <Port,Dir>
	      when call 'erlang':'is_list'
		    (Dir) ->
	      let <_cor4> =
		  %% Line 701
		  apply 'pathname'/1
		      (Dir)
	      in  %% Line 701
		  apply 'drv_command'/2
		      (Port, [8|[_cor4|[]]])
	  %% Line 702
	  <_cor7,_cor8> when 'true' ->
	      %% Line 703
	      {'error','badarg'}
	end
'delete'/1 =
    %% Line 709
    fun (_cor0) ->
	%% Line 710
	apply 'delete_int'/2
	    ({[101|[102|[105|[108|[101]]]]],['binary']}, _cor0)
'delete'/2 =
    %% Line 712
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Port,File>
	      when call 'erlang':'is_port'
		    (Port) ->
	      %% Line 713
	      apply 'delete_int'/2
		  (Port, File)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'delete',2}}] )
	    -| ['compiler_generated'] )
	end
'delete_int'/2 =
    %% Line 715
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 716
	    apply 'pathname'/1
		(_cor0)
	in  %% Line 716
	    apply 'drv_command'/2
		(_cor1, [11|[_cor2|[]]])
'rename'/2 =
    %% Line 722
    fun (_cor1,_cor0) ->
	%% Line 723
	apply 'rename_int'/3
	    ({[101|[102|[105|[108|[101]]]]],['binary']}, _cor1, _cor0)
'rename'/3 =
    %% Line 725
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Port,From,To>
	      when call 'erlang':'is_port'
		    (Port) ->
	      %% Line 726
	      apply 'rename_int'/3
		  (Port, From, To)
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'rename',3}}] )
	    -| ['compiler_generated'] )
	end
'rename_int'/3 =
    %% Line 728
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 729
	    apply 'pathname'/1
		(_cor1)
	in  let <_cor4> =
		%% Line 729
		apply 'pathname'/1
		    (_cor0)
	    in  %% Line 729
		apply 'drv_command'/2
		    (_cor2, [12|[_cor3|[_cor4|[]]]])
'make_dir'/1 =
    %% Line 735
    fun (_cor0) ->
	%% Line 736
	apply 'make_dir_int'/2
	    ({[101|[102|[105|[108|[101]]]]],['binary']}, _cor0)
'make_dir'/2 =
    %% Line 738
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Port,Dir>
	      when call 'erlang':'is_port'
		    (Port) ->
	      %% Line 739
	      apply 'make_dir_int'/2
		  (Port, Dir)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'make_dir',2}}] )
	    -| ['compiler_generated'] )
	end
'make_dir_int'/2 =
    %% Line 741
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 742
	    apply 'pathname'/1
		(_cor0)
	in  %% Line 742
	    apply 'drv_command'/2
		(_cor1, [10|[_cor2|[]]])
'del_dir'/1 =
    %% Line 748
    fun (_cor0) ->
	%% Line 749
	apply 'del_dir_int'/2
	    ({[101|[102|[105|[108|[101]]]]],['binary']}, _cor0)
'del_dir'/2 =
    %% Line 751
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Port,Dir>
	      when call 'erlang':'is_port'
		    (Port) ->
	      %% Line 752
	      apply 'del_dir_int'/2
		  (Port, Dir)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'del_dir',2}}] )
	    -| ['compiler_generated'] )
	end
'del_dir_int'/2 =
    %% Line 754
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 755
	    apply 'pathname'/1
		(_cor0)
	in  %% Line 755
	    apply 'drv_command'/2
		(_cor1, [13|[_cor2|[]]])
'read_file_info'/1 =
    %% Line 761
    fun (_cor0) ->
	%% Line 762
	apply 'read_file_info_int'/3
	    ({[101|[102|[105|[108|[101]]]]],['binary']}, _cor0, 'local')
'read_file_info'/2 =
    %% Line 764
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Port,File>
	      when call 'erlang':'is_port'
		    (Port) ->
	      %% Line 765
	      apply 'read_file_info_int'/3
		  (Port, File, 'local')
	  %% Line 766
	  <File,Opts> when 'true' ->
	      let <_cor2> =
		  %% Line 767
		  apply 'plgv'/3
		      ('time', Opts, 'local')
	      in  %% Line 767
		  apply 'read_file_info_int'/3
		      ({[101|[102|[105|[108|[101]]]]],['binary']}, File, _cor2)
	end
'read_file_info'/3 =
    %% Line 769
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Port,File,Opts>
	      when call 'erlang':'is_port'
		    (Port) ->
	      let <_cor3> =
		  %% Line 770
		  apply 'plgv'/3
		      ('time', Opts, 'local')
	      in  %% Line 770
		  apply 'read_file_info_int'/3
		      (Port, File, _cor3)
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'read_file_info',3}}] )
	    -| ['compiler_generated'] )
	end
'read_file_info_int'/3 =
    %% Line 772
    fun (_cor2,_cor1,_cor0) ->
	%% Line 773
	try
	    let <_cor3> =
		%% Line 774
		apply 'pathname'/1
		    (_cor1)
	    in  %% Line 774
		case apply 'drv_command'/2
			 (_cor2, [5|[_cor3|[]]]) of
		  %% Line 775
		  <{'ok',FI}> when 'true' ->
		      %% Line 776
		      ( case FI of
			  ( <( {'file_info',_cor26,_cor27,_cor28,_cor29,_cor30,_rec4,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37}
			       -| ['compiler_generated'] )> when 'true' ->
				let <_rec0> =
				    apply 'from_seconds'/2
					(_rec4, _cor0)
				in  let <_rec1> =
					%% Line 777
					apply 'from_seconds'/2
					    (_cor30, _cor0)
				    in  let <_rec2> =
					    %% Line 778
					    apply 'from_seconds'/2
						(_cor29, _cor0)
					in  let <_cor14> =
						call 'erlang':'setelement'
						    (7, FI, _rec0)
					    in  let <_cor15> =
						    %% Line 777
						    call 'erlang':'setelement'
							(6, _cor14, _rec1)
						in  let <_cor17> =
							%% Line 778
							call 'erlang':'setelement'
							    (5, _cor15, _rec2)
						    in  {'ok',_cor17}
			    -| ['compiler_generated'] )
			  ( <_cor38> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','file_info'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		  %% Line 780
		  <Error> when 'true' ->
		      Error
		end
	of <_cor19> ->
	    _cor19
	catch <_cor22,_cor21,_cor20> ->
	    case <_cor22,_cor21,_cor20> of
	      %% Line 783
	      <'error',_cor79,_cor80> when 'true' ->
		  {'error','badarg'}
	      ( <_cor22,_cor21,_cor20> when 'true' ->
		    primop 'raise'
			(_cor20, _cor21)
		-| ['compiler_generated'] )
	    end
'altname'/1 =
    %% Line 789
    fun (_cor0) ->
	%% Line 790
	apply 'altname_int'/2
	    ({[101|[102|[105|[108|[101]]]]],['binary']}, _cor0)
'altname'/2 =
    %% Line 792
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Port,File>
	      when call 'erlang':'is_port'
		    (Port) ->
	      %% Line 793
	      apply 'altname_int'/2
		  (Port, File)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'altname',2}}] )
	    -| ['compiler_generated'] )
	end
'altname_int'/2 =
    %% Line 795
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 796
	    apply 'pathname'/1
		(_cor0)
	in  %% Line 796
	    apply 'drv_command'/3
		(_cor1, [28|[_cor2|[]]], %% Line 797
					 ( 'handle_fname_response'/1
					   -| [{'id',{0,0,'-altname_int/2-fun-0-'}}] ))
'write_file_info'/2 =
    %% Line 801
    fun (_cor1,_cor0) ->
	%% Line 802
	apply 'write_file_info_int'/4
	    ({[101|[102|[105|[108|[101]]]]],['binary']}, _cor1, _cor0, 'local')
'write_file_info'/3 =
    %% Line 804
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Port,File,Info>
	      when call 'erlang':'is_port'
		    (Port) ->
	      %% Line 805
	      apply 'write_file_info_int'/4
		  (Port, File, Info, 'local')
	  %% Line 806
	  <File,Info,Opts> when 'true' ->
	      let <_cor3> =
		  %% Line 807
		  apply 'plgv'/3
		      ('time', Opts, 'local')
	      in  %% Line 807
		  apply 'write_file_info_int'/4
		      ({[101|[102|[105|[108|[101]]]]],['binary']}, File, Info, _cor3)
	end
'write_file_info'/4 =
    %% Line 809
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Port,File,Info,Opts>
	      when call 'erlang':'is_port'
		    (Port) ->
	      let <_cor4> =
		  %% Line 810
		  apply 'plgv'/3
		      ('time', Opts, 'local')
	      in  %% Line 810
		  apply 'write_file_info_int'/4
		      (Port, File, Info, _cor4)
	  ( <_cor8,_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6,_cor5})
		  -| [{'function_name',{'write_file_info',4}}] )
	    -| ['compiler_generated'] )
	end
'write_file_info_int'/4 =
    %% Line 812
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Port,File,%% Line 813
		     {'file_info',_cor25,_cor26,_cor27,%% Line 816
						       Atime0,%% Line 817
							      Mtime0,%% Line 818
								     Ctime0,Mode,_cor28,_cor29,_cor30,_cor31,%% Line 814
													     Uid,%% Line 815
														 Gid},%% Line 819
														      TimeType> when 'true' ->
	      %% Line 826
	      try
		  let <Atime> =
		      %% Line 827
		      apply 'file_info_validate_atime'/2
			  (Atime0, TimeType)
		  in  let <Mtime> =
			  %% Line 828
			  apply 'file_info_validate_mtime'/2
			      (Mtime0, Atime)
		      in  let <Ctime> =
			      %% Line 829
			      apply 'file_info_validate_ctime'/2
				  (Ctime0, Mtime)
			  in  let <_cor7> =
				  %% Line 832
				  apply 'int_to_int32bytes'/1
				      (Mode)
			      in  let <_cor8> =
				      %% Line 833
				      apply 'int_to_int32bytes'/1
					  (Uid)
				  in  let <_cor9> =
					  %% Line 834
					  apply 'int_to_int32bytes'/1
					      (Gid)
				      in  let <_cor10> =
					      %% Line 835
					      apply 'to_seconds'/2
						  (Atime, TimeType)
					  in  let <_cor11> =
						  %% Line 835
						  apply 'int_to_int64bytes'/1
						      (_cor10)
					      in  let <_cor12> =
						      %% Line 836
						      apply 'to_seconds'/2
							  (Mtime, TimeType)
						  in  let <_cor13> =
							  %% Line 836
							  apply 'int_to_int64bytes'/1
							      (_cor12)
						      in  let <_cor14> =
							      %% Line 837
							      apply 'to_seconds'/2
								  (Ctime, TimeType)
							  in  let <_cor15> =
								  %% Line 837
								  apply 'int_to_int64bytes'/1
								      (_cor14)
							      in  let <_cor16> =
								      %% Line 838
								      apply 'pathname'/1
									  (File)
								  in  %% Line 831
								      apply 'drv_command'/2
									  (Port, [16|%% Line 832
										     [_cor7|%% Line 833
											    [_cor8|%% Line 834
												   [_cor9|%% Line 835
													  [_cor11|%% Line 836
														  [_cor13|%% Line 837
															  [_cor15|%% Line 838
																  [_cor16|[]]]]]]]]])
	      of <_cor17> ->
		  _cor17
	      catch <_cor20,_cor19,_cor18> ->
		  case <_cor20,_cor19,_cor18> of
		    %% Line 840
		    <'error',_cor32,_cor33> when 'true' ->
			{'error','badarg'}
		    ( <_cor20,_cor19,_cor18> when 'true' ->
			  primop 'raise'
			      (_cor18, _cor19)
		      -| ['compiler_generated'] )
		  end
	  ( <_cor24,_cor23,_cor22,_cor21> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor24,_cor23,_cor22,_cor21})
		  -| [{'function_name',{'write_file_info_int',4}}] )
	    -| ['compiler_generated'] )
	end
'file_info_validate_atime'/2 =
    %% Line 844
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Atime,_cor5>
	      when call 'erlang':'=/='
		    (Atime,
		     'undefined') ->
	      Atime
	  %% Line 845
	  <'undefined','local'> when 'true' ->
	      call 'erlang':'localtime'
		  ()
	  %% Line 846
	  <'undefined','universal'> when 'true' ->
	      call 'erlang':'universaltime'
		  ()
	  %% Line 847
	  <'undefined','posix'> when 'true' ->
	      let <_cor2> =
		  call 'erlang':'universaltime'
		      ()
	      in  call 'erlang':'universaltime_to_posixtime'
		      (_cor2)
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'file_info_validate_atime',2}}] )
	    -| ['compiler_generated'] )
	end
'file_info_validate_mtime'/2 =
    %% Line 849
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'undefined',Atime> when 'true' ->
	      Atime
	  %% Line 850
	  <Mtime,_cor4> when 'true' ->
	      Mtime
	end
'file_info_validate_ctime'/2 =
    %% Line 852
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'undefined',Mtime> when 'true' ->
	      Mtime
	  %% Line 853
	  <Ctime,_cor4> when 'true' ->
	      Ctime
	end
'make_link'/2 =
    %% Line 857
    fun (_cor1,_cor0) ->
	%% Line 858
	apply 'make_link_int'/3
	    ({[101|[102|[105|[108|[101]]]]],['binary']}, _cor1, _cor0)
'make_link'/3 =
    %% Line 860
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Port,Old,New>
	      when call 'erlang':'is_port'
		    (Port) ->
	      %% Line 861
	      apply 'make_link_int'/3
		  (Port, Old, New)
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'make_link',3}}] )
	    -| ['compiler_generated'] )
	end
'make_link_int'/3 =
    %% Line 863
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 864
	    apply 'pathname'/1
		(_cor1)
	in  let <_cor4> =
		%% Line 864
		apply 'pathname'/1
		    (_cor0)
	    in  %% Line 864
		apply 'drv_command'/2
		    (_cor2, [21|[_cor3|[_cor4|[]]]])
'make_symlink'/2 =
    %% Line 870
    fun (_cor1,_cor0) ->
	%% Line 871
	apply 'make_symlink_int'/3
	    ({[101|[102|[105|[108|[101]]]]],['binary']}, _cor1, _cor0)
'make_symlink'/3 =
    %% Line 873
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Port,Old,New>
	      when call 'erlang':'is_port'
		    (Port) ->
	      %% Line 874
	      apply 'make_symlink_int'/3
		  (Port, Old, New)
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'make_symlink',3}}] )
	    -| ['compiler_generated'] )
	end
'make_symlink_int'/3 =
    %% Line 876
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 877
	    apply 'pathname'/1
		(_cor1)
	in  let <_cor4> =
		%% Line 877
		apply 'pathname'/1
		    (_cor0)
	    in  %% Line 877
		apply 'drv_command'/2
		    (_cor2, [22|[_cor3|[_cor4|[]]]])
'read_link'/1 =
    %% Line 883
    fun (_cor0) ->
	%% Line 884
	apply 'read_link_int'/2
	    ({[101|[102|[105|[108|[101]]]]],['binary']}, _cor0)
'read_link'/2 =
    %% Line 886
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Port,Link>
	      when call 'erlang':'is_port'
		    (Port) ->
	      %% Line 887
	      apply 'read_link_int'/2
		  (Port, Link)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'read_link',2}}] )
	    -| ['compiler_generated'] )
	end
'read_link_int'/2 =
    %% Line 889
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 890
	    apply 'pathname'/1
		(_cor0)
	in  %% Line 890
	    apply 'drv_command'/3
		(_cor1, [20|[_cor2|[]]], %% Line 891
					 ( 'handle_fname_response'/1
					   -| [{'id',{0,0,'-read_link_int/2-fun-0-'}}] ))
'read_link_all'/1 =
    %% Line 895
    fun (_cor0) ->
	%% Line 896
	apply 'read_link_all_int'/2
	    ({[101|[102|[105|[108|[101]]]]],['binary']}, _cor0)
'read_link_all'/2 =
    %% Line 898
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Port,Link>
	      when call 'erlang':'is_port'
		    (Port) ->
	      %% Line 899
	      apply 'read_link_all_int'/2
		  (Port, Link)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'read_link_all',2}}] )
	    -| ['compiler_generated'] )
	end
'read_link_all_int'/2 =
    %% Line 901
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 902
	    apply 'pathname'/1
		(_cor0)
	in  %% Line 902
	    apply 'drv_command'/3
		(_cor1, [20|[_cor2|[]]], %% Line 903
					 ( 'handle_fname_response_all'/1
					   -| [{'id',{0,0,'-read_link_all_int/2-fun-0-'}}] ))
'read_link_info'/1 =
    %% Line 909
    fun (_cor0) ->
	%% Line 910
	apply 'read_link_info_int'/3
	    ({[101|[102|[105|[108|[101]]]]],['binary']}, _cor0, 'local')
'read_link_info'/2 =
    %% Line 912
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Port,Link>
	      when call 'erlang':'is_port'
		    (Port) ->
	      %% Line 913
	      apply 'read_link_info_int'/3
		  (Port, Link, 'local')
	  %% Line 915
	  <Link,Opts> when 'true' ->
	      let <_cor2> =
		  %% Line 916
		  apply 'plgv'/3
		      ('time', Opts, 'local')
	      in  %% Line 916
		  apply 'read_link_info_int'/3
		      ({[101|[102|[105|[108|[101]]]]],['binary']}, Link, _cor2)
	end
'read_link_info'/3 =
    %% Line 918
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Port,Link,Opts>
	      when call 'erlang':'is_port'
		    (Port) ->
	      let <_cor3> =
		  %% Line 919
		  apply 'plgv'/3
		      ('time', Opts, 'local')
	      in  %% Line 919
		  apply 'read_link_info_int'/3
		      (Port, Link, _cor3)
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'read_link_info',3}}] )
	    -| ['compiler_generated'] )
	end
'read_link_info_int'/3 =
    %% Line 922
    fun (_cor2,_cor1,_cor0) ->
	%% Line 923
	try
	    let <_cor3> =
		%% Line 924
		apply 'pathname'/1
		    (_cor1)
	    in  %% Line 924
		case apply 'drv_command'/2
			 (_cor2, [19|[_cor3|[]]]) of
		  %% Line 925
		  <{'ok',FI}> when 'true' ->
		      %% Line 926
		      ( case FI of
			  ( <( {'file_info',_cor26,_cor27,_cor28,_cor29,_cor30,_rec11,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37}
			       -| ['compiler_generated'] )> when 'true' ->
				let <_rec7> =
				    apply 'from_seconds'/2
					(_rec11, _cor0)
				in  let <_rec8> =
					%% Line 927
					apply 'from_seconds'/2
					    (_cor30, _cor0)
				    in  let <_rec9> =
					    %% Line 928
					    apply 'from_seconds'/2
						(_cor29, _cor0)
					in  let <_cor14> =
						call 'erlang':'setelement'
						    (7, FI, _rec7)
					    in  let <_cor15> =
						    %% Line 927
						    call 'erlang':'setelement'
							(6, _cor14, _rec8)
						in  let <_cor17> =
							%% Line 928
							call 'erlang':'setelement'
							    (5, _cor15, _rec9)
						    in  {'ok',_cor17}
			    -| ['compiler_generated'] )
			  ( <_cor38> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','file_info'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		  %% Line 930
		  <Error> when 'true' ->
		      Error
		end
	of <_cor19> ->
	    _cor19
	catch <_cor22,_cor21,_cor20> ->
	    case <_cor22,_cor21,_cor20> of
	      %% Line 933
	      <'error',_cor79,_cor80> when 'true' ->
		  {'error','badarg'}
	      ( <_cor22,_cor21,_cor20> when 'true' ->
		    primop 'raise'
			(_cor20, _cor21)
		-| ['compiler_generated'] )
	    end
'list_dir'/1 =
    %% Line 938
    fun (_cor0) ->
	%% Line 939
	apply 'list_dir_int'/2
	    ({[101|[102|[105|[108|[101]]]]],['binary']}, _cor0)
'list_dir'/2 =
    %% Line 941
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Port,Dir>
	      when call 'erlang':'is_port'
		    (Port) ->
	      %% Line 942
	      apply 'list_dir_int'/2
		  (Port, Dir)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'list_dir',2}}] )
	    -| ['compiler_generated'] )
	end
'list_dir_int'/2 =
    %% Line 944
    fun (_cor1,_cor0) ->
	let <_cor11> =
	    %% Line 945
	    apply 'pathname'/1
		(_cor0)
	in  let <_cor10> =
		%% Line 946
		( fun (_cor8) ->
		      %% Line 947
		      case apply 'list_dir_response'/2
			       (_cor8, []) of
			%% Line 948
			<{'ok',RawNames}> when 'true' ->
			    %% Line 949
			    try
				let <_cor2> =
				    %% Line 950
				    apply 'list_dir_convert'/1
					(RawNames)
				in  %% Line 950
				    {'ok',_cor2}
			    of <_cor3> ->
				_cor3
			    catch <_cor6,_cor5,_cor4> ->
				case <_cor6,_cor5,_cor4> of
				  %% Line 952
				  <'throw',Reason,_cor14> when 'true' ->
				      %% Line 953
				      Reason
				  ( <_cor6,_cor5,_cor4> when 'true' ->
					primop 'raise'
					    (_cor4, _cor5)
				    -| ['compiler_generated'] )
				end
			%% Line 955
			<Error> when 'true' ->
			    %% Line 956
			    Error
		      end
		  -| [{'id',{0,0,'-list_dir_int/2-fun-0-'}}] )
	    in  %% Line 945
		apply 'drv_command'/3
		    (_cor1, [7|[_cor11|[]]], _cor10)
'list_dir_all'/1 =
    %% Line 960
    fun (_cor0) ->
	%% Line 961
	apply 'list_dir_all_int'/2
	    ({[101|[102|[105|[108|[101]]]]],['binary']}, _cor0)
'list_dir_all'/2 =
    %% Line 963
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Port,Dir>
	      when call 'erlang':'is_port'
		    (Port) ->
	      %% Line 964
	      apply 'list_dir_all_int'/2
		  (Port, Dir)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'list_dir_all',2}}] )
	    -| ['compiler_generated'] )
	end
'list_dir_all_int'/2 =
    %% Line 966
    fun (_cor1,_cor0) ->
	let <_cor7> =
	    %% Line 967
	    apply 'pathname'/1
		(_cor0)
	in  let <_cor6> =
		%% Line 968
		( fun (_cor4) ->
		      %% Line 969
		      case apply 'list_dir_response'/2
			       (_cor4, []) of
			%% Line 970
			<{'ok',RawNames}> when 'true' ->
			    let <_cor2> =
				%% Line 971
				apply 'list_dir_convert_all'/1
				    (RawNames)
			    in  %% Line 971
				{'ok',_cor2}
			%% Line 972
			<Error> when 'true' ->
			    %% Line 973
			    Error
		      end
		  -| [{'id',{0,0,'-list_dir_all_int/2-fun-0-'}}] )
	    in  %% Line 967
		apply 'drv_command'/3
		    (_cor1, [7|[_cor7|[]]], _cor6)
'list_dir_response'/2 =
    %% Line 977
    fun (_cor1,_cor0) ->
	%% Line 978
	case apply 'drv_get_response'/1
		 (_cor1) of
	  %% Line 979
	  <{'lfname',[]}> when 'true' ->
	      %% Line 980
	      {'ok',_cor0}
	  %% Line 981
	  <{'lfname',Names}> when 'true' ->
	      let <_cor5> =
		  %% Line 982
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor3) ->
				case ( _cor3
				       -| ['reuse_for_context'] ) of
				  <#{#<L>(16,1,'integer',['unsigned'|['big']]),
				     #<Name>(L,8,'binary',['unsigned'|['big']]),
				     #<_cor2>('all',1,'binary',['unsigned'|['big']])}#> when 'true' ->
				      let <_cor4> =
					  apply 'lc$^0'/1
					      (_cor2)
				      in  ( [Name|_cor4]
					    -| ['compiler_generated'] )
				  <#{#<_cor2>('all',1,'binary',['unsigned'|['big']])}#> when 'true' ->
				      _cor0
				  ( <_cor3> when 'true' ->
					do  primop 'bs_context_to_binary'
						(_cor3)
					    ( primop 'match_fail'
						  ({'function_clause',_cor3})
					      -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (Names)
		    -| ['list_comprehension'] )
	      in  %% Line 983
		  apply 'list_dir_response'/2
		      (_cor1, _cor5)
	  %% Line 984
	  <Error> when 'true' ->
	      %% Line 985
	      Error
	end
'list_dir_convert'/1 =
    %% Line 988
    fun (_cor0) ->
	case _cor0 of
	  <[Name|Names]> when 'true' ->
	      %% Line 992
	      case call 'prim_file':'internal_native2name'
		       (Name) of
		%% Line 993
		<{'error','warning'}> when 'true' ->
		    do  %% Line 994
			call 'error_logger':'warning_msg'
			    ([78|[111|[110|[45|[117|[110|[105|[99|[111|[100|[101|[32|[102|[105|[108|[101|[110|[97|[109|[101|[32|[126|[112|[32|[105|[103|[110|[111|[114|[101|[100|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 995
																										      [Name|[]])
			%% Line 996
			apply 'list_dir_convert'/1
			    (Names)
		%% Line 997
		<{'error','ignore'}> when 'true' ->
		    %% Line 998
		    apply 'list_dir_convert'/1
			(Names)
		%% Line 999
		<{'error','error'}> when 'true' ->
		    %% Line 1000
		    call 'erlang':'throw'
			({'error',{'no_translation',Name}})
		%% Line 1001
		<Converted>
		    when call 'erlang':'is_list'
			  (Converted) ->
		    let <_cor1> =
			%% Line 1002
			apply 'list_dir_convert'/1
			    (Names)
		    in  %% Line 1002
			[Converted|_cor1]
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1004
	  <[]> when 'true' ->
	      []
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'list_dir_convert',1}}] )
	    -| ['compiler_generated'] )
	end
'list_dir_convert_all'/1 =
    %% Line 1006
    fun (_cor0) ->
	case _cor0 of
	  <[Name|Names]> when 'true' ->
	      %% Line 1009
	      case call 'prim_file':'internal_native2name'
		       (Name) of
		%% Line 1010
		<{'error',_cor5}> when 'true' ->
		    let <_cor1> =
			%% Line 1011
			apply 'list_dir_convert_all'/1
			    (Names)
		    in  %% Line 1011
			[Name|_cor1]
		%% Line 1012
		<Converted>
		    when call 'erlang':'is_list'
			  (Converted) ->
		    let <_cor2> =
			%% Line 1013
			apply 'list_dir_convert_all'/1
			    (Names)
		    in  %% Line 1013
			[Converted|_cor2]
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1015
	  <[]> when 'true' ->
	      []
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'list_dir_convert_all',1}}] )
	    -| ['compiler_generated'] )
	end
'handle_fname_response'/1 =
    %% Line 1020
    fun (_cor0) ->
	%% Line 1021
	case apply 'drv_get_response'/1
		 (_cor0) of
	  %% Line 1022
	  <{'fname',Name}> when 'true' ->
	      %% Line 1023
	      case call 'prim_file':'internal_native2name'
		       (Name) of
		%% Line 1024
		<{'error','warning'}> when 'true' ->
		    do  %% Line 1025
			call 'error_logger':'warning_msg'
			    ([78|[111|[110|[45|[117|[110|[105|[99|[111|[100|[101|[32|[102|[105|[108|[101|[110|[97|[109|[101|[32|[126|[112|[32|[105|[103|[110|[111|[114|[101|[100|[32|[119|[104|[101|[110|[32|[114|[101|[97|[100|[105|[110|[103|[32|[108|[105|[110|[107|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 1027
																																							      [Name|[]])
			%% Line 1028
			{'error','einval'}
		%% Line 1029
		<{'error',_cor4}> when 'true' ->
		    %% Line 1030
		    {'error','einval'}
		%% Line 1031
		<Converted>
		    when call 'erlang':'is_list'
			  (Converted) ->
		    %% Line 1032
		    {'ok',Converted}
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1034
	  <Error> when 'true' ->
	      %% Line 1035
	      Error
	end
'handle_fname_response_all'/1 =
    %% Line 1038
    fun (_cor0) ->
	%% Line 1039
	case apply 'drv_get_response'/1
		 (_cor0) of
	  %% Line 1040
	  <{'fname',Name}> when 'true' ->
	      %% Line 1041
	      case call 'prim_file':'internal_native2name'
		       (Name) of
		%% Line 1042
		<{'error',_cor4}> when 'true' ->
		    %% Line 1043
		    {'ok',Name}
		%% Line 1044
		<Converted>
		    when call 'erlang':'is_list'
			  (Converted) ->
		    %% Line 1045
		    {'ok',Converted}
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1047
	  <Error> when 'true' ->
	      %% Line 1048
	      Error
	end
'drv_open'/2 =
    %% Line 1054
    fun (_cor1,_cor0) ->
	%% Line 1055
	try
	    call 'erlang':'open_port'
		({'spawn_driver',_cor1}, _cor0)
	of <_cor2> ->
	    %% Line 1057
	    {'ok',_cor2}
	catch <_cor6,_cor5,_cor4> ->
	    case <_cor6,_cor5,_cor4> of
	      %% Line 1059
	      <'error',Reason,_cor9> when 'true' ->
		  %% Line 1060
		  {'error',Reason}
	      ( <_cor6,_cor5,_cor4> when 'true' ->
		    primop 'raise'
			(_cor4, _cor5)
		-| ['compiler_generated'] )
	    end
'drv_close'/1 =
    %% Line 1067
    fun (_cor0) ->
	let <Save> =
	    %% Line 1068
	    call 'erlang':'dt_spread_tag'
		('false')
	in  %% Line 1069
	    letrec
		'after$^0'/0 =
		    fun () ->
			%% Line 1078
			call 'erlang':'dt_restore_tag'
			    (Save)
	    in  try
		    do  %% Line 1070
			try
			    call 'erlang':'port_close'
				(_cor0)
			of <_cor2> ->
			    _cor2
			catch <_cor5,_cor4,_cor3> ->
			    case <_cor5,_cor4,_cor3> of
			      <'error',_cor11,_cor12> when 'true' ->
				  'ok'
			      ( <_cor5,_cor4,_cor3> when 'true' ->
				    primop 'raise'
					(_cor3, _cor4)
				-| ['compiler_generated'] )
			    end
			%% Line 1071
			receive
			  %% Line 1072
			  <{'EXIT',_cor13,_X_Reason}>
			      when call 'erlang':'=:='
				    (_cor13,
				     _cor0) ->
			      %% Line 1073
			      'ok'
			after %% Line 1074
			      0 ->
			  %% Line 1075
			  'ok'
		of <_cor6> ->
		    do  ( apply 'after$^0'/0
			      ()
			  -| ['compiler_generated'] )
			_cor6
		catch <_cor9,_cor8,_cor7> ->
		    do  ( apply 'after$^0'/0
			      ()
			  -| ['compiler_generated'] )
			primop 'raise'
			    (_cor7, _cor8)
'drv_command'/2 =
    %% Line 1088
    fun (_cor1,_cor0) ->
	%% Line 1089
	apply 'drv_command'/3
	    (_cor1, _cor0, 'undefined')
'drv_command'/3 =
    %% Line 1091
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Port,Command,R>
	      when call 'erlang':'is_binary'
		    (Command) ->
	      %% Line 1092
	      apply 'drv_command'/4
		  (Port, Command, 'true', R)
	  %% Line 1093
	  <Port,Command,R> when 'true' ->
	      %% Line 1094
	      try
		  call 'erlang':'iolist_size'
		      (Command)
	      of <_cor3> ->
		  %% Line 1096
		  apply 'drv_command'/4
		      (Port, Command, 'true', R)
	      catch <_cor7,_cor6,_cor5> ->
		  case <_cor7,_cor6,_cor5> of
		    %% Line 1098
		    <'error',Reason,_cor12> when 'true' ->
			%% Line 1099
			{'error',Reason}
		    ( <_cor7,_cor6,_cor5> when 'true' ->
			  primop 'raise'
			      (_cor5, _cor6)
		      -| ['compiler_generated'] )
		  end
	end
'drv_command'/4 =
    %% Line 1102
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Port,Command,Validated,R>
	      when call 'erlang':'is_port'
		    (Port) ->
	      let <Save> =
		  %% Line 1103
		  call 'erlang':'dt_spread_tag'
		      ('false')
	      in  %% Line 1104
		  letrec
		      'after$^0'/0 =
			  fun () ->
			      %% Line 1124
			      call 'erlang':'dt_restore_tag'
				  (Save)
		  in  try
			  try
			      let <_cor5> =
				  call 'erlang':'dt_append_vm_tag_data'
				      (Command)
			      in  call 'erlang':'port_command'
				      (Port, _cor5)
			  of <_cor6> ->
			      case _cor6 of
				%% Line 1105
				<'true'> when 'true' ->
				    %% Line 1106
				    apply 'drv_get_response'/2
					(Port, R)
				( <_cor7> when 'true' ->
				      primop 'match_fail'
					  ({'try_clause',_cor7})
				  -| ['compiler_generated'] )
			      end
			  catch <_cor10,_cor9,_cor8> ->
			      case <_cor10,_cor9,_cor8> of
				%% Line 1111
				<'error','badarg',_cor26>
				    when call 'erlang':'=:='
					  (Validated,
					   'true') ->
				    %% Line 1112
				    {'error','einval'}
				%% Line 1113
				<'error','badarg',_cor27> when 'true' ->
				    %% Line 1114
				    try
					call 'erlang':'iolist_size'
					    (Command)
				    of <_cor11> ->
					%% Line 1116
					{'error','einval'}
				    catch <_cor15,_cor14,_cor13> ->
					case <_cor15,_cor14,_cor13> of
					  %% Line 1118
					  <'error',_cor29,_cor30> when 'true' ->
					      %% Line 1119
					      {'error','badarg'}
					  ( <_cor15,_cor14,_cor13> when 'true' ->
						primop 'raise'
						    (_cor13, _cor14)
					    -| ['compiler_generated'] )
					end
				%% Line 1121
				<'error',Reason,_cor31> when 'true' ->
				    %% Line 1122
				    {'error',Reason}
				( <_cor10,_cor9,_cor8> when 'true' ->
				      primop 'raise'
					  (_cor8, _cor9)
				  -| ['compiler_generated'] )
			      end
		      of <_cor16> ->
			  do  ( apply 'after$^0'/0
				    ()
				-| ['compiler_generated'] )
			      _cor16
		      catch <_cor19,_cor18,_cor17> ->
			  do  ( apply 'after$^0'/0
				    ()
				-| ['compiler_generated'] )
			      primop 'raise'
				  (_cor17, _cor18)
	  %% Line 1126
	  <{Driver,Portopts},Command,Validated,R> when 'true' ->
	      %% Line 1127
	      case apply 'drv_open'/2
		       (Driver, Portopts) of
		%% Line 1128
		<{'ok',Port}> when 'true' ->
		    let <Result> =
			%% Line 1129
			apply 'drv_command'/4
			    (Port, Command, Validated, R)
		    in  do  %% Line 1130
			    apply 'drv_close'/1
				(Port)
			    %% Line 1131
			    Result
		%% Line 1132
		<Error> when 'true' ->
		    %% Line 1133
		    Error
	      end
	  ( <_cor25,_cor24,_cor23,_cor22> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor25,_cor24,_cor23,_cor22})
		  -| [{'function_name',{'drv_command',4}}] )
	    -| ['compiler_generated'] )
	end
'drv_command_nt'/3 =
    %% Line 1135
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Port,Command,R>
	      when call 'erlang':'is_port'
		    (Port) ->
	      let <Save> =
		  %% Line 1136
		  call 'erlang':'dt_spread_tag'
		      ('false')
	      in  %% Line 1137
		  letrec
		      'after$^0'/0 =
			  fun () ->
			      %% Line 1152
			      call 'erlang':'dt_restore_tag'
				  (Save)
		  in  try
			  try
			      call 'erlang':'port_command'
				  (Port, Command)
			  of <_cor4> ->
			      case _cor4 of
				%% Line 1138
				<'true'> when 'true' ->
				    %% Line 1139
				    apply 'drv_get_response'/2
					(Port, R)
				( <_cor5> when 'true' ->
				      primop 'match_fail'
					  ({'try_clause',_cor5})
				  -| ['compiler_generated'] )
			      end
			  catch <_cor8,_cor7,_cor6> ->
			      case <_cor8,_cor7,_cor6> of
				%% Line 1141
				<'error','badarg',_cor21> when 'true' ->
				    %% Line 1142
				    try
					call 'erlang':'iolist_size'
					    (Command)
				    of <_cor9> ->
					%% Line 1144
					{'error','einval'}
				    catch <_cor13,_cor12,_cor11> ->
					case <_cor13,_cor12,_cor11> of
					  %% Line 1146
					  <'error',_cor23,_cor24> when 'true' ->
					      %% Line 1147
					      {'error','badarg'}
					  ( <_cor13,_cor12,_cor11> when 'true' ->
						primop 'raise'
						    (_cor11, _cor12)
					    -| ['compiler_generated'] )
					end
				%% Line 1149
				<'error',Reason,_cor25> when 'true' ->
				    %% Line 1150
				    {'error',Reason}
				( <_cor8,_cor7,_cor6> when 'true' ->
				      primop 'raise'
					  (_cor6, _cor7)
				  -| ['compiler_generated'] )
			      end
		      of <_cor14> ->
			  do  ( apply 'after$^0'/0
				    ()
				-| ['compiler_generated'] )
			      _cor14
		      catch <_cor17,_cor16,_cor15> ->
			  do  ( apply 'after$^0'/0
				    ()
				-| ['compiler_generated'] )
			      primop 'raise'
				  (_cor15, _cor16)
	  ( <_cor20,_cor19,_cor18> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor20,_cor19,_cor18})
		  -| [{'function_name',{'drv_command_nt',3}}] )
	    -| ['compiler_generated'] )
	end
'drv_get_response'/2 =
    %% Line 1160
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Port,'undefined'> when 'true' ->
	      %% Line 1161
	      apply 'drv_get_response'/1
		  (Port)
	  %% Line 1162
	  <Port,Fun>
	      when call 'erlang':'is_function'
		    (Fun,
		     1) ->
	      %% Line 1163
	      apply Fun
		  (Port)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'drv_get_response',2}}] )
	    -| ['compiler_generated'] )
	end
'drv_get_response'/1 =
    %% Line 1165
    fun (_cor0) ->
	do  %% Line 1166
	    call 'erlang':'bump_reductions'
		(100)
	    %% Line 1167
	    receive
	      %% Line 1168
	      <{_cor7,{'data',Data = [Response|Rest]}}>
		  when call 'erlang':'=:='
			(_cor7,
			 _cor0) ->
		  %% Line 1169
		  try
		      apply 'translate_response'/2
			  (Response, Rest)
		  of <_cor1> ->
		      _cor1
		  catch <_cor4,_cor3,_cor2> ->
		      case <_cor4,_cor3,_cor2> of
			%% Line 1171
			<'error',Reason,_cor8> when 'true' ->
			    let <_cor5> =
				%% Line 1173
				call 'erlang':'get_stacktrace'
				    ()
			    in  %% Line 1172
				{'error',{'bad_response_from_port',Data,%% Line 1173
									{Reason,_cor5}}}
			( <_cor4,_cor3,_cor2> when 'true' ->
			      primop 'raise'
				  (_cor2, _cor3)
			  -| ['compiler_generated'] )
		      end
	      %% Line 1175
	      <{'EXIT',_cor9,Reason}>
		  when call 'erlang':'=:='
			(_cor9,
			 _cor0) ->
		  %% Line 1176
		  {'error',{'port_died',Reason}}
	    after 'infinity' ->
	      'true'
'open_mode'/1 =
    %% Line 1188
    fun (_cor0) ->
	case _cor0 of
	  <List>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      %% Line 1189
	      case apply 'open_mode'/4
		       (List, 0, [], []) of
		%% Line 1190
		<{Mode,Portopts,Setopts}>
		    when %% Line 1192
		      try
			  let <_cor2> =
			      call 'erlang':'band'
				  (Mode, 3)
			  in  call 'erlang':'=:='
				  (_cor2, 0)
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false' ->
		    let <_cor3> =
			%% Line 1193
			call 'erlang':'bor'
			    (Mode, 1)
		    in  %% Line 1193
			{_cor3,Portopts,Setopts}
		%% Line 1194
		<Other> when 'true' ->
		    %% Line 1195
		    Other
	      end
	  ( <_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5})
		  -| [{'function_name',{'open_mode',1}}] )
	    -| ['compiler_generated'] )
	end
'open_mode'/4 =
    %% Line 1198
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <['raw'|Rest],Mode,Portopts,Setopts> when 'true' ->
	      %% Line 1199
	      apply 'open_mode'/4
		  (Rest, Mode, Portopts, Setopts)
	  %% Line 1200
	  <['read'|Rest],Mode,Portopts,Setopts> when 'true' ->
	      let <_cor4> =
		  %% Line 1201
		  call 'erlang':'bor'
		      (Mode, 1)
	      in  %% Line 1201
		  apply 'open_mode'/4
		      (Rest, _cor4, Portopts, Setopts)
	  %% Line 1202
	  <['write'|Rest],Mode,Portopts,Setopts> when 'true' ->
	      let <_cor5> =
		  %% Line 1203
		  call 'erlang':'bor'
		      (Mode, 2)
	      in  %% Line 1203
		  apply 'open_mode'/4
		      (Rest, _cor5, Portopts, Setopts)
	  %% Line 1204
	  <['binary'|Rest],Mode,Portopts,Setopts> when 'true' ->
	      %% Line 1205
	      apply 'open_mode'/4
		  (Rest, Mode, ['binary'|Portopts], Setopts)
	  %% Line 1206
	  <['compressed'|Rest],Mode,Portopts,Setopts> when 'true' ->
	      let <_cor6> =
		  %% Line 1207
		  call 'erlang':'bor'
		      (Mode, 8)
	      in  %% Line 1207
		  apply 'open_mode'/4
		      (Rest, _cor6, Portopts, Setopts)
	  %% Line 1208
	  <['append'|Rest],Mode,Portopts,Setopts> when 'true' ->
	      let <_cor7> =
		  %% Line 1209
		  call 'erlang':'bor'
		      (Mode, 4)
	      in  let <_cor8> =
		      %% Line 1209
		      call 'erlang':'bor'
			  (_cor7, 2)
		  in  %% Line 1209
		      apply 'open_mode'/4
			  (Rest, _cor8, %% Line 1210
					Portopts, %% Line 1210
						  Setopts)
	  %% Line 1211
	  <['exclusive'|Rest],Mode,Portopts,Setopts> when 'true' ->
	      let <_cor9> =
		  %% Line 1212
		  call 'erlang':'bor'
		      (Mode, 16)
	      in  %% Line 1212
		  apply 'open_mode'/4
		      (Rest, _cor9, Portopts, Setopts)
	  %% Line 1213
	  <['sync'|Rest],Mode,Portopts,Setopts> when 'true' ->
	      let <_cor10> =
		  %% Line 1214
		  call 'erlang':'bor'
		      (Mode, 64)
	      in  %% Line 1214
		  apply 'open_mode'/4
		      (Rest, _cor10, Portopts, Setopts)
	  %% Line 1215
	  <['delayed_write'|Rest],Mode,Portopts,Setopts> when 'true' ->
	      %% Line 1216
	      apply 'open_mode'/4
		  ([{'delayed_write',65536,2000}|Rest], Mode, %% Line 1217
							      Portopts, %% Line 1217
									Setopts)
	  %% Line 1218
	  <[{'delayed_write',Size,Delay}|Rest],Mode,Portopts,Setopts>
	      when %% Line 1219
		try
		    let <_cor12> =
			call 'erlang':'is_integer'
			    (Size)
		    in  let <_cor13> =
			    call 'erlang':'=<'
				(0, Size)
			in  let <_cor14> =
				call 'erlang':'is_integer'
				    (Delay)
			    in  let <_cor15> =
				    call 'erlang':'=<'
					(0, Delay)
				in  let <_cor16> =
					call 'erlang':'and'
					    (_cor14, _cor15)
				    in  let <_cor17> =
					    call 'erlang':'and'
						(_cor13, _cor16)
					in  call 'erlang':'and'
						(_cor12, _cor17)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 1220
	      case <> of
		%% Line 1221
		<>
		    when let <_cor19> =
			  call 'erlang':'<'
			      (Size, 9223372036854775808)
		      in  let <_cor21> =
			      call 'erlang':'<'
				  (Delay, 18446744073709551616)
			  in  call 'erlang':'and'
				  (_cor19, _cor21) ->
		    let <_cor22> =
			%% Line 1223
			#{#<26>(8,1,'integer',['unsigned'|['big']]),
			  #<0>(8,1,'integer',['unsigned'|['big']]),
			  #<%% Line 1224
			    Size>(%% Line 1224
				  64,1,'integer',['unsigned'|['big']]),
			  #<%% Line 1224
			    Delay>(%% Line 1224
				   64,1,'integer',['unsigned'|['big']])}#
		    in  %% Line 1222
			apply 'open_mode'/4
			    (Rest, Mode, Portopts, %% Line 1223
						   [_cor22|%% Line 1225
							   Setopts])
		%% Line 1226
		<> when 'true' ->
		    %% Line 1227
		    'einval'
	      end
	  %% Line 1229
	  <['read_ahead'|Rest],Mode,Portopts,Setopts> when 'true' ->
	      %% Line 1230
	      apply 'open_mode'/4
		  ([{'read_ahead',65536}|Rest], Mode, Portopts, Setopts)
	  %% Line 1231
	  <[{'read_ahead',Size}|Rest],Mode,Portopts,Setopts>
	      when let <_cor24> =
		    %% Line 1232
		    call 'erlang':'is_integer'
			(Size)
		in  let <_cor25> =
			%% Line 1232
			call 'erlang':'=<'
			    (0, Size)
		    in  %% Line 1232
			call 'erlang':'and'
			    (_cor24, _cor25) ->
	      %% Line 1233
	      case <> of
		%% Line 1234
		<>
		    when call 'erlang':'<'
			  (Size,
			   9223372036854775808) ->
		    let <_cor27> =
			%% Line 1236
			#{#<26>(8,1,'integer',['unsigned'|['big']]),
			  #<1>(8,1,'integer',['unsigned'|['big']]),
			  #<%% Line 1237
			    Size>(%% Line 1237
				  64,1,'integer',['unsigned'|['big']])}#
		    in  %% Line 1235
			apply 'open_mode'/4
			    (Rest, Mode, Portopts, %% Line 1236
						   [_cor27|%% Line 1237
							   Setopts])
		%% Line 1238
		<> when 'true' ->
		    %% Line 1239
		    'einval'
	      end
	  %% Line 1241
	  <[],Mode,Portopts,Setopts> when 'true' ->
	      let <_cor29> =
		  %% Line 1242
		  apply 'reverse'/1
		      (Portopts)
	      in  let <_cor28> =
		      %% Line 1242
		      apply 'reverse'/1
			  (Setopts)
		  in  %% Line 1242
		      {Mode,_cor29,_cor28}
	  %% Line 1243
	  <_cor34,_X_Mode,_X_Portopts,_X_Setopts> when 'true' ->
	      %% Line 1244
	      'badarg'
	end
'lseek_position'/1 =
    %% Line 1252
    fun (_cor0) ->
	case _cor0 of
	  <Pos>
	      when %% Line 1253
		call 'erlang':'is_integer'
		    (_cor0) ->
	      %% Line 1254
	      apply 'lseek_position'/1
		  ({'bof',Pos})
	  %% Line 1255
	  <'bof'> when 'true' ->
	      %% Line 1256
	      apply 'lseek_position'/1
		  ({'bof',0})
	  %% Line 1257
	  <'cur'> when 'true' ->
	      %% Line 1258
	      apply 'lseek_position'/1
		  ({'cur',0})
	  %% Line 1259
	  <'eof'> when 'true' ->
	      %% Line 1260
	      apply 'lseek_position'/1
		  ({'eof',0})
	  %% Line 1261
	  <{'bof',Offset}>
	      when %% Line 1262
		call 'erlang':'is_integer'
		    (Offset) ->
	      %% Line 1263
	      {Offset,0}
	  %% Line 1264
	  <{'cur',Offset}>
	      when %% Line 1265
		call 'erlang':'is_integer'
		    (Offset) ->
	      %% Line 1266
	      {Offset,1}
	  %% Line 1267
	  <{'eof',Offset}>
	      when %% Line 1268
		call 'erlang':'is_integer'
		    (Offset) ->
	      %% Line 1269
	      {Offset,2}
	  %% Line 1270
	  <_cor2> when 'true' ->
	      %% Line 1271
	      'badarg'
	end
'translate_response'/2 =
    %% Line 1278
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <0,[]> when 'true' ->
	      %% Line 1279
	      'ok'
	  %% Line 1280
	  <1,List>
	      when call 'erlang':'is_list'
		    (List) ->
	      let <_cor2> =
		  %% Line 1281
		  call 'erlang':'list_to_atom'
		      (List)
	      in  %% Line 1281
		  {'error',_cor2}
	  %% Line 1282
	  <3,List> when 'true' ->
	      %% Line 1283
	      case apply 'get_uint64'/1
		       (List) of
		<{N,[]}> when 'true' ->
		    %% Line 1284
		    {'ok',N}
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1285
	  <2,List> when 'true' ->
	      %% Line 1286
	      case apply 'get_uint64'/1
		       (List) of
		<ND = {_X_N,_X_Data}> when 'true' ->
		    %% Line 1287
		    {'ok',ND}
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1288
	  <4,List>
	      when call 'erlang':'is_list'
		    (List) ->
	      let <_cor5> =
		  %% Line 1289
		  apply 'transform_info'/1
		      (List)
	      in  %% Line 1289
		  {'ok',_cor5}
	  %% Line 1290
	  <5,L0> when 'true' ->
	      %% Line 1291
	      case apply 'get_uint64'/1
		       (L0) of
		<{N,L1}> when 'true' ->
		    let <_cor7> =
			%% Line 1292
			call 'erlang':'list_to_atom'
			    (L1)
		    in  %% Line 1292
			{'error',{N,_cor7}}
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor6})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1293
	  <6,List> when 'true' ->
	      let <_cor8> =
		  %% Line 1294
		  apply 'transform_ldata'/1
		      (List)
	      in  %% Line 1294
		  {'ok',_cor8}
	  %% Line 1295
	  <7,%% Line 1296
	     #{#<Offset>(64,1,'integer',['unsigned'|['big']]),
	       #<0>(64,1,'integer',['unsigned'|['big']]),
	       #<Size>(64,1,'integer',['unsigned'|['big']])}#> when 'true' ->
	      %% Line 1297
	      {'ok',{Size,Offset,'eof'}}
	  %% Line 1298
	  <7,%% Line 1299
	     [#{#<Offset>(64,1,'integer',['unsigned'|['big']]),
		#<0>(64,1,'integer',['unsigned'|['big']]),
		#<Size>(64,1,'integer',['unsigned'|['big']])}#|#{}#]> when 'true' ->
	      %% Line 1300
	      {'ok',{Size,Offset,'eof'}}
	  %% Line 1301
	  <X = 7,Data = %% Line 1302
			[#{#<_cor15>(64,1,'integer',['unsigned'|['big']]),
			   #<0>(64,1,'integer',['unsigned'|['big']]),
			   #<_cor16>(64,1,'integer',['unsigned'|['big']])}#|_cor17]> when 'true' ->
	      %% Line 1303
	      {'error',{'bad_response_from_port',[X|Data]}}
	  %% Line 1304
	  <X = 7,Data = %% Line 1305
			[#{#<_cor18>(64,1,'integer',['unsigned'|['big']]),
			   #<_cor19>(64,1,'integer',['unsigned'|['big']]),
			   #<_cor20>(64,1,'integer',['unsigned'|['big']])}#|#{}#]> when 'true' ->
	      %% Line 1306
	      {'error',{'bad_response_from_port',[X|Data]}}
	  %% Line 1307
	  <7,%% Line 1308
	     [#{#<Offset>(64,1,'integer',['unsigned'|['big']]),
		#<_X_ReadSize>(64,1,'integer',['unsigned'|['big']]),
		#<Size>(64,1,'integer',['unsigned'|['big']])}#|D]> when 'true' ->
	      %% Line 1309
	      {'ok',{Size,Offset,D}}
	  %% Line 1310
	  <X = 7,L0>
	      when call 'erlang':'is_list'
		    (L0) ->
	      %% Line 1311
	      case apply 'get_uint64'/1
		       (L0) of
		<{Offset,L1}> when 'true' ->
		    %% Line 1312
		    case apply 'get_uint64'/1
			     (L1) of
		      <{ReadSize,L2}> when 'true' ->
			  %% Line 1313
			  case apply 'get_uint64'/1
				   (L2) of
			    <{Size,L3}> when 'true' ->
				%% Line 1314
				case <ReadSize,L3> of
				  %% Line 1315
				  <0,[]> when 'true' ->
				      %% Line 1316
				      {'ok',{Size,Offset,'eof'}}
				  %% Line 1317
				  <0,_cor21> when 'true' ->
				      %% Line 1318
				      {'error',{'bad_response_from_port',[X|L0]}}
				  %% Line 1319
				  <_cor22,[]> when 'true' ->
				      %% Line 1320
				      {'error',{'bad_response_from_port',[X|L0]}}
				  %% Line 1321
				  <_fol264,_fol265> when 'true' ->
				      %% Line 1322
				      {'ok',{Size,Offset,L3}}
				end
			    ( <_cor11> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor11})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor10> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor10})
			-| ['compiler_generated'] )
		    end
		( <_cor9> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor9})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1324
	  <8,[]> when 'true' ->
	      %% Line 1325
	      'eof'
	  %% Line 1326
	  <9,Data> when 'true' ->
	      %% Line 1327
	      {'fname',Data}
	  %% Line 1328
	  <11,Data> when 'true' ->
	      %% Line 1329
	      {'lfname',Data}
	  %% Line 1330
	  <10,Data> when 'true' ->
	      %% Line 1331
	      {'ok',Data}
	  %% Line 1332
	  <X,Data> when 'true' ->
	      %% Line 1333
	      {'error',{'bad_response_from_port',[X|Data]}}
	end
'transform_info'/1 =
    %% Line 1335
    fun (_cor0) ->
	case _cor0 of
	  <[%% Line 1336
	    Hsize1|%% Line 1336
		   [Hsize2|[Hsize3|[Hsize4|%% Line 1337
					   [Lsize1|[Lsize2|[Lsize3|[Lsize4|%% Line 1338
									   [Type1|[Type2|[Type3|[Type4|%% Line 1339
												       [Atime1|[Atime2|[Atime3|[Atime4|[Atime5|[Atime6|[Atime7|[Atime8|%% Line 1340
																				       [Mtime1|[Mtime2|[Mtime3|[Mtime4|[Mtime5|[Mtime6|[Mtime7|[Mtime8|%% Line 1341
																												       [Ctime1|[Ctime2|[Ctime3|[Ctime4|[Ctime5|[Ctime6|[Ctime7|[Ctime8|%% Line 1342
																																				       [Mode1|[Mode2|[Mode3|[Mode4|%% Line 1343
																																								   [Links1|[Links2|[Links3|[Links4|%% Line 1344
																																												   [Major1|[Major2|[Major3|[Major4|%% Line 1345
																																																   [Minor1|[Minor2|[Minor3|[Minor4|%% Line 1346
																																																				   [Inode1|[Inode2|[Inode3|[Inode4|%% Line 1347
																																																								   [Uid1|[Uid2|[Uid3|[Uid4|%% Line 1348
																																																											   [Gid1|[Gid2|[Gid3|[Gid4|%% Line 1349
																																																														   [Access1|[Access2|[Access3|[Access4|[]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]> when 'true' ->
	      let <_cor16> =
		  %% Line 1351
		  apply 'uint32'/4
		      (Hsize1, Hsize2, Hsize3, Hsize4)
	      in  let <_cor17> =
		      %% Line 1351
		      call 'erlang':'*'
			  (_cor16, 4294967296)
		  in  let <_cor15> =
			  %% Line 1351
			  apply 'uint32'/4
			      (Lsize1, Lsize2, Lsize3, Lsize4)
		      in  let <_cor18> =
			      %% Line 1351
			      call 'erlang':'+'
				  (_cor17, _cor15)
			  in  let <_cor13> =
				  %% Line 1352
				  apply 'uint32'/4
				      (Type1, Type2, Type3, Type4)
			      in  let <_cor14> =
				      %% Line 1352
				      apply 'file_type'/1
					  (_cor13)
				  in  let <_cor11> =
					  %% Line 1353
					  apply 'uint32'/4
					      (Access1, Access2, Access3, Access4)
				      in  let <_cor12> =
					      %% Line 1353
					      apply 'file_access'/1
						  (_cor11)
					  in  let <_cor10> =
						  %% Line 1354
						  apply 'sint64'/8
						      (Atime1, Atime2, Atime3, Atime4, Atime5, Atime6, Atime7, Atime8)
					      in  let <_cor9> =
						      %% Line 1355
						      apply 'sint64'/8
							  (Mtime1, Mtime2, Mtime3, Mtime4, Mtime5, Mtime6, Mtime7, Mtime8)
						  in  let <_cor8> =
							  %% Line 1356
							  apply 'sint64'/8
							      (Ctime1, Ctime2, Ctime3, Ctime4, Ctime5, Ctime6, Ctime7, Ctime8)
						      in  let <_cor7> =
							      %% Line 1357
							      apply 'uint32'/4
								  (Mode1, Mode2, Mode3, Mode4)
							  in  let <_cor6> =
								  %% Line 1358
								  apply 'uint32'/4
								      (Links1, Links2, Links3, Links4)
							      in  let <_cor5> =
								      %% Line 1359
								      apply 'uint32'/4
									  (Major1, Major2, Major3, Major4)
								  in  let <_cor4> =
									  %% Line 1360
									  apply 'uint32'/4
									      (Minor1, Minor2, Minor3, Minor4)
								      in  let <_cor3> =
									      %% Line 1361
									      apply 'uint32'/4
										  (Inode1, Inode2, Inode3, Inode4)
									  in  let <_cor2> =
										  %% Line 1362
										  apply 'uint32'/4
										      (Uid1, Uid2, Uid3, Uid4)
									      in  let <_cor1> =
										      %% Line 1363
										      apply 'uint32'/4
											  (Gid1, Gid2, Gid3, Gid4)
										  in  %% Line 1350
										      {'file_info',_cor18,_cor14,_cor12,_cor10,_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1}
	  ( <_cor19> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor19})
		  -| [{'function_name',{'transform_info',1}}] )
	    -| ['compiler_generated'] )
	end
'file_type'/1 =
    %% Line 1367
    fun (_cor0) ->
	case _cor0 of
	  <1> when 'true' ->
	      'device'
	  %% Line 1368
	  <2> when 'true' ->
	      'directory'
	  %% Line 1369
	  <3> when 'true' ->
	      'regular'
	  %% Line 1370
	  <4> when 'true' ->
	      'symlink'
	  %% Line 1371
	  <_cor2> when 'true' ->
	      'other'
	end
'file_access'/1 =
    %% Line 1373
    fun (_cor0) ->
	case _cor0 of
	  <0> when 'true' ->
	      'none'
	  %% Line 1374
	  <1> when 'true' ->
	      'write'
	  %% Line 1375
	  <2> when 'true' ->
	      'read'
	  %% Line 1376
	  <3> when 'true' ->
	      'read_write'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'file_access',1}}] )
	    -| ['compiler_generated'] )
	end
'int_to_int32bytes'/1 =
    %% Line 1378
    fun (_cor0) ->
	case _cor0 of
	  <Int>
	      when call 'erlang':'is_integer'
		    (_cor0) ->
	      %% Line 1379
	      #{#<Int>(32,1,'integer',['unsigned'|['big']])}#
	  %% Line 1380
	  <'undefined'> when 'true' ->
	      %% Line 1381
	      #{#<255>(8,1,'integer',['unsigned'|['big']]),
		#<255>(8,1,'integer',['unsigned'|['big']]),
		#<255>(8,1,'integer',['unsigned'|['big']]),
		#<255>(8,1,'integer',['unsigned'|['big']])}#
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'int_to_int32bytes',1}}] )
	    -| ['compiler_generated'] )
	end
'int_to_int64bytes'/1 =
    %% Line 1383
    fun (_cor0) ->
	case _cor0 of
	  <Int>
	      when call 'erlang':'is_integer'
		    (_cor0) ->
	      %% Line 1384
	      #{#<Int>(64,1,'integer',['signed'|['big']])}#
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'int_to_int64bytes',1}}] )
	    -| ['compiler_generated'] )
	end
'sint64'/8 =
    %% Line 1387
    fun (_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <I1,I2,I3,I4,I5,I6,I7,I8>
	      when call 'erlang':'>'
		    (I1,
		     127) ->
	      let <_cor15> =
		  %% Line 1388
		  call 'erlang':'bsl'
		      (I1, 56)
	      in  let <_cor14> =
		      %% Line 1388
		      call 'erlang':'bsl'
			  (I2, 48)
		  in  let <_cor16> =
			  %% Line 1388
			  call 'erlang':'bor'
			      (_cor15, _cor14)
		      in  let <_cor13> =
			      %% Line 1388
			      call 'erlang':'bsl'
				  (I3, 40)
			  in  let <_cor17> =
				  %% Line 1388
				  call 'erlang':'bor'
				      (_cor16, _cor13)
			      in  let <_cor12> =
				      %% Line 1388
				      call 'erlang':'bsl'
					  (I4, 32)
				  in  let <_cor18> =
					  %% Line 1388
					  call 'erlang':'bor'
					      (_cor17, _cor12)
				      in  let <_cor11> =
					      %% Line 1389
					      call 'erlang':'bsl'
						  (I5, 24)
					  in  let <_cor19> =
						  %% Line 1388
						  call 'erlang':'bor'
						      (_cor18, _cor11)
					      in  let <_cor10> =
						      %% Line 1389
						      call 'erlang':'bsl'
							  (I6, 16)
						  in  let <_cor20> =
							  %% Line 1389
							  call 'erlang':'bor'
							      (_cor19, _cor10)
						      in  let <_cor9> =
							      %% Line 1389
							      call 'erlang':'bsl'
								  (I7, 8)
							  in  let <_cor21> =
								  %% Line 1389
								  call 'erlang':'bor'
								      (_cor20, _cor9)
							      in  let <_cor22> =
								      %% Line 1389
								      call 'erlang':'bor'
									  (_cor21, I8)
								  in  %% Line 1389
								      call 'erlang':'-'
									  (_cor22, 18446744073709551616)
	  %% Line 1390
	  <I1,I2,I3,I4,I5,I6,I7,I8> when 'true' ->
	      let <_cor29> =
		  %% Line 1391
		  call 'erlang':'bsl'
		      (I1, 56)
	      in  let <_cor28> =
		      %% Line 1391
		      call 'erlang':'bsl'
			  (I2, 48)
		  in  let <_cor30> =
			  %% Line 1391
			  call 'erlang':'bor'
			      (_cor29, _cor28)
		      in  let <_cor27> =
			      %% Line 1391
			      call 'erlang':'bsl'
				  (I3, 40)
			  in  let <_cor31> =
				  %% Line 1391
				  call 'erlang':'bor'
				      (_cor30, _cor27)
			      in  let <_cor26> =
				      %% Line 1391
				      call 'erlang':'bsl'
					  (I4, 32)
				  in  let <_cor32> =
					  %% Line 1391
					  call 'erlang':'bor'
					      (_cor31, _cor26)
				      in  let <_cor25> =
					      %% Line 1392
					      call 'erlang':'bsl'
						  (I5, 24)
					  in  let <_cor33> =
						  %% Line 1391
						  call 'erlang':'bor'
						      (_cor32, _cor25)
					      in  let <_cor24> =
						      %% Line 1392
						      call 'erlang':'bsl'
							  (I6, 16)
						  in  let <_cor34> =
							  %% Line 1392
							  call 'erlang':'bor'
							      (_cor33, _cor24)
						      in  let <_cor23> =
							      %% Line 1392
							      call 'erlang':'bsl'
								  (I7, 8)
							  in  let <_cor35> =
								  %% Line 1392
								  call 'erlang':'bor'
								      (_cor34, _cor23)
							      in  %% Line 1392
								  call 'erlang':'bor'
								      (_cor35, I8)
	end
'uint32'/4 =
    %% Line 1395
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor6> =
	    %% Line 1396
	    call 'erlang':'bsl'
		(_cor3, 24)
	in  let <_cor5> =
		%% Line 1396
		call 'erlang':'bsl'
		    (_cor2, 16)
	    in  let <_cor7> =
		    %% Line 1396
		    call 'erlang':'bor'
			(_cor6, _cor5)
		in  let <_cor4> =
			%% Line 1396
			call 'erlang':'bsl'
			    (_cor1, 8)
		    in  let <_cor8> =
			    %% Line 1396
			    call 'erlang':'bor'
				(_cor7, _cor4)
			in  %% Line 1396
			    call 'erlang':'bor'
				(_cor8, _cor0)
'get_uint64'/1 =
    %% Line 1398
    fun (_cor0) ->
	%% Line 1399
	case apply 'get_uint32'/1
		 (_cor0) of
	  <{X1,L1}> when 'true' ->
	      %% Line 1400
	      case apply 'get_uint32'/1
		       (L1) of
		<{X2,L2}> when 'true' ->
		    let <_cor3> =
			%% Line 1401
			call 'erlang':'bsl'
			    (X1, 32)
		    in  let <_cor4> =
			    %% Line 1401
			    call 'erlang':'bor'
				(_cor3, X2)
			in  %% Line 1401
			    {_cor4,L2}
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'get_uint32'/1 =
    %% Line 1403
    fun (_cor0) ->
	case _cor0 of
	  <[X1|[X2|[X3|[X4|List]]]]> when 'true' ->
	      let <_cor1> =
		  %% Line 1404
		  call 'erlang':'bsl'
		      (X1, 8)
	      in  let <_cor2> =
		      %% Line 1404
		      call 'erlang':'bor'
			  (_cor1, X2)
		  in  let <_cor3> =
			  %% Line 1404
			  call 'erlang':'bsl'
			      (_cor2, 8)
		      in  let <_cor4> =
			      %% Line 1404
			      call 'erlang':'bor'
				  (_cor3, X3)
			  in  let <_cor5> =
				  %% Line 1404
				  call 'erlang':'bsl'
				      (_cor4, 8)
			      in  let <_cor6> =
				      %% Line 1404
				      call 'erlang':'bor'
					  (_cor5, X4)
				  in  %% Line 1404
				      {_cor6,List}
	  ( <_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7})
		  -| [{'function_name',{'get_uint32',1}}] )
	    -| ['compiler_generated'] )
	end
'transform_ldata'/1 =
    %% Line 1408
    fun (_cor0) ->
	case ( _cor0
	       -| ['reuse_for_context'] ) of
	  <#{#<0>(32,1,'integer',['unsigned'|['big']]),
	     #<0>(32,1,'integer',['unsigned'|['big']])}#> when 'true' ->
	      %% Line 1409
	      []
	  %% Line 1410
	  <[#{#<0>(32,1,'integer',['unsigned'|['big']]),
	      #<N>(32,1,'integer',['unsigned'|['big']]),
	      #<Sizes>('all',8,'binary',['unsigned'|['big']])}#|Datas]> when 'true' ->
	      %% Line 1411
	      apply 'transform_ldata'/4
		  (N, Sizes, Datas, [])
	  %% Line 1413
	  <L0 = [_cor4|[_cor5|[_cor6|[_cor7|[_cor8|[_cor9|[_cor10|[_cor11|_cor12]]]]]]]]> when 'true' ->
	      %% Line 1414
	      case apply 'get_uint32'/1
		       (L0) of
		<{0,L1}> when 'true' ->
		    %% Line 1415
		    case apply 'get_uint32'/1
			     (L1) of
		      <{N,L2}> when 'true' ->
			  %% Line 1416
			  apply 'transform_ldata'/3
			      (N, L2, [])
		      ( <_cor2> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor2})
			-| ['compiler_generated'] )
		    end
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor3> when 'true' ->
		do  primop 'bs_context_to_binary'
			(_cor3)
		    ( primop 'match_fail'
			  ({'function_clause',_cor3})
		      -| [{'function_name',{'transform_ldata',1}}] )
	    -| ['compiler_generated'] )
	end
'transform_ldata'/3 =
    %% Line 1419
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <0,List,Sizes> when 'true' ->
	      let <_cor3> =
		  %% Line 1420
		  apply 'reverse'/1
		      (Sizes)
	      in  %% Line 1420
		  apply 'transform_ldata'/4
		      (0, List, _cor3, [])
	  %% Line 1421
	  <N,L0,Sizes> when 'true' ->
	      %% Line 1422
	      case apply 'get_uint64'/1
		       (L0) of
		<{Size,L1}> when 'true' ->
		    let <_cor5> =
			%% Line 1423
			call 'erlang':'-'
			    (N, 1)
		    in  %% Line 1423
			apply 'transform_ldata'/3
			    (_cor5, L1, [Size|Sizes])
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	end
'transform_ldata'/4 =
    %% Line 1426
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <1,#{#<0>(64,1,'integer',['unsigned'|['big']])}#,#{}#,R> when 'true' ->
	      %% Line 1427
	      apply 'reverse'/2
		  (R, ['eof'])
	  %% Line 1428
	  <1,#{#<Size>(64,1,'integer',['unsigned'|['big']])}#,Data,R>
	      when %% Line 1429
		try
		    let <_cor4> =
			call 'erlang':'byte_size'
			    (Data)
		    in  call 'erlang':'=:='
			    (_cor4, Size)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 1430
	      apply 'reverse'/2
		  (R, [Data|[]])
	  %% Line 1431
	  <N,#{#<0>(64,1,'integer',['unsigned'|['big']]),
	       #<Sizes>('all',8,'binary',['unsigned'|['big']])}#,[#{}#|Datas],R> when 'true' ->
	      let <_cor5> =
		  %% Line 1432
		  call 'erlang':'-'
		      (N, 1)
	      in  %% Line 1432
		  apply 'transform_ldata'/4
		      (_cor5, Sizes, Datas, ['eof'|R])
	  %% Line 1433
	  <N,#{#<Size>(64,1,'integer',['unsigned'|['big']]),
	       #<Sizes>('all',8,'binary',['unsigned'|['big']])}#,[Data|Datas],R>
	      when %% Line 1434
		try
		    let <_cor6> =
			call 'erlang':'byte_size'
			    (Data)
		    in  call 'erlang':'=:='
			    (_cor6, Size)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor7> =
		  %% Line 1435
		  call 'erlang':'-'
		      (N, 1)
	      in  %% Line 1435
		  apply 'transform_ldata'/4
		      (_cor7, Sizes, Datas, [Data|R])
	  %% Line 1437
	  <0,[],[],R> when 'true' ->
	      %% Line 1438
	      apply 'reverse'/1
		  (R)
	  %% Line 1439
	  <0,List,[0|Sizes],R> when 'true' ->
	      %% Line 1440
	      apply 'transform_ldata'/4
		  (0, List, Sizes, ['eof'|R])
	  %% Line 1441
	  <0,List,[Size|Sizes],R> when 'true' ->
	      %% Line 1442
	      case apply 'lists_split'/2
		       (List, Size) of
		<{Front,Rear}> when 'true' ->
		    %% Line 1443
		    apply 'transform_ldata'/4
			(0, Rear, Sizes, [Front|R])
		( <_cor8> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor8})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor12,_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10,_cor9})
		  -| [{'function_name',{'transform_ldata',4}}] )
	    -| ['compiler_generated'] )
	end
'lists_split'/2 =
    %% Line 1445
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <List,0>
	      when call 'erlang':'is_list'
		    (List) ->
	      %% Line 1446
	      {[],List}
	  %% Line 1447
	  <List,N>
	      when try
		    let <_cor2> =
			call 'erlang':'is_list'
			    (List)
		    in  let <_cor3> =
			    call 'erlang':'is_integer'
				(N)
			in  let <_cor4> =
				call 'erlang':'<'
				    (N, 0)
			    in  let <_cor5> =
				    call 'erlang':'and'
					(_cor3, _cor4)
				in  call 'erlang':'and'
					(_cor2, _cor5)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 1448
	      call 'erlang':'error'
		  ('badarg', [List|[N|[]]])
	  %% Line 1449
	  <List,N>
	      when let <_cor6> =
		    call 'erlang':'is_list'
			(List)
		in  let <_cor7> =
			call 'erlang':'is_integer'
			    (N)
		    in  call 'erlang':'and'
			    (_cor6, _cor7) ->
	      %% Line 1450
	      case apply 'lists_split'/3
		       (List, N, []) of
		%% Line 1451
		<'premature_end_of_list'> when 'true' ->
		    %% Line 1452
		    call 'erlang':'error'
			('badarg', [List|[N|[]]])
		%% Line 1453
		<Result> when 'true' ->
		    %% Line 1454
		    Result
	      end
	  ( <_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9})
		  -| [{'function_name',{'lists_split',2}}] )
	    -| ['compiler_generated'] )
	end
'lists_split'/3 =
    %% Line 1457
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <List,0,Rev> when 'true' ->
	      let <_cor3> =
		  %% Line 1458
		  apply 'reverse'/1
		      (Rev)
	      in  %% Line 1458
		  {_cor3,List}
	  %% Line 1459
	  <[],_cor8,_cor9> when 'true' ->
	      %% Line 1460
	      'premature_end_of_list'
	  %% Line 1461
	  <[Hd|Tl],N,Rev> when 'true' ->
	      let <_cor4> =
		  %% Line 1462
		  call 'erlang':'-'
		      (N, 1)
	      in  %% Line 1462
		  apply 'lists_split'/3
		      (Tl, _cor4, [Hd|Rev])
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'lists_split',3}}] )
	    -| ['compiler_generated'] )
	end
'reverse'/1 =
    %% Line 1466
    fun (_cor0) ->
	call 'lists':'reverse'
	    (_cor0, [])
'reverse'/2 =
    %% Line 1467
    fun (_cor1,_cor0) ->
	call 'lists':'reverse'
	    (_cor1, _cor0)
'pathname'/1 =
    %% Line 1472
    fun (_cor0) ->
	catch
	    %% Line 1473
	    call 'prim_file':'internal_name2native'
		(_cor0)
'plgv'/3 =
    %% Line 1477
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <K,[{_cor6,V}|_cor7],_cor8>
	      when call 'erlang':'=:='
		    (_cor6,
		     K) ->
	      V
	  %% Line 1478
	  <K,[_cor9|KVs],D> when 'true' ->
	      apply 'plgv'/3
		  (K, KVs, D)
	  %% Line 1479
	  <_cor10,[],D> when 'true' ->
	      D
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'plgv',3}}] )
	    -| ['compiler_generated'] )
	end
'from_seconds'/2 =
    %% Line 1486
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Seconds,'posix'>
	      when call 'erlang':'is_integer'
		    (Seconds) ->
	      %% Line 1487
	      Seconds
	  %% Line 1488
	  <Seconds,'universal'>
	      when call 'erlang':'is_integer'
		    (Seconds) ->
	      %% Line 1489
	      call 'erlang':'posixtime_to_universaltime'
		  (Seconds)
	  %% Line 1490
	  <Seconds,'local'>
	      when call 'erlang':'is_integer'
		    (Seconds) ->
	      let <_cor2> =
		  %% Line 1491
		  call 'erlang':'posixtime_to_universaltime'
		      (Seconds)
	      in  %% Line 1491
		  call 'erlang':'universaltime_to_localtime'
		      (_cor2)
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'from_seconds',2}}] )
	    -| ['compiler_generated'] )
	end
'to_seconds'/2 =
    %% Line 1493
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Seconds,'posix'>
	      when call 'erlang':'is_integer'
		    (Seconds) ->
	      %% Line 1494
	      Seconds
	  %% Line 1495
	  <Datetime = {_cor5,_cor6},'universal'> when 'true' ->
	      %% Line 1496
	      call 'erlang':'universaltime_to_posixtime'
		  (Datetime)
	  %% Line 1497
	  <Datetime = {_cor7,_cor8},'local'> when 'true' ->
	      let <_cor2> =
		  %% Line 1498
		  call 'erlang':'localtime_to_universaltime'
		      (Datetime)
	      in  %% Line 1498
		  call 'erlang':'universaltime_to_posixtime'
		      (_cor2)
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'to_seconds',2}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('prim_file')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('prim_file', _cor0)
end