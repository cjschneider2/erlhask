module 'erl_prim_loader' ['get_cwd'/0,
			  'get_cwd'/1,
			  'get_file'/1,
			  'get_files'/2,
			  'get_path'/0,
			  'list_dir'/1,
			  'module_info'/0,
			  'module_info'/1,
			  'prim_get_cwd'/2,
			  'prim_get_file'/2,
			  'prim_init'/0,
			  'prim_list_dir'/2,
			  'prim_read_file_info'/2,
			  'read_file_info'/1,
			  'release_archives'/0,
			  'set_path'/1,
			  'set_primary_archive'/4,
			  'start'/3]
    attributes [%% Line 24
		'type' =
		    %% Line 24
		    [{{'record','file_info'},[{'typed_record_field',{'record_field',25,{'atom',25,'size'}},{'type',25,'union',[{'atom',25,'undefined'}|[{'type',25,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',26,{'atom',26,'type'}},{'type',26,'union',[{'atom',26,'undefined'}|[{'atom',26,'device'}|[{'atom',26,'directory'}|[{'atom',26,'other'}|[{'atom',26,'regular'}|[{'atom',26,'symlink'}]]]]]]}}|[{'typed_record_field',{'record_field',27,{'atom',27,'access'}},{'type',27,'union',[{'atom',27,'undefined'}|[{'atom',27,'read'}|[{'atom',27,'write'}|[{'atom',27,'read_write'}|[{'atom',27,'none'}]]]]]}}|[{'typed_record_field',{'record_field',28,{'atom',28,'atime'}},{'type',28,'union',[{'atom',28,'undefined'}|[{'remote_type',28,[{'atom',28,'file'}|[{'atom',28,'date_time'}|[[]]]]}|[{'type',28,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',32,{'atom',32,'mtime'}},{'type',32,'union',[{'atom',32,'undefined'}|[{'remote_type',32,[{'atom',32,'file'}|[{'atom',32,'date_time'}|[[]]]]}|[{'type',32,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',34,{'atom',34,'ctime'}},{'type',34,'union',[{'atom',34,'undefined'}|[{'remote_type',34,[{'atom',34,'file'}|[{'atom',34,'date_time'}|[[]]]]}|[{'type',34,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',40,{'atom',40,'mode'}},{'type',40,'union',[{'atom',40,'undefined'}|[{'type',40,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',43,{'atom',43,'links'}},{'type',43,'union',[{'atom',43,'undefined'}|[{'type',43,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',46,{'atom',46,'major_device'}},{'type',46,'union',[{'atom',46,'undefined'}|[{'type',46,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',52,{'atom',52,'minor_device'}},{'type',52,'union',[{'atom',52,'undefined'}|[{'type',52,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',53,{'atom',53,'inode'}},{'type',53,'union',[{'atom',53,'undefined'}|[{'type',53,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',54,{'atom',54,'uid'}},{'type',54,'union',[{'atom',54,'undefined'}|[{'type',54,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',55,{'atom',55,'gid'}},{'type',55,'union',[{'atom',55,'undefined'}|[{'type',55,'non_neg_integer',[]}]]}}]]]]]]]]]]]]],[]}],
		%% Line 58
		'type' =
		    %% Line 58
		    [{{'record','file_descriptor'},[{'typed_record_field',{'record_field',59,{'atom',59,'module'}},{'type',59,'union',[{'atom',59,'undefined'}|[{'type',59,'module',[]}]]}}|[{'typed_record_field',{'record_field',60,{'atom',60,'data'}},{'type',60,'union',[{'atom',60,'undefined'}|[{'type',60,'term',[]}]]}}]],[]}],
		%% Line 56
		'type' =
		    %% Line 56
		    [{'host',{'type',56,'atom',[]},[]}],
		%% Line 58
		'type' =
		    %% Line 58
		    [{{'record','prim_state'},[{'typed_record_field',{'record_field',58,{'atom',58,'debug'}},{'type',58,'union',[{'atom',58,'undefined'}|[{'type',58,'boolean',[]}]]}}|[{'record_field',59,{'atom',59,'cache'}}|[{'record_field',60,{'atom',60,'primary_archive'}}]]],[]}],
		%% Line 61
		'type' =
		    %% Line 61
		    [{'prim_state',{'type',61,'record',[{'atom',61,'prim_state'}]},[]}],
		%% Line 63
		'type' =
		    %% Line 63
		    [{{'record','state'},[{'typed_record_field',{'record_field',64,{'atom',64,'loader'}},{'type',64,'union',[{'atom',64,'undefined'}|[{'atom',64,'efile'}|[{'atom',64,'inet'}]]]}}|[{'typed_record_field',{'record_field',65,{'atom',65,'hosts'},{'nil',65}},{'type',65,'list',[{'type',65,'host',[]}]}}|[{'record_field',66,{'atom',66,'id'}}|[{'typed_record_field',{'record_field',67,{'atom',67,'data'}},{'type',67,'union',[{'atom',67,'undefined'}|[{'atom',67,'noport'}|[{'type',67,'port',[]}]]]}}|[{'typed_record_field',{'record_field',68,{'atom',68,'timeout'}},{'type',68,'union',[{'atom',68,'undefined'}|[{'type',68,'timeout',[]}]]}}|[{'typed_record_field',{'record_field',70,{'atom',70,'n_timeouts'}},{'type',70,'union',[{'atom',70,'undefined'}|[{'type',70,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',71,{'atom',71,'multi_get'},{'atom',71,'false'}},{'type',71,'boolean',[]}}|[{'typed_record_field',{'record_field',72,{'atom',72,'prim_state'}},{'type',72,'union',[{'atom',72,'undefined'}|[{'type',72,'prim_state',[]}]]}}]]]]]]]],[]}],
		%% Line 105
		'spec' =
		    %% Line 105
		    [{{'start',3},[{'type',105,'bounded_fun',[{'type',105,'fun',[{'type',105,'product',[{'var',105,'Id'}|[{'var',105,'Loader'}|[{'var',105,'Hosts'}]]]}|[{'type',106,'union',[{'type',106,'tuple',[{'atom',106,'ok'}|[{'var',106,'Pid'}]]}|[{'type',106,'tuple',[{'atom',106,'error'}|[{'var',106,'What'}]]}]]}]]}|[[{'type',107,'constraint',[{'atom',107,'is_subtype'}|[[{'var',107,'Id'}|[{'type',107,'term',[]}]]]]}|[{'type',108,'constraint',[{'atom',108,'is_subtype'}|[[{'var',108,'Loader'}|[{'type',108,'union',[{'type',108,'atom',[]}|[{'type',108,'string',[]}]]}]]]]}|[{'type',109,'constraint',[{'atom',109,'is_subtype'}|[[{'var',109,'Hosts'}|[{'type',109,'union',[{'var',109,'Host'}|[{'type',109,'list',[{'var',109,'Host'}]}]]}]]]]}|[{'type',110,'constraint',[{'atom',110,'is_subtype'}|[[{'var',110,'Host'}|[{'type',110,'host',[]}]]]]}|[{'type',111,'constraint',[{'atom',111,'is_subtype'}|[[{'var',111,'Pid'}|[{'type',111,'pid',[]}]]]]}|[{'type',112,'constraint',[{'atom',112,'is_subtype'}|[[{'var',112,'What'}|[{'type',112,'term',[]}]]]]}]]]]]]]]}]}],
		%% Line 181
		'spec' =
		    %% Line 181
		    [{{'set_path',1},[{'type',181,'bounded_fun',[{'type',181,'fun',[{'type',181,'product',[{'var',181,'Path'}]}|[{'atom',181,'ok'}]]}|[[{'type',182,'constraint',[{'atom',182,'is_subtype'}|[[{'var',182,'Path'}|[{'type',182,'list',[{'ann_type',182,[{'var',182,'Dir'}|[{'type',182,'string',[]}]]}]}]]]]}]]]}]}],
		%% Line 186
		'spec' =
		    %% Line 186
		    [{{'get_path',0},[{'type',186,'bounded_fun',[{'type',186,'fun',[{'type',186,'product',[]}|[{'type',186,'tuple',[{'atom',186,'ok'}|[{'var',186,'Path'}]]}]]}|[[{'type',187,'constraint',[{'atom',187,'is_subtype'}|[[{'var',187,'Path'}|[{'type',187,'list',[{'ann_type',187,[{'var',187,'Dir'}|[{'type',187,'string',[]}]]}]}]]]]}]]]}]}],
		%% Line 191
		'spec' =
		    %% Line 191
		    [{{'get_file',1},[{'type',191,'bounded_fun',[{'type',191,'fun',[{'type',191,'product',[{'var',191,'Filename'}]}|[{'type',191,'union',[{'type',191,'tuple',[{'atom',191,'ok'}|[{'var',191,'Bin'}|[{'var',191,'FullName'}]]]}|[{'atom',191,'error'}]]}]]}|[[{'type',192,'constraint',[{'atom',192,'is_subtype'}|[[{'var',192,'Filename'}|[{'type',192,'union',[{'type',192,'atom',[]}|[{'type',192,'string',[]}]]}]]]]}|[{'type',193,'constraint',[{'atom',193,'is_subtype'}|[[{'var',193,'Bin'}|[{'type',193,'binary',[]}]]]]}|[{'type',194,'constraint',[{'atom',194,'is_subtype'}|[[{'var',194,'FullName'}|[{'type',194,'string',[]}]]]]}]]]]]}]}],
		%% Line 200
		'spec' =
		    %% Line 200
		    [{{'get_files',2},[{'type',200,'fun',[{'type',200,'product',[{'type',200,'list',[{'type',200,'tuple',[{'type',200,'atom',[]}|[{'type',200,'string',[]}]]}]}|[{'type',201,'fun',[{'type',201,'product',[{'type',201,'atom',[]}|[{'type',201,'binary',[]}|[{'type',201,'string',[]}]]]}|[{'type',201,'union',[{'atom',201,'ok'}|[{'type',201,'tuple',[{'atom',201,'error'}|[{'type',201,'atom',[]}]]}]]}]]}]]}|[{'type',202,'union',[{'atom',202,'ok'}|[{'type',202,'tuple',[{'atom',202,'error'}|[{'type',202,'atom',[]}]]}]]}]]}]}],
		%% Line 214
		'spec' =
		    %% Line 214
		    [{{'list_dir',1},[{'type',214,'bounded_fun',[{'type',214,'fun',[{'type',214,'product',[{'var',214,'Dir'}]}|[{'type',214,'union',[{'type',214,'tuple',[{'atom',214,'ok'}|[{'var',214,'Filenames'}]]}|[{'atom',214,'error'}]]}]]}|[[{'type',215,'constraint',[{'atom',215,'is_subtype'}|[[{'var',215,'Dir'}|[{'type',215,'string',[]}]]]]}|[{'type',216,'constraint',[{'atom',216,'is_subtype'}|[[{'var',216,'Filenames'}|[{'type',216,'list',[{'ann_type',216,[{'var',216,'Filename'}|[{'type',216,'string',[]}]]}]}]]]]}]]]]}]}],
		%% Line 220
		'spec' =
		    %% Line 220
		    [{{'read_file_info',1},[{'type',220,'bounded_fun',[{'type',220,'fun',[{'type',220,'product',[{'var',220,'Filename'}]}|[{'type',220,'union',[{'type',220,'tuple',[{'atom',220,'ok'}|[{'var',220,'FileInfo'}]]}|[{'atom',220,'error'}]]}]]}|[[{'type',221,'constraint',[{'atom',221,'is_subtype'}|[[{'var',221,'Filename'}|[{'type',221,'string',[]}]]]]}|[{'type',222,'constraint',[{'atom',222,'is_subtype'}|[[{'var',222,'FileInfo'}|[{'remote_type',222,[{'atom',222,'file'}|[{'atom',222,'file_info'}|[[]]]]}]]]]}]]]]}]}],
		%% Line 226
		'spec' =
		    %% Line 226
		    [{{'get_cwd',0},[{'type',226,'fun',[{'type',226,'product',[]}|[{'type',226,'union',[{'type',226,'tuple',[{'atom',226,'ok'}|[{'type',226,'string',[]}]]}|[{'atom',226,'error'}]]}]]}]}],
		%% Line 230
		'spec' =
		    %% Line 230
		    [{{'get_cwd',1},[{'type',230,'fun',[{'type',230,'product',[{'type',230,'string',[]}]}|[{'type',230,'union',[{'type',230,'tuple',[{'atom',230,'ok'}|[{'type',230,'string',[]}]]}|[{'atom',230,'error'}]]}]]}]}],
		%% Line 234
		'spec' =
		    %% Line 234
		    [{{'set_primary_archive',4},[{'type',234,'fun',[{'type',234,'product',[{'ann_type',234,[{'var',234,'File'}|[{'type',234,'union',[{'type',234,'string',[]}|[{'atom',234,'undefined'}]]}]]}|[{'ann_type',235,[{'var',235,'ArchiveBin'}|[{'type',235,'union',[{'type',235,'binary',[]}|[{'atom',235,'undefined'}]]}]]}|[{'ann_type',236,[{'var',236,'FileInfo'}|[{'type',236,'union',[{'type',236,'record',[{'atom',236,'file_info'}]}|[{'atom',236,'undefined'}]]}]]}|[{'ann_type',237,[{'var',237,'ParserFun'}|[{'type',237,'fun',[]}]]}]]]]}|[{'type',238,'union',[{'type',238,'tuple',[{'atom',238,'ok'}|[{'type',238,'list',[{'type',238,'string',[]}]}]]}|[{'type',238,'tuple',[{'atom',238,'error'}|[{'var',238,'_'}]]}]]}]]}]}],
		%% Line 246
		'spec' =
		    %% Line 246
		    [{{'release_archives',0},[{'type',246,'fun',[{'type',246,'product',[]}|[{'type',246,'union',[{'atom',246,'ok'}|[{'type',246,'tuple',[{'atom',246,'error'}|[{'var',246,'_'}]]}]]}]]}]}],
		%% Line 794
		'spec' =
		    %% Line 794
		    [{{'prim_init',0},[{'type',794,'fun',[{'type',794,'product',[]}|[{'type',794,'prim_state',[]}]]}]}],
		%% Line 876
		'spec' =
		    %% Line 876
		    [{{'prim_get_file',2},[{'type',876,'fun',[{'type',876,'product',[{'type',876,'prim_state',[]}|[{'remote_type',876,[{'atom',876,'file'}|[{'atom',876,'filename'}|[[]]]]}]]}|[{'type',876,'tuple',[{'var',876,'_'}|[{'type',876,'prim_state',[]}]]}]]}]}],
		%% Line 901
		'spec' =
		    %% Line 901
		    [{{'prim_list_dir',2},[{'type',901,'fun',[{'type',901,'product',[{'type',901,'prim_state',[]}|[{'remote_type',901,[{'atom',901,'file'}|[{'atom',901,'filename'}|[[]]]]}]]}|[{'type',902,'union',[{'type',902,'tuple',[{'type',902,'tuple',[{'atom',902,'ok'}|[{'type',902,'list',[{'remote_type',902,[{'atom',902,'file'}|[{'atom',902,'filename'}|[[]]]]}]}]]}|[{'type',902,'prim_state',[]}]]}|[{'type',903,'tuple',[{'type',903,'tuple',[{'atom',903,'error'}|[{'type',903,'term',[]}]]}|[{'type',903,'prim_state',[]}]]}]]}]]}]}],
		%% Line 954
		'spec' =
		    %% Line 954
		    [{{'prim_read_file_info',2},[{'type',954,'fun',[{'type',954,'product',[{'type',954,'prim_state',[]}|[{'remote_type',954,[{'atom',954,'file'}|[{'atom',954,'filename'}|[[]]]]}]]}|[{'type',955,'union',[{'type',955,'tuple',[{'type',955,'tuple',[{'atom',955,'ok'}|[{'type',955,'record',[{'atom',955,'file_info'}]}]]}|[{'type',955,'prim_state',[]}]]}|[{'type',956,'tuple',[{'type',956,'tuple',[{'atom',956,'error'}|[{'type',956,'term',[]}]]}|[{'type',956,'prim_state',[]}]]}]]}]]}]}],
		%% Line 995
		'spec' =
		    %% Line 995
		    [{{'prim_get_cwd',2},[{'type',995,'fun',[{'type',995,'product',[{'type',995,'prim_state',[]}|[{'type',995,'list',[{'remote_type',995,[{'atom',995,'file'}|[{'atom',995,'filename'}|[[]]]]}]}]]}|[{'type',996,'tuple',[{'type',996,'union',[{'type',996,'tuple',[{'atom',996,'error'}|[{'type',996,'term',[]}]]}|[{'type',996,'tuple',[{'atom',996,'ok'}|[{'var',996,'_'}]]}]]}|[{'type',996,'prim_state',[]}]]}]]}]}]]
'debug'/2 =
    %% Line 95
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'prim_state',Deb,_cor5,_cor6},Term> when 'true' ->
	      %% Line 96
	      case Deb of
		%% Line 97
		<'false'> when 'true' ->
		    'ok'
		%% Line 98
		<'true'> when 'true' ->
		    call 'erlang':'display'
			(Term)
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'debug',2}}] )
	    -| ['compiler_generated'] )
	end
'start'/3 =
    %% Line 113
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Id,Pgm,Hosts>
	      when call 'erlang':'is_atom'
		    (Hosts) ->
	      %% Line 114
	      apply 'start'/3
		  (Id, Pgm, [Hosts|[]])
	  %% Line 115
	  <Id,Pgm0,Hosts> when 'true' ->
	      let <_cor3> =
		  %% Line 116
		  case <> of
		    %% Line 117
		    <>
			when call 'erlang':'is_atom'
			      (Pgm0) ->
			%% Line 118
			call 'erlang':'atom_to_list'
			    (Pgm0)
		    %% Line 119
		    <> when 'true' ->
			%% Line 120
			Pgm0
		  end
	      in  let <Self> =
		      %% Line 122
		      call 'erlang':'self'
			  ()
		  in  let <_cor6> =
			  %% Line 123
			  ( fun () ->
				apply 'start_it'/4
				    (_cor3, Id, Self, Hosts)
			    -| [{'id',{0,0,'-start/3-fun-0-'}}] )
		      in  let <Pid> =
			      %% Line 123
			      call 'erlang':'spawn_link'
				  (_cor6)
			  in  do  %% Line 124
				  call 'erlang':'register'
				      ('erl_prim_loader', Pid)
				  %% Line 125
				  receive
				    %% Line 126
				    <{_cor11,'ok'}>
					when call 'erlang':'=:='
					      (_cor11,
					       Pid) ->
					%% Line 127
					{'ok',Pid}
				    %% Line 128
				    <{'EXIT',_cor12,Reason}>
					when call 'erlang':'=:='
					      (_cor12,
					       Pid) ->
					%% Line 129
					{'error',Reason}
				  after 'infinity' ->
				    'true'
	end
'start_it'/4 =
    %% Line 133
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[105|[110|[101|[116]]]],Id,Pid,Hosts> when 'true' ->
	      do  %% Line 134
		  call 'erlang':'process_flag'
		      ('trap_exit', 'true')
		  let <AL> =
		      %% Line 136
		      apply 'ipv4_list'/1
			  (Hosts)
		  in  %% Line 138
		      case apply 'find_master'/1
			       (AL) of
			<{'ok',Tcp}> when 'true' ->
			    do  %% Line 139
				apply 'init_ack'/1
				    (Pid)
				let <PS> =
				    %% Line 140
				    apply 'prim_init'/0
					()
				in  let <State> =
					%% Line 141
					{'state','inet',%% Line 142
							AL,%% Line 143
							   Id,%% Line 144
							      Tcp,%% Line 145
								  60000,%% Line 146
									6,'false',%% Line 147
										  PS}
				    in  %% Line 148
					apply 'loop'/3
					    (State, Pid, [])
			( <_cor5> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor5})
			  -| ['compiler_generated'] )
		      end
	  %% Line 150
	  <[101|[102|[105|[108|[101]]]]],Id,Pid,_X_Hosts> when 'true' ->
	      do  %% Line 151
		  call 'erlang':'process_flag'
		      ('trap_exit', 'true')
		  %% Line 152
		  case call 'prim_file':'start'
			   () of
		    <{'ok',Port}> when 'true' ->
			do  %% Line 154
			    case call 'prim_file':'get_cwd'
				     (Port) of
			      %% Line 155
			      <{'error',_cor20}> when 'true' ->
				  do  %% Line 159
				      call 'erlang':'display'
					  ([73|[110|[118|[97|[108|[105|[100|[32|[99|[117|[114|[114|[101|[110|[116|[32|[100|[105|[114|[101|[99|[116|[111|[114|[121|[32|[111|[114|[32|[105|[110|[118|[97|[108|[105|[100|[32|[102|[105|[108|[101|[110|[97|[109|[101|[32|[109|[111|[100|[101|[58|[32|[108|[111|[97|[100|[101|[114|[32|[99|[97|[110|[110|[111|[116|[32|[114|[101|[97|[100|[32|[99|[117|[114|[114|[101|[110|[116|[32|[100|[105|[114|[101|[99|[116|[111|[114|[121|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
				      %% Line 160
				      call 'erlang':'exit'
					  ({'error','invalid_current_directory'})
			      %% Line 161
			      <_cor21> when 'true' ->
				  %% Line 162
				  apply 'init_ack'/1
				      (Pid)
			    end
			    let <_cor12> =
				%% Line 164
				case call 'erlang':'system_info'
					 ('thread_pool_size') of
				  %% Line 165
				  <0> when 'true' ->
				      'false'
				  %% Line 166
				  <_cor22> when 'true' ->
				      'true'
				end
			    in  let <PS> =
				    %% Line 168
				    apply 'prim_init'/0
					()
				in  let <State> =
					%% Line 169
					{'state','efile',[],%% Line 170
							    Id,%% Line 171
							       Port,%% Line 172
								    'infinity','undefined',_cor12,%% Line 174
												  PS}
				    in  %% Line 175
					apply 'loop'/3
					    (State, Pid, [])
		    ( <_cor8> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor8})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor19,_cor18,_cor17,_cor16> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor19,_cor18,_cor17,_cor16})
		  -| [{'function_name',{'start_it',4}}] )
	    -| ['compiler_generated'] )
	end
'init_ack'/1 =
    %% Line 177
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 178
	    call 'erlang':'self'
		()
	in  do  %% Line 178
		call 'erlang':'!'
		    (_cor0, {_cor1,'ok'})
		%% Line 179
		'ok'
'set_path'/1 =
    %% Line 183
    fun (_cor0) ->
	case _cor0 of
	  <Paths>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      %% Line 184
	      apply 'request'/1
		  ({'set_path',Paths})
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'set_path',1}}] )
	    -| ['compiler_generated'] )
	end
'get_path'/0 =
    %% Line 188
    fun () ->
	%% Line 189
	apply 'request'/1
	    ({'get_path',[]})
'get_file'/1 =
    %% Line 195
    fun (_cor0) ->
	case _cor0 of
	  <File>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      let <_cor1> =
		  %% Line 196
		  call 'erlang':'atom_to_list'
		      (File)
	      in  %% Line 196
		  apply 'get_file'/1
		      (_cor1)
	  %% Line 197
	  <File> when 'true' ->
	      let <_cor2> =
		  %% Line 198
		  apply 'request'/1
		      ({'get_file',File})
	      in  %% Line 198
		  apply 'check_file_result'/3
		      ('get_file', File, _cor2)
	end
'get_files'/2 =
    %% Line 203
    fun (_cor1,_cor0) ->
	%% Line 204
	case apply 'request'/1
		 ({'get_files',{_cor1,_cor0}}) of
	  %% Line 205
	  <E = {'error',_X_M}> when 'true' ->
	      %% Line 206
	      E
	  %% Line 207
	  <{'error',Reason,M}> when 'true' ->
	      do  %% Line 208
		  apply 'check_file_result'/3
		      ('get_files', M, {'error',Reason})
		  %% Line 209
		  {'error',M}
	  %% Line 210
	  <'ok'> when 'true' ->
	      %% Line 211
	      'ok'
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor2})
	    -| ['compiler_generated'] )
	end
'list_dir'/1 =
    %% Line 217
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 218
	    apply 'request'/1
		({'list_dir',_cor0})
	in  %% Line 218
	    apply 'check_file_result'/3
		('list_dir', _cor0, _cor1)
'read_file_info'/1 =
    %% Line 223
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 224
	    apply 'request'/1
		({'read_file_info',_cor0})
	in  %% Line 224
	    apply 'check_file_result'/3
		('read_file_info', _cor0, _cor1)
'get_cwd'/0 =
    %% Line 227
    fun () ->
	let <_cor0> =
	    %% Line 228
	    apply 'request'/1
		({'get_cwd',[]})
	in  %% Line 228
	    apply 'check_file_result'/3
		('get_cwd', [], _cor0)
'get_cwd'/1 =
    %% Line 231
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 232
	    apply 'request'/1
		({'get_cwd',[_cor0|[]]})
	in  %% Line 232
	    apply 'check_file_result'/3
		('get_cwd', _cor0, _cor1)
'set_primary_archive'/4 =
    %% Line 240
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <'undefined','undefined','undefined',ParserFun> when 'true' ->
	      %% Line 241
	      apply 'request'/1
		  ({'set_primary_archive','undefined','undefined','undefined',ParserFun})
	  %% Line 242
	  <File,ArchiveBin,FileInfo = {'file_info',_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23},ParserFun>
	      when let <_cor4> =
		    %% Line 243
		    call 'erlang':'is_list'
			(File)
		in  let <_cor5> =
			%% Line 243
			call 'erlang':'is_binary'
			    (ArchiveBin)
		    in  %% Line 243
			call 'erlang':'and'
			    (_cor4, _cor5) ->
	      %% Line 244
	      apply 'request'/1
		  ({'set_primary_archive',File,ArchiveBin,FileInfo,ParserFun})
	  ( <_cor10,_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8,_cor7})
		  -| [{'function_name',{'set_primary_archive',4}}] )
	    -| ['compiler_generated'] )
	end
'release_archives'/0 =
    %% Line 248
    fun () ->
	%% Line 249
	apply 'request'/1
	    ('release_archives')
'request'/1 =
    %% Line 251
    fun (_cor0) ->
	let <Loader> =
	    %% Line 252
	    call 'erlang':'whereis'
		('erl_prim_loader')
	in  let <_cor2> =
		%% Line 253
		call 'erlang':'self'
		    ()
	    in  do  %% Line 253
		    call 'erlang':'!'
			(Loader, {_cor2,_cor0})
		    %% Line 254
		    receive
		      %% Line 255
		      <{_cor4,Res}>
			  when call 'erlang':'=:='
				(_cor4,
				 Loader) ->
			  %% Line 256
			  Res
		      %% Line 257
		      <{'EXIT',_cor5,_X_What}>
			  when call 'erlang':'=:='
				(_cor5,
				 Loader) ->
			  %% Line 258
			  'error'
		    after 'infinity' ->
		      'true'
'check_file_result'/3 =
    %% Line 261
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <_cor36,_cor37,{'error','enoent'}> when 'true' ->
	      %% Line 262
	      'error'
	  %% Line 263
	  <_cor38,_cor39,{'error','enotdir'}> when 'true' ->
	      %% Line 264
	      'error'
	  %% Line 265
	  <_cor40,_cor41,{'error','einval'}> when 'true' ->
	      %% Line 266
	      'error'
	  %% Line 267
	  <Func,Target,{'error',Reason}> when 'true' ->
	      let <_cor3> =
		  catch
		      %% Line 268
		      call 'erlang':'atom_to_list'
			  (Reason)
	      in  %% Line 268
		  case _cor3 of
		    %% Line 269
		    <{'EXIT',_cor42}> when 'true' ->
			%% Line 270
			'error'
		    %% Line 271
		    <Errno> when 'true' ->
			let <_cor4> =
			    %% Line 272
			    call 'erlang':'self'
				()
			in  let <_cor8> =
				%% Line 272
				case call 'erlang':'process_info'
					 (_cor4, 'registered_name') of
				  %% Line 273
				  <{'registered_name',R}> when 'true' ->
				      let <_cor5> =
					  %% Line 274
					  call 'erlang':'atom_to_list'
					      (R)
				      in  let <_cor6> =
					      %% Line 274
					      call 'erlang':'++'
						  (_cor5, [46])
					  in  %% Line 274
					      call 'erlang':'++'
						  ([80|[114|[111|[99|[101|[115|[115|[58|[32]]]]]]]]], _cor6)
				  %% Line 275
				  <_cor43> when 'true' ->
				      %% Line 276
				      []
				end
			    in  let <_cor10> =
				    %% Line 279
				    case <> of
				      <>
					  when call 'erlang':'is_atom'
						(Target) ->
					  call 'erlang':'atom_to_list'
					      (Target)
				      %% Line 280
				      <>
					  when call 'erlang':'is_list'
						(Target) ->
					  Target
				      %% Line 281
				      <> when 'true' ->
					  []
				    end
				in  let <_cor28> =
					%% Line 284
					case _cor10 of
					  %% Line 285
					  <[]> when 'true' ->
					      let <_cor13> =
						  %% Line 287
						  call 'erlang':'atom_to_list'
						      (Func)
					      in  let <_cor12> =
						      %% Line 287
						      [46|[32|_cor8]]
						  in  let <_cor14> =
							  %% Line 287
							  call 'erlang':'++'
							      (_cor13, _cor12)
						      in  let <_cor15> =
							      %% Line 287
							      call 'erlang':'++'
								  ([70|[117|[110|[99|[116|[105|[111|[110|[58|[32]]]]]]]]]], _cor14)
							  in  let <_cor16> =
								  %% Line 286
								  [46|[32|_cor15]]
							      in  let <_cor17> =
								      %% Line 286
								      call 'erlang':'++'
									  (Errno, _cor16)
								  in  %% Line 286
								      call 'erlang':'++'
									  ([70|[105|[108|[101|[32|[111|[112|[101|[114|[97|[116|[105|[111|[110|[32|[101|[114|[114|[111|[114|[58|[32]]]]]]]]]]]]]]]]]]]]]], _cor17)
					  %% Line 288
					  <_cor44> when 'true' ->
					      let <_cor19> =
						  %% Line 291
						  call 'erlang':'atom_to_list'
						      (Func)
					      in  let <_cor18> =
						      %% Line 291
						      [46|[32|_cor8]]
						  in  let <_cor20> =
							  %% Line 291
							  call 'erlang':'++'
							      (_cor19, _cor18)
						      in  let <_cor21> =
							      %% Line 291
							      call 'erlang':'++'
								  ([70|[117|[110|[99|[116|[105|[111|[110|[58|[32]]]]]]]]]], _cor20)
							  in  let <_cor22> =
								  %% Line 290
								  [46|[32|_cor21]]
							      in  let <_cor23> =
								      %% Line 290
								      call 'erlang':'++'
									  (_cor10, _cor22)
								  in  let <_cor24> =
									  %% Line 290
									  call 'erlang':'++'
									      ([84|[97|[114|[103|[101|[116|[58|[32]]]]]]]], _cor23)
								      in  let <_cor25> =
									      %% Line 289
									      [46|[32|_cor24]]
									  in  let <_cor26> =
										  %% Line 289
										  call 'erlang':'++'
										      (Errno, _cor25)
									      in  %% Line 289
										  call 'erlang':'++'
										      ([70|[105|[108|[101|[32|[111|[112|[101|[114|[97|[116|[105|[111|[110|[32|[101|[114|[114|[111|[114|[58|[32]]]]]]]]]]]]]]]]]]]]]], _cor26)
					end
				    in  let <_cor31> =
					    %% Line 295
					    call 'erlang':'group_leader'
						()
					in  let <_cor30> =
						%% Line 296
						call 'erlang':'self'
						    ()
					    in  do  %% Line 295
						    call 'erlang':'!'
							('error_logger', {'notify',{'error_report',_cor31,%% Line 296
													  {_cor30,'std_error',_cor28}}})
						    %% Line 297
						    'error'
		  end
	  %% Line 299
	  <_cor45,_cor46,Other> when 'true' ->
	      %% Line 300
	      Other
	end
'loop'/3 =
    %% Line 306
    fun (_cor2,_cor1,_cor0) ->
	%% Line 363
	( case _cor2 of
	    ( <( {'state',_cor24,_cor25,_cor26,_cor27,_rec0,_cor28,_cor29,_cor30}
		 -| ['compiler_generated'] )> when 'true' ->
		  receive
		    <{Pid,Req}>
			when call 'erlang':'is_pid'
			      (Pid) ->
			let <Resp,State2,Paths2> =
			    case Req of
			      <{'set_path',NewPaths}> when 'true' ->
				  let <_cor6> =
				      apply 'to_strs'/1
					  (NewPaths)
				  in  <'ok',_cor2,_cor6>
			      <{'get_path',_cor32}> when 'true' ->
				  <{'ok',_cor0},_cor2,_cor0>
			      <{'get_file',File}> when 'true' ->
				  case apply 'handle_get_file'/3
					   (_cor2, _cor0, File) of
				    <{Res,State1}> when 'true' ->
					<Res,State1,_cor0>
				    ( <_cor7> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor7})
				      -| ['compiler_generated'] )
				  end
			      <{'get_files',{ModFiles,Fun}}> when 'true' ->
				  case apply 'handle_get_files'/4
					   (_cor2, ModFiles, _cor0, Fun) of
				    <{Res,State1}> when 'true' ->
					<Res,State1,_cor0>
				    ( <_cor8> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor8})
				      -| ['compiler_generated'] )
				  end
			      <{'list_dir',Dir}> when 'true' ->
				  case apply 'handle_list_dir'/2
					   (_cor2, Dir) of
				    <{Res,State1}> when 'true' ->
					<Res,State1,_cor0>
				    ( <_cor9> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor9})
				      -| ['compiler_generated'] )
				  end
			      <{'read_file_info',File}> when 'true' ->
				  case apply 'handle_read_file_info'/2
					   (_cor2, File) of
				    <{Res,State1}> when 'true' ->
					<Res,State1,_cor0>
				    ( <_cor10> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor10})
				      -| ['compiler_generated'] )
				  end
			      <{'get_cwd',[]}> when 'true' ->
				  case apply 'handle_get_cwd'/2
					   (_cor2, []) of
				    <{Res,State1}> when 'true' ->
					<Res,State1,_cor0>
				    ( <_cor11> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor11})
				      -| ['compiler_generated'] )
				  end
			      <{'get_cwd',Args = [_cor33|[]]}> when 'true' ->
				  case apply 'handle_get_cwd'/2
					   (_cor2, Args) of
				    <{Res,State1}> when 'true' ->
					<Res,State1,_cor0>
				    ( <_cor12> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor12})
				      -| ['compiler_generated'] )
				  end
			      <{'set_primary_archive',File,ArchiveBin,FileInfo,ParserFun}> when 'true' ->
				  case apply 'handle_set_primary_archive'/5
					   (_cor2, File, ArchiveBin, FileInfo, ParserFun) of
				    <{Res,State1}> when 'true' ->
					<Res,State1,_cor0>
				    ( <_cor13> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor13})
				      -| ['compiler_generated'] )
				  end
			      <'release_archives'> when 'true' ->
				  case apply 'handle_release_archives'/1
					   (_cor2) of
				    <{Res,State1}> when 'true' ->
					<Res,State1,_cor0>
				    ( <_cor14> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor14})
				      -| ['compiler_generated'] )
				  end
			      <_X_Other> when 'true' ->
				  <'ignore',_cor2,_cor0>
			    end
			in  do  case <> of
				  <>
				      when call 'erlang':'=:='
					    (Resp,
					     'ignore') ->
				      'ok'
				  <> when 'true' ->
				      let <_cor18> =
					  call 'erlang':'self'
					      ()
				      in  do  call 'erlang':'!'
						  (Pid, {_cor18,Resp})
					      'ok'
				end
				case <> of
				  <>
				      when ( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'is_record'
									       -| ['compiler_generated'] )
					      (State2,
					       'state',
					       9)
					  -| ['compiler_generated'] ) ->
				      apply 'loop'/3
					  (State2, _cor1, Paths2)
				  <> when 'true' ->
				      call 'erlang':'exit'
					  ({'bad_state',Req,State2})
				end
		    <{'EXIT',_cor34,W}>
			when call 'erlang':'=:='
			      (_cor34,
			       _cor1) ->
			let <_X_State1> =
			    apply 'handle_stop'/1
				(_cor2)
			in  call 'erlang':'exit'
				(W)
		    <{'EXIT',P,W}> when 'true' ->
			let <State1> =
			    apply 'handle_exit'/3
				(_cor2, P, W)
			in  apply 'loop'/3
				(State1, _cor1, _cor0)
		    <_X_Message> when 'true' ->
			apply 'loop'/3
			    (_cor2, _cor1, _cor0)
		  after _rec0 ->
		    let <State1> =
			%% Line 364
			apply 'handle_timeout'/2
			    (_cor2, _cor1)
		    in  %% Line 365
			apply 'loop'/3
			    (State1, _cor1, _cor0)
	      -| ['compiler_generated'] )
	    ( <_cor31> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','state'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'handle_get_files'/4 =
    %% Line 368
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <State = {'state',_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,'true',_cor17},ModFiles,Paths,Fun> when 'true' ->
	      let <_cor6> =
		  %% Line 369
		  ( fun () ->
			let <_cor4> =
			    catch
				apply 'efile_multi_get_file_from_port'/4
				    (State, ModFiles, Paths, Fun)
			in  case _cor4 of
			      <{'EXIT',XXXReason}> when 'true' ->
				  {{'error',XXXReason},State}
			      <XXXRes> when 'true' ->
				  XXXRes
			    end
		    -| [{'id',{0,0,'-handle_get_files/4-fun-0-'}}] )
	      in  %% Line 369
		  apply _cor6
		      ()
	  %% Line 370
	  <State,_X_ModFiles,_X_Paths,_X_Fun> when 'true' ->
	      %% Line 371
	      {{'error','no_multi_get'},State}
	end
'handle_get_file'/3 =
    %% Line 373
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <State = {'state','efile',_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18},Paths,File> when 'true' ->
	      let <_cor5> =
		  %% Line 374
		  ( fun () ->
			let <_cor3> =
			    catch
				apply 'efile_get_file_from_port'/3
				    (State, File, Paths)
			in  case _cor3 of
			      <{'EXIT',XXXReason}> when 'true' ->
				  {{'error',XXXReason},State}
			      <XXXRes> when 'true' ->
				  XXXRes
			    end
		    -| [{'id',{0,0,'-handle_get_file/3-fun-0-'}}] )
	      in  %% Line 374
		  apply _cor5
		      ()
	  %% Line 375
	  <State = {'state','inet',_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25},Paths,File> when 'true' ->
	      let <_cor8> =
		  %% Line 376
		  ( fun () ->
			let <_cor6> =
			    catch
				apply 'inet_get_file_from_port'/3
				    (State, File, Paths)
			in  case _cor6 of
			      <{'EXIT',XXXReason}> when 'true' ->
				  {{'error',XXXReason},State}
			      <XXXRes> when 'true' ->
				  XXXRes
			    end
		    -| [{'id',{0,0,'-handle_get_file/3-fun-1-'}}] )
	      in  %% Line 376
		  apply _cor8
		      ()
	  ( <_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9})
		  -| [{'function_name',{'handle_get_file',3}}] )
	    -| ['compiler_generated'] )
	end
'handle_set_primary_archive'/5 =
    %% Line 378
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <State = {'state','efile',_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19},File,ArchiveBin,FileInfo,ParserFun> when 'true' ->
	      let <_cor7> =
		  %% Line 379
		  ( fun () ->
			let <_cor5> =
			    catch
				apply 'efile_set_primary_archive'/5
				    (State, File, ArchiveBin, FileInfo, ParserFun)
			in  case _cor5 of
			      <{'EXIT',XXXReason}> when 'true' ->
				  {{'error',XXXReason},State}
			      <XXXRes> when 'true' ->
				  XXXRes
			    end
		    -| [{'id',{0,0,'-handle_set_primary_archive/5-fun-0-'}}] )
	      in  %% Line 379
		  apply _cor7
		      ()
	  ( <_cor12,_cor11,_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10,_cor9,_cor8})
		  -| [{'function_name',{'handle_set_primary_archive',5}}] )
	    -| ['compiler_generated'] )
	end
'handle_release_archives'/1 =
    %% Line 381
    fun (_cor0) ->
	case _cor0 of
	  <State = {'state','efile',_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11}> when 'true' ->
	      let <_cor3> =
		  %% Line 382
		  ( fun () ->
			let <_cor1> =
			    catch
				apply 'efile_release_archives'/1
				    (State)
			in  case _cor1 of
			      <{'EXIT',XXXReason}> when 'true' ->
				  {{'error',XXXReason},State}
			      <XXXRes> when 'true' ->
				  XXXRes
			    end
		    -| [{'id',{0,0,'-handle_release_archives/1-fun-0-'}}] )
	      in  %% Line 382
		  apply _cor3
		      ()
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'handle_release_archives',1}}] )
	    -| ['compiler_generated'] )
	end
'handle_list_dir'/2 =
    %% Line 384
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <State = {'state','efile',_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16},Dir> when 'true' ->
	      let <_cor4> =
		  %% Line 385
		  ( fun () ->
			let <_cor2> =
			    catch
				apply 'efile_list_dir'/2
				    (State, Dir)
			in  case _cor2 of
			      <{'EXIT',XXXReason}> when 'true' ->
				  {{'error',XXXReason},State}
			      <XXXRes> when 'true' ->
				  XXXRes
			    end
		    -| [{'id',{0,0,'-handle_list_dir/2-fun-0-'}}] )
	      in  %% Line 385
		  apply _cor4
		      ()
	  %% Line 386
	  <State = {'state','inet',_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23},Dir> when 'true' ->
	      let <_cor7> =
		  %% Line 387
		  ( fun () ->
			let <_cor5> =
			    catch
				apply 'inet_list_dir'/2
				    (State, Dir)
			in  case _cor5 of
			      <{'EXIT',XXXReason}> when 'true' ->
				  {{'error',XXXReason},State}
			      <XXXRes> when 'true' ->
				  XXXRes
			    end
		    -| [{'id',{0,0,'-handle_list_dir/2-fun-1-'}}] )
	      in  %% Line 387
		  apply _cor7
		      ()
	  ( <_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8})
		  -| [{'function_name',{'handle_list_dir',2}}] )
	    -| ['compiler_generated'] )
	end
'handle_read_file_info'/2 =
    %% Line 389
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <State = {'state','efile',_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16},File> when 'true' ->
	      let <_cor4> =
		  %% Line 390
		  ( fun () ->
			let <_cor2> =
			    catch
				apply 'efile_read_file_info'/2
				    (State, File)
			in  case _cor2 of
			      <{'EXIT',XXXReason}> when 'true' ->
				  {{'error',XXXReason},State}
			      <XXXRes> when 'true' ->
				  XXXRes
			    end
		    -| [{'id',{0,0,'-handle_read_file_info/2-fun-0-'}}] )
	      in  %% Line 390
		  apply _cor4
		      ()
	  %% Line 391
	  <State = {'state','inet',_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23},File> when 'true' ->
	      let <_cor7> =
		  %% Line 392
		  ( fun () ->
			let <_cor5> =
			    catch
				apply 'inet_read_file_info'/2
				    (State, File)
			in  case _cor5 of
			      <{'EXIT',XXXReason}> when 'true' ->
				  {{'error',XXXReason},State}
			      <XXXRes> when 'true' ->
				  XXXRes
			    end
		    -| [{'id',{0,0,'-handle_read_file_info/2-fun-1-'}}] )
	      in  %% Line 392
		  apply _cor7
		      ()
	  ( <_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8})
		  -| [{'function_name',{'handle_read_file_info',2}}] )
	    -| ['compiler_generated'] )
	end
'handle_get_cwd'/2 =
    %% Line 394
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <State = {'state','efile',_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16},Drive> when 'true' ->
	      let <_cor4> =
		  %% Line 395
		  ( fun () ->
			let <_cor2> =
			    catch
				apply 'efile_get_cwd'/2
				    (State, Drive)
			in  case _cor2 of
			      <{'EXIT',XXXReason}> when 'true' ->
				  {{'error',XXXReason},State}
			      <XXXRes> when 'true' ->
				  XXXRes
			    end
		    -| [{'id',{0,0,'-handle_get_cwd/2-fun-0-'}}] )
	      in  %% Line 395
		  apply _cor4
		      ()
	  %% Line 396
	  <State = {'state','inet',_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23},Drive> when 'true' ->
	      let <_cor7> =
		  %% Line 397
		  ( fun () ->
			let <_cor5> =
			    catch
				apply 'inet_get_cwd'/2
				    (State, Drive)
			in  case _cor5 of
			      <{'EXIT',XXXReason}> when 'true' ->
				  {{'error',XXXReason},State}
			      <XXXRes> when 'true' ->
				  XXXRes
			    end
		    -| [{'id',{0,0,'-handle_get_cwd/2-fun-1-'}}] )
	      in  %% Line 397
		  apply _cor7
		      ()
	  ( <_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8})
		  -| [{'function_name',{'handle_get_cwd',2}}] )
	    -| ['compiler_generated'] )
	end
'handle_stop'/1 =
    %% Line 399
    fun (_cor0) ->
	case _cor0 of
	  <State = {'state','efile',_cor2,_cor3,_cor4,_cor5,_cor6,_cor7,_cor8}> when 'true' ->
	      %% Line 400
	      apply 'efile_stop_port'/1
		  (State)
	  %% Line 401
	  <State = {'state','inet',_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15}> when 'true' ->
	      %% Line 402
	      apply 'inet_stop_port'/1
		  (State)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'handle_stop',1}}] )
	    -| ['compiler_generated'] )
	end
'handle_exit'/3 =
    %% Line 404
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <State = {'state','efile',_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12},Who,Reason> when 'true' ->
	      %% Line 405
	      apply 'efile_exit_port'/3
		  (State, Who, Reason)
	  %% Line 406
	  <State = {'state','inet',_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19},Who,Reason> when 'true' ->
	      %% Line 407
	      apply 'inet_exit_port'/3
		  (State, Who, Reason)
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'handle_exit',3}}] )
	    -| ['compiler_generated'] )
	end
'handle_timeout'/2 =
    %% Line 409
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <State = {'state','efile',_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,_cor10},Parent> when 'true' ->
	      %% Line 410
	      apply 'efile_timeout_handler'/2
		  (State, Parent)
	  %% Line 411
	  <State = {'state','inet',_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17},Parent> when 'true' ->
	      %% Line 412
	      apply 'inet_timeout_handler'/2
		  (State, Parent)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'handle_timeout',2}}] )
	    -| ['compiler_generated'] )
	end
'efile_multi_get_file_from_port'/4 =
    %% Line 422
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <Ref> =
	    %% Line 423
	    call 'erlang':'make_ref'
		()
	in  let <_cor5> =
		%% Line 425
		call 'erlang':'system_info'
		    ('thread_pool_size')
	    in  let <Max> =
		    %% Line 425
		    call 'erlang':'min'
			(200, _cor5)
		in  %% Line 426
		    apply 'efile_multi_get_file_from_port2'/8
			(_cor2, 0, Max, _cor3, _cor1, _cor0, Ref, 'ok')
'efile_multi_get_file_from_port2'/8 =
    %% Line 428
    fun (_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[MF|MFs],Out,Max,State,Paths,Fun,Ref,Ret>
	      when call 'erlang':'<'
		    (Out,
		     Max) ->
	      let <Self> =
		  %% Line 429
		  call 'erlang':'self'
		      ()
	      in  let <_cor9> =
		      %% Line 430
		      ( fun () ->
			    apply 'efile_par_get_file'/6
				(Ref, State, MF, Paths, Self, Fun)
			-| [{'id',{0,0,'-efile_multi_get_file_from_port2/8-fun-0-'}}] )
		  in  let <_X_Pid> =
			  %% Line 430
			  call 'erlang':'spawn'
			      (_cor9)
		      in  let <_cor11> =
			      %% Line 431
			      call 'erlang':'+'
				  (Out, 1)
			  in  %% Line 431
			      apply 'efile_multi_get_file_from_port2'/8
				  (MFs, _cor11, Max, State, Paths, Fun, Ref, Ret)
	  %% Line 432
	  <MFs,Out,Max,_X_State,Paths,Fun,Ref,Ret>
	      when call 'erlang':'>'
		    (Out,
		     0) ->
	      %% Line 433
	      receive
		%% Line 434
		<{_cor25,'ok',State1}>
		    when call 'erlang':'=:='
			  (_cor25,
			   Ref) ->
		    let <_cor12> =
			%% Line 435
			call 'erlang':'-'
			    (Out, 1)
		    in  %% Line 435
			apply 'efile_multi_get_file_from_port2'/8
			    (MFs, _cor12, Max, State1, Paths, Fun, Ref, Ret)
		%% Line 436
		<{_cor26,Error = {'error',_X_Mod},State1}>
		    when call 'erlang':'=:='
			  (_cor26,
			   Ref) ->
		    let <_cor13> =
			%% Line 437
			call 'erlang':'-'
			    (Out, 1)
		    in  %% Line 437
			apply 'efile_multi_get_file_from_port2'/8
			    (MFs, _cor13, Max, State1, Paths, Fun, Ref, Error)
		%% Line 438
		<{_cor27,MF,{'error','emfile',State1}}>
		    when call 'erlang':'=:='
			  (_cor27,
			   Ref) ->
		    let <_cor15> =
			%% Line 440
			call 'erlang':'-'
			    (Out, 1)
		    in  let <_cor14> =
			    %% Line 440
			    call 'erlang':'-'
				(Max, 1)
			in  %% Line 440
			    apply 'efile_multi_get_file_from_port2'/8
				([MF|MFs], _cor15, _cor14, State1, Paths, Fun, Ref, Ret)
		%% Line 441
		<{_cor28,{M,_X_F},{'error',Error,State1}}>
		    when call 'erlang':'=:='
			  (_cor28,
			   Ref) ->
		    let <_cor16> =
			%% Line 442
			call 'erlang':'-'
			    (Out, 1)
		    in  %% Line 442
			apply 'efile_multi_get_file_from_port2'/8
			    (MFs, _cor16, 0, State1, Paths, Fun, Ref, {'error',Error,M})
	      after 'infinity' ->
		'true'
	  %% Line 444
	  <_X_MFs,0,_X_Max,State,_X_Paths,_X_Fun,_X_Ref,Ret> when 'true' ->
	      %% Line 445
	      {Ret,State}
	  ( <_cor24,_cor23,_cor22,_cor21,_cor20,_cor19,_cor18,_cor17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor24,_cor23,_cor22,_cor21,_cor20,_cor19,_cor18,_cor17})
		  -| [{'function_name',{'efile_multi_get_file_from_port2',8}}] )
	    -| ['compiler_generated'] )
	end
'efile_par_get_file'/6 =
    %% Line 447
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Ref,State,MF = {Mod,File},Paths,Pid,Fun> when 'true' ->
	      %% Line 449
	      case call 'prim_file':'start'
		       () of
		%% Line 450
		<{'ok',Port}> when 'true' ->
		    %% Line 451
		    ( case State of
			( <( {'state',_cor27,_cor28,_cor29,_rec1,_cor30,_cor31,_cor32,_cor33}
			     -| ['compiler_generated'] )> when 'true' ->
			      let <_cor11> =
				  %% Line 452
				  call 'erlang':'setelement'
				      (5, State, Port)
			      in  let <_cor18> =
				      %% Line 453
				      case apply 'efile_get_file_from_port'/3
					       (_cor11, File, Paths) of
					%% Line 454
					<{{'error',Reason},State2}> when 'true' ->
					    %% Line 455
					    {Ref,MF,{'error',Reason,State2}}
					%% Line 456
					<{{'ok',BinFile,Full},State2}> when 'true' ->
					    let <_cor16> =
						%% Line 458
						apply Fun
						    (Mod, BinFile, Full)
					    in  %% Line 458
						case State2 of
						  <{'state',_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51}> when 'true' ->
						      let <_cor15> =
							  call 'erlang':'setelement'
							      (5, State2, _rec1)
						      in  {Ref,_cor16,_cor15}
						  ( <_cor52> when 'true' ->
							( call ( 'erlang'
								 -| ['compiler_generated'] ):( 'error'
											       -| ['compiler_generated'] )
							      (( {'badrecord','state'}
								 -| ['compiler_generated'] ))
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						end
					( <_cor17> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_cor17})
					  -| ['compiler_generated'] )
				      end
				  in  do  %% Line 460
					  call 'prim_file':'close'
					      (Port)
					  %% Line 461
					  call 'erlang':'!'
					      (Pid, _cor18)
			  -| ['compiler_generated'] )
			( <_cor34> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','state'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		%% Line 462
		<{'error',Error}> when 'true' ->
		    %% Line 463
		    call 'erlang':'!'
			(Pid, {Ref,MF,{'error',Error,State}})
		( <_cor20> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor20})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor26,_cor25,_cor24,_cor23,_cor22,_cor21> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor26,_cor25,_cor24,_cor23,_cor22,_cor21})
		  -| [{'function_name',{'efile_par_get_file',6}}] )
	    -| ['compiler_generated'] )
	end
'efile_get_file_from_port'/3 =
    %% Line 467
    fun (_cor2,_cor1,_cor0) ->
	%% Line 468
	case apply 'is_basename'/1
		 (_cor1) of
	  %% Line 469
	  <'false'> when 'true' ->
	      %% Line 470
	      apply 'efile_get_file_from_port2'/2
		  (_cor2, _cor1)
	  %% Line 471
	  <'true'>
	      when call 'erlang':'=:='
		    (_cor0,
		     []) ->
	      %% Line 472
	      apply 'efile_get_file_from_port2'/2
		  (_cor2, _cor1)
	  %% Line 473
	  <'true'> when 'true' ->
	      %% Line 474
	      apply 'efile_get_file_from_port3'/3
		  (_cor2, _cor1, _cor0)
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor3})
	    -| ['compiler_generated'] )
	end
'efile_get_file_from_port2'/2 =
    %% Line 477
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <State = {'state',_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,PS},File> when 'true' ->
	      %% Line 478
	      case apply 'prim_get_file'/2
		       (PS, File) of
		<{Res,PS2}> when 'true' ->
		    %% Line 479
		    case Res of
		      %% Line 480
		      <{'error','port_died'}> when 'true' ->
			  %% Line 481
			  call 'erlang':'exit'
			      ('prim_load port died')
		      %% Line 482
		      <{'error',Reason}> when 'true' ->
			  let <_cor5> =
			      %% Line 483
			      call 'erlang':'setelement'
				  (9, State, PS2)
			  in  %% Line 483
			      {{'error',Reason},_cor5}
		      %% Line 484
		      <{'ok',BinFile}> when 'true' ->
			  let <_cor8> =
			      %% Line 485
			      call 'erlang':'setelement'
				  (9, State, PS2)
			  in  %% Line 485
			      {{'ok',BinFile,File},_cor8}
		      ( <_cor9> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor9})
			-| ['compiler_generated'] )
		    end
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10})
		  -| [{'function_name',{'efile_get_file_from_port2',2}}] )
	    -| ['compiler_generated'] )
	end
'efile_get_file_from_port3'/3 =
    %% Line 488
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <State,File,[P|Paths]> when 'true' ->
	      let <_cor3> =
		  %% Line 489
		  apply 'join'/2
		      (P, File)
	      in  %% Line 489
		  case apply 'efile_get_file_from_port2'/2
			   (State, _cor3) of
		    %% Line 490
		    <{{'error',Reason},State1}>
			when call 'erlang':'=/='
			      (Reason,
			       'emfile') ->
			%% Line 491
			case Paths of
			  %% Line 492
			  <[]> when 'true' ->
			      %% Line 493
			      {{'error',Reason},State1}
			  %% Line 494
			  <_cor9> when 'true' ->
			      %% Line 495
			      apply 'efile_get_file_from_port3'/3
				  (State1, File, Paths)
			end
		    %% Line 497
		    <Result> when 'true' ->
			%% Line 498
			Result
		  end
	  %% Line 500
	  <State,_X_File,[]> when 'true' ->
	      %% Line 501
	      {{'error','enoent'},State}
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'efile_get_file_from_port3',3}}] )
	    -| ['compiler_generated'] )
	end
'efile_set_primary_archive'/5 =
    %% Line 503
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <State = {'state',_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,PS},File,%% Line 504
										      ArchiveBin,%% Line 504
												 FileInfo,%% Line 504
													  ParserFun> when 'true' ->
	      %% Line 505
	      case apply 'prim_set_primary_archive'/5
		       (PS, File, ArchiveBin, %% Line 506
					      FileInfo, %% Line 506
							ParserFun) of
		<{Res,PS2}> when 'true' ->
		    let <_cor8> =
			%% Line 507
			call 'erlang':'setelement'
			    (9, State, PS2)
		    in  %% Line 507
			{Res,_cor8}
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor5})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor13,_cor12,_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11,_cor10,_cor9})
		  -| [{'function_name',{'efile_set_primary_archive',5}}] )
	    -| ['compiler_generated'] )
	end
'efile_release_archives'/1 =
    %% Line 509
    fun (_cor0) ->
	case _cor0 of
	  <State = {'state',_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,PS}> when 'true' ->
	      %% Line 510
	      case apply 'prim_release_archives'/1
		       (PS) of
		<{Res,PS2}> when 'true' ->
		    let <_cor4> =
			%% Line 511
			call 'erlang':'setelement'
			    (9, State, PS2)
		    in  %% Line 511
			{Res,_cor4}
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5})
		  -| [{'function_name',{'efile_release_archives',1}}] )
	    -| ['compiler_generated'] )
	end
'efile_list_dir'/2 =
    %% Line 513
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <State = {'state',_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,PS},Dir> when 'true' ->
	      %% Line 514
	      case apply 'prim_list_dir'/2
		       (PS, Dir) of
		<{Res,PS2}> when 'true' ->
		    let <_cor5> =
			%% Line 515
			call 'erlang':'setelement'
			    (9, State, PS2)
		    in  %% Line 515
			{Res,_cor5}
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6})
		  -| [{'function_name',{'efile_list_dir',2}}] )
	    -| ['compiler_generated'] )
	end
'efile_read_file_info'/2 =
    %% Line 517
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <State = {'state',_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,PS},File> when 'true' ->
	      %% Line 518
	      case apply 'prim_read_file_info'/2
		       (PS, File) of
		<{Res,PS2}> when 'true' ->
		    let <_cor5> =
			%% Line 519
			call 'erlang':'setelement'
			    (9, State, PS2)
		    in  %% Line 519
			{Res,_cor5}
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6})
		  -| [{'function_name',{'efile_read_file_info',2}}] )
	    -| ['compiler_generated'] )
	end
'efile_get_cwd'/2 =
    %% Line 521
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <State = {'state',_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,PS},Drive> when 'true' ->
	      %% Line 522
	      case apply 'prim_get_cwd'/2
		       (PS, Drive) of
		<{Res,PS2}> when 'true' ->
		    let <_cor5> =
			%% Line 523
			call 'erlang':'setelement'
			    (9, State, PS2)
		    in  %% Line 523
			{Res,_cor5}
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6})
		  -| [{'function_name',{'efile_get_cwd',2}}] )
	    -| ['compiler_generated'] )
	end
'efile_stop_port'/1 =
    %% Line 525
    fun (_cor0) ->
	case _cor0 of
	  <State = {'state',_cor4,_cor5,_cor6,Port,_cor7,_cor8,_cor9,_cor10}> when 'true' ->
	      do  %% Line 526
		  call 'prim_file':'close'
		      (Port)
		  %% Line 527
		  call 'erlang':'setelement'
		      (5, State, 'noport')
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'efile_stop_port',1}}] )
	    -| ['compiler_generated'] )
	end
'efile_exit_port'/3 =
    %% Line 529
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <State = {'state',_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19},Port,Reason>
	      when call 'erlang':'=:='
		    (_cor15,
		     Port) ->
	      %% Line 530
	      call 'erlang':'exit'
		  ({'port_died',Reason})
	  %% Line 531
	  <State,_X_Port,_X_Reason> when 'true' ->
	      %% Line 532
	      State
	end
'efile_timeout_handler'/2 =
    %% Line 534
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <State = {'state',_cor10,_cor11,_cor12,_cor13,_cor14,N,_cor15,_cor16},_X_Parent> when 'true' ->
	      %% Line 535
	      case <> of
		%% Line 536
		<>
		    when call 'erlang':'=<'
			  (N,
			   0) ->
		    %% Line 537
		    case apply 'efile_release_archives'/1
			     (State) of
		      <{_X_Res,State2}> when 'true' ->
			  %% Line 538
			  case State2 of
			    <{'state',_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24}> when 'true' ->
				call 'erlang':'setelement'
				    (7, State2, 6)
			    ( <_cor25> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','state'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
		      ( <_cor2> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor2})
			-| ['compiler_generated'] )
		    end
		%% Line 539
		<> when 'true' ->
		    let <_rec13> =
			%% Line 540
			call 'erlang':'-'
			    (N, 1)
		    in  %% Line 540
			call 'erlang':'setelement'
			    (7, State, _rec13)
	      end
	  ( <_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8})
		  -| [{'function_name',{'efile_timeout_handler',2}}] )
	    -| ['compiler_generated'] )
	end
'find_master'/1 =
    %% Line 552
    fun (_cor0) ->
	%% Line 553
	apply 'find_master'/6
	    (_cor0, 3, 500, 10000, %% Line 554
				   10, %% Line 554
				       60000)
'find_master'/6 =
    %% Line 556
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 557
	case apply 'll_udp_open'/1
		 (0) of
	  <{'ok',U}> when 'true' ->
	      %% Line 558
	      apply 'find_master'/8
		  (U, _cor4, _cor5, _cor3, _cor2, [], _cor1, _cor0)
	  ( <_cor6> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor6})
	    -| ['compiler_generated'] )
	end
'find_master'/8 =
    %% Line 563
    fun (_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 564
	case apply 'find_loop'/8
		 (_cor7, _cor6, _cor5, _cor4, _cor3, _cor2, _cor1, _cor0) of
	  %% Line 566
	  <[]> when 'true' ->
	      %% Line 567
	      apply 'find_master'/8
		  (_cor7, _cor6, _cor5, _cor4, _cor3, _cor2, _cor1, _cor0)
	  %% Line 569
	  <Servers> when 'true' ->
	      %% Line 571
	      case apply 'connect_master'/1
		       (Servers) of
		%% Line 572
		<{'ok',Socket}> when 'true' ->
		    do  %% Line 573
			apply 'll_close'/1
			    (_cor7)
			%% Line 574
			{'ok',Socket}
		%% Line 575
		<_X_Error> when 'true' ->
		    let <_cor8> =
			%% Line 577
			call 'erlang':'++'
			    (Servers, _cor2)
		    in  %% Line 576
			apply 'find_master'/8
			    (_cor7, _cor6, _cor5, _cor4, _cor3, _cor8, _cor1, _cor0)
	      end
	end
'connect_master'/1 =
    %% Line 581
    fun (_cor0) ->
	case _cor0 of
	  <[{_X_Prio,IP,Port}|Servers]> when 'true' ->
	      %% Line 582
	      case apply 'll_tcp_connect'/3
		       (0, IP, Port) of
		%% Line 583
		<{'ok',S}> when 'true' ->
		    {'ok',S}
		%% Line 584
		<_X_Error> when 'true' ->
		    apply 'connect_master'/1
			(Servers)
	      end
	  %% Line 586
	  <[]> when 'true' ->
	      %% Line 587
	      {'error','ebusy'}
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'connect_master',1}}] )
	    -| ['compiler_generated'] )
	end
'find_loop'/8 =
    %% Line 592
    fun (_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 593
	case apply 'find_loop'/5
		 (_cor7, _cor6, _cor5, _cor4, []) of
	  %% Line 594
	  <[]> when 'true' ->
	      do  %% Line 595
		  call 'erlang':'display'
		      ({'erl_prim_loader','no server found'})
		  let <_cor8> =
		      %% Line 597
		      case <> of
			<>
			    when call 'erlang':'>'
				  (_cor1,
				   0) ->
			    do  %% Line 598
				apply 'sleep'/1
				    (_cor3)
				%% Line 599
				call 'erlang':'-'
				    (_cor1, 1)
			%% Line 600
			<> when 'true' ->
			    do  %% Line 601
				apply 'sleep'/1
				    (_cor0)
				%% Line 602
				0
		      end
		  in  %% Line 604
		      apply 'find_loop'/8
			  (_cor7, _cor6, _cor5, _cor4, _cor3, _cor2, _cor8, _cor0)
	  %% Line 605
	  <Servers> when 'true' ->
	      let <_cor10> =
		  %% Line 606
		  call 'erlang':'--'
		      (Servers, _cor2)
	      in  %% Line 606
		  apply 'keysort'/2
		      (1, _cor10)
	end
'find_loop'/5 =
    %% Line 610
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <_X_U,0,_X_AL,_X_Delay,Acc> when 'true' ->
	      %% Line 611
	      Acc
	  %% Line 612
	  <U,Retry,AL,Delay,Acc> when 'true' ->
	      let <_cor5> =
		  %% Line 613
		  call 'erlang':'system_info'
		      ('version')
	      in  do  %% Line 613
		      apply 'send_all'/3
			  (U, AL, [[69|[66|[79|[79|[84|[81]]]]]]|[_cor5|[]]])
		      let <_cor6> =
			  %% Line 614
			  call 'erlang':'-'
			      (Retry, 1)
		      in  %% Line 614
			  apply 'find_collect'/5
			      (U, _cor6, AL, Delay, Acc)
	end
'find_collect'/5 =
    %% Line 616
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 617
	receive
	  %% Line 618
	  <{'udp',_cor15,IP,_X_Port,[69|[66|[79|[79|[84|[82|[Priority|[T1|[T0|_X_Version]]]]]]]]]}>
	      when call 'erlang':'=:='
		    (_cor15,
		     _cor4) ->
	      let <_cor6> =
		  %% Line 619
		  call 'erlang':'*'
		      (T1, 256)
	      in  let <_cor7> =
		      %% Line 619
		      call 'erlang':'+'
			  (_cor6, T0)
		  in  let <Elem> = {%% Line 619
			   Priority,%% Line 619
				    IP,_cor7}
		      in  %% Line 621
			  case apply 'member'/2
				   (Elem, _cor0) of
			    %% Line 622
			    <'false'> when 'true' ->
				apply 'find_collect'/5
				    (_cor4, _cor3, _cor2, _cor1, [Elem|_cor0])
			    %% Line 623
			    <'true'> when 'true' ->
				apply 'find_collect'/5
				    (_cor4, _cor3, _cor2, _cor1, _cor0)
			    ( <_cor9> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor9})
			      -| ['compiler_generated'] )
			  end
	  %% Line 625
	  <_X_Garbage> when 'true' ->
	      %% Line 627
	      apply 'find_collect'/5
		  (_cor4, _cor3, _cor2, _cor1, _cor0)
	after _cor1 ->
	  %% Line 630
	  case apply 'keymember'/3
		   (0, 1, _cor0) of
	    %% Line 631
	    <'true'> when 'true' ->
		_cor0
	    %% Line 632
	    <'false'> when 'true' ->
		apply 'find_loop'/5
		    (_cor4, _cor3, _cor2, _cor1, _cor0)
	    ( <_cor5> when 'true' ->
		  primop 'match_fail'
		      ({'case_clause',_cor5})
	      -| ['compiler_generated'] )
	  end
'sleep'/1 =
    %% Line 637
    fun (_cor0) ->
	%% Line 638
	receive
	  
	after _cor0 ->
	  'ok'
'inet_exit_port'/3 =
    %% Line 640
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <State = {'state',_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22},Port,_X_Reason>
	      when call 'erlang':'=:='
		    (_cor18,
		     Port) ->
	      let <_cor10> =
		  %% Line 641
		  call 'erlang':'setelement'
		      (6, State, 'infinity')
	      in  %% Line 641
		  call 'erlang':'setelement'
		      (5, _cor10, 'noport')
	  %% Line 642
	  <State,_cor32,_cor33> when 'true' ->
	      %% Line 643
	      State
	end
'inet_timeout_handler'/2 =
    %% Line 646
    fun (_cor1,_cor0) ->
	%% Line 647
	( case _cor1 of
	    ( <( {'state',_cor10,_cor11,_cor12,_rec16,_cor13,_cor14,_cor15,_cor16}
		 -| ['compiler_generated'] )> when 'true' ->
		  do  %% Line 648
		      case <> of
			<>
			    when call 'erlang':'is_port'
				  (_rec16) ->
			    apply 'll_close'/1
				(_rec16)
			%% Line 649
			<> when 'true' ->
			    'ok'
		      end
		      let <_cor6> =
			  %% Line 651
			  call 'erlang':'setelement'
			      (6, _cor1, 'infinity')
		      in  %% Line 651
			  call 'erlang':'setelement'
			      (5, _cor6, 'noport')
	      -| ['compiler_generated'] )
	    ( <_cor17> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','state'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'inet_get_file_from_port'/3 =
    %% Line 654
    fun (_cor2,_cor1,_cor0) ->
	%% Line 655
	case apply 'is_basename'/1
		 (_cor1) of
	  %% Line 656
	  <'false'> when 'true' ->
	      %% Line 657
	      apply 'inet_send_and_rcv'/3
		  ({'get',_cor1}, _cor1, _cor2)
	  %% Line 658
	  <'true'>
	      when call 'erlang':'=:='
		    (_cor0,
		     []) ->
	      %% Line 659
	      apply 'inet_send_and_rcv'/3
		  ({'get',_cor1}, _cor1, _cor2)
	  %% Line 660
	  <'true'> when 'true' ->
	      %% Line 661
	      apply 'inet_get_file_from_port1'/3
		  (_cor1, _cor0, _cor2)
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor3})
	    -| ['compiler_generated'] )
	end
'inet_get_file_from_port1'/3 =
    %% Line 664
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <File,[P|Paths],State> when 'true' ->
	      let <File1> =
		  %% Line 665
		  apply 'join'/2
		      (P, File)
	      in  %% Line 666
		  case apply 'inet_send_and_rcv'/3
			   ({'get',File1}, File1, State) of
		    %% Line 667
		    <{{'error',Reason},State1}> when 'true' ->
			%% Line 668
			case Paths of
			  %% Line 669
			  <[]> when 'true' ->
			      %% Line 670
			      {{'error',Reason},State1}
			  %% Line 671
			  <_cor9> when 'true' ->
			      %% Line 672
			      apply 'inet_get_file_from_port1'/3
				  (File, Paths, State1)
			end
		    %% Line 674
		    <Result> when 'true' ->
			Result
		  end
	  %% Line 676
	  <_X_File,[],State> when 'true' ->
	      %% Line 677
	      {{'error','file_not_found'},State}
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'inet_get_file_from_port1',3}}] )
	    -| ['compiler_generated'] )
	end
'inet_send_and_rcv'/3 =
    %% Line 679
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Msg,Tag,State = {'state',_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37}>
	      when call 'erlang':'=:='
		    (_cor33,
		     'noport') ->
	      %% Line 680
	      case apply 'find_master'/1
		       (_cor31) of
		<{'ok',Tcp}> when 'true' ->
		    let <_cor13> =
			%% Line 682
			call 'erlang':'setelement'
			    (6, State, 60000)
		    in  let <_cor15> =
			    %% Line 681
			    call 'erlang':'setelement'
				(5, _cor13, Tcp)
			in  %% Line 681
			    apply 'inet_send_and_rcv'/3
				(Msg, Tag, _cor15)
		( <_cor11> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor11})
		  -| ['compiler_generated'] )
	      end
	  %% Line 683
	  <Msg,Tag,State = {'state',_cor55,_cor56,_cor57,Tcp,Timeout,_cor58,_cor59,_cor60}> when 'true' ->
	      let <_cor16> =
		  %% Line 684
		  call 'erlang':'term_to_binary'
		      (Msg)
	      in  do  %% Line 684
		      call 'prim_inet':'send'
			  (Tcp, _cor16)
		      %% Line 685
		      receive
			%% Line 686
			<{'tcp',_cor61,BinMsg}>
			    when call 'erlang':'=:='
				  (_cor61,
				   Tcp) ->
			    let <_cor18> =
				catch
				    %% Line 687
				    call 'erlang':'binary_to_term'
					(BinMsg)
			    in  %% Line 687
				case _cor18 of
				  %% Line 688
				  <{'get',{'ok',BinFile}}> when 'true' ->
				      %% Line 689
				      {{'ok',BinFile,Tag},State}
				  %% Line 690
				  <{_X_Cmd,Res = {'ok',_cor62}}> when 'true' ->
				      %% Line 691
				      {Res,State}
				  %% Line 692
				  <{_X_Cmd,{'error',Error}}> when 'true' ->
				      %% Line 693
				      {{'error',Error},State}
				  %% Line 694
				  <{'error',Error}> when 'true' ->
				      %% Line 695
				      {{'error',Error},State}
				  %% Line 696
				  <{'EXIT',Error}> when 'true' ->
				      %% Line 697
				      {{'error',Error},State}
				  ( <_cor19> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor19})
				    -| ['compiler_generated'] )
				end
			%% Line 699
			<{'tcp_closed',_cor63}>
			    when call 'erlang':'=:='
				  (_cor63,
				   Tcp) ->
			    let <_cor22> =
				%% Line 701
				call 'erlang':'setelement'
				    (5, State, 'noport')
			    in  %% Line 701
				apply 'inet_send_and_rcv'/3
				    (Msg, Tag, _cor22)
			%% Line 702
			<{'tcp_error',_cor73,_X_Reason}>
			    when call 'erlang':'=:='
				  (_cor73,
				   Tcp) ->
			    let <_cor23> =
				%% Line 704
				apply 'inet_stop_port'/1
				    (State)
			    in  %% Line 704
				apply 'inet_send_and_rcv'/3
				    (Msg, Tag, _cor23)
			%% Line 705
			<{'EXIT',_cor74,_cor75}>
			    when call 'erlang':'=:='
				  (_cor74,
				   Tcp) ->
			    let <_cor26> =
				%% Line 707
				call 'erlang':'setelement'
				    (5, State, 'noport')
			    in  %% Line 707
				apply 'inet_send_and_rcv'/3
				    (Msg, Tag, _cor26)
		      after %% Line 708
			    Timeout ->
			let <_cor17> =
			    %% Line 710
			    apply 'inet_stop_port'/1
				(State)
			in  %% Line 710
			    apply 'inet_send_and_rcv'/3
				(Msg, Tag, _cor17)
	  ( <_cor29,_cor28,_cor27> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor29,_cor28,_cor27})
		  -| [{'function_name',{'inet_send_and_rcv',3}}] )
	    -| ['compiler_generated'] )
	end
'inet_list_dir'/2 =
    %% Line 714
    fun (_cor1,_cor0) ->
	%% Line 715
	apply 'inet_send_and_rcv'/3
	    ({'list_dir',_cor0}, 'list_dir', _cor1)
'inet_read_file_info'/2 =
    %% Line 718
    fun (_cor1,_cor0) ->
	%% Line 719
	apply 'inet_send_and_rcv'/3
	    ({'read_file_info',_cor0}, 'read_file_info', _cor1)
'inet_get_cwd'/2 =
    %% Line 722
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <State,[]> when 'true' ->
	      %% Line 723
	      apply 'inet_send_and_rcv'/3
		  ('get_cwd', 'get_cwd', State)
	  %% Line 724
	  <State,[Drive|[]]> when 'true' ->
	      %% Line 725
	      apply 'inet_send_and_rcv'/3
		  ({'get_cwd',Drive}, 'get_cwd', State)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'inet_get_cwd',2}}] )
	    -| ['compiler_generated'] )
	end
'inet_stop_port'/1 =
    %% Line 727
    fun (_cor0) ->
	case _cor0 of
	  <State = {'state',_cor4,_cor5,_cor6,Tcp,_cor7,_cor8,_cor9,_cor10}> when 'true' ->
	      do  %% Line 728
		  call 'prim_inet':'close'
		      (Tcp)
		  %% Line 729
		  call 'erlang':'setelement'
		      (5, State, 'noport')
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'inet_stop_port',1}}] )
	    -| ['compiler_generated'] )
	end
'tcp_options'/0 =
    %% Line 737
    fun () ->
	%% Line 738
	[{'mode','binary'}|[{'packet',4}|[{'active','true'}|[{'deliver','term'}]]]]
'tcp_timeout'/0 =
    %% Line 740
    fun () ->
	%% Line 741
	15000
'udp_options'/0 =
    %% Line 744
    fun () ->
	%% Line 745
	[{'mode','list'}|[{'active','true'}|[{'deliver','term'}|[{'broadcast','true'}]]]]
'll_tcp_connect'/3 =
    %% Line 749
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 750
	    apply 'tcp_options'/0
		()
	in  %% Line 750
	    case apply 'll_open_set_bind'/6
		     ('tcp', 'inet', 'stream', _cor3, %% Line 751
						      {0,0,0,0}, _cor2) of
	      %% Line 752
	      <{'ok',S}> when 'true' ->
		  let <_cor4> =
		      %% Line 753
		      apply 'tcp_timeout'/0
			  ()
		  in  %% Line 753
		      case call 'prim_inet':'connect'
			       (S, _cor1, _cor0, _cor4) of
			%% Line 754
			<'ok'> when 'true' ->
			    {'ok',S}
			%% Line 755
			<Error> when 'true' ->
			    apply 'port_error'/2
				(S, Error)
		      end
	      %% Line 757
	      <Error> when 'true' ->
		  Error
	    end
'll_udp_open'/1 =
    %% Line 763
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 764
	    apply 'udp_options'/0
		()
	in  %% Line 764
	    apply 'll_open_set_bind'/6
		('udp', 'inet', 'dgram', _cor1, {0,0,0,0}, _cor0)
'll_open_set_bind'/6 =
    %% Line 767
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 768
	case call 'prim_inet':'open'
		 (_cor5, _cor4, _cor3) of
	  %% Line 769
	  <{'ok',S}> when 'true' ->
	      %% Line 770
	      case call 'prim_inet':'setopts'
		       (S, _cor2) of
		%% Line 771
		<'ok'> when 'true' ->
		    %% Line 772
		    case call 'prim_inet':'bind'
			     (S, _cor1, _cor0) of
		      %% Line 773
		      <{'ok',_cor15}> when 'true' ->
			  %% Line 774
			  {'ok',S}
		      %% Line 775
		      <Error> when 'true' ->
			  apply 'port_error'/2
			      (S, Error)
		    end
		%% Line 777
		<Error> when 'true' ->
		    apply 'port_error'/2
			(S, Error)
	      end
	  %% Line 779
	  <Error> when 'true' ->
	      Error
	end
'll_close'/1 =
    %% Line 783
    fun (_cor0) ->
	do  %% Line 784
	    call 'erlang':'unlink'
		(_cor0)
	    %% Line 785
	    call 'erlang':'exit'
		(_cor0, 'kill')
'port_error'/2 =
    %% Line 787
    fun (_cor1,_cor0) ->
	do  %% Line 788
	    call 'erlang':'unlink'
		(_cor1)
	    do  %% Line 789
		call 'prim_inet':'close'
		    (_cor1)
		_cor0
'prim_init'/0 =
    %% Line 795
    fun () ->
	let <_cor1> =
	    %% Line 797
	    case call 'init':'get_argument'
		     ('loader_debug') of
	      %% Line 798
	      <{'ok',_cor3}> when 'true' ->
		  'true'
	      %% Line 799
	      <'error'> when 'true' ->
		  'false'
	      ( <_cor0> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor0})
		-| ['compiler_generated'] )
	    end
	in  %% Line 801
	    apply 'cache_new'/1
		({'prim_state',_cor1,'undefined','undefined'})
'prim_release_archives'/1 =
    %% Line 803
    fun (_cor0) ->
	do  %% Line 804
	    apply 'debug'/2
		(_cor0, 'release_archives')
	    let <_cor1> =
		%% Line 805
		call 'erlang':'get'
		    ()
	    in  %% Line 805
		case apply 'prim_do_release_archives'/3
			 (_cor0, _cor1, []) of
		  <{Res,PS2}> when 'true' ->
		      do  %% Line 806
			  apply 'debug'/2
			      (PS2, {'return',Res})
			  %% Line 807
			  {Res,PS2}
		  ( <_cor2> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_cor2})
		    -| ['compiler_generated'] )
		end
'prim_do_release_archives'/3 =
    %% Line 809
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <PS,[{ArchiveFile,DictVal}|KeyVals],Acc> when 'true' ->
	      let <_cor4> =
		  %% Line 811
		  case DictVal of
		    %% Line 812
		    <{'primary',_X_PrimZip,_X_FI,_X_ParserFun}> when 'true' ->
			%% Line 813
			'ok'
		    %% Line 814
		    <{Cache,_X_FI}> when 'true' ->
			do  %% Line 815
			    apply 'debug'/2
				(PS, {'release','cache',ArchiveFile})
			    do  %% Line 816
				call 'erlang':'erase'
				    (ArchiveFile)
				%% Line 817
				apply 'clear_cache'/2
				    (ArchiveFile, Cache)
		    ( <_cor3> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor3})
		      -| ['compiler_generated'] )
		  end
	      in  %% Line 819
		  case _cor4 of
		    %% Line 820
		    <'ok'> when 'true' ->
			%% Line 821
			apply 'prim_do_release_archives'/3
			    (PS, KeyVals, Acc)
		    %% Line 822
		    <{'error',Reason}> when 'true' ->
			%% Line 823
			apply 'prim_do_release_archives'/3
			    (PS, KeyVals, [{ArchiveFile,Reason}|Acc])
		    ( <_cor6> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor6})
		      -| ['compiler_generated'] )
		  end
	  %% Line 825
	  <PS,[],[]> when 'true' ->
	      %% Line 826
	      case PS of
		<{'prim_state',_cor16,_cor17,_cor18}> when 'true' ->
		    let <_cor9> =
			call 'erlang':'setelement'
			    (4, PS, 'undefined')
		    in  {'ok',_cor9}
		( <_cor19> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','prim_state'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 827
	  <PS,[],Errors> when 'true' ->
	      %% Line 828
	      case PS of
		<{'prim_state',_cor20,_cor21,_cor22}> when 'true' ->
		    let <_cor12> =
			call 'erlang':'setelement'
			    (4, PS, 'undefined')
		    in  {{'error',Errors},_cor12}
		( <_cor23> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','prim_state'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  ( <_cor15,_cor14,_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14,_cor13})
		  -| [{'function_name',{'prim_do_release_archives',3}}] )
	    -| ['compiler_generated'] )
	end
'prim_set_primary_archive'/5 =
    %% Line 830
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <PS,'undefined','undefined','undefined',_X_ParserFun> when 'true' ->
	      do  %% Line 831
		  apply 'debug'/2
		      (PS, {'set_primary_archive','clean'})
		  %% Line 832
		  ( case PS of
		      ( <( {'prim_state',_cor41,_cor42,_rec25}
			   -| ['compiler_generated'] )> when 'true' ->
			    case _rec25 of
			      %% Line 833
			      <'undefined'> when 'true' ->
				  do  %% Line 835
				      apply 'debug'/2
					  (PS, {'return',{'error','enoent'}})
				      %% Line 836
				      {{'error','enoent'},PS}
			      %% Line 837
			      <ArchiveFile> when 'true' ->
				  %% Line 838
				  case call 'erlang':'erase'
					   (ArchiveFile) of
				    <{'primary',PrimZip,_X_FI,_X_ParserFun2}> when 'true' ->
					%% Line 839
					case call 'prim_zip':'close'
						 (PrimZip) of
					  <'ok'> when 'true' ->
					      let <_cor12> =
						  %% Line 840
						  call 'erlang':'setelement'
						      (4, PS, 'undefined')
					      in  do  %% Line 842
						      apply 'debug'/2
							  (_cor12, {'return',{'ok',[]}})
						      %% Line 843
						      {{'ok',[]},_cor12}
					  ( <_cor9> when 'true' ->
						primop 'match_fail'
						    ({'badmatch',_cor9})
					    -| ['compiler_generated'] )
					end
				    ( <_cor8> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor8})
				      -| ['compiler_generated'] )
				  end
			    end
			-| ['compiler_generated'] )
		      ( <_cor43> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','prim_state'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  %% Line 846
	  <PS,ArchiveFile0,ArchiveBin,FileInfo = %% Line 847
						 {'file_info',_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60},%% Line 847
																			  ParserFun>
	      when let <_cor16> =
		    %% Line 848
		    call 'erlang':'is_list'
			(ArchiveFile0)
		in  let <_cor17> =
			%% Line 848
			call 'erlang':'is_binary'
			    (ArchiveBin)
		    in  %% Line 848
			call 'erlang':'and'
			    (_cor16, _cor17) ->
	      let <_cor18> =
		  %% Line 850
		  call 'erlang':'byte_size'
		      (ArchiveBin)
	      in  do  %% Line 850
		      apply 'debug'/2
			  (PS, {'set_primary_archive',ArchiveFile0,_cor18})
		      let <_cor19> =
			  %% Line 851
			  apply 'absname'/1
			      (ArchiveFile0)
		      in  let <ArchiveFile> =
			      %% Line 851
			      apply 'real_path'/1
				  (_cor19)
			  in  %% Line 853
			      ( case PS of
				  ( <( {'prim_state',_cor61,_cor62,_rec27}
				       -| ['compiler_generated'] )> when 'true' ->
					let <_cor34> =
					    case _rec27 of
					      %% Line 854
					      <'undefined'> when 'true' ->
						  %% Line 855
						  case apply 'load_prim_archive'/3
							   (ArchiveFile, ArchiveBin, FileInfo) of
						    %% Line 856
						    <{'ok',PrimZip,FI,Ebins}> when 'true' ->
							do  %% Line 857
							    apply 'debug'/2
								(PS, {'set_primary_archive',Ebins})
							    do  %% Line 858
								call 'erlang':'put'
								    (ArchiveFile, {'primary',PrimZip,FI,ParserFun})
								let <_cor25> =
								    %% Line 860
								    call 'erlang':'setelement'
									(4, PS, ArchiveFile)
								in  %% Line 859
								    {{'ok',Ebins},_cor25}
						    %% Line 861
						    <Error> when 'true' ->
							do  %% Line 862
							    apply 'debug'/2
								(PS, {'set_primary_archive',Error})
							    %% Line 863
							    {Error,PS}
						  end
					      %% Line 865
					      <OldArchiveFile> when 'true' ->
						  do  %% Line 866
						      apply 'debug'/2
							  (PS, {'set_primary_archive','clean'})
						      %% Line 867
						      case call 'erlang':'erase'
							       (OldArchiveFile) of
							<{'primary',PrimZip,_X_FI,_X_ParserFun}> when 'true' ->
							    %% Line 868
							    case call 'prim_zip':'close'
								     (PrimZip) of
							      <'ok'> when 'true' ->
								  let <_cor31> =
								      %% Line 869
								      call 'erlang':'setelement'
									  (4, PS, 'undefined')
								  in  %% Line 870
								      apply 'prim_set_primary_archive'/5
									  (_cor31, ArchiveFile, ArchiveBin, %% Line 871
													    FileInfo, %% Line 871
														      ParserFun)
							      ( <_cor28> when 'true' ->
								    primop 'match_fail'
									({'badmatch',_cor28})
								-| ['compiler_generated'] )
							    end
							( <_cor27> when 'true' ->
							      primop 'match_fail'
								  ({'badmatch',_cor27})
							  -| ['compiler_generated'] )
						      end
					    end
					in  case _cor34 of
					      <{Res3,PS3}> when 'true' ->
						  do  %% Line 873
						      apply 'debug'/2
							  (PS3, {'return',Res3})
						      %% Line 874
						      {Res3,PS3}
					      ( <_cor35> when 'true' ->
						    primop 'match_fail'
							({'badmatch',_cor35})
						-| ['compiler_generated'] )
					    end
				    -| ['compiler_generated'] )
				  ( <_cor63> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','prim_state'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
	  ( <_cor40,_cor39,_cor38,_cor37,_cor36> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor40,_cor39,_cor38,_cor37,_cor36})
		  -| [{'function_name',{'prim_set_primary_archive',5}}] )
	    -| ['compiler_generated'] )
	end
'prim_get_file'/2 =
    %% Line 877
    fun (_cor1,_cor0) ->
	do  %% Line 878
	    apply 'debug'/2
		(_cor1, {'get_file',_cor0})
	    %% Line 880
	    ( case _cor1 of
		( <( {'prim_state',_cor17,_cor18,_rec30}
		     -| ['compiler_generated'] )> when 'true' ->
		      let <_cor13> =
			  case apply 'name_split'/2
				   (_rec30, _cor0) of
			    %% Line 881
			    <{'file',PrimFile}> when 'true' ->
				let <Res> =
				    %% Line 882
				    call 'prim_file':'read_file'
					(PrimFile)
				in  %% Line 883
				    {Res,_cor1}
			    %% Line 884
			    <{'archive',ArchiveFile,FileInArchive}> when 'true' ->
				do  %% Line 885
				    apply 'debug'/2
					(_cor1, {'archive_get_file',ArchiveFile,FileInArchive})
				    let <FileComponents> =
					%% Line 886
					apply 'path_split'/1
					    (FileInArchive)
				    in  let <Fun> =
					    %% Line 888
					    ( fun (_cor8,_cor7) ->
						  case <_cor8,_cor7> of
						    <{Components,_X_GetInfo,GetBin},Acc> when 'true' ->
							%% Line 889
							case <> of
							  %% Line 890
							  <>
							      when call 'erlang':'=:='
								    (Components,
								     FileComponents) ->
							      let <_cor6> =
								  %% Line 891
								  apply GetBin
								      ()
							      in  %% Line 891
								  {'false',{'ok',_cor6}}
							  %% Line 892
							  <> when 'true' ->
							      %% Line 893
							      {'true',Acc}
							end
						    ( <_cor10,_cor9> when 'true' ->
							  ( primop 'match_fail'
								({'function_clause',_cor10,_cor9})
							    -| [{'function_name',{'-prim_get_file/2-fun-0-',2}}] )
						      -| ['compiler_generated'] )
						  end
					      -| [{'id',{0,0,'-prim_get_file/2-fun-0-'}}] )
					in  %% Line 896
					    apply 'apply_archive'/4
						(_cor1, Fun, {'error','enoent'}, ArchiveFile)
			    ( <_cor12> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor12})
			      -| ['compiler_generated'] )
			  end
		      in  case _cor13 of
			    <{Res2,PS2}> when 'true' ->
				do  %% Line 898
				    apply 'debug'/2
					(_cor1, {'return',Res2})
				    %% Line 899
				    {Res2,PS2}
			    ( <_cor14> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor14})
			      -| ['compiler_generated'] )
			  end
		  -| ['compiler_generated'] )
		( <_cor19> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','prim_state'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	      -| ['compiler_generated'] )
'prim_list_dir'/2 =
    %% Line 904
    fun (_cor1,_cor0) ->
	do  %% Line 905
	    apply 'debug'/2
		(_cor1, {'list_dir',_cor0})
	    %% Line 907
	    ( case _cor1 of
		( <( {'prim_state',_cor24,_cor25,_rec31}
		     -| ['compiler_generated'] )> when 'true' ->
		      let <Res2,PS3> =
			  case apply 'name_split'/2
				   (_rec31, _cor0) of
			    %% Line 908
			    <{'file',PrimDir}> when 'true' ->
				let <Res> =
				    %% Line 909
				    call 'prim_file':'list_dir'
					(PrimDir)
				in  %% Line 910
				    <Res,_cor1>
			    %% Line 911
			    <{'archive',ArchiveFile,FileInArchive}> when 'true' ->
				do  %% Line 912
				    apply 'debug'/2
					(_cor1, {'archive_list_dir',ArchiveFile,FileInArchive})
				    let <DirComponents> =
					%% Line 913
					apply 'path_split'/1
					    (FileInArchive)
				    in  let <Fun> =
					    %% Line 915
					    ( fun (_cor13,_cor12) ->
						  case <_cor13,_cor12> of
						    <{Components,_X_GetInfo,_X_GetBin},Acc = {Status,Names}> when 'true' ->
							%% Line 916
							case Components of
							  %% Line 917
							  <[RevName|DC]>
							      when call 'erlang':'=:='
								    (DC,
								     DirComponents) ->
							      %% Line 918
							      case RevName of
								%% Line 919
								<[]> when 'true' ->
								    %% Line 921
								    {'true',{'ok',Names}}
								%% Line 922
								<_cor27> when 'true' ->
								    let <Name> =
									%% Line 924
									apply 'reverse'/1
									    (RevName)
								    in  %% Line 925
									{'true',{Status,[Name|Names]}}
							      end
							  %% Line 927
							  <[[]|[RevName|DC]]>
							      when call 'erlang':'=:='
								    (DC,
								     DirComponents) ->
							      let <Name> =
								  %% Line 929
								  apply 'reverse'/1
								      (RevName)
							      in  %% Line 930
								  {'true',{Status,[Name|Names]}}
							  %% Line 931
							  <[RevName|[]]>
							      when call 'erlang':'=:='
								    (DirComponents,
								     [[]]) ->
							      let <Name> =
								  %% Line 933
								  apply 'reverse'/1
								      (RevName)
							      in  %% Line 934
								  {'true',{'ok',[Name|Names]}}
							  %% Line 935
							  <[[]|[RevName|[]]]>
							      when call 'erlang':'=:='
								    (DirComponents,
								     [[]]) ->
							      let <Name> =
								  %% Line 937
								  apply 'reverse'/1
								      (RevName)
							      in  %% Line 938
								  {'true',{'ok',[Name|Names]}}
							  %% Line 939
							  <_cor28> when 'true' ->
							      %% Line 941
							      {'true',Acc}
							end
						    ( <_cor15,_cor14> when 'true' ->
							  ( primop 'match_fail'
								({'function_clause',_cor15,_cor14})
							    -| [{'function_name',{'-prim_list_dir/2-fun-0-',2}}] )
						      -| ['compiler_generated'] )
						  end
					      -| [{'id',{0,0,'-prim_list_dir/2-fun-0-'}}] )
					in  %% Line 944
					    case %% Line 945
						 apply 'apply_archive'/4
						     (_cor1, Fun, {'error',[]}, ArchiveFile) of
					      <{{Status,Names},PS2}> when 'true' ->
						  %% Line 946
						  case Status of
						    %% Line 947
						    <'ok'> when 'true' ->
							<{'ok',Names},PS2>
						    %% Line 948
						    <'error'> when 'true' ->
							<{'error','enotdir'},PS2>
						    ( <_cor18> when 'true' ->
							  primop 'match_fail'
							      ({'case_clause',_cor18})
						      -| ['compiler_generated'] )
						  end
					      ( <_cor17> when 'true' ->
						    primop 'match_fail'
							({'badmatch',_cor17})
						-| ['compiler_generated'] )
					    end
			    ( <_cor19> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor19})
			      -| ['compiler_generated'] )
			  end
		      in  do  %% Line 951
			      apply 'debug'/2
				  (_cor1, {'return',Res2})
			      %% Line 952
			      {Res2,PS3}
		  -| ['compiler_generated'] )
		( <_cor26> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','prim_state'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	      -| ['compiler_generated'] )
'prim_read_file_info'/2 =
    %% Line 957
    fun (_cor1,_cor0) ->
	do  %% Line 958
	    apply 'debug'/2
		(_cor1, {'read_file_info',_cor0})
	    %% Line 960
	    ( case _cor1 of
		( <( {'prim_state',_cor23,_cor24,_rec32}
		     -| ['compiler_generated'] )> when 'true' ->
		      let <_cor19> =
			  case apply 'name_split'/2
				   (_rec32, _cor0) of
			    %% Line 961
			    <{'file',PrimFile}> when 'true' ->
				let <Res> =
				    %% Line 962
				    call 'prim_file':'read_file_info'
					(PrimFile)
				in  %% Line 963
				    {Res,_cor1}
			    %% Line 964
			    <{'archive',ArchiveFile,[]}> when 'true' ->
				do  %% Line 966
				    apply 'debug'/2
					(_cor1, {'archive_read_file_info',ArchiveFile})
				    %% Line 967
				    case call 'prim_file':'read_file_info'
					     (ArchiveFile) of
				      %% Line 968
				      <{'ok',FI}> when 'true' ->
					  %% Line 969
					  case FI of
					    <{'file_info',_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38}> when 'true' ->
						let <_cor7> =
						    call 'erlang':'setelement'
							(3, FI, 'directory')
						in  {{'ok',_cor7},_cor1}
					    ( <_cor39> when 'true' ->
						  ( call ( 'erlang'
							   -| ['compiler_generated'] ):( 'error'
											 -| ['compiler_generated'] )
							(( {'badrecord','file_info'}
							   -| ['compiler_generated'] ))
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					  end
				      %% Line 970
				      <Other> when 'true' ->
					  %% Line 971
					  {Other,_cor1}
				    end
			    %% Line 973
			    <{'archive',ArchiveFile,FileInArchive}> when 'true' ->
				do  %% Line 974
				    apply 'debug'/2
					(_cor1, {'archive_read_file_info',_cor0})
				    let <FileComponents> =
					%% Line 975
					apply 'path_split'/1
					    (FileInArchive)
				    in  let <Fun> =
					    %% Line 977
					    ( fun (_cor14,_cor13) ->
						  case <_cor14,_cor13> of
						    <{Components,GetInfo,_X_GetBin},Acc> when 'true' ->
							%% Line 978
							case Components of
							  %% Line 979
							  <[[]|F]>
							      when call 'erlang':'=:='
								    (F,
								     FileComponents) ->
							      let <_cor10> =
								  %% Line 981
								  apply GetInfo
								      ()
							      in  %% Line 981
								  {'false',{'ok',_cor10}}
							  %% Line 982
							  <F>
							      when call 'erlang':'=:='
								    (Components,
								     FileComponents) ->
							      let <_cor11> =
								  %% Line 984
								  apply GetInfo
								      ()
							      in  %% Line 984
								  {'false',{'ok',_cor11}}
							  %% Line 985
							  <_cor40> when 'true' ->
							      %% Line 987
							      {'true',Acc}
							end
						    ( <_cor16,_cor15> when 'true' ->
							  ( primop 'match_fail'
								({'function_clause',_cor16,_cor15})
							    -| [{'function_name',{'-prim_read_file_info/2-fun-0-',2}}] )
						      -| ['compiler_generated'] )
						  end
					      -| [{'id',{0,0,'-prim_read_file_info/2-fun-0-'}}] )
					in  %% Line 990
					    apply 'apply_archive'/4
						(_cor1, Fun, {'error','enoent'}, ArchiveFile)
			    ( <_cor18> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor18})
			      -| ['compiler_generated'] )
			  end
		      in  case _cor19 of
			    <{Res2,PS2}> when 'true' ->
				do  %% Line 992
				    apply 'debug'/2
					(PS2, {'return',Res2})
				    %% Line 993
				    {Res2,PS2}
			    ( <_cor20> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor20})
			      -| ['compiler_generated'] )
			  end
		  -| ['compiler_generated'] )
		( <_cor25> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','prim_state'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	      -| ['compiler_generated'] )
'prim_get_cwd'/2 =
    %% Line 997
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <PS,[]> when 'true' ->
	      do  %% Line 998
		  apply 'debug'/2
		      (PS, {'get_cwd',[]})
		  let <Res> =
		      %% Line 999
		      call 'prim_file':'get_cwd'
			  ()
		  in  do  %% Line 1000
			  apply 'debug'/2
			      (PS, {'return',Res})
			  %% Line 1001
			  {Res,PS}
	  %% Line 1002
	  <PS,[Drive|[]]> when 'true' ->
	      do  %% Line 1003
		  apply 'debug'/2
		      (PS, {'get_cwd',Drive})
		  let <Res> =
		      %% Line 1004
		      call 'prim_file':'get_cwd'
			  (Drive)
		  in  do  %% Line 1005
			  apply 'debug'/2
			      (PS, {'return',Res})
			  %% Line 1006
			  {Res,PS}
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'prim_get_cwd',2}}] )
	    -| ['compiler_generated'] )
	end
'apply_archive'/4 =
    %% Line 1010
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1011
	case call 'erlang':'get'
		 (_cor0) of
	  %% Line 1012
	  <'undefined'> when 'true' ->
	      %% Line 1013
	      case apply 'open_archive'/3
		       (_cor0, _cor1, _cor2) of
		%% Line 1014
		<{'ok',PrimZip,{Acc2,FI,_cor46}}> when 'true' ->
		    do  %% Line 1015
			apply 'debug'/2
			    (_cor3, {'cache','ok'})
			do  %% Line 1016
			    call 'erlang':'put'
				(_cor0, {{'ok',PrimZip},FI})
			    %% Line 1017
			    {Acc2,_cor3}
		%% Line 1018
		<Error> when 'true' ->
		    do  %% Line 1019
			apply 'debug'/2
			    (_cor3, {'cache',Error})
			%% Line 1021
			{Error,_cor3}
	      end
	  %% Line 1023
	  <{'primary',PrimZip,FI,ParserFun}> when 'true' ->
	      %% Line 1024
	      case call 'prim_file':'read_file_info'
		       (_cor0) of
		%% Line 1025
		<{'ok',FI2 = {'file_info',_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59}}>
		    when %% Line 1026
		      ( try
			    ( case <> of
				( <>
				      when ( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'is_record'
									       -| ['compiler_generated'] )
					      (FI,
					       ( 'file_info'
						 -| ['compiler_generated'] ),
					       ( 14
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] ) ->
				      let <_cor16> =
					  ( call 'erlang':'element'
						(6, FI)
					    -| ['compiler_generated'] )
				      in  ( call 'erlang':'=:='
						(_cor16, _cor51)
					    -| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				( <> when 'true' ->
				      'false'
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
			of <Try> ->
			    Try
			catch <T,R> ->
			    'false'
			-| ['compiler_generated'] ) ->
		    %% Line 1027
		    case apply 'foldl_archive'/3
			     (PrimZip, _cor1, _cor2) of
		      %% Line 1028
		      <{'ok',_X_PrimZip2,Acc2}> when 'true' ->
			  %% Line 1029
			  {Acc2,_cor3}
		      %% Line 1030
		      <Error> when 'true' ->
			  do  %% Line 1031
			      apply 'debug'/2
				  (_cor3, {'primary',Error})
			      %% Line 1032
			      {Error,_cor3}
		    end
		%% Line 1034
		<{'ok',FI2}> when 'true' ->
		    %% Line 1035
		    case apply 'clear_cache'/2
			     (_cor0, {'ok',PrimZip}) of
		      <'ok'> when 'true' ->
			  do  %% Line 1036
			      case apply 'load_prim_archive'/3
				       (_cor0, FI2, ParserFun) of
				%% Line 1037
				<{'ok',PrimZip2,FI3,_X_Ebins}> when 'true' ->
				    do  %% Line 1038
					apply 'debug'/2
					    (_cor3, {'cache',{'update',_cor0}})
					%% Line 1039
					call 'erlang':'put'
					    (_cor0, {'primary',PrimZip2,FI3,ParserFun})
				%% Line 1040
				<Error2> when 'true' ->
				    %% Line 1041
				    apply 'debug'/2
					(_cor3, {'cache',{'clear',Error2}})
			      end
			      %% Line 1043
			      apply 'apply_archive'/4
				  (_cor3, _cor2, _cor1, _cor0)
		      ( <_cor19> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor19})
			-| ['compiler_generated'] )
		    end
		%% Line 1044
		<Error> when 'true' ->
		    do  %% Line 1045
			apply 'debug'/2
			    (_cor3, {'cache',{'clear',Error}})
			%% Line 1046
			case apply 'clear_cache'/2
				 (_cor0, {'ok',PrimZip}) of
			  <'ok'> when 'true' ->
			      %% Line 1047
			      apply 'apply_archive'/4
				  (_cor3, _cor2, _cor1, _cor0)
			  ( <_cor21> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor21})
			    -| ['compiler_generated'] )
			end
	      end
	  %% Line 1049
	  <{Cache,FI}> when 'true' ->
	      %% Line 1050
	      case call 'prim_file':'read_file_info'
		       (_cor0) of
		%% Line 1051
		<{'ok',FI2 = {'file_info',_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,_cor69,_cor70,_cor71,_cor72}}>
		    when %% Line 1052
		      ( try
			    ( case <> of
				( <>
				      when ( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'is_record'
									       -| ['compiler_generated'] )
					      (FI,
					       ( 'file_info'
						 -| ['compiler_generated'] ),
					       ( 14
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] ) ->
				      let <_cor34> =
					  ( call 'erlang':'element'
						(6, FI)
					    -| ['compiler_generated'] )
				      in  ( call 'erlang':'=:='
						(_cor34, _cor64)
					    -| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				( <> when 'true' ->
				      'false'
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
			of <Try> ->
			    Try
			catch <T,R> ->
			    'false'
			-| ['compiler_generated'] ) ->
		    %% Line 1053
		    case Cache of
		      %% Line 1054
		      <{'ok',PrimZip}> when 'true' ->
			  %% Line 1055
			  case apply 'foldl_archive'/3
				   (PrimZip, _cor1, _cor2) of
			    %% Line 1056
			    <{'ok',_X_PrimZip2,Acc2}> when 'true' ->
				%% Line 1057
				{Acc2,_cor3}
			    %% Line 1058
			    <Error> when 'true' ->
				do  %% Line 1059
				    apply 'debug'/2
					(_cor3, {'cache',{'clear',Error}})
				    %% Line 1060
				    case apply 'clear_cache'/2
					     (_cor0, Cache) of
				      <'ok'> when 'true' ->
					  do  %% Line 1061
					      apply 'debug'/2
						  (_cor3, {'cache',Error})
					      do  %% Line 1062
						  call 'erlang':'erase'
						      (_cor0)
						  %% Line 1064
						  {Error,_cor3}
				      ( <_cor36> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_cor36})
					-| ['compiler_generated'] )
				    end
			  end
		      %% Line 1066
		      <Error> when 'true' ->
			  do  %% Line 1067
			      apply 'debug'/2
				  (_cor3, {'cache',Error})
			      %% Line 1068
			      {Error,_cor3}
		    end
		%% Line 1070
		<Error> when 'true' ->
		    do  %% Line 1071
			apply 'debug'/2
			    (_cor3, {'cache',{'clear',Error}})
			%% Line 1072
			case apply 'clear_cache'/2
				 (_cor0, Cache) of
			  <'ok'> when 'true' ->
			      %% Line 1073
			      apply 'apply_archive'/4
				  (_cor3, _cor2, _cor1, _cor0)
			  ( <_cor39> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor39})
			    -| ['compiler_generated'] )
			end
	      end
	  ( <_cor41> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor41})
	    -| ['compiler_generated'] )
	end
'open_archive'/3 =
    %% Line 1077
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1078
	case call 'prim_file':'read_file_info'
		 (_cor2) of
	  %% Line 1079
	  <{'ok',FileInfo}> when 'true' ->
	      %% Line 1080
	      apply 'open_archive'/4
		  (_cor2, FileInfo, _cor1, _cor0)
	  %% Line 1081
	  <{'error',Reason}> when 'true' ->
	      %% Line 1082
	      {'error',Reason}
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor3})
	    -| ['compiler_generated'] )
	end
'open_archive'/4 =
    %% Line 1093
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1094
	case _cor2 of
	  <{'file_info',_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35}> when 'true' ->
	      let <_cor6> =
		  call 'erlang':'setelement'
		      (3, _cor2, 'directory')
	      in  let <Wrapper> =
		      %% Line 1096
		      ( fun (_cor15,_cor14) ->
			    case <_cor15,_cor14> of
			      <{N,GI,GB},{A,I,Dirs}> when 'true' ->
				  let <Components> =
				      %% Line 1097
				      apply 'path_split'/1
					  (N)
				  in  let <_cor10> =
					  %% Line 1099
					  case Components of
					    %% Line 1100
					    <[[]|Dir]> when 'true' ->
						%% Line 1102
						[Dir|Dirs]
					    %% Line 1103
					    <_cor37> when 'true' ->
						%% Line 1105
						Dirs
					  end
				      in  %% Line 1107
					  case %% Line 1108
					       apply 'ensure_virtual_dirs'/6
						   (Components, _cor0, _cor6, %% Line 1109
									      [{'true',Components}|[]], _cor10, %% Line 1109
														A) of
					    <{Includes,Dirs3,A2}> when 'true' ->
						%% Line 1110
						case apply _cor0
							 ({Components,GI,GB}, A2) of
						  <{_X_Continue,A3}> when 'true' ->
						      %% Line 1111
						      {'true',Includes,{A3,I,Dirs3}}
						  ( <_cor13> when 'true' ->
							primop 'match_fail'
							    ({'badmatch',_cor13})
						    -| ['compiler_generated'] )
						end
					    ( <_cor12> when 'true' ->
						  primop 'match_fail'
						      ({'badmatch',_cor12})
					      -| ['compiler_generated'] )
					  end
			      ( <_cor17,_cor16> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_cor17,_cor16})
				      -| [{'function_name',{'-open_archive/4-fun-0-',2}}] )
				-| ['compiler_generated'] )
			    end
			-| [{'id',{0,0,'-open_archive/4-fun-0-'}}] )
		  in  %% Line 1113
		      call 'prim_zip':'open'
			  (Wrapper, {_cor1,_cor6,[]}, _cor3)
	  ( <_cor36> when 'true' ->
		( call ( 'erlang'
			 -| ['compiler_generated'] ):( 'error'
						       -| ['compiler_generated'] )
		      (( {'badrecord','file_info'}
			 -| ['compiler_generated'] ))
		  -| ['compiler_generated'] )
	    -| ['compiler_generated'] )
	end
'ensure_virtual_dirs'/6 =
    %% Line 1115
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1116
	case _cor5 of
	  %% Line 1117
	  <[_cor21|[]]> when 'true' ->
	      %% Line 1119
	      {_cor2,_cor1,_cor0}
	  %% Line 1120
	  <[_cor22|Dir]> when 'true' ->
	      %% Line 1121
	      case call 'lists':'member'
		       (Dir, _cor1) of
		%% Line 1122
		<'false'> when 'true' ->
		    let <GetInfo> =
			%% Line 1124
			( fun () ->
			      _cor3
			  -| [{'id',{0,0,'-ensure_virtual_dirs/6-fun-0-'}}] )
		    in  let <GetBin> =
			    %% Line 1125
			    ( fun () ->
				  #{}#
			      -| [{'id',{0,0,'-ensure_virtual_dirs/6-fun-1-'}}] )
			in  let <VirtualDir> =
				%% Line 1126
				[[]|Dir]
			    in  let <Includes2> =
				    %% Line 1127
				    [{'true',VirtualDir,GetInfo,GetBin}|_cor2]
				in  let <Dirs2> =
					%% Line 1128
					[Dir|_cor1]
				    in  %% Line 1131
					case apply 'ensure_virtual_dirs'/6
						 (Dir, _cor4, _cor3, %% Line 1132
								     Includes2, %% Line 1132
										Dirs2, _cor0) of
					  <{I,F,Acc2}> when 'true' ->
					      %% Line 1134
					      case apply _cor4
						       ({VirtualDir,GetInfo,GetBin}, Acc2) of
						<{_X_Continue,Acc3}> when 'true' ->
						    %% Line 1135
						    {I,F,Acc3}
						( <_cor12> when 'true' ->
						      primop 'match_fail'
							  ({'badmatch',_cor12})
						  -| ['compiler_generated'] )
					      end
					  ( <_cor11> when 'true' ->
						primop 'match_fail'
						    ({'badmatch',_cor11})
					    -| ['compiler_generated'] )
					end
		%% Line 1136
		<'true'> when 'true' ->
		    %% Line 1139
		    apply 'ensure_virtual_dirs'/6
			(Dir, _cor4, _cor3, _cor2, _cor1, _cor0)
		( <_cor13> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor13})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor14> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor14})
	    -| ['compiler_generated'] )
	end
'foldl_archive'/3 =
    %% Line 1143
    fun (_cor2,_cor1,_cor0) ->
	let <Wrapper> =
	    %% Line 1145
	    ( fun (_cor5,_cor4) ->
		  case <_cor5,_cor4> of
		    <{Components,GI,GB},A> when 'true' ->
			%% Line 1147
			case apply _cor0
				 ({Components,GI,GB}, A) of
			  <{Continue,A2}> when 'true' ->
			      %% Line 1148
			      {Continue,'true',A2}
			  ( <_cor3> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor3})
			    -| ['compiler_generated'] )
			end
		    ( <_cor7,_cor6> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor7,_cor6})
			    -| [{'function_name',{'-foldl_archive/3-fun-0-',2}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-foldl_archive/3-fun-0-'}}] )
	in  %% Line 1150
	    call 'prim_zip':'foldl'
		(Wrapper, _cor1, _cor2)
'cache_new'/1 =
    %% Line 1152
    fun (_cor0) ->
	_cor0
'clear_cache'/2 =
    %% Line 1155
    fun (_cor1,_cor0) ->
	do  %% Line 1156
	    call 'erlang':'erase'
		(_cor1)
	    %% Line 1157
	    case _cor0 of
	      %% Line 1158
	      <{'ok',PrimZip}> when 'true' ->
		  %% Line 1159
		  call 'prim_zip':'close'
		      (PrimZip)
	      %% Line 1160
	      <{'error',_cor5}> when 'true' ->
		  %% Line 1161
		  'ok'
	      ( <_cor2> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor2})
		-| ['compiler_generated'] )
	    end
'is_basename'/1 =
    %% Line 1169
    fun (_cor0) ->
	%% Line 1170
	case apply 'deep_member'/2
		 (47, _cor0) of
	  %% Line 1171
	  <'true'> when 'true' ->
	      %% Line 1172
	      'false'
	  %% Line 1173
	  <'false'> when 'true' ->
	      %% Line 1174
	      case call 'erlang':'system_info'
		       ('os_type') of
		%% Line 1175
		<{'win32',_cor6}> when 'true' ->
		    %% Line 1176
		    case _cor0 of
		      %% Line 1177
		      <[_cor7|[58|_cor8]]> when 'true' ->
			  %% Line 1178
			  'false'
		      %% Line 1179
		      <_cor9> when 'true' ->
			  let <_cor1> =
			      %% Line 1180
			      apply 'deep_member'/2
				  (92, _cor0)
			  in  %% Line 1180
			      call 'erlang':'not'
				  (_cor1)
		    end
		%% Line 1182
		<_cor10> when 'true' ->
		    %% Line 1183
		    'true'
	      end
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor4})
	    -| ['compiler_generated'] )
	end
'send_all'/3 =
    %% Line 1187
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <U,[IP|AL],Cmd> when 'true' ->
	      do  %% Line 1189
		  call 'prim_inet':'sendto'
		      (U, IP, 4368, Cmd)
		  %% Line 1190
		  apply 'send_all'/3
		      (U, AL, Cmd)
	  %% Line 1191
	  <_X_U,[],_cor6> when 'true' ->
	      'ok'
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'send_all',3}}] )
	    -| ['compiler_generated'] )
	end
'join'/2 =
    %% Line 1193
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 1194
	    [47|_cor0]
	in  %% Line 1194
	    call 'erlang':'++'
		(_cor1, _cor2)
'member'/2 =
    %% Line 1196
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <X,[_cor4|_cor5]>
	      when call 'erlang':'=:='
		    (_cor4,
		     X) ->
	      'true'
	  %% Line 1197
	  <X,[_cor6|Y]> when 'true' ->
	      apply 'member'/2
		  (X, Y)
	  %% Line 1198
	  <_X_X,[]> when 'true' ->
	      'false'
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'member',2}}] )
	    -| ['compiler_generated'] )
	end
'deep_member'/2 =
    %% Line 1200
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <X,[_cor9|_cor10]>
	      when call 'erlang':'=:='
		    (_cor9,
		     X) ->
	      %% Line 1201
	      'true'
	  %% Line 1202
	  <X,[List|Y]>
	      when call 'erlang':'is_list'
		    (List) ->
	      %% Line 1203
	      ( case apply 'deep_member'/2
			 (X, List) of
		  ( <( 'true'
		       -| ['compiler_generated'] )> when 'true' ->
			'true'
		    -| ['compiler_generated'] )
		  ( <( 'false'
		       -| ['compiler_generated'] )> when 'true' ->
			apply 'deep_member'/2
			    (X, Y)
		    -| ['compiler_generated'] )
		  ( <_cor2> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {( 'badarg'
				    -| ['compiler_generated'] ),_cor2}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1204
	  <X,[Atom|Y]>
	      when call 'erlang':'is_atom'
		    (Atom) ->
	      let <_cor5> =
		  %% Line 1205
		  call 'erlang':'atom_to_list'
		      (Atom)
	      in  %% Line 1205
		  ( case apply 'deep_member'/2
			     (X, _cor5) of
		      ( <( 'true'
			   -| ['compiler_generated'] )> when 'true' ->
			    'true'
			-| ['compiler_generated'] )
		      ( <( 'false'
			   -| ['compiler_generated'] )> when 'true' ->
			    apply 'deep_member'/2
				(X, Y)
			-| ['compiler_generated'] )
		      ( <_cor4> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {( 'badarg'
					-| ['compiler_generated'] ),_cor4}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  %% Line 1206
	  <X,[_cor11|Y]> when 'true' ->
	      %% Line 1207
	      apply 'deep_member'/2
		  (X, Y)
	  %% Line 1208
	  <_X_X,[]> when 'true' ->
	      %% Line 1209
	      'false'
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'deep_member',2}}] )
	    -| ['compiler_generated'] )
	end
'keymember'/3 =
    %% Line 1211
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <X,I,[Y|_cor7]>
	      when try
		    let <_cor3> =
			call 'erlang':'element'
			    (I, Y)
		    in  call 'erlang':'=:='
			    (_cor3, X)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      'true'
	  %% Line 1212
	  <X,I,[_cor8|T]> when 'true' ->
	      apply 'keymember'/3
		  (X, I, T)
	  %% Line 1213
	  <_X_X,_X_I,[]> when 'true' ->
	      'false'
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'keymember',3}}] )
	    -| ['compiler_generated'] )
	end
'keysort'/2 =
    %% Line 1215
    fun (_cor1,_cor0) ->
	apply 'keysort'/3
	    (_cor1, _cor0, [])
'keysort'/3 =
    %% Line 1217
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <I,[X|L],Ls> when 'true' ->
	      let <_cor3> =
		  %% Line 1218
		  apply 'keyins'/3
		      (X, I, Ls)
	      in  %% Line 1218
		  apply 'keysort'/3
		      (I, L, _cor3)
	  %% Line 1219
	  <_X_I,[],Ls> when 'true' ->
	      Ls
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'keysort',3}}] )
	    -| ['compiler_generated'] )
	end
'keyins'/3 =
    %% Line 1221
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <X,I,[Y|T]>
	      when try
		    let <_cor3> =
			call 'erlang':'element'
			    (I, Y)
		    in  call 'erlang':'<'
			    (X, _cor3)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      [X|[Y|T]]
	  %% Line 1222
	  <X,I,[Y|T]> when 'true' ->
	      let <_cor4> =
		  apply 'keyins'/3
		      (X, I, T)
	      in  [Y|_cor4]
	  %% Line 1223
	  <X,_X_I,[]> when 'true' ->
	      [X|[]]
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'keyins',3}}] )
	    -| ['compiler_generated'] )
	end
'to_strs'/1 =
    %% Line 1225
    fun (_cor0) ->
	case _cor0 of
	  <[P|Paths]>
	      when call 'erlang':'is_atom'
		    (P) ->
	      let <_cor1> =
		  %% Line 1226
		  call 'erlang':'atom_to_list'
		      (P)
	      in  let <_cor2> =
		      %% Line 1226
		      apply 'to_strs'/1
			  (Paths)
		  in  %% Line 1226
		      [_cor1|_cor2]
	  %% Line 1227
	  <[P|Paths]>
	      when call 'erlang':'is_list'
		    (P) ->
	      let <_cor3> =
		  %% Line 1228
		  apply 'to_strs'/1
		      (Paths)
	      in  %% Line 1228
		  [P|_cor3]
	  %% Line 1229
	  <[_cor5|Paths]> when 'true' ->
	      %% Line 1230
	      apply 'to_strs'/1
		  (Paths)
	  %% Line 1231
	  <[]> when 'true' ->
	      %% Line 1232
	      []
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'to_strs',1}}] )
	    -| ['compiler_generated'] )
	end
'reverse'/1 =
    %% Line 1234
    fun (_cor0) ->
	case _cor0 of
	  <L = []> when 'true' ->
	      %% Line 1235
	      L
	  %% Line 1236
	  <L = [_cor2|[]]> when 'true' ->
	      %% Line 1237
	      L
	  %% Line 1238
	  <[A|[B|[]]]> when 'true' ->
	      %% Line 1239
	      [B|[A|[]]]
	  %% Line 1240
	  <[A|[B|L]]> when 'true' ->
	      %% Line 1241
	      call 'lists':'reverse'
		  (L, [B|[A|[]]])
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'reverse',1}}] )
	    -| ['compiler_generated'] )
	end
'path_split'/1 =
    %% Line 1248
    fun (_cor0) ->
	%% Line 1249
	apply 'path_split'/3
	    (_cor0, [], [])
'path_split'/3 =
    %% Line 1251
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[47|Tail],Path,Paths> when 'true' ->
	      %% Line 1252
	      apply 'path_split'/3
		  (Tail, [], [Path|Paths])
	  %% Line 1253
	  <[Head|Tail],Path,Paths> when 'true' ->
	      %% Line 1254
	      apply 'path_split'/3
		  (Tail, [Head|Path], Paths)
	  %% Line 1255
	  <[],Path,Paths> when 'true' ->
	      %% Line 1256
	      [Path|Paths]
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'path_split',3}}] )
	    -| ['compiler_generated'] )
	end
'path_join'/1 =
    %% Line 1259
    fun (_cor0) ->
	%% Line 1260
	apply 'path_join'/2
	    (_cor0, [])
'path_join'/2 =
    %% Line 1262
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[[]],Acc> when 'true' ->
	      %% Line 1263
	      Acc
	  %% Line 1264
	  <[Path|[]],Acc> when 'true' ->
	      let <_cor2> =
		  %% Line 1265
		  apply 'reverse'/1
		      (Path)
	      in  %% Line 1265
		  call 'erlang':'++'
		      (_cor2, Acc)
	  %% Line 1266
	  <[Path|Paths],Acc> when 'true' ->
	      let <_cor3> =
		  %% Line 1267
		  apply 'reverse'/1
		      (Path)
	      in  let <_cor4> =
		      %% Line 1267
		      call 'erlang':'++'
			  (_cor3, Acc)
		  in  let <_cor5> =
			  %% Line 1267
			  [47|_cor4]
		      in  %% Line 1267
			  apply 'path_join'/2
			      (Paths, _cor5)
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6})
		  -| [{'function_name',{'path_join',2}}] )
	    -| ['compiler_generated'] )
	end
'name_split'/2 =
    %% Line 1269
    fun (_cor1,_cor0) ->
	let <File> =
	    %% Line 1270
	    apply 'absname'/1
		(_cor0)
	in  %% Line 1271
	    apply 'do_name_split'/2
		(_cor1, File)
'do_name_split'/2 =
    %% Line 1273
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'undefined',File> when 'true' ->
	      let <_cor2> =
		  %% Line 1275
		  call 'init':'archive_extension'
		      ()
	      in  %% Line 1275
		  case apply 'string_split'/3
			   (File, _cor2, []) of
		    %% Line 1276
		    <'no_split'> when 'true' ->
			%% Line 1278
			{'file',File}
		    %% Line 1279
		    <{'split',_X_RevArchiveBase,RevArchiveFile,[]}> when 'true' ->
			let <ArchiveFile> =
			    %% Line 1281
			    apply 'reverse'/1
				(RevArchiveFile)
			in  %% Line 1282
			    {'archive',ArchiveFile,[]}
		    %% Line 1283
		    <{'split',_X_RevArchiveBase,RevArchiveFile,[47|FileInArchive]}> when 'true' ->
			let <ArchiveFile> =
			    %% Line 1285
			    apply 'reverse'/1
				(RevArchiveFile)
			in  %% Line 1286
			    {'archive',ArchiveFile,FileInArchive}
		    %% Line 1287
		    <{'split',_X_RevArchiveBase,_X_RevArchiveFile,_X_FileInArchive}> when 'true' ->
			%% Line 1289
			{'file',File}
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor5})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1291
	  <ArchiveFile,File> when 'true' ->
	      let <_cor6> =
		  %% Line 1293
		  apply 'real_path'/1
		      (File)
	      in  %% Line 1293
		  case apply 'string_match'/3
			   (_cor6, ArchiveFile, []) of
		    %% Line 1294
		    <'no_match'> when 'true' ->
			%% Line 1296
			apply 'do_name_split'/2
			    ('undefined', File)
		    %% Line 1297
		    <{'match',_X_RevPrimArchiveFile,FileInArchive}> when 'true' ->
			%% Line 1299
			{'archive',ArchiveFile,FileInArchive}
		    ( <_cor7> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor7})
		      -| ['compiler_generated'] )
		  end
	end
'string_match'/3 =
    %% Line 1302
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[Char|File],[_cor6|Archive],RevTop>
	      when call 'erlang':'=:='
		    (_cor6,
		     Char) ->
	      %% Line 1303
	      apply 'string_match'/3
		  (File, Archive, [Char|RevTop])
	  %% Line 1304
	  <File = [],[],RevTop> when 'true' ->
	      %% Line 1305
	      {'match',RevTop,File}
	  %% Line 1306
	  <[47|File],[],RevTop> when 'true' ->
	      %% Line 1307
	      {'match',RevTop,File}
	  %% Line 1308
	  <_X_File,_X_Archive,_X_RevTop> when 'true' ->
	      %% Line 1309
	      'no_match'
	end
'string_split'/3 =
    %% Line 1311
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[Char|File],FullExt = [_cor7|Ext],RevTop>
	      when call 'erlang':'=:='
		    (_cor7,
		     Char) ->
	      let <RevTop2> =
		  %% Line 1312
		  [Char|RevTop]
	      in  %% Line 1313
		  apply 'string_split2'/7
		      (File, Ext, RevTop, RevTop2, File, FullExt, RevTop2)
	  %% Line 1314
	  <[Char|File],Ext,RevTop> when 'true' ->
	      %% Line 1315
	      apply 'string_split'/3
		  (File, Ext, [Char|RevTop])
	  %% Line 1316
	  <[],_X_Ext,_X_RevTop> when 'true' ->
	      %% Line 1317
	      'no_split'
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'string_split',3}}] )
	    -| ['compiler_generated'] )
	end
'string_split2'/7 =
    %% Line 1319
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[Char|File],[_cor14|Ext],RevBase,RevTop,SaveFile,SaveExt,SaveTop>
	      when call 'erlang':'=:='
		    (_cor14,
		     Char) ->
	      %% Line 1320
	      apply 'string_split2'/7
		  (File, Ext, RevBase, [Char|RevTop], SaveFile, SaveExt, SaveTop)
	  %% Line 1321
	  <File,[],RevBase,RevTop,_X_SaveFile,_X_SaveExt,_X_SaveTop> when 'true' ->
	      %% Line 1322
	      {'split',RevBase,RevTop,File}
	  %% Line 1323
	  <_cor15,_X_Ext,_X_RevBase,_X_RevTop,SaveFile,SaveExt,SaveTop> when 'true' ->
	      %% Line 1324
	      apply 'string_split'/3
		  (SaveFile, SaveExt, SaveTop)
	end
'ipv4_list'/1 =
    %% Line 1327
    fun (_cor0) ->
	case _cor0 of
	  <[H|T]> when 'true' ->
	      let <_cor2> =
		  %% Line 1328
		  case <> of
		    <>
			when call 'erlang':'is_atom'
			      (H) ->
			let <_cor1> =
			    call 'erlang':'atom_to_list'
				(H)
			in  apply 'ipv4_address'/1
				(_cor1)
		    %% Line 1329
		    <>
			when call 'erlang':'is_list'
			      (H) ->
			apply 'ipv4_address'/1
			    (H)
		    %% Line 1330
		    <> when 'true' ->
			{'error','einal'}
		  end
	      in  %% Line 1332
		  case _cor2 of
		    %% Line 1333
		    <{'ok',IP}> when 'true' ->
			let <_cor4> =
			    apply 'ipv4_list'/1
				(T)
			in  [IP|_cor4]
		    %% Line 1334
		    <_cor7> when 'true' ->
			apply 'ipv4_list'/1
			    (T)
		  end
	  %% Line 1336
	  <[]> when 'true' ->
	      []
	  ( <_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6})
		  -| [{'function_name',{'ipv4_list',1}}] )
	    -| ['compiler_generated'] )
	end
'ipv4_address'/1 =
    %% Line 1343
    fun (_cor0) ->
	let <_cor1> =
	    catch
		%% Line 1344
		apply 'ipv4_addr'/2
		    (_cor0, [])
	in  %% Line 1344
	    case _cor1 of
	      %% Line 1345
	      <{'EXIT',_cor4}> when 'true' ->
		  {'error','einval'}
	      %% Line 1346
	      <Addr> when 'true' ->
		  {'ok',Addr}
	    end
'ipv4_addr'/2 =
    %% Line 1349
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[C|Cs],IP>
	      when let <_cor2> =
		    call 'erlang':'>='
			(C, 48)
		in  let <_cor3> =
			call 'erlang':'=<'
			    (C, 57)
		    in  call 'erlang':'and'
			    (_cor2, _cor3) ->
	      let <_cor4> =
		  call 'erlang':'-'
		      (C, 48)
	      in  apply 'ipv4_addr'/3
		      (Cs, _cor4, IP)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'ipv4_addr',2}}] )
	    -| ['compiler_generated'] )
	end
'ipv4_addr'/3 =
    %% Line 1351
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[46|Cs],N,IP>
	      when call 'erlang':'<'
		    (N,
		     256) ->
	      apply 'ipv4_addr'/2
		  (Cs, [N|IP])
	  %% Line 1352
	  <[C|Cs],N,IP>
	      when let <_cor3> =
		    call 'erlang':'>='
			(C, 48)
		in  let <_cor4> =
			call 'erlang':'=<'
			    (C, 57)
		    in  call 'erlang':'and'
			    (_cor3, _cor4) ->
	      let <_cor6> =
		  %% Line 1353
		  call 'erlang':'*'
		      (N, 10)
	      in  let <_cor5> =
		      %% Line 1353
		      call 'erlang':'-'
			  (C, 48)
		  in  let <_cor7> =
			  %% Line 1353
			  call 'erlang':'+'
			      (_cor6, _cor5)
		      in  %% Line 1353
			  apply 'ipv4_addr'/3
			      (Cs, _cor7, IP)
	  %% Line 1354
	  <[],D,[C|[B|[A|[]]]]>
	      when call 'erlang':'<'
		    (D,
		     256) ->
	      {A,B,C,D}
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'ipv4_addr',3}}] )
	    -| ['compiler_generated'] )
	end
'absname'/1 =
    %% Line 1357
    fun (_cor0) ->
	let <Name2> =
	    %% Line 1358
	    apply 'normalize'/2
		(_cor0, [])
	in  %% Line 1359
	    case apply 'pathtype'/1
		     (Name2) of
	      %% Line 1360
	      <'absolute'> when 'true' ->
		  %% Line 1361
		  Name2
	      %% Line 1362
	      <'relative'> when 'true' ->
		  %% Line 1363
		  case call 'prim_file':'get_cwd'
			   () of
		    %% Line 1364
		    <{'ok',Cwd}> when 'true' ->
			let <_cor2> =
			    %% Line 1365
			    [47|Name2]
			in  %% Line 1365
			    call 'erlang':'++'
				(Cwd, _cor2)
		    %% Line 1366
		    <{'error',_cor7}> when 'true' ->
			%% Line 1367
			Name2
		    ( <_cor3> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor3})
		      -| ['compiler_generated'] )
		  end
	      %% Line 1369
	      <'volumerelative'> when 'true' ->
		  %% Line 1370
		  case call 'prim_file':'get_cwd'
			   () of
		    %% Line 1371
		    <{'ok',Cwd}> when 'true' ->
			%% Line 1372
			apply 'absname_vr'/2
			    (Name2, Cwd)
		    %% Line 1373
		    <{'error',_cor8}> when 'true' ->
			%% Line 1374
			Name2
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor4})
		      -| ['compiler_generated'] )
		  end
	      ( <_cor5> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor5})
		-| ['compiler_generated'] )
	    end
'absname_vr'/2 =
    %% Line 1379
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[47|NameRest],[Drive|[58|_cor7]]> when 'true' ->
	      %% Line 1381
	      [Drive|[58|NameRest]]
	  %% Line 1382
	  <[Drive|[58|NameRest]],Cwd = [_cor8|[58|_cor9]]>
	      when call 'erlang':'=:='
		    (_cor8,
		     Drive) ->
	      let <_cor2> =
		  %% Line 1384
		  [47|NameRest]
	      in  %% Line 1384
		  call 'erlang':'++'
		      (Cwd, _cor2)
	  %% Line 1385
	  <[Drive|[58|NameRest]],_cor10> when 'true' ->
	      %% Line 1387
	      case call 'prim_file':'get_cwd'
		       ([Drive|[58]]) of
		%% Line 1388
		<{'ok',DriveCwd}> when 'true' ->
		    let <_cor3> =
			%% Line 1389
			[47|NameRest]
		    in  %% Line 1389
			call 'erlang':'++'
			    (DriveCwd, _cor3)
		%% Line 1390
		<{'error',_cor11}> when 'true' ->
		    %% Line 1391
		    [Drive|[58|[47|NameRest]]]
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'absname_vr',2}}] )
	    -| ['compiler_generated'] )
	end
'pathtype'/1 =
    %% Line 1395
    fun (_cor0) ->
	case _cor0 of
	  <Name>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      %% Line 1396
	      case call 'erlang':'system_info'
		       ('os_type') of
		%% Line 1397
		<{'ose',_cor3}> when 'true' ->
		    %% Line 1398
		    apply 'unix_pathtype'/1
			(Name)
		%% Line 1399
		<{'unix',_cor4}> when 'true' ->
		    %% Line 1400
		    apply 'unix_pathtype'/1
			(Name)
		%% Line 1401
		<{'win32',_cor5}> when 'true' ->
		    %% Line 1402
		    apply 'win32_pathtype'/1
			(Name)
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor1})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'pathtype',1}}] )
	    -| ['compiler_generated'] )
	end
'unix_pathtype'/1 =
    %% Line 1405
    fun (_cor0) ->
	%% Line 1406
	case _cor0 of
	  %% Line 1407
	  <[47|_cor5]> when 'true' ->
	      %% Line 1408
	      'absolute'
	  %% Line 1409
	  <[List|Rest]>
	      when call 'erlang':'is_list'
		    (List) ->
	      let <_cor1> =
		  %% Line 1410
		  call 'erlang':'++'
		      (List, Rest)
	      in  %% Line 1410
		  apply 'unix_pathtype'/1
		      (_cor1)
	  %% Line 1411
	  <[Atom|Rest]>
	      when call 'erlang':'is_atom'
		    (Atom) ->
	      let <_cor2> =
		  %% Line 1412
		  call 'erlang':'atom_to_list'
		      (Atom)
	      in  %% Line 1412
		  call 'erlang':'++'
		      (_cor2, Rest)
	  %% Line 1413
	  <_cor6> when 'true' ->
	      %% Line 1414
	      'relative'
	end
'win32_pathtype'/1 =
    %% Line 1417
    fun (_cor0) ->
	%% Line 1418
	case _cor0 of
	  %% Line 1419
	  <[List|Rest]>
	      when call 'erlang':'is_list'
		    (List) ->
	      let <_cor1> =
		  %% Line 1420
		  call 'erlang':'++'
		      (List, Rest)
	      in  %% Line 1420
		  apply 'win32_pathtype'/1
		      (_cor1)
	  %% Line 1421
	  <[Atom|Rest]>
	      when call 'erlang':'is_atom'
		    (Atom) ->
	      let <_cor2> =
		  %% Line 1422
		  call 'erlang':'atom_to_list'
		      (Atom)
	      in  let <_cor3> =
		      %% Line 1422
		      call 'erlang':'++'
			  (_cor2, Rest)
		  in  %% Line 1422
		      apply 'win32_pathtype'/1
			  (_cor3)
	  %% Line 1423
	  <[Char|[List|Rest]]>
	      when call 'erlang':'is_list'
		    (List) ->
	      let <_cor4> =
		  %% Line 1424
		  call 'erlang':'++'
		      (List, Rest)
	      in  %% Line 1424
		  apply 'win32_pathtype'/1
		      ([Char|_cor4])
	  %% Line 1425
	  <[47|[47|_cor8]]> when 'true' ->
	      %% Line 1426
	      'absolute'
	  %% Line 1427
	  <[47|_cor9]> when 'true' ->
	      %% Line 1428
	      'volumerelative'
	  %% Line 1429
	  <[C1|[C2|[List|Rest]]]>
	      when call 'erlang':'is_list'
		    (List) ->
	      let <_cor5> =
		  %% Line 1430
		  call 'erlang':'++'
		      (List, Rest)
	      in  %% Line 1430
		  apply 'win32_pathtype'/1
		      ([C1|[C2|_cor5]])
	  %% Line 1431
	  <[_X_Letter|[58|[47|_cor10]]]> when 'true' ->
	      %% Line 1432
	      'absolute'
	  %% Line 1433
	  <[_X_Letter|[58|_cor11]]> when 'true' ->
	      %% Line 1434
	      'volumerelative'
	  %% Line 1435
	  <_cor12> when 'true' ->
	      %% Line 1436
	      'relative'
	end
'normalize'/2 =
    %% Line 1439
    fun (_cor1,_cor0) ->
	%% Line 1440
	case _cor1 of
	  %% Line 1441
	  <[List|Rest]>
	      when call 'erlang':'is_list'
		    (List) ->
	      let <_cor2> =
		  %% Line 1442
		  call 'erlang':'++'
		      (List, Rest)
	      in  %% Line 1442
		  apply 'normalize'/2
		      (_cor2, _cor0)
	  %% Line 1443
	  <[Atom|Rest]>
	      when call 'erlang':'is_atom'
		    (Atom) ->
	      let <_cor3> =
		  %% Line 1444
		  call 'erlang':'atom_to_list'
		      (Atom)
	      in  let <_cor4> =
		      %% Line 1444
		      call 'erlang':'++'
			  (_cor3, Rest)
		  in  %% Line 1444
		      apply 'normalize'/2
			  (_cor4, _cor0)
	  %% Line 1445
	  <[92|Chars]> when 'true' ->
	      %% Line 1446
	      case call 'erlang':'system_info'
		       ('os_type') of
		%% Line 1447
		<{'win32',_cor9}> when 'true' ->
		    %% Line 1448
		    apply 'normalize'/2
			(Chars, [47|_cor0])
		%% Line 1449
		<_cor10> when 'true' ->
		    %% Line 1450
		    apply 'normalize'/2
			(Chars, [92|_cor0])
	      end
	  %% Line 1452
	  <[Char|Chars]> when 'true' ->
	      %% Line 1453
	      apply 'normalize'/2
		  (Chars, [Char|_cor0])
	  %% Line 1454
	  <[]> when 'true' ->
	      %% Line 1455
	      apply 'reverse'/1
		  (_cor0)
	  ( <_cor6> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor6})
	    -| ['compiler_generated'] )
	end
'real_path'/1 =
    %% Line 1465
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 1466
	    apply 'path_split'/1
		(_cor0)
	in  let <_cor2> =
		%% Line 1466
		apply 'reverse'/1
		    (_cor1)
	    in  %% Line 1466
		apply 'real_path'/4
		    (_cor0, _cor2, [], [])
'real_path'/4 =
    %% Line 1468
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <_X_Name,[],Acc,_X_Links> when 'true' ->
	      %% Line 1469
	      apply 'path_join'/1
		  (Acc)
	  %% Line 1470
	  <Name,[[46]|Paths],Acc,Links> when 'true' ->
	      %% Line 1471
	      apply 'real_path'/4
		  (Name, Paths, Acc, Links)
	  %% Line 1472
	  <Name,[[46|[46]]|Paths],Acc = [[]],Links> when 'true' ->
	      %% Line 1474
	      apply 'real_path'/4
		  (Name, Paths, Acc, Links)
	  %% Line 1475
	  <Name,[[46|[46]]|Paths],[Prev|Acc],Links>
	      when call 'erlang':'=/='
		    (Prev,
		     [46|[46]]) ->
	      %% Line 1476
	      apply 'real_path'/4
		  (Name, Paths, Acc, Links)
	  %% Line 1477
	  <Name,[Path|Paths],Acc,Links> when 'true' ->
	      let <This> =
		  %% Line 1478
		  [Path|Acc]
	      in  let <ThisFile> =
		      %% Line 1479
		      apply 'path_join'/1
			  (This)
		  in  %% Line 1480
		      case call 'lists':'member'
			       (ThisFile, Links) of
			%% Line 1481
			<'true'> when 'true' ->
			    %% Line 1482
			    Name
			%% Line 1483
			<'false'> when 'true' ->
			    %% Line 1484
			    case call 'prim_file':'read_link'
				     (ThisFile) of
			      %% Line 1485
			      <{'ok',Link}> when 'true' ->
				  let <_cor6> =
				      %% Line 1486
				      apply 'path_split'/1
					  (Link)
				  in  %% Line 1486
				      case apply 'reverse'/1
					       (_cor6) of
					%% Line 1487
					<LinkPaths = [[]|_cor16]> when 'true' ->
					    let <_cor7> =
						%% Line 1488
						call 'erlang':'++'
						    (LinkPaths, Paths)
					    in  %% Line 1488
						apply 'real_path'/4
						    (Name, _cor7, [], [ThisFile|Links])
					%% Line 1489
					<LinkPaths> when 'true' ->
					    let <_cor8> =
						%% Line 1490
						call 'erlang':'++'
						    (LinkPaths, Paths)
					    in  %% Line 1490
						apply 'real_path'/4
						    (Name, _cor8, Acc, [ThisFile|Links])
				      end
			      %% Line 1492
			      <_cor17> when 'true' ->
				  %% Line 1493
				  apply 'real_path'/4
				      (Name, Paths, This, Links)
			    end
			( <_cor11> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor11})
			  -| ['compiler_generated'] )
		      end
	  ( <_cor15,_cor14,_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14,_cor13,_cor12})
		  -| [{'function_name',{'real_path',4}}] )
	    -| ['compiler_generated'] )
	end
'load_prim_archive'/3 =
    %% Line 1497
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <ArchiveFile,ArchiveBin,FileInfo = {'file_info',_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29}> when 'true' ->
	      let <Fun> =
		  %% Line 1498
		  ( fun (_cor6,_cor5) ->
			case <_cor6,_cor5> of
			  <{Components,_X_GI,_X_GB},A> when 'true' ->
			      %% Line 1499
			      case Components of
				%% Line 1500
				<[[]|[[110|[105|[98|[101]]]]|[RevApp|[]]]]> when 'true' ->
				    let <Ebin> =
					%% Line 1502
					call 'lists':'reverse'
					    (RevApp, [47|[101|[98|[105|[110]]]]])
				    in  %% Line 1503
					{'true',[Ebin|A]}
				%% Line 1504
				<_cor30> when 'true' ->
				    %% Line 1505
				    {'true',A}
			      end
			  ( <_cor8,_cor7> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_cor8,_cor7})
				  -| [{'function_name',{'-load_prim_archive/3-fun-0-',2}}] )
			    -| ['compiler_generated'] )
			end
		    -| [{'id',{0,0,'-load_prim_archive/3-fun-0-'}}] )
	      in  let <Ebins0> =
		      %% Line 1508
		      [ArchiveFile|[]]
		  in  %% Line 1509
		      case apply 'open_archive'/4
			       ({ArchiveFile,ArchiveBin}, FileInfo, %% Line 1510
								    Ebins0, %% Line 1510
									    Fun) of
			%% Line 1511
			<{'ok',PrimZip,{RevEbins,FI,_cor31}}> when 'true' ->
			    let <Ebins> =
				%% Line 1512
				apply 'reverse'/1
				    (RevEbins)
			    in  %% Line 1513
				{'ok',PrimZip,FI,Ebins}
			%% Line 1514
			<Error> when 'true' ->
			    %% Line 1515
			    Error
		      end
	  %% Line 1517
	  <ArchiveFile,FileInfo,ParserFun> when 'true' ->
	      %% Line 1518
	      case apply ParserFun
		       (ArchiveFile) of
		%% Line 1519
		<{'ok',ArchiveBin}> when 'true' ->
		    %% Line 1520
		    apply 'load_prim_archive'/3
			(ArchiveFile, ArchiveBin, FileInfo)
		%% Line 1521
		<Error> when 'true' ->
		    %% Line 1522
		    Error
	      end
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('erl_prim_loader')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('erl_prim_loader', _cor0)
end