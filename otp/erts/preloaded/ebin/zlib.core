module 'zlib' ['adler32'/2,
	       'adler32'/3,
	       'adler32_combine'/4,
	       'close'/1,
	       'compress'/1,
	       'crc32'/1,
	       'crc32'/2,
	       'crc32'/3,
	       'crc32_combine'/4,
	       'deflate'/2,
	       'deflate'/3,
	       'deflateEnd'/1,
	       'deflateInit'/1,
	       'deflateInit'/2,
	       'deflateInit'/6,
	       'deflateParams'/3,
	       'deflateReset'/1,
	       'deflateSetDictionary'/2,
	       'getBufSize'/1,
	       'getQSize'/1,
	       'gunzip'/1,
	       'gzip'/1,
	       'inflate'/2,
	       'inflateEnd'/1,
	       'inflateInit'/1,
	       'inflateInit'/2,
	       'inflateReset'/1,
	       'inflateSetDictionary'/2,
	       'inflateSync'/1,
	       'module_info'/0,
	       'module_info'/1,
	       'open'/0,
	       'setBufSize'/2,
	       'uncompress'/1,
	       'unzip'/1,
	       'zip'/1]
    attributes [%% Line 33
		'export_type' =
		    %% Line 33
		    [{'zstream',0}],
		%% Line 121
		'type' =
		    %% Line 121
		    [{'zstream',{'type',121,'port',[]},[]}],
		%% Line 124
		'type' =
		    %% Line 124
		    [{'zlevel',{'type',124,'union',[{'atom',124,'none'}|[{'atom',124,'default'}|[{'atom',124,'best_compression'}|[{'atom',124,'best_speed'}|[{'type',125,'range',[{'integer',125,0}|[{'integer',125,9}]]}]]]]]},[]}],
		%% Line 126
		'type' =
		    %% Line 126
		    [{'zmethod',{'atom',126,'deflated'},[]}],
		%% Line 127
		'type' =
		    %% Line 127
		    [{'zwindowbits',{'type',127,'union',[{'type',127,'range',[{'op',127,'-',{'integer',127,15}}|[{'op',127,'-',{'integer',127,9}}]]}|[{'type',127,'range',[{'integer',127,9}|[{'integer',127,47}]]}]]},[]}],
		%% Line 128
		'type' =
		    %% Line 128
		    [{'zmemlevel',{'type',128,'range',[{'integer',128,1}|[{'integer',128,9}]]},[]}],
		%% Line 129
		'type' =
		    %% Line 129
		    [{'zstrategy',{'type',129,'union',[{'atom',129,'default'}|[{'atom',129,'filtered'}|[{'atom',129,'huffman_only'}|[{'atom',129,'rle'}]]]]},[]}],
		%% Line 134
		'spec' =
		    %% Line 134
		    [{{'open',0},[{'type',134,'fun',[{'type',134,'product',[]}|[{'type',134,'zstream',[]}]]}]}],
		%% Line 139
		'spec' =
		    %% Line 139
		    [{{'close',1},[{'type',139,'bounded_fun',[{'type',139,'fun',[{'type',139,'product',[{'var',139,'Z'}]}|[{'atom',139,'ok'}]]}|[[{'type',140,'constraint',[{'atom',140,'is_subtype'}|[[{'var',140,'Z'}|[{'type',140,'zstream',[]}]]]]}]]]}]}],
		%% Line 151
		'spec' =
		    %% Line 151
		    [{{'deflateInit',1},[{'type',151,'bounded_fun',[{'type',151,'fun',[{'type',151,'product',[{'var',151,'Z'}]}|[{'atom',151,'ok'}]]}|[[{'type',152,'constraint',[{'atom',152,'is_subtype'}|[[{'var',152,'Z'}|[{'type',152,'zstream',[]}]]]]}]]]}]}],
		%% Line 156
		'spec' =
		    %% Line 156
		    [{{'deflateInit',2},[{'type',156,'bounded_fun',[{'type',156,'fun',[{'type',156,'product',[{'var',156,'Z'}|[{'var',156,'Level'}]]}|[{'atom',156,'ok'}]]}|[[{'type',157,'constraint',[{'atom',157,'is_subtype'}|[[{'var',157,'Z'}|[{'type',157,'zstream',[]}]]]]}|[{'type',158,'constraint',[{'atom',158,'is_subtype'}|[[{'var',158,'Level'}|[{'type',158,'zlevel',[]}]]]]}]]]]}]}],
		%% Line 162
		'spec' =
		    %% Line 162
		    [{{'deflateInit',6},[{'type',162,'bounded_fun',[{'type',162,'fun',[{'type',162,'product',[{'var',162,'Z'}|[{'var',162,'Level'}|[{'var',162,'Method'}|[{'var',163,'WindowBits'}|[{'var',163,'MemLevel'}|[{'var',163,'Strategy'}]]]]]]}|[{'atom',163,'ok'}]]}|[[{'type',164,'constraint',[{'atom',164,'is_subtype'}|[[{'var',164,'Z'}|[{'type',164,'zstream',[]}]]]]}|[{'type',165,'constraint',[{'atom',165,'is_subtype'}|[[{'var',165,'Level'}|[{'type',165,'zlevel',[]}]]]]}|[{'type',166,'constraint',[{'atom',166,'is_subtype'}|[[{'var',166,'Method'}|[{'type',166,'zmethod',[]}]]]]}|[{'type',167,'constraint',[{'atom',167,'is_subtype'}|[[{'var',167,'WindowBits'}|[{'type',167,'zwindowbits',[]}]]]]}|[{'type',168,'constraint',[{'atom',168,'is_subtype'}|[[{'var',168,'MemLevel'}|[{'type',168,'zmemlevel',[]}]]]]}|[{'type',169,'constraint',[{'atom',169,'is_subtype'}|[[{'var',169,'Strategy'}|[{'type',169,'zstrategy',[]}]]]]}]]]]]]]]}]}],
		%% Line 177
		'spec' =
		    %% Line 177
		    [{{'deflateSetDictionary',2},[{'type',177,'bounded_fun',[{'type',177,'fun',[{'type',177,'product',[{'var',177,'Z'}|[{'var',177,'Dictionary'}]]}|[{'var',177,'Adler32'}]]}|[[{'type',178,'constraint',[{'atom',178,'is_subtype'}|[[{'var',178,'Z'}|[{'type',178,'zstream',[]}]]]]}|[{'type',179,'constraint',[{'atom',179,'is_subtype'}|[[{'var',179,'Dictionary'}|[{'type',179,'iodata',[]}]]]]}|[{'type',180,'constraint',[{'atom',180,'is_subtype'}|[[{'var',180,'Adler32'}|[{'type',180,'integer',[]}]]]]}]]]]]}]}],
		%% Line 184
		'spec' =
		    %% Line 184
		    [{{'deflateReset',1},[{'type',184,'bounded_fun',[{'type',184,'fun',[{'type',184,'product',[{'var',184,'Z'}]}|[{'atom',184,'ok'}]]}|[[{'type',185,'constraint',[{'atom',185,'is_subtype'}|[[{'var',185,'Z'}|[{'type',185,'zstream',[]}]]]]}]]]}]}],
		%% Line 189
		'spec' =
		    %% Line 189
		    [{{'deflateParams',3},[{'type',189,'bounded_fun',[{'type',189,'fun',[{'type',189,'product',[{'var',189,'Z'}|[{'var',189,'Level'}|[{'var',189,'Strategy'}]]]}|[{'atom',189,'ok'}]]}|[[{'type',190,'constraint',[{'atom',190,'is_subtype'}|[[{'var',190,'Z'}|[{'type',190,'zstream',[]}]]]]}|[{'type',191,'constraint',[{'atom',191,'is_subtype'}|[[{'var',191,'Level'}|[{'type',191,'zlevel',[]}]]]]}|[{'type',192,'constraint',[{'atom',192,'is_subtype'}|[[{'var',192,'Strategy'}|[{'type',192,'zstrategy',[]}]]]]}]]]]]}]}],
		%% Line 197
		'spec' =
		    %% Line 197
		    [{{'deflate',2},[{'type',197,'bounded_fun',[{'type',197,'fun',[{'type',197,'product',[{'var',197,'Z'}|[{'var',197,'Data'}]]}|[{'var',197,'Compressed'}]]}|[[{'type',198,'constraint',[{'atom',198,'is_subtype'}|[[{'var',198,'Z'}|[{'type',198,'zstream',[]}]]]]}|[{'type',199,'constraint',[{'atom',199,'is_subtype'}|[[{'var',199,'Data'}|[{'type',199,'iodata',[]}]]]]}|[{'type',200,'constraint',[{'atom',200,'is_subtype'}|[[{'var',200,'Compressed'}|[{'type',200,'iolist',[]}]]]]}]]]]]}]}],
		%% Line 204
		'spec' =
		    %% Line 204
		    [{{'deflate',3},[{'type',204,'bounded_fun',[{'type',204,'fun',[{'type',204,'product',[{'var',204,'Z'}|[{'var',204,'Data'}|[{'var',204,'Flush'}]]]}|[{'var',204,'Compressed'}]]}|[[{'type',205,'constraint',[{'atom',205,'is_subtype'}|[[{'var',205,'Z'}|[{'type',205,'zstream',[]}]]]]}|[{'type',206,'constraint',[{'atom',206,'is_subtype'}|[[{'var',206,'Data'}|[{'type',206,'iodata',[]}]]]]}|[{'type',207,'constraint',[{'atom',207,'is_subtype'}|[[{'var',207,'Flush'}|[{'type',207,'union',[{'atom',207,'none'}|[{'atom',207,'sync'}|[{'atom',207,'full'}|[{'atom',207,'finish'}]]]]}]]]]}|[{'type',208,'constraint',[{'atom',208,'is_subtype'}|[[{'var',208,'Compressed'}|[{'type',208,'iolist',[]}]]]]}]]]]]]}]}],
		%% Line 220
		'spec' =
		    %% Line 220
		    [{{'deflateEnd',1},[{'type',220,'bounded_fun',[{'type',220,'fun',[{'type',220,'product',[{'var',220,'Z'}]}|[{'atom',220,'ok'}]]}|[[{'type',221,'constraint',[{'atom',221,'is_subtype'}|[[{'var',221,'Z'}|[{'type',221,'zstream',[]}]]]]}]]]}]}],
		%% Line 225
		'spec' =
		    %% Line 225
		    [{{'inflateInit',1},[{'type',225,'bounded_fun',[{'type',225,'fun',[{'type',225,'product',[{'var',225,'Z'}]}|[{'atom',225,'ok'}]]}|[[{'type',226,'constraint',[{'atom',226,'is_subtype'}|[[{'var',226,'Z'}|[{'type',226,'zstream',[]}]]]]}]]]}]}],
		%% Line 230
		'spec' =
		    %% Line 230
		    [{{'inflateInit',2},[{'type',230,'bounded_fun',[{'type',230,'fun',[{'type',230,'product',[{'var',230,'Z'}|[{'var',230,'WindowBits'}]]}|[{'atom',230,'ok'}]]}|[[{'type',231,'constraint',[{'atom',231,'is_subtype'}|[[{'var',231,'Z'}|[{'type',231,'zstream',[]}]]]]}|[{'type',232,'constraint',[{'atom',232,'is_subtype'}|[[{'var',232,'WindowBits'}|[{'type',232,'zwindowbits',[]}]]]]}]]]]}]}],
		%% Line 236
		'spec' =
		    %% Line 236
		    [{{'inflateSetDictionary',2},[{'type',236,'bounded_fun',[{'type',236,'fun',[{'type',236,'product',[{'var',236,'Z'}|[{'var',236,'Dictionary'}]]}|[{'atom',236,'ok'}]]}|[[{'type',237,'constraint',[{'atom',237,'is_subtype'}|[[{'var',237,'Z'}|[{'type',237,'zstream',[]}]]]]}|[{'type',238,'constraint',[{'atom',238,'is_subtype'}|[[{'var',238,'Dictionary'}|[{'type',238,'iodata',[]}]]]]}]]]]}]}],
		%% Line 242
		'spec' =
		    %% Line 242
		    [{{'inflateSync',1},[{'type',242,'fun',[{'type',242,'product',[{'type',242,'zstream',[]}]}|[{'atom',242,'ok'}]]}]}],
		%% Line 246
		'spec' =
		    %% Line 246
		    [{{'inflateReset',1},[{'type',246,'bounded_fun',[{'type',246,'fun',[{'type',246,'product',[{'var',246,'Z'}]}|[{'atom',246,'ok'}]]}|[[{'type',247,'constraint',[{'atom',247,'is_subtype'}|[[{'var',247,'Z'}|[{'type',247,'zstream',[]}]]]]}]]]}]}],
		%% Line 251
		'spec' =
		    %% Line 251
		    [{{'inflate',2},[{'type',251,'bounded_fun',[{'type',251,'fun',[{'type',251,'product',[{'var',251,'Z'}|[{'var',251,'Data'}]]}|[{'var',251,'Decompressed'}]]}|[[{'type',252,'constraint',[{'atom',252,'is_subtype'}|[[{'var',252,'Z'}|[{'type',252,'zstream',[]}]]]]}|[{'type',253,'constraint',[{'atom',253,'is_subtype'}|[[{'var',253,'Data'}|[{'type',253,'iodata',[]}]]]]}|[{'type',254,'constraint',[{'atom',254,'is_subtype'}|[[{'var',254,'Decompressed'}|[{'type',254,'iolist',[]}]]]]}]]]]]}]}],
		%% Line 266
		'spec' =
		    %% Line 266
		    [{{'inflateEnd',1},[{'type',266,'bounded_fun',[{'type',266,'fun',[{'type',266,'product',[{'var',266,'Z'}]}|[{'atom',266,'ok'}]]}|[[{'type',267,'constraint',[{'atom',267,'is_subtype'}|[[{'var',267,'Z'}|[{'type',267,'zstream',[]}]]]]}]]]}]}],
		%% Line 271
		'spec' =
		    %% Line 271
		    [{{'setBufSize',2},[{'type',271,'bounded_fun',[{'type',271,'fun',[{'type',271,'product',[{'var',271,'Z'}|[{'var',271,'Size'}]]}|[{'atom',271,'ok'}]]}|[[{'type',272,'constraint',[{'atom',272,'is_subtype'}|[[{'var',272,'Z'}|[{'type',272,'zstream',[]}]]]]}|[{'type',273,'constraint',[{'atom',273,'is_subtype'}|[[{'var',273,'Size'}|[{'type',273,'non_neg_integer',[]}]]]]}]]]]}]}],
		%% Line 277
		'spec' =
		    %% Line 277
		    [{{'getBufSize',1},[{'type',277,'bounded_fun',[{'type',277,'fun',[{'type',277,'product',[{'var',277,'Z'}]}|[{'var',277,'Size'}]]}|[[{'type',278,'constraint',[{'atom',278,'is_subtype'}|[[{'var',278,'Z'}|[{'type',278,'zstream',[]}]]]]}|[{'type',279,'constraint',[{'atom',279,'is_subtype'}|[[{'var',279,'Size'}|[{'type',279,'non_neg_integer',[]}]]]]}]]]]}]}],
		%% Line 283
		'spec' =
		    %% Line 283
		    [{{'crc32',1},[{'type',283,'bounded_fun',[{'type',283,'fun',[{'type',283,'product',[{'var',283,'Z'}]}|[{'var',283,'CRC'}]]}|[[{'type',284,'constraint',[{'atom',284,'is_subtype'}|[[{'var',284,'Z'}|[{'type',284,'zstream',[]}]]]]}|[{'type',285,'constraint',[{'atom',285,'is_subtype'}|[[{'var',285,'CRC'}|[{'type',285,'integer',[]}]]]]}]]]]}]}],
		%% Line 289
		'spec' =
		    %% Line 289
		    [{{'crc32',2},[{'type',289,'bounded_fun',[{'type',289,'fun',[{'type',289,'product',[{'var',289,'Z'}|[{'var',289,'Data'}]]}|[{'var',289,'CRC'}]]}|[[{'type',290,'constraint',[{'atom',290,'is_subtype'}|[[{'var',290,'Z'}|[{'type',290,'zstream',[]}]]]]}|[{'type',291,'constraint',[{'atom',291,'is_subtype'}|[[{'var',291,'Data'}|[{'type',291,'iodata',[]}]]]]}|[{'type',292,'constraint',[{'atom',292,'is_subtype'}|[[{'var',292,'CRC'}|[{'type',292,'integer',[]}]]]]}]]]]]}]}],
		%% Line 296
		'spec' =
		    %% Line 296
		    [{{'crc32',3},[{'type',296,'bounded_fun',[{'type',296,'fun',[{'type',296,'product',[{'var',296,'Z'}|[{'var',296,'PrevCRC'}|[{'var',296,'Data'}]]]}|[{'var',296,'CRC'}]]}|[[{'type',297,'constraint',[{'atom',297,'is_subtype'}|[[{'var',297,'Z'}|[{'type',297,'zstream',[]}]]]]}|[{'type',298,'constraint',[{'atom',298,'is_subtype'}|[[{'var',298,'PrevCRC'}|[{'type',298,'integer',[]}]]]]}|[{'type',299,'constraint',[{'atom',299,'is_subtype'}|[[{'var',299,'Data'}|[{'type',299,'iodata',[]}]]]]}|[{'type',300,'constraint',[{'atom',300,'is_subtype'}|[[{'var',300,'CRC'}|[{'type',300,'integer',[]}]]]]}]]]]]]}]}],
		%% Line 304
		'spec' =
		    %% Line 304
		    [{{'adler32',2},[{'type',304,'bounded_fun',[{'type',304,'fun',[{'type',304,'product',[{'var',304,'Z'}|[{'var',304,'Data'}]]}|[{'var',304,'CheckSum'}]]}|[[{'type',305,'constraint',[{'atom',305,'is_subtype'}|[[{'var',305,'Z'}|[{'type',305,'zstream',[]}]]]]}|[{'type',306,'constraint',[{'atom',306,'is_subtype'}|[[{'var',306,'Data'}|[{'type',306,'iodata',[]}]]]]}|[{'type',307,'constraint',[{'atom',307,'is_subtype'}|[[{'var',307,'CheckSum'}|[{'type',307,'integer',[]}]]]]}]]]]]}]}],
		%% Line 311
		'spec' =
		    %% Line 311
		    [{{'adler32',3},[{'type',311,'bounded_fun',[{'type',311,'fun',[{'type',311,'product',[{'var',311,'Z'}|[{'var',311,'PrevAdler'}|[{'var',311,'Data'}]]]}|[{'var',311,'CheckSum'}]]}|[[{'type',312,'constraint',[{'atom',312,'is_subtype'}|[[{'var',312,'Z'}|[{'type',312,'zstream',[]}]]]]}|[{'type',313,'constraint',[{'atom',313,'is_subtype'}|[[{'var',313,'PrevAdler'}|[{'type',313,'integer',[]}]]]]}|[{'type',314,'constraint',[{'atom',314,'is_subtype'}|[[{'var',314,'Data'}|[{'type',314,'iodata',[]}]]]]}|[{'type',315,'constraint',[{'atom',315,'is_subtype'}|[[{'var',315,'CheckSum'}|[{'type',315,'integer',[]}]]]]}]]]]]]}]}],
		%% Line 321
		'spec' =
		    %% Line 321
		    [{{'crc32_combine',4},[{'type',321,'bounded_fun',[{'type',321,'fun',[{'type',321,'product',[{'var',321,'Z'}|[{'var',321,'CRC1'}|[{'var',321,'CRC2'}|[{'var',321,'Size2'}]]]]}|[{'var',321,'CRC'}]]}|[[{'type',322,'constraint',[{'atom',322,'is_subtype'}|[[{'var',322,'Z'}|[{'type',322,'zstream',[]}]]]]}|[{'type',323,'constraint',[{'atom',323,'is_subtype'}|[[{'var',323,'CRC'}|[{'type',323,'integer',[]}]]]]}|[{'type',324,'constraint',[{'atom',324,'is_subtype'}|[[{'var',324,'CRC1'}|[{'type',324,'integer',[]}]]]]}|[{'type',325,'constraint',[{'atom',325,'is_subtype'}|[[{'var',325,'CRC2'}|[{'type',325,'integer',[]}]]]]}|[{'type',326,'constraint',[{'atom',326,'is_subtype'}|[[{'var',326,'Size2'}|[{'type',326,'integer',[]}]]]]}]]]]]]]}]}],
		%% Line 333
		'spec' =
		    %% Line 333
		    [{{'adler32_combine',4},[{'type',333,'bounded_fun',[{'type',333,'fun',[{'type',333,'product',[{'var',333,'Z'}|[{'var',333,'Adler1'}|[{'var',333,'Adler2'}|[{'var',333,'Size2'}]]]]}|[{'var',333,'Adler'}]]}|[[{'type',334,'constraint',[{'atom',334,'is_subtype'}|[[{'var',334,'Z'}|[{'type',334,'zstream',[]}]]]]}|[{'type',335,'constraint',[{'atom',335,'is_subtype'}|[[{'var',335,'Adler'}|[{'type',335,'integer',[]}]]]]}|[{'type',336,'constraint',[{'atom',336,'is_subtype'}|[[{'var',336,'Adler1'}|[{'type',336,'integer',[]}]]]]}|[{'type',337,'constraint',[{'atom',337,'is_subtype'}|[[{'var',337,'Adler2'}|[{'type',337,'integer',[]}]]]]}|[{'type',338,'constraint',[{'atom',338,'is_subtype'}|[[{'var',338,'Size2'}|[{'type',338,'integer',[]}]]]]}]]]]]]]}]}],
		%% Line 345
		'spec' =
		    %% Line 345
		    [{{'getQSize',1},[{'type',345,'fun',[{'type',345,'product',[{'type',345,'zstream',[]}]}|[{'type',345,'non_neg_integer',[]}]]}]}],
		%% Line 350
		'spec' =
		    %% Line 350
		    [{{'compress',1},[{'type',350,'bounded_fun',[{'type',350,'fun',[{'type',350,'product',[{'var',350,'Data'}]}|[{'var',350,'Compressed'}]]}|[[{'type',351,'constraint',[{'atom',351,'is_subtype'}|[[{'var',351,'Data'}|[{'type',351,'iodata',[]}]]]]}|[{'type',352,'constraint',[{'atom',352,'is_subtype'}|[[{'var',352,'Compressed'}|[{'type',352,'binary',[]}]]]]}]]]]}]}],
		%% Line 365
		'spec' =
		    %% Line 365
		    [{{'uncompress',1},[{'type',365,'bounded_fun',[{'type',365,'fun',[{'type',365,'product',[{'var',365,'Data'}]}|[{'var',365,'Decompressed'}]]}|[[{'type',366,'constraint',[{'atom',366,'is_subtype'}|[[{'var',366,'Data'}|[{'type',366,'iodata',[]}]]]]}|[{'type',367,'constraint',[{'atom',367,'is_subtype'}|[[{'var',367,'Decompressed'}|[{'type',367,'binary',[]}]]]]}]]]]}]}],
		%% Line 392
		'spec' =
		    %% Line 392
		    [{{'zip',1},[{'type',392,'bounded_fun',[{'type',392,'fun',[{'type',392,'product',[{'var',392,'Data'}]}|[{'var',392,'Compressed'}]]}|[[{'type',393,'constraint',[{'atom',393,'is_subtype'}|[[{'var',393,'Data'}|[{'type',393,'iodata',[]}]]]]}|[{'type',394,'constraint',[{'atom',394,'is_subtype'}|[[{'var',394,'Compressed'}|[{'type',394,'binary',[]}]]]]}]]]]}]}],
		%% Line 407
		'spec' =
		    %% Line 407
		    [{{'unzip',1},[{'type',407,'bounded_fun',[{'type',407,'fun',[{'type',407,'product',[{'var',407,'Data'}]}|[{'var',407,'Decompressed'}]]}|[[{'type',408,'constraint',[{'atom',408,'is_subtype'}|[[{'var',408,'Data'}|[{'type',408,'iodata',[]}]]]]}|[{'type',409,'constraint',[{'atom',409,'is_subtype'}|[[{'var',409,'Decompressed'}|[{'type',409,'binary',[]}]]]]}]]]]}]}],
		%% Line 422
		'spec' =
		    %% Line 422
		    [{{'gzip',1},[{'type',422,'bounded_fun',[{'type',422,'fun',[{'type',422,'product',[{'var',422,'Data'}]}|[{'var',422,'Compressed'}]]}|[[{'type',423,'constraint',[{'atom',423,'is_subtype'}|[[{'var',423,'Data'}|[{'type',423,'iodata',[]}]]]]}|[{'type',424,'constraint',[{'atom',424,'is_subtype'}|[[{'var',424,'Compressed'}|[{'type',424,'binary',[]}]]]]}]]]]}]}],
		%% Line 437
		'spec' =
		    %% Line 437
		    [{{'gunzip',1},[{'type',437,'bounded_fun',[{'type',437,'fun',[{'type',437,'product',[{'var',437,'Data'}]}|[{'var',437,'Decompressed'}]]}|[[{'type',438,'constraint',[{'atom',438,'is_subtype'}|[[{'var',438,'Data'}|[{'type',438,'iodata',[]}]]]]}|[{'type',439,'constraint',[{'atom',439,'is_subtype'}|[[{'var',439,'Decompressed'}|[{'type',439,'binary',[]}]]]]}]]]]}]}],
		%% Line 452
		'spec' =
		    %% Line 452
		    [{{'collect',1},[{'type',452,'fun',[{'type',452,'product',[{'type',452,'zstream',[]}]}|[{'type',452,'iolist',[]}]]}]}],
		%% Line 456
		'spec' =
		    %% Line 456
		    [{{'collect',2},[{'type',456,'fun',[{'type',456,'product',[{'type',456,'zstream',[]}|[{'type',456,'iolist',[]}]]}|[{'type',456,'iolist',[]}]]}]}],
		%% Line 465
		'spec' =
		    %% Line 465
		    [{{'flush',1},[{'type',465,'fun',[{'type',465,'product',[{'type',465,'zstream',[]}]}|[{'atom',465,'ok'}]]}]}],
		%% Line 497
		'spec' =
		    %% Line 497
		    [{{'arg_bitsz',1},[{'type',497,'fun',[{'type',497,'product',[{'type',497,'zwindowbits',[]}]}|[{'type',497,'zwindowbits',[]}]]}]}],
		%% Line 504
		'spec' =
		    %% Line 504
		    [{{'arg_mem',1},[{'type',504,'fun',[{'type',504,'product',[{'type',504,'zmemlevel',[]}]}|[{'type',504,'zmemlevel',[]}]]}]}]]
'open'/0 =
    %% Line 135
    fun () ->
	%% Line 136
	call 'erlang':'open_port'
	    ({'spawn',[122|[108|[105|[98|[95|[100|[114|[118]]]]]]]]}, ['binary'])
'close'/1 =
    %% Line 141
    fun (_cor0) ->
	%% Line 142
	try
	    %% Line 143
	    case call 'erlang':'port_close'
		     (_cor0) of
	      <'true'> when 'true' ->
		  %% Line 144
		  receive
		    %% Line 145
		    <{'EXIT',_cor7,_cor8}>
			when call 'erlang':'=:='
			      (_cor7,
			       _cor0) ->
			'ok'
		  after %% Line 146
			0 ->
		    %% Line 146
		    'ok'
	      ( <_cor1> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor1})
		-| ['compiler_generated'] )
	    end
	of <_cor2> ->
	    _cor2
	catch <_cor5,_cor4,_cor3> ->
	    %% Line 148
	    call 'erlang':'error'
		('badarg')
'deflateInit'/1 =
    %% Line 153
    fun (_cor0) ->
	%% Line 154
	apply 'call'/3
	    (_cor0, 1, #{#<255>(8,1,'integer',['unsigned'|['big']]),
			 #<255>(8,1,'integer',['unsigned'|['big']]),
			 #<255>(8,1,'integer',['unsigned'|['big']]),
			 #<255>(8,1,'integer',['unsigned'|['big']])}#)
'deflateInit'/2 =
    %% Line 159
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 160
	    apply 'arg_level'/1
		(_cor0)
	in  let <_cor3> =
		%% Line 160
		#{#<_cor2>(32,1,'integer',['unsigned'|['big']])}#
	    in  %% Line 160
		apply 'call'/3
		    (_cor1, 1, _cor3)
'deflateInit'/6 =
    %% Line 170
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor10> =
	    %% Line 171
	    apply 'arg_level'/1
		(_cor4)
	in  let <_cor9> =
		%% Line 172
		apply 'arg_method'/1
		    (_cor3)
	    in  let <_cor8> =
		    %% Line 173
		    apply 'arg_bitsz'/1
			(_cor2)
		in  let <_cor7> =
			%% Line 174
			apply 'arg_mem'/1
			    (_cor1)
		    in  let <_cor6> =
			    %% Line 175
			    apply 'arg_strategy'/1
				(_cor0)
			in  let <_cor11> =
				%% Line 171
				#{#<_cor10>(32,1,'integer',['unsigned'|['big']]),
				  #<_cor9>(%% Line 172
					   32,1,'integer',['unsigned'|['big']]),
				  #<_cor8>(%% Line 173
					   32,1,'integer',['unsigned'|['big']]),
				  #<_cor7>(%% Line 174
					   32,1,'integer',['unsigned'|['big']]),
				  #<_cor6>(%% Line 175
					   32,1,'integer',['unsigned'|['big']])}#
			    in  %% Line 171
				apply 'call'/3
				    (_cor5, 2, _cor11)
'deflateSetDictionary'/2 =
    %% Line 181
    fun (_cor1,_cor0) ->
	%% Line 182
	apply 'call'/3
	    (_cor1, 3, _cor0)
'deflateReset'/1 =
    %% Line 186
    fun (_cor0) ->
	%% Line 187
	apply 'call'/3
	    (_cor0, 4, [])
'deflateParams'/3 =
    %% Line 193
    fun (_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 194
	    apply 'arg_level'/1
		(_cor1)
	in  let <_cor3> =
		%% Line 195
		apply 'arg_strategy'/1
		    (_cor0)
	    in  let <_cor5> =
		    %% Line 194
		    #{#<_cor4>(32,1,'integer',['unsigned'|['big']]),
		      #<_cor3>(%% Line 195
			       32,1,'integer',['unsigned'|['big']])}#
		in  %% Line 194
		    apply 'call'/3
			(_cor2, 6, _cor5)
'deflate'/2 =
    %% Line 201
    fun (_cor1,_cor0) ->
	%% Line 202
	apply 'deflate'/3
	    (_cor1, _cor0, 'none')
'deflate'/3 =
    %% Line 209
    fun (_cor2,_cor1,_cor0) ->
	%% Line 210
	try
	    call 'erlang':'port_command'
		(_cor2, _cor1)
	of <_cor3> ->
	    case _cor3 of
	      %% Line 211
	      <'true'> when 'true' ->
		  let <_cor4> =
		      %% Line 212
		      apply 'arg_flush'/1
			  (_cor0)
		  in  let <_cor5> =
			  %% Line 212
			  #{#<_cor4>(32,1,'integer',['unsigned'|['big']])}#
		      in  let <_X_> =
			      %% Line 212
			      apply 'call'/3
				  (_cor2, 7, _cor5)
			  in  %% Line 213
			      apply 'collect'/1
				  (_cor2)
	      ( <_cor7> when 'true' ->
		    primop 'match_fail'
			({'try_clause',_cor7})
		-| ['compiler_generated'] )
	    end
	catch <_cor10,_cor9,_cor8> ->
	    case <_cor10,_cor9,_cor8> of
	      %% Line 215
	      <'error',_X_Err,_cor14> when 'true' ->
		  do  %% Line 216
		      apply 'flush'/1
			  (_cor2)
		      %% Line 217
		      call 'erlang':'error'
			  ('badarg')
	      ( <_cor10,_cor9,_cor8> when 'true' ->
		    primop 'raise'
			(_cor8, _cor9)
		-| ['compiler_generated'] )
	    end
'deflateEnd'/1 =
    %% Line 222
    fun (_cor0) ->
	%% Line 223
	apply 'call'/3
	    (_cor0, 5, [])
'inflateInit'/1 =
    %% Line 227
    fun (_cor0) ->
	%% Line 228
	apply 'call'/3
	    (_cor0, 8, [])
'inflateInit'/2 =
    %% Line 233
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 234
	    apply 'arg_bitsz'/1
		(_cor0)
	in  let <_cor3> =
		%% Line 234
		#{#<_cor2>(32,1,'integer',['unsigned'|['big']])}#
	    in  %% Line 234
		apply 'call'/3
		    (_cor1, 9, _cor3)
'inflateSetDictionary'/2 =
    %% Line 239
    fun (_cor1,_cor0) ->
	%% Line 240
	apply 'call'/3
	    (_cor1, 10, _cor0)
'inflateSync'/1 =
    %% Line 243
    fun (_cor0) ->
	%% Line 244
	apply 'call'/3
	    (_cor0, 11, [])
'inflateReset'/1 =
    %% Line 248
    fun (_cor0) ->
	%% Line 249
	apply 'call'/3
	    (_cor0, 12, [])
'inflate'/2 =
    %% Line 255
    fun (_cor1,_cor0) ->
	%% Line 256
	try
	    call 'erlang':'port_command'
		(_cor1, _cor0)
	of <_cor2> ->
	    case _cor2 of
	      %% Line 257
	      <'true'> when 'true' ->
		  let <_X_> =
		      %% Line 258
		      apply 'call'/3
			  (_cor1, 14, #{#<0>(8,1,'integer',['unsigned'|['big']]),
					#<0>(8,1,'integer',['unsigned'|['big']]),
					#<0>(8,1,'integer',['unsigned'|['big']]),
					#<0>(8,1,'integer',['unsigned'|['big']])}#)
		  in  %% Line 259
		      apply 'collect'/1
			  (_cor1)
	      ( <_cor4> when 'true' ->
		    primop 'match_fail'
			({'try_clause',_cor4})
		-| ['compiler_generated'] )
	    end
	catch <_cor7,_cor6,_cor5> ->
	    case <_cor7,_cor6,_cor5> of
	      %% Line 261
	      <'error',_X_Err,_cor10> when 'true' ->
		  do  %% Line 262
		      apply 'flush'/1
			  (_cor1)
		      %% Line 263
		      call 'erlang':'error'
			  ('badarg')
	      ( <_cor7,_cor6,_cor5> when 'true' ->
		    primop 'raise'
			(_cor5, _cor6)
		-| ['compiler_generated'] )
	    end
'inflateEnd'/1 =
    %% Line 268
    fun (_cor0) ->
	%% Line 269
	apply 'call'/3
	    (_cor0, 13, [])
'setBufSize'/2 =
    %% Line 274
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 275
	    #{#<_cor0>(32,1,'integer',['unsigned'|['big']])}#
	in  %% Line 275
	    apply 'call'/3
		(_cor1, 18, _cor2)
'getBufSize'/1 =
    %% Line 280
    fun (_cor0) ->
	%% Line 281
	apply 'call'/3
	    (_cor0, 19, [])
'crc32'/1 =
    %% Line 286
    fun (_cor0) ->
	%% Line 287
	apply 'call'/3
	    (_cor0, 15, [])
'crc32'/2 =
    %% Line 293
    fun (_cor1,_cor0) ->
	%% Line 294
	apply 'call'/3
	    (_cor1, 16, _cor0)
'crc32'/3 =
    %% Line 301
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 302
	    #{#<_cor1>(32,1,'integer',['unsigned'|['big']])}#
	in  %% Line 302
	    apply 'call'/3
		(_cor2, 17, [_cor3|[_cor0|[]]])
'adler32'/2 =
    %% Line 308
    fun (_cor1,_cor0) ->
	%% Line 309
	apply 'call'/3
	    (_cor1, 21, _cor0)
'adler32'/3 =
    %% Line 316
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Z,Adler,Data>
	      when call 'erlang':'is_integer'
		    (Adler) ->
	      let <_cor3> =
		  %% Line 317
		  #{#<Adler>(32,1,'integer',['unsigned'|['big']])}#
	      in  %% Line 317
		  apply 'call'/3
		      (Z, 22, [_cor3|[Data|[]]])
	  %% Line 318
	  <_X_Z,_X_Adler,_X_Data> when 'true' ->
	      %% Line 319
	      call 'erlang':'error'
		  ('badarg')
	end
'crc32_combine'/4 =
    %% Line 327
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Z,CRC1,CRC2,Len2>
	      when %% Line 328
		try
		    let <_cor4> =
			call 'erlang':'is_integer'
			    (CRC1)
		    in  let <_cor5> =
			    call 'erlang':'is_integer'
				(CRC2)
			in  let <_cor6> =
				call 'erlang':'is_integer'
				    (Len2)
			    in  let <_cor7> =
				    call 'erlang':'and'
					(_cor5, _cor6)
				in  call 'erlang':'and'
					(_cor4, _cor7)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor8> =
		  %% Line 329
		  #{#<CRC1>(32,1,'integer',['unsigned'|['big']]),
		    #<CRC2>(32,1,'integer',['unsigned'|['big']]),
		    #<Len2>(32,1,'integer',['unsigned'|['big']])}#
	      in  %% Line 329
		  apply 'call'/3
		      (Z, 23, _cor8)
	  %% Line 330
	  <_X_Z,_X_CRC1,_X_CRC2,_X_Len2> when 'true' ->
	      %% Line 331
	      call 'erlang':'error'
		  ('badarg')
	end
'adler32_combine'/4 =
    %% Line 339
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Z,Adler1,Adler2,Len2>
	      when %% Line 340
		try
		    let <_cor4> =
			call 'erlang':'is_integer'
			    (Adler1)
		    in  let <_cor5> =
			    call 'erlang':'is_integer'
				(Adler2)
			in  let <_cor6> =
				call 'erlang':'is_integer'
				    (Len2)
			    in  let <_cor7> =
				    call 'erlang':'and'
					(_cor5, _cor6)
				in  call 'erlang':'and'
					(_cor4, _cor7)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor8> =
		  %% Line 341
		  #{#<Adler1>(32,1,'integer',['unsigned'|['big']]),
		    #<Adler2>(32,1,'integer',['unsigned'|['big']]),
		    #<Len2>(32,1,'integer',['unsigned'|['big']])}#
	      in  %% Line 341
		  apply 'call'/3
		      (Z, 24, _cor8)
	  %% Line 342
	  <_X_Z,_X_Adler1,_X_Adler2,_X_Len2> when 'true' ->
	      %% Line 343
	      call 'erlang':'error'
		  ('badarg')
	end
'getQSize'/1 =
    %% Line 346
    fun (_cor0) ->
	%% Line 347
	apply 'call'/3
	    (_cor0, 20, [])
'compress'/1 =
    %% Line 353
    fun (_cor0) ->
	let <Z> =
	    %% Line 354
	    apply 'open'/0
		()
	in  let <_cor7> =
		%% Line 355
		letrec
		    'after$^0'/0 =
			fun () ->
			    %% Line 361
			    apply 'close'/1
				(Z)
		in  try
			do  %% Line 356
			    apply 'deflateInit'/2
				(Z, 'default')
			    let <B> =
				%% Line 357
				apply 'deflate'/3
				    (Z, _cor0, 'finish')
			    in  do  %% Line 358
				    apply 'deflateEnd'/1
					(Z)
				    %% Line 359
				    B
		    of <_cor3> ->
			do  ( apply 'after$^0'/0
				  ()
			      -| ['compiler_generated'] )
			    _cor3
		    catch <_cor6,_cor5,_cor4> ->
			do  ( apply 'after$^0'/0
				  ()
			      -| ['compiler_generated'] )
			    primop 'raise'
				(_cor4, _cor5)
	    in  %% Line 363
		call 'erlang':'iolist_to_binary'
		    (_cor7)
'uncompress'/1 =
    %% Line 368
    fun (_cor0) ->
	%% Line 369
	try
	    call 'erlang':'iolist_size'
		(_cor0)
	of <_cor1> ->
	    %% Line 371
	    case <> of
	      %% Line 372
	      <>
		  when call 'erlang':'>='
			(_cor1,
			 8) ->
		  let <Z> =
		      %% Line 373
		      apply 'open'/0
			  ()
		  in  let <_cor8> =
			  %% Line 374
			  letrec
			      'after$^0'/0 =
				  fun () ->
				      %% Line 380
				      apply 'close'/1
					  (Z)
			  in  try
				  do  %% Line 375
				      apply 'inflateInit'/1
					  (Z)
				      let <B> =
					  %% Line 376
					  apply 'inflate'/2
					      (Z, _cor0)
				      in  do  %% Line 377
					      apply 'inflateEnd'/1
						  (Z)
					      %% Line 378
					      B
			      of <_cor4> ->
				  do  ( apply 'after$^0'/0
					    ()
					-| ['compiler_generated'] )
				      _cor4
			      catch <_cor7,_cor6,_cor5> ->
				  do  ( apply 'after$^0'/0
					    ()
					-| ['compiler_generated'] )
				      primop 'raise'
					  (_cor5, _cor6)
		      in  %% Line 382
			  call 'erlang':'iolist_to_binary'
			      (_cor8)
	      %% Line 383
	      <> when 'true' ->
		  %% Line 384
		  call 'erlang':'error'
		      ('data_error')
	    end
	catch <_cor13,_cor12,_cor11> ->
	    %% Line 388
	    call 'erlang':'error'
		('badarg')
'zip'/1 =
    %% Line 395
    fun (_cor0) ->
	let <Z> =
	    %% Line 396
	    apply 'open'/0
		()
	in  let <_cor8> =
		%% Line 397
		letrec
		    'after$^0'/0 =
			fun () ->
			    %% Line 403
			    apply 'close'/1
				(Z)
		in  try
			do  %% Line 398
			    apply 'deflateInit'/6
				(Z, 'default', 'deflated', -15, 8, 'default')
			    let <B> =
				%% Line 399
				apply 'deflate'/3
				    (Z, _cor0, 'finish')
			    in  do  %% Line 400
				    apply 'deflateEnd'/1
					(Z)
				    %% Line 401
				    B
		    of <_cor4> ->
			do  ( apply 'after$^0'/0
				  ()
			      -| ['compiler_generated'] )
			    _cor4
		    catch <_cor7,_cor6,_cor5> ->
			do  ( apply 'after$^0'/0
				  ()
			      -| ['compiler_generated'] )
			    primop 'raise'
				(_cor5, _cor6)
	    in  %% Line 405
		call 'erlang':'iolist_to_binary'
		    (_cor8)
'unzip'/1 =
    %% Line 410
    fun (_cor0) ->
	let <Z> =
	    %% Line 411
	    apply 'open'/0
		()
	in  let <_cor8> =
		%% Line 412
		letrec
		    'after$^0'/0 =
			fun () ->
			    %% Line 418
			    apply 'close'/1
				(Z)
		in  try
			do  %% Line 413
			    apply 'inflateInit'/2
				(Z, -15)
			    let <B> =
				%% Line 414
				apply 'inflate'/2
				    (Z, _cor0)
			    in  do  %% Line 415
				    apply 'inflateEnd'/1
					(Z)
				    %% Line 416
				    B
		    of <_cor4> ->
			do  ( apply 'after$^0'/0
				  ()
			      -| ['compiler_generated'] )
			    _cor4
		    catch <_cor7,_cor6,_cor5> ->
			do  ( apply 'after$^0'/0
				  ()
			      -| ['compiler_generated'] )
			    primop 'raise'
				(_cor5, _cor6)
	    in  %% Line 420
		call 'erlang':'iolist_to_binary'
		    (_cor8)
'gzip'/1 =
    %% Line 425
    fun (_cor0) ->
	let <Z> =
	    %% Line 426
	    apply 'open'/0
		()
	in  let <_cor8> =
		%% Line 427
		letrec
		    'after$^0'/0 =
			fun () ->
			    %% Line 433
			    apply 'close'/1
				(Z)
		in  try
			do  %% Line 428
			    apply 'deflateInit'/6
				(Z, 'default', 'deflated', 31, 8, 'default')
			    let <B> =
				%% Line 429
				apply 'deflate'/3
				    (Z, _cor0, 'finish')
			    in  do  %% Line 430
				    apply 'deflateEnd'/1
					(Z)
				    %% Line 431
				    B
		    of <_cor4> ->
			do  ( apply 'after$^0'/0
				  ()
			      -| ['compiler_generated'] )
			    _cor4
		    catch <_cor7,_cor6,_cor5> ->
			do  ( apply 'after$^0'/0
				  ()
			      -| ['compiler_generated'] )
			    primop 'raise'
				(_cor5, _cor6)
	    in  %% Line 435
		call 'erlang':'iolist_to_binary'
		    (_cor8)
'gunzip'/1 =
    %% Line 440
    fun (_cor0) ->
	let <Z> =
	    %% Line 441
	    apply 'open'/0
		()
	in  let <_cor8> =
		%% Line 442
		letrec
		    'after$^0'/0 =
			fun () ->
			    %% Line 448
			    apply 'close'/1
				(Z)
		in  try
			do  %% Line 443
			    apply 'inflateInit'/2
				(Z, 31)
			    let <B> =
				%% Line 444
				apply 'inflate'/2
				    (Z, _cor0)
			    in  do  %% Line 445
				    apply 'inflateEnd'/1
					(Z)
				    %% Line 446
				    B
		    of <_cor4> ->
			do  ( apply 'after$^0'/0
				  ()
			      -| ['compiler_generated'] )
			    _cor4
		    catch <_cor7,_cor6,_cor5> ->
			do  ( apply 'after$^0'/0
				  ()
			      -| ['compiler_generated'] )
			    primop 'raise'
				(_cor5, _cor6)
	    in  %% Line 450
		call 'erlang':'iolist_to_binary'
		    (_cor8)
'collect'/1 =
    %% Line 453
    fun (_cor0) ->
	%% Line 454
	apply 'collect'/2
	    (_cor0, [])
'collect'/2 =
    %% Line 457
    fun (_cor1,_cor0) ->
	%% Line 458
	receive
	  %% Line 459
	  <{_cor4,{'data',Bin}}>
	      when call 'erlang':'=:='
		    (_cor4,
		     _cor1) ->
	      %% Line 460
	      apply 'collect'/2
		  (_cor1, [Bin|_cor0])
	after %% Line 461
	      0 ->
	  %% Line 462
	  apply 'reverse'/1
	      (_cor0)
'flush'/1 =
    %% Line 466
    fun (_cor0) ->
	%% Line 467
	receive
	  %% Line 468
	  <{_cor2,{'data',_cor3}}>
	      when call 'erlang':'=:='
		    (_cor2,
		     _cor0) ->
	      %% Line 469
	      apply 'flush'/1
		  (_cor0)
	after %% Line 470
	      0 ->
	  %% Line 471
	  'ok'
'arg_flush'/1 =
    %% Line 474
    fun (_cor0) ->
	case _cor0 of
	  <'none'> when 'true' ->
	      0
	  %% Line 476
	  <'sync'> when 'true' ->
	      2
	  %% Line 477
	  <'full'> when 'true' ->
	      3
	  %% Line 478
	  <'finish'> when 'true' ->
	      4
	  %% Line 479
	  <_cor2> when 'true' ->
	      call 'erlang':'error'
		  ('badarg')
	end
'arg_level'/1 =
    %% Line 481
    fun (_cor0) ->
	case _cor0 of
	  <'none'> when 'true' ->
	      0
	  %% Line 482
	  <'best_speed'> when 'true' ->
	      1
	  %% Line 483
	  <'best_compression'> when 'true' ->
	      9
	  %% Line 484
	  <'default'> when 'true' ->
	      -1
	  %% Line 485
	  <Level>
	      when try
		    let <_cor1> =
			call 'erlang':'is_integer'
			    (_cor0)
		    in  let <_cor2> =
			    call 'erlang':'>='
				(_cor0, 0)
			in  let <_cor3> =
				call 'erlang':'=<'
				    (_cor0, 9)
			    in  let <_cor4> =
				    call 'erlang':'and'
					(_cor2, _cor3)
				in  call 'erlang':'and'
					(_cor1, _cor4)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      Level
	  %% Line 486
	  <_cor6> when 'true' ->
	      call 'erlang':'error'
		  ('badarg')
	end
'arg_strategy'/1 =
    %% Line 488
    fun (_cor0) ->
	case _cor0 of
	  <'filtered'> when 'true' ->
	      1
	  %% Line 489
	  <'huffman_only'> when 'true' ->
	      2
	  %% Line 490
	  <'rle'> when 'true' ->
	      3
	  %% Line 491
	  <'default'> when 'true' ->
	      0
	  %% Line 492
	  <_cor2> when 'true' ->
	      call 'erlang':'error'
		  ('badarg')
	end
'arg_method'/1 =
    %% Line 494
    fun (_cor0) ->
	case _cor0 of
	  <'deflated'> when 'true' ->
	      8
	  %% Line 495
	  <_cor2> when 'true' ->
	      call 'erlang':'error'
		  ('badarg')
	end
'arg_bitsz'/1 =
    %% Line 498
    fun (_cor0) ->
	case _cor0 of
	  <Bits>
	      when try
		    ( let <_cor12> =
			  ( case <> of
			      ( <>
				    when ( call 'erlang':'is_integer'
					    (_cor0)
					-| ['compiler_generated'] ) ->
				    let <_cor5> =
					%% Line 499
					( case <> of
					    ( <>
						  when ( call 'erlang':'<'
							  (8,
							   _cor0)
						      -| ['compiler_generated'] ) ->
						  ( call 'erlang':'<'
							(_cor0, 48)
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					    ( <> when 'true' ->
						  'false'
					      -| ['compiler_generated'] )
					  end
					  -| ['compiler_generated'] )
				    in  %% Line 499
					( case _cor5 of
					    ( <( 'true'
						 -| ['compiler_generated'] )> when 'true' ->
						  'true'
					      -| ['compiler_generated'] )
					    ( <( 'false'
						 -| ['compiler_generated'] )> when 'true' ->
						  %% Line 500
						  ( case <> of
						      ( <>
							    when ( call 'erlang':'=<'
								    (-15,
								     _cor0)
								-| ['compiler_generated'] ) ->
							    ( call 'erlang':'<'
								  (_cor0, -8)
							      -| ['compiler_generated'] )
							-| ['compiler_generated'] )
						      ( <> when 'true' ->
							    'false'
							-| ['compiler_generated'] )
						    end
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					    ( <_cor2> when 'true' ->
						  _cor2
					      -| ['compiler_generated'] )
					  end
					  -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			      ( <> when 'true' ->
				    'false'
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
		      in  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( '=:='
								 -| ['compiler_generated'] )
				(( _cor12
				   -| ['compiler_generated'] ), ( 'true'
								  -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 501
	      Bits
	  %% Line 502
	  <_cor14> when 'true' ->
	      call 'erlang':'error'
		  ('badarg')
	end
'arg_mem'/1 =
    %% Line 505
    fun (_cor0) ->
	case _cor0 of
	  <Level>
	      when try
		    let <_cor1> =
			call 'erlang':'is_integer'
			    (_cor0)
		    in  let <_cor2> =
			    call 'erlang':'=<'
				(1, _cor0)
			in  let <_cor3> =
				call 'erlang':'=<'
				    (_cor0, 9)
			    in  let <_cor4> =
				    call 'erlang':'and'
					(_cor2, _cor3)
				in  call 'erlang':'and'
					(_cor1, _cor4)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      Level
	  %% Line 506
	  <_cor6> when 'true' ->
	      call 'erlang':'error'
		  ('badarg')
	end
'call'/3 =
    %% Line 508
    fun (_cor2,_cor1,_cor0) ->
	%% Line 509
	try
	    call 'erlang':'port_control'
		(_cor2, _cor1, _cor0)
	of <_cor3> ->
	    case _cor3 of
	      %% Line 510
	      <[0|Res]> when 'true' ->
		  call 'erlang':'list_to_atom'
		      (Res)
	      %% Line 511
	      <[1|Res]> when 'true' ->
		  do  %% Line 512
		      apply 'flush'/1
			  (_cor2)
		      let <_cor4> =
			  %% Line 513
			  call 'erlang':'list_to_atom'
			      (Res)
		      in  %% Line 513
			  call 'erlang':'error'
			      (_cor4)
	      %% Line 514
	      <[2|[A|[B|[C|[D|[]]]]]]> when 'true' ->
		  let <_cor7> =
		      %% Line 515
		      call 'erlang':'bsl'
			  (A, 24)
		  in  let <_cor6> =
			  %% Line 515
			  call 'erlang':'bsl'
			      (B, 16)
		      in  let <_cor8> =
			      %% Line 515
			      call 'erlang':'+'
				  (_cor7, _cor6)
			  in  let <_cor5> =
				  %% Line 515
				  call 'erlang':'bsl'
				      (C, 8)
			      in  let <_cor9> =
				      %% Line 515
				      call 'erlang':'+'
					  (_cor8, _cor5)
				  in  %% Line 515
				      call 'erlang':'+'
					  (_cor9, D)
	      %% Line 516
	      <[3|[A|[B|[C|[D|[]]]]]]> when 'true' ->
		  let <_cor12> =
		      %% Line 517
		      call 'erlang':'bsl'
			  (A, 24)
		  in  let <_cor11> =
			  %% Line 517
			  call 'erlang':'bsl'
			      (B, 16)
		      in  let <_cor13> =
			      %% Line 517
			      call 'erlang':'+'
				  (_cor12, _cor11)
			  in  let <_cor10> =
				  %% Line 517
				  call 'erlang':'bsl'
				      (C, 8)
			      in  let <_cor14> =
				      %% Line 517
				      call 'erlang':'+'
					  (_cor13, _cor10)
				  in  let <_cor15> =
					  %% Line 517
					  call 'erlang':'+'
					      (_cor14, D)
				      in  %% Line 517
					  call 'erlang':'error'
					      ({'need_dictionary',_cor15})
	      ( <_cor16> when 'true' ->
		    primop 'match_fail'
			({'try_clause',_cor16})
		-| ['compiler_generated'] )
	    end
	catch <_cor19,_cor18,_cor17> ->
	    case <_cor19,_cor18,_cor17> of
	      %% Line 519
	      <'error','badarg',_cor23> when 'true' ->
		  %% Line 520
		  call 'erlang':'error'
		      ('badarg')
	      ( <_cor19,_cor18,_cor17> when 'true' ->
		    primop 'raise'
			(_cor17, _cor18)
		-| ['compiler_generated'] )
	    end
'reverse'/1 =
    %% Line 523
    fun (_cor0) ->
	%% Line 524
	apply 'reverse'/2
	    (_cor0, [])
'reverse'/2 =
    %% Line 526
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[H|T],Y> when 'true' ->
	      %% Line 527
	      apply 'reverse'/2
		  (T, [H|Y])
	  %% Line 528
	  <[],X> when 'true' ->
	      %% Line 529
	      X
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'reverse',2}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('zlib')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('zlib', _cor0)
end