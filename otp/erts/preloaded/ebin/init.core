module 'init' ['archive_extension'/0,
	       'boot'/1,
	       'code_path_choice'/0,
	       'ensure_loaded'/1,
	       'fetch_loaded'/0,
	       'get_argument'/1,
	       'get_arguments'/0,
	       'get_plain_arguments'/0,
	       'get_status'/0,
	       'make_permanent'/2,
	       'module_info'/0,
	       'module_info'/1,
	       'notify_when_started'/1,
	       'objfile_extension'/0,
	       'reboot'/0,
	       'restart'/0,
	       'run_on_load_handlers'/0,
	       'script_id'/0,
	       'stop'/0,
	       'stop'/1,
	       'wait_until_started'/0]
    attributes [%% Line 24
		'type' =
		    %% Line 24
		    [{{'record','file_info'},[{'typed_record_field',{'record_field',25,{'atom',25,'size'}},{'type',25,'union',[{'atom',25,'undefined'}|[{'type',25,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',26,{'atom',26,'type'}},{'type',26,'union',[{'atom',26,'undefined'}|[{'atom',26,'device'}|[{'atom',26,'directory'}|[{'atom',26,'other'}|[{'atom',26,'regular'}|[{'atom',26,'symlink'}]]]]]]}}|[{'typed_record_field',{'record_field',27,{'atom',27,'access'}},{'type',27,'union',[{'atom',27,'undefined'}|[{'atom',27,'read'}|[{'atom',27,'write'}|[{'atom',27,'read_write'}|[{'atom',27,'none'}]]]]]}}|[{'typed_record_field',{'record_field',28,{'atom',28,'atime'}},{'type',28,'union',[{'atom',28,'undefined'}|[{'remote_type',28,[{'atom',28,'file'}|[{'atom',28,'date_time'}|[[]]]]}|[{'type',28,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',32,{'atom',32,'mtime'}},{'type',32,'union',[{'atom',32,'undefined'}|[{'remote_type',32,[{'atom',32,'file'}|[{'atom',32,'date_time'}|[[]]]]}|[{'type',32,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',34,{'atom',34,'ctime'}},{'type',34,'union',[{'atom',34,'undefined'}|[{'remote_type',34,[{'atom',34,'file'}|[{'atom',34,'date_time'}|[[]]]]}|[{'type',34,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',40,{'atom',40,'mode'}},{'type',40,'union',[{'atom',40,'undefined'}|[{'type',40,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',43,{'atom',43,'links'}},{'type',43,'union',[{'atom',43,'undefined'}|[{'type',43,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',46,{'atom',46,'major_device'}},{'type',46,'union',[{'atom',46,'undefined'}|[{'type',46,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',52,{'atom',52,'minor_device'}},{'type',52,'union',[{'atom',52,'undefined'}|[{'type',52,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',53,{'atom',53,'inode'}},{'type',53,'union',[{'atom',53,'undefined'}|[{'type',53,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',54,{'atom',54,'uid'}},{'type',54,'union',[{'atom',54,'undefined'}|[{'type',54,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',55,{'atom',55,'gid'}},{'type',55,'union',[{'atom',55,'undefined'}|[{'type',55,'non_neg_integer',[]}]]}}]]]]]]]]]]]]],[]}],
		%% Line 58
		'type' =
		    %% Line 58
		    [{{'record','file_descriptor'},[{'typed_record_field',{'record_field',59,{'atom',59,'module'}},{'type',59,'union',[{'atom',59,'undefined'}|[{'type',59,'module',[]}]]}}|[{'typed_record_field',{'record_field',60,{'atom',60,'data'}},{'type',60,'union',[{'atom',60,'undefined'}|[{'type',60,'term',[]}]]}}]],[]}],
		%% Line 64
		'type' =
		    %% Line 64
		    [{'internal_status',{'type',64,'union',[{'atom',64,'starting'}|[{'atom',64,'started'}|[{'atom',64,'stopping'}]]]},[]}],
		%% Line 66
		'type' =
		    %% Line 66
		    [{{'record','state'},[{'record_field',66,{'atom',66,'flags'},{'nil',66}}|[{'record_field',67,{'atom',67,'args'},{'nil',67}}|[{'record_field',68,{'atom',68,'start'},{'nil',68}}|[{'typed_record_field',{'record_field',69,{'atom',69,'kernel'},{'nil',69}},{'type',69,'list',[{'type',69,'tuple',[{'type',69,'atom',[]}|[{'type',69,'pid',[]}]]}]}}|[{'typed_record_field',{'record_field',70,{'atom',70,'bootpid'}},{'type',70,'union',[{'atom',70,'undefined'}|[{'type',70,'pid',[]}]]}}|[{'typed_record_field',{'record_field',71,{'atom',71,'status'},{'tuple',71,[{'atom',71,'starting'}|[{'atom',71,'starting'}]]}},{'type',71,'tuple',[{'type',71,'internal_status',[]}|[{'type',71,'term',[]}]]}}|[{'record_field',72,{'atom',72,'script_id'},{'nil',72}}|[{'record_field',73,{'atom',73,'loaded'},{'nil',73}}|[{'record_field',74,{'atom',74,'subscribed'},{'nil',74}}]]]]]]]]],[]}],
		%% Line 75
		'type' =
		    %% Line 75
		    [{'state',{'type',75,'record',[{'atom',75,'state'}]},[]}],
		%% Line 82
		'spec' =
		    %% Line 82
		    [{{'get_arguments',0},[{'type',82,'bounded_fun',[{'type',82,'fun',[{'type',82,'product',[]}|[{'var',82,'Flags'}]]}|[[{'type',83,'constraint',[{'atom',83,'is_subtype'}|[[{'var',83,'Flags'}|[{'type',83,'list',[{'type',83,'tuple',[{'ann_type',83,[{'var',83,'Flag'}|[{'type',83,'atom',[]}]]}|[{'ann_type',83,[{'var',83,'Values'}|[{'type',83,'list',[{'type',83,'string',[]}]}]]}]]}]}]]]]}]]]}]}],
		%% Line 87
		'spec' =
		    %% Line 87
		    [{{'get_plain_arguments',0},[{'type',87,'bounded_fun',[{'type',87,'fun',[{'type',87,'product',[]}|[{'type',87,'list',[{'var',87,'Arg'}]}]]}|[[{'type',88,'constraint',[{'atom',88,'is_subtype'}|[[{'var',88,'Arg'}|[{'type',88,'string',[]}]]]]}]]]}]}],
		%% Line 92
		'spec' =
		    %% Line 92
		    [{{'get_argument',1},[{'type',92,'bounded_fun',[{'type',92,'fun',[{'type',92,'product',[{'var',92,'Flag'}]}|[{'type',92,'union',[{'type',92,'tuple',[{'atom',92,'ok'}|[{'var',92,'Arg'}]]}|[{'atom',92,'error'}]]}]]}|[[{'type',93,'constraint',[{'atom',93,'is_subtype'}|[[{'var',93,'Flag'}|[{'type',93,'atom',[]}]]]]}|[{'type',94,'constraint',[{'atom',94,'is_subtype'}|[[{'var',94,'Arg'}|[{'type',94,'list',[{'ann_type',94,[{'var',94,'Values'}|[{'type',94,'list',[{'type',94,'string',[]}]}]]}]}]]]]}]]]]}]}],
		%% Line 98
		'spec' =
		    %% Line 98
		    [{{'script_id',0},[{'type',98,'bounded_fun',[{'type',98,'fun',[{'type',98,'product',[]}|[{'var',98,'Id'}]]}|[[{'type',99,'constraint',[{'atom',99,'is_subtype'}|[[{'var',99,'Id'}|[{'type',99,'term',[]}]]]]}]]]}]}],
		%% Line 113
		'spec' =
		    %% Line 113
		    [{{'get_status',0},[{'type',113,'bounded_fun',[{'type',113,'fun',[{'type',113,'product',[]}|[{'type',113,'tuple',[{'var',113,'InternalStatus'}|[{'var',113,'ProvidedStatus'}]]}]]}|[[{'type',114,'constraint',[{'atom',114,'is_subtype'}|[[{'var',114,'InternalStatus'}|[{'type',114,'internal_status',[]}]]]]}|[{'type',115,'constraint',[{'atom',115,'is_subtype'}|[[{'var',115,'ProvidedStatus'}|[{'type',115,'term',[]}]]]]}]]]]}]}],
		%% Line 119
		'spec' =
		    %% Line 119
		    [{{'fetch_loaded',0},[{'type',119,'fun',[{'type',119,'product',[]}|[{'type',119,'list',[{'type',119,'atom',[]}]}]]}]}],
		%% Line 125
		'spec' =
		    %% Line 125
		    [{{'ensure_loaded',1},[{'type',125,'fun',[{'type',125,'product',[{'type',125,'atom',[]}]}|[{'type',125,'union',[{'atom',125,'not_allowed'}|[{'type',125,'tuple',[{'atom',125,'module'}|[{'type',125,'atom',[]}]]}]]}]]}]}],
		%% Line 129
		'spec' =
		    %% Line 129
		    [{{'make_permanent',2},[{'type',129,'fun',[{'type',129,'product',[{'remote_type',129,[{'atom',129,'file'}|[{'atom',129,'filename'}|[[]]]]}|[{'type',129,'union',[{'atom',129,'false'}|[{'remote_type',129,[{'atom',129,'file'}|[{'atom',129,'filename'}|[[]]]]}]]}]]}|[{'type',130,'union',[{'atom',130,'ok'}|[{'type',130,'tuple',[{'atom',130,'error'}|[{'type',130,'term',[]}]]}]]}]]}]}],
		%% Line 134
		'spec' =
		    %% Line 134
		    [{{'notify_when_started',1},[{'type',134,'fun',[{'type',134,'product',[{'type',134,'pid',[]}]}|[{'type',134,'union',[{'atom',134,'ok'}|[{'atom',134,'started'}]]}]]}]}],
		%% Line 138
		'spec' =
		    %% Line 138
		    [{{'wait_until_started',0},[{'type',138,'fun',[{'type',138,'product',[]}|[{'atom',138,'ok'}]]}]}],
		%% Line 151
		'spec' =
		    %% Line 151
		    [{{'restart',0},[{'type',151,'fun',[{'type',151,'product',[]}|[{'atom',151,'ok'}]]}]}],
		%% Line 154
		'spec' =
		    %% Line 154
		    [{{'reboot',0},[{'type',154,'fun',[{'type',154,'product',[]}|[{'atom',154,'ok'}]]}]}],
		%% Line 157
		'spec' =
		    %% Line 157
		    [{{'stop',0},[{'type',157,'fun',[{'type',157,'product',[]}|[{'atom',157,'ok'}]]}]}],
		%% Line 160
		'spec' =
		    %% Line 160
		    [{{'stop',1},[{'type',160,'bounded_fun',[{'type',160,'fun',[{'type',160,'product',[{'var',160,'Status'}]}|[{'atom',160,'ok'}]]}|[[{'type',161,'constraint',[{'atom',161,'is_subtype'}|[[{'var',161,'Status'}|[{'type',161,'union',[{'type',161,'non_neg_integer',[]}|[{'type',161,'string',[]}]]}]]]]}]]]}]}],
		%% Line 164
		'spec' =
		    %% Line 164
		    [{{'boot',1},[{'type',164,'bounded_fun',[{'type',164,'fun',[{'type',164,'product',[{'var',164,'BootArgs'}]}|[{'type',164,'no_return',[]}]]}|[[{'type',165,'constraint',[{'atom',165,'is_subtype'}|[[{'var',165,'BootArgs'}|[{'type',165,'list',[{'type',165,'binary',[]}]}]]]]}]]]}]}],
		%% Line 215
		'spec' =
		    %% Line 215
		    [{{'code_path_choice',0},[{'type',215,'fun',[{'type',215,'product',[]}|[{'type',215,'union',[{'atom',215,'relaxed'}|[{'atom',215,'strict'}]]}]]}]}],
		%% Line 295
		'spec' =
		    %% Line 295
		    [{{'boot_loop',2},[{'type',295,'fun',[{'type',295,'product',[{'type',295,'pid',[]}|[{'type',295,'state',[]}]]}|[{'type',295,'no_return',[]}]]}]}],
		%% Line 1001
		'spec' =
		    %% Line 1001
		    [{{'join',2},[{'type',1001,'fun',[{'type',1001,'product',[{'type',1001,'list',[{'type',1001,'string',[]}]}|[{'type',1001,'string',[]}]]}|[{'type',1001,'string',[]}]]}]}],
		%% Line 1332
		'spec' =
		    %% Line 1332
		    [{{'objfile_extension',0},[{'type',1332,'fun',[{'type',1332,'product',[]}|[{'type',1332,'nonempty_string',[]}]]}]}],
		%% Line 1341
		'spec' =
		    %% Line 1341
		    [{{'archive_extension',0},[{'type',1341,'fun',[{'type',1341,'product',[]}|[{'type',1341,'nonempty_string',[]}]]}]}]]
'debug'/2 =
    %% Line 79
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'false',_cor4> when 'true' ->
	      'ok'
	  %% Line 80
	  <_cor5,T> when 'true' ->
	      call 'erlang':'display'
		  (T)
	end
'get_arguments'/0 =
    %% Line 84
    fun () ->
	%% Line 85
	apply 'request'/1
	    ('get_arguments')
'get_plain_arguments'/0 =
    %% Line 89
    fun () ->
	let <_cor0> =
	    %% Line 90
	    apply 'request'/1
		('get_plain_arguments')
	in  %% Line 90
	    apply 'bs2ss'/1
		(_cor0)
'get_argument'/1 =
    %% Line 95
    fun (_cor0) ->
	%% Line 96
	apply 'request'/1
	    ({'get_argument',_cor0})
'script_id'/0 =
    %% Line 100
    fun () ->
	%% Line 101
	apply 'request'/1
	    ('script_id')
'bs2as'/1 =
    %% Line 103
    fun (_cor0) ->
	case _cor0 of
	  <L0>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      %% Line 104
	      apply 'map'/2
		  (( 'b2a'/1
		     -| [{'id',{0,0,'-bs2as/1-fun-0-'}}] ), L0)
	  %% Line 105
	  <L> when 'true' ->
	      %% Line 106
	      L
	end
'bs2ss'/1 =
    %% Line 108
    fun (_cor0) ->
	case _cor0 of
	  <L0>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      %% Line 109
	      apply 'map'/2
		  (( 'b2s'/1
		     -| [{'id',{0,0,'-bs2ss/1-fun-0-'}}] ), L0)
	  %% Line 110
	  <L> when 'true' ->
	      %% Line 111
	      L
	end
'get_status'/0 =
    %% Line 116
    fun () ->
	%% Line 117
	apply 'request'/1
	    ('get_status')
'fetch_loaded'/0 =
    %% Line 120
    fun () ->
	%% Line 121
	apply 'request'/1
	    ('fetch_loaded')
'ensure_loaded'/1 =
    %% Line 126
    fun (_cor0) ->
	%% Line 127
	apply 'request'/1
	    ({'ensure_loaded',_cor0})
'make_permanent'/2 =
    %% Line 131
    fun (_cor1,_cor0) ->
	%% Line 132
	apply 'request'/1
	    ({'make_permanent',_cor1,_cor0})
'notify_when_started'/1 =
    %% Line 135
    fun (_cor0) ->
	%% Line 136
	apply 'request'/1
	    ({'notify_when_started',_cor0})
'wait_until_started'/0 =
    %% Line 139
    fun () ->
	%% Line 140
	receive
	  %% Line 141
	  <{'init','started'}> when 'true' ->
	      'ok'
	after 'infinity' ->
	  'true'
'request'/1 =
    %% Line 144
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 145
	    call 'erlang':'self'
		()
	in  do  %% Line 145
		call 'erlang':'!'
		    ('init', {_cor1,_cor0})
		%% Line 146
		receive
		  %% Line 147
		  <{'init',Rep}> when 'true' ->
		      %% Line 148
		      Rep
		after 'infinity' ->
		  'true'
'restart'/0 =
    %% Line 152
    fun () ->
	do  call 'erlang':'!'
		('init', {'stop','restart'})
	    'ok'
'reboot'/0 =
    %% Line 155
    fun () ->
	do  call 'erlang':'!'
		('init', {'stop','reboot'})
	    'ok'
'stop'/0 =
    %% Line 158
    fun () ->
	do  call 'erlang':'!'
		('init', {'stop','stop'})
	    'ok'
'stop'/1 =
    %% Line 162
    fun (_cor0) ->
	do  call 'erlang':'!'
		('init', {'stop',{'stop',_cor0}})
	    'ok'
'boot'/1 =
    %% Line 166
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 167
	    call 'erlang':'self'
		()
	in  do  %% Line 167
		call 'erlang':'register'
		    ('init', _cor1)
		do  %% Line 168
		    call 'erlang':'process_flag'
			('trap_exit', 'true')
		    do  %% Line 169
			apply 'start_on_load_handler_process'/0
			    ()
			%% Line 170
			case apply 'parse_boot_args'/1
				 (_cor0) of
			  <{Start0,Flags,Args}> when 'true' ->
			      let <Start> =
				  %% Line 171
				  apply 'map'/2
				      (( 'prepare_run_args'/1
					 -| [{'id',{0,0,'-boot/1-fun-0-'}}] ), Start0)
			      in  let <Flags0> =
				      %% Line 172
				      apply 'flags_to_atoms_again'/1
					  (Flags)
				  in  %% Line 173
				      apply 'boot'/3
					  (Start, Flags0, Args)
			  ( <_cor2> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor2})
			    -| ['compiler_generated'] )
			end
'prepare_run_args'/1 =
    %% Line 175
    fun (_cor0) ->
	case _cor0 of
	  <{'eval',[Expr|[]]}> when 'true' ->
	      %% Line 176
	      {'eval',Expr}
	  %% Line 177
	  <{_cor8,L = []}> when 'true' ->
	      %% Line 178
	      apply 'bs2as'/1
		  (L)
	  %% Line 179
	  <{_cor9,L = [_cor10|[]]}> when 'true' ->
	      %% Line 180
	      apply 'bs2as'/1
		  (L)
	  %% Line 181
	  <{'s',[M|[F|Args]]}> when 'true' ->
	      let <_cor1> =
		  %% Line 182
		  apply 'b2a'/1
		      (M)
	      in  let <_cor2> =
		      %% Line 182
		      apply 'b2a'/1
			  (F)
		  in  let <_cor3> =
			  %% Line 182
			  apply 'bs2as'/1
			      (Args)
		      in  %% Line 182
			  [_cor1|[_cor2|_cor3]]
	  %% Line 183
	  <{'run',[M|[F|Args]]}> when 'true' ->
	      let <_cor4> =
		  %% Line 184
		  apply 'b2a'/1
		      (M)
	      in  let <_cor5> =
		      %% Line 184
		      apply 'b2a'/1
			  (F)
		  in  let <_cor6> =
			  %% Line 184
			  apply 'bs2ss'/1
			      (Args)
		      in  %% Line 184
			  [_cor4|[_cor5|_cor6]]
	  ( <_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7})
		  -| [{'function_name',{'prepare_run_args',1}}] )
	    -| ['compiler_generated'] )
	end
'b2a'/1 =
    %% Line 186
    fun (_cor0) ->
	case _cor0 of
	  <Bin>
	      when call 'erlang':'is_binary'
		    (_cor0) ->
	      let <_cor1> =
		  %% Line 187
		  apply 'b2s'/1
		      (Bin)
	      in  %% Line 187
		  call 'erlang':'list_to_atom'
		      (_cor1)
	  %% Line 188
	  <A>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      %% Line 189
	      A
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'b2a',1}}] )
	    -| ['compiler_generated'] )
	end
'b2s'/1 =
    %% Line 191
    fun (_cor0) ->
	case _cor0 of
	  <Bin>
	      when call 'erlang':'is_binary'
		    (_cor0) ->
	      %% Line 192
	      try
		  let <_cor1> =
		      %% Line 193
		      call 'file':'native_name_encoding'
			  ()
		  in  %% Line 193
		      call 'unicode':'characters_to_list'
			  (Bin, _cor1)
	      of <_cor2> ->
		  _cor2
	      catch <_cor5,_cor4,_cor3> ->
		  %% Line 195
		  call 'erlang':'binary_to_list'
		      (Bin)
	  %% Line 197
	  <L>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      %% Line 198
	      L
	  ( <_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6})
		  -| [{'function_name',{'b2s',1}}] )
	    -| ['compiler_generated'] )
	end
'map'/2 =
    %% Line 200
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <_X_F,[]> when 'true' ->
	      %% Line 201
	      []
	  %% Line 202
	  <F,[X|Rest]> when 'true' ->
	      let <_cor2> =
		  %% Line 203
		  apply F
		      (X)
	      in  let <_cor3> =
		      %% Line 203
		      apply 'map'/2
			  (F, Rest)
		  in  %% Line 203
		      [_cor2|_cor3]
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'map',2}}] )
	    -| ['compiler_generated'] )
	end
'flags_to_atoms_again'/1 =
    %% Line 205
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      %% Line 206
	      []
	  %% Line 207
	  <[{F0,L0}|Rest]> when 'true' ->
	      let <F> =
		  %% Line 209
		  apply 'b2a'/1
		      (F0)
	      in  let <_cor3> =
		      %% Line 210
		      apply 'flags_to_atoms_again'/1
			  (Rest)
		  in  %% Line 210
		      [{F,L0}|_cor3]
	  %% Line 211
	  <[{F0}|Rest]> when 'true' ->
	      let <F> =
		  %% Line 212
		  apply 'b2a'/1
		      (F0)
	      in  let <_cor5> =
		      %% Line 213
		      apply 'flags_to_atoms_again'/1
			  (Rest)
		  in  %% Line 213
		      [{F}|_cor5]
	  ( <_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6})
		  -| [{'function_name',{'flags_to_atoms_again',1}}] )
	    -| ['compiler_generated'] )
	end
'code_path_choice'/0 =
    %% Line 216
    fun () ->
	%% Line 217
	case apply 'get_argument'/1
		 ('code_path_choice') of
	  %% Line 218
	  <{'ok',[[[115|[116|[114|[105|[99|[116]]]]]]]]}> when 'true' ->
	      %% Line 219
	      'strict'
	  %% Line 220
	  <{'ok',[[[114|[101|[108|[97|[120|[101|[100]]]]]]]]]}> when 'true' ->
	      %% Line 221
	      'relaxed'
	  %% Line 222
	  <_X_Else> when 'true' ->
	      %% Line 223
	      'relaxed'
	end
'boot'/3 =
    %% Line 226
    fun (_cor2,_cor1,_cor0) ->
	let <BootPid> =
	    %% Line 227
	    apply 'do_boot'/2
		(_cor1, _cor2)
	in  let <State> =
		%% Line 228
		{'state',_cor1,_cor0,_cor2,[],%% Line 231
					      BootPid,{'starting','starting'},[],[],[]}
	    in  %% Line 232
		apply 'boot_loop'/2
		    (BootPid, State)
'to_string'/1 =
    %% Line 235
    fun (_cor0) ->
	case _cor0 of
	  <X>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      let <F> =
		  %% Line 236
		  apply 'flatten'/2
		      (X, [])
	      in  %% Line 237
		  case apply 'printable_list'/1
			   (F) of
		    %% Line 238
		    <'true'> when 'true' ->
			F
		    %% Line 239
		    <'false'> when 'true' ->
			[]
		    ( <_cor2> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor2})
		      -| ['compiler_generated'] )
		  end
	  %% Line 241
	  <X>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      %% Line 242
	      call 'erlang':'atom_to_list'
		  (X)
	  %% Line 243
	  <X>
	      when call 'erlang':'is_pid'
		    (_cor0) ->
	      %% Line 244
	      call 'erlang':'pid_to_list'
		  (X)
	  %% Line 245
	  <X>
	      when call 'erlang':'is_float'
		    (_cor0) ->
	      %% Line 246
	      call 'erlang':'float_to_list'
		  (X)
	  %% Line 247
	  <X>
	      when call 'erlang':'is_integer'
		    (_cor0) ->
	      %% Line 248
	      call 'erlang':'integer_to_list'
		  (X)
	  %% Line 249
	  <_X_X> when 'true' ->
	      %% Line 250
	      []
	end
'printable_list'/1 =
    %% Line 255
    fun (_cor0) ->
	case _cor0 of
	  <[H|T]>
	      when try
		    let <_cor1> =
			call 'erlang':'is_integer'
			    (H)
		    in  let <_cor2> =
			    call 'erlang':'>='
				(H, 32)
			in  let <_cor3> =
				call 'erlang':'=<'
				    (H, 126)
			    in  let <_cor4> =
				    call 'erlang':'and'
					(_cor2, _cor3)
				in  call 'erlang':'and'
					(_cor1, _cor4)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 256
	      apply 'printable_list'/1
		  (T)
	  %% Line 257
	  <[10|T]> when 'true' ->
	      apply 'printable_list'/1
		  (T)
	  %% Line 258
	  <[13|T]> when 'true' ->
	      apply 'printable_list'/1
		  (T)
	  %% Line 259
	  <[9|T]> when 'true' ->
	      apply 'printable_list'/1
		  (T)
	  %% Line 260
	  <[]> when 'true' ->
	      'true'
	  %% Line 261
	  <_cor6> when 'true' ->
	      'false'
	end
'flatten'/2 =
    %% Line 263
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[H|T],Tail>
	      when call 'erlang':'is_list'
		    (H) ->
	      let <_cor2> =
		  %% Line 264
		  apply 'flatten'/2
		      (T, Tail)
	      in  %% Line 264
		  apply 'flatten'/2
		      (H, _cor2)
	  %% Line 265
	  <[H|T],Tail> when 'true' ->
	      let <_cor3> =
		  %% Line 266
		  apply 'flatten'/2
		      (T, Tail)
	      in  %% Line 266
		  [H|_cor3]
	  %% Line 267
	  <[],Tail> when 'true' ->
	      %% Line 268
	      Tail
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'flatten',2}}] )
	    -| ['compiler_generated'] )
	end
'things_to_string'/1 =
    %% Line 270
    fun (_cor0) ->
	case _cor0 of
	  <[X|Rest]> when 'true' ->
	      let <_cor3> =
		  %% Line 271
		  apply 'to_string'/1
		      (X)
	      in  let <_cor1> =
		      %% Line 271
		      apply 'things_to_string'/1
			  (Rest)
		  in  let <_cor2> =
			  %% Line 271
			  [41|_cor1]
		      in  let <_cor4> =
			      %% Line 271
			      call 'erlang':'++'
				  (_cor3, _cor2)
			  in  %% Line 271
			      [32|[40|_cor4]]
	  %% Line 272
	  <[]> when 'true' ->
	      %% Line 273
	      []
	  ( <_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5})
		  -| [{'function_name',{'things_to_string',1}}] )
	    -| ['compiler_generated'] )
	end
'halt_string'/2 =
    %% Line 275
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 276
	    apply 'things_to_string'/1
		(_cor0)
	in  let <HaltString> =
		%% Line 276
		call 'erlang':'++'
		    (_cor1, _cor2)
	    in  %% Line 277
		case <> of
		  %% Line 278
		  <>
		      when try
			    let <_cor4> =
				call 'erlang':'length'
				    (HaltString)
			    in  call 'erlang':'<'
				    (_cor4, 199)
			of <Try> ->
			    Try
			catch <T,R> ->
			    'false' ->
		      HaltString
		  %% Line 279
		  <> when 'true' ->
		      apply 'first198'/2
			  (HaltString, 198)
		end
'first198'/2 =
    %% Line 282
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[H|T],N>
	      when call 'erlang':'>'
		    (N,
		     0) ->
	      let <_cor2> =
		  %% Line 283
		  call 'erlang':'-'
		      (N, 1)
	      in  let <_cor3> =
		      %% Line 283
		      apply 'first198'/2
			  (T, _cor2)
		  in  %% Line 283
		      [H|_cor3]
	  %% Line 284
	  <_cor6,0> when 'true' ->
	      %% Line 285
	      []
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'first198',2}}] )
	    -| ['compiler_generated'] )
	end
'crash'/2 =
    %% Line 291
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 292
	    apply 'halt_string'/2
		(_cor1, _cor0)
	in  %% Line 292
	    call 'erlang':'halt'
		(_cor2)
'boot_loop'/2 =
    %% Line 296
    fun (_cor1,_cor0) ->
	%% Line 297
	receive
	  %% Line 298
	  <{_cor57,'loaded',ModLoaded}>
	      when call 'erlang':'=:='
		    (_cor57,
		     _cor1) ->
	      %% Line 299
	      ( case _cor0 of
		  ( <( {'state',_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_rec0,_cor65}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_rec1> =
			    %% Line 300
			    [ModLoaded|_rec0]
			in  let <_cor8> =
				%% Line 300
				call 'erlang':'setelement'
				    (9, _cor0, _rec1)
			    in  %% Line 300
				apply 'boot_loop'/2
				    (_cor1, _cor8)
		    -| ['compiler_generated'] )
		  ( <_cor66> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 301
	  <{_cor77,'started',KernelPid}>
	      when call 'erlang':'=:='
		    (_cor77,
		     _cor1) ->
	      let <_cor9> =
		  %% Line 302
		  apply 'new_kernelpid'/3
		      (KernelPid, _cor1, _cor0)
	      in  %% Line 302
		  apply 'boot_loop'/2
		      (_cor1, _cor9)
	  %% Line 303
	  <{_cor78,'progress','started'}>
	      when call 'erlang':'=:='
		    (_cor78,
		     _cor1) ->
	      %% Line 304
	      ( case _cor0 of
		  ( <( {'state',_cor79,_cor80,_cor81,_cor82,_cor83,_rec3,_cor84,_cor85,_cor86}
		       -| ['compiler_generated'] )> when 'true' ->
			case _rec3 of
			  <{InS,_cor88}> when 'true' ->
			      do  %% Line 305
				  apply 'notify'/1
				      (_cor86)
				  let <_rec5> = {%% Line 306
				       InS,%% Line 306
					   'started'}
				  in  let <_cor17> =
					  %% Line 307
					  call 'erlang':'setelement'
					      (10, _cor0, [])
				      in  let <_cor19> =
					      %% Line 306
					      call 'erlang':'setelement'
						  (7, _cor17, _rec5)
					  in  %% Line 306
					      apply 'boot_loop'/2
						  (_cor1, _cor19)
			  ( <_cor12> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor12})
			    -| ['compiler_generated'] )
			end
		    -| ['compiler_generated'] )
		  ( <_cor87> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 308
	  <{_cor108,'progress',NewStatus}>
	      when call 'erlang':'=:='
		    (_cor108,
		     _cor1) ->
	      %% Line 309
	      ( case _cor0 of
		  ( <( {'state',_cor109,_cor110,_cor111,_cor112,_cor113,_rec7,_cor114,_cor115,_cor116}
		       -| ['compiler_generated'] )> when 'true' ->
			case _rec7 of
			  <{InS,_cor118}> when 'true' ->
			      let <_rec8> = {%% Line 310
				   InS,%% Line 310
				       NewStatus}
			      in  let <_cor26> =
				      %% Line 310
				      call 'erlang':'setelement'
					  (7, _cor0, _rec8)
				  in  %% Line 310
				      apply 'boot_loop'/2
					  (_cor1, _cor26)
			  ( <_cor22> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor22})
			    -| ['compiler_generated'] )
			end
		    -| ['compiler_generated'] )
		  ( <_cor117> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 311
	  <{_cor129,{'script_id',Id}}>
	      when call 'erlang':'=:='
		    (_cor129,
		     _cor1) ->
	      %% Line 312
	      case _cor0 of
		<{'state',_cor130,_cor131,_cor132,_cor133,_cor134,_cor135,_cor136,_cor137,_cor138}> when 'true' ->
		    let <_cor29> =
			call 'erlang':'setelement'
			    (8, _cor0, Id)
		    in  apply 'boot_loop'/2
			    (_cor1, _cor29)
		( <_cor139> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','state'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 313
	  <{'EXIT',_cor140,'normal'}>
	      when call 'erlang':'=:='
		    (_cor140,
		     _cor1) ->
	      %% Line 314
	      ( case _cor0 of
		  ( <( {'state',_cor141,_cor142,_cor143,_cor144,_cor145,_rec11,_cor146,_cor147,_cor148}
		       -| ['compiler_generated'] )> when 'true' ->
			case _rec11 of
			  <{_cor150,PS}> when 'true' ->
			      do  %% Line 315
				  apply 'notify'/1
				      (_cor148)
				  let <_rec13> = {%% Line 316
				       'started',%% Line 316
						 PS}
				  in  let <_cor37> =
					  %% Line 317
					  call 'erlang':'setelement'
					      (10, _cor0, [])
				      in  let <_cor39> =
					      %% Line 316
					      call 'erlang':'setelement'
						  (7, _cor37, _rec13)
					  in  %% Line 316
					      apply 'loop'/1
						  (_cor39)
			  ( <_cor32> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor32})
			    -| ['compiler_generated'] )
			end
		    -| ['compiler_generated'] )
		  ( <_cor149> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 318
	  <{'EXIT',_cor170,Reason}>
	      when call 'erlang':'=:='
		    (_cor170,
		     _cor1) ->
	      do  %% Line 319
		  call 'erlang':'display'
		      ({[105|[110|[105|[116|[32|[116|[101|[114|[109|[105|[110|[97|[116|[105|[110|[103|[32|[105|[110|[32|[100|[111|[95|[98|[111|[111|[116]]]]]]]]]]]]]]]]]]]]]]]]]]],Reason})
		  %% Line 320
		  apply 'crash'/2
		      ([105|[110|[105|[116|[32|[116|[101|[114|[109|[105|[110|[97|[116|[105|[110|[103|[32|[105|[110|[32|[100|[111|[95|[98|[111|[111|[116]]]]]]]]]]]]]]]]]]]]]]]]]]], [Reason|[]])
	  %% Line 321
	  <{'EXIT',Pid,Reason}> when 'true' ->
	      %% Line 322
	      ( case _cor0 of
		  ( <( {'state',_cor171,_cor172,_cor173,_rec15,_cor174,_cor175,_cor176,_cor177,_cor178}
		       -| ['compiler_generated'] )> when 'true' ->
			do  %% Line 323
			    apply 'terminate'/3
				(Pid, _rec15, Reason)
			    %% Line 324
			    apply 'boot_loop'/2
				(_cor1, _cor0)
		    -| ['compiler_generated'] )
		  ( <_cor179> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 325
	  <{'stop',Reason}> when 'true' ->
	      %% Line 326
	      apply 'stop'/2
		  (Reason, _cor0)
	  %% Line 327
	  <{From,'fetch_loaded'}> when 'true' ->
	      %% Line 328
	      ( case _cor0 of
		  ( <( {'state',_cor180,_cor181,_cor182,_cor183,_cor184,_cor185,_cor186,_rec16,_cor187}
		       -| ['compiler_generated'] )> when 'true' ->
			do  call 'erlang':'!'
				(From, {'init',_rec16})
			    let <_cor47> =
				%% Line 329
				call 'erlang':'setelement'
				    (9, _cor0, [])
			    in  %% Line 329
				apply 'garb_boot_loop'/2
				    (_cor1, _cor47)
		    -| ['compiler_generated'] )
		  ( <_cor188> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 330
	  <{From,{'ensure_loaded',Module}}> when 'true' ->
	      %% Line 331
	      ( case _cor0 of
		  ( <( {'state',_cor199,_cor200,_cor201,_cor202,_cor203,_cor204,_cor205,_rec18,_cor206}
		       -| ['compiler_generated'] )> when 'true' ->
			case apply 'ensure_loaded'/2
				 (Module, _rec18) of
			  <{Res,Loaded}> when 'true' ->
			      do  %% Line 332
				  call 'erlang':'!'
				      (From, {'init',Res})
				  let <_cor53> =
				      %% Line 333
				      call 'erlang':'setelement'
					  (9, _cor0, Loaded)
				  in  %% Line 333
				      apply 'boot_loop'/2
					  (_cor1, _cor53)
			  ( <_cor50> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor50})
			    -| ['compiler_generated'] )
			end
		    -| ['compiler_generated'] )
		  ( <_cor207> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 334
	  <Msg> when 'true' ->
	      let <_cor54> =
		  %% Line 335
		  apply 'handle_msg'/2
		      (Msg, _cor0)
	      in  %% Line 335
		  apply 'boot_loop'/2
		      (_cor1, _cor54)
	after 'infinity' ->
	  'true'
'ensure_loaded'/2 =
    %% Line 338
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 339
	    apply 'objfile_extension'/0
		()
	in  let <File> =
		%% Line 339
		apply 'concat'/1
		    ([_cor1|[_cor2|[]]])
	    in  let <_cor4> =
		    catch
			%% Line 340
			apply 'load_mod'/2
			    (_cor1, File)
		in  %% Line 340
		    case _cor4 of
		      %% Line 341
		      <{'ok',FullName}> when 'true' ->
			  %% Line 342
			  {{'module',_cor1},[{_cor1,FullName}|_cor0]}
		      %% Line 343
		      <Res> when 'true' ->
			  %% Line 344
			  {Res,_cor0}
		    end
'notify'/1 =
    %% Line 348
    fun (_cor0) ->
	let <_cor3> =
	    %% Line 349
	    ( fun (_cor1) ->
		  call 'erlang':'!'
		      (_cor1, {'init','started'})
	      -| [{'id',{0,0,'-notify/1-fun-0-'}}] )
	in  %% Line 349
	    call 'lists':'foreach'
		(_cor3, _cor0)
'garb_boot_loop'/2 =
    %% Line 359
    fun (_cor1,_cor0) ->
	do  %% Line 360
	    call 'erlang':'garbage_collect'
		()
	    %% Line 361
	    apply 'boot_loop'/2
		(_cor1, _cor0)
'new_kernelpid'/3 =
    %% Line 363
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{Name,{'ok',Pid}},BootPid,State>
	      when call 'erlang':'is_pid'
		    (Pid) ->
	      do  %% Line 364
		  call 'erlang':'link'
		      (Pid)
		  let <_cor3> =
		      %% Line 365
		      call 'erlang':'self'
			  ()
		  in  do  %% Line 365
			  call 'erlang':'!'
			      (BootPid, {_cor3,'ok',Pid})
			  %% Line 366
			  ( case State of
			      ( <( {'state',_cor14,_cor15,_cor16,_rec20,_cor17,_cor18,_cor19,_cor20,_cor21}
				   -| ['compiler_generated'] )> when 'true' ->
				    let <_rec21> =
					%% Line 367
					[{Name,Pid}|_rec20]
				    in  %% Line 367
					call 'erlang':'setelement'
					    (5, State, _rec21)
				-| ['compiler_generated'] )
			      ( <_cor22> when 'true' ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {'badrecord','state'}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
	  %% Line 368
	  <{_X_Name,'ignore'},BootPid,State> when 'true' ->
	      let <_cor10> =
		  %% Line 369
		  call 'erlang':'self'
		      ()
	      in  do  %% Line 369
		      call 'erlang':'!'
			  (BootPid, {_cor10,'ignore'})
		      %% Line 370
		      State
	  %% Line 371
	  <{Name,What},BootPid,State> when 'true' ->
	      do  %% Line 372
		  call 'erlang':'display'
		      ({[99|[111|[117|[108|[100|[32|[110|[111|[116|[32|[115|[116|[97|[114|[116|[32|[107|[101|[114|[110|[101|[108|[32|[112|[105|[100]]]]]]]]]]]]]]]]]]]]]]]]]],Name,What})
		  do  %% Line 373
		      apply 'clear_system'/2
			  (BootPid, State)
		      %% Line 374
		      apply 'crash'/2
			  ([99|[111|[117|[108|[100|[32|[110|[111|[116|[32|[115|[116|[97|[114|[116|[32|[107|[101|[114|[110|[101|[108|[32|[112|[105|[100]]]]]]]]]]]]]]]]]]]]]]]]]], [Name|[What|[]]])
	  ( <_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11})
		  -| [{'function_name',{'new_kernelpid',3}}] )
	    -| ['compiler_generated'] )
	end
'loop'/1 =
    %% Line 378
    fun (_cor0) ->
	%% Line 379
	receive
	  %% Line 380
	  <{'EXIT',Pid,Reason}> when 'true' ->
	      %% Line 381
	      ( case _cor0 of
		  ( <( {'state',_cor9,_cor10,_cor11,_rec23,_cor12,_cor13,_cor14,_cor15,_cor16}
		       -| ['compiler_generated'] )> when 'true' ->
			do  %% Line 382
			    apply 'terminate'/3
				(Pid, _rec23, Reason)
			    %% Line 383
			    apply 'loop'/1
				(_cor0)
		    -| ['compiler_generated'] )
		  ( <_cor17> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 384
	  <{'stop',Reason}> when 'true' ->
	      %% Line 385
	      apply 'stop'/2
		  (Reason, _cor0)
	  %% Line 386
	  <{From,'fetch_loaded'}> when 'true' ->
	      %% Line 387
	      ( case _cor0 of
		  ( <( {'state',_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_rec24,_cor25}
		       -| ['compiler_generated'] )> when 'true' ->
			do  %% Line 388
			    call 'erlang':'!'
				(From, {'init',_rec24})
			    %% Line 389
			    apply 'loop'/1
				(_cor0)
		    -| ['compiler_generated'] )
		  ( <_cor26> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 390
	  <{From,{'ensure_loaded',_cor27}}> when 'true' ->
	      do  %% Line 391
		  call 'erlang':'!'
		      (From, {'init','not_allowed'})
		  %% Line 392
		  apply 'loop'/1
		      (_cor0)
	  %% Line 393
	  <Msg> when 'true' ->
	      let <_cor7> =
		  %% Line 394
		  apply 'handle_msg'/2
		      (Msg, _cor0)
	      in  %% Line 394
		  apply 'loop'/1
		      (_cor7)
	after 'infinity' ->
	  'true'
'handle_msg'/2 =
    %% Line 397
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    catch
		%% Line 398
		apply 'do_handle_msg'/2
		    (_cor1, _cor0)
	in  %% Line 398
	    case _cor2 of
	      %% Line 399
	      <{'new_state',State}> when 'true' ->
		  State
	      %% Line 400
	      <_cor6> when 'true' ->
		  _cor0
	    end
'do_handle_msg'/2 =
    %% Line 403
    fun (_cor1,_cor0) ->
	%% Line 408
	case _cor0 of
	  <{'state',Flags,Args,_cor19,_cor20,_cor21,Status,Sid,_cor22,Subscribed}> when 'true' ->
	      %% Line 409
	      case _cor1 of
		%% Line 410
		<{From,'get_plain_arguments'}> when 'true' ->
		    %% Line 411
		    call 'erlang':'!'
			(From, {'init',Args})
		%% Line 412
		<{From,'get_arguments'}> when 'true' ->
		    let <_cor3> =
			%% Line 413
			apply 'get_arguments'/1
			    (Flags)
		    in  %% Line 413
			call 'erlang':'!'
			    (From, {'init',_cor3})
		%% Line 414
		<{From,{'get_argument',Arg}}> when 'true' ->
		    let <_cor4> =
			%% Line 415
			apply 'get_argument'/2
			    (Arg, Flags)
		    in  %% Line 415
			call 'erlang':'!'
			    (From, {'init',_cor4})
		%% Line 416
		<{From,'get_status'}> when 'true' ->
		    %% Line 417
		    call 'erlang':'!'
			(From, {'init',Status})
		%% Line 418
		<{From,'script_id'}> when 'true' ->
		    %% Line 419
		    call 'erlang':'!'
			(From, {'init',Sid})
		%% Line 420
		<{From,{'make_permanent',Boot,Config}}> when 'true' ->
		    %% Line 421
		    case apply 'make_permanent'/4
			     (Boot, Config, Flags, _cor0) of
		      <{Res,State1}> when 'true' ->
			  do  %% Line 422
			      call 'erlang':'!'
				  (From, {'init',Res})
			      %% Line 423
			      {'new_state',State1}
		      ( <_cor5> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor5})
			-| ['compiler_generated'] )
		    end
		%% Line 424
		<{From,{'notify_when_started',Pid}}> when 'true' ->
		    %% Line 425
		    case Status of
		      %% Line 426
		      <{InS,PS}>
			  when let <_cor6> =
				call 'erlang':'=:='
				    (InS, 'started')
			    in  let <_cor7> =
				    call 'erlang':'=:='
					(PS, 'started')
				in  call 'erlang':'or'
					(_cor6, _cor7) ->
			  %% Line 427
			  call 'erlang':'!'
			      (From, {'init','started'})
		      %% Line 428
		      <_cor23> when 'true' ->
			  do  %% Line 429
			      call 'erlang':'!'
				  (From, {'init','ok'})
			      let <_rec25> =
				  %% Line 430
				  [Pid|Subscribed]
			      in  let <_cor11> =
				      %% Line 430
				      call 'erlang':'setelement'
					  (10, _cor0, _rec25)
				  in  %% Line 430
				      {'new_state',_cor11}
		    end
		%% Line 432
		<X> when 'true' ->
		    %% Line 433
		    case call 'erlang':'whereis'
			     ('user') of
		      %% Line 434
		      <'undefined'> when 'true' ->
			  catch
			      let <_cor14> =
				  %% Line 435
				  call 'erlang':'self'
				      ()
			      in  let <_cor13> =
				      %% Line 435
				      call 'erlang':'self'
					  ()
				  in  %% Line 435
				      call 'erlang':'!'
					  ('error_logger', {'info',_cor14,{_cor13,X,[]}})
		      %% Line 436
		      <User> when 'true' ->
			  do  %% Line 437
			      call 'erlang':'!'
				  (User, X)
			      %% Line 438
			      'ok'
		    end
	      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'make_permanent'/4 =
    %% Line 452
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 453
	case apply 'set_flag'/3
		 ('-boot', _cor3, _cor1) of
	  %% Line 454
	  <{'ok',Flags1}> when 'true' ->
	      %% Line 455
	      case apply 'set_flag'/3
		       ('-config', _cor2, Flags1) of
		%% Line 456
		<{'ok',Flags}> when 'true' ->
		    %% Line 457
		    case _cor0 of
		      <{'state',_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21}> when 'true' ->
			  let <_cor6> =
			      call 'erlang':'setelement'
				  (2, _cor0, Flags)
			  in  {'ok',_cor6}
		      ( <_cor22> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','state'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		%% Line 458
		<Error> when 'true' ->
		    %% Line 459
		    {Error,_cor0}
	      end
	  %% Line 461
	  <Error> when 'true' ->
	      %% Line 462
	      {Error,_cor0}
	end
'set_flag'/3 =
    %% Line 465
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <_X_Flag,'false',Flags> when 'true' ->
	      %% Line 466
	      {'ok',Flags}
	  %% Line 467
	  <Flag,Value,Flags>
	      when call 'erlang':'is_list'
		    (Value) ->
	      let <Encoding> =
		  %% Line 470
		  call 'file':'native_name_encoding'
		      ()
	      in  let <_cor4> =
		      catch
			  %% Line 471
			  call 'unicode':'characters_to_binary'
			      (Value, Encoding, Encoding)
		  in  %% Line 471
		      case _cor4 of
			%% Line 472
			<{'EXIT',_cor10}> when 'true' ->
			    %% Line 473
			    {'error','badarg'}
			%% Line 474
			<AValue> when 'true' ->
			    let <_cor5> =
				%% Line 475
				apply 'set_argument'/3
				    (Flags, Flag, AValue)
			    in  %% Line 475
				{'ok',_cor5}
		      end
	  %% Line 477
	  <_cor11,_cor12,_cor13> when 'true' ->
	      %% Line 478
	      {'error','badarg'}
	end
'stop'/2 =
    %% Line 487
    fun (_cor1,_cor0) ->
	%% Line 488
	( case _cor0 of
	    ( <( {'state',_cor15,_cor16,_cor17,_cor18,_rec28,_cor19,_cor20,_cor21,_cor22}
		 -| ['compiler_generated'] )> when 'true' ->
		  %% Line 489
		  case _cor19 of
		    <{_cor33,Progress}> when 'true' ->
			let <_rec30> = {%% Line 490
			     'stopping',%% Line 490
					Progress}
			in  let <_cor11> =
				%% Line 490
				call 'erlang':'setelement'
				    (7, _cor0, _rec30)
			    in  do  %% Line 491
				    apply 'clear_system'/2
					(_rec28, _cor11)
				    %% Line 492
				    apply 'do_stop'/2
					(_cor1, _cor11)
		    ( <_cor7> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor7})
		      -| ['compiler_generated'] )
		  end
	      -| ['compiler_generated'] )
	    ( <_cor23> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','state'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'do_stop'/2 =
    %% Line 494
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'restart',{'state',Flags,Args,Start,_cor4,_cor5,_cor6,_cor7,_cor8,_cor9}> when 'true' ->
	      %% Line 495
	      apply 'boot'/3
		  (Start, Flags, Args)
	  %% Line 496
	  <'reboot',_cor10> when 'true' ->
	      %% Line 497
	      call 'erlang':'halt'
		  ()
	  %% Line 498
	  <'stop',State> when 'true' ->
	      do  %% Line 499
		  apply 'stop_heart'/1
		      (State)
		  %% Line 500
		  call 'erlang':'halt'
		      ()
	  %% Line 501
	  <{'stop',Status},State> when 'true' ->
	      do  %% Line 502
		  apply 'stop_heart'/1
		      (State)
		  %% Line 503
		  call 'erlang':'halt'
		      (Status)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'do_stop',2}}] )
	    -| ['compiler_generated'] )
	end
'clear_system'/2 =
    %% Line 505
    fun (_cor1,_cor0) ->
	%% Line 506
	( case _cor0 of
	    ( <( {'state',_cor7,_cor8,_cor9,_rec32,_cor10,_cor11,_cor12,_cor13,_cor14}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <Heart> =
		      apply 'get_heart'/1
			  (_rec32)
		  in  do  %% Line 507
			  apply 'shutdown_pids'/3
			      (Heart, _cor1, _cor0)
			  %% Line 508
			  apply 'unload'/1
			      (Heart)
	      -| ['compiler_generated'] )
	    ( <_cor15> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','state'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'stop_heart'/1 =
    %% Line 510
    fun (_cor0) ->
	%% Line 511
	( case _cor0 of
	    ( <( {'state',_cor7,_cor8,_cor9,_rec33,_cor10,_cor11,_cor12,_cor13,_cor14}
		 -| ['compiler_generated'] )> when 'true' ->
		  case apply 'get_heart'/1
			   (_rec33) of
		    %% Line 512
		    <'false'> when 'true' ->
			%% Line 513
			'ok'
		    %% Line 514
		    <Pid> when 'true' ->
			let <BootPid> =
			    %% Line 516
			    call 'erlang':'self'
				()
			in  let <_cor4> =
				%% Line 518
				call 'erlang':'self'
				    ()
			    in  %% Line 518
				apply 'shutdown_kernel_pid'/4
				    (Pid, BootPid, _cor4, _cor0)
		  end
	      -| ['compiler_generated'] )
	    ( <_cor15> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','state'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'shutdown_pids'/3 =
    %% Line 521
    fun (_cor2,_cor1,_cor0) ->
	%% Line 522
	( case _cor0 of
	    ( <( {'state',_rec34,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <Timer> =
		      apply 'shutdown_timer'/1
			  (_rec34)
		  in  do  catch
			      %% Line 523
			      apply 'shutdown'/4
				  (_cor13, _cor1, Timer, _cor0)
			  do  %% Line 524
			      apply 'kill_all_pids'/1
				  (_cor2)
			      do  %% Line 525
				  apply 'kill_all_ports'/1
				      (_cor2)
				  %% Line 526
				  apply 'flush_timout'/1
				      (Timer)
	      -| ['compiler_generated'] )
	    ( <_cor19> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','state'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'get_heart'/1 =
    %% Line 528
    fun (_cor0) ->
	case _cor0 of
	  <[{'heart',Pid}|_X_Kernel]> when 'true' ->
	      Pid
	  %% Line 529
	  <[_cor2|Kernel]> when 'true' ->
	      apply 'get_heart'/1
		  (Kernel)
	  %% Line 530
	  <_cor3> when 'true' ->
	      'false'
	end
'shutdown'/4 =
    %% Line 533
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[{'heart',_X_Pid}|Kernel],BootPid,Timer,State> when 'true' ->
	      %% Line 534
	      apply 'shutdown'/4
		  (Kernel, BootPid, Timer, State)
	  %% Line 535
	  <[{_X_Name,Pid}|Kernel],BootPid,Timer,State> when 'true' ->
	      do  %% Line 536
		  apply 'shutdown_kernel_pid'/4
		      (Pid, BootPid, Timer, State)
		  %% Line 537
		  apply 'shutdown'/4
		      (Kernel, BootPid, Timer, State)
	  %% Line 538
	  <_cor8,_cor9,_cor10,_cor11> when 'true' ->
	      %% Line 539
	      'true'
	end
'shutdown_kernel_pid'/4 =
    %% Line 546
    fun (_cor3,_cor2,_cor1,_cor0) ->
	do  %% Line 547
	    call 'erlang':'!'
		(_cor3, {'EXIT',_cor2,'shutdown'})
	    %% Line 548
	    apply 'shutdown_loop'/4
		(_cor3, _cor1, _cor0, [])
'shutdown_loop'/4 =
    %% Line 556
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 557
	receive
	  %% Line 558
	  <{'EXIT',_cor12,_cor13}>
	      when call 'erlang':'=:='
		    (_cor12,
		     _cor3) ->
	      let <_cor4> =
		  %% Line 559
		  apply 'reverse'/1
		      (_cor0)
	      in  do  %% Line 559
		      apply 'resend'/1
			  (_cor4)
		      %% Line 560
		      'ok'
	  %% Line 561
	  <{_cor14,'timeout'}>
	      when call 'erlang':'=:='
		    (_cor14,
		     _cor2) ->
	      do  %% Line 562
		  call 'erlang':'display'
		      ({'init','shutdown_timeout'})
		  %% Line 563
		  call 'erlang':'throw'
		      ('timeout')
	  %% Line 564
	  <{'stop',_cor15}> when 'true' ->
	      %% Line 565
	      apply 'shutdown_loop'/4
		  (_cor3, _cor2, _cor1, _cor0)
	  %% Line 566
	  <{From,'fetch_loaded'}> when 'true' ->
	      %% Line 567
	      ( case _cor1 of
		  ( <( {'state',_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_rec36,_cor23}
		       -| ['compiler_generated'] )> when 'true' ->
			do  call 'erlang':'!'
				(From, {'init',_rec36})
			    %% Line 568
			    apply 'shutdown_loop'/4
				(_cor3, _cor2, _cor1, _cor0)
		    -| ['compiler_generated'] )
		  ( <_cor24> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 569
	  <{'EXIT',OtherP,Reason}> when 'true' ->
	      %% Line 570
	      apply 'shutdown_loop'/4
		  (_cor3, _cor2, _cor1, %% Line 571
					[{'EXIT',OtherP,Reason}|_cor0])
	  %% Line 572
	  <Msg> when 'true' ->
	      let <State1> =
		  %% Line 573
		  apply 'handle_msg'/2
		      (Msg, _cor1)
	      in  %% Line 574
		  apply 'shutdown_loop'/4
		      (_cor3, _cor2, State1, _cor0)
	after 'infinity' ->
	  'true'
'resend'/1 =
    %% Line 577
    fun (_cor0) ->
	case _cor0 of
	  <[ExitMsg|Exits]> when 'true' ->
	      let <_cor1> =
		  %% Line 578
		  call 'erlang':'self'
		      ()
	      in  do  %% Line 578
		      call 'erlang':'!'
			  (_cor1, ExitMsg)
		      %% Line 579
		      apply 'resend'/1
			  (Exits)
	  %% Line 580
	  <_cor3> when 'true' ->
	      %% Line 581
	      'ok'
	end
'kill_all_pids'/1 =
    %% Line 585
    fun (_cor0) ->
	%% Line 586
	case apply 'get_pids'/1
		 (_cor0) of
	  %% Line 587
	  <[]> when 'true' ->
	      %% Line 588
	      'ok'
	  %% Line 589
	  <Pids> when 'true' ->
	      do  %% Line 590
		  apply 'kill_em'/1
		      (Pids)
		  %% Line 591
		  apply 'kill_all_pids'/1
		      (_cor0)
	end
'alive_processes'/0 =
    %% Line 595
    fun () ->
	%% Line 596
	( letrec
	      'lc$^0'/1 =
		  fun (_cor3) ->
		      case _cor3 of
			<[P|_cor1]> when 'true' ->
			    ( case call 'erlang':'is_process_alive'
				       (P) of
				<'true'> when 'true' ->
				    let <_cor4> =
					apply 'lc$^0'/1
					    (_cor1)
				    in  ( [P|_cor4]
					  -| ['compiler_generated'] )
				( <'false'> when 'true' ->
				      apply 'lc$^0'/1
					  (_cor1)
				  -| ['compiler_generated'] )
				( <_cor5> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor5})
				  -| ['compiler_generated'] )
			      end
			      -| ['list_comprehension'] )
			<[]> when 'true' ->
			    []
			( <_cor3> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor3})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  let <_cor2> =
		  call 'erlang':'processes'
		      ()
	      in  apply 'lc$^0'/1
		      (_cor2)
	  -| ['list_comprehension'] )
'get_pids'/1 =
    %% Line 598
    fun (_cor0) ->
	let <Pids> =
	    %% Line 599
	    apply 'alive_processes'/0
		()
	in  let <_cor2> =
		%% Line 600
		call 'erlang':'self'
		    ()
	    in  %% Line 600
		apply 'delete'/3
		    (_cor0, _cor2, Pids)
'delete'/3 =
    %% Line 602
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Heart,Init,[_cor7|Pids]>
	      when call 'erlang':'=:='
		    (_cor7,
		     Heart) ->
	      apply 'delete'/3
		  (Heart, Init, Pids)
	  %% Line 603
	  <Heart,Init,[_cor8|Pids]>
	      when call 'erlang':'=:='
		    (_cor8,
		     Init) ->
	      apply 'delete'/3
		  (Heart, Init, Pids)
	  %% Line 604
	  <Heart,Init,[Pid|Pids]> when 'true' ->
	      let <_cor3> =
		  apply 'delete'/3
		      (Heart, Init, Pids)
	      in  [Pid|_cor3]
	  %% Line 605
	  <_cor9,_cor10,[]> when 'true' ->
	      []
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'delete',3}}] )
	    -| ['compiler_generated'] )
	end
'kill_em'/1 =
    %% Line 607
    fun (_cor0) ->
	case _cor0 of
	  <[Pid|Pids]> when 'true' ->
	      do  %% Line 608
		  call 'erlang':'exit'
		      (Pid, 'kill')
		  %% Line 609
		  apply 'kill_em'/1
		      (Pids)
	  %% Line 610
	  <[]> when 'true' ->
	      %% Line 611
	      'ok'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'kill_em',1}}] )
	    -| ['compiler_generated'] )
	end
'kill_all_ports'/1 =
    %% Line 620
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 621
	    call 'erlang':'ports'
		()
	in  %% Line 621
	    apply 'kill_all_ports'/2
		(_cor0, _cor1)
'kill_all_ports'/2 =
    %% Line 623
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Heart,[P|Ps]> when 'true' ->
	      %% Line 624
	      case call 'erlang':'port_info'
		       (P, 'connected') of
		%% Line 625
		<{'connected',_cor5}>
		    when call 'erlang':'=:='
			  (_cor5,
			   Heart) ->
		    %% Line 626
		    apply 'kill_all_ports'/2
			(Heart, Ps)
		%% Line 627
		<_cor6> when 'true' ->
		    do  %% Line 628
			call 'erlang':'exit'
			    (P, 'kill')
			%% Line 629
			apply 'kill_all_ports'/2
			    (Heart, Ps)
	      end
	  %% Line 631
	  <_cor7,_cor8> when 'true' ->
	      %% Line 632
	      'ok'
	end
'unload'/1 =
    %% Line 634
    fun (_cor0) ->
	case _cor0 of
	  <'false'> when 'true' ->
	      let <_cor2> =
		  %% Line 635
		  call 'erlang':'pre_loaded'
		      ()
	      in  let <_cor1> =
		      %% Line 635
		      call 'erlang':'loaded'
			  ()
		  in  let <_cor3> =
			  %% Line 635
			  apply 'sub'/2
			      (_cor2, _cor1)
		      in  %% Line 635
			  apply 'do_unload'/1
			      (_cor3)
	  %% Line 636
	  <_cor8> when 'true' ->
	      let <_cor5> =
		  %% Line 637
		  call 'erlang':'pre_loaded'
		      ()
	      in  let <_cor4> =
		      %% Line 637
		      call 'erlang':'loaded'
			  ()
		  in  let <_cor6> =
			  %% Line 637
			  apply 'sub'/2
			      (['heart'|_cor5], _cor4)
		      in  %% Line 637
			  apply 'do_unload'/1
			      (_cor6)
	end
'do_unload'/1 =
    %% Line 639
    fun (_cor0) ->
	case _cor0 of
	  <[M|Mods]> when 'true' ->
	      do  catch
		      %% Line 640
		      call 'erlang':'purge_module'
			  (M)
		  do  catch
			  %% Line 641
			  call 'erlang':'delete_module'
			      (M)
		      do  catch
			      %% Line 642
			      call 'erlang':'purge_module'
				  (M)
			  %% Line 643
			  apply 'do_unload'/1
			      (Mods)
	  %% Line 644
	  <[]> when 'true' ->
	      do  %% Line 645
		  apply 'purge_all_hipe_refs'/0
		      ()
		  %% Line 646
		  'ok'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'do_unload',1}}] )
	    -| ['compiler_generated'] )
	end
'purge_all_hipe_refs'/0 =
    %% Line 648
    fun () ->
	%% Line 649
	case call 'erlang':'system_info'
		 ('hipe_architecture') of
	  %% Line 650
	  <'undefined'> when 'true' ->
	      'ok'
	  %% Line 651
	  <_cor1> when 'true' ->
	      call 'hipe_bifs':'remove_refs_from'
		  ('all')
	end
'sub'/2 =
    %% Line 655
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[H|T],L> when 'true' ->
	      let <_cor2> =
		  apply 'del'/2
		      (H, L)
	      in  apply 'sub'/2
		      (T, _cor2)
	  %% Line 656
	  <[],L> when 'true' ->
	      L
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'sub',2}}] )
	    -| ['compiler_generated'] )
	end
'del'/2 =
    %% Line 658
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Item,[_cor5|T]>
	      when call 'erlang':'=:='
		    (_cor5,
		     Item) ->
	      T
	  %% Line 659
	  <Item,[H|T]> when 'true' ->
	      let <_cor2> =
		  apply 'del'/2
		      (Item, T)
	      in  [H|_cor2]
	  %% Line 660
	  <_X_Item,[]> when 'true' ->
	      []
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'del',2}}] )
	    -| ['compiler_generated'] )
	end
'terminate'/3 =
    %% Line 672
    fun (_cor2,_cor1,_cor0) ->
	%% Line 673
	case apply 'kernel_pid'/2
		 (_cor2, _cor1) of
	  %% Line 674
	  <{'ok',Name}> when 'true' ->
	      do  %% Line 675
		  apply 'sleep'/1
		      (500)
		  do  %% Line 676
		      call 'erlang':'display'
			  ({[75|[101|[114|[110|[101|[108|[32|[112|[105|[100|[32|[116|[101|[114|[109|[105|[110|[97|[116|[101|[100]]]]]]]]]]]]]]]]]]]]],Name,_cor0})
		      %% Line 677
		      apply 'crash'/2
			  ([75|[101|[114|[110|[101|[108|[32|[112|[105|[100|[32|[116|[101|[114|[109|[105|[110|[97|[116|[101|[100]]]]]]]]]]]]]]]]]]]]], [Name|[_cor0|[]]])
	  %% Line 678
	  <_cor7> when 'true' ->
	      %% Line 679
	      'false'
	end
'kernel_pid'/2 =
    %% Line 682
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Pid,[{Name,_cor4}|_cor5]>
	      when call 'erlang':'=:='
		    (_cor4,
		     Pid) ->
	      %% Line 683
	      {'ok',Name}
	  %% Line 684
	  <Pid,[_cor6|T]> when 'true' ->
	      %% Line 685
	      apply 'kernel_pid'/2
		  (Pid, T)
	  %% Line 686
	  <_cor7,_cor8> when 'true' ->
	      %% Line 687
	      'false'
	end
'sleep'/1 =
    %% Line 689
    fun (_cor0) ->
	receive
	  
	after _cor0 ->
	  'ok'
'start_prim_loader'/6 =
    %% Line 696
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Init,Id,Pgm,Nodes,Path,{Pa,Pz}> when 'true' ->
	      %% Line 697
	      case call 'erl_prim_loader':'start'
		       (Id, Pgm, Nodes) of
		%% Line 698
		<{'ok',Pid}>
		    when call 'erlang':'=:='
			  (Path,
			   'false') ->
		    let <InitPath> =
			%% Line 699
			apply 'append'/2
			    (Pa, [[46]|Pz])
		    in  do  %% Line 700
			    call 'erl_prim_loader':'set_path'
				(InitPath)
			    do  %% Line 701
				apply 'add_to_kernel'/2
				    (Init, Pid)
				%% Line 702
				Pid
		%% Line 703
		<{'ok',Pid}> when 'true' ->
		    do  %% Line 704
			call 'erl_prim_loader':'set_path'
			    (Path)
			do  %% Line 705
			    apply 'add_to_kernel'/2
				(Init, Pid)
			    %% Line 706
			    Pid
		%% Line 707
		<{'error',Reason}> when 'true' ->
		    do  %% Line 708
			call 'erlang':'display'
			    ({[99|[97|[110|[110|[111|[116|[32|[115|[116|[97|[114|[116|[32|[108|[111|[97|[100|[101|[114]]]]]]]]]]]]]]]]]]],Reason})
			%% Line 709
			call 'erlang':'exit'
			    (Reason)
		( <_cor7> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor7})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor13,_cor12,_cor11,_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11,_cor10,_cor9,_cor8})
		  -| [{'function_name',{'start_prim_loader',6}}] )
	    -| ['compiler_generated'] )
	end
'add_to_kernel'/2 =
    %% Line 712
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 713
	    call 'erlang':'self'
		()
	in  do  %% Line 713
		call 'erlang':'!'
		    (_cor1, {_cor2,'started',{'erl_prim_loader',{'ok',_cor0}}})
		%% Line 714
		receive
		  %% Line 715
		  <{_cor5,'ok',_cor6}>
		      when let <_cor7> =
			    call 'erlang':'=:='
				(_cor5, _cor1)
			in  let <_cor8> =
				call 'erlang':'=:='
				    (_cor6, _cor0)
			    in  call 'erlang':'and'
				    (_cor7, _cor8) ->
		      do  %% Line 716
			  call 'erlang':'unlink'
			      (_cor0)
			  %% Line 717
			  'ok'
		after 'infinity' ->
		  'true'
'prim_load_flags'/1 =
    %% Line 720
    fun (_cor0) ->
	let <PortPgm> =
	    %% Line 721
	    apply 'get_flag'/3
		('-loader', _cor0, #{#<101>(8,1,'integer',['unsigned'|['big']]),
				     #<102>(8,1,'integer',['unsigned'|['big']]),
				     #<105>(8,1,'integer',['unsigned'|['big']]),
				     #<108>(8,1,'integer',['unsigned'|['big']]),
				     #<101>(8,1,'integer',['unsigned'|['big']])}#)
	in  let <Hosts> =
		%% Line 722
		apply 'get_flag_list'/3
		    ('-hosts', _cor0, [])
	    in  let <Id> =
		    %% Line 723
		    apply 'get_flag'/3
			('-id', _cor0, 'none')
		in  let <Path> =
			%% Line 724
			apply 'get_flag_list'/3
			    ('-path', _cor0, 'false')
		    in  %% Line 725
			{PortPgm,Hosts,Id,Path}
'do_boot'/2 =
    %% Line 733
    fun (_cor1,_cor0) ->
	let <Self> =
	    %% Line 734
	    call 'erlang':'self'
		()
	in  let <_cor3> =
		%% Line 735
		( fun () ->
		      apply 'do_boot'/3
			  (Self, _cor1, _cor0)
		  -| [{'id',{0,0,'-do_boot/2-fun-0-'}}] )
	    in  %% Line 735
		call 'erlang':'spawn_link'
		    (_cor3)
'do_boot'/3 =
    %% Line 737
    fun (_cor2,_cor1,_cor0) ->
	do  %% Line 738
	    call 'erlang':'process_flag'
		('trap_exit', 'true')
	    %% Line 739
	    case apply 'prim_load_flags'/1
		     (_cor1) of
	      <{Pgm0,Nodes,Id,Path}> when 'true' ->
		  let <_cor4> =
		      %% Line 740
		      apply 'get_flag'/2
			  ('-root', _cor1)
		  in  let <Root> =
			  %% Line 740
			  apply 'b2s'/1
			      (_cor4)
		      in  let <PathFls> =
			      %% Line 741
			      apply 'path_flags'/1
				  (_cor1)
			  in  let <Pgm> =
				  %% Line 742
				  apply 'b2s'/1
				      (Pgm0)
			      in  let <_cor10> =
				      %% Line 743
				      apply 'b2a'/1
					  (Id)
				  in  let <_cor9> =
					  %% Line 743
					  apply 'bs2as'/1
					      (Nodes)
				      in  let <_cor8> =
					      %% Line 744
					      apply 'bs2ss'/1
						  (Path)
					  in  let <_X_Pid> =
						  %% Line 743
						  apply 'start_prim_loader'/6
						      (_cor2, _cor10, Pgm, _cor9, _cor8, %% Line 744
											 PathFls)
					      in  let <BootFile> =
						      %% Line 745
						      apply 'bootfile'/2
							  (_cor1, Root)
						  in  let <BootList> =
							  %% Line 746
							  apply 'get_boot'/2
							      (BootFile, Root)
						      in  let <_cor14> =
							      %% Line 747
							      apply 'get_flag'/3
								  ('-mode', _cor1, 'false')
							  in  let <LoadMode> =
								  %% Line 747
								  apply 'b2a'/1
								      (_cor14)
							      in  let <_cor16> =
								      %% Line 748
								      apply 'get_flag'/3
									  ('-init_debug', _cor1, 'false')
								  in  let <Deb> =
									  %% Line 748
									  apply 'b2a'/1
									      (_cor16)
								      in  do  catch
										  %% Line 749
										  call 'erlang':'!'
										      ('init__boot__on_load_handler', {'init_debug_flag',Deb})
									      let <BootVars> =
										  %% Line 750
										  apply 'get_flag_args'/2
										      ('-boot_var', _cor1)
									      in  let <_cor21> =
										      %% Line 752
										      call 'erlang':'=:='
											  (Pgm, [101|[102|[105|[108|[101]]]]])
										  in  let <_cor19> =
											  %% Line 752
											  call 'erlang':'system_info'
											      ('thread_pool_size')
										      in  let <_cor20> =
											      %% Line 752
											      call 'erlang':'>'
												  (_cor19, 0)
											  in  let <ParallelLoad> =
												  %% Line 752
												  call 'erlang':'and'
												      (_cor21, _cor20)
											      in  let <PathChoice> =
												      %% Line 754
												      apply 'code_path_choice'/0
													  ()
												  in  do  %% Line 755
													  apply 'eval_script'/8
													      (BootList, _cor2, PathFls, {Root,BootVars}, Path, %% Line 756
																				{'true',LoadMode,ParallelLoad}, %% Line 756
																								Deb, %% Line 756
																								     PathChoice)
													  do  catch
														  let <_cor24> =
														      %% Line 760
														      call 'erlang':'node'
															  ()
														  in  let <_cor25> =
															  %% Line 760
															  call 'erlang':'atom_to_list'
															      (_cor24)
														      in  let <_cor26> =
															      %% Line 760
															      call 'erlang':'++'
																  ([78|[111|[100|[101|[58|[32]]]]]], _cor25)
															  in  %% Line 760
															      call 'erlang':'system_info'
																  ({'purify',_cor26})
													      %% Line 762
													      apply 'start_em'/1
														  (_cor0)
	      ( <_cor3> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor3})
		-| ['compiler_generated'] )
	    end
'bootfile'/2 =
    %% Line 764
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 765
	    apply 'concat'/1
		([_cor0|[[47|[98|[105|[110|[47|[115|[116|[97|[114|[116]]]]]]]]]]]])
	in  let <_cor3> =
		%% Line 765
		apply 'get_flag'/3
		    ('-boot', _cor1, _cor2)
	    in  %% Line 765
		apply 'b2s'/1
		    (_cor3)
'path_flags'/1 =
    %% Line 767
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 768
	    apply 'get_flag_args'/2
		('-pa', _cor0)
	in  let <_cor2> =
		%% Line 768
		apply 'reverse'/1
		    (_cor1)
	    in  let <Pa> =
		    %% Line 768
		    apply 'append'/1
			(_cor2)
		in  let <_cor4> =
			%% Line 769
			apply 'get_flag_args'/2
			    ('-pz', _cor0)
		    in  let <Pz> =
			    %% Line 769
			    apply 'append'/1
				(_cor4)
			in  let <_cor7> =
				%% Line 770
				apply 'bs2ss'/1
				    (Pa)
			    in  let <_cor6> =
				    %% Line 770
				    apply 'bs2ss'/1
					(Pz)
				in  %% Line 770
				    {_cor7,_cor6}
'get_boot'/2 =
    %% Line 772
    fun (_cor1,_cor0) ->
	let <BootFile> =
	    %% Line 773
	    apply 'concat'/1
		([_cor1|[[46|[98|[111|[111|[116]]]]]]])
	in  %% Line 774
	    case apply 'get_boot'/1
		     (BootFile) of
	      %% Line 775
	      <{'ok',CmdList}> when 'true' ->
		  %% Line 776
		  CmdList
	      %% Line 777
	      <'not_found'> when 'true' ->
		  let <BootF> =
		      %% Line 778
		      apply 'concat'/1
			  ([_cor0|[[47|[98|[105|[110|[47]]]]]|[BootFile|[]]]])
		  in  %% Line 779
		      case apply 'get_boot'/1
			       (BootF) of
			%% Line 780
			<{'ok',CmdList}> when 'true' ->
			    %% Line 781
			    CmdList
			%% Line 782
			<'not_found'> when 'true' ->
			    let <_cor4> =
				%% Line 783
				call 'erlang':'list_to_atom'
				    (BootFile)
			    in  %% Line 783
				call 'erlang':'exit'
				    ({'cannot get bootfile',_cor4})
			%% Line 784
			<_cor11> when 'true' ->
			    let <_cor5> =
				%% Line 785
				call 'erlang':'list_to_atom'
				    (BootF)
			    in  %% Line 785
				call 'erlang':'exit'
				    ({'bootfile format error',_cor5})
		      end
	      %% Line 787
	      <_cor12> when 'true' ->
		  let <_cor7> =
		      %% Line 788
		      call 'erlang':'list_to_atom'
			  (BootFile)
		  in  %% Line 788
		      call 'erlang':'exit'
			  ({'bootfile format error',_cor7})
	    end
'get_boot'/1 =
    %% Line 791
    fun (_cor0) ->
	%% Line 792
	case call 'erl_prim_loader':'get_file'
		 (_cor0) of
	  %% Line 793
	  <{'ok',Bin,_cor5}> when 'true' ->
	      %% Line 794
	      case call 'erlang':'binary_to_term'
		       (Bin) of
		%% Line 795
		<{'script',Id,CmdList}>
		    when call 'erlang':'is_list'
			  (CmdList) ->
		    let <_cor1> =
			%% Line 796
			call 'erlang':'self'
			    ()
		    in  do  %% Line 796
			    call 'erlang':'!'
				('init', {_cor1,{'script_id',Id}})
			    %% Line 797
			    {'ok',CmdList}
		%% Line 798
		<_cor6> when 'true' ->
		    %% Line 799
		    'error'
	      end
	  %% Line 801
	  <_cor7> when 'true' ->
	      %% Line 802
	      'not_found'
	end
'eval_script'/8 =
    %% Line 812
    fun (_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[{'progress',Info}|CfgL],Init,PathFs,Vars,P,Ph,Deb,PathChoice> when 'true' ->
	      do  %% Line 813
		  apply 'debug'/2
		      (Deb, {'progress',Info})
		  let <_cor8> =
		      %% Line 814
		      call 'erlang':'self'
			  ()
		  in  do  %% Line 814
			  call 'erlang':'!'
			      ('init', {_cor8,'progress',Info})
			  %% Line 815
			  apply 'eval_script'/8
			      (CfgL, Init, PathFs, Vars, P, Ph, Deb, PathChoice)
	  %% Line 816
	  <[{'preLoaded',_cor19}|CfgL],Init,PathFs,Vars,P,Ph,Deb,PathChoice> when 'true' ->
	      %% Line 817
	      apply 'eval_script'/8
		  (CfgL, Init, PathFs, Vars, P, Ph, Deb, PathChoice)
	  %% Line 818
	  <[{'path',Path}|CfgL],Init,{Pa,Pz},Vars,'false',Ph,Deb,PathChoice> when 'true' ->
	      let <RealPath0> =
		  %% Line 819
		  apply 'make_path'/4
		      (Pa, Pz, Path, Vars)
	      in  let <RealPath> =
		      %% Line 820
		      apply 'patch_path'/2
			  (RealPath0, PathChoice)
		  in  do  %% Line 821
			  call 'erl_prim_loader':'set_path'
			      (RealPath)
			  %% Line 822
			  apply 'eval_script'/8
			      (CfgL, Init, {Pa,Pz}, Vars, 'false', Ph, Deb, PathChoice)
	  %% Line 823
	  <[{'path',_cor20}|CfgL],Init,PathFs,Vars,P,Ph,Deb,PathChoice> when 'true' ->
	      %% Line 825
	      apply 'eval_script'/8
		  (CfgL, Init, PathFs, Vars, P, Ph, Deb, PathChoice)
	  %% Line 826
	  <[{'kernel_load_completed'}|CfgL],Init,PathFs,Vars,P,{_cor21,'embedded',Par},Deb,PathChoice> when 'true' ->
	      %% Line 827
	      apply 'eval_script'/8
		  (CfgL, Init, PathFs, Vars, P, {'true','embedded',Par}, Deb, PathChoice)
	  %% Line 828
	  <[{'kernel_load_completed'}|CfgL],Init,PathFs,Vars,P,{_cor22,E,Par},Deb,PathChoice> when 'true' ->
	      %% Line 829
	      apply 'eval_script'/8
		  (CfgL, Init, PathFs, Vars, P, {'false',E,Par}, Deb, PathChoice)
	  %% Line 830
	  <[{'primLoad',Mods}|CfgL],Init,PathFs,Vars,P,{'true',E,Par},Deb,PathChoice>
	      when %% Line 831
		call 'erlang':'is_list'
		    (Mods) ->
	      do  %% Line 832
		  case <> of
		    %% Line 833
		    <>
			when call 'erlang':'=:='
			      (Par,
			       'true') ->
			%% Line 834
			apply 'par_load_modules'/2
			    (Mods, Init)
		    %% Line 835
		    <> when 'true' ->
			%% Line 836
			apply 'load_modules'/1
			    (Mods)
		  end
		  %% Line 838
		  apply 'eval_script'/8
		      (CfgL, Init, PathFs, Vars, P, {'true',E,Par}, Deb, PathChoice)
	  %% Line 839
	  <[{'primLoad',_X_Mods}|CfgL],Init,PathFs,Vars,P,{'false',E,Par},Deb,PathChoice> when 'true' ->
	      %% Line 841
	      apply 'eval_script'/8
		  (CfgL, Init, PathFs, Vars, P, {'false',E,Par}, Deb, PathChoice)
	  %% Line 842
	  <[{'kernelProcess',Server,{Mod,Fun,Args}}|CfgL],Init,%% Line 843
							       PathFs,%% Line 843
								      Vars,%% Line 843
									   P,%% Line 843
									     Ph,%% Line 843
										Deb,%% Line 843
										    PathChoice> when 'true' ->
	      do  %% Line 844
		  apply 'debug'/2
		      (Deb, {'start',Server})
		  do  %% Line 845
		      apply 'start_in_kernel'/5
			  (Server, Mod, Fun, Args, Init)
		      %% Line 846
		      apply 'eval_script'/8
			  (CfgL, Init, PathFs, Vars, P, Ph, Deb, PathChoice)
	  %% Line 847
	  <[{'apply',{Mod,Fun,Args}}|CfgL],Init,PathFs,Vars,P,Ph,Deb,PathChoice> when 'true' ->
	      do  %% Line 848
		  apply 'debug'/2
		      (Deb, {'apply',{Mod,Fun,Args}})
		  do  %% Line 849
		      call 'erlang':'apply'
			  (Mod, Fun, Args)
		      %% Line 850
		      apply 'eval_script'/8
			  (CfgL, Init, PathFs, Vars, P, Ph, Deb, PathChoice)
	  %% Line 851
	  <[],_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29> when 'true' ->
	      %% Line 852
	      'ok'
	  %% Line 853
	  <What,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36> when 'true' ->
	      %% Line 854
	      call 'erlang':'exit'
		  ({'unexpected command in bootfile',What})
	end
'load_modules'/1 =
    %% Line 856
    fun (_cor0) ->
	case _cor0 of
	  <[Mod|Mods]> when 'true' ->
	      let <_cor1> =
		  %% Line 857
		  apply 'objfile_extension'/0
		      ()
	      in  let <File> =
		      %% Line 857
		      apply 'concat'/1
			  ([Mod|[_cor1|[]]])
		  in  %% Line 858
		      case apply 'load_mod'/2
			       (Mod, File) of
			<{'ok',Full}> when 'true' ->
			    let <_cor4> =
				%% Line 859
				call 'erlang':'self'
				    ()
			    in  do  %% Line 859
				    call 'erlang':'!'
					('init', {_cor4,'loaded',{Mod,Full}})
				    %% Line 860
				    apply 'load_modules'/1
					(Mods)
			( <_cor3> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor3})
			  -| ['compiler_generated'] )
		      end
	  %% Line 861
	  <[]> when 'true' ->
	      %% Line 862
	      'ok'
	  ( <_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5})
		  -| [{'function_name',{'load_modules',1}}] )
	    -| ['compiler_generated'] )
	end
'par_load_modules'/2 =
    %% Line 878
    fun (_cor1,_cor0) ->
	let <Ext> =
	    %% Line 879
	    apply 'objfile_extension'/0
		()
	in  let <_cor10> =
		%% Line 880
		( letrec
		      'lc$^0'/1 =
			  fun (_cor6) ->
			      case _cor6 of
				<[Mod|_cor4]> when 'true' ->
				    %% Line 881
				    ( case call 'erlang':'module_loaded'
					       (Mod) of
					<'false'> when 'true' ->
					    let <_cor7> =
						apply 'concat'/1
						    ([Mod|[Ext|[]]])
					    in  let <_cor8> =
						    apply 'lc$^0'/1
							(_cor4)
						in  ( [{Mod,_cor7}|_cor8]
						      -| ['compiler_generated'] )
					( <'true'> when 'true' ->
					      apply 'lc$^0'/1
						  (_cor4)
					  -| ['compiler_generated'] )
					( <_cor_variable> when 'true' ->
					      call 'erlang':'error'
						  ('badarg')
					  -| ['compiler_generated'] )
				      end
				      -| ['list_comprehension'] )
				<[]> when 'true' ->
				    []
				( <_cor6> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_cor6})
					-| [{'function_name',{'lc$^0',1}}] )
				  -| ['compiler_generated'] )
			      end
		  in  apply 'lc$^0'/1
			  (_cor1)
		  -| ['list_comprehension'] )
	    in  let <Self> =
		    %% Line 882
		    call 'erlang':'self'
			()
		in  let <Fun> =
			%% Line 883
			( fun (_cor17,_cor16,_cor15) ->
			      let <_cor13> =
				  catch
				      %% Line 884
				      apply 'load_mod_code'/3
					  (_cor17, _cor16, _cor15)
			      in  %% Line 884
				  case _cor13 of
				    %% Line 885
				    <{'ok',_cor25}> when 'true' ->
					do  %% Line 886
					    call 'erlang':'!'
						(_cor0, {Self,'loaded',{_cor17,_cor15}})
					    %% Line 887
					    'ok'
				    %% Line 888
				    <_X_EXIT> when 'true' ->
					%% Line 889
					{'error',_cor17}
				  end
			  -| [{'id',{0,0,'-par_load_modules/2-fun-0-'}}] )
		    in  %% Line 892
			case call 'erl_prim_loader':'get_files'
				 (_cor10, Fun) of
			  %% Line 893
			  <'ok'> when 'true' ->
			      %% Line 894
			      'ok'
			  %% Line 895
			  <{'error',Mod}> when 'true' ->
			      %% Line 896
			      call 'erlang':'exit'
				  ({'cannot load',Mod,'get_files'})
			  ( <_cor22> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor22})
			    -| ['compiler_generated'] )
			end
'make_path'/4 =
    %% Line 899
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 900
	    apply 'fix_path'/2
		(_cor1, _cor0)
	in  let <_cor5> =
		%% Line 900
		apply 'append'/1
		    ([_cor4|[_cor2|[]]])
	    in  %% Line 900
		apply 'append'/1
		    ([_cor3|[_cor5|[]]])
'fix_path'/2 =
    %% Line 906
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[Path|Ps],Vars>
	      when call 'erlang':'is_atom'
		    (Path) ->
	      let <_cor2> =
		  %% Line 907
		  call 'erlang':'atom_to_list'
		      (Path)
	      in  let <_cor3> =
		      %% Line 907
		      apply 'add_var'/2
			  (_cor2, Vars)
		  in  let <_cor4> =
			  %% Line 907
			  apply 'fix_path'/2
			      (Ps, Vars)
		      in  %% Line 907
			  [_cor3|_cor4]
	  %% Line 908
	  <[Path|Ps],Vars> when 'true' ->
	      let <_cor5> =
		  %% Line 909
		  apply 'add_var'/2
		      (Path, Vars)
	      in  let <_cor6> =
		      %% Line 909
		      apply 'fix_path'/2
			  (Ps, Vars)
		  in  %% Line 909
		      [_cor5|_cor6]
	  %% Line 910
	  <_cor9,_cor10> when 'true' ->
	      %% Line 911
	      []
	end
'add_var'/2 =
    %% Line 913
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[36|[82|[79|[79|[84|[47|Path]]]]]],{Root,_cor8}> when 'true' ->
	      %% Line 914
	      apply 'concat'/1
		  ([Root|[[47]|[Path|[]]]])
	  %% Line 915
	  <[36|Path0],{_cor9,VarList}> when 'true' ->
	      %% Line 916
	      case apply 'extract_var'/2
		       (Path0, []) of
		<{Var,Path}> when 'true' ->
		    let <_cor3> =
			%% Line 917
			call 'erlang':'list_to_binary'
			    (Var)
		    in  let <_cor4> =
			    %% Line 917
			    apply 'get_var_value'/2
				(_cor3, VarList)
			in  let <Value> =
				%% Line 917
				apply 'b2s'/1
				    (_cor4)
			    in  %% Line 918
				apply 'concat'/1
				    ([Value|[[47]|[Path|[]]]])
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 919
	  <Path,_cor10> when 'true' ->
	      %% Line 920
	      Path
	end
'extract_var'/2 =
    %% Line 922
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[47|Path],Var> when 'true' ->
	      let <_cor2> =
		  apply 'reverse'/1
		      (Var)
	      in  {_cor2,Path}
	  %% Line 923
	  <[H|T],Var> when 'true' ->
	      apply 'extract_var'/2
		  (T, [H|Var])
	  %% Line 924
	  <[],Var> when 'true' ->
	      let <_cor3> =
		  apply 'reverse'/1
		      (Var)
	      in  {_cor3,[]}
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'extract_var',2}}] )
	    -| ['compiler_generated'] )
	end
'get_var_value'/2 =
    %% Line 927
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Var,[Vars|VarList]> when 'true' ->
	      %% Line 928
	      case apply 'get_var_val'/2
		       (Var, Vars) of
		%% Line 929
		<{'ok',Value}> when 'true' ->
		    %% Line 930
		    Value
		%% Line 931
		<_cor7> when 'true' ->
		    %% Line 932
		    apply 'get_var_value'/2
			(Var, VarList)
	      end
	  %% Line 934
	  <Var,[]> when 'true' ->
	      let <_cor3> =
		  %% Line 935
		  apply 'concat'/1
		      ([[99|[97|[110|[110|[111|[116|[32|[101|[120|[112|[97|[110|[100|[32|[36]]]]]]]]]]]]]]]|[Var|[[32|[105|[110|[32|[98|[111|[111|[116|[102|[105|[108|[101]]]]]]]]]]]]]]])
	      in  let <_cor4> =
		      %% Line 935
		      call 'erlang':'list_to_atom'
			  (_cor3)
		  in  %% Line 935
		      call 'erlang':'exit'
			  (_cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'get_var_value',2}}] )
	    -| ['compiler_generated'] )
	end
'get_var_val'/2 =
    %% Line 937
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Var,[_cor4|[Value|_cor5]]>
	      when call 'erlang':'=:='
		    (_cor4,
		     Var) ->
	      {'ok',Value}
	  %% Line 938
	  <Var,[_cor6|[_cor7|Vars]]> when 'true' ->
	      apply 'get_var_val'/2
		  (Var, Vars)
	  %% Line 939
	  <_cor8,_cor9> when 'true' ->
	      'false'
	end
'patch_path'/2 =
    %% Line 941
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Dirs,'strict'> when 'true' ->
	      %% Line 942
	      Dirs
	  %% Line 943
	  <Dirs,'relaxed'> when 'true' ->
	      let <ArchiveExt> =
		  %% Line 944
		  apply 'archive_extension'/0
		      ()
	      in  %% Line 945
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor5) ->
				case _cor5 of
				  <[Dir|_cor4]> when 'true' ->
				      let <_cor6> =
					  apply 'patch_dir'/2
					      (Dir, ArchiveExt)
				      in  let <_cor7> =
					      apply 'lc$^0'/1
						  (_cor4)
					  in  ( [_cor6|_cor7]
						-| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor5> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor5})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (Dirs)
		    -| ['list_comprehension'] )
	  ( <_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8})
		  -| [{'function_name',{'patch_path',2}}] )
	    -| ['compiler_generated'] )
	end
'patch_dir'/2 =
    %% Line 947
    fun (_cor1,_cor0) ->
	%% Line 948
	case apply 'funny_split'/2
		 (_cor1, 47) of
	  %% Line 949
	  <[[110|[105|[98|[101]]]]|[RevApp|[RevArchive|RevTop]]]> when 'true' ->
	      let <App> =
		  %% Line 950
		  apply 'reverse'/1
		      (RevApp)
	      in  let <_cor60,Archive,Dir> =
		      %% Line 951
		      case apply 'funny_splitwith'/2
			       (RevArchive, 46) of
			%% Line 952
			<{Ext,Base}>
			    when let <_cor3> =
				  call 'erlang':'=:='
				      (Ext, _cor0)
			      in  let <_cor4> =
				      call 'erlang':'=:='
					  (Base, App)
				  in  call 'erlang':'and'
					  (_cor3, _cor4) ->
			    let <_cor10> =
				%% Line 954
				( letrec
				      'lc$^0'/1 =
					  fun (_cor7) ->
					      case _cor7 of
						<[C|_cor6]> when 'true' ->
						    let <_cor8> =
							apply 'reverse'/1
							    (C)
						    in  let <_cor9> =
							    apply 'lc$^0'/1
								(_cor6)
							in  ( [_cor8|_cor9]
							      -| ['compiler_generated'] )
						<[]> when 'true' ->
						    []
						( <_cor7> when 'true' ->
						      ( primop 'match_fail'
							    ({'function_clause',_cor7})
							-| [{'function_name',{'lc$^0',1}}] )
						  -| ['compiler_generated'] )
					      end
				  in  apply 'lc$^0'/1
					  (RevTop)
				  -| ['list_comprehension'] )
			    in  let <Top> =
				    %% Line 954
				    apply 'reverse'/1
					(_cor10)
				in  let <_cor12> =
					%% Line 955
					call 'erlang':'++'
					    (Top, [App|[[101|[98|[105|[110]]]]]])
				    in  let <Dir> =
					    %% Line 955
					    apply 'join'/2
						(_cor12, [47])
					in  <_cor1,_cor1,Dir>
			%% Line 957
			<_cor32> when 'true' ->
			    let <_cor20> =
				%% Line 959
				( letrec
				      'lc$^1'/1 =
					  fun (_cor17) ->
					      case _cor17 of
						<[C|_cor16]> when 'true' ->
						    let <_cor18> =
							apply 'reverse'/1
							    (C)
						    in  let <_cor19> =
							    apply 'lc$^1'/1
								(_cor16)
							in  ( [_cor18|_cor19]
							      -| ['compiler_generated'] )
						<[]> when 'true' ->
						    []
						( <_cor17> when 'true' ->
						      ( primop 'match_fail'
							    ({'function_clause',_cor17})
							-| [{'function_name',{'lc$^1',1}}] )
						  -| ['compiler_generated'] )
					      end
				  in  apply 'lc$^1'/1
					  ([RevArchive|RevTop])
				  -| ['list_comprehension'] )
			    in  let <Top> =
				    %% Line 959
				    apply 'reverse'/1
					(_cor20)
				in  let <_cor22> =
					%% Line 960
					call 'erlang':'++'
					    (App, _cor0)
				    in  let <_cor23> =
					    %% Line 960
					    call 'erlang':'++'
						(Top, [_cor22|[App|[[101|[98|[105|[110]]]]]]])
					in  let <Archive> =
						%% Line 960
						apply 'join'/2
						    (_cor23, [47])
					    in  <_cor1,Archive,_cor1>
		      end
		  in  %% Line 964
		      case call 'erl_prim_loader':'read_file_info'
			       (Dir) of
			%% Line 965
			<{'ok',{'file_info',_cor33,'directory',_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44}}> when 'true' ->
			    %% Line 966
			    Dir
			%% Line 967
			<_cor45> when 'true' ->
			    %% Line 968
			    case call 'erl_prim_loader':'read_file_info'
				     (Archive) of
			      %% Line 969
			      <{'ok',{'file_info',_cor46,'directory',_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57}}> when 'true' ->
				  %% Line 970
				  Archive
			      %% Line 971
			      <_cor58> when 'true' ->
				  _cor1
			    end
		      end
	  %% Line 975
	  <_cor59> when 'true' ->
	      _cor1
	end
'funny_split'/2 =
    %% Line 980
    fun (_cor1,_cor0) ->
	%% Line 981
	apply 'funny_split'/4
	    (_cor1, _cor0, [], [])
'funny_split'/4 =
    %% Line 983
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[Sep|Tail],_cor8,Path,Paths>
	      when call 'erlang':'=:='
		    (_cor8,
		     Sep) ->
	      %% Line 984
	      apply 'funny_split'/4
		  (Tail, Sep, [], [Path|Paths])
	  %% Line 985
	  <[Head|Tail],Sep,Path,Paths> when 'true' ->
	      %% Line 986
	      apply 'funny_split'/4
		  (Tail, Sep, [Head|Path], Paths)
	  %% Line 987
	  <[],_X_Sep,Path,Paths> when 'true' ->
	      %% Line 988
	      [Path|Paths]
	  ( <_cor7,_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5,_cor4})
		  -| [{'function_name',{'funny_split',4}}] )
	    -| ['compiler_generated'] )
	end
'funny_splitwith'/2 =
    %% Line 991
    fun (_cor1,_cor0) ->
	%% Line 992
	apply 'funny_splitwith'/4
	    (_cor1, _cor0, [], _cor1)
'funny_splitwith'/4 =
    %% Line 994
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[Sep|Tail],_cor8,Acc,_X_Orig>
	      when call 'erlang':'=:='
		    (_cor8,
		     Sep) ->
	      %% Line 995
	      {Acc,Tail}
	  %% Line 996
	  <[Head|Tail],Sep,Acc,Orig> when 'true' ->
	      %% Line 997
	      apply 'funny_splitwith'/4
		  (Tail, Sep, [Head|Acc], Orig)
	  %% Line 998
	  <[],_X_Sep,_X_Acc,Orig> when 'true' ->
	      %% Line 999
	      {[],Orig}
	  ( <_cor7,_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5,_cor4})
		  -| [{'function_name',{'funny_splitwith',4}}] )
	    -| ['compiler_generated'] )
	end
'join'/2 =
    %% Line 1002
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[H1|[H2|T]],S> when 'true' ->
	      let <_cor2> =
		  %% Line 1003
		  apply 'join'/2
		      ([H2|T], S)
	      in  let <_cor3> =
		      %% Line 1003
		      call 'erlang':'++'
			  (S, _cor2)
		  in  %% Line 1003
		      call 'erlang':'++'
			  (H1, _cor3)
	  %% Line 1004
	  <[H|[]],_cor6> when 'true' ->
	      %% Line 1005
	      H
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'join',2}}] )
	    -| ['compiler_generated'] )
	end
'start_in_kernel'/5 =
    %% Line 1010
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <Res> =
	    %% Line 1011
	    call 'erlang':'apply'
		(_cor3, _cor2, _cor1)
	in  let <_cor6> =
		%% Line 1012
		call 'erlang':'self'
		    ()
	    in  do  %% Line 1012
		    call 'erlang':'!'
			(_cor0, {_cor6,'started',{_cor4,Res}})
		    %% Line 1013
		    receive
		      %% Line 1014
		      <{_cor12,'ok',Pid}>
			  when call 'erlang':'=:='
				(_cor12,
				 _cor0) ->
			  do  %% Line 1015
			      call 'erlang':'unlink'
				  (Pid)
			      %% Line 1016
			      'ok'
		      %% Line 1017
		      <{_cor13,'ignore'}>
			  when call 'erlang':'=:='
				(_cor13,
				 _cor0) ->
			  %% Line 1018
			  'ignore'
		    after 'infinity' ->
		      'true'
'start_em'/1 =
    %% Line 1030
    fun (_cor0) ->
	case _cor0 of
	  <[S|Tail]> when 'true' ->
	      do  %% Line 1031
		  case call 'erlang':'whereis'
			   ('user') of
		    %% Line 1032
		    <'undefined'> when 'true' ->
			'ok'
		    %% Line 1034
		    <P>
			when call 'erlang':'is_pid'
			      (P) ->
			let <_cor1> =
			    %% Line 1035
			    call 'erlang':'self'
				()
			in  %% Line 1035
			    call 'erlang':'group_leader'
				(P, _cor1)
		    ( <_cor2> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor2})
		      -| ['compiler_generated'] )
		  end
		  do  %% Line 1037
		      apply 'start_it'/1
			  (S)
		      %% Line 1038
		      apply 'start_em'/1
			  (Tail)
	  %% Line 1039
	  <[]> when 'true' ->
	      'ok'
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'start_em',1}}] )
	    -| ['compiler_generated'] )
	end
'start_it'/1 =
    %% Line 1041
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      %% Line 1042
	      'ok'
	  %% Line 1043
	  <{'eval',Bin}> when 'true' ->
	      let <Str> =
		  %% Line 1044
		  apply 'b2s'/1
		      (Bin)
	      in  %% Line 1045
		  case call 'erl_scan':'string'
			   (Str) of
		    <{'ok',Ts,_cor15}> when 'true' ->
			let <_cor4> =
			    %% Line 1046
			    case apply 'reverse'/1
				     (Ts) of
			      %% Line 1047
			      <[{'dot',_cor16}|_cor17]> when 'true' ->
				  Ts
			      %% Line 1048
			      <TsR> when 'true' ->
				  apply 'reverse'/1
				      ([{'dot',1}|TsR])
			    end
			in  %% Line 1050
			    case call 'erl_parse':'parse_exprs'
				     (_cor4) of
			      <{'ok',Expr}> when 'true' ->
				  let <_cor7> =
				      %% Line 1051
				      call 'erl_eval':'new_bindings'
					  ()
				  in  %% Line 1051
				      case call 'erl_eval':'exprs'
					       (Expr, _cor7) of
					<{'value',_X_Value,_X_Bs}> when 'true' ->
					    %% Line 1052
					    'ok'
					( <_cor8> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_cor8})
					  -| ['compiler_generated'] )
				      end
			      ( <_cor6> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor6})
				-| ['compiler_generated'] )
			    end
		    ( <_cor2> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor2})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1053
	  <MFA = [_cor18|_cor19]> when 'true' ->
	      let <Ref> =
		  %% Line 1054
		  call 'erlang':'make_ref'
		      ()
	      in  let <_cor12> =
		      catch
			  let <_cor11> =
			      %% Line 1055
			      case MFA of
				%% Line 1056
				<[M|[]]> when 'true' ->
				    call M:'start'
					()
				%% Line 1057
				<[M|[F|[]]]> when 'true' ->
				    call M:F
					()
				%% Line 1058
				<[M|[F|Args]]> when 'true' ->
				    call M:F
					(Args)
				( <_cor10> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor10})
				  -| ['compiler_generated'] )
			      end
			  in  %% Line 1055
			      {Ref,_cor11}
		  in  %% Line 1055
		      case _cor12 of
			%% Line 1060
			<{_cor20,R}>
			    when call 'erlang':'=:='
				  (_cor20,
				   Ref) ->
			    %% Line 1061
			    R
			%% Line 1062
			<{'EXIT',Reason}> when 'true' ->
			    %% Line 1063
			    call 'erlang':'exit'
				(Reason)
			%% Line 1064
			<Other> when 'true' ->
			    %% Line 1065
			    call 'erlang':'throw'
				(Other)
		      end
	  ( <_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14})
		  -| [{'function_name',{'start_it',1}}] )
	    -| ['compiler_generated'] )
	end
'load_mod'/2 =
    %% Line 1071
    fun (_cor1,_cor0) ->
	%% Line 1072
	case call 'erlang':'module_loaded'
		 (_cor1) of
	  %% Line 1073
	  <'false'> when 'true' ->
	      %% Line 1074
	      case call 'erl_prim_loader':'get_file'
		       (_cor0) of
		%% Line 1075
		<{'ok',BinCode,FullName}> when 'true' ->
		    %% Line 1076
		    apply 'load_mod_code'/3
			(_cor1, BinCode, FullName)
		%% Line 1077
		<_cor6> when 'true' ->
		    %% Line 1078
		    call 'erlang':'exit'
			({'cannot load',_cor1,'get_file'})
	      end
	  %% Line 1080
	  <_cor7> when 'true' ->
	      %% Line 1081
	      {'ok',_cor0}
	end
'load_mod_code'/3 =
    %% Line 1084
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1085
	case call 'erlang':'module_loaded'
		 (_cor2) of
	  %% Line 1086
	  <'false'> when 'true' ->
	      %% Line 1087
	      case call 'erlang':'load_module'
		       (_cor2, _cor1) of
		%% Line 1088
		<{'module',_cor8}>
		    when call 'erlang':'=:='
			  (_cor8,
			   _cor2) ->
		    {'ok',_cor0}
		%% Line 1089
		<{'error','on_load'}> when 'true' ->
		    do  %% Line 1090
			call 'erlang':'!'
			    ('init__boot__on_load_handler', {'loaded',_cor2})
			%% Line 1091
			{'ok',_cor0}
		%% Line 1092
		<Other> when 'true' ->
		    %% Line 1093
		    call 'erlang':'exit'
			({'cannot load',_cor2,Other})
	      end
	  %% Line 1095
	  <_cor9> when 'true' ->
	      %% Line 1096
	      {'ok',_cor0}
	end
'shutdown_timer'/1 =
    %% Line 1106
    fun (_cor0) ->
	%% Line 1107
	case apply 'get_flag'/3
		 ('-shutdown_time', _cor0, 'infinity') of
	  %% Line 1108
	  <'infinity'> when 'true' ->
	      %% Line 1109
	      call 'erlang':'self'
		  ()
	  %% Line 1110
	  <Time> when 'true' ->
	      let <_cor2> =
		  catch
		      let <_cor1> =
			  %% Line 1111
			  call 'erlang':'binary_to_list'
			      (Time)
		      in  %% Line 1111
			  call 'erlang':'list_to_integer'
			      (_cor1)
	      in  %% Line 1111
		  case _cor2 of
		    %% Line 1112
		    <T>
			when call 'erlang':'is_integer'
			      (_cor2) ->
			let <_cor3> =
			    %% Line 1113
			    ( fun () ->
				  apply 'timer'/1
				      (T)
			      -| [{'id',{0,0,'-shutdown_timer/1-fun-0-'}}] )
			in  let <Pid> =
				%% Line 1113
				call 'erlang':'spawn'
				    (_cor3)
			    in  %% Line 1114
				receive
				  %% Line 1115
				  <{_cor8,'started'}>
				      when call 'erlang':'=:='
					    (_cor8,
					     Pid) ->
				      %% Line 1116
				      Pid
				after 'infinity' ->
				  'true'
		    %% Line 1118
		    <_cor9> when 'true' ->
			%% Line 1119
			call 'erlang':'self'
			    ()
		  end
	end
'flush_timout'/1 =
    %% Line 1123
    fun (_cor0) ->
	%% Line 1124
	receive
	  %% Line 1125
	  <{_cor2,'timeout'}>
	      when call 'erlang':'=:='
		    (_cor2,
		     _cor0) ->
	      'true'
	after %% Line 1126
	      0 ->
	  %% Line 1126
	  'true'
'timer'/1 =
    %% Line 1129
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 1130
	    call 'erlang':'self'
		()
	in  do  %% Line 1130
		call 'erlang':'!'
		    ('init', {_cor1,'started'})
		%% Line 1131
		receive
		  
		after _cor0 ->
		  let <_cor2> =
		      %% Line 1133
		      call 'erlang':'self'
			  ()
		  in  %% Line 1133
		      call 'erlang':'!'
			  ('init', {_cor2,'timeout'})
'parse_boot_args'/1 =
    %% Line 1141
    fun (_cor0) ->
	%% Line 1142
	apply 'parse_boot_args'/4
	    (_cor0, [], [], [])
'parse_boot_args'/4 =
    %% Line 1144
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[B|Bs],Ss,Fs,As> when 'true' ->
	      %% Line 1145
	      case apply 'check'/1
		       (B) of
		%% Line 1146
		<'start_extra_arg'> when 'true' ->
		    let <_cor6> =
			%% Line 1147
			apply 'reverse'/1
			    (Ss)
		    in  let <_cor5> =
			    %% Line 1147
			    apply 'reverse'/1
				(Fs)
			in  let <_cor4> =
				%% Line 1147
				call 'lists':'reverse'
				    (As, Bs)
			    in  %% Line 1147
				{_cor6,_cor5,_cor4}
		%% Line 1148
		<'start_arg'> when 'true' ->
		    %% Line 1149
		    case apply 'get_args'/2
			     (Bs, []) of
		      <{S,Rest}> when 'true' ->
			  %% Line 1150
			  apply 'parse_boot_args'/4
			      (Rest, [{'s',S}|Ss], Fs, As)
		      ( <_cor7> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor7})
			-| ['compiler_generated'] )
		    end
		%% Line 1151
		<'start_arg2'> when 'true' ->
		    %% Line 1152
		    case apply 'get_args'/2
			     (Bs, []) of
		      <{S,Rest}> when 'true' ->
			  %% Line 1153
			  apply 'parse_boot_args'/4
			      (Rest, [{'run',S}|Ss], Fs, As)
		      ( <_cor8> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor8})
			-| ['compiler_generated'] )
		    end
		%% Line 1154
		<'eval_arg'> when 'true' ->
		    %% Line 1155
		    case apply 'get_args'/2
			     (Bs, []) of
		      <{Expr,Rest}> when 'true' ->
			  %% Line 1156
			  apply 'parse_boot_args'/4
			      (Rest, [{'eval',Expr}|Ss], Fs, As)
		      ( <_cor9> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor9})
			-| ['compiler_generated'] )
		    end
		%% Line 1157
		<'flag'> when 'true' ->
		    %% Line 1158
		    case apply 'get_args'/2
			     (Bs, []) of
		      <{F,Rest}> when 'true' ->
			  let <_cor12> =
			      %% Line 1159
			      case F of
				%% Line 1160
				<[]> when 'true' ->
				    [B|[]]
				%% Line 1161
				<FF> when 'true' ->
				    [B|[FF|[]]]
			      end
			  in  let <_cor14> =
				  %% Line 1164
				  call 'erlang':'list_to_tuple'
				      (_cor12)
			      in  %% Line 1163
				  apply 'parse_boot_args'/4
				      (Rest, Ss, %% Line 1164
						 [_cor14|Fs], %% Line 1164
							      As)
		      ( <_cor10> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor10})
			-| ['compiler_generated'] )
		    end
		%% Line 1165
		<'arg'> when 'true' ->
		    %% Line 1166
		    apply 'parse_boot_args'/4
			(Bs, Ss, Fs, [B|As])
		%% Line 1167
		<'end_args'> when 'true' ->
		    %% Line 1168
		    apply 'parse_boot_args'/4
			(Bs, Ss, Fs, As)
		( <_cor15> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor15})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1170
	  <[],Start,Flags,Args> when 'true' ->
	      let <_cor18> =
		  %% Line 1171
		  apply 'reverse'/1
		      (Start)
	      in  let <_cor17> =
		      %% Line 1171
		      apply 'reverse'/1
			  (Flags)
		  in  let <_cor16> =
			  %% Line 1171
			  apply 'reverse'/1
			      (Args)
		      in  %% Line 1171
			  {_cor18,_cor17,_cor16}
	  ( <_cor22,_cor21,_cor20,_cor19> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor22,_cor21,_cor20,_cor19})
		  -| [{'function_name',{'parse_boot_args',4}}] )
	    -| ['compiler_generated'] )
	end
'check'/1 =
    %% Line 1173
    fun (_cor0) ->
	case _cor0 of
	  <#{#<45>(8,1,'integer',['unsigned'|['big']]),
	     #<101>(8,1,'integer',['unsigned'|['big']]),
	     #<120>(8,1,'integer',['unsigned'|['big']]),
	     #<116>(8,1,'integer',['unsigned'|['big']]),
	     #<114>(8,1,'integer',['unsigned'|['big']]),
	     #<97>(8,1,'integer',['unsigned'|['big']])}#> when 'true' ->
	      'start_extra_arg'
	  %% Line 1174
	  <#{#<45>(8,1,'integer',['unsigned'|['big']]),
	     #<115>(8,1,'integer',['unsigned'|['big']])}#> when 'true' ->
	      'start_arg'
	  %% Line 1175
	  <#{#<45>(8,1,'integer',['unsigned'|['big']]),
	     #<114>(8,1,'integer',['unsigned'|['big']]),
	     #<117>(8,1,'integer',['unsigned'|['big']]),
	     #<110>(8,1,'integer',['unsigned'|['big']])}#> when 'true' ->
	      'start_arg2'
	  %% Line 1176
	  <#{#<45>(8,1,'integer',['unsigned'|['big']]),
	     #<101>(8,1,'integer',['unsigned'|['big']]),
	     #<118>(8,1,'integer',['unsigned'|['big']]),
	     #<97>(8,1,'integer',['unsigned'|['big']]),
	     #<108>(8,1,'integer',['unsigned'|['big']])}#> when 'true' ->
	      'eval_arg'
	  %% Line 1177
	  <#{#<45>(8,1,'integer',['unsigned'|['big']]),
	     #<45>(8,1,'integer',['unsigned'|['big']])}#> when 'true' ->
	      'end_args'
	  %% Line 1178
	  <X>
	      when call 'erlang':'is_binary'
		    (_cor0) ->
	      %% Line 1179
	      case call 'erlang':'binary_to_list'
		       (X) of
		%% Line 1180
		<[45|_X_Rest]> when 'true' ->
		    'flag'
		%% Line 1181
		<_X_Chars> when 'true' ->
		    'arg'
	      end
	  %% Line 1183
	  <_X_X> when 'true' ->
	      'arg'
	end
'get_args'/2 =
    %% Line 1185
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[B|Bs],As> when 'true' ->
	      %% Line 1186
	      case apply 'check'/1
		       (B) of
		%% Line 1187
		<'start_extra_arg'> when 'true' ->
		    let <_cor2> =
			apply 'reverse'/1
			    (As)
		    in  {_cor2,[B|Bs]}
		%% Line 1188
		<'start_arg'> when 'true' ->
		    let <_cor3> =
			apply 'reverse'/1
			    (As)
		    in  {_cor3,[B|Bs]}
		%% Line 1189
		<'start_arg2'> when 'true' ->
		    let <_cor4> =
			apply 'reverse'/1
			    (As)
		    in  {_cor4,[B|Bs]}
		%% Line 1190
		<'eval_arg'> when 'true' ->
		    let <_cor5> =
			apply 'reverse'/1
			    (As)
		    in  {_cor5,[B|Bs]}
		%% Line 1191
		<'end_args'> when 'true' ->
		    let <_cor6> =
			apply 'reverse'/1
			    (As)
		    in  {_cor6,Bs}
		%% Line 1192
		<'flag'> when 'true' ->
		    let <_cor7> =
			apply 'reverse'/1
			    (As)
		    in  {_cor7,[B|Bs]}
		%% Line 1193
		<'arg'> when 'true' ->
		    %% Line 1194
		    apply 'get_args'/2
			(Bs, [B|As])
		( <_cor8> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor8})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1196
	  <[],As> when 'true' ->
	      let <_cor9> =
		  apply 'reverse'/1
		      (As)
	      in  {_cor9,[]}
	  ( <_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10})
		  -| [{'function_name',{'get_args',2}}] )
	    -| ['compiler_generated'] )
	end
'get_flag'/3 =
    %% Line 1204
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    catch
		%% Line 1205
		apply 'get_flag'/2
		    (_cor2, _cor1)
	in  %% Line 1205
	    case _cor3 of
	      %% Line 1206
	      <{'EXIT',_cor8}> when 'true' ->
		  _cor0
	      %% Line 1208
	      <Value> when 'true' ->
		  %% Line 1209
		  Value
	    end
'get_flag'/2 =
    %% Line 1212
    fun (_cor1,_cor0) ->
	%% Line 1213
	case apply 'search'/2
		 (_cor1, _cor0) of
	  %% Line 1214
	  <{'value',{_cor7,[V|[]]}}>
	      when call 'erlang':'=:='
		    (_cor7,
		     _cor1) ->
	      %% Line 1215
	      V
	  %% Line 1216
	  <{'value',{_cor8,V}}>
	      when call 'erlang':'=:='
		    (_cor8,
		     _cor1) ->
	      %% Line 1217
	      V
	  %% Line 1218
	  <{'value',{_cor9}}>
	      when call 'erlang':'=:='
		    (_cor9,
		     _cor1) ->
	      %% Line 1219
	      'true'
	  %% Line 1220
	  <_cor10> when 'true' ->
	      let <_cor2> =
		  %% Line 1221
		  apply 'concat'/1
		      ([[110|[111|[32]]]|[_cor1|[[32|[102|[108|[97|[103]]]]]]]])
	      in  let <_cor3> =
		      %% Line 1221
		      call 'erlang':'list_to_atom'
			  (_cor2)
		  in  %% Line 1221
		      call 'erlang':'exit'
			  (_cor3)
	end
'get_flag_list'/3 =
    %% Line 1228
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    catch
		%% Line 1229
		apply 'get_flag_list'/2
		    (_cor2, _cor1)
	in  %% Line 1229
	    case _cor3 of
	      %% Line 1230
	      <{'EXIT',_cor8}> when 'true' ->
		  _cor0
	      %% Line 1232
	      <Value> when 'true' ->
		  %% Line 1233
		  Value
	    end
'get_flag_list'/2 =
    %% Line 1236
    fun (_cor1,_cor0) ->
	%% Line 1237
	case apply 'search'/2
		 (_cor1, _cor0) of
	  %% Line 1238
	  <{'value',{_cor7,V}}>
	      when call 'erlang':'=:='
		    (_cor7,
		     _cor1) ->
	      %% Line 1239
	      V
	  %% Line 1240
	  <_cor8> when 'true' ->
	      let <_cor2> =
		  %% Line 1241
		  apply 'concat'/1
		      ([[110|[111|[32]]]|[_cor1|[[32|[102|[108|[97|[103]]]]]]]])
	      in  let <_cor3> =
		      %% Line 1241
		      call 'erlang':'list_to_atom'
			  (_cor2)
		  in  %% Line 1241
		      call 'erlang':'exit'
			  (_cor3)
	end
'get_flag_args'/2 =
    %% Line 1249
    fun (_cor1,_cor0) ->
	apply 'get_flag_args'/3
	    (_cor1, _cor0, [])
'get_flag_args'/3 =
    %% Line 1251
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <F,[{_cor6,V}|Flags],Acc>
	      when let <_cor7> =
		    call 'erlang':'=:='
			(_cor6, F)
		in  let <_cor8> =
			call 'erlang':'is_list'
			    (V)
		    in  call 'erlang':'and'
			    (_cor7, _cor8) ->
	      %% Line 1252
	      apply 'get_flag_args'/3
		  (F, Flags, [V|Acc])
	  %% Line 1253
	  <F,[{_cor9,V}|Flags],Acc>
	      when call 'erlang':'=:='
		    (_cor9,
		     F) ->
	      %% Line 1254
	      apply 'get_flag_args'/3
		  (F, Flags, [[V|[]]|Acc])
	  %% Line 1255
	  <F,[_cor10|Flags],Acc> when 'true' ->
	      %% Line 1256
	      apply 'get_flag_args'/3
		  (F, Flags, Acc)
	  %% Line 1257
	  <_cor11,[],Acc> when 'true' ->
	      %% Line 1258
	      apply 'reverse'/1
		  (Acc)
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'get_flag_args',3}}] )
	    -| ['compiler_generated'] )
	end
'get_arguments'/1 =
    %% Line 1260
    fun (_cor0) ->
	case _cor0 of
	  <[{F,V}|Flags]> when 'true' ->
	      %% Line 1261
	      case call 'erlang':'atom_to_list'
		       (F) of
		<[45|Fl]> when 'true' ->
		    let <_cor3> =
			%% Line 1262
			call 'erlang':'list_to_atom'
			    (Fl)
		    in  let <_cor2> =
			    %% Line 1262
			    apply 'to_strings'/1
				(V)
			in  let <_cor4> =
				%% Line 1262
				apply 'get_arguments'/1
				    (Flags)
			    in  %% Line 1262
				[{_cor3,_cor2}|_cor4]
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1263
	  <[{F}|Flags]> when 'true' ->
	      %% Line 1264
	      case call 'erlang':'atom_to_list'
		       (F) of
		<[45|Fl]> when 'true' ->
		    let <_cor6> =
			%% Line 1265
			call 'erlang':'list_to_atom'
			    (Fl)
		    in  let <_cor7> =
			    %% Line 1265
			    apply 'get_arguments'/1
				(Flags)
			in  %% Line 1265
			    [{_cor6,[]}|_cor7]
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1266
	  <[]> when 'true' ->
	      %% Line 1267
	      []
	  ( <_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8})
		  -| [{'function_name',{'get_arguments',1}}] )
	    -| ['compiler_generated'] )
	end
'to_strings'/1 =
    %% Line 1269
    fun (_cor0) ->
	case _cor0 of
	  <[H|T]>
	      when call 'erlang':'is_atom'
		    (H) ->
	      let <_cor1> =
		  call 'erlang':'atom_to_list'
		      (H)
	      in  let <_cor2> =
		      apply 'to_strings'/1
			  (T)
		  in  [_cor1|_cor2]
	  %% Line 1270
	  <[H|T]>
	      when call 'erlang':'is_binary'
		    (H) ->
	      let <_cor3> =
		  apply 'b2s'/1
		      (H)
	      in  let <_cor4> =
		      apply 'to_strings'/1
			  (T)
		  in  [_cor3|_cor4]
	  %% Line 1271
	  <[]> when 'true' ->
	      []
	  ( <_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5})
		  -| [{'function_name',{'to_strings',1}}] )
	    -| ['compiler_generated'] )
	end
'get_argument'/2 =
    %% Line 1273
    fun (_cor1,_cor0) ->
	let <Args> =
	    %% Line 1274
	    apply 'get_arguments'/1
		(_cor0)
	in  %% Line 1275
	    case apply 'get_argument1'/2
		     (_cor1, Args) of
	      %% Line 1276
	      <[]> when 'true' ->
		  %% Line 1277
		  'error'
	      %% Line 1278
	      <Value> when 'true' ->
		  %% Line 1279
		  {'ok',Value}
	    end
'get_argument1'/2 =
    %% Line 1282
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Arg,[{_cor5,V}|Args]>
	      when call 'erlang':'=:='
		    (_cor5,
		     Arg) ->
	      let <_cor2> =
		  %% Line 1283
		  apply 'get_argument1'/2
		      (Arg, Args)
	      in  %% Line 1283
		  [V|_cor2]
	  %% Line 1284
	  <Arg,[_cor6|Args]> when 'true' ->
	      %% Line 1285
	      apply 'get_argument1'/2
		  (Arg, Args)
	  %% Line 1286
	  <_cor7,[]> when 'true' ->
	      %% Line 1287
	      []
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'get_argument1',2}}] )
	    -| ['compiler_generated'] )
	end
'set_argument'/3 =
    %% Line 1289
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[{Flag,_cor7}|Flags],_cor8,Value>
	      when call 'erlang':'=:='
		    (_cor8,
		     Flag) ->
	      %% Line 1290
	      [{Flag,[Value|[]]}|Flags]
	  %% Line 1291
	  <[{Flag}|Flags],_cor9,Value>
	      when call 'erlang':'=:='
		    (_cor9,
		     Flag) ->
	      %% Line 1292
	      [{Flag,[Value|[]]}|Flags]
	  %% Line 1293
	  <[Item|Flags],Flag,Value> when 'true' ->
	      let <_cor3> =
		  %% Line 1294
		  apply 'set_argument'/3
		      (Flags, Flag, Value)
	      in  %% Line 1294
		  [Item|_cor3]
	  %% Line 1295
	  <[],Flag,Value> when 'true' ->
	      %% Line 1296
	      [{Flag,[Value|[]]}|[]]
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'set_argument',3}}] )
	    -| ['compiler_generated'] )
	end
'concat'/1 =
    %% Line 1298
    fun (_cor0) ->
	case _cor0 of
	  <[A|T]>
	      when call 'erlang':'is_atom'
		    (A) ->
	      let <_cor2> =
		  %% Line 1299
		  call 'erlang':'atom_to_list'
		      (A)
	      in  let <_cor1> =
		      %% Line 1299
		      apply 'concat'/1
			  (T)
		  in  %% Line 1299
		      call 'erlang':'++'
			  (_cor2, _cor1)
	  %% Line 1300
	  <[C|T]>
	      when try
		    let <_cor3> =
			call 'erlang':'is_integer'
			    (C)
		    in  let <_cor4> =
			    call 'erlang':'=<'
				(0, C)
			in  let <_cor5> =
				call 'erlang':'=<'
				    (C, 255)
			    in  let <_cor6> =
				    call 'erlang':'and'
					(_cor4, _cor5)
				in  call 'erlang':'and'
					(_cor3, _cor6)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor7> =
		  %% Line 1301
		  apply 'concat'/1
		      (T)
	      in  %% Line 1301
		  [C|_cor7]
	  %% Line 1302
	  <[Bin|T]>
	      when call 'erlang':'is_binary'
		    (Bin) ->
	      let <_cor9> =
		  %% Line 1303
		  call 'erlang':'binary_to_list'
		      (Bin)
	      in  let <_cor8> =
		      %% Line 1303
		      apply 'concat'/1
			  (T)
		  in  %% Line 1303
		      call 'erlang':'++'
			  (_cor9, _cor8)
	  %% Line 1304
	  <[S|T]> when 'true' ->
	      let <_cor10> =
		  %% Line 1305
		  apply 'concat'/1
		      (T)
	      in  %% Line 1305
		  call 'erlang':'++'
		      (S, _cor10)
	  %% Line 1306
	  <[]> when 'true' ->
	      %% Line 1307
	      []
	  ( <_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11})
		  -| [{'function_name',{'concat',1}}] )
	    -| ['compiler_generated'] )
	end
'append'/2 =
    %% Line 1309
    fun (_cor1,_cor0) ->
	call 'erlang':'++'
	    (_cor1, _cor0)
'append'/1 =
    %% Line 1311
    fun (_cor0) ->
	case _cor0 of
	  <[E|[]]> when 'true' ->
	      E
	  %% Line 1312
	  <[H|T]> when 'true' ->
	      let <_cor1> =
		  %% Line 1313
		  apply 'append'/1
		      (T)
	      in  %% Line 1313
		  call 'erlang':'++'
		      (H, _cor1)
	  %% Line 1314
	  <[]> when 'true' ->
	      []
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'append',1}}] )
	    -| ['compiler_generated'] )
	end
'reverse'/1 =
    %% Line 1316
    fun (_cor0) ->
	case _cor0 of
	  <L = []> when 'true' ->
	      %% Line 1317
	      L
	  %% Line 1318
	  <L = [_cor2|[]]> when 'true' ->
	      %% Line 1319
	      L
	  %% Line 1320
	  <[A|[B|[]]]> when 'true' ->
	      %% Line 1321
	      [B|[A|[]]]
	  %% Line 1322
	  <[A|[B|L]]> when 'true' ->
	      %% Line 1323
	      call 'lists':'reverse'
		  (L, [B|[A|[]]])
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'reverse',1}}] )
	    -| ['compiler_generated'] )
	end
'search'/2 =
    %% Line 1325
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Key,[H|_X_T]>
	      when try
		    let <_cor2> =
			call 'erlang':'is_tuple'
			    (H)
		    in  let <_cor3> =
			    call 'erlang':'element'
				(1, H)
			in  let <_cor4> =
				call 'erlang':'=:='
				    (_cor3, Key)
			    in  call 'erlang':'and'
				    (_cor2, _cor4)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 1326
	      {'value',H}
	  %% Line 1327
	  <Key,[_cor7|T]> when 'true' ->
	      %% Line 1328
	      apply 'search'/2
		  (Key, T)
	  %% Line 1329
	  <_X_Key,[]> when 'true' ->
	      %% Line 1330
	      'false'
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'search',2}}] )
	    -| ['compiler_generated'] )
	end
'objfile_extension'/0 =
    %% Line 1333
    fun () ->
	%% Line 1334
	[46|[98|[101|[97|[109]]]]]
'archive_extension'/0 =
    %% Line 1342
    fun () ->
	%% Line 1343
	[46|[101|[122]]]
'run_on_load_handlers'/0 =
    %% Line 1349
    fun () ->
	let <Ref> =
	    %% Line 1350
	    call 'erlang':'monitor'
		('process', 'init__boot__on_load_handler')
	in  do  catch
		    %% Line 1351
		    call 'erlang':'!'
			('init__boot__on_load_handler', 'run_on_load')
		%% Line 1352
		receive
		  %% Line 1353
		  <{'DOWN',_cor1,'process',_cor2,'noproc'}>
		      when call 'erlang':'=:='
			    (_cor1,
			     Ref) ->
		      %% Line 1358
		      'ok'
		  %% Line 1359
		  <{'DOWN',_cor3,'process',_cor4,'on_load_done'}>
		      when call 'erlang':'=:='
			    (_cor3,
			     Ref) ->
		      %% Line 1360
		      'ok'
		  %% Line 1361
		  <{'DOWN',_cor5,'process',_cor6,Res}>
		      when call 'erlang':'=:='
			    (_cor5,
			     Ref) ->
		      %% Line 1364
		      call 'erlang':'exit'
			  (Res)
		after 'infinity' ->
		  'true'
'start_on_load_handler_process'/0 =
    %% Line 1367
    fun () ->
	let <_cor0> =
	    %% Line 1369
	    call 'erlang':'spawn'
		(( 'on_load_handler_init'/0
		   -| [{'id',{0,0,'-start_on_load_handler_process/0-fun-0-'}}] ))
	in  %% Line 1368
	    call 'erlang':'register'
		('init__boot__on_load_handler', _cor0)
'on_load_handler_init'/0 =
    %% Line 1371
    fun () ->
	%% Line 1372
	apply 'on_load_loop'/2
	    ([], 'false')
'on_load_loop'/2 =
    %% Line 1374
    fun (_cor1,_cor0) ->
	%% Line 1375
	receive
	  %% Line 1376
	  <{'init_debug_flag',Debug}> when 'true' ->
	      %% Line 1377
	      apply 'on_load_loop'/2
		  (_cor1, Debug)
	  %% Line 1378
	  <{'loaded',Mod}> when 'true' ->
	      %% Line 1379
	      apply 'on_load_loop'/2
		  ([Mod|_cor1], _cor0)
	  %% Line 1380
	  <'run_on_load'> when 'true' ->
	      do  %% Line 1381
		  apply 'run_on_load_handlers'/2
		      (_cor1, _cor0)
		  %% Line 1382
		  call 'erlang':'exit'
		      ('on_load_done')
	after 'infinity' ->
	  'true'
'run_on_load_handlers'/2 =
    %% Line 1385
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[M|Ms],Debug> when 'true' ->
	      do  %% Line 1386
		  apply 'debug'/2
		      (Debug, {'running_on_load_handler',M})
		  let <Fun> =
		      %% Line 1387
		      ( fun () ->
			    let <Res> =
				%% Line 1388
				call 'erlang':'call_on_load_function'
				    (M)
			    in  %% Line 1389
				call 'erlang':'exit'
				    (Res)
			-| [{'id',{0,0,'-run_on_load_handlers/2-fun-0-'}}] )
		  in  %% Line 1391
		      case call 'erlang':'spawn_monitor'
			       (Fun) of
			<{Pid,Ref}> when 'true' ->
			    %% Line 1392
			    receive
			      %% Line 1393
			      <{'DOWN',_cor10,'process',_cor11,OnLoadRes}>
				  when let <_cor12> =
					call 'erlang':'=:='
					    (_cor10, Ref)
				    in  let <_cor13> =
					    call 'erlang':'=:='
						(_cor11, Pid)
					in  call 'erlang':'and'
						(_cor12, _cor13) ->
				  let <Keep> =
				      %% Line 1394
				      call 'erlang':'=:='
					  (OnLoadRes, 'ok')
				  in  do  %% Line 1395
					  call 'erlang':'finish_after_on_load'
					      (M, Keep)
					  %% Line 1396
					  case Keep of
					    %% Line 1397
					    <'false'> when 'true' ->
						let <Error> = {%% Line 1398
						     'on_load_function_failed',%% Line 1398
									       M}
						in  do  %% Line 1399
							apply 'debug'/2
							    (Debug, Error)
							%% Line 1400
							call 'erlang':'exit'
							    (Error)
					    %% Line 1401
					    <'true'> when 'true' ->
						do  %% Line 1402
						    apply 'debug'/2
							(Debug, {'on_load_handler_returned_ok',M})
						    %% Line 1403
						    apply 'run_on_load_handlers'/2
							(Ms, Debug)
					    ( <_cor7> when 'true' ->
						  primop 'match_fail'
						      ({'case_clause',_cor7})
					      -| ['compiler_generated'] )
					  end
			    after 'infinity' ->
			      'true'
			( <_cor4> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor4})
			  -| ['compiler_generated'] )
		      end
	  %% Line 1406
	  <[],_cor14> when 'true' ->
	      'ok'
	  ( <_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8})
		  -| [{'function_name',{'run_on_load_handlers',2}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('init')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('init', _cor0)
end